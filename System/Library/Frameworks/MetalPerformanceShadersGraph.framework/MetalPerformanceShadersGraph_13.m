uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::InParallelOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::InParallelOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getParentResult;
  v2[1] = mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getYieldingOps;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface]";
      v15 = 84;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[168], v2);
}

uint64_t mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getParentResult(uint64_t a1, uint64_t a2, unsigned int a3)
{
  mlir::Block *ParentOp;

  ParentOp = *(mlir::Block **)(a2 + 16);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  if (a3 <= 5)
    return (uint64_t)ParentOp - 16 * a3 - 16;
  else
    return (uint64_t)ParentOp - 24 * a3 + 24;
}

uint64_t mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getYieldingOps(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return *(_QWORD *)(v3 + 40);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getRegionKind;
  v2[1] = mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::hasSSADominance;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[150], v2);
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::getRegionKind()
{
  return 1;
}

uint64_t mlir::detail::RegionKindInterfaceInterfaceTraits::Model<mlir::scf::InParallelOp>::hasSSADominance()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  __guard *v38;
  __guard v39;
  unsigned __int8 v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t *v44;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  const char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  const char *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  const char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  const char *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  const char *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  const char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __guard v196;
  __guard v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __guard v240;
  __guard v241;
  __guard v242;
  __guard v243;
  __guard v244;
  __guard v245;
  __guard v246;
  __guard v247;
  __guard v248;
  __guard v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  const char *v315;
  unint64_t v316;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v300 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v61 = v60;
    a1 = v300;
    if (v61)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v316 = 81;
      v62 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v62)
        v63 = v62;
      else
        v63 = v316;
      v64 = &v315[v63];
      v65 = v316 - v63;
      if (v316 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v316 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v300;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v286 = v3;
    v301 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v70 = v69;
    v3 = v286;
    a1 = v301;
    if (v70)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v316 = 83;
      v71 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v71)
        v72 = v71;
      else
        v72 = v316;
      v73 = &v315[v72];
      v74 = v316 - v72;
      if (v316 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v316 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v286;
      a1 = v301;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v287 = v3;
    v302 = a1;
    v273 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v273;
    v3 = v287;
    v79 = v78;
    a1 = v302;
    if (v79)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v316 = 86;
      v80 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v80)
        v81 = v80;
      else
        v81 = v316;
      v82 = &v315[v81];
      v83 = v316 - v81;
      if (v316 - v81 >= 0x12)
        v84 = 18;
      else
        v84 = v316 - v81;
      v85 = v83 - v84;
      if (v85 >= v85 - 1)
        v86 = v85 - 1;
      else
        v86 = v85;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v273;
      v3 = v287;
      a1 = v302;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v288 = v3;
    v303 = a1;
    v261 = v9;
    v274 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v261;
    v6 = v274;
    v88 = v87;
    v3 = v288;
    a1 = v303;
    if (v88)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v316 = 84;
      v89 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v89)
        v90 = v89;
      else
        v90 = v316;
      v91 = &v315[v90];
      v92 = v316 - v90;
      if (v316 - v90 >= 0x12)
        v93 = 18;
      else
        v93 = v316 - v90;
      v94 = v92 - v93;
      if (v94 >= v94 - 1)
        v95 = v94 - 1;
      else
        v95 = v94;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v261;
      v6 = v274;
      v3 = v288;
      a1 = v303;
    }
  }
  v12 = v11[193];
  if ((v13 & 1) == 0)
  {
    v289 = v3;
    v304 = a1;
    v262 = v9;
    v275 = v6;
    v250 = v12;
    v12 = v250;
    v9 = v262;
    v6 = v275;
    v3 = v289;
    v97 = v96;
    a1 = v304;
    if (v97)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<Empty>]";
      v316 = 108;
      v98 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v98)
        v99 = v98;
      else
        v99 = v316;
      v100 = &v315[v99];
      v101 = v316 - v99;
      if (v316 - v99 >= 0x12)
        v102 = 18;
      else
        v102 = v316 - v99;
      v103 = v101 - v102;
      if (v103 >= v103 - 1)
        v104 = v103 - 1;
      else
        v104 = v103;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      v12 = v250;
      v9 = v262;
      v6 = v275;
      v3 = v289;
      a1 = v304;
    }
  }
  v15 = v14[457];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v290 = v3;
    v305 = a1;
    v263 = v9;
    v276 = v6;
    v251 = v12;
    v240 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v240;
    v12 = v251;
    v9 = v263;
    v6 = v276;
    v3 = v290;
    v106 = v105;
    a1 = v305;
    if (v106)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      v316 = 84;
      v107 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v107)
        v108 = v107;
      else
        v108 = v316;
      v109 = &v315[v108];
      v110 = v316 - v108;
      if (v316 - v108 >= 0x12)
        v111 = 18;
      else
        v111 = v316 - v108;
      v112 = v110 - v111;
      if (v112 >= v112 - 1)
        v113 = v112 - 1;
      else
        v113 = v112;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v240;
      v12 = v251;
      v9 = v263;
      v6 = v276;
      v3 = v290;
      a1 = v305;
    }
  }
  v18 = v17[191];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v291 = v3;
    v306 = a1;
    v264 = v9;
    v277 = v6;
    v252 = v12;
    v231 = v18;
    v241 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v231;
    v15 = v241;
    v12 = v252;
    v9 = v264;
    v6 = v277;
    v3 = v291;
    v115 = v114;
    a1 = v306;
    if (v115)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v316 = 83;
      v116 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v116)
        v117 = v116;
      else
        v117 = v316;
      v118 = &v315[v117];
      v119 = v316 - v117;
      if (v316 - v117 >= 0x12)
        v120 = 18;
      else
        v120 = v316 - v117;
      v121 = v119 - v120;
      if (v121 >= v121 - 1)
        v122 = v121 - 1;
      else
        v122 = v121;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v231;
      v15 = v241;
      v12 = v252;
      v9 = v264;
      v6 = v277;
      v3 = v291;
      a1 = v306;
    }
  }
  v21 = v20[184];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v292 = v3;
    v307 = a1;
    v265 = v9;
    v278 = v6;
    v253 = v12;
    v232 = v18;
    v242 = v15;
    v223 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v223;
    v18 = v232;
    v15 = v242;
    v12 = v253;
    v9 = v265;
    v6 = v278;
    v3 = v292;
    v124 = v123;
    a1 = v307;
    if (v124)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v316 = 84;
      v125 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v125)
        v126 = v125;
      else
        v126 = v316;
      v127 = &v315[v126];
      v128 = v316 - v126;
      if (v316 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v316 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v223;
      v18 = v232;
      v15 = v242;
      v12 = v253;
      v9 = v265;
      v6 = v278;
      v3 = v292;
      a1 = v307;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v293 = v3;
    v308 = a1;
    v266 = v9;
    v279 = v6;
    v254 = v12;
    v233 = v18;
    v243 = v15;
    v216 = v24;
    v224 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v216;
    v21 = v224;
    v18 = v233;
    v15 = v243;
    v12 = v254;
    v9 = v266;
    v6 = v279;
    v3 = v293;
    v133 = v132;
    a1 = v308;
    if (v133)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v316 = 95;
      v134 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v134)
        v135 = v134;
      else
        v135 = v316;
      v136 = &v315[v135];
      v137 = v316 - v135;
      if (v316 - v135 >= 0x12)
        v138 = 18;
      else
        v138 = v316 - v135;
      v139 = v137 - v138;
      if (v139 >= v139 - 1)
        v140 = v139 - 1;
      else
        v140 = v139;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v216;
      v21 = v224;
      v18 = v233;
      v15 = v243;
      v12 = v254;
      v9 = v266;
      v6 = v279;
      v3 = v293;
      a1 = v308;
    }
  }
  v27 = p_vtable[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v294 = v3;
    v309 = a1;
    v267 = v9;
    v280 = v6;
    v255 = v12;
    v234 = v18;
    v244 = v15;
    v217 = v24;
    v225 = v21;
    v210 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v210;
    v24 = v217;
    v21 = v225;
    v18 = v234;
    v15 = v244;
    v12 = v255;
    v9 = v267;
    v6 = v280;
    v3 = v294;
    v142 = v141;
    a1 = v309;
    if (v142)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v316 = 99;
      v143 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v143)
        v144 = v143;
      else
        v144 = v316;
      v145 = &v315[v144];
      v146 = v316 - v144;
      if (v316 - v144 >= 0x12)
        v147 = 18;
      else
        v147 = v316 - v144;
      v148 = v146 - v147;
      if (v148 >= v148 - 1)
        v149 = v148 - 1;
      else
        v149 = v148;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v210;
      v24 = v217;
      v21 = v225;
      v18 = v234;
      v15 = v244;
      v12 = v255;
      v9 = v267;
      v6 = v280;
      v3 = v294;
      a1 = v309;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v295 = v3;
    v310 = a1;
    v268 = v9;
    v281 = v6;
    v256 = v12;
    v235 = v18;
    v245 = v15;
    v218 = v24;
    v226 = v21;
    v205 = v30;
    v211 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v205;
    v27 = v211;
    v24 = v218;
    v21 = v226;
    v18 = v235;
    v15 = v245;
    v12 = v256;
    v9 = v268;
    v6 = v281;
    v3 = v295;
    v151 = v150;
    a1 = v310;
    if (v151)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v316 = 93;
      v152 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v152)
        v153 = v152;
      else
        v153 = v316;
      v154 = &v315[v153];
      v155 = v316 - v153;
      if (v316 - v153 >= 0x12)
        v156 = 18;
      else
        v156 = v316 - v153;
      v157 = v155 - v156;
      if (v157 >= v157 - 1)
        v158 = v157 - 1;
      else
        v158 = v157;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v205;
      v27 = v211;
      v24 = v218;
      v21 = v226;
      v18 = v235;
      v15 = v245;
      v12 = v256;
      v9 = v268;
      v6 = v281;
      v3 = v295;
      a1 = v310;
    }
  }
  v33 = v32[158];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v296 = v3;
    v311 = a1;
    v269 = v9;
    v282 = v6;
    v257 = v12;
    v236 = v18;
    v246 = v15;
    v219 = v24;
    v227 = v21;
    v206 = v30;
    v212 = v27;
    v201 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v201;
    v30 = v206;
    v27 = v212;
    v24 = v219;
    v21 = v227;
    v18 = v236;
    v15 = v246;
    v12 = v257;
    v9 = v269;
    v6 = v282;
    v3 = v296;
    v160 = v159;
    a1 = v311;
    if (v160)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v316 = 84;
      v161 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v161)
        v162 = v161;
      else
        v162 = v316;
      v163 = &v315[v162];
      v164 = v316 - v162;
      if (v316 - v162 >= 0x12)
        v165 = 18;
      else
        v165 = v316 - v162;
      v166 = v164 - v165;
      if (v166 >= v166 - 1)
        v167 = v166 - 1;
      else
        v167 = v166;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v201;
      v30 = v206;
      v27 = v212;
      v24 = v219;
      v21 = v227;
      v18 = v236;
      v15 = v246;
      v12 = v257;
      v9 = v269;
      v6 = v282;
      v3 = v296;
      a1 = v311;
    }
  }
  v36 = v35[190];
  if ((v37 & 1) == 0)
  {
    v297 = v3;
    v312 = a1;
    v270 = v9;
    v283 = v6;
    v258 = v12;
    v237 = v18;
    v247 = v15;
    v220 = v24;
    v228 = v21;
    v207 = v30;
    v213 = v27;
    v198 = v36;
    v202 = v33;
    v36 = v198;
    v33 = v202;
    v30 = v207;
    v27 = v213;
    v24 = v220;
    v21 = v228;
    v18 = v237;
    v15 = v247;
    v12 = v258;
    v9 = v270;
    v6 = v283;
    v3 = v297;
    v169 = v168;
    a1 = v312;
    if (v169)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ParallelCombiningOpInterface::Trait<Empty>]";
      v316 = 98;
      v170 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v170)
        v171 = v170;
      else
        v171 = v316;
      v172 = &v315[v171];
      v173 = v316 - v171;
      if (v316 - v171 >= 0x12)
        v174 = 18;
      else
        v174 = v316 - v171;
      v175 = v173 - v174;
      if (v175 >= v175 - 1)
        v176 = v175 - 1;
      else
        v176 = v175;
      mlir::detail::TypeIDResolver<mlir::ParallelCombiningOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ParallelCombiningOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      v36 = v198;
      v33 = v202;
      v30 = v207;
      v27 = v213;
      v24 = v220;
      v21 = v228;
      v18 = v237;
      v15 = v247;
      v12 = v258;
      v9 = v270;
      v6 = v283;
      v3 = v297;
      a1 = v312;
    }
  }
  v39 = v38[459];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v298 = v3;
    v313 = a1;
    v271 = v9;
    v284 = v6;
    v259 = v12;
    v238 = v18;
    v248 = v15;
    v221 = v24;
    v229 = v21;
    v208 = v30;
    v214 = v27;
    v199 = v36;
    v203 = v33;
    v196 = v39;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v196;
    v36 = v199;
    v33 = v203;
    v30 = v208;
    v27 = v214;
    v24 = v221;
    v21 = v229;
    v18 = v238;
    v15 = v248;
    v12 = v259;
    v9 = v271;
    v6 = v284;
    v3 = v298;
    v178 = v177;
    a1 = v313;
    if (v178)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface::Trait<Empty>]";
      v316 = 89;
      v179 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v179)
        v180 = v179;
      else
        v180 = v316;
      v181 = &v315[v180];
      v182 = v316 - v180;
      if (v316 - v180 >= 0x12)
        v183 = 18;
      else
        v183 = v316 - v180;
      v184 = v182 - v183;
      if (v184 >= v184 - 1)
        v185 = v184 - 1;
      else
        v185 = v184;
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionKindInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v196;
      v36 = v199;
      v33 = v203;
      v30 = v208;
      v27 = v214;
      v24 = v221;
      v21 = v229;
      v18 = v238;
      v15 = v248;
      v12 = v259;
      v9 = v271;
      v6 = v284;
      v3 = v298;
      a1 = v313;
    }
  }
  v42 = v41[149];
  v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v43 & 1) == 0)
  {
    v299 = v3;
    v314 = a1;
    v272 = v9;
    v285 = v6;
    v260 = v12;
    v239 = v18;
    v249 = v15;
    v222 = v24;
    v230 = v21;
    v209 = v30;
    v215 = v27;
    v200 = v36;
    v204 = v33;
    v195 = v42;
    v197 = v39;
    v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v42 = v195;
    v39 = v197;
    v36 = v200;
    v33 = v204;
    v30 = v209;
    v27 = v215;
    v24 = v222;
    v21 = v230;
    v18 = v239;
    v15 = v249;
    v12 = v260;
    v9 = v272;
    v6 = v285;
    v3 = v299;
    v187 = v186;
    a1 = v314;
    if (v187)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasOnlyGraphRegion<Empty>]";
      v316 = 90;
      v188 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v188)
        v189 = v188;
      else
        v189 = v316;
      v190 = &v315[v189];
      v191 = v316 - v189;
      if (v316 - v189 >= 0x12)
        v192 = 18;
      else
        v192 = v316 - v189;
      v193 = v191 - v192;
      if (v193 >= v193 - 1)
        v194 = v193 - 1;
      else
        v194 = v193;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasOnlyGraphRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasOnlyGraphRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      v44 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v42 = v195;
      v39 = v197;
      v36 = v200;
      v33 = v204;
      v30 = v209;
      v27 = v215;
      v24 = v222;
      v21 = v230;
      v18 = v239;
      v15 = v249;
      v12 = v260;
      v9 = v272;
      v6 = v285;
      v3 = v299;
      a1 = v314;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v36 == (_QWORD)a1
      || v39 == (_QWORD)a1
      || v42 == (_QWORD)a1
      || v44[200] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::InParallelOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroResults<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroOperands<mlir::scf::InParallelOp>,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>,mlir::OpTrait::NoTerminator<mlir::scf::InParallelOp>,mlir::OpTrait::SingleBlock<mlir::scf::InParallelOp>,mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::InParallelOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::IsTerminator<mlir::scf::InParallelOp>,mlir::ParallelCombiningOpInterface::Trait<mlir::scf::InParallelOp>,mlir::RegionKindInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::scf::InParallelOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::scf::InParallelOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroResults<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::InParallelOp>,mlir::OpTrait::ZeroOperands<mlir::scf::InParallelOp>,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>,mlir::OpTrait::NoTerminator<mlir::scf::InParallelOp>,mlir::OpTrait::SingleBlock<mlir::scf::InParallelOp>,mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>,mlir::ConditionallySpeculatable::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::scf::InParallelOp>,mlir::MemoryEffectOpInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::IsTerminator<mlir::scf::InParallelOp>,mlir::ParallelCombiningOpInterface::Trait<mlir::scf::InParallelOp>,mlir::RegionKindInterface::Trait<mlir::scf::InParallelOp>,mlir::OpTrait::HasOnlyGraphRegion<mlir::scf::InParallelOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;

  return mlir::OpTrait::impl::verifyOneRegion(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>::verifyTrait((uint64_t *)a1)
      && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
      && mlir::op_definition_impl::verifyTrait<mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>>((uint64_t)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6)
      && mlir::detail::verifyParallelCombiningOpInterface(a1, v7) != 0;
}

BOOL mlir::op_definition_impl::verifyTrait<mlir::OpTrait::OpInvariants<mlir::scf::InParallelOp>>(uint64_t a1)
{
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)a1, ((a1+ 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a1 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a1 + 40), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl<mlir::scf::InParallelOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "scf.forall";
  v37[1] = 10;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::InParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::scf::ForallOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ParallelCombiningOpInterface::Trait,mlir::RegionKindInterface::Trait,mlir::OpTrait::HasOnlyGraphRegion>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getParseAssemblyFn(BOOL (**a1)(void *a1, uint64_t *a2)@<X8>)
{
  *a1 = mlir::scf::IndexSwitchOp::parse;
  a1[3] = (BOOL (*)(void *, uint64_t *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                 + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1702060387 ? (v7 = *(_BYTE *)(a3 + 4) == 115) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1702060387 && *(_BYTE *)(result + 4) == 115)
  {
    if (a4)
    {
      result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"cases", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  _QWORD *v7;

  v7 = (_QWORD *)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v7, (const void **)"cases", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::IndexSwitchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::scf::IndexSwitchOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::IndexSwitchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2;
  mlir::scf::IndexSwitchOp::getEntrySuccessorRegions(&v5, a3, a4, a5);
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::scf::IndexSwitchOp::getSuccessorRegions((uint64_t)&v5, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2;
  mlir::scf::IndexSwitchOp::getRegionInvocationBounds((uint64_t)&v5, a3, a4, a5);
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::IndexSwitchOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::scf::IndexSwitchOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::scf::IndexSwitchOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Context;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v17[8];
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = (uint64_t *)a1;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 44);
  v9 = (uint64_t *)(a1 + 16 * ((v8 >> 23) & 1) + 64);
  v10 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    v11 = (((unint64_t)v9 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v23, v11, v10);
  v16 = v7;
  v17[0] = 0;
  v18 = 0;
  v19 = *v9;
  v20 = *(_OWORD *)v23;
  if (v7)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v16);
    if (v18)
      v18 = 0;
    mlir::OperationName::OperationName(v17, "scf.index_switch", 16, Context);
    v18 = 1;
  }
  v21 = a2;
  v22 = a3;
  return mlir::scf::IndexSwitchOp::fold(&v15, v12, a4);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  __guard *v2;
  __guard v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  __guard *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __guard v136;
  __guard v137;
  __guard v138;
  __guard v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __guard v158;
  __guard v159;
  __guard v160;
  __guard v161;
  __guard v162;
  __guard v163;
  __guard v164;
  __guard v165;
  __guard v166;
  __guard v167;
  __guard v168;
  __guard v169;
  __guard v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNRegions<1>::Impl<Empty>]";
      v186 = 96;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNRegions<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNRegions<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      a1 = v175;
    }
  }
  v3 = v2[461];
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v186 = 87;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[181];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v186 = 83;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[184];
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      v186 = 127;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[439];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[481];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v186 = 97;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[502];
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[23] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::scf::IndexSwitchOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyAtLeastNRegions(a1, (mlir::Operation *)1))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v3))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::scf::IndexSwitchOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::scf::IndexSwitchOp::verify((uint64_t **)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::IndexSwitchOp,mlir::OpTrait::AtLeastNRegions<1u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.parallel", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A030;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::scf::ParallelOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ParallelOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  mlir::Operation *v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unint64_t v8;
  BOOL v9;
  uint64_t v14;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = *(unsigned int *)(a2 + 44);
  if (a4 == 19)
  {
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(_QWORD *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 21)
      return 0;
    v9 = *a3 == 0x5F646E617265706FLL && a3[1] == 0x5F746E656D676573;
    if (!v9 || *(_QWORD *)((char *)a3 + 13) != 0x73657A69735F746ELL)
      return 0;
  }
  if (BYTE3(v8))
    v14 = a2 + 16 * ((v8 >> 23) & 1) + 64;
  else
    v14 = 0;
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14, 4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::scf::ParallelOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t v7;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v6 = 0;
  v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v6, 4);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::scf::ParallelOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  return mlir::scf::ParallelOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::scf::ParallelOp>::hashProperties(uint64_t a1, _QWORD *a2)
{
  return mlir::scf::ParallelOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v5, 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a3, v5, 4);
  return result;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  v3 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = a2 + 16 * ((v3 >> 23) & 1) + 64;
  else
    v4 = 0;
  if (*(_DWORD *)(v4 + 8) == 1)
  {
    v5 = *(_QWORD *)(((a2 + 16 * ((v3 >> 23) & 1) + 64 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(a2 + 40)
                   + 8);
    if (v5)
      v6 = v5 - 8;
    else
      v6 = 0;
    return **(_QWORD **)(v6 + 48);
  }
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v3;

  result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v3 = 0;
  if (*(_DWORD *)(v3 + 8) == 1)
    return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) | 4;
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v3;

  result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = (_DWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  if (v3[2] == 1)
    return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * (v3[1] + *v3) + 24) | 4;
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v3;

  result = 0;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = (unsigned int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  if (v3[2] == 1)
    return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * *v3 + 24) | 4;
  return result;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::replaceWithAdditionalYields(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v6, a2, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::scf::ForallOp::getSuccessorRegions((uint64_t)&v5, a2, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::ParallelOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  __guard *v38;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  __guard v170;
  __guard v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __guard v184;
  __guard v185;
  __guard v186;
  __guard v187;
  __guard v188;
  __guard v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __guard v224;
  __guard v225;
  __guard v226;
  __guard v227;
  __guard v228;
  __guard v229;
  __guard v230;
  __guard v231;
  __guard v232;
  __guard v233;
  __guard v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  const char *v260;
  unint64_t v261;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v247 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v53 = v52;
    a1 = v247;
    if (v53)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v261 = 81;
      v54 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v54)
        v55 = v54;
      else
        v55 = v261;
      v56 = &v260[v55];
      v57 = v261 - v55;
      if (v261 - v55 >= 0x12)
        v58 = 18;
      else
        v58 = v261 - v55;
      v59 = v57 - v58;
      if (v59 >= v59 - 1)
        v60 = v59 - 1;
      else
        v60 = v59;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v247;
    }
  }
  v3 = v2[210];
  if ((v4 & 1) == 0)
  {
    v235 = v3;
    v248 = a1;
    v62 = v61;
    v3 = v235;
    a1 = v248;
    if (v62)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v261 = 87;
      v63 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v63)
        v64 = v63;
      else
        v64 = v261;
      v65 = &v260[v64];
      v66 = v261 - v64;
      if (v261 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v261 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v3 = v235;
      a1 = v248;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v236 = v3;
    v249 = a1;
    v224 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v224;
    v3 = v236;
    v71 = v70;
    a1 = v249;
    if (v71)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v261 = 86;
      v72 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v72)
        v73 = v72;
      else
        v73 = v261;
      v74 = &v260[v73];
      v75 = v261 - v73;
      if (v261 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v261 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v224;
      v3 = v236;
      a1 = v249;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v237 = v3;
    v250 = a1;
    v214 = v9;
    v225 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v214;
    v6 = v225;
    v80 = v79;
    v3 = v237;
    a1 = v250;
    if (v80)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v261 = 88;
      v81 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v81)
        v82 = v81;
      else
        v82 = v261;
      v83 = &v260[v82];
      v84 = v261 - v82;
      if (v261 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v261 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v214;
      v6 = v225;
      v3 = v237;
      a1 = v250;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v238 = v3;
    v251 = a1;
    v215 = v9;
    v226 = v6;
    v205 = v12;
    v12 = v205;
    v9 = v215;
    v6 = v226;
    v89 = v88;
    v3 = v238;
    a1 = v251;
    if (v89)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v261 = 96;
      v90 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v90)
        v91 = v90;
      else
        v91 = v261;
      v92 = &v260[v91];
      v93 = v261 - v91;
      if (v261 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v261 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v12 = v205;
      v9 = v215;
      v6 = v226;
      v3 = v238;
      a1 = v251;
    }
  }
  v15 = v14[423];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v239 = v3;
    v252 = a1;
    v216 = v9;
    v227 = v6;
    v197 = v15;
    v206 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v197;
    v12 = v206;
    v9 = v216;
    v6 = v227;
    v98 = v97;
    v3 = v239;
    a1 = v252;
    if (v98)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v261 = 83;
      v99 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v99)
        v100 = v99;
      else
        v100 = v261;
      v101 = &v260[v100];
      v102 = v261 - v100;
      if (v261 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v261 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v197;
      v12 = v206;
      v9 = v216;
      v6 = v227;
      v3 = v239;
      a1 = v252;
    }
  }
  v18 = v17[184];
  if ((v19 & 1) == 0)
  {
    v240 = v3;
    v253 = a1;
    v217 = v9;
    v228 = v6;
    v198 = v15;
    v207 = v12;
    v190 = v18;
    v18 = v190;
    v15 = v198;
    v12 = v207;
    v9 = v217;
    v6 = v228;
    v107 = v106;
    v3 = v240;
    a1 = v253;
    if (v107)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::Yi"
             "eldOp>::Impl<Empty>]";
      v261 = 127;
      v108 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v108)
        v109 = v108;
      else
        v109 = v261;
      v110 = &v260[v109];
      v111 = v261 - v109;
      if (v261 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v261 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v18 = v190;
      v15 = v198;
      v12 = v207;
      v9 = v217;
      v6 = v228;
      v3 = v240;
      a1 = v253;
    }
  }
  v21 = v20[439];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v241 = v3;
    v254 = a1;
    v218 = v9;
    v229 = v6;
    v199 = v15;
    v208 = v12;
    v184 = v21;
    v191 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v184;
    v18 = v191;
    v15 = v199;
    v12 = v208;
    v9 = v218;
    v6 = v229;
    v116 = v115;
    v3 = v241;
    a1 = v254;
    if (v116)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v261 = 84;
      v117 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v117)
        v118 = v117;
      else
        v118 = v261;
      v119 = &v260[v118];
      v120 = v261 - v118;
      if (v261 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v261 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v184;
      v18 = v191;
      v15 = v199;
      v12 = v208;
      v9 = v218;
      v6 = v229;
      v3 = v241;
      a1 = v254;
    }
  }
  v24 = v23[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v242 = v3;
    v255 = a1;
    v219 = v9;
    v230 = v6;
    v200 = v15;
    v209 = v12;
    v185 = v21;
    v192 = v18;
    v179 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v179;
    v21 = v185;
    v18 = v192;
    v15 = v200;
    v12 = v209;
    v9 = v219;
    v6 = v230;
    v125 = v124;
    v3 = v242;
    a1 = v255;
    if (v125)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v261 = 89;
      v126 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v126)
        v127 = v126;
      else
        v127 = v261;
      v128 = &v260[v127];
      v129 = v261 - v127;
      if (v261 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v261 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v179;
      v21 = v185;
      v18 = v192;
      v15 = v200;
      v12 = v209;
      v9 = v219;
      v6 = v230;
      v3 = v242;
      a1 = v255;
    }
  }
  v27 = p_vtable[481];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v243 = v3;
    v256 = a1;
    v220 = v9;
    v231 = v6;
    v201 = v15;
    v210 = v12;
    v186 = v21;
    v193 = v18;
    v175 = v27;
    v180 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v175;
    v24 = v180;
    v21 = v186;
    v18 = v193;
    v15 = v201;
    v12 = v210;
    v9 = v220;
    v6 = v231;
    v134 = v133;
    v3 = v243;
    a1 = v256;
    if (v134)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v261 = 96;
      v135 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v135)
        v136 = v135;
      else
        v136 = v261;
      v137 = &v260[v136];
      v138 = v261 - v136;
      if (v261 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v261 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v175;
      v24 = v180;
      v21 = v186;
      v18 = v193;
      v15 = v201;
      v12 = v210;
      v9 = v220;
      v6 = v231;
      v3 = v243;
      a1 = v256;
    }
  }
  v30 = v29[203];
  if ((v31 & 1) == 0)
  {
    v244 = v3;
    v257 = a1;
    v221 = v9;
    v232 = v6;
    v202 = v15;
    v211 = v12;
    v187 = v21;
    v194 = v18;
    v176 = v27;
    v181 = v24;
    v172 = v30;
    v30 = v172;
    v27 = v176;
    v24 = v181;
    v21 = v187;
    v18 = v194;
    v15 = v202;
    v12 = v211;
    v9 = v221;
    v6 = v232;
    v143 = v142;
    v3 = v244;
    a1 = v257;
    if (v143)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v261 = 89;
      v144 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v144)
        v145 = v144;
      else
        v145 = v261;
      v146 = &v260[v145];
      v147 = v261 - v145;
      if (v261 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v261 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v30 = v172;
      v27 = v176;
      v24 = v181;
      v21 = v187;
      v18 = v194;
      v15 = v202;
      v12 = v211;
      v9 = v221;
      v6 = v232;
      v3 = v244;
      a1 = v257;
    }
  }
  v33 = v32[441];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v245 = v3;
    v258 = a1;
    v222 = v9;
    v233 = v6;
    v203 = v15;
    v212 = v12;
    v188 = v21;
    v195 = v18;
    v177 = v27;
    v182 = v24;
    v170 = v33;
    v173 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v170;
    v30 = v173;
    v27 = v177;
    v24 = v182;
    v21 = v188;
    v18 = v195;
    v15 = v203;
    v12 = v212;
    v9 = v222;
    v6 = v233;
    v152 = v151;
    v3 = v245;
    a1 = v258;
    if (v152)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v261 = 97;
      v153 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v153)
        v154 = v153;
      else
        v154 = v261;
      v155 = &v260[v154];
      v156 = v261 - v154;
      if (v261 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v261 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v170;
      v30 = v173;
      v27 = v177;
      v24 = v182;
      v21 = v188;
      v18 = v195;
      v15 = v203;
      v12 = v212;
      v9 = v222;
      v6 = v233;
      v3 = v245;
      a1 = v258;
    }
  }
  v36 = v35[502];
  if ((v37 & 1) == 0)
  {
    v246 = v3;
    v259 = a1;
    v223 = v9;
    v234 = v6;
    v204 = v15;
    v213 = v12;
    v189 = v21;
    v196 = v18;
    v178 = v27;
    v183 = v24;
    v171 = v33;
    v174 = v30;
    v169 = v36;
    v36 = v169;
    v33 = v171;
    v30 = v174;
    v27 = v178;
    v24 = v183;
    v21 = v189;
    v18 = v196;
    v15 = v204;
    v12 = v213;
    v9 = v223;
    v6 = v234;
    v161 = v160;
    v3 = v246;
    a1 = v259;
    if (v161)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v261 = 93;
      v162 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v162)
        v163 = v162;
      else
        v163 = v261;
      v164 = &v260[v163];
      v165 = v261 - v163;
      if (v261 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v261 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v36 = v169;
      v33 = v171;
      v30 = v174;
      v27 = v178;
      v24 = v183;
      v21 = v189;
      v18 = v196;
      v15 = v204;
      v12 = v213;
      v9 = v223;
      v6 = v234;
      v3 = v246;
      a1 = v259;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v36 == a1
      || v38[23] == (_QWORD)a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::ParallelOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::scf::ParallelOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::scf::ParallelOp::verify((uint64_t **)&v5) != 0;
}

BOOL mlir::Op<mlir::scf::ParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)();
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t (*)()))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::scf::ReduceOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __guard v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v100 = 81;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v93;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v100 = 86;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v100 = 82;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[181];
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<Empty>]";
      v100 = 110;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[467];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[192] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::ReduceOp::print((mlir::scf::ReduceOp *)&v8, a3);
}

BOOL mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroResults<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ReduceOp>,mlir::OpTrait::OneOperand<mlir::scf::ReduceOp>,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>,mlir::OpTrait::OpInvariants<mlir::scf::ReduceOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroResults<mlir::scf::ReduceOp>,mlir::OpTrait::ZeroSuccessors<mlir::scf::ReduceOp>,mlir::OpTrait::OneOperand<mlir::scf::ReduceOp>,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>,mlir::OpTrait::OpInvariants<mlir::scf::ReduceOp>>(unsigned int *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
      && mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>::verifyTrait((uint64_t *)a1)
      && mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)a1, (((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]+ (((unint64_t)a1[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * a1[10], (uint64_t)"reductionOperator", 17, 0) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl<mlir::scf::ReduceOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "scf.parallel";
  v37[1] = 12;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

BOOL mlir::Op<mlir::scf::ReduceOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ParallelOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants(uint64_t *a1)
{
  uint64_t *v2;

  v2 = a1;
  return mlir::scf::ReduceOp::verifyRegions(&v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::ReduceReturnOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::ReduceReturnOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ReduceReturnOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::ReduceReturnOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __guard v140;
  __guard v141;
  __guard v142;
  __guard v143;
  __guard v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[181];
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<Empty>]";
      v186 = 108;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[469];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[158];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v186 = 84;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    || !mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::scf::ReduceReturnOp>::verifyTrait((uint64_t *)a1)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v6))
  {
    return 0;
  }
  v8 = a1;
  return mlir::scf::ReduceReturnOp::verify((uint64_t **)&v8) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl<mlir::scf::ReduceReturnOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "scf.reduce";
  v37[1] = 10;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::scf::ReduceReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::scf::ReduceOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::scf::WhileOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *this)@<X8>)
{
  *a1 = mlir::scf::WhileOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::WhileOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x28uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::areTypesCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[160], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72);
  else
    return 0;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2;
  mlir::scf::WhileOp::getSuccessorRegions(&v5, 0, a5);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a2;
  mlir::scf::WhileOp::getSuccessorRegions(&v4, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x68uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[148], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  a2[3] = v3 + 24;
  *(_QWORD *)&result = 0x600000002;
  a2[1] = 0x600000002;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleInductionVar()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleLowerBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleStep()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getSingleUpperBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v5[4];
  void *v6;
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    v2 = *(_DWORD *)(a2 + 68);
  else
    v2 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v5, a2, 0, v2, 0, 0);
  v3 = mlir::MutableOperandRange::operator mlir::OperandRange(v5);
  if (v6 != v7)
    free(v6);
  return v3;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return *(_QWORD *)(v3 + 48);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  mlir::GenericProgramPoint **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8[4];
  void *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 32);
  if (v2)
    v3 = (mlir::GenericProgramPoint **)(v2 - 8);
  else
    v3 = 0;
  mlir::Block::getTerminator(v3);
  if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(v4 + 68);
  else
    v5 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10)
    free(v9);
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::scf::WhileOp>::replaceWithAdditionalYields(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(void *a1)
{
  unsigned __int8 v1;
  __guard *v2;
  __guard v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  __guard *v23;
  __guard v24;
  unsigned __int8 v25;
  void **p_vtable;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __guard v117;
  __guard v118;
  __guard v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __guard v138;
  __guard v139;
  __guard v140;
  __guard v141;
  __guard v142;
  __guard v143;
  __guard v144;
  __guard v145;
  __guard v146;
  __guard v147;
  __guard v148;
  __guard v149;
  __guard v150;
  __guard v151;
  __guard v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  const char *v162;
  unint64_t v163;

  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      v163 = 89;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      a1 = v153;
    }
  }
  v3 = v2[309];
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v163 = 87;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v163 = 88;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[198];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v163 = 83;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[184];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[192];
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v163 = 93;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[23];
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v163 = 89;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[441];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v163 = 97;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || p_vtable[502] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::scf::WhileOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1)
{
  mlir::Operation *v2;
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyNRegions(a1, (mlir::Operation *)2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v2))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v4 = a1;
  if (!mlir::scf::WhileOp::verifyInvariantsImpl((mlir::scf::WhileOp *)&v4))
    return 0;
  v4 = a1;
  return mlir::scf::WhileOp::verify((mlir::scf::WhileOp *)&v4);
}

BOOL mlir::Op<mlir::scf::WhileOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::RegionBranchOpInterface::Trait,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::detail::verifyTypesAlongControlFlowEdges(a1, a2)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"scf.yield", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E3A738;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::scf::YieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::scf::YieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::scf::YieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getSuccessorRegions;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[173], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::scf::YieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __guard v157;
  __guard v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __guard v177;
  __guard v178;
  __guard v179;
  __guard v180;
  __guard v181;
  __guard v182;
  __guard v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v235 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp, mlir:"
             ":scf::ForOp, mlir::scf::IfOp, mlir::scf::IndexSwitchOp, mlir::scf::ParallelOp, mlir::scf::WhileOp>::Impl<Empty>]";
      v235 = 219;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[471];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[459];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v235 = 82;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[182];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v235 = 84;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::scf::YieldOp>::verifyTrait((uint64_t *)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl<mlir::scf::YieldOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  void *v4;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  char *v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char **v18;
  uint64_t v19;
  __int128 v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  int64_t v33;
  char *v34;
  const char *v35;
  const void **v36;
  __int16 v37;
  const char *v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[3];
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      v4 = *(void **)(*(_QWORD *)(ParentOp + 48) + 16);
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::ExecuteRegionOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
      {
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::IndexSwitchOp,void>::id)
      {
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
      {
        return 1;
      }
    }
  }
  v37 = 257;
  mlir::Operation::emitOpError(a1, &v36, (uint64_t)v46);
  if (v46[0])
  {
    LODWORD(v39) = 3;
    *((_QWORD *)&v39 + 1) = "expects parent op ";
    *(_QWORD *)&v40 = 18;
    v9 = &v39;
    v10 = (char *)v47;
    if (v48 >= v49)
    {
      v30 = v48 + 1;
      if (v47 <= &v39 && (char *)v47 + 24 * v48 > (char *)&v39)
      {
        v33 = (char *)&v39 - (_BYTE *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v30, 24);
        v10 = (char *)v47;
        v9 = (__int128 *)((char *)v47 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v30, 24);
        v9 = &v39;
        v10 = (char *)v47;
      }
    }
    v11 = &v10[24 * v48];
    v12 = *v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    ++v48;
  }
  v35 = "to be one of '";
  v13 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v46, &v35);
  v14 = (uint64_t)v13;
  v41 = xmmword_1E0E54AA0;
  v42 = *(_OWORD *)&off_1E0E54AB0;
  v43 = xmmword_1E0E54AC0;
  v44 = *(_OWORD *)&off_1E0E54AD0;
  v39 = xmmword_1E0E54A80;
  v40 = *(_OWORD *)&off_1E0E54A90;
  if (*v13)
  {
    v38[0] = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)&v39, (uint64_t)&v45, (uint64_t)(v13 + 1), (uint64_t)(v13 + 1), v38);
    if (*(_QWORD *)v14)
    {
      v15 = v14 + 24;
      v16 = *(_QWORD *)(v14 + 24);
      LODWORD(v38[0]) = 3;
      v38[1] = "'";
      v38[2] = (const char *)1;
      v17 = *(unsigned int *)(v14 + 32);
      v18 = v38;
      if (v17 >= *(_DWORD *)(v14 + 36))
      {
        v31 = v17 + 1;
        v32 = v16 + 24 * v17 > (unint64_t)v38;
        if (v16 <= (unint64_t)v38 && v32)
        {
          v34 = (char *)v38 - v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 40), v31, 24);
          v16 = *(_QWORD *)(v14 + 24);
          v18 = (const char **)&v34[v16];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 40), v31, 24);
          v16 = *(_QWORD *)(v14 + 24);
          v18 = v38;
        }
      }
      v19 = v16 + 24 * *(unsigned int *)(v14 + 32);
      v20 = *(_OWORD *)v18;
      *(_QWORD *)(v19 + 16) = v18[2];
      *(_OWORD *)v19 = v20;
      ++*(_DWORD *)(v14 + 32);
    }
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v46[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
  if (v55)
  {
    v21 = (_QWORD **)__p;
    if (__p)
    {
      v22 = v54;
      v23 = __p;
      if (v54 != __p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = __p;
      }
      v54 = v21;
      operator delete(v23);
    }
    v24 = v51;
    if (v51)
    {
      v25 = v52;
      v26 = v51;
      if (v52 != v51)
      {
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
        v26 = v51;
      }
      v52 = v24;
      operator delete(v26);
    }
    if (v47 != v50)
      free(v47);
  }
  return v8;
}

uint64_t mlir::Op<mlir::scf::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::scf::ExecuteRegionOp,mlir::scf::ForOp,mlir::scf::IfOp,mlir::scf::IndexSwitchOp,mlir::scf::ParallelOp,mlir::scf::WhileOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void `anonymous namespace'::SCFInlinerInterface::~SCFInlinerInterface(_anonymous_namespace_::SCFInlinerInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::SCFInlinerInterface::isLegalToInline()
{
  return 1;
}

{
  return 1;
}

void `anonymous namespace'::SCFInlinerInterface::handleTerminator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v6 = *(_QWORD *)(a2 + 72);
      v7 = *(unsigned int *)(a2 + 68);
      v18 = a3;
      v19 = 0;
      v20 = v6;
      v21 = 0;
      if (!a4)
        return;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v18 = a3;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      if (!a4)
        return;
    }
    v8 = 0;
    v9 = 0;
    do
    {
      if (v20 == v6 && v9 == v7)
        break;
      v12 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v18, v8);
      v13 = v21;
      v14 = *v12;
      if (*v12)
      {
        v15 = *(uint64_t **)(v20 + 32 * v21 + 24);
        do
        {
          v16 = (uint64_t *)v14[1];
          if (v16)
          {
            *v16 = *v14;
            if (*v14)
              *(_QWORD *)(*v14 + 8) = v14[1];
          }
          v14[3] = (uint64_t)v15;
          v14[1] = (uint64_t)v15;
          v17 = *v15;
          *v14 = *v15;
          if (v17)
            *(_QWORD *)(v17 + 8) = v14;
          *v15 = (uint64_t)v14;
          v14 = *v12;
        }
        while (*v12);
      }
      v8 = v19 + 1;
      v9 = v13 + 1;
      ++v19;
      v21 = v9;
    }
    while (v18 != a3 || v8 != a4);
  }
}

void mlir::RewritePatternSet::addImpl<SingleBlockExecuteInliner,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"scf.execute_region", 18, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13A58;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = SingleBlockExecuteInliner]";
    v25 = 75;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MultiBlockExecuteInliner,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new(0x60uLL);
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern((uint64_t)(v8 + 1), (uint64_t)"scf.execute_region", 18, (__int16)v24, v9, 0, 0);
  *v8 = &unk_1E0E13990;
  v23 = (uint64_t)v8;
  if (v8[9])
  {
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MultiBlockExecuteInliner]";
    v25 = 74;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    v8[8] = v21;
    v8[9] = v22;
    v10 = 16 * a3;
    v11 = *((unsigned int *)v8 + 22);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *((unsigned int *)v8 + 23))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 10), v8 + 12, v12, 16);
  LODWORD(v11) = *((_DWORD *)v8 + 22);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(v8[10] + 16 * v11), a2, v10);
    LODWORD(v11) = *((_DWORD *)v8 + 22);
  }
LABEL_5:
  *((_DWORD *)v8 + 22) = v11 + (v10 >> 4);
  v13 = (_QWORD *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void SingleBlockExecuteInliner::~SingleBlockExecuteInliner(SingleBlockExecuteInliner *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ExecuteRegionOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t SingleBlockExecuteInliner::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::GenericProgramPoint **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18[2];
  unint64_t v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a2 + 44);
  if ((v5 & 0x7FFFFF) != 0)
  {
    v6 = ((a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 == v6)
      return 0;
  }
  else
  {
    v6 = 0;
    v7 = MEMORY[8];
    if (!MEMORY[8])
      return 0;
  }
  if (*(_QWORD *)(v7 + 8) != v6)
    return 0;
  if ((v5 & 0x7FFFFF) != 0)
    v9 = ((a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  else
    v9 = 0;
  mlir::ValueRange::ValueRange(v18, 0, 0);
  v10 = v18[0];
  v11 = v18[1];
  v12 = *(_QWORD *)(v9 + 8);
  if (v12)
    v13 = (mlir::GenericProgramPoint **)(v12 - 8);
  else
    v13 = 0;
  mlir::Block::getTerminator(v13);
  v15 = v14;
  if ((*(_BYTE *)(v14 + 46) & 0x80) != 0)
  {
    v16 = *(_QWORD *)(v14 + 72);
    v17 = *(unsigned int *)(v14 + 68);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  mlir::ValueRange::ValueRange(v19, v16, v17);
  mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v13, a2, v10, v11);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v19[0], v19[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v15);
  return 1;
}

void MultiBlockExecuteInliner::~MultiBlockExecuteInliner(MultiBlockExecuteInliner *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t MultiBlockExecuteInliner::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, unint64_t, char *))
{
  mlir::Block *v5;
  uint64_t ParentOp;
  uint64_t (**v8)(_QWORD, uint64_t, unint64_t, char *);
  mlir::Block *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  mlir::GenericProgramPoint **v20;
  mlir::GenericProgramPoint *v21;
  BOOL v22;
  mlir::GenericProgramPoint *v23;
  uint64_t (**v24)(_QWORD, uint64_t, unint64_t, char *);
  uint64_t (**v25)(_QWORD, uint64_t, unint64_t, char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  mlir::Block *v29;
  unint64_t v30;
  uint64_t Loc;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t NextResultAtOffset;
  mlir::Block *v37;
  unint64_t v38[2];
  void *v39;
  uint64_t v40;
  _QWORD v41[7];

  v41[6] = *MEMORY[0x1E0C80C00];
  v5 = *(mlir::Block **)(a2 + 16);
  if (v5)
  {
    ParentOp = mlir::Block::getParentOp(v5);
    if (mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
      goto LABEL_7;
  }
  else
  {
    ParentOp = 0;
    if (mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(0))
      goto LABEL_7;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::scf::ExecuteRegionOp,void>::id)
    return 0;
LABEL_7:
  v8 = *(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *))(a2 + 16);
  v9 = (mlir::Block *)((uint64_t (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t (**)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a3)[8])(a3, v8, a2);
  v37 = v9;
  a3[3] = v8;
  a3[4] = v8 + 4;
  v10 = a2 + 64;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(((a2
                    + 64
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  if (v12)
    v13 = (void *)(v12 - 8);
  else
    v13 = 0;
  v39 = v13;
  mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *>((mlir::OpBuilder *)(a3 + 1), v11, (uint64_t *)&v39);
  v14 = *(unsigned int *)(a2 + 44);
  if ((v14 & 0x7FFFFF) != 0)
  {
    v15 = ((v10 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v16 = *(_QWORD *)(v15 + 8);
    if (v16 == v15)
      goto LABEL_29;
    do
    {
LABEL_18:
      if (v16)
        v20 = (mlir::GenericProgramPoint **)(v16 - 8);
      else
        v20 = 0;
      mlir::Block::getTerminator(v20);
      if (v21)
        v22 = *(_QWORD *)(*((_QWORD *)v21 + 6) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id;
      else
        v22 = 0;
      if (v22)
      {
        v23 = v21;
        v24 = (uint64_t (**)(_QWORD, uint64_t, unint64_t, char *))*((_QWORD *)v21 + 2);
        mlir::GenericProgramPoint::~GenericProgramPoint(v21);
        a3[3] = v24;
        a3[4] = v25;
        if ((*((_BYTE *)v23 + 46) & 0x80) != 0)
        {
          v17 = *((unsigned int *)v23 + 17);
          v18 = (void *)*((_QWORD *)v23 + 9);
        }
        else
        {
          v18 = 0;
          v17 = 0;
        }
        v19 = *((_QWORD *)v23 + 3);
        v39 = v18;
        v40 = v17;
        mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *&,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 1), v19, (uint64_t *)&v37, (uint64_t)&v39);
        ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), mlir::GenericProgramPoint *))(*a3)[5])(a3, v23);
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 44);
    v9 = v37;
    goto LABEL_29;
  }
  v15 = 0;
  v16 = MEMORY[8];
  if (MEMORY[8])
    goto LABEL_18;
LABEL_29:
  mlir::RewriterBase::inlineRegionBefore(a3, ((v10 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), v9);
  v39 = v41;
  v40 = 0x600000000;
  v26 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v26)
    v27 = a2 - 16;
  else
    v27 = 0;
  if ((_DWORD)v26)
  {
    for (i = 0; i != v26; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, i);
      v29 = v37;
      v30 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      Loc = mlir::Value::getLoc((mlir::Value *)&NextResultAtOffset);
      v32 = mlir::Block::addArgument(v29, v30, Loc);
      v33 = v40;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v41, v40 + 1, 8);
        v33 = v40;
      }
      *((_QWORD *)v39 + v33) = v32;
      v34 = (v40 + 1);
      LODWORD(v40) = v40 + 1;
    }
    v35 = v39;
  }
  else
  {
    v34 = 0;
    v35 = v41;
  }
  mlir::ValueRange::ValueRange(v38, (uint64_t)v35, v34);
  (*a3)[3](a3, a2, v38[0], (char *)v38[1]);
  if (v39 != v41)
    free(v39);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::cf::BranchOp,mlir::Block *>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  uint64_t v13;
  const char *v14;
  __int16 v15;
  uint64_t v16[4];
  __int16 v17;
  unint64_t v18[2];
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v13 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"cf.br", (const unsigned __int8 *)5, Context);
  if (!v8)
  {
    v17 = 1283;
    v16[2] = (uint64_t)"cf.br";
    v16[3] = 5;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v15 = 259;
    llvm::operator+(v16, (uint64_t *)&v14, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v9 = *a3;
  mlir::ValueRange::ValueRange(v18, 0, 0);
  mlir::cf::BranchOp::build((uint64_t)a1, (uint64_t)v19, v9, v18[0], v18[1]);
  v10 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v10 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::cf::BranchOp,void>::id)
    v11 = v10;
  else
    v11 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v11;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

char *llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *k;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int128 *v45;
  uint64_t v46;
  const double *v47;
  const double *v48;
  unsigned __int128 v49;
  unsigned __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *j;
  uint64_t v63;
  unsigned __int128 *v65;
  const double *v66;
  const double *v67;
  unsigned __int128 v68;
  unsigned __int128 v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *i;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int128 *v80;
  uint64_t v81;
  const double *v82;
  const double *v83;
  unsigned __int128 v84;
  unsigned __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int128 *v92;
  uint64_t v93;
  const double *v94;
  const double *v95;
  unsigned __int128 v96;
  unsigned __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v103;

  v8 = a4;
  v11 = *(_QWORD *)a1;
  v12 = a2 - *(_QWORD *)a1;
  v13 = v12 >> 3;
  v15 = *(unsigned int *)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 12);
  v16 = *(_DWORD *)(a1 + 8);
  v17 = a6 - a4;
  v18 = a6 - a4 + v15;
  if (*(_QWORD *)a1 + 8 * v15 != a2)
  {
    v103 = a3;
    if (v18 > v14)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
      v11 = *(_QWORD *)a1;
      v15 = *(unsigned int *)(a1 + 8);
      v16 = *(_DWORD *)(a1 + 8);
    }
    v19 = (char *)(v11 + 8 * v13);
    v20 = (char *)(v11 + 8 * v15);
    v21 = v20 - v19;
    v22 = (v20 - v19) >> 3;
    if (v22 < v17)
    {
      v23 = v16 + v17;
      *(_DWORD *)(a1 + 8) = v23;
      if (v12 >> 3 == v15)
      {
        v24 = a6;
        v25 = v103;
      }
      else
      {
        memcpy((void *)(v11 + 8 * v23 - 8 * v22), v19, v20 - v19);
        if (v21 > 0x87)
        {
          v25 = v103;
          if ((unint64_t)v19 >= v103 + 32 * v8 + 4 * v21
            || v103 + 32 * v8 + 24 >= v11 + (v12 & 0xFFFFFFFFFFFFFFF8) + v21)
          {
            v39 = (v21 >> 3) & 3;
            if (!v39)
              v39 = 4;
            v38 = &v19[8 * (v22 - v39)];
            v40 = v8 + v22 - v39;
            v65 = (unsigned __int128 *)(v11 + 8 * (v12 >> 3) + 16);
            v66 = (const double *)(v103 + 32 * v8 + 88);
            do
            {
              v67 = v66 - 8;
              v68 = (unsigned __int128)vld4q_f64(v67);
              v69 = (unsigned __int128)vld4q_f64(v66);
              *(v65 - 1) = v68;
              *v65 = v69;
              v65 += 2;
              v22 -= 4;
              v66 += 16;
            }
            while (v39 != v22);
          }
          else
          {
            v38 = v19;
            v39 = (v20 - v19) >> 3;
            v40 = v8;
          }
        }
        else
        {
          v38 = v19;
          v39 = (v20 - v19) >> 3;
          v40 = v8;
          v25 = v103;
        }
        v24 = a6;
        v71 = (uint64_t *)(v25 + 32 * v40 + 24);
        v8 = v40 + v39;
        do
        {
          v72 = *v71;
          v71 += 4;
          *(_QWORD *)v38 = v72;
          v38 += 8;
          --v39;
        }
        while (v39);
      }
      if (v25 != a5 || v24 != v8)
      {
        if (v25 != a5)
        {
          for (i = (uint64_t *)(v25 + 32 * v8 + 24); ; i += 4)
          {
            v74 = *i;
            *(_QWORD *)v20 = v74;
            v20 += 8;
          }
        }
        v75 = v24 - v8;
        if ((unint64_t)(v24 - v8) > 0x12)
        {
          v76 = v25 + 32 * v8;
          if ((unint64_t)v20 >= v25 + 32 * v24 || v76 + 24 >= (unint64_t)(v11 + 8 * (v24 + v15 - v8)))
          {
            v77 = 4;
            if ((v75 & 3) != 0)
              v77 = v75 & 3;
            v78 = v75 - v77;
            v20 += 8 * v78;
            v79 = v8 + v78;
            v80 = (unsigned __int128 *)(v11 + 8 * v15 + 16);
            v81 = v77 + v8 - v24;
            v82 = (const double *)(v76 + 88);
            do
            {
              v83 = v82 - 8;
              v84 = (unsigned __int128)vld4q_f64(v83);
              v85 = (unsigned __int128)vld4q_f64(v82);
              *(v80 - 1) = v84;
              *v80 = v85;
              v80 += 2;
              v82 += 16;
              v81 += 4;
            }
            while (v81);
            v8 = v79;
          }
        }
        v86 = v24 - v8;
        v87 = (uint64_t *)(v25 + 32 * v8 + 24);
        do
        {
          v88 = *v87;
          v87 += 4;
          *(_QWORD *)v20 = v88;
          v20 += 8;
          --v86;
        }
        while (v86);
      }
      return v19;
    }
    v29 = v12 >> 3;
    v30 = 8 * v17;
    v31 = v15 + ((uint64_t)(8 * v17) >> 3);
    v32 = v15;
    if (v31 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v31, 8);
      v32 = *(unsigned int *)(a1 + 8);
      v16 = *(_DWORD *)(a1 + 8);
    }
    v33 = &v20[-v30];
    if (a6 == v8)
      goto LABEL_38;
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    v35 = 8 * a6;
    v36 = 8 * a6 - 8 * v8 - 8;
    if (v36 >= 0x98)
    {
      v54 = 8 * v32 + *(_QWORD *)a1;
      v37 = &v20[-v30];
      if ((unint64_t)(v35 - (v11 + 8 * (v8 + v15)) + v54) >= 0x20)
      {
        v55 = (v36 >> 3) + 1;
        v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
        v34 = (_QWORD *)((char *)v34 + v56);
        v37 = &v33[v56];
        v57 = (__int128 *)(8 * v8 + 8 * v15 - v35 + v11 + 16);
        v58 = (_OWORD *)(v54 + 16);
        v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 4;
        }
        while (v59);
        if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
    }
    else
    {
      v37 = &v20[-v30];
    }
    do
    {
      v61 = *(_QWORD *)v37;
      v37 += 8;
      *v34++ = v61;
    }
    while (v37 != v20);
LABEL_38:
    *(_DWORD *)(a1 + 8) = v16 + v17;
    if (v33 != v19)
      memmove(&v19[v30], v19, &v20[-v30] - v19);
    if (v103 != a5 || a6 != v8)
    {
      if (v103 != a5)
      {
        for (j = (uint64_t *)(v103 + 32 * v8 + 24); ; j += 4)
        {
          v63 = *j;
          *(_QWORD *)v19 = v63;
          v19 += 8;
        }
      }
      if (v17 > 0x12)
      {
        v89 = v103 + 32 * v8;
        if ((unint64_t)v19 >= v103 + 32 * a6
          || (v70 = v19, v89 + 24 >= (unint64_t)(v11 + 8 * (a6 + v29 - v8))))
        {
          if ((v17 & 3) != 0)
            v90 = v17 & 3;
          else
            v90 = 4;
          v70 = &v19[8 * (v17 - v90)];
          v91 = v8 + v17 - v90;
          v92 = (unsigned __int128 *)(v11 + 8 * v29 + 16);
          v93 = v8 + v90 - a6;
          v94 = (const double *)(v89 + 88);
          do
          {
            v95 = v94 - 8;
            v96 = (unsigned __int128)vld4q_f64(v95);
            v97 = (unsigned __int128)vld4q_f64(v94);
            *(v92 - 1) = v96;
            *v92 = v97;
            v92 += 2;
            v94 += 16;
            v93 += 4;
          }
          while (v93);
          v8 = v91;
        }
      }
      else
      {
        v70 = v19;
      }
      v98 = a6 - v8;
      v99 = (uint64_t *)(v103 + 32 * v8 + 24);
      do
      {
        v100 = *v99;
        v99 += 4;
        *(_QWORD *)v70 = v100;
        v70 += 8;
        --v98;
      }
      while (v98);
    }
    return v19;
  }
  if (v18 > v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18, 8);
    v16 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  if (a6 != v8 || a3 != a5)
  {
    v26 = (_QWORD *)(v11 + 8 * v16);
    if (a3 != a5)
    {
      for (k = (uint64_t *)(a3 + 32 * v8 + 24); ; k += 4)
      {
        v28 = *k;
        *v26++ = v28;
      }
    }
    if (v17 > 0x12)
    {
      v41 = v16;
      v42 = a3 + 32 * v8;
      if ((unint64_t)v26 >= a3 + 32 * a6 || v42 + 24 >= v11 + 8 * (a6 + (unint64_t)v16 - v8))
      {
        v43 = 4;
        if ((v17 & 3) != 0)
          v43 = v17 & 3;
        v26 += v17 - v43;
        v44 = v8 + v17 - v43;
        v45 = (unsigned __int128 *)(v11 + 8 * v41 + 16);
        v46 = v8 + v43 - a6;
        v47 = (const double *)(v42 + 88);
        do
        {
          v48 = v47 - 8;
          v49 = (unsigned __int128)vld4q_f64(v48);
          v50 = (unsigned __int128)vld4q_f64(v47);
          *(v45 - 1) = v49;
          *v45 = v50;
          v45 += 2;
          v47 += 16;
          v46 += 4;
        }
        while (v46);
        v8 = v44;
      }
    }
    v51 = a6 - v8;
    v52 = (uint64_t *)(a3 + 32 * v8 + 24);
    do
    {
      v53 = *v52;
      v52 += 4;
      *v26++ = v53;
      --v51;
    }
    while (v51);
    v16 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v16 + v17;
  return (char *)(v11 + 8 * v13);
}

mlir::Block *llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::scf::ForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_2>(mlir::Operation ***a1, uint64_t a2)
{
  return mlir::Operation::isProperAncestor(**a1, *(Operation **)(a2 + 16));
}

void `anonymous namespace'::ForOpIterArgsFolder::~ForOpIterArgsFolder(_anonymous_namespace_::ForOpIterArgsFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ForOpIterArgsFolder::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  mlir::Operation *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  mlir::detail::OpResultImpl *v18;
  mlir::detail::OpResultImpl *v19;
  unint64_t YieldedValues;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v30;
  _QWORD *NextResultAtOffset;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  mlir::GenericProgramPoint *v49;
  void **p_AttrDictionary;
  mlir::MLIRContext *Value;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  mlir::GenericProgramPoint *v67;
  mlir::GenericProgramPoint *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  mlir::Operation *v82;
  mlir::Operation *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  mlir::Operation *v93;
  unint64_t v94[2];
  unint64_t v95[2];
  unint64_t v96[2];
  unint64_t v97[2];
  void *AttrDictionary;
  uint64_t v99;
  uint64_t v100;
  mlir::detail::OpResultImpl *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[32];
  _QWORD *v108;
  uint64_t v109;
  _BYTE v110[32];
  _QWORD *v111;
  uint64_t v112;
  _BYTE v113[32];
  _QWORD *v114;
  uint64_t v115;
  _QWORD v116[6];

  v116[4] = *MEMORY[0x1E0C80C00];
  v93 = (mlir::Operation *)a2;
  v4 = a2[9];
  v90 = &v92;
  v91 = xmmword_181234800;
  if (v4 >= 5)
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v90, &v92, v4, 1);
  v114 = v116;
  v115 = 0x400000000;
  v111 = v113;
  v112 = 0x400000000;
  v108 = v110;
  v109 = 0x400000000;
  v105 = v107;
  v106 = 0x400000000;
  if (v4 < 4)
  {
    v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v4 + 1, 8);
    v5 = v115;
    if (v115 >= HIDWORD(v115))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v115 + 1, 8);
      v5 = v115;
    }
  }
  v114[v5] = 0;
  LODWORD(v115) = v115 + 1;
  if ((*((_BYTE *)v93 + 46) & 0x80) == 0)
  {
    v6 = -3;
LABEL_9:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, v6, 8);
    if (HIDWORD(v109) >= v4)
      goto LABEL_10;
    goto LABEL_14;
  }
  v6 = *((unsigned int *)v93 + 17) - 3;
  if (v6 > HIDWORD(v112))
    goto LABEL_9;
  if (HIDWORD(v109) >= v4)
  {
LABEL_10:
    if (HIDWORD(v106) < v4)
      goto LABEL_11;
LABEL_15:
    v7 = v93;
    v8 = *((unsigned int *)v93 + 11);
    v84 = a3;
    if ((v8 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
LABEL_14:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v4, 8);
  if (HIDWORD(v106) >= v4)
    goto LABEL_15;
LABEL_11:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, v107, v4, 8);
  v7 = v93;
  v8 = *((unsigned int *)v93 + 11);
  v84 = a3;
  if ((v8 & 0x800000) == 0)
  {
LABEL_12:
    v9 = 0;
    v10 = -3;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_QWORD *)v7 + 9);
  v10 = *((unsigned int *)v7 + 17) - 3;
LABEL_17:
  v11 = (void *)(v9 + 96);
  v12 = *((unsigned int *)v7 + 9);
  v13 = *(_QWORD *)((((unint64_t)v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v7 + 10)
                  + 8);
  if (v13)
    v14 = v13 - 8;
  else
    v14 = 0;
  v15 = *(_QWORD *)(v14 + 48);
  v16 = *(_QWORD **)(v14 + 56);
  v17 = (_QWORD *)(v15 + 8);
  v18 = (mlir::Operation *)((char *)v7 - 16);
  if ((_DWORD)v12)
    v19 = v18;
  else
    v19 = 0;
  YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v93);
  v85 = v21;
  v86 = v11;
  AttrDictionary = v11;
  v99 = 0;
  v100 = v15 + 8;
  v101 = v19;
  v102 = 0;
  v103 = YieldedValues;
  v104 = 0;
  if (!v10 || (_QWORD *)((char *)v16 - v15) == (_QWORD *)8)
  {
    v43 = 0;
    v44 = v105;
    if (v105 == v107)
      goto LABEL_63;
    goto LABEL_62;
  }
  v22 = YieldedValues;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v11;
  do
  {
    if (v101 == v19 && v25 == v12)
      break;
    if (v103 == v22 && v24 == v85)
      break;
    v30 = v27[4 * v23 + 3];
    NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v101, v25);
    v32 = mlir::ValueRange::dereference_iterator(&v103, v104);
    v33 = v32;
    if (*v17 == v32)
      goto LABEL_41;
    if (!*(_QWORD *)*v17)
    {
      if (v30 == v32)
      {
LABEL_41:
        v34 = 1;
        v35 = v91;
        v36 = v91 + 1;
        if ((unint64_t)(v91 + 1) <= *((_QWORD *)&v91 + 1))
          goto LABEL_42;
      }
      else
      {
        v34 = *NextResultAtOffset == 0;
        v35 = v91;
        v36 = v91 + 1;
        if ((unint64_t)(v91 + 1) <= *((_QWORD *)&v91 + 1))
          goto LABEL_42;
      }
LABEL_37:
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v90, &v92, v36, 1);
      v35 = v91;
      goto LABEL_42;
    }
    v34 = 0;
    v35 = v91;
    v36 = v91 + 1;
    if ((unint64_t)(v91 + 1) > *((_QWORD *)&v91 + 1))
      goto LABEL_37;
LABEL_42:
    *((_BYTE *)v90 + v35) = !v34;
    *(_QWORD *)&v91 = v91 + 1;
    if (v34)
    {
      v37 = v115;
      if (v115 >= (unint64_t)HIDWORD(v115))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v115 + 1, 8);
        v37 = v115;
      }
      v114[v37] = v30;
    }
    else
    {
      v38 = v112;
      if (v112 >= (unint64_t)HIDWORD(v112))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, v112 + 1, 8);
        v38 = v112;
      }
      v111[v38] = v30;
      LODWORD(v112) = v112 + 1;
      v39 = v109;
      if (v109 >= (unint64_t)HIDWORD(v109))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, v110, v109 + 1, 8);
        v39 = v109;
      }
      v108[v39] = v33;
      LODWORD(v109) = v109 + 1;
      v40 = v115;
      if (v115 >= (unint64_t)HIDWORD(v115))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v115 + 1, 8);
        v40 = v115;
      }
      v30 = 0;
      v114[v40] = 0;
    }
    LODWORD(v115) = v115 + 1;
    v41 = v106;
    if (v106 >= (unint64_t)HIDWORD(v106))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, v107, v106 + 1, 8);
      v41 = v106;
    }
    v26 |= v34;
    *((_QWORD *)v105 + v41) = v30;
    LODWORD(v106) = v106 + 1;
    v27 = AttrDictionary;
    v23 = v99 + 1;
    v17 = (_QWORD *)(v100 + 8);
    v99 = v23;
    v100 += 8;
    v25 = v102 + 1;
    v24 = v104 + 1;
    ++v102;
    ++v104;
    v42 = v23 == v10 && AttrDictionary == v86;
  }
  while (!v42 && v17 != v16);
  if ((v26 & 1) == 0)
  {
    v43 = 0;
    v44 = v105;
    if (v105 == v107)
      goto LABEL_63;
LABEL_62:
    free(v44);
    goto LABEL_63;
  }
  v46 = *((_QWORD *)v93 + 3);
  v47 = *((_QWORD *)v93 + 9);
  AttrDictionary = *(void **)(v47 + 24);
  v48 = *(_QWORD *)(v47 + 56);
  v88 = *(_QWORD *)(v47 + 88);
  v89 = v48;
  v49 = mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)(v84 + 8), v46, (uint64_t *)&AttrDictionary, &v89, &v88, (uint64_t)&v111);
  if (*((_BYTE *)v93 + 47))
  {
    AttrDictionary = (void *)mlir::Operation::getAttrDictionary(v93);
    p_AttrDictionary = &AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (void **)((char *)v93 + 56);
  }
  Value = (mlir::MLIRContext *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_AttrDictionary);
  mlir::Operation::setAttrs((uint64_t)v49, Value, v52);
  v53 = *((unsigned int *)v49 + 10);
  v54 = *(_QWORD *)((((unint64_t)v49
                    + 16 * (((unint64_t)*((unsigned int *)v49 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v49 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v53
                  + 8);
  if (v54)
    v55 = v54 - 8;
  else
    v55 = 0;
  *v114 = **(_QWORD **)(v55 + 48);
  if ((_DWORD)v106)
  {
    v56 = 0;
    v57 = 0;
    v58 = 8 * v106;
    do
    {
      if (!v114[v56 / 8 + 1])
      {
        v59 = (char *)v105;
        v60 = *(_QWORD *)((((unint64_t)v49
                          + 16 * (((unint64_t)*((unsigned int *)v49 + 11) >> 23) & 1)
                          + (((unint64_t)*((unsigned int *)v49 + 11) >> 21) & 0x7F8)
                          + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v53
                        + 8);
        if (v60)
          v61 = v60 - 8;
        else
          v61 = 0;
        v114[v56 / 8 + 1] = *(_QWORD *)(*(_QWORD *)(v61 + 48) + 8 * v57 + 8);
        v62 = v57 - 5;
        v63 = v57++ >= 6;
        v64 = (uint64_t)v49 - 24 * v62 - 96;
        if (!v63)
          v64 = (uint64_t)v49 - 16 * v57;
        *(_QWORD *)&v59[v56] = v64;
      }
      v56 += 8;
    }
    while (v58 != v56);
  }
  v65 = *(_QWORD *)((((unint64_t)v93
                    + 16 * (((unint64_t)*((unsigned int *)v93 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v93 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v93 + 10)
                  + 8);
  if (v65)
    v66 = v65 - 8;
  else
    v66 = 0;
  if ((_DWORD)v112)
  {
    mlir::ValueRange::ValueRange(v95, (uint64_t)v114, v115);
    mlir::RewriterBase::mergeBlocks(v84, v66, v55, v95[0], v95[1]);
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v55);
    v68 = v67;
    v69 = (_OWORD *)(v84 + 24);
    v87 = *(_OWORD *)(v84 + 24);
    v70 = *((_QWORD *)v67 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v67);
    *(_QWORD *)(v84 + 24) = v70;
    *(_QWORD *)(v84 + 32) = v71;
    AttrDictionary = &v100;
    v99 = 0x400000000;
    if (v106 >= 5)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AttrDictionary, &v100, v106, 8);
    v72 = v91;
    if ((_DWORD)v91)
    {
      v73 = 0;
      v74 = 24;
      do
      {
        if (*((_BYTE *)v90 + v73))
        {
          v75 = *(_QWORD *)(*((_QWORD *)v68 + 9) + v74);
          v76 = v99;
          if (v99 >= (unint64_t)HIDWORD(v99))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AttrDictionary, &v100, v99 + 1, 8);
            v76 = v99;
          }
          *((_QWORD *)AttrDictionary + v76) = v75;
          LODWORD(v99) = v99 + 1;
        }
        ++v73;
        v74 += 32;
      }
      while (v72 != v73);
    }
    mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v84 + 8), *((_QWORD *)v68 + 3), (uint64_t)&AttrDictionary);
    if (AttrDictionary != &v100)
      free(AttrDictionary);
    if ((_QWORD)v87)
    {
      *v69 = v87;
    }
    else
    {
      *(_QWORD *)v69 = 0;
      *(_QWORD *)(v84 + 32) = 0;
    }
    (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v84 + 40))(v84, v68);
    v82 = v93;
    mlir::ValueRange::ValueRange(v94, (uint64_t)v105, v106);
    (*(void (**)(uint64_t, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v82, v94[0], v94[1]);
  }
  else
  {
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v55);
    v78 = v77;
    mlir::ValueRange::ValueRange(v97, (uint64_t)v114, v115);
    mlir::RewriterBase::inlineBlockBefore(v84, v66, v78, v97[0], v97[1]);
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v55);
    if (*(_QWORD *)(*(_QWORD *)(v79 + 16) + 40) == v79)
    {
      v81 = 0;
    }
    else
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)v79);
      v81 = v80;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 40))(v84, v81);
    v83 = v93;
    mlir::ValueRange::ValueRange(v96, (uint64_t)v105, v106);
    (*(void (**)(uint64_t, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)v84 + 24))(v84, v83, v96[0], v96[1]);
  }
  v43 = 1;
  v44 = v105;
  if (v105 != v107)
    goto LABEL_62;
LABEL_63:
  if (v108 != (_QWORD *)v110)
    free(v108);
  if (v111 != (_QWORD *)v113)
    free(v111);
  if (v114 != v116)
    free(v114);
  if (v90 != &v92)
    free(v90);
  return v43;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  unint64_t v28[2];
  _QWORD v29[39];

  v29[38] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    v27 = 1283;
    v26[2] = (uint64_t)"scf.for";
    v26[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v28, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  mlir::scf::ForOp::build((uint64_t)a1, (uint64_t)v29, v15, v16, v17, v28[0], v28[1], v18, 0, v22);
  v19 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v20;
}

void `anonymous namespace'::SimplifyTrivialLoops::~SimplifyTrivialLoops(_anonymous_namespace_::SimplifyTrivialLoops *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::SimplifyTrivialLoops::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t DefiningOp;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t YieldedValues;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  mlir::GenericProgramPoint **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  mlir::Operation *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void **p_p;
  char v59;
  mlir::Operation *v60;
  void *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  unint64_t v66[2];
  void *__p;
  uint64_t v68;
  _BYTE v69[32];
  unint64_t v70[2];
  unint64_t v71[2];
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v60 = (mlir::Operation *)a2;
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(void **)(v5 + 24);
  v7 = *(void **)(v5 + 56);
  if (v6 == v7)
  {
    mlir::ValueRange::ValueRange(v71, v5 + 96, *(unsigned int *)(a2 + 68) - 3);
    v23 = v71[0];
    v24 = v71[1];
LABEL_52:
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v23, v24);
    return 1;
  }
  v63 = 0;
  v64 = 0;
  v57 = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57);
  if (DefiningOp)
  {
    v9 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    {
      __p = v69;
      v68 = 0x100000000;
      mlir::Operation::fold(v9, 0, 0, (uint64_t)&__p);
      v10 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
         || (*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) == 0;
      if (!v10)
        v64 = *(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8;
      if (__p != v69)
        free(__p);
      if (!v10)
      {
        v57 = v7;
        v11 = mlir::Value::getDefiningOp((mlir::Value *)&v57);
        if (v11)
        {
          v12 = v11;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v11 + 48)))
          {
            __p = v69;
            v68 = 0x100000000;
            mlir::Operation::fold(v12, 0, 0, (uint64_t)&__p);
            v13 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
               || (*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) == 0;
            if (!v13)
              v63 = *(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8;
            if (__p != v69)
              free(__p);
            if (!v13)
            {
              mlir::IntegerAttr::getValue(&v64, (llvm::APInt *)&__p);
              mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v57);
              LODWORD(v73) = (_DWORD)p_p;
              if (p_p > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v72, (const void **)&v57);
              else
                v72 = v57;
              llvm::APInt::operator-=((uint64_t)&v72, (_QWORD **)&__p);
              v53 = v73;
              LODWORD(v73) = 0;
              if (v53 > 0x40)
              {
                v25 = *(_QWORD *)v72;
                if (v72)
                {
                  operator delete[](v72);
                  if (v73 >= 0x41)
                  {
                    if (v72)
                      operator delete[](v72);
                  }
                }
              }
              else
              {
                v25 = (uint64_t)((_QWORD)v72 << -(char)v53) >> -(char)v53;
              }
              if (p_p >= 0x41 && v57)
                operator delete[](v57);
              if (v68 >= 0x41 && __p)
                operator delete[](__p);
              goto LABEL_44;
            }
          }
        }
      }
    }
  }
  LODWORD(v68) = 1;
  __p = 0;
  v57 = v6;
  p_p = &__p;
  v61 = v7;
  v14 = mlir::Value::getDefiningOp((mlir::Value *)&v61);
  if (v14)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v14 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id
      && (*(_BYTE *)(v14 + 46) & 0x80) != 0
      && *(_DWORD *)(v14 + 68) == 2)
    {
      v15 = *(void **)(*(_QWORD *)(v14 + 72) + 24);
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v14, 1u, (uint64_t *)&p_p))
      {
        if (v15 == v6)
          goto LABEL_34;
      }
    }
  }
  v61 = &__p;
  v62 = v6;
  v65 = v7;
  v16 = mlir::Value::getDefiningOp((mlir::Value *)&v65);
  if (v16
    && (v17 = v16,
        *(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
    && (*(_BYTE *)(v16 + 46) & 0x80) != 0
    && *(_DWORD *)(v16 + 68) == 2)
  {
    LOBYTE(v18) = 0;
    v19 = 1;
    if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v16, 0, (uint64_t *)&v61))
    {
      v20 = *(void **)(*(_QWORD *)(v17 + 72) + 56);
      v21 = 0;
      if (v62 == v20)
      {
LABEL_34:
        if (v68 > 0x40)
          v18 = *(_QWORD *)__p;
        else
          v18 = (uint64_t)((_QWORD)__p << -(uint64_t)v68) >> -(uint64_t)v68;
        v19 = 0;
        v21 = v18 & 0xFFFFFFFFFFFFFF00;
      }
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    LOBYTE(v18) = 0;
    v21 = 0;
    v19 = 1;
  }
  if (v68 >= 0x41 && __p)
    operator delete[](__p);
  if ((v19 & 1) != 0)
    return 0;
  v25 = v21 | v18;
LABEL_44:
  if (v25 <= 0)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v26 = *(_QWORD *)(a2 + 72);
      v27 = *(unsigned int *)(a2 + 68) - 3;
    }
    else
    {
      v26 = 0;
      v27 = -3;
    }
    mlir::ValueRange::ValueRange(v70, v26 + 96, v27);
    v23 = v70[0];
    v24 = v70[1];
    goto LABEL_52;
  }
  mlir::scf::ForOp::getConstantStep((mlir::scf::ForOp *)&v60, (uint64_t)&v57);
  if (!v59)
    return 0;
  LODWORD(v62) = (_DWORD)p_p;
  if (p_p > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)&v57);
    if (v62 > 0x40)
    {
      v29 = (uint64_t *)v61;
      v30 = (_DWORD)v62 + 1;
      if (((*((_QWORD *)v61 + (((_DWORD)v62 - 1) >> 6)) >> (v62 - 1)) & 1) != 0)
      {
        if (v30 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v61) > 0x40)
          goto LABEL_67;
      }
      else if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v61) > 0x40)
      {
        goto LABEL_74;
      }
      if (*v29 >= v25)
        goto LABEL_74;
    }
    else if ((uint64_t)((_QWORD)v61 << -(char)v62) >> -(char)v62 >= v25)
    {
      goto LABEL_74;
    }
  }
  else
  {
    v61 = v57;
    if ((uint64_t)((_QWORD)v57 << -(char)p_p) >> -(char)p_p >= v25)
    {
LABEL_74:
      __p = v69;
      v68 = 0x400000000;
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v37 = *(unsigned int *)(a2 + 68) - 2;
        if (v37 <= 4)
        {
          v38 = 0;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
          goto LABEL_79;
        }
      }
      else
      {
        v37 = -2;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v69, v37, 8);
      v38 = v68;
      v39 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
      if (v68 >= HIDWORD(v68))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v69, v68 + 1, 8);
        v38 = v68;
      }
LABEL_79:
      *((_QWORD *)__p + v38) = v39;
      v40 = v68 + 1;
      LODWORD(v68) = v68 + 1;
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v41 = *(_QWORD *)(a2 + 72);
        v42 = *(unsigned int *)(a2 + 68) - 3;
      }
      else
      {
        v41 = 0;
        v42 = -3;
      }
      llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&__p, (uint64_t)__p + 8 * v40, v41 + 96, 0, v41 + 96, v42);
      v43 = *(unsigned int *)(a2 + 44);
      if ((v43 & 0x7FFFFF) != 0)
        v44 = ((a2 + 16 * ((v43 >> 23) & 1) + ((v43 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40);
      else
        v44 = 0;
      mlir::ValueRange::ValueRange(v66, (uint64_t)__p, v68);
      v45 = v66[0];
      v46 = v66[1];
      v47 = *(_QWORD *)(v44 + 8);
      if (v47)
        v48 = (mlir::GenericProgramPoint **)(v47 - 8);
      else
        v48 = 0;
      mlir::Block::getTerminator(v48);
      v50 = v49;
      if ((*(_BYTE *)(v49 + 46) & 0x80) != 0)
      {
        v51 = *(_QWORD *)(v49 + 72);
        v52 = *(unsigned int *)(v49 + 68);
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
      mlir::ValueRange::ValueRange((unint64_t *)&v72, v51, v52);
      mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v48, a2, v45, v46);
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v72, v73);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v50);
      if (__p != v69)
        free(__p);
      v22 = 1;
      if (v62 < 0x41)
        goto LABEL_94;
      goto LABEL_92;
    }
  }
LABEL_67:
  v31 = *(_QWORD *)(((a2
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  v32 = v31 - 8;
  if (!v31)
    v32 = 0;
  v33 = v32 + 32;
  v34 = *(_QWORD *)(v32 + 40);
  if (v34 != v33 && *(_QWORD *)(v34 + 8) == v33)
  {
    YieldedValues = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v60);
    {
      v54 = v60;
      v55 = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getYieldedValues((uint64_t)&v60);
      (*(void (**)(uint64_t, mlir::Operation *, unint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v54, v55, v56);
      v22 = 1;
      if (v62 < 0x41)
        goto LABEL_94;
LABEL_92:
      if (v61)
        operator delete[](v61);
      goto LABEL_94;
    }
  }
  v22 = 0;
  if (v62 >= 0x41)
    goto LABEL_92;
LABEL_94:
  if (v59 && p_p >= 0x41 && v57)
    operator delete[](v57);
  return v22;
}

mlir::Block *llvm::any_of<mlir::ValueRange,`anonymous namespace'::SimplifyTrivialLoops::matchAndRewrite(mlir::scf::ForOp,mlir::PatternRewriter &)::{lambda(mlir::Value)#1}>(uint64_t a1, uint64_t a2, mlir::Operation **a3)
{
  uint64_t v6;
  uint64_t v7;
  mlir::Operation *v8;
  Operation *v9;
  mlir::Block *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = 0;
  if (!a2)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = mlir::ValueRange::dereference_iterator(&v12, v6);
    v8 = *a3;
    v11 = v7;
    v9 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v11) + 2);
    if (v9 == v8)
      break;
    result = mlir::Operation::isProperAncestor(v8, v9);
    if ((result & 1) == 0)
    {
      v6 = ++v13;
      if (v12 != a1 || v6 != a2)
        continue;
    }
    return result;
  }
  return (mlir::Block *)1;
}

void `anonymous namespace'::LastTensorLoadCanonicalization::~LastTensorLoadCanonicalization(_anonymous_namespace_::LastTensorLoadCanonicalization *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

void `anonymous namespace'::LastTensorLoadCanonicalization::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnitAttr **a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v12;
  mlir::UnitAttr **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::GenericProgramPoint **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t DefiningOp;
  uint64_t v22;
  void *v23;
  _BOOL4 v25;
  _QWORD *v26;
  uint64_t Input;
  mlir::GenericProgramPoint *v28;
  uint64_t v29;
  mlir::UnitAttr *v30;
  mlir::UnitAttr *v31;
  _QWORD *v32;
  mlir::GenericProgramPoint *v33;
  mlir::UnitAttr *v34;
  uint64_t v35;
  mlir::UnitAttr *v36;
  mlir::GenericProgramPoint *v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  llvm *v51;
  uint64_t *p_NextResultAtOffset;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t NextResultAtOffset;
  llvm *v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68[2];
  void *v69;
  uint64_t v70;
  _BYTE v71[48];
  void **v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 64;
  v4 = *(unsigned int *)(a2 + 40);
  v5 = a2
     + 64
     + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
     + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8);
  v61 = *(_QWORD *)(a2 + 24);
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v6 = *(_QWORD *)(((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v4 + 8);
  v7 = v6 - 8;
  if (!v6)
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 56) - v8;
  if (v9 == 8)
LABEL_88:
    llvm::deallocate_buffer(v65, (void *)(16 * v67));
  v12 = (uint64_t *)(v8 + 8);
  v13 = a3 + 1;
  v60 = a2 - 96;
  v14 = 8 * (v9 >> 3) - 8;
  while (1)
  {
    v15 = *v12;
    v16 = (*(_DWORD *)(*v12 + 24) - 1);
    v17 = *(_QWORD *)(((v3
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v17)
      v18 = (mlir::GenericProgramPoint **)(v17 - 8);
    else
      v18 = 0;
    mlir::Block::getTerminator(v18);
    v20 = v19;
    NextResultAtOffset = *(_QWORD *)(*(_QWORD *)(v19 + 72) + 32 * v16 + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToTensorOp,void>::id)
        v22 = DefiningOp;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    v63 = v22;
    v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    v25 = v23 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v23 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    v62 = 0;
    v26 = *(_QWORD **)v15;
    if (*(_QWORD *)v15)
    {
      if (!*v26)
      {
        v26 = (_QWORD *)v26[2];
        if (*(_UNKNOWN **)(v26[6] + 16) != &mlir::detail::TypeIDResolver<mlir::bufferization::ToMemrefOp,void>::id)
          v26 = 0;
        v62 = v26;
        if (!v22)
          v25 = 0;
        if (!v25)
          goto LABEL_6;
        goto LABEL_27;
      }
      v26 = 0;
    }
    if (!v22)
      v25 = 0;
    if (!v25)
      goto LABEL_6;
LABEL_27:
    if (*(_QWORD *)v15)
    {
      if (!v26)
        goto LABEL_6;
    }
    else if (!v26)
    {
      goto LABEL_39;
    }
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v63);
    if (v62 - 2 != (_QWORD *)Input)
      goto LABEL_6;
    v22 = v63;
LABEL_39:
    v28 = *(mlir::GenericProgramPoint **)(v22 + 8);
    if (v28 == (mlir::GenericProgramPoint *)(*(_QWORD *)(v22 + 16) + 32))
    {
      if (!v20)
      {
LABEL_43:
        if (v62)
        {
          v30 = *(mlir::UnitAttr **)(a2 + 16);
          mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
          a3[3] = v30;
          a3[4] = v31;
          v32 = v62;
          v69 = (void *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v62) + 8) & 0xFFFFFFFFFFFFFFF8);
          v72 = (void **)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v62);
          v33 = mlir::OpBuilder::create<mlir::bufferization::ToMemrefOp,mlir::BaseMemRefType,mlir::detail::TypedValue<mlir::TensorType>>(v13, v32[3], (uint64_t *)&v69, (uint64_t *)&v72);
          (*((void (**)(mlir::UnitAttr **, _QWORD *, mlir::GenericProgramPoint *))*a3 + 4))(a3, v32, v33);
        }
        v34 = *(mlir::UnitAttr **)(a2 + 16);
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
        v36 = *(mlir::UnitAttr **)(v35 + 8);
        a3[3] = v34;
        a3[4] = v36;
        v69 = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v63);
        v37 = mlir::OpBuilder::create<mlir::bufferization::ToTensorOp,mlir::detail::TypedValue<mlir::BaseMemRefType>>(v13, v61, (uint64_t *)&v69);
        v38 = *(_QWORD *)(v15 + 24);
        v39 = v38 - 1;
        v40 = (void *)(a2 - 16 * v38);
        v41 = (void *)(v60 - 24 * (v38 - 6));
        if (v39 < 6)
          v41 = v40;
        v69 = v41;
        v70 = (uint64_t)v37 - 16;
        v72 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v65, (unint64_t *)&v69, &v72) & 1) == 0)
        {
          v42 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)&v65, (uint64_t)&v69, (unint64_t *)&v69, v72);
          *v42 = v69;
          v42[1] = v70;
        }
        (*((void (**)(mlir::UnitAttr **, uint64_t))*a3 + 9))(a3, v20);
        v43 = (_QWORD *)(*(_QWORD *)(v20 + 72) + 32 * v16);
        v44 = (_QWORD *)v43[1];
        if (v44)
        {
          *v44 = *v43;
          if (*v43)
            *(_QWORD *)(*v43 + 8) = v43[1];
        }
        v43[3] = v15;
        v43[1] = v15;
        v45 = *(_QWORD **)v15;
        *v43 = *(_QWORD *)v15;
        if (v45)
          v45[1] = v43;
        *(_QWORD *)v15 = v43;
        (*((void (**)(mlir::UnitAttr **, uint64_t))*a3 + 10))(a3, v20);
      }
    }
    else
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v28);
      if (v29 == v20)
        goto LABEL_43;
    }
LABEL_6:
    ++v12;
    v14 -= 8;
    if (!v14)
    {
      if ((_DWORD)v66)
      {
        v69 = v71;
        v70 = 0x600000000;
        v46 = *(unsigned int *)(a2 + 36);
        if (v46 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v46, 8);
          LODWORD(v46) = *(_DWORD *)(a2 + 36);
        }
        if ((_DWORD)v46)
          v47 = a2 - 16;
        else
          v47 = 0;
        if ((_DWORD)v46)
        {
          v48 = 0;
          v49 = v46;
          do
          {
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v48);
            v72 = 0;
            v50 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v65, (unint64_t *)&NextResultAtOffset, &v72);
            v51 = (llvm *)v72;
            if (!v50)
              v51 = (llvm *)((char *)v65 + 16 * v67);
            if (v51 == (llvm *)((char *)v65 + 16 * v67))
              p_NextResultAtOffset = &NextResultAtOffset;
            else
              p_NextResultAtOffset = (uint64_t *)((char *)v51 + 8);
            v53 = *p_NextResultAtOffset;
            v54 = v70;
            if (v70 >= (unint64_t)HIDWORD(v70))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
              v54 = v70;
            }
            *((_QWORD *)v69 + v54) = v53;
            v55 = v70 + 1;
            LODWORD(v70) = v70 + 1;
            ++v48;
          }
          while (v49 != v48);
        }
        else
        {
          v55 = v70;
        }
        LODWORD(NextResultAtOffset) = 0;
        mlir::ValueRange::ValueRange(v68, (uint64_t)v69, v55);
            + 2;
            + 2 > 7;
           + 2 >= 8)
        {
          v56 = 0;
          v72 = &v69;
          v73 = &NextResultAtOffset;
        }
        (*((void (**)(mlir::UnitAttr **, uint64_t, unint64_t, unint64_t, _QWORD, void ***))*a3
         + 2))(a3, a2, v68[0], v68[1], 0, &v72);
        v58 = v74;
        if (v74 >= 8)
        {
          if ((v74 & 4) != 0)
          {
            if ((v74 & 2) != 0)
              v59 = (uint64_t *)&v72;
            else
              v59 = (uint64_t *)v72;
            (*(void (**)(uint64_t *, uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 16))(v59, v57);
          }
          if ((v58 & 2) == 0)
            llvm::deallocate_buffer((llvm *)v72, v73);
        }
        if (v56
           + 2 >= 8)
        {
          llvm::deallocate_buffer((llvm *)&v69, &NextResultAtOffset);
        }
        if (v69 != v71)
          free(v69);
      }
      goto LABEL_88;
    }
  }
}

uint64_t sub_1806793DC()
{
  uint64_t v0;

  return v0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::bufferization::ToTensorOp,mlir::detail::TypedValue<mlir::BaseMemRefType>>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"bufferization.to_tensor", (const unsigned __int8 *)0x17, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"bufferization.to_tensor";
    v15[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::bufferization::ToTensorOp::build(a1, (uint64_t)v17, *a3, 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToTensorOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::bufferization::ToMemrefOp,mlir::BaseMemRefType,mlir::detail::TypedValue<mlir::TensorType>>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"bufferization.to_memref", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"bufferization.to_memref";
    v17[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::bufferization::ToMemrefOp::build(a1, (uint64_t)v19, *a3, *a4, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::bufferization::ToMemrefOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::OpOperand &>::CallImpl<`anonymous namespace'::LastTensorLoadCanonicalization::matchAndRewrite(mlir::scf::ForOp,mlir::PatternRewriter &)::{lambda(mlir::OpOperand &)#1} const>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = *(_QWORD *)(a2 + 24);
  v4 = **a1;
  v5 = *(unsigned int *)v2;
  *(_DWORD *)v2 = v5 + 1;
  return *(_QWORD *)(v4 + 8 * v5) != v3;
}

void `anonymous namespace'::ForOpTensorCastFolder::~ForOpTensorCastFolder(_anonymous_namespace_::ForOpTensorCastFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ForOpTensorCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *NextResultAtOffset;
  uint64_t DefiningOp;
  void *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t Input;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int OperandNumber;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v45;
  uint64_t v46;
  mlir::GenericProgramPoint *v47;
  uint64_t v48;
  void **p_AttrDictionary;
  mlir::MLIRContext *Value;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int v72;
  mlir::GenericProgramPoint *v73;
  uint64_t v74;
  uint64_t v75;
  mlir::GenericProgramPoint *v76;
  mlir::GenericProgramPoint *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  const double *v90;
  unsigned __int128 *v91;
  unint64_t v92;
  const double *v93;
  unsigned __int128 v94;
  unsigned __int128 v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  mlir::GenericProgramPoint *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  int v112;
  _BYTE *v113;
  mlir::GenericProgramPoint *v114;
  __int128 v115;
  mlir::OpBuilder *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t TiedLoopRegionIterArg;
  mlir::GenericProgramPoint *v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[48];
  unint64_t v127[2];
  __int128 v128;
  void *v129[2];
  _BYTE v130[24];
  uint64_t v131;
  uint64_t v132;
  void *AttrDictionary;
  uint64_t v134;
  void *v135[2];
  uint64_t v136;
  unint64_t v137[2];
  char *v138;
  uint64_t v139;
  _BYTE v140[32];
  __int128 v141;
  _QWORD *v142;
  int v143;
  _QWORD v144[6];

  v144[4] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(a2 + 68) - 3;
  else
    v5 = -3;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)&v141, a2, 3, v5, 0, 0);
  v6 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v6)
    v7 = a2 - 16;
  else
    v7 = 0;
  v128 = v141;
  v129[0] = v130;
  v129[1] = (void *)0x100000000;
  if (v143)
    llvm::SmallVectorImpl<std::pair<unsigned int,mlir::NamedAttribute>>::operator=((uint64_t)v129, (uint64_t *)&v142);
  v131 = v7;
  v132 = v6;
  if (v142 != v144)
    free(v142);
  v8 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)&v128);
  v9 = v131;
  v10 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)&v128);
  if (v8 == v10)
    goto LABEL_50;
  v11 = v10;
  if (v9 == v131)
  {
    v117 = a3;
    v21 = 0;
    v22 = v132;
    while (v22 != v21)
    {
      NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v21);
      *(_QWORD *)&v141 = *(_QWORD *)(v8 + 24);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v141);
      if (DefiningOp)
      {
        v25 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
        v26 = v25 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
        v27 = v25 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? DefiningOp : 0;
        v119 = v27;
        if (v26)
        {
          Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v119);
          if ((*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v119 - 8) & 0xFFFFFFFFFFFFFFF8))
          {
            v29 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v119) + 8) & 0xFFFFFFFFFFFFFFF8;
            v30 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v119);
            if (mlir::tensor::preservesStaticInformation(v29, *(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8))
            {
              if (*NextResultAtOffset && !*(_QWORD *)*NextResultAtOffset)
              {
                a3 = v117;
                goto LABEL_39;
              }
            }
          }
        }
      }
      v8 += 32;
      ++v21;
      if (v8 == v11)
        break;
    }
LABEL_50:
    v42 = 0;
    v43 = v129[0];
    if (v129[0] == v130)
      return v42;
LABEL_51:
    free(v43);
    return v42;
  }
  v12 = 0;
  while (1)
  {
    v13 = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12);
    *(_QWORD *)&v141 = *(_QWORD *)(v8 + 24);
    v14 = mlir::Value::getDefiningOp((mlir::Value *)&v141);
    if (v14)
    {
      v15 = *(void **)(*(_QWORD *)(v14 + 48) + 16);
      v16 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
      v17 = v15 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? v14 : 0;
      v119 = v17;
      if (v16)
      {
        v18 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v119);
        if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v119 - 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v19 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v119) + 8) & 0xFFFFFFFFFFFFFFF8;
          v20 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v119);
          if (mlir::tensor::preservesStaticInformation(v19, *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            if (*v13 && !*(_QWORD *)*v13)
              break;
          }
        }
      }
    }
    v8 += 32;
    ++v12;
    if (v8 == v11)
      goto LABEL_50;
  }
LABEL_39:
  v31 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v119);
  v32 = *(_QWORD *)(v8 + 16);
  v33 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v122 = *(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8;
  v123 = v33;
  *(_QWORD *)&v141 = &v142;
  *((_QWORD *)&v141 + 1) = 0x600000000;
  if ((*(_BYTE *)(v32 + 46) & 0x80) != 0)
    v34 = *(_DWORD *)(v32 + 68) - 3;
  else
    v34 = -3;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)&AttrDictionary, v32, 3, v34, 0, 0);
  v35 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)&AttrDictionary);
  v36 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)&AttrDictionary);
  if (v35 != v36)
  {
    v37 = v36;
    do
    {
      OperandNumber = mlir::OpOperand::getOperandNumber(v35);
      if (OperandNumber == mlir::OpOperand::getOperandNumber(v8))
      {
        v39 = DWORD2(v141);
        v40 = HIDWORD(v141);
        v41 = v31;
      }
      else
      {
        v41 = *(_QWORD *)(v35 + 24);
        v39 = DWORD2(v141);
        v40 = HIDWORD(v141);
      }
      if (v39 >= v40)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, &v142, v39 + 1, 8);
        v39 = DWORD2(v141);
      }
      *(_QWORD *)(v141 + 8 * v39) = v41;
      ++DWORD2(v141);
      v35 += 32;
    }
    while (v35 != v37);
  }
  if (v135[0] != &v136)
    free(v135[0]);
  v45 = *(_QWORD *)(v32 + 24);
  v46 = *(_QWORD *)(v32 + 72);
  AttrDictionary = *(void **)(v46 + 24);
  v124 = *(void **)(v46 + 56);
  v138 = *(char **)(v46 + 88);
  v116 = (mlir::OpBuilder *)(a3 + 8);
  v47 = mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)(a3 + 8), v45, (uint64_t *)&AttrDictionary, (uint64_t *)&v124, (uint64_t *)&v138, (uint64_t)&v141);
  v121 = v47;
  v48 = a3;
  if (*(_BYTE *)(v32 + 47))
  {
    AttrDictionary = (void *)mlir::Operation::getAttrDictionary((mlir::Operation *)v32);
    p_AttrDictionary = &AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (void **)(v32 + 56);
  }
  Value = (mlir::MLIRContext *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_AttrDictionary);
  mlir::Operation::setAttrs((uint64_t)v47, Value, v51);
  v52 = *(_QWORD *)((((unint64_t)v47
                    + 16 * (((unint64_t)*((unsigned int *)v47 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v47 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v47 + 10)
                  + 8);
  if (v52)
    v53 = v52 - 8;
  else
    v53 = 0;
  v54 = *(_QWORD *)(v53 + 48);
  v55 = *(_QWORD *)(v53 + 56);
  v56 = v55 - v54;
  v138 = v140;
  v139 = 0x400000000;
  if ((unint64_t)(v55 - v54) < 0x21)
  {
    v57 = 0;
    v58 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v140, v56 >> 3, 8);
    v57 = v139;
    v58 = v139;
  }
  v16 = v55 == v54;
  v59 = v48;
  if (!v16)
  {
    v60 = &v138[8 * v57];
    if ((unint64_t)(v56 - 8) >= 0x38)
    {
      v62 = &v138[8 * v57];
      v61 = (uint64_t *)v54;
      if ((unint64_t)&v62[-v54] >= 0x20)
      {
        v63 = ((unint64_t)(v56 - 8) >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v60 += v64;
        v61 = (uint64_t *)(v54 + v64);
        v65 = (__int128 *)(v54 + 16);
        v66 = v62 + 16;
        v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *v65;
          *(v66 - 1) = *(v65 - 1);
          *v66 = v68;
          v65 += 2;
          v66 += 2;
          v67 -= 4;
        }
        while (v67);
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
    }
    else
    {
      v61 = (uint64_t *)v54;
    }
    do
    {
      v69 = *v61++;
      *(_QWORD *)v60 = v69;
      v60 += 8;
    }
    while (v61 != (uint64_t *)(v54 + (v56 & 0xFFFFFFFFFFFFFFF8)));
  }
LABEL_72:
  LODWORD(v139) = v58 + ((unint64_t)v56 >> 3);
  v70 = (_QWORD *)(v48 + 24);
  v115 = *(_OWORD *)(v48 + 24);
  v71 = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v48 + 24) = v53;
  *(_QWORD *)(v48 + 32) = v71;
  v72 = mlir::OpOperand::getOperandNumber(v8);
  TiedLoopRegionIterArg = mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getTiedLoopRegionIterArg((uint64_t *)&v121, *((_QWORD *)v47 + 9) + 32 * v72);
  v73 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>(v116, *((_QWORD *)v121 + 3), (uint64_t *)&v123, &TiedLoopRegionIterArg);
  *(_QWORD *)&v138[8 * *(unsigned int *)(TiedLoopRegionIterArg + 24)] = (char *)v73 - 16;
  v74 = *(_QWORD *)(((v32
                    + 16 * (((unint64_t)*(unsigned int *)(v32 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v32 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v32 + 40)
                  + 8);
  if (v74)
    v75 = v74 - 8;
  else
    v75 = 0;
  mlir::ValueRange::ValueRange(v137, (uint64_t)v138, v139);
  mlir::RewriterBase::mergeBlocks(v48, v75, v53, v137[0], v137[1]);
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v53);
  v77 = v76;
  v78 = *((_QWORD *)v76 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v76);
  *v70 = v78;
  v118 = v59;
  *(_QWORD *)(v59 + 32) = v79;
  v80 = (*(_DWORD *)(TiedLoopRegionIterArg + 24) - 1);
  v81 = *((_QWORD *)v121 + 3);
  AttrDictionary = *(void **)(*((_QWORD *)v77 + 9) + 32 * v80 + 24);
  v82 = (char *)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>(v116, v81, (uint64_t *)&v122, (uint64_t *)&AttrDictionary)- 16;
  if ((*((_BYTE *)v77 + 46) & 0x80) != 0)
  {
    v83 = *((_QWORD *)v77 + 9);
    v84 = *((unsigned int *)v77 + 17);
    AttrDictionary = v135;
    v134 = 0x600000000;
    if (v84 < 7)
    {
      if (!(_DWORD)v84)
      {
        v99 = 0;
        v100 = v135;
        goto LABEL_91;
      }
      v85 = 0;
      v86 = (char *)v135;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&AttrDictionary, v135, v84, 8);
      v85 = v134;
      v86 = (char *)AttrDictionary;
    }
    v87 = &v86[8 * v85];
    if (v84 >= 0xD
      && ((unint64_t)v87 >= v83 + 32 * v84 || v83 + 24 >= (unint64_t)&v86[8 * v85 + 8 * v84]))
    {
      v89 = v84 & 3;
      if ((v84 & 3) == 0)
        v89 = 4;
      v88 = v84 - v89;
      v87 += 8 * v88;
      v90 = (const double *)(v83 + 88);
      v91 = (unsigned __int128 *)&v86[8 * v85 + 16];
      v92 = v88;
      do
      {
        v93 = v90 - 8;
        v94 = (unsigned __int128)vld4q_f64(v93);
        v95 = (unsigned __int128)vld4q_f64(v90);
        *(v91 - 1) = v94;
        *v91 = v95;
        v90 += 16;
        v91 += 2;
        v92 -= 4;
      }
      while (v92);
    }
    else
    {
      v88 = 0;
    }
    v96 = v84 - v88;
    v97 = (uint64_t *)(v83 + 32 * v88 + 24);
    do
    {
      v98 = *v97;
      v97 += 4;
      *(_QWORD *)v87 = v98;
      v87 += 8;
      --v96;
    }
    while (v96);
    v99 = v134;
    v100 = AttrDictionary;
  }
  else
  {
    LODWORD(v84) = 0;
    v99 = 0;
    v100 = v135;
    AttrDictionary = v135;
    HIDWORD(v134) = 6;
  }
LABEL_91:
  v101 = v118;
  LODWORD(v134) = v99 + v84;
  v100[v80] = v82;
  mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(v116, *((_QWORD *)v121 + 3), (uint64_t)&AttrDictionary);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v101 + 40))(v101, v77);
  v102 = *((_QWORD *)v121 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v121);
  v104 = *(_QWORD *)(v103 + 8);
  *(_QWORD *)(v118 + 24) = v102;
  *(_QWORD *)(v118 + 32) = v104;
  v105 = v121;
  v106 = *((unsigned int *)v121 + 9);
  if ((_DWORD)v106)
    v107 = (char *)v121 - 16;
  else
    v107 = 0;
  v124 = v126;
  v125 = 0x600000000;
  if (v106 < 7)
  {
    if (!(_DWORD)v106)
    {
      v112 = 0;
      v113 = v126;
      goto LABEL_101;
    }
    v108 = 0;
    v109 = v126;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, v126, v106, 8);
    v108 = v125;
    v109 = v124;
  }
  v110 = 0;
  v111 = &v109[8 * v108];
  do
  {
    *(_QWORD *)&v111[8 * v110] = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v107, v110);
    ++v110;
  }
  while (v106 != v110);
  v112 = v125;
  v105 = v121;
  v113 = v124;
  v101 = v118;
LABEL_101:
  LODWORD(v125) = v112 + v106;
  v114 = mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>(v116, *((_QWORD *)v105 + 3), (uint64_t *)&v123, (uint64_t *)&v113[8 * v80]);
  *((_QWORD *)v124 + v80) = (char *)v114 - 16;
  if (AttrDictionary != v135)
    free(AttrDictionary);
  if ((_QWORD)v115)
  {
    *(_OWORD *)v70 = v115;
  }
  else
  {
    *v70 = 0;
    v70[1] = 0;
  }
  if (v138 != v140)
    free(v138);
  if ((_QWORD **)v141 != &v142)
    free((void *)v141);
  mlir::ValueRange::ValueRange(v127, (uint64_t)v124, v125);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v101 + 24))(v101, a2, v127[0], v127[1]);
  if (v124 != v126)
    free(v124);
  v42 = 1;
  v43 = v129[0];
  if (v129[0] != v130)
    goto LABEL_51;
  return v42;
}

uint64_t mlir::detail::LoopLikeOpInterfaceTrait<mlir::scf::ForOp>::getTiedLoopRegionIterArg(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17[4];
  void *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(v4 + 68) - 3;
  else
    v5 = -3;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v17, v4, 3, v5, 0, 0);
  v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v17);
  v8 = v7;
  if (v18 != v19)
    free(v18);
  v9 = -32;
  v10 = 32 * v8;
  do
  {
    v9 += 32;
    if (!v10)
      break;
    v10 -= 32;
    v11 = v6 == a2;
    v6 += 32;
  }
  while (!v11);
  v12 = v9 >> 5;
  if (v12 == v8)
    return 0;
  v14 = 32 * v12;
  v15 = *(_QWORD *)(((*a1
                    + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(*a1 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(*a1 + 40)
                  + 8);
  if (v15)
    v16 = v15 - 8;
  else
    v16 = 0;
  return *(_QWORD *)(*(_QWORD *)(v16 + 48) + (v14 >> 2) + 8);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"tensor.cast";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DeviceMappingAttrInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DeviceMappingAttrInterface]";
      v23 = 82;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DeviceMappingAttrInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[473];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v11 = (llvm::raw_ostream *)result;
  v18 = a2;
  v19 = a3;
  if (a2 != a4 || a3 != a5)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v18, a3);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v12);
    v13 = ++v19;
    if (v18 != a4 || v13 != a5)
    {
      do
      {
        v15 = (_WORD *)*((_QWORD *)v11 + 4);
        if (*((_QWORD *)v11 + 3) - (_QWORD)v15 > 1uLL)
        {
          *v15 = 8236;
          *((_QWORD *)v11 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v11, ", ", 2uLL);
        }
        v16 = mlir::ValueRange::dereference_iterator(&v18, v19);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, v16);
        v17 = ++v19;
      }
      while (v18 != a4 || v17 != a5);
    }
  }
  return result;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::InParallelOp>::Impl<mlir::scf::ForallOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  const mlir::OperationState *v5;
  uint64_t v6;
  __int128 v8;
  _QWORD v9[38];
  unint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v9, a2, (uint64_t)"scf.forall.in_parallel", 22);
  v3 = (_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 16);
  v4 = mlir::OperationState::addRegion((mlir::OperationState *)v9);
  mlir::ValueRange::ValueRange(v10, 0, 0);
  mlir::OpBuilder::createBlock((_QWORD *)a1, v4, 0, v10[0], v10[1], 0, 0);
  if ((_QWORD)v8)
  {
    *v3 = v8;
  }
  else
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = mlir::Operation::create((mlir::Operation *)v9, v5);
  mlir::OperationState::~OperationState((mlir::OperationState *)v9);
  return v6;
}

void `anonymous namespace'::DimOfForallOp::~DimOfForallOp(_anonymous_namespace_::DimOfForallOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::DimOfForallOp::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *SourceMutable;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Input;
  uint64_t v18;

  v18 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18);
  result = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (result)
  {
    v5 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    {
      v6 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18);
      if (HIBYTE(*(_DWORD *)(v5 + 44)))
        v7 = (_DWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1) + 64);
      else
        v7 = 0;
      v8 = v7[8];
      v9 = v7[9];
      v10 = v7[10];
      if (v6 && (*(_QWORD *)(v6 + 8) & 7) == 6)
        v11 = *(_DWORD *)(v6 + 16) + 6;
      else
        v11 = *(_QWORD *)(v6 + 8) & 7;
      v12 = *(uint64_t **)(*(_QWORD *)(v5 + 72) + 32 * (v9 + v8 + v10 + v11) + 24);
      v13 = v18;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v18);
      SourceMutable = (uint64_t *)mlir::tensor::DimOp::getSourceMutable((mlir::tensor::DimOp *)&v18);
      v15 = (uint64_t *)SourceMutable[1];
      if (v15)
      {
        *v15 = *SourceMutable;
        if (*SourceMutable)
          *(_QWORD *)(*SourceMutable + 8) = SourceMutable[1];
      }
      SourceMutable[3] = (uint64_t)v12;
      SourceMutable[1] = (uint64_t)v12;
      v16 = *v12;
      *SourceMutable = *v12;
      if (v16)
        *(_QWORD *)(v16 + 8) = SourceMutable;
      *v12 = (uint64_t)SourceMutable;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v13);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::~FoldTensorCastOfOutputIntoForallOp(_anonymous_namespace_::FoldTensorCastOfOutputIntoForallOp *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ForallOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  mlir::Value *v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  const double *v20;
  unsigned __int128 *v21;
  uint64_t v22;
  const double *v23;
  unsigned __int128 v24;
  unsigned __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  mlir::Value *v29;
  unsigned int v30;
  uint64_t v31;
  mlir::Value *v32;
  int v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t DefiningOp;
  void *v43;
  BOOL v44;
  void *v45;
  unint64_t v46;
  uint64_t Input;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *inserted;
  char *v52;
  void **v53;
  char *v54;
  __int128 v55;
  _DWORD *v56;
  int v57;
  BOOL v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *Context;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  mlir::GenericProgramPoint *v72;
  void *v73;
  mlir::GenericProgramPoint *v74;
  uint64_t v75;
  mlir::GenericProgramPoint **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  mlir::GenericProgramPoint *v80;
  mlir::GenericProgramPoint *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  mlir::Value *v98;
  uint64_t **v99;
  uint64_t v100;
  BOOL v101;
  void *v102;
  uint64_t *DestMutable;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned int v109;
  unsigned int v110;
  char *v111;
  char *v112;
  uint64_t *v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  int64_t v118;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  __int16 v124;
  unint64_t v125[2];
  void *v126;
  unsigned int v127;
  uint64_t v128;
  void *v129;
  unsigned int v130;
  uint64_t v131;
  void *v132;
  unsigned int v133;
  uint64_t v134;
  mlir::Value *v135;
  uint64_t v136;
  _BYTE v137[48];
  uint64_t v138;
  llvm *v139;
  unsigned int v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[48];
  void *v144;
  uint64_t v145;
  _QWORD v146[36];
  uint64_t v147[4];
  __int16 v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v121 = a2;
  v138 = 1;
  LODWORD(v139) = -1;
  v140 = -1;
  v141 = v143;
  v142 = 0x200000000;
  v3 = *(unsigned int *)(a2 + 44);
  v4 = (_DWORD *)(a2 + 16 * ((v3 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = 0;
  v5 = v4[8];
  v6 = v4[9];
  v8 = v4[10];
  v7 = v4[11];
  if ((v3 & 0x800000) != 0)
    v9 = *(_QWORD *)(a2 + 72);
  else
    v9 = 0;
  v10 = (v6 + v5 + v8);
  v11 = (v7 + v10);
  v12 = v11 - v10;
  v135 = (mlir::Value *)v137;
  v136 = 0x600000000;
  if ((unint64_t)(v11 - v10) >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v137, v11 - v10, 8);
    v13 = v136;
    v14 = v135;
    v15 = (char *)v135 + 8 * v136;
    if (v12 < 0x13)
      goto LABEL_20;
LABEL_10:
    v16 = v9 + 32 * v10;
    v17 = (unint64_t)v15 >= v9 + 32 * v11 || v16 + 24 >= (unint64_t)v14 + 8 * (v13 + v11 - v10);
    if (v17)
    {
      v18 = 4;
      if ((v12 & 3) != 0)
        v18 = v12 & 3;
      v19 = v12 - v18;
      v15 += 8 * (v12 - v18);
      v20 = (const double *)(v16 + 88);
      v21 = (unsigned __int128 *)((char *)v14 + 8 * v13 + 16);
      v22 = v18 + v10 - v11;
      do
      {
        v23 = v20 - 8;
        v24 = (unsigned __int128)vld4q_f64(v23);
        v25 = (unsigned __int128)vld4q_f64(v20);
        *(v21 - 1) = v24;
        *v21 = v25;
        v20 += 16;
        v21 += 2;
        v22 += 4;
      }
      while (v22);
LABEL_21:
      v26 = v19 + v10 - v11;
      v27 = (uint64_t *)(32 * v19 + 32 * v10 + v9 + 24);
      do
      {
        v28 = *v27;
        v27 += 4;
        *(_QWORD *)v15 = v28;
        v15 += 8;
        v17 = __CFADD__(v26++, 1);
      }
      while (!v17);
      v29 = v135;
      v30 = v136 + v12;
      LODWORD(v136) = v136 + v12;
      if ((_DWORD)v136)
        goto LABEL_25;
      goto LABEL_62;
    }
LABEL_20:
    v19 = 0;
    goto LABEL_21;
  }
  if (v7)
  {
    v13 = 0;
    v14 = (mlir::Value *)v137;
    v15 = v137;
    if (v12 < 0x13)
      goto LABEL_20;
    goto LABEL_10;
  }
  v29 = (mlir::Value *)v137;
  v30 = v12;
  LODWORD(v136) = v12;
  if ((_DWORD)v12)
  {
LABEL_25:
    v31 = 0;
    v32 = (mlir::Value *)((char *)v29 + 8 * v30);
    do
    {
      DefiningOp = mlir::Value::getDefiningOp(v29);
      if (!DefiningOp)
        goto LABEL_30;
      v43 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
      v44 = v43 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id;
      v45 = v43 == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id ? (void *)DefiningOp : 0;
      v129 = v45;
      if (!v44)
        goto LABEL_30;
      v46 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8;
      Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v129);
      if (!mlir::tensor::preservesStaticInformation(v46, *(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_30;
      v48 = *(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v129) + 8);
      v49 = *((_QWORD *)v129 - 1);
      v132 = (void *)v31;
      if ((v138 & 1) != 0)
      {
        v33 = 2;
        v34 = &v139;
      }
      else
      {
        v33 = v140;
        if (!v140)
        {
          v50 = 0;
LABEL_42:
          inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucket<unsigned int const&,unsigned int const&>((uint64_t)&v138, v50, &v132, (_DWORD *)&v132 + 1);
          v145 = 0;
          v146[0] = 0;
          LODWORD(v144) = v31;
          v52 = (char *)v141;
          if (v142 >= HIDWORD(v142))
          {
            v60 = v142 + 1;
            if (v141 <= &v144 && (char *)v141 + 24 * v142 > (char *)&v144)
            {
              v118 = (char *)&v144 - (_BYTE *)v141;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v60, 24);
              v52 = (char *)v141;
              v53 = (void **)((char *)v141 + v118);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, v143, v60, 24);
              v53 = &v144;
              v52 = (char *)v141;
            }
          }
          else
          {
            v53 = &v144;
          }
          v54 = &v52[24 * v142];
          v55 = *(_OWORD *)v53;
          *((_QWORD *)v54 + 2) = v53[2];
          *(_OWORD *)v54 = v55;
          v39 = v142;
          LODWORD(v142) = v142 + 1;
          inserted[1] = v39;
          goto LABEL_29;
        }
        v34 = v139;
      }
      v35 = v33 - 1;
      v36 = (v33 - 1) & (37 * v31);
      v37 = &v34[2 * v36];
      v38 = *v37;
      if (*v37 != (_DWORD)v31)
      {
        v56 = 0;
        v57 = 1;
        while (v38 != -1)
        {
          if (v56)
            v58 = 0;
          else
            v58 = v38 == -2;
          if (v58)
            v56 = v37;
          v59 = v36 + v57++;
          v36 = v59 & v35;
          v37 = &v34[2 * v36];
          v38 = *v37;
          if (*v37 == (_DWORD)v31)
            goto LABEL_28;
        }
        if (v56)
          v50 = v56;
        else
          v50 = v37;
        goto LABEL_42;
      }
LABEL_28:
      v39 = v34[2 * v36 + 1];
LABEL_29:
      v40 = (char *)v141 + 24 * v39;
      *((_QWORD *)v40 + 1) = v48 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v40 + 2) = v49 & 0xFFFFFFFFFFFFFFF8;
      v41 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v129);
      *((_QWORD *)v135 + v31) = v41;
LABEL_30:
      ++v31;
      v29 = (mlir::Value *)((char *)v29 + 8);
    }
    while (v29 != v32);
  }
LABEL_62:
  if ((_DWORD)v142)
  {
    v61 = *(_QWORD *)(v121 + 24);
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v121, (uint64_t)&v132);
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v121, (uint64_t)&v129);
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v121, (uint64_t)&v126);
    v62 = *(_QWORD *)(v121 + 16 * (((unint64_t)*(unsigned int *)(v121 + 44) >> 23) & 1) + 64);
    v120[0] = &v121;
    v120[1] = &v138;
    v120[2] = a3;
    v122 = v61;
    Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v122);
    v64 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.forall", (const unsigned __int8 *)0xA, Context);
    if (!v65)
    {
      v148 = 1283;
      v147[2] = (uint64_t)"scf.forall";
      v147[3] = 10;
             " by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-w"
             "ith-dialects-management";
      v124 = 259;
      llvm::operator+(v147, (uint64_t *)&v123, (uint64_t)&v144);
      llvm::report_fatal_error((llvm::Twine *)&v144, 1);
    }
    mlir::OperationState::OperationState(&v144, v61, v64);
    v66 = (uint64_t *)v132;
    v67 = v133;
    v68 = (uint64_t *)v129;
    v69 = v130;
    v70 = (uint64_t *)v126;
    v71 = v127;
    mlir::ValueRange::ValueRange((unint64_t *)v147, (uint64_t)v135, v136);
    v72 = mlir::OpBuilder::create((mlir::OpBuilder *)(a3 + 1), (const mlir::OperationState *)&v144);
    v73 = *(void **)(*((_QWORD *)v72 + 6) + 16);
    mlir::OperationState::~OperationState((mlir::OperationState *)&v144);
    if (v73 == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
      v74 = v72;
    else
      v74 = 0;
    if (v126 != &v128)
      free(v126);
    if (v129 != &v131)
      free(v129);
    if (v132 != &v134)
      free(v132);
    v75 = *(_QWORD *)((((unint64_t)v74
                      + 16 * (((unint64_t)*((unsigned int *)v74 + 11) >> 23) & 1)
                      + (((unint64_t)*((unsigned int *)v74 + 11) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)v74 + 10)
                    + 8);
    if (v75)
      v76 = (mlir::GenericProgramPoint **)(v75 - 8);
    else
      v76 = 0;
    mlir::Block::getTerminator(v76);
    v78 = *(_QWORD *)(((v77
                      + 16 * (((unint64_t)*(unsigned int *)(v77 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(v77 + 44) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v77 + 40)
                    + 8);
    if (v78)
      v79 = v78 - 8;
    else
      v79 = 0;
    v80 = (mlir::GenericProgramPoint *)(v79 + 32);
    v81 = *(mlir::GenericProgramPoint **)(v79 + 40);
    v82 = *((unsigned int *)v74 + 11);
    v83 = *(_QWORD *)((((unint64_t)v74 + 16 * ((v82 >> 23) & 1) + ((v82 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)v74 + 10)
                    + 8);
    if (v83)
      v84 = v83 - 8;
    else
      v84 = 0;
    v85 = *(_QWORD *)(v84 + 48);
    v86 = (*(_QWORD *)(v84 + 56) - v85) >> 3;
    if (HIBYTE(*((_DWORD *)v74 + 11)))
      v87 = (uint64_t)v74 + 16 * ((v82 >> 23) & 1) + 64;
    else
      v87 = 0;
    v144 = *(void **)(v87 + 8);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v144);
    if (v81 != v80 && v88 != v86)
    {
      v99 = (uint64_t **)(v85 + 8 * v88);
      v100 = 8 * v86 - 8 * v88 - 8;
      do
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v81);
        v144 = v102;
        DestMutable = (uint64_t *)mlir::tensor::InsertSliceOp::getDestMutable((mlir::tensor::InsertSliceOp *)&v144);
        v104 = *v99;
        v105 = (uint64_t *)DestMutable[1];
        if (v105)
        {
          *v105 = *DestMutable;
          if (*DestMutable)
            *(_QWORD *)(*DestMutable + 8) = DestMutable[1];
        }
        DestMutable[3] = (uint64_t)v104;
        DestMutable[1] = (uint64_t)v104;
        v106 = *v104;
        *DestMutable = *v104;
        if (v106)
          *(_QWORD *)(v106 + 8) = DestMutable;
        *v104 = (uint64_t)DestMutable;
        v81 = (mlir::GenericProgramPoint *)*((_QWORD *)v81 + 1);
        ++v99;
        v101 = v81 == v80 || v100 == 0;
        v100 -= 8;
      }
      while (!v101);
    }
    v90 = *((_QWORD *)v74 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v74);
    v92 = *(_QWORD *)(v91 + 8);
    a3[3] = v90;
    a3[4] = v92;
    v93 = *((unsigned int *)v74 + 9);
    if ((_DWORD)v93)
      v94 = (uint64_t)v74 - 16;
    else
      v94 = 0;
    v144 = v146;
    v145 = 0x600000000;
    if (v93 < 7)
    {
      if (!(_DWORD)v93)
      {
        v109 = 0;
        LODWORD(v145) = 0;
        v110 = v142;
        if (!(_DWORD)v142)
          goto LABEL_114;
        goto LABEL_111;
      }
      v95 = 0;
      v96 = v146;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, v146, v93, 8);
      v95 = v145;
      v96 = v144;
    }
    v107 = 0;
    v108 = &v96[v95];
    do
    {
      v108[v107] = mlir::detail::OpResultImpl::getNextResultAtOffset(v94, v107);
      ++v107;
    }
    while (v93 != v107);
    v109 = v145 + v93;
    LODWORD(v145) = v145 + v93;
    v110 = v142;
    if (!(_DWORD)v142)
    {
LABEL_114:
      v116 = v121;
      mlir::ValueRange::ValueRange(v125, (uint64_t)v144, v109);
      (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*a3 + 24))(a3, v116, v125[0], v125[1]);
      if (v144 != v146)
        free(v144);
      v97 = 1;
      v98 = v135;
      if (v135 != (mlir::Value *)v137)
        goto LABEL_117;
      goto LABEL_118;
    }
LABEL_111:
    v111 = (char *)v141;
    v112 = (char *)v141 + 24 * v110;
    do
    {
      v113 = (uint64_t *)(v111 + 16);
      v114 = *(_DWORD *)v111;
      v111 += 24;
      v115 = (uint64_t *)((char *)v144 + 8 * v114);
      *v115 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>((mlir::OpBuilder *)(a3 + 1), v61, v113, v115)- 16;
    }
    while (v111 != v112);
    v109 = v145;
    goto LABEL_114;
  }
  v97 = 0;
  v98 = v135;
  if (v135 != (mlir::Value *)v137)
LABEL_117:
    free(v98);
LABEL_118:
  if (v141 != v143)
    free(v141);
  if ((v138 & 1) == 0)
    llvm::deallocate_buffer(v139, (void *)(8 * v140));
  return v97;
}

_DWORD *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucket<unsigned int const&,unsigned int const&>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  _DWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 2;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 2;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = (37 * *a3) & (v14 - 1);
  a2 = (_DWORD *)(v13 + 8 * v16);
  v17 = *a2;
  if (*a3 != *a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -2;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = (_DWORD *)(v13 + 8 * (v21 & v15));
      v17 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,unsigned int,2u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  llvm *v8;
  uint64_t v9;
  llvm *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *buffer;
  int v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  llvm *v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  _DWORD *v34;
  int v35;
  int v36;
  _DWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int *v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  BOOL v53;
  int v54;
  _DWORD v55[2];
  _QWORD v56[2];

  v2 = a2;
  v3 = result;
  v56[1] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  v7 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 1) == 0)
  {
    v8 = *(llvm **)(result + 8);
    v9 = *(unsigned int *)(result + 16);
    if (v2 > 2)
    {
      buffer = llvm::allocate_buffer(8 * v2, (std::align_val_t)4uLL);
      *(_QWORD *)(v3 + 8) = buffer;
      *(_QWORD *)(v3 + 16) = v2;
      v22 = *(_DWORD *)v3;
      v10 = (llvm *)((char *)v8 + 8 * v9);
      *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
      if ((v22 & 1) == 0)
      {
        v23 = &buffer[2 * v2];
        v24 = 8 * v2 - 8;
        if (v24 < 8)
        {
          v26 = buffer;
          goto LABEL_26;
        }
LABEL_20:
        v25 = (v24 >> 3) + 1;
        v26 = &buffer[2 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
        v27 = buffer + 2;
        v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          *(v27 - 2) = -1;
          *v27 = -1;
          v27 += 4;
          v28 -= 2;
        }
        while (v28);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_27:
          if ((_DWORD)v9)
          {
            v29 = v8;
            do
            {
              v36 = *(_DWORD *)v29;
              if (*(_DWORD *)v29 <= 0xFFFFFFFD)
              {
                if ((*(_BYTE *)v3 & 1) != 0)
                {
                  v31 = 2;
                  v30 = v3 + 8;
                }
                else
                {
                  v30 = *(_QWORD *)(v3 + 8);
                  v31 = *(_DWORD *)(v3 + 16);
                }
                v32 = v31 - 1;
                v33 = (v31 - 1) & (37 * v36);
                v34 = (_DWORD *)(v30 + 8 * v33);
                v35 = *v34;
                if (v36 != *v34)
                {
                  v37 = 0;
                  v38 = 1;
                  while (v35 != -1)
                  {
                    if (v37)
                      v39 = 0;
                    else
                      v39 = v35 == -2;
                    if (v39)
                      v37 = v34;
                    v40 = v33 + v38++;
                    v33 = v40 & v32;
                    v34 = (_DWORD *)(v30 + 8 * (v40 & v32));
                    v35 = *v34;
                    if (v36 == *v34)
                      goto LABEL_31;
                  }
                  if (v37)
                    v34 = v37;
                }
LABEL_31:
                *v34 = v36;
                v34[1] = *((_DWORD *)v29 + 1);
                *(_DWORD *)v3 += 2;
              }
              v29 = (llvm *)((char *)v29 + 8);
            }
            while (v29 != v10);
          }
          llvm::deallocate_buffer(v8, (void *)(8 * v9));
        }
        do
        {
LABEL_26:
          *v26 = -1;
          v26 += 2;
        }
        while (v26 != v23);
        goto LABEL_27;
      }
    }
    else
    {
      v10 = (llvm *)((char *)v8 + 8 * v9);
      *(_QWORD *)result = 1;
    }
    v23 = (_DWORD *)(v3 + 24);
    buffer = (_DWORD *)(v3 + 8);
    v24 = 8;
    goto LABEL_20;
  }
  v11 = (_QWORD *)(result + 8);
  v12 = v55;
  if (*(_DWORD *)(result + 8) <= 0xFFFFFFFD)
  {
    v41 = *(_DWORD *)(result + 12);
    v55[0] = *(_DWORD *)(result + 8);
    v55[1] = v41;
    v12 = (unsigned int *)v56;
    v13 = *(_DWORD *)(result + 16);
    if (v13 > 0xFFFFFFFD)
    {
LABEL_10:
      if (v2 < 3)
        goto LABEL_11;
      goto LABEL_51;
    }
  }
  else
  {
    v13 = *(_DWORD *)(result + 16);
    if (v13 > 0xFFFFFFFD)
      goto LABEL_10;
  }
  v42 = *(_DWORD *)(result + 20);
  *v12 = v13;
  v12[1] = v42;
  v12 += 2;
  if (v2 < 3)
  {
LABEL_11:
    *(_QWORD *)result = v7 & 1;
    if ((v7 & 1) == 0)
      goto LABEL_12;
LABEL_52:
    v15 = v3 + 24;
    v14 = (_DWORD *)(v3 + 8);
    v16 = 8;
    goto LABEL_14;
  }
LABEL_51:
  *(_DWORD *)result = v7 & 0xFFFFFFFE;
  result = (uint64_t)llvm::allocate_buffer(8 * v2, (std::align_val_t)4uLL);
  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = v2;
  v43 = *(_DWORD *)v3;
  v13 = v2;
  *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
  if ((v43 & 1) != 0)
    goto LABEL_52;
LABEL_12:
  if (!v13)
    goto LABEL_55;
  v14 = (_DWORD *)*v11;
  v15 = *v11 + 8 * v13;
  v16 = 8 * v13 - 8;
  if (v16 < 8)
  {
    v18 = (_DWORD *)*v11;
    do
    {
LABEL_54:
      *v18 = -1;
      v18 += 2;
    }
    while (v18 != (_DWORD *)v15);
    goto LABEL_55;
  }
LABEL_14:
  v17 = (v16 >> 3) + 1;
  v18 = &v14[2 * (v17 & 0x3FFFFFFFFFFFFFFELL)];
  v19 = v14 + 2;
  v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    *(v19 - 2) = -1;
    *v19 = -1;
    v19 += 4;
    v20 -= 2;
  }
  while (v20);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_54;
LABEL_55:
  if (v55 != v12)
  {
    v44 = v55;
    do
    {
      v51 = *v44;
      if (*v44 <= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v46 = 2;
          v45 = v3 + 8;
        }
        else
        {
          v45 = *(_QWORD *)(v3 + 8);
          v46 = *(_DWORD *)(v3 + 16);
        }
        v47 = v46 - 1;
        v48 = (v46 - 1) & (37 * v51);
        v49 = (unsigned int *)(v45 + 8 * v48);
        v50 = *v49;
        if (v51 != *v49)
        {
          v52 = 0;
          result = 1;
          while (v50 != -1)
          {
            if (v52)
              v53 = 0;
            else
              v53 = v50 == -2;
            if (v53)
              v52 = v49;
            v54 = v48 + result;
            result = (result + 1);
            v48 = v54 & v47;
            v49 = (unsigned int *)(v45 + 8 * (v54 & v47));
            v50 = *v49;
            if (v51 == *v49)
              goto LABEL_59;
          }
          if (v52)
            v49 = v52;
        }
LABEL_59:
        *v49 = v51;
        v49[1] = v44[1];
        *(_DWORD *)v3 += 2;
      }
      v44 += 2;
    }
    while (v44 != v12);
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::ValueRange)>::callback_fn<`anonymous namespace'::FoldTensorCastOfOutputIntoForallOp::matchAndRewrite(mlir::scf::ForallOp,mlir::PatternRewriter &)::{lambda(mlir::OpBuilder,mlir::Location,mlir::ValueRange)#1}>(uint64_t **a1, _OWORD *a2, uint64_t a3, void *a4, unint64_t a5)
{
  __int128 v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ParentBlock;
  _OWORD v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47[7];
  void *__src;
  uint64_t v49;
  _BYTE v50[48];
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v44[0] = *a2;
  v44[1] = v7;
  v51 = (uint64_t)a4;
  v52 = a5;
  v8 = *(unsigned int *)(**a1 + 36);
  if (a5 <= v8)
  {
    v9 = a4;
    v8 = a5;
  }
  else
  {
    v9 = (void *)mlir::ValueRange::offset_base(&v51, a5 - v8);
  }
  __src = v50;
  v49 = 0x600000000;
  if (v8 < 7)
  {
    v10 = 0;
    v46[0] = v9;
    v46[1] = 0;
    v11 = v50;
    if (!v8)
    {
      LODWORD(v49) = 0;
      v15 = a1[1];
      v16 = *((unsigned int *)v15 + 8);
      if (!(_DWORD)v16)
        goto LABEL_16;
      goto LABEL_14;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v8, 8);
    v10 = v49;
    v11 = __src;
    v46[0] = v9;
    v46[1] = 0;
  }
  v12 = 0;
  v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(v46, (uint64_t)v12);
    v12 = ++v46[1];
  }
  while (v46[0] != v9 || v12 != (void *)v8);
  LODWORD(v49) = v49 + v8;
  v15 = a1[1];
  v16 = *((unsigned int *)v15 + 8);
  if ((_DWORD)v16)
  {
LABEL_14:
    v17 = (__int128 *)v15[3];
    v18 = 24 * v16;
    do
    {
      v19 = *((_QWORD *)v17 + 2);
      v20 = *v17;
      v17 = (__int128 *)((char *)v17 + 24);
      *(_OWORD *)v46 = v20;
      v47[0] = v19;
      v21 = (uint64_t *)((char *)__src + 8 * v20);
      *v21 = (uint64_t)mlir::OpBuilder::create<mlir::tensor::CastOp,mlir::Type &,mlir::BlockArgument &>((mlir::OpBuilder *)v44, a3, v47, v21)- 16;
      v18 -= 24;
    }
    while (v18);
  }
LABEL_16:
  v22 = **a1;
  v23 = *(unsigned int *)(v22 + 44);
  v24 = v22 + 16 * ((v23 >> 23) & 1) + 64;
  if (!BYTE3(v23))
    v24 = 0;
  v46[0] = *(void **)(v24 + 8);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v46);
  v26 = v51;
  if (v52 >= v25)
    v27 = v25;
  else
    v27 = v52;
  v46[0] = v47;
  v46[1] = (void *)0x600000000;
  if (v27 < 7)
  {
    v28 = 0;
    v53 = v51;
    v54 = 0;
    v29 = v47;
    if (!v27)
    {
      v33 = 0;
      v34 = 6;
      goto LABEL_31;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v47, v27, 8);
    v28 = LODWORD(v46[1]);
    v29 = (uint64_t *)v46[0];
    v53 = v26;
    v54 = 0;
  }
  v30 = 0;
  v31 = &v29[v28];
  do
  {
    *v31++ = mlir::ValueRange::dereference_iterator(&v53, v30);
    v30 = ++v54;
  }
  while (v53 != v26 || v30 != v27);
  v33 = (int)v46[1];
  v34 = HIDWORD(v46[1]);
LABEL_31:
  v35 = (v33 + v27);
  LODWORD(v46[1]) = v35;
  v36 = __src;
  v37 = v49;
  v38 = v49 + v35;
  if (v38 > v34)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v47, v38, 8);
    LODWORD(v35) = v46[1];
  }
  if ((_DWORD)v37)
  {
    memcpy((char *)v46[0] + 8 * v35, v36, 8 * v37);
    LODWORD(v35) = v46[1];
  }
  LODWORD(v46[1]) = v35 + v37;
  v39 = **a1;
  v40 = (uint64_t)a1[2];
  v41 = *(_QWORD *)(((v39
                    + 16 * (((unint64_t)*(unsigned int *)(v39 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v39 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v39 + 40)
                  + 8);
  if (v41)
    v42 = v41 - 8;
  else
    v42 = 0;
  v45 = mlir::ValueRange::dereference_iterator(&v51, 0);
  ParentBlock = mlir::Value::getParentBlock((mlir::Value *)&v45);
  mlir::ValueRange::ValueRange((unint64_t *)&v53, (uint64_t)v46[0], LODWORD(v46[1]));
  mlir::RewriterBase::mergeBlocks(v40, v42, ParentBlock, v53, v54);
  if (v46[0] != v47)
    free(v46[0]);
  if (__src != v50)
    free(__src);
}

void `anonymous namespace'::ForallOpControlOperandsFolder::~ForallOpControlOperandsFolder(_anonymous_namespace_::ForallOpControlOperandsFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ForallOpControlOperandsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DenseI64ArrayAttr;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  mlir::MLIRContext *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  mlir::MLIRContext *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t DenseI32ArrayAttr;
  mlir::StringAttr *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  _BYTE v53[48];
  void *v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60[2];
  unint64_t v61[2];
  mlir::MLIRContext *v62[2];
  void *v63;
  _WORD v64[12];
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *v68;
  uint64_t v69;
  _BYTE v70[48];
  void *v71;
  uint64_t v72;
  _BYTE v73[48];
  void *v74;
  uint64_t v75;
  _BYTE v76[48];
  void *v77;
  uint64_t v78;
  _BYTE v79[48];
  _BYTE *v80;
  uint64_t v81;
  _BYTE v82[48];
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v50, (uint64_t)&v57);
  mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v50, (uint64_t)&v54);
  mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v50, (uint64_t)&v51);
  if (mlir::foldDynamicIndexList((uint64_t)&v57, 0)
    || mlir::foldDynamicIndexList((uint64_t)&v54, 0)
    || mlir::foldDynamicIndexList((uint64_t)&v51, 0))
  {
    v49 = v50;
    (*((void (**)(mlir::MLIRContext **))*a3 + 9))(a3);
    v80 = v82;
    v81 = 0x600000000;
    v77 = v79;
    v78 = 0x600000000;
    v74 = v76;
    v75 = 0x600000000;
    v71 = v73;
    v72 = 0x600000000;
    v68 = v70;
    v69 = 0x600000000;
    v65 = v67;
    v66 = 0x600000000;
    mlir::dispatchIndexOpFoldResults((uint64_t *)v57, v58, (uint64_t)&v80, (uint64_t)&v71);
    v4 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44)))
      v5 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    else
      v5 = 0;
    v6 = *(_DWORD *)(v5 + 32);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(v50 + 48) + 104) - 8);
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    v9 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44)))
      v9 = 0;
    v10 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v9 + 32, 4);
    mlir::NamedAttribute::NamedAttribute(&v83, v7, v10);
    LODWORD(v84) = 0;
    v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v4, 0, v6, &v84, 1);
    mlir::ValueRange::ValueRange(v61, (uint64_t)v80, v81);
    mlir::MutableOperandRange::assign((uint64_t)v62, v61[0], v61[1]);
    if (v63 != v64)
      free(v63);
    v11 = v71;
    v12 = v72;
    v13 = v50;
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 8);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v11, v12);
    mlir::Operation::setAttr(v13, v14, DenseI64ArrayAttr);
    mlir::dispatchIndexOpFoldResults((uint64_t *)v54, v55, (uint64_t)&v77, (uint64_t)&v68);
    v16 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44)))
      v17 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    else
      v17 = 0;
    v18 = *(_DWORD *)(v17 + 32);
    v19 = *(_DWORD *)(v17 + 36);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(v50 + 48) + 104) - 8);
    v21 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    v22 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44)))
      v22 = 0;
    v23 = mlir::detail::DenseArrayAttrImpl<int>::get(v21, v22 + 32, 4);
    mlir::NamedAttribute::NamedAttribute(&v83, v20, v23);
    LODWORD(v84) = 1;
    v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v16, v18, v19, &v84, 1);
    mlir::ValueRange::ValueRange(v60, (uint64_t)v77, v78);
    mlir::MutableOperandRange::assign((uint64_t)v62, v60[0], v60[1]);
    if (v63 != v64)
      free(v63);
    v24 = v68;
    v25 = v69;
    v26 = v50;
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 24);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    v28 = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v24, v25);
    mlir::Operation::setAttr(v26, v27, v28);
    mlir::dispatchIndexOpFoldResults((uint64_t *)v51, v52, (uint64_t)&v74, (uint64_t)&v65);
    v29 = v50;
    if (HIBYTE(*(_DWORD *)(v50 + 44)))
      v30 = (_DWORD *)(v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64);
    else
      v30 = 0;
    v31 = v30[9] + v30[8];
    v32 = v30[10];
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(v50 + 48) + 104) - 8);
    v34 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    v35 = v50 + 16 * (((unint64_t)*(unsigned int *)(v50 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v50 + 44)))
      v35 = 0;
    v36 = mlir::detail::DenseArrayAttrImpl<int>::get(v34, v35 + 32, 4);
    mlir::NamedAttribute::NamedAttribute(&v83, v33, v36);
    LODWORD(v84) = 2;
    v85 = v83;
    mlir::MutableOperandRange::MutableOperandRange((uint64_t)v62, v29, v31, v32, &v84, 1);
    mlir::ValueRange::ValueRange((unint64_t *)&v84, (uint64_t)v74, v75);
    mlir::MutableOperandRange::assign((uint64_t)v62, v84, v85);
    if (v63 != v64)
      free(v63);
    v37 = v65;
    v38 = v66;
    v39 = v50;
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 48) + 96) + 16);
    v62[0] = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v50 + 24));
    v41 = mlir::Builder::getDenseI64ArrayAttr(v62, (uint64_t)v37, v38);
    mlir::Operation::setAttr(v39, v40, v41);
    v42 = v50;
    *(_QWORD *)&v83 = __PAIR64__(v78, v81);
    *((_QWORD *)&v83 + 1) = __PAIR64__(*(_DWORD *)(v50 + 36), v75);
    DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a3 + 1, (uint64_t)&v83, 4);
    v44 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v42 + 24));
    v64[0] = 261;
    v62[0] = (mlir::MLIRContext *)"operandSegmentSizes";
    v62[1] = (mlir::MLIRContext *)19;
    v45 = mlir::StringAttr::get(v44, (mlir::MLIRContext *)v62);
    mlir::Operation::setAttr(v42, v45, DenseI32ArrayAttr);
    if (v65 != v67)
      free(v65);
    if (v68 != v70)
      free(v68);
    if (v71 != v73)
      free(v71);
    if (v74 != v76)
      free(v74);
    if (v77 != v79)
      free(v77);
    if (v80 != v82)
      free(v80);
    (*((void (**)(mlir::MLIRContext **, uint64_t))*a3 + 10))(a3, v49);
    v46 = 1;
    v47 = v51;
    if (v51 != v53)
      goto LABEL_38;
  }
  else
  {
    v46 = 0;
    v47 = v51;
    if (v51 != v53)
LABEL_38:
      free(v47);
  }
  if (v54 != &v56)
    free(v54);
  if (v57 != &v59)
    free(v57);
  return v46;
}

void `anonymous namespace'::ForallOpSingleOrZeroIterationDimsFolder::~ForallOpSingleOrZeroIterationDimsFolder(_anonymous_namespace_::ForallOpSingleOrZeroIterationDimsFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ForallOpSingleOrZeroIterationDimsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *ConstantIndexOp;
  char v40;
  _QWORD *v41;
  void *v42;
  int v44;
  void **v45;
  int v46;
  mlir::Operation *v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  mlir::GenericProgramPoint *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  mlir::Block *v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  int8x16_t *v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  void **p_src;
  uint64_t Value;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t CallableRegion;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  mlir::Operation *v82;
  unint64_t v83;
  uint64_t v84;
  mlir::Operation *v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  llvm *v98[2];
  int v99;
  llvm *v100;
  uint64_t v101;
  int v102;
  llvm *v103;
  uint64_t v104;
  unsigned int v105;
  mlir::Operation *v106;
  unint64_t v107[2];
  unint64_t v108[2];
  void *v109;
  uint64_t v110;
  _BYTE v111[48];
  void *v112;
  uint64_t v113;
  _BYTE v114[48];
  void *__src;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void *__dst[2];
  _QWORD v121[2];
  int8x16_t v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[48];
  void *v126;
  uint64_t v127;
  _BYTE v128[48];
  __int128 v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[48];
  _BYTE *v133;
  uint64_t v134;
  _BYTE v135[48];
  _QWORD *v136;
  uint64_t v137;
  _QWORD v138[8];

  v138[6] = *MEMORY[0x1E0C80C00];
  v106 = (mlir::Operation *)a2;
  if (!*(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64))
  {
    v97 = *(_QWORD *)(a2 + 24);
    v98[0] = 0;
    v136 = v138;
    v137 = 0x600000000;
    v133 = v135;
    v134 = 0x600000000;
    v130 = v132;
    v131 = 0x600000000;
    v98[1] = 0;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
    mlir::scf::ForallOp::getMixedLowerBound((mlir::scf::ForallOp *)&v106, (uint64_t)&__src);
    mlir::scf::ForallOp::getMixedUpperBound((mlir::scf::ForallOp *)&v106, (uint64_t)&v112);
    mlir::scf::ForallOp::getMixedStep((mlir::scf::ForallOp *)&v106, (uint64_t)&v109);
    v3 = *((unsigned int *)v106 + 11);
    v4 = (void **)((char *)v106 + 16 * ((v3 >> 23) & 1) + 64);
    v5 = *(_QWORD *)((((unint64_t)v4 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v106 + 10)
                   + 8);
    if (v5)
      v6 = v5 - 8;
    else
      v6 = 0;
    v7 = *(_QWORD *)(v6 + 48);
    v8 = (*(_QWORD *)(v6 + 56) - v7) >> 3;
    if (!HIBYTE(*((_DWORD *)v106 + 11)))
      v4 = 0;
    __dst[0] = v4[1];
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)__dst);
    if (v8 >= v9)
      v10 = v9;
    else
      v10 = v8;
    mlir::ValueRange::ValueRange((unint64_t *)__dst, v7, v10);
    v11 = *(_OWORD *)__dst;
    __dst[0] = v121;
    __dst[1] = (void *)0x600000000;
    v12 = (int)v116;
    if ((_DWORD)v116)
    {
      if (__src == &v117)
      {
        v94 = v11;
        v13 = v116;
        if (v116 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, v121, v116, 8),
              (v13 = v116) != 0))
        {
          memcpy(__dst[0], __src, 8 * v13);
        }
        LODWORD(__dst[1]) = v12;
        v11 = v94;
      }
      else
      {
        __dst[0] = __src;
        __dst[1] = v116;
        __src = &v117;
        HIDWORD(v116) = 0;
      }
      LODWORD(v116) = 0;
    }
    v123 = v125;
    v124 = 0x600000000;
    v14 = v113;
    if (!(_DWORD)v113)
    {
LABEL_29:
      v126 = v128;
      v127 = 0x600000000;
      v16 = v110;
      v17 = v109;
      if (!(_DWORD)v110)
      {
LABEL_39:
        v129 = v11;
        if (v17 != v111)
          free(v17);
        if (v112 != v114)
          free(v112);
        if (__src != &v117)
          free(__src);
        v19 = 0;
        v20 = (uint64_t *)__dst[0];
        v21 = (uint64_t *)v123;
        v22 = (uint64_t *)v126;
        v23 = v129;
        __src = __dst[0];
        v116 = (uint64_t *)v123;
        v117 = (char *)v126;
        v118 = v129;
        v119 = 0;
        if (!LODWORD(__dst[1]) || !(_DWORD)v124 || !(_DWORD)v127)
        {
LABEL_71:
          v42 = v126;
          if (v126 == v128)
            goto LABEL_73;
          goto LABEL_72;
        }
        v24 = 0;
        v25 = (uint64_t *)((char *)__dst[0] + 8 * LODWORD(__dst[1]));
        v26 = (uint64_t *)((char *)v123 + 8 * v124);
        v27 = *((_QWORD *)&v129 + 1);
        v28 = (uint64_t *)((char *)v126 + 8 * v127);
        while (1)
        {
          if (v118 == v23 && v24 == v27)
          {
            v19 = 0;
            goto LABEL_71;
          }
          v30 = (void *)mlir::ValueRange::dereference_iterator(&v118, v24);
          v31 = mlir::constantTripCount(*v20, *v21, *v22);
          if (v32)
          {
            if (v31 == 1)
            {
              ConstantIndexOp = mlir::getValueOrCreateConstantIndexOp((mlir::IndexType **)(a3 + 8), v97, *v20);
              v109 = v30;
              v112 = 0;
              v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v98, (unint64_t *)&v109, &v112);
              v41 = v112;
              if ((v40 & 1) == 0)
              {
                v41 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v98, (uint64_t)&v109, (unint64_t *)&v109, v112);
                *v41 = v109;
                v41[1] = 0;
              }
              v41[1] = ConstantIndexOp;
              goto LABEL_66;
            }
            if (!v31)
            {
              v85 = v106;
              v86 = *((unsigned int *)v106 + 11);
              if (HIBYTE(*((_DWORD *)v106 + 11)))
                v87 = (_DWORD *)((char *)v106 + 16 * ((v86 >> 23) & 1) + 64);
              else
                v87 = 0;
              v88 = v87[8];
              v89 = v87[9];
              v91 = v87[10];
              v90 = v87[11];
              if ((v86 & 0x800000) != 0)
                v92 = *((_QWORD *)v106 + 9);
              else
                v92 = 0;
              mlir::ValueRange::ValueRange(v108, v92 + 32 * (v89 + v88 + v91), (v90 + v89 + v88 + v91) - (unint64_t)(v89 + v88 + v91));
              (*(void (**)(uint64_t, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, v85, v108[0], v108[1]);
              v19 = 1;
              v42 = v126;
              if (v126 == v128)
              {
LABEL_73:
                if (v123 != v125)
                  free(v123);
                if (__dst[0] != v121)
                  free(__dst[0]);
                if ((v19 & 1) != 0)
                  goto LABEL_78;
                v44 = v137;
                v45 = (void **)((char *)v106 + 16 * (((unint64_t)*((unsigned int *)v106 + 11) >> 23) & 1) + 64);
                if (!HIBYTE(*((_DWORD *)v106 + 11)))
                  v45 = 0;
                __dst[0] = v45[1];
                mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)__dst);
                if (v44 == v46)
                {
                  __dst[0] = "no dimensions have 0 or 1 iterations";
                  v122.i16[0] = 259;
                  v47 = v106;
                  __src = __dst;
                  v48 = *(_QWORD *)(a3 + 16);
                  if (v48 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a3 + 16)))
                    (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v48 + 64))(v48, *((_QWORD *)v47 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::ForallOp &>(mlir::scf::ForallOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
                  goto LABEL_78;
                }
                if (!(_DWORD)v137)
                {
                  mlir::scf::promote(a3, (uint64_t)v106);
                  goto LABEL_78;
                }
                v49 = *((unsigned int *)v106 + 11);
                if (HIBYTE(*((_DWORD *)v106 + 11)))
                  v50 = (_DWORD *)((char *)v106 + 16 * ((v49 >> 23) & 1) + 64);
                else
                  v50 = 0;
                v51 = v50[8];
                v52 = v50[9];
                v54 = v50[10];
                v53 = v50[11];
                if ((v49 & 0x800000) != 0)
                  v55 = *((_QWORD *)v106 + 9);
                else
                  v55 = 0;
                v56 = (v52 + v51 + v54);
                __dst[0] = (void *)(v55 + 32 * v56);
                __dst[1] = (void *)((v53 + v56) - v56);
                __src = 0;
                v57 = mlir::OpBuilder::create<mlir::scf::ForallOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::OperandRange,std::nullopt_t const&,decltype(nullptr)>((mlir::OpBuilder *)(a3 + 8), v97, (uint64_t)&v136, (uint64_t)&v133, (uint64_t)&v130, (uint64_t)__dst);
                v58 = (uint64_t)v57;
                v59 = *((unsigned int *)v57 + 11);
                if ((v59 & 0x7FFFFF) != 0)
                {
                  v60 = (((unint64_t)v57 + 16 * ((v59 >> 23) & 1) + ((v59 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)v57 + 10);
                  v61 = *(_QWORD *)(v60 + 8);
                  if (v61 != v60)
                  {
                    do
                    {
LABEL_93:
                      v62 = *(_QWORD *)(v61 + 8);
                      if (v61)
                        v63 = (mlir::Block *)(v61 - 8);
                      else
                        v63 = 0;
                      llvm::ilist_traits<mlir::Block>::removeNodeFromList(v60, (uint64_t)v63);
                      v64 = *((_QWORD *)v63 + 1);
                      v65 = (_QWORD *)*((_QWORD *)v63 + 2);
                      *v65 = v64;
                      *(_QWORD *)(v64 + 8) = v65;
                      *((_QWORD *)v63 + 1) = 0;
                      *((_QWORD *)v63 + 2) = 0;
                      mlir::Block::~Block(v63);
                      operator delete(v66);
                      v61 = v62;
                    }
                    while (v62 != v60);
                  }
                }
                else
                {
                  v60 = 0;
                  v61 = MEMORY[8];
                  if (MEMORY[8])
                    goto LABEL_93;
                }
                v67 = *(_QWORD *)(v58 + 48);
                v68 = *(int8x16_t **)(v67 + 96);
                v69 = v68->i64[*(_QWORD *)(v67 + 104) - 1];
                v70 = v68->i64[1];
                __dst[0] = v121;
                v71 = v68[1];
                v121[0] = v69;
                v121[1] = v70;
                v122 = vextq_s8(v71, v71, 8uLL);
                __dst[1] = (void *)0x600000004;
                if (*((_BYTE *)v106 + 47))
                {
                  __src = (void *)mlir::Operation::getAttrDictionary(v106);
                  p_src = &__src;
                }
                else
                {
                  p_src = (void **)((char *)v106 + 56);
                }
                Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)p_src);
                v75 = (uint64_t *)Value;
                if (v74)
                {
                  v76 = (uint64_t *)(Value + 16 * v74);
                  do
                  {
                    CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v75);
                    if (!LODWORD(__dst[1]))
                      goto LABEL_111;
                    v78 = 8 * LODWORD(__dst[1]);
                    v79 = (char *)__dst[0];
                    do
                    {
                      if (*(_QWORD *)v79 == CallableRegion)
                        goto LABEL_110;
                      v79 += 8;
                      v78 -= 8;
                    }
                    while (v78);
                    v79 = (char *)__dst[0] + 8 * LODWORD(__dst[1]);
LABEL_110:
                    if (LODWORD(__dst[1]) == (v79 - (char *)__dst[0]) >> 3)
                    {
LABEL_111:
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v58);
                      v80 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v75);
                      mlir::Operation::setAttr(v58, v80, v75[1]);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v58);
                    }
                    v75 += 2;
                  }
                  while (v75 != v76);
                }
                v81 = ((v58
                      + 16 * (((unint64_t)*(unsigned int *)(v58 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(v58 + 44) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(v58 + 40);
                (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, llvm **))(*(_QWORD *)a3 + 8))(a3, (((unint64_t)v106+ 16 * (((unint64_t)*((unsigned int *)v106 + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)v106 + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v106 + 10), v81, *(_QWORD *)(v81 + 8), v98);
                v82 = v106;
                v83 = *(unsigned int *)(v58 + 36);
                if ((_DWORD)v83)
                  v84 = v58 - 16;
                else
                  v84 = 0;
                mlir::ValueRange::ValueRange(v107, v84, v83);
                (*(void (**)(uint64_t, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, v82, v107[0], v107[1]);
                if (__dst[0] != v121)
                  free(__dst[0]);
LABEL_78:
                llvm::deallocate_buffer(v103, (void *)(16 * v105));
              }
LABEL_72:
              free(v42);
              goto LABEL_73;
            }
          }
          v33 = *v20;
          v34 = v137;
          if (v137 >= (unint64_t)HIDWORD(v137))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, v138, v137 + 1, 8);
            v34 = v137;
          }
          v136[v34] = v33;
          LODWORD(v137) = v137 + 1;
          v35 = *v21;
          v36 = v134;
          if (v134 >= (unint64_t)HIDWORD(v134))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v135, v134 + 1, 8);
            v36 = v134;
          }
          *(_QWORD *)&v133[8 * v36] = v35;
          LODWORD(v134) = v134 + 1;
          v37 = *v22;
          v38 = v131;
          if (v131 >= (unint64_t)HIDWORD(v131))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v130, v132, v131 + 1, 8);
            v38 = v131;
          }
          *((_QWORD *)v130 + v38) = v37;
          LODWORD(v131) = v131 + 1;
LABEL_66:
          v19 = 0;
          v20 = (uint64_t *)((char *)__src + 8);
          v21 = v116 + 1;
          __src = v20;
          ++v116;
          v22 = (uint64_t *)(v117 + 8);
          v24 = v119 + 1;
          v117 += 8;
          ++v119;
          if (v20 == v25 || v21 == v26 || v22 == v28)
            goto LABEL_71;
        }
      }
      if (v109 != v111)
      {
        v126 = v109;
        v127 = v110;
        v109 = v111;
        HIDWORD(v110) = 0;
        v17 = v111;
LABEL_38:
        LODWORD(v110) = 0;
        goto LABEL_39;
      }
      v96 = v11;
      if (v110 < 7)
      {
        v18 = v110;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v110, 8);
        v18 = v110;
        v17 = v109;
        if (!(_DWORD)v110)
          goto LABEL_37;
      }
      memcpy(v126, v17, 8 * v18);
      v17 = v109;
LABEL_37:
      LODWORD(v127) = v16;
      v11 = v96;
      goto LABEL_38;
    }
    if (v112 != v114)
    {
      v123 = v112;
      v124 = v113;
      v112 = v114;
      HIDWORD(v113) = 0;
LABEL_28:
      LODWORD(v113) = 0;
      goto LABEL_29;
    }
    v95 = v11;
    if (v113 < 7)
    {
      v15 = v113;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, v125, v113, 8);
      v15 = v113;
      if (!(_DWORD)v113)
        goto LABEL_27;
    }
    memcpy(v123, v112, 8 * v15);
LABEL_27:
    LODWORD(v124) = v14;
    v11 = v95;
    goto LABEL_28;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ForallOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::OperandRange,std::nullopt_t const&,decltype(nullptr)>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  unint64_t v30[2];
  _QWORD v31[39];

  v31[38] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v25);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.forall", (const unsigned __int8 *)0xA, Context);
  if (!v14)
  {
    v29 = 1283;
    v28[2] = (uint64_t)"scf.forall";
    v28[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v27 = 259;
    llvm::operator+(v28, (uint64_t *)&v26, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v13);
  v15 = *(uint64_t **)a3;
  v16 = *(unsigned int *)(a3 + 8);
  v17 = *(uint64_t **)a4;
  v18 = *(unsigned int *)(a4 + 8);
  v19 = *(uint64_t **)a5;
  v20 = *(unsigned int *)(a5 + 8);
  mlir::ValueRange::ValueRange(v30, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::scf::ForallOp::build((uint64_t)a1, (uint64_t)v31, v15, v16, v17, v18, v19, v20, v30[0], v30[1], 0, 0, 0, v24);
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForallOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::ForallOp &>(mlir::scf::ForallOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void `anonymous namespace'::CombineIfs::~CombineIfs(_anonymous_namespace_::CombineIfs *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::IfOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::CombineIfs::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DefiningOp;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  mlir::Operation *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  mlir::Operation *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  const double *v53;
  unsigned __int128 *v54;
  unint64_t v55;
  const double *v56;
  unsigned __int128 v57;
  unsigned __int128 v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  mlir::detail::OpResultImpl *v68;
  uint64_t v69;
  uint64_t **v70;
  char *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  mlir::Region *Parent;
  mlir::Block *v76;
  mlir::Region *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  mlir::Region *v81;
  mlir::Block *v82;
  mlir::Region *v83;
  uint64_t *v84;
  unsigned int *v85;
  uint64_t v86;
  char *v87;
  mlir::detail::OpResultImpl *v88;
  uint64_t v89;
  uint64_t v90;
  mlir::detail::OpResultImpl *v91;
  int v92;
  int v93;
  BOOL v94;
  unint64_t *v95;
  uint64_t v96;
  void *v97;
  mlir::OpBuilder *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  mlir::detail::OpResultImpl **v117;
  uint64_t v119;
  unint64_t v120;
  const double *v121;
  unsigned __int128 *v122;
  unint64_t v123;
  const double *v124;
  unsigned __int128 v125;
  unsigned __int128 v126;
  unint64_t v127;
  mlir::detail::OpResultImpl **v128;
  mlir::detail::OpResultImpl *v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  mlir::detail::OpResultImpl **v169;
  mlir::detail::OpResultImpl **v170;
  unint64_t v171;
  uint64_t v172;
  const double *v173;
  unsigned __int128 *v174;
  unint64_t v175;
  const double *v176;
  unsigned __int128 v177;
  unsigned __int128 v178;
  unint64_t v179;
  mlir::detail::OpResultImpl **v180;
  mlir::detail::OpResultImpl *v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t i;
  uint64_t v189;
  void **v190;
  uint64_t NextResultAtOffset;
  mlir::detail::OpResultImpl **v192;
  unint64_t v193;
  mlir::detail::OpResultImpl *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  mlir::detail::OpResultImpl *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203[2];
  unint64_t v204[2];
  void *v205;
  uint64_t v206;
  _BYTE v207[48];
  unint64_t v208[2];
  void *v209;
  uint64_t v210;
  mlir::detail::OpResultImpl *v211;
  uint64_t v212;
  unint64_t v213[2];
  char *v214;
  uint64_t v215;
  _BYTE v216[48];
  char *Filter;
  unint64_t v218;
  _QWORD v219[8];

  v219[6] = *MEMORY[0x1E0C80C00];
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(*(_QWORD *)(a2 + 16) + 40));
  if (v5 == a2 || *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == a2)
    return 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)a2);
  v7 = v6 && *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id;
  if (!v7)
    return 0;
  v8 = v6;
  if (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) != *(_QWORD *)(*(_QWORD *)(v6 + 72) + 24))
  {
    v9 = 0;
    v10 = 0;
    Filter = *(char **)(*(_QWORD *)(a2 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (!DefiningOp)
      goto LABEL_26;
    goto LABEL_20;
  }
  v12 = (_QWORD *)(((a2 + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8) + 87) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  v13 = *v12 - 8;
  v7 = *v12 == 0;
  v16 = (_QWORD *)v12[3];
  v15 = v12 + 3;
  v14 = v16;
  if (v7)
    v10 = 0;
  else
    v10 = v13;
  v17 = (uint64_t)(v14 - 1);
  if (!v14)
    v17 = 0;
  if (v14 == v15)
    v9 = 0;
  else
    v9 = v17;
  Filter = *(char **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (DefiningOp)
  {
LABEL_20:
    v18 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v19 = v18 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    if (v18 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
      v20 = (char *)DefiningOp;
    else
      v20 = 0;
    v214 = v20;
    if (v19
      && *(_QWORD *)(*(_QWORD *)(v8 + 72) + 24) == mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v214))
    {
      v209 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v214);
      v41 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v41)
      {
        if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v209, v41))
        {
          v42 = (_QWORD *)(((a2
                           + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                           + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(a2 + 40));
          v43 = *v42 - 8;
          v7 = *v42 == 0;
          v46 = (_QWORD *)v42[3];
          v45 = v42 + 3;
          v44 = v46;
          if (v7)
            v9 = 0;
          else
            v9 = v43;
          v47 = (uint64_t)(v44 - 1);
          if (!v44)
            v47 = 0;
          if (v44 != v45)
            v10 = v47;
        }
      }
    }
  }
LABEL_26:
  Filter = *(char **)(*(_QWORD *)(v8 + 72) + 24);
  v21 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
  if (v21)
  {
    v22 = *(void **)(*(_QWORD *)(v21 + 48) + 16);
    v23 = v22 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id;
    v24 = v22 == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id ? (char *)v21 : 0;
    v214 = v24;
    if (v23
      && *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) == mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v214))
    {
      v48 = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v214);
      v209 = mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke;
      Filter = v48;
      v49 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v49)
      {
        if (mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(void **))&v209, v49))
        {
          v50 = (_QWORD *)(((a2
                           + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                           + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                           + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(a2 + 40));
          v9 = *v50 ? *v50 - 8 : 0;
          v51 = (_QWORD *)v50[3];
          if (v51 != v50 + 3)
          {
            if (v51)
              v10 = (uint64_t)(v51 - 1);
            else
              v10 = 0;
          }
        }
      }
    }
  }
  if (!(v10 | v9))
    return 0;
  Filter = (char *)v219;
  v218 = 0x600000000;
  v25 = *(unsigned int *)(v8 + 44);
  if ((v25 & 0x7FFFFF) != 0)
  {
    v26 = (v8 + 16 * ((v25 >> 23) & 1) + ((v25 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
    v27 = v26 + 32 * *(unsigned int *)(v8 + 40);
    if (*(_QWORD *)(v27 + 24) == v27 + 24)
      goto LABEL_100;
    v28 = v26 + 32 * *(unsigned int *)(v8 + 40);
  }
  else
  {
    if (MEMORY[0x18] == 24)
      goto LABEL_100;
    v28 = 0;
  }
  v32 = *(_QWORD *)(v28 + 24);
  v30 = v28 + 24;
  v31 = v32;
  v33 = v32 - 8;
  if (v32)
    v34 = v31 == v30;
  else
    v34 = 1;
  if (v34)
    v35 = 0;
  else
    v35 = v33;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v35 + 32));
  if ((*(_BYTE *)(v36 + 46) & 0x80) != 0)
  {
    v37 = *(_QWORD *)(v36 + 72);
    v38 = *(unsigned int *)(v36 + 68);
    v214 = v216;
    v215 = 0x600000000;
    if (v38 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v38, 8);
      v39 = &v214[8 * v215];
      if (v38 >= 0xD
        && ((unint64_t)v39 >= v37 + 32 * v38
         || v37 + 24 >= (unint64_t)&v214[8 * v215 + 8 * v38]))
      {
        v52 = v38 & 3;
        if ((v38 & 3) == 0)
          v52 = 4;
        v40 = v38 - v52;
        v39 += 8 * v40;
        v53 = (const double *)(v37 + 88);
        v54 = (unsigned __int128 *)&v214[8 * v215 + 16];
        v55 = v40;
        do
        {
          v56 = v53 - 8;
          v57 = (unsigned __int128)vld4q_f64(v56);
          v58 = (unsigned __int128)vld4q_f64(v53);
          *(v54 - 1) = v57;
          *v54 = v58;
          v53 += 16;
          v54 += 2;
          v55 -= 4;
        }
        while (v55);
LABEL_78:
        v59 = v38 - v40;
        v60 = (uint64_t *)(v37 + 32 * v40 + 24);
        do
        {
          v61 = *v60;
          v60 += 4;
          *(_QWORD *)v39 = v61;
          v39 += 8;
          --v59;
        }
        while (v59);
        v62 = v214;
        v63 = (v215 + v38);
        LODWORD(v215) = v63;
        if (v214 != v216)
        {
          if (Filter != (char *)v219)
          {
            free(Filter);
            v62 = v214;
            LODWORD(v63) = v215;
          }
          Filter = v62;
          v218 = __PAIR64__(HIDWORD(v215), v63);
          v214 = v216;
          HIDWORD(v215) = 0;
          goto LABEL_97;
        }
        v64 = v218;
        if (v218 >= v63)
        {
          if ((_DWORD)v63)
            memmove(Filter, v214, 8 * v63);
          goto LABEL_96;
        }
        if (HIDWORD(v218) >= v63)
        {
          if ((_DWORD)v218)
          {
            memmove(Filter, v214, 8 * v218);
            goto LABEL_92;
          }
        }
        else
        {
          LODWORD(v218) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Filter, v219, v63, 8);
        }
        v64 = 0;
LABEL_92:
        if (v64 != v215)
          memcpy(&Filter[8 * v64], &v214[8 * v64], 8 * v215 - 8 * v64);
        goto LABEL_96;
      }
LABEL_54:
      v40 = 0;
      goto LABEL_78;
    }
    if ((_DWORD)v38)
    {
      v39 = v216;
      goto LABEL_54;
    }
  }
  else
  {
    v214 = v216;
    HIDWORD(v215) = 6;
  }
  LODWORD(v63) = 0;
  LODWORD(v215) = 0;
LABEL_96:
  LODWORD(v218) = v63;
LABEL_97:
  LODWORD(v215) = 0;
  if (v214 != v216)
    free(v214);
  LODWORD(v25) = *(_DWORD *)(v8 + 44);
LABEL_100:
  v195 = v8 + 64;
  v202 = *(unsigned int *)(v8 + 36);
  v65 = *(_QWORD *)(((v8 + 64 + 16 * ((v25 >> 23) & 1) + ((v25 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v8 + 40));
  if (v65)
    v66 = v65 - 8;
  else
    v66 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v66 + 32));
  v197 = a2;
  v198 = v8;
  if ((*(_BYTE *)(v67 + 46) & 0x80) != 0)
  {
    v201 = *(unsigned int *)(v67 + 68);
    v196 = (char *)(v8 - 16);
    if ((_DWORD)v202)
      v68 = (mlir::detail::OpResultImpl *)(v8 - 16);
    else
      v68 = 0;
    v199 = *(_QWORD *)(v67 + 72);
    v200 = v68;
    if (!(_DWORD)v202)
      goto LABEL_141;
  }
  else
  {
    v201 = 0;
    v196 = (char *)(v8 - 16);
    if ((_DWORD)v202)
      v194 = (mlir::detail::OpResultImpl *)(v8 - 16);
    else
      v194 = 0;
    v199 = 0;
    v200 = v194;
    if (!(_DWORD)v202)
      goto LABEL_141;
  }
  if (v201 && (_DWORD)v218)
  {
    v69 = 0;
    v70 = (uint64_t **)Filter;
    v71 = &Filter[8 * v218];
    while (1)
    {
      v72 = *(uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v200, v69);
      if (v72)
        break;
LABEL_138:
      if (++v69 != v202 && v69 != v201 && ++v70 != (uint64_t **)v71)
        continue;
      goto LABEL_141;
    }
    v73 = *(uint64_t **)(v199 + 32 * v69 + 24);
    while (1)
    {
      v74 = v72;
      v72 = (uint64_t *)*v72;
      if (v10)
      {
        Parent = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v10);
        v76 = *(mlir::Block **)(v74[2] + 16);
        if (v76)
        {
          v77 = (mlir::Region *)mlir::Block::getParent(v76);
          if (Parent == v77)
            goto LABEL_122;
        }
        else
        {
          v77 = 0;
          if (!Parent)
            goto LABEL_122;
        }
        if (mlir::Region::isProperAncestor(Parent, v77))
        {
LABEL_122:
          (*(void (**)(_QWORD *, uint64_t))(*a3 + 72))(a3, v74[2]);
          v78 = (uint64_t *)v74[1];
          if (v78)
          {
            *v78 = *v74;
            if (*v74)
              *(_QWORD *)(*v74 + 8) = v74[1];
          }
          v74[3] = (uint64_t)v73;
          v74[1] = (uint64_t)v73;
          v79 = *v73;
          *v74 = *v73;
          v80 = v73;
          if (!v79)
            goto LABEL_114;
          goto LABEL_113;
        }
      }
      if (!v9)
        goto LABEL_115;
      v81 = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v9);
      v82 = *(mlir::Block **)(v74[2] + 16);
      if (v82)
      {
        v83 = (mlir::Region *)mlir::Block::getParent(v82);
        if (v81 == v83)
          goto LABEL_133;
      }
      else
      {
        v83 = 0;
        if (!v81)
          goto LABEL_133;
      }
      if (!mlir::Region::isProperAncestor(v81, v83))
        goto LABEL_115;
LABEL_133:
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 72))(a3, v74[2]);
      v80 = *v70;
      v84 = (uint64_t *)v74[1];
      if (v84)
      {
        *v84 = *v74;
        if (*v74)
          *(_QWORD *)(*v74 + 8) = v74[1];
      }
      v74[3] = (uint64_t)v80;
      v74[1] = (uint64_t)v80;
      v79 = *v80;
      *v74 = *v80;
      if (!v79)
        goto LABEL_114;
LABEL_113:
      *(_QWORD *)(v79 + 8) = v74;
LABEL_114:
      *v80 = (uint64_t)v74;
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 80))(a3, v74[2]);
LABEL_115:
      if (!v72)
        goto LABEL_138;
    }
  }
LABEL_141:
  v85 = (unsigned int *)v198;
  v86 = *(unsigned int *)(v198 + 36);
  v87 = v196;
  if (!(_DWORD)v86)
    v87 = 0;
  v214 = v87;
  v215 = v86;
  mlir::OperandRange::getTypes((uint64_t *)&v214, (uint64_t *)&v209);
  v214 = v216;
  v215 = 0x600000000;
  v88 = (mlir::detail::OpResultImpl *)v209;
  v89 = v210;
  v91 = v211;
  v90 = v212;
  v92 = v212 - v210;
  if ((unint64_t)(v212 - v210) >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v214, v216, v212 - v210, 8);
    v93 = v215;
    v94 = v88 != v91;
    if (v90 != v89)
      goto LABEL_148;
LABEL_147:
    if (!v94)
      goto LABEL_152;
    goto LABEL_148;
  }
  v93 = 0;
  v94 = v209 != v211;
  if (v212 == v210)
    goto LABEL_147;
LABEL_148:
  v95 = (unint64_t *)&v214[8 * v93];
  if (v94)
  {
    while (1)
      *v95++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v88, v89++) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  do
    *v95++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v88, v89++) + 8) & 0xFFFFFFFFFFFFFFF8;
  while (v90 != v89);
  v93 = v215;
LABEL_152:
  LODWORD(v215) = v93 + v92;
  v96 = *(unsigned int *)(v197 + 36);
  v97 = (void *)(v197 - 16);
  if (!(_DWORD)v96)
    v97 = 0;
  v205 = v97;
  v206 = v96;
  mlir::OperandRange::getTypes((uint64_t *)&v205, (uint64_t *)&v209);
  llvm::SmallVectorImpl<mlir::Type>::insert<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void>((uint64_t)&v214, (uint64_t)&v214[8 * v215], (mlir::detail::OpResultImpl *)v209, v210, v211, v212);
  v98 = (mlir::OpBuilder *)(a3 + 1);
  v99 = *(_QWORD *)(v197 + 24);
  v209 = *(void **)(*(_QWORD *)(v198 + 72) + 24);
  LOBYTE(v205) = 0;
  v100 = (unsigned int *)mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>((mlir::OpBuilder *)(a3 + 1), v99, (uint64_t)&v214, (uint64_t *)&v209, (unsigned __int8 *)&v205);
  v101 = v100 + 16;
  v102 = *(_QWORD *)((((unint64_t)&v100[4 * (((unint64_t)v100[11] >> 23) & 1) + 17]
                     + (((unint64_t)v100[11] >> 21) & 0x7F8)
                     + 3) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * v100[10]);
  if (v102)
    v103 = v102 - 8;
  else
    v103 = 0;
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 48))(a3, v103);
  v104 = (((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
         + (((unint64_t)v100[11] >> 21) & 0x7F8)
         + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * v100[10];
  (*(void (**)(_QWORD *, unint64_t, unint64_t, _QWORD))*a3)(a3, ((v195+ 16 * (((unint64_t)*(unsigned int *)(v198 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v198 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v198 + 40), v104, *(_QWORD *)(v104 + 8));
  if (v10)
  {
    v105 = *(_QWORD *)((((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
                       + (((unint64_t)v100[11] >> 21) & 0x7F8)
                       + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v100[10]);
    if (v105)
      v106 = v105 - 8;
    else
      v106 = 0;
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v106 + 32));
    v108 = v107;
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v10);
    v110 = v109;
    v111 = *(_QWORD *)((((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
                       + (((unint64_t)v100[11] >> 21) & 0x7F8)
                       + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v100[10]);
    if (v111)
      v112 = v111 - 8;
    else
      v112 = 0;
    mlir::ValueRange::ValueRange(v213, 0, 0);
    mlir::RewriterBase::mergeBlocks((uint64_t)a3, v10, v112, v213[0], v213[1]);
    v113 = *(_QWORD *)((((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
                       + (((unint64_t)v100[11] >> 21) & 0x7F8)
                       + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v100[10]);
    if (v113)
      v114 = v113 - 8;
    else
      v114 = 0;
    a3[3] = v114;
    a3[4] = v114 + 32;
    if ((*(_BYTE *)(v108 + 46) & 0x80) == 0)
    {
      LODWORD(v116) = 0;
      v130 = 0;
      v209 = &v211;
      HIDWORD(v210) = 6;
      goto LABEL_187;
    }
    v115 = *(_QWORD *)(v108 + 72);
    v116 = *(unsigned int *)(v108 + 68);
    v209 = &v211;
    v210 = 0x600000000;
    if (v116 < 7)
    {
      if (!(_DWORD)v116)
      {
        v130 = 0;
        goto LABEL_187;
      }
      v117 = &v211;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v209, &v211, v116, 8);
      v117 = (mlir::detail::OpResultImpl **)((char *)v209 + 8 * v210);
      if (v116 >= 0xD
        && ((unint64_t)v117 >= v115 + 32 * v116
         || v115 + 24 >= (unint64_t)v209 + 8 * v210 + 8 * v116))
      {
        v119 = v116 & 3;
        if ((v116 & 3) == 0)
          v119 = 4;
        v120 = v116 - v119;
        v117 += v120;
        v121 = (const double *)(v115 + 88);
        v122 = (unsigned __int128 *)((char *)v209 + 8 * v210 + 16);
        v123 = v120;
        do
        {
          v124 = v121 - 8;
          v125 = (unsigned __int128)vld4q_f64(v124);
          v126 = (unsigned __int128)vld4q_f64(v121);
          *(v122 - 1) = v125;
          *v122 = v126;
          v121 += 16;
          v122 += 2;
          v123 -= 4;
        }
        while (v123);
        goto LABEL_184;
      }
    }
    v120 = 0;
LABEL_184:
    v127 = v116 - v120;
    v128 = (mlir::detail::OpResultImpl **)(v115 + 32 * v120 + 24);
    do
    {
      v129 = *v128;
      v128 += 4;
      *v117++ = v129;
      --v127;
    }
    while (v127);
    v130 = v210;
LABEL_187:
    v131 = v130 + v116;
    LODWORD(v210) = v131;
    if ((*(_BYTE *)(v110 + 46) & 0x80) != 0)
    {
      v132 = *(_QWORD *)(v110 + 72);
      v133 = *(unsigned int *)(v110 + 68);
    }
    else
    {
      v132 = 0;
      v133 = 0;
    }
    v98 = (mlir::OpBuilder *)(a3 + 1);
    llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v209, (uint64_t)v209 + 8 * v131, v132, 0, v132, v133);
    mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(v110 + 24), (uint64_t)&v209);
    (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, v108);
    (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, v110);
    if (v209 != &v211)
      free(v209);
    v85 = (unsigned int *)v198;
  }
  v134 = v85[11];
  if ((v134 & 0x7FFFFF) != 0)
    v135 = ((v195 + 16 * ((v134 >> 23) & 1) + ((v134 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 32 * v85[10];
  else
    v135 = 0;
  v136 = v135 + 24;
  v137 = (((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
         + (((unint64_t)v100[11] >> 21) & 0x7F8)
         + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * v100[10];
  (*(void (**)(_QWORD *, unint64_t, unint64_t, _QWORD))*a3)(a3, v136, v137 + 24, *(_QWORD *)(v137 + 32));
  if (!v9)
    goto LABEL_248;
  v138 = v100[11];
  if ((v138 & 0x7FFFFF) != 0)
  {
    v139 = (((unint64_t)&v101[4 * ((v138 >> 23) & 1) + 1] + ((v138 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
         + 32 * v100[10];
    v140 = *(_QWORD *)(v139 + 24);
    if (v140 == v139 + 24)
      goto LABEL_209;
LABEL_201:
    v141 = v139 + 24;
    if (v140)
      v142 = v140 == v141;
    else
      v142 = 1;
    if (v142)
      v143 = 0;
    else
      v143 = v140 - 8;
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v143 + 32));
    v145 = v144;
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v9);
    v147 = v146;
    v148 = v100[11];
    if ((v148 & 0x7FFFFF) != 0)
      v149 = (((unint64_t)&v101[4 * ((v148 >> 23) & 1) + 1] + ((v148 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
           + 32 * v100[10];
    else
      v149 = 0;
    v154 = *(_QWORD *)(v149 + 24);
    v152 = v149 + 24;
    v153 = v154;
    v155 = v154 - 8;
    if (v154)
      v156 = v153 == v152;
    else
      v156 = 1;
    if (v156)
      v157 = 0;
    else
      v157 = v155;
    mlir::ValueRange::ValueRange(v208, 0, 0);
    mlir::RewriterBase::mergeBlocks((uint64_t)a3, v9, v157, v208[0], v208[1]);
    v158 = v100[11];
    if ((v158 & 0x7FFFFF) != 0)
      v159 = (((unint64_t)&v101[4 * ((v158 >> 23) & 1) + 1] + ((v158 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
           + 32 * v100[10];
    else
      v159 = 0;
    v162 = *(_QWORD *)(v159 + 24);
    v160 = v159 + 24;
    v161 = v162;
    v163 = v162 - 8;
    if (v162)
      v164 = v161 == v160;
    else
      v164 = 1;
    if (v164)
      v165 = 0;
    else
      v165 = v163;
    a3[3] = v165;
    a3[4] = v165 + 32;
    if ((*(_BYTE *)(v145 + 46) & 0x80) != 0)
    {
      v166 = *(_QWORD *)(v145 + 72);
      v167 = *(unsigned int *)(v145 + 68);
      v209 = &v211;
      v210 = 0x600000000;
      if (v167 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v209, &v211, v167, 8);
        v168 = v210;
        v169 = (mlir::detail::OpResultImpl **)v209;
        goto LABEL_231;
      }
      if ((_DWORD)v167)
      {
        v168 = 0;
        v169 = &v211;
LABEL_231:
        v170 = &v169[v168];
        if (v167 >= 0xD
          && ((unint64_t)v170 >= v166 + 32 * v167 || v166 + 24 >= (unint64_t)(&v169[v168] + v167)))
        {
          v172 = v167 & 3;
          if ((v167 & 3) == 0)
            v172 = 4;
          v171 = v167 - v172;
          v170 += v171;
          v173 = (const double *)(v166 + 88);
          v174 = (unsigned __int128 *)&v169[v168 + 2];
          v175 = v171;
          do
          {
            v176 = v173 - 8;
            v177 = (unsigned __int128)vld4q_f64(v176);
            v178 = (unsigned __int128)vld4q_f64(v173);
            *(v174 - 1) = v177;
            *v174 = v178;
            v173 += 16;
            v174 += 2;
            v175 -= 4;
          }
          while (v175);
        }
        else
        {
          v171 = 0;
        }
        v179 = v167 - v171;
        v180 = (mlir::detail::OpResultImpl **)(v166 + 32 * v171 + 24);
        do
        {
          v181 = *v180;
          v180 += 4;
          *v170++ = v181;
          --v179;
        }
        while (v179);
        v182 = v210;
        goto LABEL_243;
      }
      v182 = 0;
    }
    else
    {
      LODWORD(v167) = 0;
      v182 = 0;
      v209 = &v211;
      HIDWORD(v210) = 6;
    }
LABEL_243:
    v183 = v182 + v167;
    LODWORD(v210) = v183;
    if ((*(_BYTE *)(v147 + 46) & 0x80) != 0)
    {
      v184 = *(_QWORD *)(v147 + 72);
      v185 = *(unsigned int *)(v147 + 68);
    }
    else
    {
      v184 = 0;
      v185 = 0;
    }
    llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v209, (uint64_t)v209 + 8 * v183, v184, 0, v184, v185);
    mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(v98, *(_QWORD *)(v147 + 24), (uint64_t)&v209);
    (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, v145);
    (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, v147);
    if (v209 != &v211)
      free(v209);
    v85 = (unsigned int *)v198;
    goto LABEL_248;
  }
  v140 = MEMORY[0x18];
  if (MEMORY[0x18] != 24)
  {
    v139 = 0;
    goto LABEL_201;
  }
LABEL_209:
  v150 = mlir::Block::getParent((mlir::Block *)v9);
  v151 = (((unint64_t)&v101[4 * (((unint64_t)v100[11] >> 23) & 1) + 1]
         + (((unint64_t)v100[11] >> 21) & 0x7F8)
         + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * v100[10];
  (*(void (**)(_QWORD *, unint64_t, unint64_t, _QWORD))*a3)(a3, v150, v151 + 24, *(_QWORD *)(v151 + 32));
LABEL_248:
  v209 = &v211;
  v210 = 0x600000000;
  v205 = v207;
  v206 = 0x600000000;
  v186 = v100[9];
  if ((_DWORD)v186)
    v187 = (uint64_t)(v100 - 4);
  else
    v187 = 0;
  if ((_DWORD)v186)
  {
    for (i = 0; i != v186; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v187, i);
      if (i < v85[9])
      {
        v189 = v210;
        v190 = &v209;
        if (v210 >= (unint64_t)HIDWORD(v210))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v209, &v211, v210 + 1, 8);
          v189 = v210;
        }
      }
      else
      {
        v189 = v206;
        v190 = &v205;
        if (v206 >= (unint64_t)HIDWORD(v206))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, v207, v206 + 1, 8);
          v189 = v206;
        }
      }
      *((_QWORD *)*v190 + v189) = NextResultAtOffset;
      ++*((_DWORD *)v190 + 2);
    }
    v192 = (mlir::detail::OpResultImpl **)v209;
    v193 = v210;
  }
  else
  {
    v193 = 0;
    v192 = &v211;
  }
  mlir::ValueRange::ValueRange(v204, (uint64_t)v192, v193);
  (*(void (**)(_QWORD *, unsigned int *, unint64_t, unint64_t))(*a3 + 24))(a3, v85, v204[0], v204[1]);
  mlir::ValueRange::ValueRange(v203, (uint64_t)v205, v206);
  (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*a3 + 24))(a3, v197, v203[0], v203[1]);
  if (v205 != v207)
    free(v205);
  if (v209 != &v211)
    free(v209);
  if (v214 != v216)
    free(v214);
  if (Filter != (char *)v219)
    free(Filter);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  unint64_t v21[2];
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"scf.if";
    v19[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::scf::IfOp::build((uint64_t)a1, (unsigned int *)v22, v21[0], v21[1], *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

unint64_t *llvm::SmallVectorImpl<mlir::Type>::insert<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void>(uint64_t a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, mlir::detail::OpResultImpl *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;

  v8 = a4;
  v11 = *(_QWORD *)a1;
  v12 = (a2 - *(_QWORD *)a1) >> 3;
  v14 = *(unsigned int *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = a6 - a4;
  v17 = a6 - a4 + v14;
  if (*(_QWORD *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      v11 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v18 = (unint64_t *)(v11 + 8 * v12);
    v19 = v12;
    v20 = (unint64_t *)(v11 + 8 * v14);
    v21 = v20 - v18;
    if (v21 < v16)
    {
      v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        v23 = v18;
        do
        {
          *v23++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
          --v21;
        }
        while (v21);
      }
      if (this != a5 || v8 != a6)
      {
        if (this != a5)
        {
          while (1)
            *v20++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        do
          *v20++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
        while (a6 != v8);
      }
      return v18;
    }
    v26 = 8 * v16;
    v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      v28 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8)
      goto LABEL_33;
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    v31 = 8 * a6;
    v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      v34 = 8 * v28 + *(_QWORD *)a1;
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        v35 = (v32 >> 3) + 1;
        v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        v30 = (_QWORD *)((char *)v30 + v36 * 8);
        v33 = &v29[v36];
        v37 = (__int128 *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
    }
    else
    {
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18)
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    if (this != a5 || a6 != v8)
    {
      if (this != a5)
      {
        while (1)
          *v18++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      v42 = v18;
      do
        *v42++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  v24 = this != a5;
  if (a6 != v8 || this != a5)
  {
    v25 = (unint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    do
      *v25++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++) + 8) & 0xFFFFFFFFFFFFFFF8;
    while (a6 != v8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (unint64_t *)(v11 + 8 * v12);
}

void `anonymous namespace'::CombineNestedIfs::~CombineNestedIfs(_anonymous_namespace_::CombineNestedIfs *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::CombineNestedIfs::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  const double *v39;
  unsigned __int128 *v40;
  unint64_t v41;
  const double *v42;
  unsigned __int128 v43;
  unsigned __int128 v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  mlir::Value *v61;
  uint64_t v62;
  uint64_t v63;
  mlir::Block *ParentRegion;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  mlir::GenericProgramPoint *v82;
  uint64_t v83;
  uint64_t v84;
  mlir::GenericProgramPoint *v85;
  mlir::GenericProgramPoint *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  _OWORD *Block;
  uint64_t v91;
  mlir::detail::OpResultImpl *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  mlir::GenericProgramPoint *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  mlir::GenericProgramPoint *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[2];
  unint64_t v125[2];
  unint64_t v126[2];
  unint64_t v127[2];
  void *v128;
  uint64_t v129;
  _BYTE v130[48];
  unint64_t v131[2];
  void *v132;
  uint64_t v133;
  _BYTE v134[48];
  char *v135;
  uint64_t v136;
  _BYTE v137[48];
  _QWORD *v138;
  uint64_t v139;
  _QWORD v140[8];

  v140[6] = *MEMORY[0x1E0C80C00];
  v3 = a2 + 64;
  v4 = (_QWORD *)(((a2
                  + 64
                  + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                  + 7) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(a2 + 40));
  v5 = *v4 - 8;
  if (!*v4)
    v5 = 0;
  v6 = *(mlir::GenericProgramPoint **)(v5 + 40);
  if (v6 == (mlir::GenericProgramPoint *)(v5 + 32))
    return 0;
  v7 = *(mlir::GenericProgramPoint **)(v5 + 32);
  if (v6 == v7 || *((mlir::GenericProgramPoint **)v6 + 1) != v7)
    return 0;
  v12 = (_QWORD *)v4[3];
  if (v12 != v4 + 3 && v12 != 0)
  {
    v21 = v12[4];
    v22 = v12 + 3;
    if ((_QWORD *)v21 == v22 || *(_QWORD **)(v21 + 8) != v22)
      return 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v6);
  if (!v14
    || *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
  {
    return 0;
  }
  v16 = v14;
  v17 = *(unsigned int *)(v14 + 44);
  if ((v17 & 0x7FFFFF) != 0)
  {
    v18 = ((v14 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v14 + 40);
    v19 = *(_QWORD *)(v18 + 24);
    if (v19)
      v20 = v19 == v18 + 24;
    else
      v20 = 1;
    if (v20)
      goto LABEL_39;
  }
  else
  {
    v19 = MEMORY[0x18];
    if (!MEMORY[0x18] || MEMORY[0x18] == 24)
      goto LABEL_39;
    v18 = 0;
  }
  v23 = v18 + 24;
  if (v19)
    v24 = v19 == v23;
  else
    v24 = 1;
  if (v24)
    v25 = 0;
  else
    v25 = v19 - 8;
  v26 = v25 + 32;
  v27 = *(_QWORD *)(v25 + 40);
  if (v27 == v26 || *(_QWORD *)(v27 + 8) != v26)
    return 0;
LABEL_39:
  v28 = *(_QWORD *)(((v3
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40));
  if (v28)
    v29 = v28 - 8;
  else
    v29 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v29 + 32));
  if ((*(_BYTE *)(v30 + 46) & 0x80) != 0)
  {
    v31 = *(_QWORD *)(v30 + 72);
    v32 = *(unsigned int *)(v30 + 68);
    v138 = v140;
    v139 = 0x600000000;
    if (v32 < 7)
    {
      if (!(_DWORD)v32)
      {
        v48 = 0;
        goto LABEL_62;
      }
      v33 = 0;
      v34 = v140;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v140, v32, 8);
      v33 = v139;
      v34 = v138;
    }
    v35 = &v34[v33];
    if (v32 >= 0xD
      && ((unint64_t)v35 < v31 + 32 * v32 ? (v36 = v31 + 24 >= (unint64_t)&v34[v33 + v32]) : (v36 = 1), v36))
    {
      v37 = v32 & 3;
      if ((v32 & 3) == 0)
        v37 = 4;
      v38 = v32 - v37;
      v35 += v38;
      v39 = (const double *)(v31 + 88);
      v40 = (unsigned __int128 *)&v34[v33 + 2];
      v41 = v38;
      do
      {
        v42 = v39 - 8;
        v43 = (unsigned __int128)vld4q_f64(v42);
        v44 = (unsigned __int128)vld4q_f64(v39);
        *(v40 - 1) = v43;
        *v40 = v44;
        v39 += 16;
        v40 += 2;
        v41 -= 4;
      }
      while (v41);
    }
    else
    {
      v38 = 0;
    }
    v45 = v32 - v38;
    v46 = (uint64_t *)(v31 + 32 * v38 + 24);
    do
    {
      v47 = *v46;
      v46 += 4;
      *v35++ = v47;
      --v45;
    }
    while (v45);
    v48 = v139;
  }
  else
  {
    LODWORD(v32) = 0;
    v48 = 0;
    v138 = v140;
    HIDWORD(v139) = 6;
  }
LABEL_62:
  v49 = v48 + v32;
  LODWORD(v139) = v49;
  v135 = v137;
  v136 = 0x600000000;
  v50 = *(unsigned int *)(a2 + 44);
  if ((v50 & 0x7FFFFF) != 0)
  {
    v51 = ((v3 + 16 * ((v50 >> 23) & 1) + ((v50 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v52 = *(_QWORD *)(v51 + 24);
    if (v52)
      v53 = v52 == v51 + 24;
    else
      v53 = 1;
    if (!v53)
      goto LABEL_74;
  }
  else
  {
    v52 = MEMORY[0x18];
    if (MEMORY[0x18])
      v54 = MEMORY[0x18] == 24;
    else
      v54 = 1;
    if (!v54)
    {
      v51 = 0;
LABEL_74:
      if (v52)
        v55 = v52 == v51 + 24;
      else
        v55 = 1;
      if (v55)
        v56 = 0;
      else
        v56 = v52 - 8;
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v56 + 32));
      if ((*(_BYTE *)(v57 + 46) & 0x80) != 0)
      {
        v58 = *(_QWORD *)(v57 + 72);
        v59 = *(unsigned int *)(v57 + 68);
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)&v135, (uint64_t)&v135[8 * v136], v58, 0, v58, v59);
      v49 = v139;
    }
  }
  v132 = v134;
  v133 = 0xC00000000;
  if (v49)
  {
    v60 = 0;
    v61 = (mlir::Value *)v138;
    v62 = v16 + 64;
    v63 = 8 * v49;
    while (1)
    {
      while (mlir::Value::getDefiningOp(v61) != v16)
      {
        ParentRegion = mlir::Value::getParentRegion(v61);
        v65 = *(unsigned int *)(a2 + 44);
        if ((v65 & 0x7FFFFF) != 0)
        {
          if (ParentRegion == (mlir::Block *)(((v3 + 16 * ((v65 >> 23) & 1) + ((v65 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                                             + 32 * *(unsigned int *)(a2 + 40)))
            goto LABEL_118;
        }
        else if (!ParentRegion)
        {
          goto LABEL_118;
        }
        v70 = v133;
        if (v133 >= (unint64_t)HIDWORD(v133))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v134, v133 + 1, 4);
          v70 = v133;
        }
        *((_DWORD *)v132 + v70) = v60;
        LODWORD(v133) = v133 + 1;
        ++v60;
        v61 = (mlir::Value *)((char *)v61 + 8);
        v63 -= 8;
        if (!v63)
          goto LABEL_114;
      }
      v66 = *(_QWORD *)(*(_QWORD *)v61 + 8) & 7;
      if (*(_QWORD *)v61)
        v67 = v66 == 6;
      else
        v67 = 0;
      if (v67)
        v66 = *(_QWORD *)(*(_QWORD *)v61 + 16) + 6;
      v68 = *(unsigned int *)(v16 + 44);
      v69 = (v68 & 0x7FFFFF) != 0
          ? ((v62 + 16 * ((v68 >> 23) & 1) + ((v68 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v16 + 40)
          : 0;
      v73 = *(_QWORD *)(v69 + 24);
      v71 = v69 + 24;
      v72 = v73;
      v74 = v73 - 8;
      v75 = !v73 || v72 == v71;
      v76 = v75 ? 0 : v74;
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v76 + 32));
      if (*(_QWORD *)(*(_QWORD *)(v77 + 72) + 32 * v66 + 24) != *(_QWORD *)&v135[8 * v60])
        break;
      v78 = *(_QWORD *)(((v62
                        + 16 * (((unint64_t)*(unsigned int *)(v16 + 44) >> 23) & 1)
                        + (((unint64_t)*(unsigned int *)(v16 + 44) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(v16 + 40));
      if (v78)
        v79 = v78 - 8;
      else
        v79 = 0;
      mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v79 + 32));
      v138[v60++] = *(_QWORD *)(*(_QWORD *)(v80 + 72) + 32 * v66 + 24);
      v61 = (mlir::Value *)((char *)v61 + 8);
      v63 -= 8;
      if (!v63)
        goto LABEL_114;
    }
LABEL_118:
    v8 = 0;
    v89 = v132;
    if (v132 == v134)
      goto LABEL_155;
  }
  else
  {
LABEL_114:
    v81 = *(_QWORD *)(a2 + 24);
    v128 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
    v124[0] = *(_QWORD *)(*(_QWORD *)(v16 + 72) + 24);
    v82 = mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::detail::TypedValue<mlir::IntegerType>>((mlir::OpBuilder *)(a3 + 1), v81, (uint64_t *)&v128, v124);
    v83 = *(unsigned int *)(a2 + 36);
    v84 = a2 - 16;
    if (!(_DWORD)v83)
      v84 = 0;
    v123 = (uint64_t)v82 - 16;
    v124[0] = v84;
    v124[1] = v83;
    mlir::OperandRange::getTypes(v124, (uint64_t *)&v128);
    v85 = mlir::OpBuilder::create<mlir::scf::IfOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), v81, (uint64_t *)&v128, &v123);
    v86 = v85;
    v87 = *((unsigned int *)v85 + 11);
    v122 = v81;
    if ((v87 & 0x7FFFFF) != 0)
      v88 = (((unint64_t)v85 + 16 * ((v87 >> 23) & 1) + ((v87 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v85 + 10);
    else
      v88 = 0;
    mlir::ValueRange::ValueRange(v131, 0, 0);
    Block = mlir::OpBuilder::createBlock(a3 + 1, v88, 0, v131[0], v131[1], 0, 0);
    v128 = v130;
    v129 = 0x600000000;
    v91 = *((unsigned int *)v86 + 9);
    if ((_DWORD)v91)
      v92 = (mlir::GenericProgramPoint *)((char *)v86 - 16);
    else
      v92 = 0;
    llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,void>((uint64_t)&v128, (uint64_t)v130, v92, 0, v92, v91);
    v93 = *((_QWORD *)v86 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v86);
    a3[3] = v93;
    a3[4] = v94;
    if ((_DWORD)v133)
    {
      v95 = (unsigned int *)v132;
      v96 = 4 * v133;
      do
      {
        v97 = *v95++;
        v98 = *(_QWORD *)(a2 + 24);
        v124[0] = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
        v99 = 8 * v97;
        v100 = mlir::OpBuilder::create<mlir::arith::SelectOp,mlir::Value &,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), v98, v124, &v138[(unint64_t)v99 / 8], (uint64_t *)&v135[v99]);
        *(_QWORD *)((char *)v128 + v99) = (char *)v100 - 16;
        v96 -= 4;
      }
      while (v96);
    }
    v101 = *(_QWORD *)(((v16
                       + 16 * (((unint64_t)*(unsigned int *)(v16 + 44) >> 23) & 1)
                       + (((unint64_t)*(unsigned int *)(v16 + 44) >> 21) & 0x7F8)
                       + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(v16 + 40));
    if (v101)
      v102 = v101 - 8;
    else
      v102 = 0;
    mlir::ValueRange::ValueRange(v127, 0, 0);
    mlir::RewriterBase::mergeBlocks((uint64_t)a3, v102, (uint64_t)Block, v127[0], v127[1]);
    v103 = (char *)v86 + 64;
    v104 = *(_QWORD *)((((unint64_t)v86
                       + 16 * (((unint64_t)*((unsigned int *)v86 + 11) >> 23) & 1)
                       + (((unint64_t)*((unsigned int *)v86 + 11) >> 21) & 0x7F8)
                       + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *((unsigned int *)v86 + 10));
    if (v104)
      v105 = v104 - 8;
    else
      v105 = 0;
    a3[3] = v105;
    a3[4] = v105 + 32;
    v106 = *(_QWORD *)(((unint64_t)&v103[16 * (((unint64_t)*((unsigned int *)v86 + 11) >> 23) & 1)
                                              + 7
                                              + (((unint64_t)*((unsigned int *)v86 + 11) >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *((unsigned int *)v86 + 10));
    if (v106)
      v107 = v106 - 8;
    else
      v107 = 0;
    mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v107 + 32));
    v109 = v108;
    v110 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(v108 + 24), (uint64_t)&v138);
    (*(void (**)(_QWORD *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v109, v110);
    if ((_DWORD)v136)
    {
      v111 = *((unsigned int *)v86 + 11);
      if ((v111 & 0x7FFFFF) != 0)
        v112 = ((unint64_t)&v103[16 * ((v111 >> 23) & 1) + 7 + ((v111 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
             + 32 * *((unsigned int *)v86 + 10);
      else
        v112 = 0;
      v113 = v112 + 24;
      mlir::ValueRange::ValueRange(v126, 0, 0);
      mlir::OpBuilder::createBlock(a3 + 1, v113, 0, v126[0], v126[1], 0, 0);
      v114 = *((unsigned int *)v86 + 11);
      if ((v114 & 0x7FFFFF) != 0)
        v115 = ((unint64_t)&v103[16 * ((v114 >> 23) & 1) + 7 + ((v114 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
             + 32 * *((unsigned int *)v86 + 10);
      else
        v115 = 0;
      v118 = *(_QWORD *)(v115 + 24);
      v116 = v115 + 24;
      v117 = v118;
      v119 = v118 - 8;
      if (v118)
        v120 = v117 == v116;
      else
        v120 = 1;
      if (v120)
        v121 = 0;
      else
        v121 = v119;
      a3[3] = v121;
      a3[4] = v121 + 32;
      mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(a3 + 1), v122, (uint64_t)&v135);
    }
    mlir::ValueRange::ValueRange(v125, (uint64_t)v128, v129);
    (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*a3 + 24))(a3, a2, v125[0], v125[1]);
    if (v128 != v130)
      free(v128);
    v8 = 1;
    v89 = v132;
    if (v132 == v134)
      goto LABEL_155;
  }
  free(v89);
LABEL_155:
  if (v135 != v137)
    free(v135);
  if (v138 != v140)
    free(v138);
  return v8;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::AndIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::detail::TypedValue<mlir::IntegerType>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.andi";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::AndIOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::IfOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t NextResultAtOffset;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  unint64_t v20[2];
  unsigned int v21[76];
  uint64_t v22[4];
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"scf.if";
    v22[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v22, (uint64_t *)&v18, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  NextResultAtOffset = *a3;
  v12 = a3[1];
  v13 = a3[3];
  if (v12)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v12);
  mlir::ValueRange::ValueRange((unint64_t *)v22, NextResultAtOffset, v13 - v12);
  mlir::TypeRange::TypeRange(v20, v22[0], v22[1]);
  mlir::scf::IfOp::build(a1, v21, v20[0], v20[1], *a4, 0, 0);
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v15;
}

uint64_t *llvm::SmallVectorImpl<mlir::Value>::insert<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,void>(uint64_t a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, mlir::detail::OpResultImpl *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;

  v8 = a4;
  v11 = *(_QWORD *)a1;
  v12 = (a2 - *(_QWORD *)a1) >> 3;
  v14 = *(unsigned int *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 12);
  v15 = *(_DWORD *)(a1 + 8);
  v16 = a6 - a4;
  v17 = a6 - a4 + v14;
  if (*(_QWORD *)a1 + 8 * v14 != a2)
  {
    if (v17 > v13)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
      v11 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v18 = (uint64_t *)(v11 + 8 * v12);
    v19 = v12;
    v20 = (uint64_t *)(v11 + 8 * v14);
    v21 = v20 - v18;
    if (v21 < v16)
    {
      v22 = v15 + v16;
      *(_DWORD *)(a1 + 8) = v22;
      if (v19 != v14)
      {
        memcpy((void *)(v11 + 8 * v22 - 8 * v21), v18, (char *)v20 - (char *)v18);
        v23 = v18;
        do
        {
          *v23++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
          --v21;
        }
        while (v21);
      }
      if (this != a5 || v8 != a6)
      {
        if (this != a5)
        {
          while (1)
            *v20++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
        }
        do
          *v20++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
        while (a6 != v8);
      }
      return v18;
    }
    v26 = 8 * v16;
    v27 = v14 + ((uint64_t)(8 * v16) >> 3);
    v28 = v14;
    if (v27 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27, 8);
      v28 = *(unsigned int *)(a1 + 8);
      v15 = *(_DWORD *)(a1 + 8);
    }
    v29 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    if (a6 == v8)
      goto LABEL_33;
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    v31 = 8 * a6;
    v32 = 8 * a6 - 8 * v8 - 8;
    if (v32 >= 0x98)
    {
      v34 = 8 * v28 + *(_QWORD *)a1;
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v31 - (v11 + 8 * (v8 + v14)) + v34) >= 0x20)
      {
        v35 = (v32 >> 3) + 1;
        v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        v30 = (_QWORD *)((char *)v30 + v36 * 8);
        v33 = &v29[v36];
        v37 = (__int128 *)(8 * v8 + 8 * v14 - v31 + v11 + 16);
        v38 = (_OWORD *)(v34 + 16);
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_33;
      }
    }
    else
    {
      v33 = &v20[v26 / 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v41 = *v33++;
      *v30++ = v41;
    }
    while (v33 != v20);
LABEL_33:
    *(_DWORD *)(a1 + 8) = v15 + v16;
    if (v29 != v18)
      memmove(&v18[(unint64_t)v26 / 8], v18, (char *)&v20[v26 / 0xFFFFFFFFFFFFFFF8] - (char *)v18);
    if (this != a5 || a6 != v8)
    {
      if (this != a5)
      {
        while (1)
          *v18++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
      }
      v42 = v18;
      do
        *v42++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
      while (a6 != v8);
    }
    return v18;
  }
  if (v17 > v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v17, 8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  v24 = this != a5;
  if (a6 != v8 || this != a5)
  {
    v25 = (uint64_t *)(v11 + 8 * v15);
    if (v24)
    {
      while (1)
        *v25++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
    }
    do
      *v25++ = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v8++);
    while (a6 != v8);
    v15 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 8) = v15 + v16;
  return (uint64_t *)(v11 + 8 * v12);
}

void `anonymous namespace'::ConditionPropagation::~ConditionPropagation(_anonymous_namespace_::ConditionPropagation *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ConditionPropagation::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  mlir::Region *v13;
  _QWORD *v14;
  mlir::Block *v15;
  mlir::Region *Parent;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  mlir::Block *v24;
  mlir::Region *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *IntegerAttr;
  uint64_t I1Type;

  I1Type = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&I1Type);
  if (DefiningOp && (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)) & 1) != 0)
    return 0;
  I1Type = mlir::Builder::getI1Type((mlir::Builder *)(a3 + 8));
  v7 = **(_QWORD ***)(*(_QWORD *)(a2 + 72) + 24);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a2 + 64;
    while (1)
    {
      v12 = *(unsigned int *)(a2 + 44);
      if ((v12 & 0x7FFFFF) != 0)
      {
        v13 = (mlir::Region *)(((v11 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                             + 32 * *(unsigned int *)(a2 + 40));
        v14 = (_QWORD *)*v7;
        v15 = *(mlir::Block **)(v7[2] + 16);
        if (v15)
          goto LABEL_11;
      }
      else
      {
        v13 = 0;
        v14 = (_QWORD *)*v7;
        v15 = *(mlir::Block **)(v7[2] + 16);
        if (v15)
        {
LABEL_11:
          Parent = (mlir::Region *)mlir::Block::getParent(v15);
          if (v13 == Parent)
            goto LABEL_16;
          goto LABEL_15;
        }
      }
      Parent = 0;
      if (!v13)
        goto LABEL_16;
LABEL_15:
      if (mlir::Region::isProperAncestor(v13, Parent))
      {
LABEL_16:
        if (!v9)
        {
          v17 = *(_QWORD *)(a2 + 24);
          IntegerAttr = (_QWORD *)mlir::Builder::getIntegerAttr(a3 + 8, I1Type, 1);
          v9 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::BoolAttr>((mlir::OpBuilder *)(a3 + 8), v17, &I1Type, &IntegerAttr)- 16);
        }
        v18 = v9;
        v19 = v7[2];
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v19);
        v20 = (_QWORD *)v7[1];
        if (v20)
        {
          *v20 = *v7;
          if (*v7)
            *(_QWORD *)(*v7 + 8) = v7[1];
        }
        v7[3] = v9;
        v7[1] = v9;
        v21 = *v9;
        *v7 = *v9;
        if (!v21)
          goto LABEL_7;
        goto LABEL_6;
      }
      v22 = *(unsigned int *)(a2 + 44);
      if ((v22 & 0x7FFFFF) != 0)
      {
        v23 = ((v11 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40)
            + 24;
        v24 = *(mlir::Block **)(v7[2] + 16);
        if (v24)
          goto LABEL_25;
      }
      else
      {
        v23 = 24;
        v24 = *(mlir::Block **)(v7[2] + 16);
        if (v24)
        {
LABEL_25:
          v25 = (mlir::Region *)mlir::Block::getParent(v24);
          if ((mlir::Region *)v23 != v25 && !mlir::Region::isProperAncestor((mlir::Region *)v23, v25))
            goto LABEL_8;
          goto LABEL_30;
        }
      }
      if (!mlir::Region::isProperAncestor((mlir::Region *)v23, 0))
        goto LABEL_8;
LABEL_30:
      if (!v10)
      {
        v26 = *(_QWORD *)(a2 + 24);
        IntegerAttr = (_QWORD *)mlir::Builder::getIntegerAttr(a3 + 8, I1Type, 0);
        v10 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::BoolAttr>((mlir::OpBuilder *)(a3 + 8), v26, &I1Type, &IntegerAttr)- 16);
      }
      v18 = v10;
      v19 = v7[2];
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v19);
      v27 = (_QWORD *)v7[1];
      if (v27)
      {
        *v27 = *v7;
        if (*v7)
          *(_QWORD *)(*v7 + 8) = v7[1];
      }
      v7[3] = v10;
      v7[1] = v10;
      v21 = *v10;
      *v7 = *v10;
      if (!v21)
        goto LABEL_7;
LABEL_6:
      *(_QWORD *)(v21 + 8) = v7;
LABEL_7:
      *v18 = v7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v19);
      v8 = 1;
LABEL_8:
      v7 = v14;
      if (!v14)
        return v8 & 1;
    }
  }
  v8 = 0;
  return v8 & 1;
}

void `anonymous namespace'::ConvertTrivialIfToSelect::~ConvertTrivialIfToSelect(_anonymous_namespace_::ConvertTrivialIfToSelect *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ConvertTrivialIfToSelect::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  mlir::Block *v32;
  unint64_t v33;
  mlir::Block *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  mlir::GenericProgramPoint *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  mlir::Block *v63;
  unint64_t v64;
  mlir::Block *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  mlir::GenericProgramPoint *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  mlir::GenericProgramPoint *v97;
  uint64_t v99;
  uint64_t v100;
  mlir::OpBuilder *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105[2];
  void *v106;
  uint64_t v107;
  _BYTE v108[48];
  void *v109;
  uint64_t v110;
  _BYTE v111[48];
  void *v112;
  uint64_t v113;
  _BYTE v114[48];
  _QWORD *v115;
  uint64_t v116;
  _QWORD v117[8];

  v117[6] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a2 + 36))
    return 0;
  v5 = a2 + 64;
  v104 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v6 = *(_QWORD *)(((a2 + 64 + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8) + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v7 + 32));
  if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
  {
    v9 = *(_QWORD *)(v8 + 72);
    v10 = *(unsigned int *)(v8 + 68);
    v11 = *(unsigned int *)(a2 + 44);
    if ((v11 & 0x7FFFFF) != 0)
    {
LABEL_7:
      v12 = ((v5 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(a2 + 40);
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *(unsigned int *)(a2 + 44);
    if ((v11 & 0x7FFFFF) != 0)
      goto LABEL_7;
  }
  v12 = 0;
LABEL_11:
  v16 = *(_QWORD *)(v12 + 24);
  v14 = v12 + 24;
  v15 = v16;
  v17 = v16 - 8;
  if (v16)
    v18 = v15 == v14;
  else
    v18 = 1;
  if (v18)
    v19 = 0;
  else
    v19 = v17;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v19 + 32));
  v21 = "cutableConstantDataRequest initWithCoder:]";
  v100 = v9;
  v22 = 0;
  if ((*(_BYTE *)(v20 + 46) & 0x80) == 0)
  {
    v99 = 0;
    v23 = 0;
    v115 = v117;
    v116 = 0x600000000;
    if (*(_DWORD *)(a2 + 36))
      goto LABEL_39;
LABEL_36:
    v13 = 0;
    v37 = v115;
    if (v115 != v117)
      goto LABEL_104;
    return v13;
  }
  v23 = *(_QWORD *)(v20 + 72);
  v24 = *(unsigned int *)(v20 + 68);
  v115 = v117;
  v116 = 0x600000000;
  v99 = v24;
  if (!v10 || !(_DWORD)v24)
  {
    if (*(_DWORD *)(a2 + 36))
      goto LABEL_39;
    goto LABEL_36;
  }
  v25 = 0;
  v26 = v9 + 24;
  v27 = v10;
  v28 = 32 * v10 - 32;
  v29 = 32 * v24 - 32;
  do
  {
    v30 = *(_QWORD *)(v23 + v25 + 24);
    v112 = *(void **)(v26 + v25);
    v113 = v30;
    v31 = *(unsigned int *)(a2 + 44);
    if ((v31 & 0x7FFFFF) != 0)
    {
      v32 = (mlir::Block *)(((v5 + 16 * ((v31 >> 23) & 1) + ((v31 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(a2 + 40));
      if (v32 == mlir::Value::getParentRegion((mlir::Value *)&v112))
        goto LABEL_29;
    }
    else if (!mlir::Value::getParentRegion((mlir::Value *)&v112))
    {
      goto LABEL_29;
    }
    v33 = *(unsigned int *)(a2 + 44);
    if ((v33 & 0x7FFFFF) != 0)
    {
      v34 = (mlir::Block *)(((v5 + 16 * ((v33 >> 23) & 1) + ((v33 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(a2 + 40)
                          + 24);
      if (v34 != mlir::Value::getParentRegion((mlir::Value *)&v113))
        goto LABEL_32;
    }
    else if (mlir::Value::getParentRegion((mlir::Value *)&v113) != (mlir::Block *)24)
    {
      goto LABEL_32;
    }
LABEL_29:
    v35 = *((_QWORD *)v112 + 1);
    v36 = v116;
    if (v116 >= (unint64_t)HIDWORD(v116))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v116 + 1, 8);
      v36 = v116;
    }
    v115[v36] = v35 & 0xFFFFFFFFFFFFFFF8;
    LODWORD(v116) = v116 + 1;
LABEL_32:
    if (v28 == v25)
      break;
    v18 = v29 == v25;
    v25 += 32;
  }
  while (!v18);
  v22 = 1;
  v10 = v27;
  v21 = "-[MPSGraphExecutableConstantDataRequest initWithCoder:]" + 13;
  if ((_DWORD)v116 == *(_DWORD *)(a2 + 36))
    goto LABEL_36;
LABEL_39:
  v38 = *(_QWORD *)(a2 + 24);
  LOBYTE(v112) = 0;
  v101 = (mlir::OpBuilder *)(a3 + 1);
  v39 = mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,6u> &,mlir::detail::TypedValue<mlir::IntegerType>,BOOL>((mlir::OpBuilder *)(a3 + 1), v38, (uint64_t)&v115, &v104, (unsigned __int8 *)&v112);
  v40 = (char *)v39 + 64;
  v41 = *((unsigned int *)v39 + 10);
  v42 = *((unsigned int *)v39 + 11);
  v43 = (v42 >> 23) & 1;
  v44 = (v42 >> 21) & 0x7F8;
  v45 = *(_QWORD *)((((unint64_t)v39 + 16 * v43 + v44 + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v41);
  if (v45)
  {
    (*(void (**)(_QWORD *, uint64_t))(*a3 + 48))(a3, v45 - 8);
    v41 = *((unsigned int *)v39 + 10);
    v46 = *((unsigned int *)v39 + 11);
    v43 = (v46 >> 23) & 1;
    v44 = (v46 >> 21) & 0x7F8;
  }
  mlir::Region::takeBody((mlir::Region *)(((unint64_t)&v40[16 * v43 + 7 + v44] & 0xFFFFFFFFFFFFFFF8) + 32 * v41), (mlir::Region *)(((v5+ 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40)));
  v47 = *((unsigned int *)v39 + 11);
  if ((v47 & 0x7FFFFF) != 0)
  {
    v48 = ((unint64_t)&v40[16 * ((v47 >> 23) & 1) + 7 + ((v47 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v39 + 10)
        + 24;
    v49 = *(unsigned int *)(a2 + 44);
    if ((v49 & 0x7FFFFF) != 0)
      goto LABEL_43;
LABEL_45:
    v50 = 0;
  }
  else
  {
    v48 = 24;
    v49 = *(unsigned int *)(a2 + 44);
    if ((v49 & 0x7FFFFF) == 0)
      goto LABEL_45;
LABEL_43:
    v50 = ((v5 + 16 * ((v49 >> 23) & 1) + ((v49 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
  }
  mlir::Region::takeBody((mlir::Region *)v48, (mlir::Region *)(v50 + 24));
  v51 = *(unsigned int *)(a2 + 36);
  v112 = v114;
  v52 = *((_QWORD *)v21 + 426);
  v113 = v52;
  if ((_DWORD)v51)
  {
    if (v51 < 7)
    {
      v53 = 0;
      v54 = v51;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, v51, 8);
      v53 = v113;
      v54 = v51 - v113;
      if (v51 == v113)
      {
LABEL_52:
        LODWORD(v113) = v51;
        goto LABEL_53;
      }
    }
    bzero((char *)v112 + 8 * v53, 8 * v54);
    goto LABEL_52;
  }
LABEL_53:
  v109 = v111;
  v110 = v52;
  v106 = v108;
  v107 = v52;
  v55 = *((_QWORD *)v39 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v39);
  a3[3] = v55;
  a3[4] = v56;
  if (v22)
  {
    v57 = 0;
    v58 = (uint64_t *)(v100 + 24);
    v59 = (uint64_t *)(v23 + 24);
    v60 = v10 - 1;
    do
    {
      v61 = *v58;
      v102 = (char *)*v59;
      v103 = (char *)v61;
      v62 = *((unsigned int *)v39 + 11);
      if ((v62 & 0x7FFFFF) != 0)
      {
        v63 = (mlir::Block *)(((unint64_t)&v40[16 * ((v62 >> 23) & 1) + 7 + ((v62 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *((unsigned int *)v39 + 10));
        if (v63 == mlir::Value::getParentRegion((mlir::Value *)&v103))
          goto LABEL_66;
      }
      else if (!mlir::Value::getParentRegion((mlir::Value *)&v103))
      {
        goto LABEL_66;
      }
      v64 = *((unsigned int *)v39 + 11);
      if ((v64 & 0x7FFFFF) != 0)
      {
        v65 = (mlir::Block *)(((unint64_t)&v40[16 * ((v64 >> 23) & 1) + 7 + ((v64 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *((unsigned int *)v39 + 10)
                            + 24);
        if (v65 == mlir::Value::getParentRegion((mlir::Value *)&v102))
          goto LABEL_66;
      }
      else if (mlir::Value::getParentRegion((mlir::Value *)&v102) == (mlir::Block *)24)
      {
LABEL_66:
        v67 = v110;
        v68 = (uint64_t)v39 - 24 * (v110 - 5) - 96;
        if (v110 <= 5)
          v68 = (uint64_t)v39 - 16 * v110 - 16;
        *((_QWORD *)v112 + v57) = v68;
        v69 = (uint64_t)v103;
        if (v67 >= HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v67 + 1, 8);
          v67 = v110;
        }
        *((_QWORD *)v109 + v67) = v69;
        LODWORD(v110) = v110 + 1;
        v70 = (uint64_t)v102;
        v71 = v107;
        if (v107 >= (unint64_t)HIDWORD(v107))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, v108, v107 + 1, 8);
          v71 = v107;
        }
        *((_QWORD *)v106 + v71) = v70;
        LODWORD(v107) = v107 + 1;
        if (v60 == v57)
          break;
        goto LABEL_56;
      }
      v66 = v103;
      if (v103 != v102)
        v66 = (char *)mlir::OpBuilder::create<mlir::arith::SelectOp,mlir::Value &,mlir::Value &,mlir::Value &>(v101, *(_QWORD *)(a2 + 24), &v104, (uint64_t *)&v103, (uint64_t *)&v102)- 16;
      *((_QWORD *)v112 + v57) = v66;
      if (v60 == v57)
        break;
LABEL_56:
      v58 += 4;
      v59 += 4;
      v18 = v99 - 1 == v57++;
    }
    while (!v18);
  }
  v72 = *(_QWORD *)(((unint64_t)&v40[16 * (((unint64_t)*((unsigned int *)v39 + 11) >> 23) & 1)
                                          + 7
                                          + (((unint64_t)*((unsigned int *)v39 + 11) >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v39 + 10));
  if (v72)
    v73 = v72 - 8;
  else
    v73 = 0;
  a3[3] = v73;
  a3[4] = v73 + 32;
  v74 = *(_QWORD *)(((unint64_t)&v40[16 * (((unint64_t)*((unsigned int *)v39 + 11) >> 23) & 1)
                                          + 7
                                          + (((unint64_t)*((unsigned int *)v39 + 11) >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v39 + 10));
  if (v74)
    v75 = v74 - 8;
  else
    v75 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v75 + 32));
  v77 = v76;
  v78 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(v101, *(_QWORD *)(v76 + 24), (uint64_t)&v109);
  (*(void (**)(_QWORD *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v77, v78);
  v79 = *((unsigned int *)v39 + 11);
  if ((v79 & 0x7FFFFF) != 0)
    v80 = ((unint64_t)&v40[16 * ((v79 >> 23) & 1) + 7 + ((v79 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v39 + 10);
  else
    v80 = 0;
  v83 = *(_QWORD *)(v80 + 24);
  v81 = v80 + 24;
  v82 = v83;
  v84 = v83 - 8;
  if (v83)
    v85 = v82 == v81;
  else
    v85 = 1;
  if (v85)
    v86 = 0;
  else
    v86 = v84;
  a3[3] = v86;
  a3[4] = v86 + 32;
  v87 = *((unsigned int *)v39 + 11);
  if ((v87 & 0x7FFFFF) != 0)
    v88 = ((unint64_t)&v40[16 * ((v87 >> 23) & 1) + 7 + ((v87 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v39 + 10);
  else
    v88 = 0;
  v91 = *(_QWORD *)(v88 + 24);
  v89 = v88 + 24;
  v90 = v91;
  v92 = v91 - 8;
  if (v91)
    v93 = v90 == v89;
  else
    v93 = 1;
  if (v93)
    v94 = 0;
  else
    v94 = v92;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v94 + 32));
  v96 = v95;
  v97 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>(v101, *(_QWORD *)(v95 + 24), (uint64_t)&v106);
  (*(void (**)(_QWORD *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v96, v97);
  mlir::ValueRange::ValueRange(v105, (uint64_t)v112, v113);
  (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*a3 + 24))(a3, a2, v105[0], v105[1]);
  if (v106 != v108)
    free(v106);
  if (v109 != v111)
    free(v109);
  if (v112 != v114)
    free(v112);
  v13 = 1;
  v37 = v115;
  if (v115 != v117)
LABEL_104:
    free(v37);
  return v13;
}

void `anonymous namespace'::RemoveEmptyElseBranch::~RemoveEmptyElseBranch(_anonymous_namespace_::RemoveEmptyElseBranch *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::RemoveEmptyElseBranch::matchAndRewrite(uint64_t a1, mlir::Operation *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  if (*((_DWORD *)a2 + 9))
    return 0;
  v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (((unint64_t)a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)a2 + 10);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 != v4 + 24 && v5 != 0)
    {
LABEL_14:
      v8 = *(_QWORD *)(v5 + 32);
      v9 = v5 + 24;
      if (v8 != v9 && *(_QWORD *)(v8 + 8) == v9)
        mlir::Operation::cloneWithoutRegions(a2);
    }
  }
  else
  {
    v5 = MEMORY[0x18];
    if (MEMORY[0x18] != 24 && MEMORY[0x18] != 0)
      goto LABEL_14;
  }
  return 0;
}

uint64_t sub_180680590(mlir::Operation *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  mlir::OpBuilder *v16;
  mlir::Operation *v17;
  unint64_t v18;

  v17 = mlir::OpBuilder::insert(v16, a1);
  v18 = (((unint64_t)v17
        + 16 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1)
        + (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v17 + 10);
  (**(void (***)(uint64_t, unint64_t, unint64_t, _QWORD))v15)(v15, ((v14+ 16 * (((unint64_t)*(unsigned int *)(v14 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v14 + 44) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v14 + 40), v18, *(_QWORD *)(v18 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v14);
  return 1;
}

void `anonymous namespace'::RemoveStaticCondition::~RemoveStaticCondition(_anonymous_namespace_::RemoveStaticCondition *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::RemoveStaticCondition::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 Value;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::GenericProgramPoint **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28[2];
  unint64_t v29[2];
  void *v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v26 = 0;
  v27 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v27);
  if (DefiningOp)
  {
    v7 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    {
      v30 = v32;
      v31 = 0x100000000;
      mlir::Operation::fold(v7, 0, 0, (uint64_t)&v30);
      v8 = *(_QWORD *)v30;
      v9 = mlir::BoolAttr::classof((_QWORD *)(*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8));
      v10 = v8 & 0xFFFFFFFFFFFFFFF8;
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) != 0 && v9;
      if (v11)
        v26 = v10;
      if (v30 != v32)
        free(v30);
      if (v11)
      {
        Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v26);
        v13 = *(unsigned int *)(a2 + 44);
        v14 = v13 & 0x7FFFFF;
        if (Value)
        {
          if (v14)
            v15 = ((a2 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(a2 + 40);
          else
            v15 = 0;
          mlir::ValueRange::ValueRange(v29, 0, 0);
          v18 = v29[0];
          v19 = v29[1];
          v20 = *(_QWORD *)(v15 + 8);
          goto LABEL_24;
        }
        if (v14)
        {
          v17 = ((a2 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(a2 + 40);
          if (*(_QWORD *)(v17 + 24) == v17 + 24)
            goto LABEL_31;
        }
        else
        {
          if (MEMORY[0x18] == 24)
          {
LABEL_31:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
            return 1;
          }
          v17 = 0;
        }
        mlir::ValueRange::ValueRange(v28, 0, 0);
        v18 = v28[0];
        v19 = v28[1];
        v20 = *(_QWORD *)(v17 + 32);
LABEL_24:
        if (v20)
          v21 = (mlir::GenericProgramPoint **)(v20 - 8);
        else
          v21 = 0;
        mlir::Block::getTerminator(v21);
        v23 = v22;
        if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
        {
          v24 = *(_QWORD *)(v22 + 72);
          v25 = *(unsigned int *)(v22 + 68);
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v30, v24, v25);
        mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v21, a2, v18, v19);
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v30, v31);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v23);
        return 1;
      }
    }
  }
  return 0;
}

void `anonymous namespace'::RemoveUnusedResults::~RemoveUnusedResults(_anonymous_namespace_::RemoveUnusedResults *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::RemoveUnusedResults::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t NextResultAtOffset;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::GenericProgramPoint **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  mlir::GenericProgramPoint **v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55[2];
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  unint64_t v59[2];
  unint64_t v60[2];
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  char *v64;
  uint64_t v65;
  _QWORD v66[5];

  v66[4] = *MEMORY[0x1E0C80C00];
  v64 = (char *)v66;
  v65 = 0x400000000;
  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
    v4 = a2 - 16;
  else
    v4 = 0;
  if (!(_DWORD)v3)
    return 0;
  for (i = 0; i != v3; ++i)
  {
    if (*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i))
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
      v9 = v65;
      if (v65 >= (unint64_t)HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
        v9 = v65;
      }
      *(_QWORD *)&v64[8 * v9] = NextResultAtOffset;
      LODWORD(v65) = v65 + 1;
    }
  }
  v10 = v64;
  if ((_DWORD)v65 == *(_DWORD *)(a2 + 36))
  {
    v11 = 0;
    if (v64 == (char *)v66)
      return v11;
    goto LABEL_75;
  }
  v61 = v63;
  v62 = 0x400000000;
  if ((_DWORD)v65)
  {
    v12 = 0;
    v13 = 8 * v65;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)v10 + 8);
      if (v12 >= HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v12 + 1, 8);
        v12 = v62;
      }
      *((_QWORD *)v61 + v12) = v14 & 0xFFFFFFFFFFFFFFF8;
      v12 = v62 + 1;
      LODWORD(v62) = v62 + 1;
      v10 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *(_QWORD *)(a2 + 24);
  v56 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  v16 = mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,4u> &,mlir::detail::TypedValue<mlir::IntegerType>>((mlir::OpBuilder *)(a3 + 8), v15, (uint64_t)&v61, (uint64_t *)&v56);
  v17 = v16;
  v18 = *((unsigned int *)v16 + 11);
  if ((v18 & 0x7FFFFF) != 0)
    v19 = (((unint64_t)v16 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v16 + 10);
  else
    v19 = 0;
  mlir::ValueRange::ValueRange(v60, 0, 0);
  mlir::OpBuilder::createBlock((_QWORD *)(a3 + 8), v19, 0, v60[0], v60[1], 0, 0);
  v20 = *((unsigned int *)v17 + 11);
  if ((v20 & 0x7FFFFF) != 0)
    v21 = (((unint64_t)v17 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v17 + 10);
  else
    v21 = 0;
  v22 = v21 + 24;
  mlir::ValueRange::ValueRange(v59, 0, 0);
  mlir::OpBuilder::createBlock((_QWORD *)(a3 + 8), v22, 0, v59[0], v59[1], 0, 0);
  v23 = *(_QWORD *)(((a2
                    + 64
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  if (v23)
    v24 = v23 - 8;
  else
    v24 = 0;
  v25 = *(_QWORD *)((((unint64_t)v17
                    + 16 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v17 + 10)
                  + 8);
  if (v25)
    v26 = (mlir::GenericProgramPoint **)(v25 - 8);
  else
    v26 = 0;
  v27 = *(_QWORD *)(((a2
                    + 64
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 32);
  v54 = v27 == 0;
  v28 = v27 - 8;
  if (v54)
    v29 = 0;
  else
    v29 = v28;
  v30 = *(_QWORD *)((((unint64_t)v17
                    + 16 * (((unint64_t)*((unsigned int *)v17 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v17 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v17 + 10)
                  + 32);
  if (v30)
    v31 = (mlir::GenericProgramPoint **)(v30 - 8);
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 36);
  v56 = v58;
  v57 = 0x400000000;
  if ((_DWORD)v32)
  {
    if (v32 < 5)
    {
      v33 = 0;
      v34 = v32;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v32, 8);
      v33 = v57;
      v34 = v32 - v57;
      if (v32 == v57)
        goto LABEL_44;
    }
    bzero((char *)v56 + 8 * v33, 8 * v34);
LABEL_44:
    LODWORD(v57) = v32;
  }
  v35 = v65;
  if ((_DWORD)v65)
  {
    v36 = v64;
    v37 = *(_QWORD *)(*(_QWORD *)v64 + 8) & 7;
    if (*(_QWORD *)v64 && v37 == 6)
      v37 = (*(_DWORD *)(*(_QWORD *)v64 + 16) + 6);
    *((_QWORD *)v56 + v37) = (char *)v17 - 16;
    if ((_DWORD)v35 != 1)
    {
      v38 = *((_QWORD *)v36 + 1);
      v39 = *(_QWORD *)(v38 + 8) & 7;
      if (v38 && v39 == 6)
        v39 = (*(_DWORD *)(v38 + 16) + 6);
      *((_QWORD *)v56 + v39) = (char *)v17 - 32;
      if ((_DWORD)v35 != 2)
      {
        v40 = *((_QWORD *)v36 + 2);
        v41 = *(_QWORD *)(v40 + 8) & 7;
        if (v40 && v41 == 6)
          v41 = (*(_DWORD *)(v40 + 16) + 6);
        *((_QWORD *)v56 + v41) = (char *)v17 - 48;
        if ((_DWORD)v35 != 3)
        {
          v42 = *((_QWORD *)v36 + 3);
          v43 = *(_QWORD *)(v42 + 8) & 7;
          if (v42 && v43 == 6)
            v43 = (*(_DWORD *)(v42 + 16) + 6);
          *((_QWORD *)v56 + v43) = (char *)v17 - 64;
          if ((_DWORD)v35 != 4)
          {
            v44 = *((_QWORD *)v36 + 4);
            v45 = *(_QWORD *)(v44 + 8) & 7;
            if (v44 && v45 == 6)
              v45 = (*(_DWORD *)(v44 + 16) + 6);
            *((_QWORD *)v56 + v45) = (char *)v17 - 80;
            if ((_DWORD)v35 != 5)
            {
              v46 = (char *)v17 - 96;
              v47 = *((_QWORD *)v36 + 5);
              v48 = *(_QWORD *)(v47 + 8) & 7;
              if (v47 && v48 == 6)
                v48 = (*(_DWORD *)(v47 + 16) + 6);
              *((_QWORD *)v56 + v48) = v46;
              if ((_DWORD)v35 != 6)
              {
                v50 = v36 + 48;
                v51 = 8 * v35 - 48;
                v52 = 0x100000001;
                do
                {
                  v53 = *(_QWORD *)(*v50 + 8) & 7;
                  if (*v50)
                    v54 = v53 == 6;
                  else
                    v54 = 0;
                  if (v54)
                    v53 = *(_QWORD *)(*v50 + 16) + 6;
                  *((_QWORD *)v56 + v53) = &v46[-24 * v52];
                  ++v50;
                  ++v52;
                  v51 -= 8;
                }
                while (v51);
              }
            }
          }
        }
      }
    }
  }
  mlir::ValueRange::ValueRange(v55, (uint64_t)v56, v32);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v55[0], v55[1]);
  if (v56 != v58)
    free(v56);
  if (v61 != v63)
    free(v61);
  v11 = 1;
  v10 = v64;
  if (v64 != (char *)v66)
LABEL_75:
    free(v10);
  return v11;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::IfOp,llvm::SmallVector<mlir::Type,4u> &,mlir::detail::TypedValue<mlir::IntegerType>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  unint64_t v19[2];
  _QWORD v20[39];

  v20[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"scf.if";
    v17[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::scf::IfOp::build(a1, (unsigned int *)v20, v19[0], v19[1], *a4, 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

void `anonymous namespace'::RemoveUnusedResults::transferBody(uint64_t a1, mlir::GenericProgramPoint **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[32];
  unint64_t v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v20, 0, 0);
  mlir::RewriterBase::mergeBlocks(a5, a1, (uint64_t)a2, v20[0], v20[1]);
  mlir::Block::getTerminator(a2);
  v11 = v10;
  v17 = v19;
  v18 = 0x400000000;
  if (a4)
  {
    v12 = 0;
    v13 = 8 * a4;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 8) & 7;
      if (*(_QWORD *)a3)
        v15 = v14 == 6;
      else
        v15 = 0;
      if (v15)
        v14 = (*(_DWORD *)(*(_QWORD *)a3 + 16) + 6);
      v16 = *(_QWORD *)(v11[9] + 32 * v14 + 24);
      if (v12 >= HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v12 + 1, 8);
        v12 = v18;
      }
      *((_QWORD *)v17 + v12) = v16;
      v12 = v18 + 1;
      LODWORD(v18) = v18 + 1;
      a3 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a5 + 72))(a5, v11);
  mlir::ValueRange::ValueRange((unint64_t *)&v21, (uint64_t)v17, v18);
  mlir::Operation::setOperands(v11, v21, v22);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a5 + 80))(a5, v11);
  if (v17 != v19)
    free(v17);
}

void `anonymous namespace'::ReplaceIfYieldWithConditionOrValue::~ReplaceIfYieldWithConditionOrValue(_anonymous_namespace_::ReplaceIfYieldWithConditionOrValue *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::ReplaceIfYieldWithConditionOrValue::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::GenericProgramPoint **v11;
  uint64_t v12;
  uint64_t v13;
  mlir::OpBuilder *v14;
  uint64_t I1Type;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **NextResultAtOffset;
  uint64_t DefiningOp;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 Value;
  _BOOL4 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t IntegerAttr;
  mlir::GenericProgramPoint *v44;
  _QWORD **v45;
  _QWORD *v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD **v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t Values;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  mlir::OpBuilder *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a2 + 36))
    return 0;
  v5 = a2 + 64;
  v6 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40));
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  mlir::Block::getTerminator(v7);
  v9 = v8;
  v10 = *(_QWORD *)(((v5
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 24);
  if (v10)
    v11 = (mlir::GenericProgramPoint **)(v10 - 8);
  else
    v11 = 0;
  mlir::Block::getTerminator(v11);
  v13 = v12;
  v14 = (mlir::OpBuilder *)(a3 + 1);
  a3[3] = *(_QWORD *)(a2 + 16);
  a3[4] = a2;
  I1Type = mlir::Builder::getI1Type((mlir::Builder *)(a3 + 1));
  if ((*(_BYTE *)(v9 + 46) & 0x80) != 0)
  {
    v16 = *(unsigned int *)(v9 + 68);
    v17 = *(_QWORD *)(v9 + 72);
    if ((*(_BYTE *)(v13 + 46) & 0x80) != 0)
      goto LABEL_10;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    if ((*(_BYTE *)(v13 + 46) & 0x80) != 0)
    {
LABEL_10:
      v18 = *(unsigned int *)(v13 + 68);
      v19 = *(_QWORD *)(v13 + 72);
      v20 = 0;
      v21 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v21)
        v22 = a2 - 16;
      else
        v22 = 0;
      if (v16)
        goto LABEL_14;
      return v20 & 1;
    }
  }
  v19 = 0;
  v18 = 0;
  v20 = 0;
  v21 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v21)
    v22 = a2 - 16;
  else
    v22 = 0;
  if (v16)
  {
LABEL_14:
    if (v18)
    {
      v59 = I1Type;
      v60 = v14;
      v61 = a2;
      if ((_DWORD)v21)
      {
        v20 = 0;
        v23 = 0;
        while (1)
        {
          v24 = *(_QWORD **)(v17 + 32 * v23 + 24);
          v25 = *(_QWORD **)(v19 + 32 * v23 + 24);
          NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v22, v23);
          v64 = v24;
          v65 = (uint64_t)v25;
          v66 = NextResultAtOffset;
          if (v24 == v25)
          {
            v40 = *NextResultAtOffset;
            if (*NextResultAtOffset)
            {
              do
              {
                v41 = (_QWORD *)v40[1];
                if (v41)
                {
                  *v41 = *v40;
                  if (*v40)
                    *(_QWORD *)(*v40 + 8) = v40[1];
                }
                v40[3] = v24;
                v40[1] = v24;
                v42 = *v24;
                *v40 = *v24;
                if (v42)
                  *(_QWORD *)(v42 + 8) = v40;
                *v24 = v40;
                v40 = *NextResultAtOffset;
              }
              while (*NextResultAtOffset);
              v20 = 1;
            }
            goto LABEL_52;
          }
          v62 = 0;
          v63 = 0;
          v67 = v24;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v67);
          if (!DefiningOp)
            goto LABEL_52;
          v28 = DefiningOp;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
            goto LABEL_52;
          v68 = v70;
          v69 = 0x100000000;
          mlir::Operation::fold(v28, 0, 0, (uint64_t)&v68);
          v29 = *(_QWORD *)v68;
          v30 = mlir::BoolAttr::classof((_QWORD *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8));
          v31 = (v29 & 0xFFFFFFFFFFFFFFF8) != 0 && v30;
          if (v31)
            v63 = v29 & 0xFFFFFFFFFFFFFFF8;
          if (v68 != v70)
            free(v68);
          if (!v31)
            goto LABEL_52;
          v67 = (_QWORD *)v65;
          v32 = mlir::Value::getDefiningOp((mlir::Value *)&v67);
          if (!v32)
            goto LABEL_52;
          v33 = v32;
          if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v32 + 48)))
            goto LABEL_52;
          v68 = v70;
          v69 = 0x100000000;
          mlir::Operation::fold(v33, 0, 0, (uint64_t)&v68);
          v34 = *(_QWORD *)v68;
          v35 = mlir::BoolAttr::classof((_QWORD *)(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFF8));
          v36 = (v34 & 0xFFFFFFFFFFFFFFF8) != 0 && v35;
          if (v36)
            v62 = v34 & 0xFFFFFFFFFFFFFFF8;
          if (v68 != v70)
            free(v68);
          if (!v36)
            goto LABEL_52;
          Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v63);
          v38 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v62);
          if (Value || !v38 || !*v66)
            goto LABEL_66;
          v58 = v38;
          v39 = *(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&v64) + 48);
          if (*(_UNKNOWN **)(v39 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            v68 = *(void **)(v39 + 8);
            Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v68);
          }
          else
          {
            Values = *(_QWORD *)(v39 + 24);
          }
          v57 = *(_QWORD *)(v61 + 24);
          v68 = *(void **)(*(_QWORD *)(v61 + 72) + 24);
          v20 = 1;
          IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v60, v59, 1);
          v67 = (_QWORD *)((*(uint64_t (**)(uint64_t, mlir::OpBuilder *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)Values + 24))(Values, v60, IntegerAttr, v59, *(_QWORD *)(v61 + 24))- 16);
          v44 = mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::OpResult>(v60, v57, (uint64_t *)&v68, (uint64_t *)&v67);
          v45 = (_QWORD **)v66;
          v46 = (_QWORD *)*v66;
          if (*v66)
            break;
          if (Value && !v58)
          {
LABEL_67:
            v50 = (_QWORD **)v66;
            v51 = (_QWORD *)*v66;
            if (*v66)
            {
              v52 = *(uint64_t **)(*(_QWORD *)(v61 + 72) + 24);
              do
              {
                v53 = (_QWORD *)v51[1];
                if (v53)
                {
                  *v53 = *v51;
                  if (*v51)
                    *(_QWORD *)(*v51 + 8) = v51[1];
                }
                v51[3] = v52;
                v51[1] = v52;
                v54 = *v52;
                *v51 = *v52;
                if (v54)
                  *(_QWORD *)(v54 + 8) = v51;
                *v52 = (uint64_t)v51;
                v51 = *v50;
                v20 = 1;
              }
              while (*v50);
            }
          }
LABEL_52:
          if (++v23 == v16 || v23 == v18 || v23 == v21)
            return v20 & 1;
        }
        v47 = (uint64_t *)((char *)v44 - 16);
        v38 = v58;
        do
        {
          v48 = (_QWORD *)v46[1];
          if (v48)
          {
            *v48 = *v46;
            if (*v46)
              *(_QWORD *)(*v46 + 8) = v46[1];
          }
          v46[3] = v47;
          v46[1] = v47;
          v49 = *v47;
          *v46 = *v47;
          if (v49)
            *(_QWORD *)(v49 + 8) = v46;
          *v47 = (uint64_t)v46;
          v46 = *v45;
        }
        while (*v45);
        v20 = 1;
LABEL_66:
        if (Value && !v38)
          goto LABEL_67;
        goto LABEL_52;
      }
    }
  }
  return v20 & 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::arith::XOrIOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::OpResult>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.xori";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::AndIOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::ParallelOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

BOOL mlir::detail::op_filter_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>::filter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id;
}

void llvm::SmallVectorImpl<mlir::scf::ReduceOp>::append<mlir::detail::op_iterator<mlir::scf::ReduceOp,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation,false,false,void,false>,false,false>>,void>(uint64_t a1, uint64_t a2, mlir::GenericProgramPoint **a3)
{
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t (*v10)(void);
  mlir::GenericProgramPoint *v11;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t (*v16)(void);
  uint64_t (*v17)(void);
  _QWORD *v18;
  mlir::GenericProgramPoint *v19;

  v6 = *(mlir::GenericProgramPoint **)a2;
  v7 = *a3;
  if (*(mlir::GenericProgramPoint **)a2 == *a3)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *(mlir::GenericProgramPoint **)(a2 + 8);
    v10 = *(uint64_t (**)(void))(a2 + 16);
    do
    {
      v11 = (mlir::GenericProgramPoint *)*((_QWORD *)v6 + 1);
      v6 = v9;
      if (v11 != v9)
      {
        v6 = v11;
        while (1)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v6);
          if ((v10() & 1) != 0)
            break;
          v6 = (mlir::GenericProgramPoint *)*((_QWORD *)v6 + 1);
          if (v6 == v9)
          {
            v6 = v9;
            break;
          }
        }
      }
      ++v8;
    }
    while (v6 != v7);
  }
  v12 = *(unsigned int *)(a1 + 8);
  if (v8 + v12 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8 + v12, 8);
    v12 = *(unsigned int *)(a1 + 8);
  }
  v13 = *(mlir::GenericProgramPoint **)a2;
  v14 = *a3;
  if (*(mlir::GenericProgramPoint **)a2 != v14)
  {
    v15 = *(mlir::GenericProgramPoint **)(a2 + 8);
    v16 = *(uint64_t (**)(void))(a2 + 16);
    v17 = *(uint64_t (**)(void))(a2 + 24);
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v12);
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v13);
      *v18 = v17();
      v19 = (mlir::GenericProgramPoint *)*((_QWORD *)v13 + 1);
      v13 = v15;
      if (v19 != v15)
      {
        v13 = v19;
        while (1)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v13);
          if ((v16() & 1) != 0)
            break;
          v13 = (mlir::GenericProgramPoint *)*((_QWORD *)v13 + 1);
          if (v13 == v15)
          {
            v13 = v15;
            break;
          }
        }
      }
      ++v18;
    }
    while (v13 != v14);
    LODWORD(v12) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v12 + v8;
}

void `anonymous namespace'::ParallelOpSingleOrZeroIterationDimsFolder::~ParallelOpSingleOrZeroIterationDimsFolder(_anonymous_namespace_::ParallelOpSingleOrZeroIterationDimsFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::ParallelOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

void `anonymous namespace'::ParallelOpSingleOrZeroIterationDimsFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *ConstantIndexOp;
  char v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  mlir::GenericProgramPoint **v55;
  mlir::GenericProgramPoint *v56;
  mlir::GenericProgramPoint *v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  _QWORD *v70;
  mlir::GenericProgramPoint **v71;
  mlir::GenericProgramPoint *v72;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm *v93[2];
  unsigned int v94;
  llvm *v95;
  uint64_t v96;
  int v97;
  llvm *v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103[2];
  unint64_t v104[2];
  unint64_t v105[2];
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[48];
  _BYTE *v117;
  uint64_t v118;
  _BYTE v119[48];
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[8];

  v122[6] = *MEMORY[0x1E0C80C00];
  v87 = *(_QWORD *)(a2 + 24);
  v120 = v122;
  v121 = 0x600000000;
  v117 = v119;
  v118 = 0x600000000;
  v114 = v116;
  v115 = 0x600000000;
  v93[0] = 0;
  v93[1] = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v3 = *(unsigned int *)(a2 + 44);
  v4 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
  v90 = *v4;
  v86 = a2 + 64;
  if ((v3 & 0x800000) != 0)
  {
    v5 = *(char **)(a2 + 72);
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v6 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
    else
      v6 = 0;
    v7 = *v6;
    v8 = v6[1] + v7;
    v9 = (uint64_t)&v5[32 * v7];
  }
  else
  {
    v5 = 0;
    if (HIBYTE(*(_DWORD *)(a2 + 44)))
      v85 = (unsigned int *)(a2 + 64 + 16 * ((v3 >> 23) & 1));
    else
      v85 = 0;
    v7 = *v85;
    v8 = v85[1] + v7;
    v9 = 32 * v7;
  }
  v92 = v8 - v7;
  v10 = v4[2];
  v11 = &v5[32 * v8];
  v12 = *(_QWORD *)((((unint64_t)v4 + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 8);
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  mlir::ValueRange::ValueRange((unint64_t *)&v106, *(_QWORD *)(v13 + 48), (uint64_t)(*(_QWORD *)(v13 + 56) - *(_QWORD *)(v13 + 48)) >> 3);
  v14 = v106;
  v91 = v107;
  v106 = v5;
  v107 = 0;
  v108 = v9;
  v109 = 0;
  v110 = &v5[32 * v8];
  v111 = 0;
  v112 = v14;
  v113 = 0;
  if (!(_DWORD)v90)
  {
LABEL_38:
    v36 = *(unsigned int *)(a2 + 44);
    v37 = (v36 >> 23) & 1;
    v38 = (int *)(v86 + 16 * v37);
    if ((_DWORD)v121 != *v38)
    {
      v39 = BYTE3(v36);
      if ((_DWORD)v121)
      {
        v40 = *(_QWORD *)(a2 + 24);
        if (!v39)
          v38 = 0;
        v41 = *v38;
        v42 = v38[1];
        v44 = v38[2];
        v43 = v38[3];
        if ((v36 & 0x800000) != 0)
          v45 = *(_QWORD *)(a2 + 72);
        else
          v45 = 0;
        v46 = (v42 + v41 + v44);
        v106 = (void *)(v45 + 32 * v46);
        v107 = (v43 + v46) - v46;
        v102 = 0;
        v47 = (unsigned int *)mlir::OpBuilder::create<mlir::scf::ParallelOp,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,mlir::OperandRange,decltype(nullptr)>((mlir::OpBuilder *)(a3 + 8), v40, (uint64_t)&v120, (uint64_t)&v117, (uint64_t)&v114, (uint64_t)&v106);
        v48 = (((unint64_t)&v47[4 * (((unint64_t)v47[11] >> 23) & 1) + 17]
              + (((unint64_t)v47[11] >> 21) & 0x7F8)
              + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v47[10];
        (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, llvm **))(*(_QWORD *)a3 + 8))(a3, ((v86+ 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), v48, *(_QWORD *)(v48 + 8), v93);
        v49 = v47[9];
        if ((_DWORD)v49)
          v50 = (uint64_t)(v47 - 4);
        else
          v50 = 0;
        mlir::ValueRange::ValueRange(v103, v50, v49);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v103[0], v103[1]);
      }
      else
      {
        v106 = &v108;
        v107 = 0x600000000;
        if (!v39)
          v38 = 0;
        v51 = (v38[1] + *v38 + v38[2]);
        v52 = (v38[3] + v51) - v51;
        if (v52 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, &v108, v52, 8);
          v36 = *(unsigned int *)(a2 + 44);
          v37 = (v36 >> 23) & 1;
        }
        v53 = *(_QWORD *)(((v86 + 16 * v37 + ((v36 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(a2 + 40)
                        + 8);
        v54 = v53 - 8;
        if (!v53)
          v54 = 0;
        v55 = (mlir::GenericProgramPoint **)(v54 + 32);
        v56 = *(mlir::GenericProgramPoint **)(v54 + 40);
        if (v56 != (mlir::GenericProgramPoint *)(v54 + 32))
        {
          v57 = *v55;
          if (v56 != *v55)
          {
            v58 = (uint64_t **)(a3 + 8);
            do
            {
              while (1)
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(v56);
                v60 = v59;
                if (v59)
                {
                  if (*(_UNKNOWN **)(*(_QWORD *)(v59 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ReduceOp,void>::id)
                    break;
                }
                mlir::OpBuilder::clone(v58, (mlir::Operation *)v59, (mlir::IRMapping *)v93);
                v56 = (mlir::GenericProgramPoint *)*((_QWORD *)v56 + 1);
                if (v56 == v57)
                  goto LABEL_82;
              }
              v61 = *(_QWORD *)(((v59
                                + 16 * (((unint64_t)*(unsigned int *)(v59 + 44) >> 23) & 1)
                                + (((unint64_t)*(unsigned int *)(v59 + 44) >> 21) & 0x7F8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 32 * *(unsigned int *)(v59 + 40)
                              + 8);
              if (v61)
                v62 = v61 - 8;
              else
                v62 = 0;
              if (*(_BYTE *)(a2 + 47))
                v63 = (_DWORD *)(a2 + 80);
              else
                v63 = 0;
              v64 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                              + 32 * (v63[1] + *v63 + v63[2])
                              + 32 * v107
                              + 24);
              v101 = **(_QWORD **)(v62 + 48);
              v102 = 0;
              v65 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v93, &v101, &v102);
              v66 = v102;
              if ((v65 & 1) == 0)
              {
                v66 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v93, (uint64_t)&v101, &v101, v102);
                *v66 = v101;
                v66[1] = 0;
              }
              v66[1] = v64;
              v67 = *(_QWORD *)(*(_QWORD *)(v62 + 48) + 8);
              v68 = *(_QWORD *)(*(_QWORD *)(v60 + 72) + 24);
              v101 = v68;
              v102 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v93, &v101, &v102)&& v102 != (_QWORD *)v93[0] + 2 * v94)
              {
                v68 = v102[1];
              }
              v101 = v67;
              v102 = 0;
              v69 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v93, &v101, &v102);
              v70 = v102;
              if ((v69 & 1) == 0)
              {
                v70 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v93, (uint64_t)&v101, &v101, v102);
                *v70 = v101;
                v70[1] = 0;
              }
              v70[1] = v68;
              v71 = (mlir::GenericProgramPoint **)(v62 + 32);
              v72 = *(mlir::GenericProgramPoint **)(v62 + 40);
              if (v72 != (mlir::GenericProgramPoint *)(v62 + 32))
              {
                for (i = *v71; v72 != i; v72 = (mlir::GenericProgramPoint *)*((_QWORD *)v72 + 1))
                {
                  mlir::GenericProgramPoint::~GenericProgramPoint(v72);
                  mlir::OpBuilder::clone(v58, v74, (mlir::IRMapping *)v93);
                }
              }
              mlir::Block::getTerminator((mlir::GenericProgramPoint **)v62);
              v76 = *(_QWORD *)(*(_QWORD *)(v75 + 72) + 24);
              v101 = v76;
              v102 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v93, &v101, &v102)&& v102 != (_QWORD *)v93[0] + 2 * v94)
              {
                v76 = v102[1];
              }
              v77 = v107;
              if (v107 >= (unint64_t)HIDWORD(v107))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, &v108, v107 + 1, 8);
                v77 = v107;
              }
              *((_QWORD *)v106 + v77) = v76;
              LODWORD(v107) = v107 + 1;
              v56 = (mlir::GenericProgramPoint *)*((_QWORD *)v56 + 1);
            }
            while (v56 != v57);
          }
        }
LABEL_82:
        mlir::ValueRange::ValueRange(v104, (uint64_t)v106, v107);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v104[0], v104[1]);
        if (v106 != &v108)
          free(v106);
      }
    }
LABEL_84:
    llvm::deallocate_buffer(v98, (void *)(16 * v100));
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = v10 + v8 - v8;
  v20 = v5;
  while (1)
  {
    if (v108 == v9 && v18 == v92)
      goto LABEL_38;
    if (v110 == v11 && v17 == v19)
      goto LABEL_38;
    if (v112 == v14 && v16 == v91)
      goto LABEL_38;
    v24 = v20[4 * v15 + 3];
    v25 = *(_QWORD *)(v108 + 32 * v18 + 24);
    v26 = *(_QWORD *)&v110[32 * v17 + 24];
    v27 = mlir::ValueRange::dereference_iterator(&v112, v16);
    v28 = mlir::constantTripCount(v24 | 4, v25 | 4, v26 | 4);
    if (v29)
    {
      if (v28 == 1)
      {
        ConstantIndexOp = mlir::getValueOrCreateConstantIndexOp((mlir::IndexType **)(a3 + 8), v87, v24 | 4);
        v101 = v27;
        v102 = 0;
        v34 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v93, &v101, &v102);
        v35 = v102;
        if ((v34 & 1) == 0)
        {
          v35 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v93, (uint64_t)&v101, &v101, v102);
          *v35 = v101;
          v35[1] = 0;
        }
        v35[1] = ConstantIndexOp;
        goto LABEL_36;
      }
      if (!v28)
      {
        v78 = *(unsigned int *)(a2 + 44);
        if (HIBYTE(*(_DWORD *)(a2 + 44)))
          v79 = (int *)(v86 + 16 * ((v78 >> 23) & 1));
        else
          v79 = 0;
        v80 = *v79;
        v81 = v79[1];
        v83 = v79[2];
        v82 = v79[3];
        if ((v78 & 0x800000) != 0)
          v84 = *(_QWORD *)(a2 + 72);
        else
          v84 = 0;
        mlir::ValueRange::ValueRange(v105, v84 + 32 * (v81 + v80 + v83), (v82 + v81 + v80 + v83) - (unint64_t)(v81 + v80 + v83));
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v105[0], v105[1]);
        goto LABEL_84;
      }
    }
    v30 = v121;
    if (v121 >= (unint64_t)HIDWORD(v121))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, v122, v121 + 1, 8);
      v30 = v121;
    }
    v120[v30] = v24;
    LODWORD(v121) = v121 + 1;
    v31 = v118;
    if (v118 >= (unint64_t)HIDWORD(v118))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, v119, v118 + 1, 8);
      v31 = v118;
    }
    *(_QWORD *)&v117[8 * v31] = v25;
    LODWORD(v118) = v118 + 1;
    v32 = v115;
    if (v115 >= (unint64_t)HIDWORD(v115))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v115 + 1, 8);
      v32 = v115;
    }
    *((_QWORD *)v114 + v32) = v26;
    LODWORD(v115) = v115 + 1;
LABEL_36:
    v20 = v106;
    v15 = v107 + 1;
    v18 = v109 + 1;
    ++v107;
    ++v109;
    v17 = v111 + 1;
    v16 = v113 + 1;
    ++v111;
    ++v113;
    if (v106 == v5 && v15 == v90)
      goto LABEL_38;
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ParallelOp,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &,mlir::OperandRange,decltype(nullptr)>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  __n128 v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  void (*v24[2])(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  unint64_t v25[2];
  unint64_t v26[2];
  unint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.parallel", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"scf.parallel";
    v22[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  mlir::ValueRange::ValueRange(v27, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)a5, *(unsigned int *)(a5 + 8));
  mlir::ValueRange::ValueRange((unint64_t *)v24, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::scf::ParallelOp::build((uint64_t)a1, (uint64_t)v28, v27[0], v27[1], v26[0], v26[1], v25[0], v25[1], v15, v24[0], (uint64_t)v24[1]);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v17;
}

void `anonymous namespace'::MergeNestedParallelLoops::~MergeNestedParallelLoops(_anonymous_namespace_::MergeNestedParallelLoops *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::MergeNestedParallelLoops::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *Context;
  uint64_t v72;
  char v73;
  __n128 v74;
  mlir::GenericProgramPoint *v75;
  void *v76;
  mlir::GenericProgramPoint *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  uint64_t v88;
  void (*v89[2])(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  unint64_t v90[2];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[4];
  __int16 v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 64;
  v4 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v4)
    v5 = (_QWORD *)(v4 - 8);
  else
    v5 = 0;
  v6 = (mlir::GenericProgramPoint *)v5[5];
  if (v6 == (mlir::GenericProgramPoint *)(v5 + 4))
    return 0;
  v7 = (mlir::GenericProgramPoint *)v5[4];
  if (v6 == v7 || *((mlir::GenericProgramPoint **)v6 + 1) != v7)
    return 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(v6);
  v12 = *(_UNKNOWN **)(*(_QWORD *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id
      ? v11
      : 0;
  v78 = v12;
  if (!v12)
    return 0;
  v13 = (uint64_t *)v5[6];
  v14 = (uint64_t *)v5[7];
  if (v14 != v13)
  {
    v15 = *(unsigned int *)(v12 + 44);
    v16 = v12 + 16 * ((v15 >> 23) & 1);
    v19 = *(_DWORD *)(v16 + 64);
    v18 = (unsigned int *)(v16 + 64);
    v17 = v19;
    if (!HIBYTE(*(_DWORD *)(v12 + 44)))
      v18 = 0;
    do
    {
      if ((v15 & 0x800000) != 0)
      {
        v21 = *(_QWORD *)(v12 + 72);
        v22 = *v13;
        v23 = 0;
        if (!(_DWORD)v17)
          goto LABEL_26;
      }
      else
      {
        v21 = 0;
        v22 = *v13;
        v23 = 0;
        if (!(_DWORD)v17)
          goto LABEL_26;
      }
      v24 = (_QWORD *)(v21 + 24);
      while (*v24 != v22)
      {
        ++v23;
        v24 += 4;
        if (v17 == v23)
          goto LABEL_27;
      }
LABEL_26:
      if (v23 != v17)
        return 0;
LABEL_27:
      if ((v15 & 0x800000) != 0)
      {
        v25 = *(_QWORD *)(v12 + 72);
        v26 = *v18;
        v27 = v18[1];
        v28 = v27 + v26;
        v29 = v28 - v26;
        if (!v27)
          goto LABEL_34;
      }
      else
      {
        v25 = 0;
        v26 = *v18;
        v32 = v18[1];
        v28 = v32 + v26;
        v29 = v28 - v26;
        if (!v32)
        {
LABEL_34:
          v30 = 0;
          goto LABEL_35;
        }
      }
      v30 = 0;
      v31 = (_QWORD *)(v25 + 32 * v26 + 24);
      while (*v31 != v22)
      {
        ++v30;
        v31 += 4;
        if (v29 == v30)
          goto LABEL_36;
      }
LABEL_35:
      if (v30 != v29)
        return 0;
LABEL_36:
      if ((v15 & 0x800000) != 0)
      {
        v33 = *(_QWORD *)(v12 + 72);
        v34 = v18[2];
        v35 = v34 + v28 - v28;
        if (v34)
          goto LABEL_38;
      }
      else
      {
        v33 = 0;
        v37 = v18[2];
        v35 = v37 + v28 - v28;
        if (v37)
        {
LABEL_38:
          v20 = 0;
          v36 = (_QWORD *)(v33 + 32 * v28 + 24);
          while (*v36 != v22)
          {
            ++v20;
            v36 += 4;
            if (v35 == v20)
              goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      v20 = 0;
LABEL_17:
      if (v20 != v35)
        return 0;
LABEL_18:
      ++v13;
    }
    while (v13 != v14);
  }
  v38 = *(unsigned int *)(a2 + 44);
  v39 = HIBYTE(*(_DWORD *)(a2 + 44)) ? v3 + 16 * ((v38 >> 23) & 1) : 0;
  if (*(_DWORD *)(v39 + 12))
    return 0;
  v40 = *(unsigned int *)(v12 + 44);
  v41 = (unsigned int *)(v12 + 16 * ((v40 >> 23) & 1) + 64);
  v42 = HIBYTE(*(_DWORD *)(v12 + 44)) ? v12 + 16 * ((v40 >> 23) & 1) + 64 : 0;
  if (*(_DWORD *)(v42 + 12))
    return 0;
  v43 = *(unsigned int *)(v3 + 16 * ((v38 >> 23) & 1));
  if ((v38 & 0x800000) == 0)
  {
    v91 = 0;
    v92 = v43;
    v44 = *v41;
    if ((v40 & 0x800000) != 0)
      goto LABEL_54;
LABEL_87:
    v45 = 0;
    goto LABEL_55;
  }
  v91 = *(_QWORD *)(a2 + 72);
  v92 = v43;
  v44 = *v41;
  if ((v40 & 0x800000) == 0)
    goto LABEL_87;
LABEL_54:
  v45 = *(void **)(v12 + 72);
LABEL_55:
  v83 = v45;
  v84 = v44;
  _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v86, &v91, (uint64_t *)&v83);
  v46 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v47 = (unsigned int *)(v3 + 16 * ((v46 >> 23) & 1));
  else
    v47 = 0;
  v48 = *v47;
  v49 = v47[1];
  if ((v46 & 0x800000) != 0)
    v50 = *(_QWORD *)(a2 + 72);
  else
    v50 = 0;
  v91 = v50 + 32 * v48;
  v92 = v49 + v48 - v48;
  v51 = *(unsigned int *)(v78 + 44);
  if (HIBYTE(*(_DWORD *)(v78 + 44)))
    v52 = (unsigned int *)(v78 + 16 * ((v51 >> 23) & 1) + 64);
  else
    v52 = 0;
  v53 = *v52;
  v54 = v52[1];
  if ((v51 & 0x800000) != 0)
    v55 = *(_QWORD *)(v78 + 72);
  else
    v55 = 0;
  v80 = (void *)(v55 + 32 * v53);
  v81 = v54 + v53 - v53;
  _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v83, &v91, (uint64_t *)&v80);
  v56 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v57 = (int *)(v3 + 16 * ((v56 >> 23) & 1));
  else
    v57 = 0;
  v58 = *v57;
  v59 = v57[1];
  v60 = v57[2];
  if ((v56 & 0x800000) != 0)
    v61 = *(_QWORD *)(a2 + 72);
  else
    v61 = 0;
  v62 = (v59 + v58);
  v91 = v61 + 32 * v62;
  v92 = (v60 + v62) - v62;
  v63 = *(unsigned int *)(v78 + 44);
  if (HIBYTE(*(_DWORD *)(v78 + 44)))
    v64 = (int *)(v78 + 16 * ((v63 >> 23) & 1) + 64);
  else
    v64 = 0;
  v65 = *v64;
  v66 = v64[1];
  v67 = v64[2];
  if ((v63 & 0x800000) != 0)
    v68 = *(_QWORD *)(v78 + 72);
  else
    v68 = 0;
  v69 = (v66 + v65);
  v95 = (const char *)(v68 + 32 * v69);
  v96 = (v67 + v69) - v69;
  _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_((uint64_t)&v80, &v91, (uint64_t *)&v95);
  v70 = *(_QWORD *)(a2 + 24);
  v79 = v70;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v79);
  v72 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.parallel", (const unsigned __int8 *)0xC, Context);
  if (!v73)
  {
    v99 = 1283;
    v97 = "scf.parallel";
    v98 = 12;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v94 = 259;
    llvm::operator+((uint64_t *)&v95, v93, (uint64_t)&v91);
    llvm::report_fatal_error((llvm::Twine *)&v91, 1);
  }
  mlir::OperationState::OperationState(&v91, v70, v72);
  mlir::ValueRange::ValueRange((unint64_t *)&v95, (uint64_t)v86, v87);
  mlir::ValueRange::ValueRange((unint64_t *)v93, (uint64_t)v83, v84);
  mlir::ValueRange::ValueRange(v90, (uint64_t)v80, v81);
  mlir::ValueRange::ValueRange((unint64_t *)v89, 0, 0);
  mlir::scf::ParallelOp::build(a3 + 8, (uint64_t)&v91, (uint64_t)v95, v96, v93[0], v93[1], v90[0], v90[1], v74, v89[0], (uint64_t)v89[1]);
  v75 = mlir::OpBuilder::create((mlir::OpBuilder *)(a3 + 8), (const mlir::OperationState *)&v91);
  v76 = *(void **)(*((_QWORD *)v75 + 6) + 16);
  mlir::OperationState::~OperationState((mlir::OperationState *)&v91);
  if (v76 == &mlir::detail::TypeIDResolver<mlir::scf::ParallelOp,void>::id)
    v77 = v75;
  else
    v77 = 0;
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, a2, v77);
  if (v80 != &v82)
    free(v80);
  if (v83 != &v85)
    free(v83);
  if (v86 != &v88)
    free(v86);
  return 1;
}

void _ZZNK12_GLOBAL__N_124MergeNestedParallelLoops15matchAndRewriteEN4mlir3scf10ParallelOpERNS1_15PatternRewriterEENKUlRKT_RKT0_E_clINS1_12OperandRangeESE_EEDaS8_SB_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  const double *v16;
  unsigned __int128 *v17;
  unint64_t v18;
  const double *v19;
  unsigned __int128 v20;
  unsigned __int128 v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const double *v34;
  unsigned __int128 *v35;
  unint64_t v36;
  const double *v37;
  unsigned __int128 v38;
  unsigned __int128 v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[7];

  v48[6] = *MEMORY[0x1E0C80C00];
  v6 = v48;
  v46 = v48;
  v47 = 0x600000000;
  v7 = a2[1];
  v8 = a3[1] + v7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v8, 8);
    v10 = a2;
    v9 = *a2;
    v7 = v10[1];
    LODWORD(v47) = 0;
    if (v7 <= HIDWORD(v47))
      goto LABEL_3;
LABEL_7:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v7, 8);
    v11 = v47;
    v12 = v46;
    v13 = &v46[v47];
    if (v7 < 0xD)
      goto LABEL_10;
    goto LABEL_8;
  }
  v9 = *a2;
  LODWORD(v47) = 0;
  if (v7 > 6)
    goto LABEL_7;
LABEL_3:
  if (!v7)
  {
    v25 = 0;
    goto LABEL_18;
  }
  v11 = 0;
  v12 = v46;
  v13 = v46;
  if (v7 < 0xD)
    goto LABEL_10;
LABEL_8:
  if ((unint64_t)v13 >= v9 + 32 * v7 || v9 + 24 >= (unint64_t)&v12[v7 + v11])
  {
    v15 = v7 & 3;
    if ((v7 & 3) == 0)
      v15 = 4;
    v14 = v7 - v15;
    v13 += v14;
    v16 = (const double *)(v9 + 88);
    v17 = (unsigned __int128 *)&v12[v11 + 2];
    v18 = v14;
    do
    {
      v19 = v16 - 8;
      v20 = (unsigned __int128)vld4q_f64(v19);
      v21 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v20;
      *v17 = v21;
      v16 += 16;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    goto LABEL_15;
  }
LABEL_10:
  v14 = 0;
LABEL_15:
  v22 = v7 - v14;
  v23 = (uint64_t *)(v9 + 32 * v14 + 24);
  do
  {
    v24 = *v23;
    v23 += 4;
    *v13++ = v24;
    --v22;
  }
  while (v22);
  v25 = v47;
LABEL_18:
  v26 = (v25 + v7);
  LODWORD(v47) = v25 + v7;
  v28 = *a3;
  v27 = a3[1];
  if (v27 + v26 > HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v48, v27 + v26, 8);
    LODWORD(v26) = v47;
  }
  v29 = v46;
  if (v27)
  {
    v30 = &v46[v26];
    if (v27 >= 0xD
      && ((v31 = v26, (unint64_t)v30 >= v28 + 32 * v27)
       || v28 + 24 >= (unint64_t)&v46[v27 + v26]))
    {
      v33 = v27 & 3;
      if ((v27 & 3) == 0)
        v33 = 4;
      v32 = v27 - v33;
      v30 += v32;
      v34 = (const double *)(v28 + 88);
      v35 = (unsigned __int128 *)&v46[v31 + 2];
      v36 = v32;
      do
      {
        v37 = v34 - 8;
        v38 = (unsigned __int128)vld4q_f64(v37);
        v39 = (unsigned __int128)vld4q_f64(v34);
        *(v35 - 1) = v38;
        *v35 = v39;
        v34 += 16;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
    }
    else
    {
      v32 = 0;
    }
    v40 = v27 - v32;
    v41 = (uint64_t *)(v28 + 32 * v32 + 24);
    do
    {
      v42 = *v41;
      v41 += 4;
      *v30++ = v42;
      --v40;
    }
    while (v40);
    LODWORD(v26) = v47;
    v29 = v46;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v43 = (v26 + v27);
  LODWORD(v47) = v43;
  if ((_DWORD)v43 && &v46 != (_QWORD **)a1)
  {
    if (v29 == v48)
    {
      v45 = v43;
      if (v43 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v43, 8),
            v45 = v47,
            v6 = v46,
            (_DWORD)v47))
      {
        memcpy(*(void **)a1, v6, 8 * v45);
        v6 = v46;
      }
      *(_DWORD *)(a1 + 8) = v43;
    }
    else
    {
      *(_QWORD *)a1 = v29;
      v44 = HIDWORD(v47);
      *(_DWORD *)(a1 + 8) = v43;
      *(_DWORD *)(a1 + 12) = v44;
      v46 = v48;
      HIDWORD(v47) = 0;
    }
    LODWORD(v47) = 0;
    v29 = v6;
  }
  if (v29 != v48)
    free(v29);
}

void llvm::function_ref<void ()(mlir::OpBuilder &,mlir::Location,mlir::ValueRange,mlir::ValueRange)>::callback_fn<`anonymous namespace'::MergeNestedParallelLoops::matchAndRewrite(mlir::scf::ParallelOp,mlir::PatternRewriter &)::{lambda(mlir::OpBuilder &,mlir::Location,mlir::ValueRange,mlir::ValueRange)#1}>(uint64_t **a1, uint64_t **a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  mlir::GenericProgramPoint **v31;
  mlir::GenericProgramPoint *v32;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v34;
  uint64_t v35[2];
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  llvm *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD v45[2];
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = a5;
  v6 = a4;
  v49 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  v9 = **a1;
  v11 = *(unsigned int *)(v9 + 40);
  v10 = *(unsigned int *)(v9 + 44);
  v13 = (unint64_t *)v8[6];
  v12 = (unint64_t *)v8[7];
  v45[0] = a4;
  v45[1] = a5;
  v14 = *(_QWORD *)(((v9 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v11 + 8);
  if (v14)
    v15 = (_QWORD *)(v14 - 8);
  else
    v15 = 0;
  if (a5 >= ((unint64_t)((char *)v12 - (char *)v13) >> 3))
    v16 = ((unint64_t)((char *)v12 - (char *)v13) >> 3);
  else
    v16 = a5;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v46 = v13;
  v47 = a4;
  v48 = 0;
  if (v12 != v13)
  {
    v17 = 0;
    do
    {
      if (v47 == v6 && v17 == v16)
        break;
      v19 = mlir::ValueRange::dereference_iterator(&v47, v17);
      v43 = *v13;
      v44 = 0;
      v20 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v35, &v43, &v44);
      v21 = v44;
      if ((v20 & 1) == 0)
      {
        v21 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v35, (uint64_t)&v43, &v43, v44);
        *v21 = v43;
        v21[1] = 0;
      }
      v21[1] = v19;
      v13 = v46 + 1;
      v17 = v48 + 1;
      v46 = v13;
      ++v48;
    }
    while (v13 != v12);
  }
  v23 = (unint64_t *)v15[6];
  v22 = (unint64_t *)v15[7];
  v24 = ((unint64_t)((char *)v22 - (char *)v23) >> 3);
  if (v5 > v24)
  {
    v6 = mlir::ValueRange::offset_base(v45, v5 - v24);
    v5 = ((unint64_t)((char *)v22 - (char *)v23) >> 3);
  }
  v46 = v23;
  v47 = v6;
  v48 = 0;
  if (v22 != v23)
  {
    v25 = 0;
    v26 = &v23[v22 - v23];
    do
    {
      if (v47 == v6 && v25 == v5)
        break;
      v28 = mlir::ValueRange::dereference_iterator(&v47, v25);
      v43 = *v23;
      v44 = 0;
      v29 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v35, &v43, &v44);
      v30 = v44;
      if ((v29 & 1) == 0)
      {
        v30 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v35, (uint64_t)&v43, &v43, v44);
        *v30 = v43;
        v30[1] = 0;
      }
      v30[1] = v28;
      v23 = v46 + 1;
      v25 = v48 + 1;
      v46 = v23;
      ++v48;
    }
    while (v23 != v26);
  }
  v31 = (mlir::GenericProgramPoint **)(v15 + 4);
  v32 = (mlir::GenericProgramPoint *)v15[5];
  if (v32 != (mlir::GenericProgramPoint *)(v15 + 4))
  {
    for (i = *v31; v32 != i; v32 = (mlir::GenericProgramPoint *)*((_QWORD *)v32 + 1))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v32);
      mlir::OpBuilder::clone(a2, v34, (mlir::IRMapping *)v35);
    }
  }
  llvm::deallocate_buffer(v40, (void *)(16 * v42));
}

void sub_18068326C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
  llvm::deallocate_buffer(a13, (void *)(16 * a15));
}

void sub_180683280(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
  llvm::deallocate_buffer(a10, (void *)(16 * a12));
}

void `anonymous namespace'::RemoveLoopInvariantArgsFromBeforeBlock::~RemoveLoopInvariantArgsFromBeforeBlock(_anonymous_namespace_::RemoveLoopInvariantArgsFromBeforeBlock *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::RemoveLoopInvariantArgsFromBeforeBlock::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  char *v46;
  int v47;
  char *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  char *v58;
  int v59;
  char *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  char *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  mlir::OpBuilder *v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  mlir::GenericProgramPoint *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlir::GenericProgramPoint *v88;
  unsigned int *v89;
  unint64_t v90;
  uint64_t v91;
  __n128 *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  _OWORD *Block;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  char *v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  llvm *v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143[2];
  unint64_t v144[2];
  void *v145[3];
  unint64_t v146;
  uint64_t v147;
  __n128 v148;
  uint64_t v149;
  unint64_t v150[2];
  void *v151;
  uint64_t v152;
  _BYTE v153[48];
  void *v154;
  uint64_t v155;
  _BYTE v156[48];
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164[4];

  v164[2] = *MEMORY[0x1E0C80C00];
  v136 = a2 + 64;
  v5 = ((a2
       + 64
       + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
       + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *(unsigned int *)(a2 + 40);
  v6 = *(_QWORD *)(v5 + 32);
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 8);
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  v138 = *(_QWORD *)(v9 + 48);
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)v9);
  if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
  {
    v11 = *(_QWORD *)(v10 + 72);
    mlir::Block::getTerminator(v7);
    v13 = v12;
    if ((*(_BYTE *)(v12 + 46) & 0x80) != 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 0;
    mlir::Block::getTerminator(v7);
    v13 = v78;
    if ((*(_BYTE *)(v78 + 46) & 0x80) != 0)
    {
LABEL_9:
      mlir::ValueRange::ValueRange(&v162, *(_QWORD *)(v13 + 72), *(unsigned int *)(v13 + 68));
      v135 = a3;
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
        goto LABEL_10;
LABEL_125:
      v157 = 0;
      v158 = 0;
      v159 = 0;
      v160 = v162;
      v161 = 0;
      return 0;
    }
  }
  mlir::ValueRange::ValueRange(&v162, 0, 0);
  v135 = a3;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
    goto LABEL_125;
LABEL_10:
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(unsigned int *)(a2 + 68);
  v16 = v162;
  v157 = 0;
  v158 = v14;
  v159 = 0;
  v160 = v162;
  v161 = 0;
  if (v15)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v137 = v11 + 32;
    v20 = v163;
    v21 = v14;
    while (1)
    {
      if (v160 == v16 && v19 == v20)
        return 0;
      v23 = *(_QWORD *)(v21 + 32 * v17 + 24);
      v24 = mlir::ValueRange::dereference_iterator(&v160, v19);
      if (v23 == v24)
        break;
      v25 = (~*(_DWORD *)(v24 + 8) & 7) != 0 ? 0 : v24;
      if (v25 && *(mlir::GenericProgramPoint ***)(v25 + 16) == v7)
      {
        v26 = *(_QWORD *)(v137 + 32 * *(unsigned int *)(v25 + 24) + 24);
        if (v26 == *(_QWORD *)(v138 + 8 * v18) || v26 == v23)
          break;
      }
      v21 = v158;
      v18 = (_DWORD)v157 + 1;
      v17 = v159 + 1;
      v157 = (uint64_t *)((char *)v157 + 1);
      ++v159;
      v19 = ++v161;
      if (v158 == v14 && v17 == v15)
        return 0;
    }
    v157 = &v159;
    v158 = 0x600000000;
    v154 = v156;
    v155 = 0x600000000;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v151 = v153;
    v152 = 0x600000000;
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v29 = *(void **)(a2 + 72);
      v30 = *(unsigned int *)(a2 + 68);
      v31 = v162;
      v145[0] = 0;
      v145[1] = v29;
      v145[2] = 0;
      v146 = v162;
      v147 = 0;
      if (v30)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v163;
        v36 = v29;
        do
        {
          if (v146 == v31 && v34 == v35)
            break;
          v38 = v36[4 * (_QWORD)v32 + 3];
          v39 = mlir::ValueRange::dereference_iterator(&v146, v34);
          if (v38 == v39)
          {
            v56 = v142;
            if (!v142)
              goto LABEL_91;
            v57 = (v142 - 1) & (37 * v33);
            v58 = (char *)v140 + 16 * v57;
            v59 = *(_DWORD *)v58;
            if (*(_DWORD *)v58 != v33)
            {
              v60 = 0;
              v61 = 1;
              while (v59 != -1)
              {
                if (v60)
                  v62 = 0;
                else
                  v62 = v59 == -2;
                if (v62)
                  v60 = v58;
                v63 = v57 + v61++;
                v57 = v63 & (v142 - 1);
                v58 = (char *)v140 + 16 * v57;
                v59 = *(_DWORD *)v58;
                if (*(_DWORD *)v58 == v33)
                  goto LABEL_80;
              }
              if (v60)
                v64 = v60;
              else
                v64 = v58;
              if (4 * (int)v141 + 4 < 3 * v142)
              {
                if (v142 + ~(_DWORD)v141 - HIDWORD(v141) <= v142 >> 3)
                  goto LABEL_92;
                goto LABEL_77;
              }
LABEL_91:
              v56 = 2 * v142;
LABEL_92:
              llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v140, v56);
              if (v142)
              {
                v65 = v142 - 1;
                v66 = (v142 - 1) & (37 * v33);
                v64 = (char *)v140 + 16 * v66;
                v67 = *(_DWORD *)v64;
                if (*(_DWORD *)v64 != v33)
                {
                  v68 = 0;
                  v69 = 1;
                  while (v67 != -1)
                  {
                    if (v68)
                      v70 = 0;
                    else
                      v70 = v67 == -2;
                    if (v70)
                      v68 = v64;
                    v71 = v66 + v69++;
                    v66 = v71 & v65;
                    v64 = (char *)v140 + 16 * (v71 & v65);
                    v67 = *(_DWORD *)v64;
                    if (*(_DWORD *)v64 == v33)
                      goto LABEL_77;
                  }
LABEL_120:
                  if (v68)
                    v64 = v68;
                }
LABEL_77:
                LODWORD(v141) = v141 + 1;
                if (*(_DWORD *)v64 != -1)
                  --HIDWORD(v141);
                *(_DWORD *)v64 = v33;
                *((_QWORD *)v64 + 1) = v38;
                goto LABEL_80;
              }
LABEL_119:
              v64 = 0;
              goto LABEL_77;
            }
          }
          else
          {
            v40 = v39;
            if ((~*(_DWORD *)(v39 + 8) & 7) != 0)
              v41 = 0;
            else
              v41 = v39;
            if (!v41
              || *(mlir::GenericProgramPoint ***)(v41 + 16) != v7
              || ((v42 = *(_QWORD *)(v137 + 32 * *(unsigned int *)(v41 + 24) + 24),
                   v42 != *(_QWORD *)(v138 + 8 * v33))
                ? (v43 = v42 == v38)
                : (v43 = 1),
                  !v43))
            {
              v52 = v158;
              if (v158 >= HIDWORD(v158))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, &v159, v158 + 1, 8);
                v157[v158] = v38;
                LODWORD(v158) = v158 + 1;
                v53 = v155;
                if (v155 >= HIDWORD(v155))
                  goto LABEL_86;
LABEL_60:
                *((_QWORD *)v154 + v53) = v40;
              }
              else
              {
                v157[v158] = v38;
                LODWORD(v158) = v52 + 1;
                v53 = v155;
                if (v155 < HIDWORD(v155))
                  goto LABEL_60;
LABEL_86:
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v156, v53 + 1, 8);
                *((_QWORD *)v154 + v155) = v40;
                LODWORD(v53) = v155;
              }
              LODWORD(v155) = v53 + 1;
              v54 = *(_QWORD *)(*(_QWORD *)(v138 + 8 * v33) + 32);
              v55 = v152;
              if (v152 >= HIDWORD(v152))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v151, v153, v152 + 1, 8);
                v55 = v152;
              }
              *((_QWORD *)v151 + v55) = v54;
              LODWORD(v152) = v152 + 1;
              goto LABEL_80;
            }
            v44 = v142;
            if (!v142)
              goto LABEL_107;
            v45 = (v142 - 1) & (37 * v33);
            v46 = (char *)v140 + 16 * v45;
            v47 = *(_DWORD *)v46;
            if (*(_DWORD *)v46 != v33)
            {
              v48 = 0;
              v49 = 1;
              while (v47 != -1)
              {
                if (v48)
                  v50 = 0;
                else
                  v50 = v47 == -2;
                if (v50)
                  v48 = v46;
                v51 = v45 + v49++;
                v45 = v51 & (v142 - 1);
                v46 = (char *)v140 + 16 * v45;
                v47 = *(_DWORD *)v46;
                if (*(_DWORD *)v46 == v33)
                  goto LABEL_80;
              }
              if (v48)
                v64 = v48;
              else
                v64 = v46;
              if (4 * (int)v141 + 4 < 3 * v142)
              {
                if (v142 + ~(_DWORD)v141 - HIDWORD(v141) > v142 >> 3)
                  goto LABEL_77;
              }
              else
              {
LABEL_107:
                v44 = 2 * v142;
              }
              llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v140, v44);
              if (v142)
              {
                v72 = v142 - 1;
                v73 = (v142 - 1) & (37 * v33);
                v64 = (char *)v140 + 16 * v73;
                v74 = *(_DWORD *)v64;
                if (*(_DWORD *)v64 != v33)
                {
                  v68 = 0;
                  v75 = 1;
                  while (v74 != -1)
                  {
                    if (v68)
                      v76 = 0;
                    else
                      v76 = v74 == -2;
                    if (v76)
                      v68 = v64;
                    v77 = v73 + v75++;
                    v73 = v77 & v72;
                    v64 = (char *)v140 + 16 * (v77 & v72);
                    v74 = *(_DWORD *)v64;
                    if (*(_DWORD *)v64 == v33)
                      goto LABEL_77;
                  }
                  goto LABEL_120;
                }
                goto LABEL_77;
              }
              goto LABEL_119;
            }
          }
LABEL_80:
          v36 = v145[1];
          v33 = LODWORD(v145[0]) + 1;
          ++v145[0];
          v32 = ++v145[2];
          v34 = ++v147;
        }
        while (*(_OWORD *)&v145[1] != __PAIR128__(v30, (unint64_t)v29));
      }
    }
    else
    {
      memset(v145, 0, sizeof(v145));
      v146 = v162;
      v147 = 0;
    }
    v79 = v135;
    v80 = (mlir::OpBuilder *)(v135 + 8);
    v81 = (_OWORD *)(v135 + 24);
    v139 = *(_OWORD *)(v135 + 24);
    v82 = *(_QWORD *)(v13 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v13);
    *(_QWORD *)(v135 + 24) = v82;
    *(_QWORD *)(v135 + 32) = v83;
    v84 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v135 + 8), *(_QWORD *)(v13 + 24), (uint64_t)&v154);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v79 + 32))(v79, v13, v84);
    if ((_QWORD)v139)
    {
      *v81 = v139;
    }
    else
    {
      *(_QWORD *)v81 = 0;
      *(_QWORD *)(v135 + 32) = 0;
    }
    v85 = *(_QWORD *)(a2 + 24);
    v86 = *(unsigned int *)(a2 + 36);
    v87 = a2 - 16;
    if (!(_DWORD)v86)
      v87 = 0;
    v164[0] = v87;
    v164[1] = v86;
    mlir::OperandRange::getTypes(v164, (uint64_t *)v145);
    v88 = mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &>(v80, v85, (uint64_t *)v145, (uint64_t)&v157);
    v89 = (unsigned int *)v88;
    v90 = *((unsigned int *)v88 + 11);
    if ((v90 & 0x7FFFFF) != 0)
      v91 = (((unint64_t)v88 + 16 * ((v90 >> 23) & 1) + ((v90 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v88 + 10);
    else
      v91 = 0;
    v92 = (__n128 *)mlir::ValueRange::ValueRange((unint64_t *)v164, (uint64_t)v154, v155);
    mlir::ValueRange::getTypes(v92, &v148);
    v94 = (void *)v148.n128_u64[1];
    v93 = v148.n128_u64[0];
    v95 = v149;
    *(__n128 *)v145 = v148;
    if (v148.n128_u64[1])
    {
      v93 = mlir::ValueRange::offset_base(v145, v148.n128_i64[1]);
      v94 = v145[1];
    }
    mlir::TypeRange::TypeRange(v150, v93, v95 - (_QWORD)v94);
    Block = mlir::OpBuilder::createBlock(v80, v91, 0, v150[0], v150[1], (uint64_t)v151, v152);
    v97 = *(_QWORD *)(((v136
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v97)
      v98 = v97 - 8;
    else
      v98 = 0;
    v99 = (*(_QWORD *)(v98 + 56) - *(_QWORD *)(v98 + 48)) >> 3;
    v145[0] = &v145[2];
    v145[1] = (void *)0x600000000;
    if (!(_DWORD)v99)
    {
      LODWORD(v99) = 0;
      goto LABEL_195;
    }
    if (v99 < 7uLL)
    {
      v100 = 0;
      v101 = v99;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v145, &v145[2], v99, 8);
      v100 = LODWORD(v145[1]);
      v101 = v99 - (unint64_t)LODWORD(v145[1]);
      if (v99 == (unint64_t)LODWORD(v145[1]))
      {
LABEL_147:
        LODWORD(v145[1]) = v99;
        v102 = (*(_QWORD *)(v98 + 56) - *(_QWORD *)(v98 + 48)) >> 3;
        if ((_DWORD)v102)
        {
          v103 = v142;
          v104 = v102;
          if (v142)
          {
            v105 = 0;
            v106 = 0;
LABEL_150:
            v107 = 37 * v105;
            v108 = v103 - 1;
            v109 = (v103 - 1) & (37 * v105);
            v110 = (char *)v140 + 16 * v109;
            v111 = *(unsigned int *)v110;
            if (v105 == v111)
              goto LABEL_151;
            v112 = 1;
            LODWORD(v113) = *(_DWORD *)v110;
            v114 = v108 & v107;
            do
            {
              if ((_DWORD)v113 == -1)
              {
                while (1)
                {
                  v127 = *(_QWORD *)(*((_QWORD *)Block + 6) + 8 * v106++);
                  *((_QWORD *)v145[0] + v105++) = v127;
                  if (v105 == v104)
                    goto LABEL_192;
LABEL_190:
                  v103 = v142;
                  if (v142)
                    goto LABEL_150;
                }
              }
              v115 = v114 + v112++;
              v114 = v115 & v108;
              v113 = *((unsigned int *)v140 + 4 * v114);
            }
            while (v105 != v113);
            if (v105 != v111)
            {
              v116 = 0;
              v117 = 1;
              while ((_DWORD)v111 != -1)
              {
                if (v116)
                  v118 = 0;
                else
                  v118 = (_DWORD)v111 == -2;
                if (v118)
                  v116 = v110;
                v119 = v109 + v117++;
                v109 = v119 & v108;
                v110 = (char *)v140 + 16 * (v119 & v108);
                v111 = *(unsigned int *)v110;
                if (v105 == v111)
                  goto LABEL_151;
              }
              if (4 * (int)v141 + 4 >= 3 * v103)
              {
                v103 *= 2;
              }
              else
              {
                if (v116)
                  v110 = v116;
                if (v103 + ~(_DWORD)v141 - HIDWORD(v141) > v103 >> 3)
                  goto LABEL_170;
              }
              llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v140, v103);
              if (v142)
              {
                v120 = v142 - 1;
                v121 = (v142 - 1) & v107;
                v110 = (char *)v140 + 16 * v121;
                v122 = *(unsigned int *)v110;
                if (v105 != v122)
                {
                  v123 = 0;
                  v124 = 1;
                  while ((_DWORD)v122 != -1)
                  {
                    if (v123)
                      v125 = 0;
                    else
                      v125 = (_DWORD)v122 == -2;
                    if (v125)
                      v123 = v110;
                    v126 = v121 + v124++;
                    v121 = v126 & v120;
                    v110 = (char *)v140 + 16 * (v126 & v120);
                    v122 = *(unsigned int *)v110;
                    if (v105 == v122)
                      goto LABEL_170;
                  }
                  if (v123)
                    v110 = v123;
                }
              }
              else
              {
                v110 = 0;
              }
LABEL_170:
              LODWORD(v141) = v141 + 1;
              if (*(_DWORD *)v110 != -1)
                --HIDWORD(v141);
              *(_DWORD *)v110 = v105;
              *((_QWORD *)v110 + 1) = 0;
            }
LABEL_151:
            *((_QWORD *)v145[0] + v105++) = *((_QWORD *)v110 + 1);
            if (v105 != v104)
              goto LABEL_190;
LABEL_192:
            LODWORD(v99) = v145[1];
            v79 = v135;
          }
          else
          {
            v128 = 0;
            do
            {
              *(_QWORD *)((char *)v145[0] + v128) = *(_QWORD *)(*((_QWORD *)Block + 6) + v128);
              v128 += 8;
            }
            while (8 * v104 != v128);
          }
        }
LABEL_195:
        mlir::ValueRange::ValueRange(v144, (uint64_t)v145[0], v99);
        mlir::RewriterBase::mergeBlocks(v79, v98, (uint64_t)Block, v144[0], v144[1]);
        v129 = *(unsigned int *)(a2 + 44);
        if ((v129 & 0x7FFFFF) != 0)
          v130 = ((v136 + 16 * ((v129 >> 23) & 1) + ((v129 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(a2 + 40);
        else
          v130 = 0;
        v131 = v130 + 24;
        v132 = (((unint64_t)&v89[4 * (((unint64_t)v89[11] >> 23) & 1) + 17]
               + (((unint64_t)v89[11] >> 21) & 0x7F8)
               + 3) & 0xFFFFFFFFFFFFFFF8)
             + 32 * v89[10];
        (**(void (***)(uint64_t, unint64_t, uint64_t, _QWORD))v79)(v79, v131, v132 + 24, *(_QWORD *)(v132 + 32));
        v133 = v89[9];
        if ((_DWORD)v133)
          v134 = (uint64_t)(v89 - 4);
        else
          v134 = 0;
        mlir::ValueRange::ValueRange(v143, v134, v133);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, a2, v143[0], v143[1]);
        if (v145[0] != &v145[2])
          free(v145[0]);
        if (v151 != v153)
          free(v151);
        llvm::deallocate_buffer(v140, (void *)(16 * v142));
      }
    }
    bzero((char *)v145[0] + 8 * v100, 8 * v101);
    goto LABEL_147;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t NextResultAtOffset;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  unint64_t v21[2];
  unint64_t v22[2];
  _QWORD v23[38];
  uint64_t v24[4];
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"scf.while";
    v24[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v24, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  NextResultAtOffset = *a3;
  v12 = a3[1];
  v13 = a3[3];
  if (v12)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v12);
  mlir::ValueRange::ValueRange((unint64_t *)v24, NextResultAtOffset, v13 - v12);
  mlir::TypeRange::TypeRange(v22, v24[0], v24[1]);
  v14 = mlir::ValueRange::ValueRange(v21, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::scf::WhileOp::build((uint64_t)v14, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], 0, 0);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_DWORD *llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -1;
        *v13 = -1;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -1;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v23 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 <= 0xFFFFFFFD)
        {
          v24 = *(_DWORD *)(a1 + 16) - 1;
          v25 = v24 & (37 * v23);
          v22 = *(_QWORD *)a1 + 16 * v25;
          v26 = *(_DWORD *)v22;
          if (v23 != *(_DWORD *)v22)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -1)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -2;
              if (v29)
                v27 = v22;
              v30 = v25 + v28++;
              v25 = v30 & v24;
              v22 = *(_QWORD *)a1 + 16 * (v30 & v24);
              v26 = *(_DWORD *)v22;
              if (v23 == *(_DWORD *)v22)
                goto LABEL_24;
            }
            if (v27)
              v22 = v27;
          }
LABEL_24:
          *(_DWORD *)v22 = v23;
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v16 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 4;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 4) = -1;
      *v19 = -1;
      v19 += 8;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[4 * v17];
      do
      {
        *v10 = -1;
        v10 += 4;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void `anonymous namespace'::RemoveLoopInvariantValueYielded::~RemoveLoopInvariantValueYielded(_anonymous_namespace_::RemoveLoopInvariantValueYielded *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::RemoveLoopInvariantValueYielded::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  int v22;
  void *v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  void *v42;
  mlir::OpBuilder *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  mlir::GenericProgramPoint *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  mlir::GenericProgramPoint *v52;
  mlir::GenericProgramPoint *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *Block;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  char *v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  llvm *v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107[2];
  unint64_t v108[2];
  void *v109;
  uint64_t v110;
  _BYTE v111[48];
  void *v112;
  uint64_t v113;
  _BYTE v114[48];
  unint64_t v115[2];
  void *v116;
  uint64_t v117;
  _BYTE v118[48];
  _BYTE *v119;
  uint64_t v120;
  _BYTE v121[48];
  _QWORD *v122;
  uint64_t v123;
  _QWORD v124[8];

  v124[6] = *MEMORY[0x1E0C80C00];
  v5 = a2 + 64;
  v6 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  mlir::Block::getTerminator(v7);
  v9 = (mlir::GenericProgramPoint *)v8;
  if ((*(_BYTE *)(v8 + 46) & 0x80) == 0)
  {
    v103 = a3;
    v11 = -1;
    v12 = 32;
LABEL_7:
    v13 = (_QWORD *)(v12 + 24);
    v14 = v11;
    while (1)
    {
      v122 = (_QWORD *)*v13;
      if ((mlir::GenericProgramPoint **)mlir::Value::getParentBlock((mlir::Value *)&v122) != v7)
        break;
      v13 += 4;
      if (!--v14)
        return 0;
    }
    v16 = 0;
    v102 = v5;
    v17 = *(_QWORD *)(((v5
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
    if (v17)
      v18 = v17 - 8;
    else
      v18 = 0;
    v19 = *(_QWORD *)(v18 + 48);
    v122 = v124;
    v123 = 0x600000000;
    v119 = v121;
    v120 = 0x600000000;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v116 = v118;
    v117 = 0x600000000;
    while (1)
    {
      v112 = *(void **)(v12 + 32 * v16 + 24);
      if ((mlir::GenericProgramPoint **)mlir::Value::getParentBlock((mlir::Value *)&v112) == v7)
      {
        v25 = v123;
        if (v123 >= HIDWORD(v123))
        {
          v42 = v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, v124, v123 + 1, 8);
          v122[v123] = v42;
          v25 = v123;
        }
        else
        {
          v122[v123] = v112;
        }
        LODWORD(v123) = v25 + 1;
        v26 = *((_QWORD *)v112 + 1) & 0xFFFFFFFFFFFFFFF8;
        v27 = v120;
        if (v120 >= HIDWORD(v120))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, v121, v120 + 1, 8);
          *(_QWORD *)&v119[8 * v120] = v26;
          v27 = v120;
        }
        else
        {
          *(_QWORD *)&v119[8 * v120] = v26;
        }
        LODWORD(v120) = v27 + 1;
        v28 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * v16) + 32);
        v29 = v117;
        if (v117 >= HIDWORD(v117))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, v118, v117 + 1, 8);
          v29 = v117;
        }
        *((_QWORD *)v116 + v29) = v28;
        LODWORD(v117) = v117 + 1;
        goto LABEL_16;
      }
      v23 = v112;
      v24 = v106;
      if (!v106)
        goto LABEL_44;
      v20 = (v106 - 1) & (37 * v16);
      v21 = (char *)v104 + 16 * v20;
      v22 = *(_DWORD *)v21;
      if (*(_DWORD *)v21 != (_DWORD)v16)
        break;
LABEL_16:
      if (++v16 == v11)
      {
        v43 = (mlir::OpBuilder *)(v103 + 8);
        v44 = (_OWORD *)(v103 + 24);
        v101 = *(_OWORD *)(v103 + 24);
        v45 = *((_QWORD *)v9 + 2);
        mlir::GenericProgramPoint::~GenericProgramPoint(v9);
        *(_QWORD *)(v103 + 24) = v45;
        *(_QWORD *)(v103 + 32) = v46;
        v112 = *(void **)(*((_QWORD *)v9 + 9) + 24);
        v47 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v103 + 8), *((_QWORD *)v9 + 3), (uint64_t *)&v112, (uint64_t)&v122);
        (*(void (**)(uint64_t, mlir::GenericProgramPoint *, mlir::GenericProgramPoint *))(*(_QWORD *)v103
                                                                                                  + 32))(v103, v9, v47);
        if ((_QWORD)v101)
        {
          *v44 = v101;
          v48 = v102;
          v49 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
            goto LABEL_64;
LABEL_68:
          v50 = 0;
          v51 = 0;
        }
        else
        {
          *(_QWORD *)v44 = 0;
          *(_QWORD *)(v103 + 32) = 0;
          v48 = v102;
          v49 = *(_QWORD *)(a2 + 24);
          if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
            goto LABEL_68;
LABEL_64:
          v50 = *(void **)(a2 + 72);
          v51 = *(unsigned int *)(a2 + 68);
        }
        v112 = v50;
        v113 = v51;
        v52 = mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(v43, v49, (uint64_t)&v119, (uint64_t)&v112);
        v53 = v52;
        v54 = *((unsigned int *)v52 + 11);
        if ((v54 & 0x7FFFFF) != 0)
          v55 = (((unint64_t)v52 + 16 * ((v54 >> 23) & 1) + ((v54 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *((unsigned int *)v52 + 10);
        else
          v55 = 0;
        v56 = v55 + 24;
        mlir::ValueRange::ValueRange(v115, (uint64_t)v119, v120);
        Block = mlir::OpBuilder::createBlock(v43, v56, 0, v115[0], v115[1], (uint64_t)v116, v117);
        v58 = *(_QWORD *)(((v48
                          + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                          + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                          + 7) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(a2 + 40)
                        + 32);
        if (v58)
          v59 = v58 - 8;
        else
          v59 = 0;
        v60 = *(_QWORD *)(v59 + 56) - *(_QWORD *)(v59 + 48);
        v61 = v60 >> 3;
        v62 = (v60 >> 3);
        v112 = v114;
        v113 = 0x600000000;
        if (!(v60 >> 3))
        {
          v109 = v111;
          v110 = 0x600000000;
          goto LABEL_87;
        }
        if (v62 < 7)
        {
          v63 = 0;
          v64 = v62;
          if (!v62)
            goto LABEL_80;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v114, (v60 >> 3), 8);
          v63 = v113;
          v64 = v62 - v113;
          if (v62 == v113)
          {
LABEL_80:
            LODWORD(v113) = v61;
            v61 = (*(_QWORD *)(v59 + 56) - *(_QWORD *)(v59 + 48)) >> 3;
            v109 = v111;
            v110 = 0x600000000;
            if (!(_DWORD)v61)
              goto LABEL_87;
            if (v61 < 7uLL)
            {
              v65 = 0;
              v66 = v61;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v111, v61, 8);
              v65 = v110;
              v66 = v61 - (unint64_t)v110;
              if (v61 == (unint64_t)v110)
              {
LABEL_86:
                LODWORD(v110) = v61;
                v61 = (*(_QWORD *)(v59 + 56) - *(_QWORD *)(v59 + 48)) >> 3;
LABEL_87:
                if ((_DWORD)v61)
                {
                  v67 = (char *)v53 - 96;
                  v68 = v106;
                  if (v106)
                  {
                    v69 = 0;
                    v70 = 0;
LABEL_90:
                    v71 = 37 * v69;
                    v72 = v68 - 1;
                    v73 = (v68 - 1) & (37 * v69);
                    v74 = (char *)v104 + 16 * v73;
                    v75 = *(unsigned int *)v74;
                    if (v69 == v75)
                      goto LABEL_91;
                    v78 = 1;
                    LODWORD(v79) = *(_DWORD *)v74;
                    v80 = v72 & v71;
                    while ((_DWORD)v79 != -1)
                    {
                      v81 = v80 + v78++;
                      v80 = v81 & v72;
                      v79 = *((unsigned int *)v104 + 4 * v80);
                      if (v69 == v79)
                      {
                        if (v69 != v75)
                        {
                          v82 = 0;
                          v83 = 1;
                          while ((_DWORD)v75 != -1)
                          {
                            if (v82)
                              v84 = 0;
                            else
                              v84 = (_DWORD)v75 == -2;
                            if (v84)
                              v82 = v74;
                            v85 = v73 + v83++;
                            v73 = v85 & v72;
                            v74 = (char *)v104 + 16 * (v85 & v72);
                            v75 = *(unsigned int *)v74;
                            if (v69 == v75)
                              goto LABEL_91;
                          }
                          if (4 * (int)v105 + 4 >= 3 * v68)
                          {
                            v68 *= 2;
                          }
                          else
                          {
                            if (v82)
                              v74 = v82;
                            if (v68 + ~(_DWORD)v105 - HIDWORD(v105) > v68 >> 3)
                              goto LABEL_116;
                          }
                          llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v104, v68);
                          if (v106)
                          {
                            v87 = v106 - 1;
                            v88 = (v106 - 1) & v71;
                            v74 = (char *)v104 + 16 * v88;
                            v89 = *(unsigned int *)v74;
                            if (v69 != v89)
                            {
                              v90 = 0;
                              v91 = 1;
                              while ((_DWORD)v89 != -1)
                              {
                                if (v90)
                                  v92 = 0;
                                else
                                  v92 = (_DWORD)v89 == -2;
                                if (v92)
                                  v90 = v74;
                                v93 = v88 + v91++;
                                v88 = v93 & v87;
                                v74 = (char *)v104 + 16 * (v93 & v87);
                                v89 = *(unsigned int *)v74;
                                if (v69 == v89)
                                  goto LABEL_116;
                              }
                              if (v90)
                                v74 = v90;
                            }
                          }
                          else
                          {
                            v74 = 0;
                          }
LABEL_116:
                          LODWORD(v105) = v105 + 1;
                          if (*(_DWORD *)v74 != -1)
                            --HIDWORD(v105);
                          *(_DWORD *)v74 = v69;
                          *((_QWORD *)v74 + 1) = 0;
                        }
LABEL_91:
                        v76 = (char *)*((_QWORD *)v74 + 1);
                        v77 = v76;
                        goto LABEL_109;
                      }
                    }
                    while (1)
                    {
                      v76 = *(char **)(*((_QWORD *)Block + 6) + 8 * v70);
                      v77 = &v67[-24 * v70 + 120];
                      if (v70 <= 5)
                        v77 = (char *)v53 - 16 * v70 - 16;
                      ++v70;
LABEL_109:
                      v86 = 8 * v69;
                      *(_QWORD *)((char *)v112 + v86) = v76;
                      *(_QWORD *)((char *)v109 + v86) = v77;
                      if (++v69 == v61)
                        break;
                      v68 = v106;
                      if (v106)
                        goto LABEL_90;
                    }
                  }
                  else
                  {
                    *(_QWORD *)v112 = **((_QWORD **)Block + 6);
                    *(_QWORD *)v109 = (char *)v53 - 16;
                    if ((_DWORD)v61 != 1)
                    {
                      v94 = v112;
                      *((_QWORD *)v112 + 1) = *(_QWORD *)(*((_QWORD *)Block + 6) + 8);
                      v95 = v109;
                      *((_QWORD *)v109 + 1) = (char *)v53 - 32;
                      if ((_DWORD)v61 != 2)
                      {
                        v94[2] = *(_QWORD *)(*((_QWORD *)Block + 6) + 16);
                        v95[2] = (char *)v53 - 48;
                        if ((_DWORD)v61 != 3)
                        {
                          v94[3] = *(_QWORD *)(*((_QWORD *)Block + 6) + 24);
                          v95[3] = (char *)v53 - 64;
                          if ((_DWORD)v61 != 4)
                          {
                            v94[4] = *(_QWORD *)(*((_QWORD *)Block + 6) + 32);
                            v95[4] = (char *)v53 - 80;
                            if ((_DWORD)v61 != 5)
                            {
                              v94[5] = *(_QWORD *)(*((_QWORD *)Block + 6) + 40);
                              v95[5] = v67;
                              if ((_DWORD)v61 != 6)
                              {
                                v96 = (char *)v53 - 120;
                                v97 = 6;
                                do
                                {
                                  v98 = 8 * v97;
                                  *(_QWORD *)((char *)v112 + v98) = *(_QWORD *)(*((_QWORD *)Block + 6) + 8 * v97++);
                                  *(_QWORD *)((char *)v109 + v98) = v96;
                                  v96 -= 24;
                                }
                                while (v61 != v97);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                mlir::ValueRange::ValueRange(v108, (uint64_t)v112, v113);
                v99 = v103;
                mlir::RewriterBase::mergeBlocks(v103, v59, (uint64_t)Block, v108[0], v108[1]);
                v100 = (((unint64_t)v53
                       + 16 * (((unint64_t)*((unsigned int *)v53 + 11) >> 23) & 1)
                       + (((unint64_t)*((unsigned int *)v53 + 11) >> 21) & 0x7F8)
                       + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *((unsigned int *)v53 + 10);
                (**(void (***)(uint64_t, unint64_t, unint64_t, _QWORD))v99)(v99, ((v102+ 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), v100, *(_QWORD *)(v100 + 8));
                mlir::ValueRange::ValueRange(v107, (uint64_t)v109, v110);
                (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v99 + 24))(v99, a2, v107[0], v107[1]);
                if (v109 != v111)
                  free(v109);
                if (v112 != v114)
                  free(v112);
                if (v116 != v118)
                  free(v116);
                llvm::deallocate_buffer(v104, (void *)(16 * v106));
              }
            }
            bzero((char *)v109 + 8 * v65, 8 * v66);
            goto LABEL_86;
          }
        }
        bzero((char *)v112 + 8 * v63, 8 * v64);
        goto LABEL_80;
      }
    }
    v30 = 0;
    v31 = 1;
    while (v22 != -1)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v22 == -2;
      if (v32)
        v30 = v21;
      v33 = v20 + v31++;
      v20 = v33 & (v106 - 1);
      v21 = (char *)v104 + 16 * v20;
      v22 = *(_DWORD *)v21;
      if (*(_DWORD *)v21 == (_DWORD)v16)
        goto LABEL_16;
    }
    if (v30)
      v34 = v30;
    else
      v34 = v21;
    if (4 * (int)v105 + 4 < 3 * v106)
    {
      if (v106 + ~(_DWORD)v105 - HIDWORD(v105) > v106 >> 3)
      {
LABEL_21:
        LODWORD(v105) = v105 + 1;
        if (*(_DWORD *)v34 != -1)
          --HIDWORD(v105);
        *(_DWORD *)v34 = v16;
        *((_QWORD *)v34 + 1) = v23;
        goto LABEL_16;
      }
    }
    else
    {
LABEL_44:
      v24 = 2 * v106;
    }
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow((uint64_t)&v104, v24);
    if (v106)
    {
      v35 = v106 - 1;
      v36 = (v106 - 1) & (37 * v16);
      v34 = (char *)v104 + 16 * v36;
      v37 = *(_DWORD *)v34;
      if (*(_DWORD *)v34 != (_DWORD)v16)
      {
        v38 = 0;
        v39 = 1;
        while (v37 != -1)
        {
          if (v38)
            v40 = 0;
          else
            v40 = v37 == -2;
          if (v40)
            v38 = v34;
          v41 = v36 + v39++;
          v36 = v41 & v35;
          v34 = (char *)v104 + 16 * (v41 & v35);
          v37 = *(_DWORD *)v34;
          if (*(_DWORD *)v34 == (_DWORD)v16)
            goto LABEL_21;
        }
        if (v38)
          v34 = v38;
      }
    }
    else
    {
      v34 = 0;
    }
    goto LABEL_21;
  }
  v10 = *(unsigned int *)(v8 + 68);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v103 = a3;
    v12 = *(_QWORD *)(v8 + 72) + 32;
    goto LABEL_7;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t *v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  unint64_t v21[2];
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"scf.while";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  mlir::ValueRange::ValueRange(v21, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v11 = mlir::ValueRange::ValueRange(v20, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  mlir::scf::WhileOp::build((uint64_t)v11, (uint64_t)v22, v21[0], v21[1], v20[0], v20[1], 0, 0);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v13;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  unint64_t v22[2];
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"scf.condition";
    v20[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v12 = v22[0];
  v13 = v22[1];
  v20[0] = v11;
  mlir::OperationState::addOperands((uint64_t)v23, (uint64_t)v20, 1);
  mlir::OperationState::addOperands((uint64_t)v23, v12, v13);
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v15;
}

void `anonymous namespace'::WhileConditionTruth::~WhileConditionTruth(_anonymous_namespace_::WhileConditionTruth *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::WhileConditionTruth::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::GenericProgramPoint **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t ***v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  mlir::BoolAttr **v27;
  uint64_t v29;
  _QWORD *BoolAttr;
  unint64_t v31;

  v4 = a2 + 64;
  v5 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v5)
    v6 = (mlir::GenericProgramPoint **)(v5 - 8);
  else
    v6 = 0;
  mlir::Block::getTerminator(v6);
  v8 = v7;
  if ((*(_BYTE *)(v7 + 46) & 0x80) != 0)
  {
    v9 = *(_QWORD *)(v7 + 72);
    v10 = *(unsigned int *)(v7 + 68) - 1;
  }
  else
  {
    v9 = 0;
    v10 = -1;
  }
  v11 = 0;
  v12 = *(_QWORD *)(((v4
                    + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                    + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40)
                  + 32);
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  if (v10)
  {
    v14 = *(uint64_t ****)(v13 + 48);
    v15 = *(uint64_t ****)(v13 + 56);
    if (v15 != v14)
    {
      v11 = 0;
      v16 = 0;
      v17 = 0;
      v18 = v9 + 32;
      v27 = a3 + 1;
      v29 = v10;
      do
      {
        v19 = *(_QWORD *)(v18 + 32 * v17 + 24);
        if (v19 == *(_QWORD *)(*(_QWORD *)(v8 + 72) + 24))
        {
          v20 = **v14;
          if (v20)
          {
            if (v16
              || (v21 = *(_QWORD *)(a2 + 24),
                  v31 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8,
                  BoolAttr = (_QWORD *)mlir::Builder::getBoolAttr(v27, (mlir::MLIRContext *)1),
                  v16 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::BoolAttr>((mlir::OpBuilder *)v27, v21, (uint64_t *)&v31, &BoolAttr)- 16), (v20 = **v14) != 0))
            {
              do
              {
                v22 = (uint64_t *)*v20;
                v23 = v20[2];
                (*((void (**)(mlir::BoolAttr **, uint64_t))*a3 + 9))(a3, v23);
                v24 = (uint64_t *)v20[1];
                if (v24)
                {
                  *v24 = *v20;
                  if (*v20)
                    *(_QWORD *)(*v20 + 8) = v20[1];
                }
                v20[3] = (uint64_t)v16;
                v20[1] = (uint64_t)v16;
                v25 = *v16;
                *v20 = *v16;
                if (v25)
                  *(_QWORD *)(v25 + 8) = v20;
                *v16 = (uint64_t)v20;
                (*((void (**)(mlir::BoolAttr **, uint64_t))*a3 + 10))(a3, v23);
                v20 = v22;
              }
              while (v22);
              v11 = 1;
              v10 = v29;
            }
            else
            {
              v11 = 1;
            }
          }
        }
        if (++v17 == v10)
          break;
        ++v14;
      }
      while (v14 != v15);
    }
  }
  return v11 & 1;
}

void `anonymous namespace'::WhileCmpCond::~WhileCmpCond(_anonymous_namespace_::WhileCmpCond *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::WhileCmpCond::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  mlir::GenericProgramPoint **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  mlir::Builder *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t Predicate;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *Context;
  uint64_t v32;
  char v33;
  mlir::GenericProgramPoint *v34;
  mlir::Operation *v35;
  _BOOL4 v36;
  mlir::GenericProgramPoint *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  mlir::GenericProgramPoint *v49;
  mlir::Operation *v50;
  _BOOL4 v51;
  mlir::GenericProgramPoint *v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  __int16 v61;
  uint64_t v62[4];
  __int16 v63;
  _BYTE v64[40];
  _QWORD v65[40];

  v65[38] = *MEMORY[0x1E0C80C00];
  v4 = a2 + 64;
  v5 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v5)
    v6 = (mlir::GenericProgramPoint **)(v5 - 8);
  else
    v6 = 0;
  mlir::Block::getTerminator(v6);
  v8 = v7;
  v65[0] = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v65);
  if (result)
  {
    v10 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v11 = v10 == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
      v12 = result;
    else
      v12 = 0;
    v58 = v12;
    if (!v11)
      return 0;
    if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v8 + 72);
      v14 = *(unsigned int *)(v8 + 68) - 1;
    }
    else
    {
      v13 = 0;
      v14 = -1;
    }
    v15 = 0;
    v16 = *(_QWORD *)(((v4
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
    if (v16)
      v17 = v16 - 8;
    else
      v17 = 0;
    if (!v14)
      return v15 & 1;
    v18 = *(_QWORD ***)(v17 + 48);
    v54 = *(_QWORD ***)(v17 + 56);
    if (v54 == v18)
      return v15 & 1;
    v15 = 0;
    v19 = 0;
    v55 = v13 + 32;
    v20 = (mlir::Builder *)(a3 + 8);
    v53 = v14;
LABEL_19:
    v21 = *(_QWORD *)(v55 + 32 * v19 + 24);
    v22 = *(_QWORD *)(v58 + 72);
    if (v21 != *(_QWORD *)(v22 + 24) || (v23 = (_QWORD *)**v18) == 0)
    {
      if (v21 == *(_QWORD *)(v22 + 56))
        goto LABEL_40;
      goto LABEL_22;
    }
    while (1)
    {
      v24 = v23[2];
      v23 = (_QWORD *)*v23;
      if (*(_UNKNOWN **)(*(_QWORD *)(v24 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
        v24 = 0;
      v57 = v24;
      if (v24 && *(_QWORD *)(*(_QWORD *)(v24 + 72) + 56) == *(_QWORD *)(*(_QWORD *)(v58 + 72) + 56))
      {
        Predicate = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v57);
        if (Predicate == mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58))
        {
          v26 = 1;
LABEL_34:
          v29 = v57;
          v30 = *(_QWORD *)(v57 + 24);
          v59 = v30;
          Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v59);
          v32 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
          if (!v33)
          {
LABEL_57:
            v63 = 1283;
            v62[2] = (uint64_t)"arith.constant";
            v62[3] = 14;
                  "added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-"
                  "whats-up-with-dialects-management";
            v61 = 259;
            llvm::operator+(v62, (uint64_t *)&v60, (uint64_t)v64);
            llvm::report_fatal_error((llvm::Twine *)v64, 1);
          }
          mlir::OperationState::OperationState(v65, v30, v32);
          v15 = 1;
          mlir::arith::ConstantIntOp::build(v20, (uint64_t)v65, v26, 1u);
          v34 = mlir::OpBuilder::create(v20, (const mlir::OperationState *)v65);
          v36 = mlir::arith::ConstantIntOp::classof((_BOOL8)v34, v35);
          mlir::OperationState::~OperationState((mlir::OperationState *)v65);
          if (v36)
            v37 = v34;
          else
            v37 = 0;
          (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v29, v37);
          goto LABEL_25;
        }
        v27 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v57);
        v28 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
        if (v27 == mlir::arith::invertPredicate(v28))
        {
          v26 = 0;
          goto LABEL_34;
        }
      }
LABEL_25:
      if (!v23)
      {
        if (v21 == *(_QWORD *)(*(_QWORD *)(v58 + 72) + 56))
        {
LABEL_40:
          v38 = (_QWORD *)**v18;
          if (!v38)
            goto LABEL_22;
          while (2)
          {
            v39 = v38[2];
            v38 = (_QWORD *)*v38;
            if (*(_UNKNOWN **)(*(_QWORD *)(v39 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
              v39 = 0;
            v57 = v39;
            if (v39 && *(_QWORD *)(*(_QWORD *)(v39 + 72) + 24) == *(_QWORD *)(*(_QWORD *)(v58 + 72) + 24))
            {
              v40 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v57);
              if (v40 == mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58))
              {
                v41 = 1;
                goto LABEL_51;
              }
              v42 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v57);
              v43 = mlir::arith::CmpIOp::getPredicate((mlir::arith::CmpIOp *)&v58);
              if (v42 == mlir::arith::invertPredicate(v43))
              {
                v41 = 0;
LABEL_51:
                v44 = v57;
                v45 = *(_QWORD *)(v57 + 24);
                v59 = v45;
                v46 = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v59);
                v47 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, v46);
                if (!v48)
                  goto LABEL_57;
                mlir::OperationState::OperationState(v65, v45, v47);
                v15 = 1;
                mlir::arith::ConstantIntOp::build(v20, (uint64_t)v65, v41, 1u);
                v49 = mlir::OpBuilder::create(v20, (const mlir::OperationState *)v65);
                v51 = mlir::arith::ConstantIntOp::classof((_BOOL8)v49, v50);
                mlir::OperationState::~OperationState((mlir::OperationState *)v65);
                if (v51)
                  v52 = v49;
                else
                  v52 = 0;
                (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v44, v52);
              }
            }
            if (!v38)
              break;
            continue;
          }
        }
LABEL_22:
        if (++v19 == v53)
          return v15 & 1;
        if (++v18 == v54)
          return v15 & 1;
        goto LABEL_19;
      }
    }
  }
  return result;
}

void `anonymous namespace'::WhileUnusedResult::~WhileUnusedResult(_anonymous_namespace_::WhileUnusedResult *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::WhileUnusedResult::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *NextResultAtOffset;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t Loc;
  uint64_t v33;
  mlir::OpBuilder *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  mlir::GenericProgramPoint *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  mlir::GenericProgramPoint *v44;
  mlir::GenericProgramPoint *v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v50;
  _OWORD *Block;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int *v76;
  unint64_t v77[2];
  unint64_t v78[2];
  void *v79;
  uint64_t v80;
  _BYTE v81[48];
  void *v82;
  uint64_t v83;
  _BYTE v84[48];
  unint64_t v85[2];
  void *v86;
  uint64_t v87;
  _BYTE v88[48];
  void *v89;
  uint64_t v90;
  _BYTE v91[48];
  _QWORD *v92;
  uint64_t v93;
  _BYTE v94[48];
  unsigned int *v95;
  uint64_t v96;
  _QWORD v97[8];

  v97[6] = *MEMORY[0x1E0C80C00];
  v5 = a2 + 16;
  v6 = *(_QWORD *)((((unint64_t)&a2[4 * (((unint64_t)a2[11] >> 23) & 1) + 17]
                   + (((unint64_t)a2[11] >> 21) & 0x7F8)
                   + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a2[10]
                 + 8);
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  mlir::Block::getTerminator(v7);
  v9 = (mlir::GenericProgramPoint *)v8;
  v10 = *(_QWORD *)((((unint64_t)&v5[4 * (((unint64_t)a2[11] >> 23) & 1) + 1]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 32);
  if (v10)
    v11 = v10 - 8;
  else
    v11 = 0;
  v76 = v5;
  if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
  {
    v12 = *(_QWORD *)(v8 + 72);
    v13 = *(unsigned int *)(v8 + 68) - 1;
  }
  else
  {
    v12 = 0;
    v13 = -1;
  }
  v14 = 0;
  v16 = *(_QWORD *)(v11 + 48);
  v15 = *(_QWORD *)(v11 + 56);
  v95 = (unsigned int *)v97;
  v96 = 0xC00000000;
  v92 = v94;
  v93 = 0x600000000;
  v89 = v91;
  v90 = 0x600000000;
  v86 = v88;
  v17 = a2[9];
  if ((_DWORD)v17)
    v18 = (uint64_t)(a2 - 4);
  else
    v18 = 0;
  v87 = 0x600000000;
  if (!(_DWORD)v17 || (v15 != v16 ? (v19 = v13 == 0) : (v19 = 1), v19))
  {
LABEL_44:
    v48 = v86;
    if (v86 == v88)
      goto LABEL_46;
    goto LABEL_45;
  }
  v74 = a2;
  v75 = a3;
  v20 = 0;
  v21 = 0;
  v22 = (uint64_t *)(v12 + 56);
  v23 = v17 - 1;
  v24 = v13 - 1;
  v25 = 8 * ((v15 - v16) >> 3) - 8;
  while (1)
  {
    NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v21);
    v27 = *v22;
    v82 = NextResultAtOffset;
    if (!*NextResultAtOffset && !**(_QWORD **)(v16 + 8 * v21))
    {
      v20 = 1;
      if (v23 == v21)
        break;
      goto LABEL_29;
    }
    v28 = v96;
    if (v96 >= HIDWORD(v96))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v97, v96 + 1, 4);
      v28 = v96;
    }
    v95[v28] = v21;
    LODWORD(v96) = v96 + 1;
    v29 = v90;
    if (v90 >= HIDWORD(v90))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, v91, v90 + 1, 8);
      *((_QWORD *)v89 + v90) = v27;
      v29 = v90;
    }
    else
    {
      *((_QWORD *)v89 + v90) = v27;
    }
    LODWORD(v90) = v29 + 1;
    v30 = *((_QWORD *)v82 + 1) & 0xFFFFFFFFFFFFFFF8;
    v31 = v93;
    if (v93 >= HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v93 + 1, 8);
      v92[v93] = v30;
      v31 = v93;
    }
    else
    {
      v92[v93] = v30;
    }
    LODWORD(v93) = v31 + 1;
    Loc = mlir::Value::getLoc((mlir::Value *)&v82);
    v33 = v87;
    if (v87 >= HIDWORD(v87))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v88, v87 + 1, 8);
      v33 = v87;
    }
    *((_QWORD *)v86 + v33) = Loc;
    LODWORD(v87) = v87 + 1;
    if (v23 == v21)
      break;
LABEL_29:
    if (v25)
    {
      v22 += 4;
      v25 -= 8;
      v19 = v24 == v21++;
      if (!v19)
        continue;
    }
    break;
  }
  if ((v20 & 1) == 0)
  {
    v14 = 0;
    goto LABEL_44;
  }
  v34 = (mlir::OpBuilder *)(v75 + 8);
  v35 = (_OWORD *)(v75 + 24);
  v73 = *(_OWORD *)(v75 + 24);
  v36 = *((_QWORD *)v9 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v9);
  *(_QWORD *)(v75 + 24) = v36;
  *(_QWORD *)(v75 + 32) = v37;
  v82 = *(void **)(*((_QWORD *)v9 + 9) + 24);
  v38 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v75 + 8), *((_QWORD *)v9 + 3), (uint64_t *)&v82, (uint64_t)&v89);
  (*(void (**)(uint64_t, mlir::GenericProgramPoint *, mlir::GenericProgramPoint *))(*(_QWORD *)v75 + 32))(v75, v9, v38);
  if ((_QWORD)v73)
  {
    *v35 = v73;
    v39 = v74;
    v40 = v76;
    v41 = *((_QWORD *)v74 + 3);
    if ((*((_BYTE *)v74 + 46) & 0x80) != 0)
      goto LABEL_40;
LABEL_54:
    v43 = 0;
    v42 = 0;
  }
  else
  {
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v75 + 32) = 0;
    v39 = v74;
    v40 = v76;
    v41 = *((_QWORD *)v74 + 3);
    if ((*((_BYTE *)v74 + 46) & 0x80) == 0)
      goto LABEL_54;
LABEL_40:
    v42 = v39[17];
    v43 = (void *)*((_QWORD *)v39 + 9);
  }
  v82 = v43;
  v83 = v42;
  v44 = mlir::OpBuilder::create<mlir::scf::WhileOp,llvm::SmallVector<mlir::Type,6u> &,mlir::OperandRange>(v34, v41, (uint64_t)&v92, (uint64_t)&v82);
  v45 = v44;
  v46 = *((unsigned int *)v44 + 11);
  if ((v46 & 0x7FFFFF) != 0)
    v47 = (((unint64_t)v44 + 16 * ((v46 >> 23) & 1) + ((v46 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v44 + 10);
  else
    v47 = 0;
  v50 = v47 + 24;
  mlir::ValueRange::ValueRange(v85, (uint64_t)v92, v93);
  Block = mlir::OpBuilder::createBlock(v34, v50, 0, v85[0], v85[1], (uint64_t)v86, v87);
  v52 = v39[9];
  v82 = v84;
  v83 = 0x600000000;
  if (!(_DWORD)v52)
  {
    v79 = v81;
    v80 = 0x600000000;
    goto LABEL_70;
  }
  if (v52 < 7)
  {
    v53 = 0;
    v54 = v52;
    goto LABEL_62;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v84, v52, 8);
  v53 = v83;
  v54 = v52 - v83;
  if (v52 != v83)
LABEL_62:
    bzero((char *)v82 + 8 * v53, 8 * v54);
  LODWORD(v83) = v52;
  v55 = v39[9];
  v79 = v81;
  v80 = 0x600000000;
  if ((_DWORD)v55)
  {
    if (v55 < 7)
    {
      v56 = 0;
      v57 = v55;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v55, 8);
      v56 = v80;
      v57 = v55 - v80;
      if (v55 == v80)
      {
LABEL_69:
        LODWORD(v80) = v55;
        goto LABEL_70;
      }
    }
    bzero((char *)v79 + 8 * v56, 8 * v57);
    goto LABEL_69;
  }
LABEL_70:
  v58 = v96;
  if ((_DWORD)v96)
  {
    v59 = v95;
    v60 = 8 * *v95;
    *(_QWORD *)((char *)v82 + v60) = (char *)v45 - 16;
    *(_QWORD *)((char *)v79 + v60) = **((_QWORD **)Block + 6);
    if ((_DWORD)v58 != 1)
    {
      v61 = 8 * v59[1];
      *(_QWORD *)((char *)v82 + v61) = (char *)v45 - 32;
      *(_QWORD *)((char *)v79 + v61) = *(_QWORD *)(*((_QWORD *)Block + 6) + 8);
      if ((_DWORD)v58 != 2)
      {
        v62 = 8 * v59[2];
        *(_QWORD *)((char *)v82 + v62) = (char *)v45 - 48;
        *(_QWORD *)((char *)v79 + v62) = *(_QWORD *)(*((_QWORD *)Block + 6) + 16);
        if ((_DWORD)v58 != 3)
        {
          v63 = 8 * v59[3];
          *(_QWORD *)((char *)v82 + v63) = (char *)v45 - 64;
          *(_QWORD *)((char *)v79 + v63) = *(_QWORD *)(*((_QWORD *)Block + 6) + 24);
          if ((_DWORD)v58 != 4)
          {
            v64 = 8 * v59[4];
            *(_QWORD *)((char *)v82 + v64) = (char *)v45 - 80;
            *(_QWORD *)((char *)v79 + v64) = *(_QWORD *)(*((_QWORD *)Block + 6) + 32);
            if ((_DWORD)v58 != 5)
            {
              v65 = 8 * v59[5];
              *(_QWORD *)((char *)v82 + v65) = (char *)v45 - 96;
              *(_QWORD *)((char *)v79 + v65) = *(_QWORD *)(*((_QWORD *)Block + 6) + 40);
              if ((_DWORD)v58 != 6)
              {
                v66 = 0;
                v67 = v59 + 6;
                v68 = 4 * v58 - 24;
                do
                {
                  v69 = 8 * v67[v66];
                  *(_QWORD *)((char *)v82 + v69) = (char *)v45 - 24 * (v66 + 1) - 96;
                  *(_QWORD *)((char *)v79 + v69) = *(_QWORD *)(*((_QWORD *)Block + 6) + 8 * v66++ + 48);
                  v68 -= 4;
                }
                while (v68);
              }
            }
          }
        }
      }
    }
  }
  v70 = (((unint64_t)v45
        + 16 * (((unint64_t)*((unsigned int *)v45 + 11) >> 23) & 1)
        + (((unint64_t)*((unsigned int *)v45 + 11) >> 21) & 0x7F8)
        + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v45 + 10);
  (**(void (***)(uint64_t, unint64_t, unint64_t, _QWORD))v75)(v75, (((unint64_t)&v40[4 * (((unint64_t)v39[11] >> 23) & 1) + 1]+ (((unint64_t)v39[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * v39[10], v70, *(_QWORD *)(v70 + 8));
  v71 = *(_QWORD *)((((unint64_t)&v40[4 * (((unint64_t)v39[11] >> 23) & 1) + 1]
                    + (((unint64_t)v39[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v39[10]
                  + 32);
  if (v71)
    v72 = v71 - 8;
  else
    v72 = 0;
  mlir::ValueRange::ValueRange(v78, (uint64_t)v79, v80);
  mlir::RewriterBase::mergeBlocks(v75, v72, (uint64_t)Block, v78[0], v78[1]);
  mlir::ValueRange::ValueRange(v77, (uint64_t)v82, v83);
  (*(void (**)(uint64_t, unsigned int *, unint64_t, unint64_t))(*(_QWORD *)v75 + 24))(v75, v39, v77[0], v77[1]);
  if (v79 != v81)
    free(v79);
  if (v82 != v84)
    free(v82);
  v14 = 1;
  v48 = v86;
  if (v86 != v88)
LABEL_45:
    free(v48);
LABEL_46:
  if (v89 != v91)
    free(v89);
  if (v92 != (_QWORD *)v94)
    free(v92);
  if (v95 != (unsigned int *)v97)
    free(v95);
  return v14;
}

void `anonymous namespace'::WhileRemoveDuplicatedResults::~WhileRemoveDuplicatedResults(_anonymous_namespace_::WhileRemoveDuplicatedResults *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::WhileRemoveDuplicatedResults::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint **v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  const void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  mlir::GenericProgramPoint *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  mlir::GenericProgramPoint *v45;
  uint64_t v46;
  char *v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int32 v51;
  uint64_t v52;
  int v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  mlir::GenericProgramPoint *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v65;
  mlir::OpBuilder *v66;
  mlir::GenericProgramPoint *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[64];
  unint64_t *v78;
  unint64_t v79[2];
  unint64_t v80[2];
  unint64_t v81[2];
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[48];
  __n128 v88;
  _BYTE v89[48];
  __n128 v90;
  void *v91;
  uint64_t v92;
  _BYTE v93[48];
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v5 = a2 + 64;
  v6 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v6)
    v7 = (mlir::GenericProgramPoint **)(v6 - 8);
  else
    v7 = 0;
  mlir::Block::getTerminator(v7);
  v9 = (mlir::GenericProgramPoint *)v8;
  if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
  {
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(unsigned int *)(v8 + 68) - 1;
  }
  else
  {
    v10 = 0;
    v11 = -1;
  }
  mlir::ValueRange::ValueRange(&v101, v10 + 32, v11);
  v73 = v77;
  v74 = v77;
  v75 = 8;
  v76 = 0;
  v12 = v101;
  v13 = (char *)v102;
  v94 = v101;
  v95 = 0;
  if (v102)
  {
    v14 = 0;
    while (1)
    {
      v16 = (const void *)mlir::ValueRange::dereference_iterator(&v94, (uint64_t)v14);
      if (v74 != v73)
        goto LABEL_8;
      v17 = HIDWORD(v75);
      if (HIDWORD(v75))
      {
        v18 = 0;
        v19 = 8 * HIDWORD(v75);
        v20 = v74;
        while ((const void *)*v20 != v16)
        {
          if (*v20 == -2)
            v18 = v20;
          ++v20;
          v19 -= 8;
          if (!v19)
          {
            if (!v18)
              goto LABEL_22;
            *v18 = v16;
            --v76;
            goto LABEL_9;
          }
        }
        goto LABEL_9;
      }
LABEL_22:
      if (HIDWORD(v75) < v75)
      {
        ++HIDWORD(v75);
        *(_QWORD *)&v74[8 * v17] = v16;
      }
      else
      {
LABEL_8:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v73, v16);
      }
LABEL_9:
      v14 = (char *)++v95;
      if (v94 == v12 && v14 == v13)
      {
        v21 = v102;
        if (v102 == HIDWORD(v75) - v76)
          break;
        v94 = 1;
        v95 = -4096;
        v97 = -4096;
        v99 = -4096;
        v100 = -4096;
        v91 = v93;
        v92 = 0x600000000;
        if ((_DWORD)v102
          && (v25 = (4 * (int)v102 / 3u + 1) | ((unint64_t)(4 * (int)v102 / 3u + 1) >> 1),
              v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4),
              v27 = ((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8),
              v27 >= 4))
        {
          llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v94, v27 + 1);
          v21 = v102;
          if (v102 <= HIDWORD(v92))
          {
LABEL_38:
            v28 = v101;
            v88 = (__n128)v101;
            if (v21)
            {
              v29 = 0;
              do
              {
                v90.n128_u64[0] = mlir::ValueRange::dereference_iterator(&v88, v29);
                v85 = 0;
                if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)&v94, v90.n128_u64, &v85) & 1) == 0)
                {
                  v85 = (void *)v90.n128_u64[0];
                  LODWORD(v86) = v94 >> 1;
                  v82 = 0;
                  if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)&v94, (unint64_t *)&v85, &v82) & 1) == 0)
                  {
                    v32 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(&v94, (uint64_t)&v85, (unint64_t *)&v85, v82);
                    *v32 = v85;
                    *((_DWORD *)v32 + 2) = v86;
                  }
                  v30 = v92;
                  if (v92 >= HIDWORD(v92))
                  {
                    v33 = v90.n128_u64[0];
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v92 + 1, 8);
                    *((_QWORD *)v91 + v92) = v33;
                    v30 = v92;
                  }
                  else
                  {
                    *((_QWORD *)v91 + v92) = v90.n128_u64[0];
                  }
                  LODWORD(v92) = v30 + 1;
                }
                v29 = ++v88.n128_u64[1];
              }
              while (v88.n128_u64[0] != v28 || v29 != v21);
            }
            mlir::ValueRange::ValueRange(v90.n128_u64, (uint64_t)v91, v92);
            v34 = *(_QWORD *)(a2 + 24);
            mlir::ValueRange::getTypes(&v90, &v88);
            v69 = a3;
            v70 = a2;
            v67 = v9;
            v68 = v5;
            if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
            {
              v35 = *(unsigned int *)(a2 + 68);
              v36 = *(void **)(a2 + 72);
            }
            else
            {
              v36 = 0;
              v35 = 0;
            }
            v85 = v36;
            v86 = v35;
            v82 = 0;
            v66 = (mlir::OpBuilder *)(a3 + 1);
            v37 = mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ValueRange>,mlir::OperandRange,decltype(nullptr),decltype(nullptr)>((mlir::OpBuilder *)(a3 + 1), v34, v88.n128_u64, (uint64_t)&v85);
            v38 = (((unint64_t)v37
                  + 16 * (((unint64_t)*((unsigned int *)v37 + 11) >> 23) & 1)
                  + (((unint64_t)*((unsigned int *)v37 + 11) >> 21) & 0x7F8)
                  + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)v37 + 10);
            v39 = *(_QWORD *)(v38 + 8);
            if (v39)
              v40 = v39 - 8;
            else
              v40 = 0;
            v65 = v40;
            v41 = *(_QWORD *)(v38 + 32);
            if (v41)
              v42 = v41 - 8;
            else
              v42 = 0;
            v88.n128_u64[0] = (unint64_t)v89;
            v88.n128_u64[1] = 0x600000000;
            v84 = 0;
            v85 = v87;
            v86 = 0x600000000;
            v43 = v101;
            v44 = v102;
            v82 = 0;
            v83 = v101;
            if (v102)
            {
              v45 = v37;
              v46 = 0;
              v47 = (char *)v37 - 96;
              do
              {
                v72 = mlir::ValueRange::dereference_iterator(&v83, v46);
                v78 = 0;
                if ((llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)&v94, (unint64_t *)&v72, &v78) & 1) != 0)
                {
                  v48 = v78;
                }
                else
                {
                  v48 = (unint64_t *)(v95 + 16 * v96);
                  if ((v94 & 1) != 0)
                    v48 = &v101;
                }
                v49 = *((unsigned int *)v48 + 2);
                v50 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v49);
                v51 = v88.n128_u32[2];
                if (v88.n128_u32[2] >= v88.n128_u32[3])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v89, v88.n128_u32[2] + 1, 8);
                  *(_QWORD *)(v88.n128_u64[0] + 8 * v88.n128_u32[2]) = v50;
                  v51 = v88.n128_u32[2];
                }
                else
                {
                  *(_QWORD *)(v88.n128_u64[0] + 8 * v88.n128_u32[2]) = v50;
                }
                v88.n128_u32[2] = v51 + 1;
                if (v49 <= 5)
                  v52 = (uint64_t)v45 - 16 * v49 - 16;
                else
                  v52 = (uint64_t)&v47[-24 * (v49 - 5)];
                v53 = v86;
                if (v86 >= HIDWORD(v86))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
                  *((_QWORD *)v85 + v86) = v52;
                  v53 = v86;
                }
                else
                {
                  *((_QWORD *)v85 + v86) = v52;
                }
                LODWORD(v86) = v53 + 1;
                v46 = v84 + 1;
                v82 = (_QWORD *)((char *)v82 + 1);
                ++v84;
              }
              while (v83 != v43 || v46 != v44);
            }
            v54 = v69 + 3;
            v71 = *(_OWORD *)(v69 + 3);
            v55 = *((_QWORD *)v67 + 2);
            mlir::GenericProgramPoint::~GenericProgramPoint(v67);
            v69[3] = v55;
            v69[4] = v56;
            v82 = *(_QWORD **)(*((_QWORD *)v67 + 9) + 24);
            v57 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::ValueRange &>(v66, *((_QWORD *)v67 + 3), (uint64_t *)&v82, (uint64_t *)&v90);
            (*(void (**)(_QWORD *, mlir::GenericProgramPoint *, mlir::GenericProgramPoint *))(*v69 + 32))(v69, v67, v57);
            v58 = ((v68
                  + 16 * (((unint64_t)*(unsigned int *)(v70 + 44) >> 23) & 1)
                  + (((unint64_t)*(unsigned int *)(v70 + 44) >> 21) & 0x7F8)
                  + 7) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v70 + 40);
            v59 = *(_QWORD *)(v58 + 8);
            if (v59)
              v60 = v59 - 8;
            else
              v60 = 0;
            v61 = *(_QWORD *)(v58 + 32);
            if (v61)
              v62 = v61 - 8;
            else
              v62 = 0;
            mlir::ValueRange::ValueRange(v81, *(_QWORD *)(v65 + 48), (uint64_t)(*(_QWORD *)(v65 + 56) - *(_QWORD *)(v65 + 48)) >> 3);
            mlir::RewriterBase::mergeBlocks((uint64_t)v69, v60, v65, v81[0], v81[1]);
            mlir::ValueRange::ValueRange(v80, v88.n128_i64[0], v88.n128_u32[2]);
            mlir::RewriterBase::mergeBlocks((uint64_t)v69, v62, v42, v80[0], v80[1]);
            mlir::ValueRange::ValueRange(v79, (uint64_t)v85, v86);
            (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*v69 + 24))(v69, v70, v79[0], v79[1]);
            if ((_QWORD)v71)
            {
              *v54 = v71;
              v63 = v85;
              if (v85 != v87)
                goto LABEL_85;
            }
            else
            {
              *(_QWORD *)v54 = 0;
              v69[4] = 0;
              v63 = v85;
              if (v85 != v87)
LABEL_85:
                free(v63);
            }
            if ((_BYTE *)v88.n128_u64[0] != v89)
              free((void *)v88.n128_u64[0]);
            if (v91 != v93)
              free(v91);
            if ((v94 & 1) == 0)
              llvm::deallocate_buffer((llvm *)v95, (void *)(16 * v96));
            v23 = 1;
            v24 = v74;
            if (v74 != v73)
LABEL_93:
              free(v24);
            return v23;
          }
        }
        else if (v102 <= 6)
        {
          goto LABEL_38;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v21, 8);
        v21 = v102;
        goto LABEL_38;
      }
    }
  }
  v94 = (unint64_t)"No results to remove";
  v98 = 259;
  v91 = &v94;
  v22 = a3[2];
  if (v22 && mlir::RewriterBase::Listener::classof(a3[2]))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v22 + 64))(v22, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v91);
    v24 = v74;
    if (v74 != v73)
      goto LABEL_93;
  }
  else
  {
    v23 = 0;
    v24 = v74;
    if (v74 != v73)
      goto LABEL_93;
  }
  return v23;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ValueRange>,mlir::OperandRange,decltype(nullptr),decltype(nullptr)>(mlir::OpBuilder *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v29 = 1283;
    v27 = "scf.while";
    v28 = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+((uint64_t *)&v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v9);
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[3];
  v25 = (const char *)v11;
  v26 = v12;
  if (v12)
  {
    v11 = mlir::ValueRange::offset_base(&v25, v12);
    v12 = v26;
  }
  mlir::TypeRange::TypeRange(v23, v11, v13 - v12);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], 0, v14, 0, v18);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  _QWORD *v7;
  uint64_t v8;
  llvm *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *buffer;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t *v35;
  llvm *v36;
  _QWORD *v37;
  unint64_t *v38;
  _QWORD *v39;
  int v40;
  _QWORD v41[7];

  v2 = result;
  v41[6] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v7 = (_QWORD *)(result + 8);
    v6 = *(llvm **)(result + 8);
    v8 = *(unsigned int *)(result + 16);
    if (a2 > 4)
    {
      v25 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v25;
      v27 = *(_DWORD *)v2;
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v27 & 1) != 0)
      {
        v10 = (_QWORD *)(v2 + 72);
        v11 = 48;
      }
      else
      {
        v10 = &buffer[2 * v25];
        v7 = buffer;
        v11 = 16 * v25 - 16;
        if (v11 < 0x10)
        {
          v29 = buffer;
          goto LABEL_41;
        }
      }
    }
    else
    {
      v9 = (llvm *)((char *)v6 + 16 * v8);
      *(_QWORD *)result = 1;
      v10 = (_QWORD *)(result + 72);
      v11 = 48;
    }
    v28 = (v11 >> 4) + 1;
    v29 = &v7[2 * (v28 & 0x1FFFFFFFFFFFFFFELL)];
    v30 = v7 + 2;
    v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 2) = -4096;
      *v30 = -4096;
      v30 += 4;
      v31 -= 2;
    }
    while (v31);
    if (v28 == (v28 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_42:
      if ((_DWORD)v8)
      {
        v36 = v6;
        do
        {
          if ((*(_QWORD *)v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v39 = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)v36, &v39);
            v37 = v39;
            *v39 = *(_QWORD *)v36;
            *((_DWORD *)v37 + 2) = *((_DWORD *)v36 + 2);
            *(_DWORD *)v2 += 2;
          }
          v36 = (llvm *)((char *)v36 + 16);
        }
        while (v36 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
    {
LABEL_41:
      *v29 = -4096;
      v29 += 2;
    }
    while (v29 != v10);
    goto LABEL_42;
  }
  v12 = result + 8;
  v13 = (unint64_t *)&v39;
  if ((*(_QWORD *)(result + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v39 = *(_QWORD **)(result + 8);
    v40 = *(_DWORD *)(result + 16);
    v13 = v41;
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v15 = *(_QWORD *)(result + 40);
      if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_28;
    }
  }
  *v13 = v14;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 32);
  v13 += 2;
  v15 = *(_QWORD *)(result + 40);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v16 = *(_QWORD *)(result + 56);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  *v13 = v15;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 48);
  v13 += 2;
  v16 = *(_QWORD *)(result + 56);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v17 = *(_DWORD *)result;
    if (a2 < 5)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  *v13 = v16;
  *((_DWORD *)v13 + 2) = *(_DWORD *)(result + 64);
  v13 += 2;
  v17 = *(_DWORD *)result;
  if (a2 < 5)
  {
LABEL_13:
    *(_QWORD *)result = v17 & 1;
    if ((v17 & 1) == 0)
      goto LABEL_14;
LABEL_31:
    v19 = (_QWORD *)(v2 + 72);
    v20 = 48;
    goto LABEL_16;
  }
LABEL_30:
  *(_DWORD *)result = v17 & 0xFFFFFFFE;
  v32 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v32;
  v33 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v33 & 1) != 0)
    goto LABEL_31;
LABEL_14:
  v18 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v18)
    goto LABEL_34;
  v12 = *(_QWORD *)(v2 + 8);
  v19 = (_QWORD *)(v12 + 16 * v18);
  v20 = (unint64_t)v19 - v12 - 16;
  if (v20 < 0x10)
  {
    v22 = *(_QWORD **)(v2 + 8);
    do
    {
LABEL_33:
      *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v19);
    goto LABEL_34;
  }
LABEL_16:
  v21 = (v20 >> 4) + 1;
  v22 = (_QWORD *)(v12 + 16 * (v21 & 0x1FFFFFFFFFFFFFFELL));
  v23 = (_QWORD *)(v12 + 16);
  v24 = v21 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 2) = -4096;
    *v23 = -4096;
    v23 += 4;
    v24 -= 2;
  }
  while (v24);
  if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_33;
LABEL_34:
  if (&v39 != (_QWORD **)v13)
  {
    v34 = (unint64_t *)&v39;
    do
    {
      if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v38 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, v34, &v38);
        v35 = v38;
        *v38 = *v34;
        *((_DWORD *)v35 + 2) = *((_DWORD *)v34 + 2);
        *(_DWORD *)v2 += 2;
      }
      v34 += 2;
    }
    while (v34 != v13);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v24 = a3;
    v22 = a2;
    v25 = v3;
    v23 = v4;
    v26 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v25;
    v5 = v26;
    v4 = v23;
    a2 = v22;
    a3 = v24;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v25;
      v5 = v26;
      v4 = v23;
      a2 = v22;
      a3 = v24;
    }
  }
  v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v4 - 1;
  v12 = v10 & (v4 - 1);
  v13 = (_QWORD *)(v3 + 16 * v12);
  v14 = *v13;
  if (*a2 == *v13)
  {
    result = 1;
LABEL_8:
    *a3 = v13;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (_QWORD *)(v3 + 16 * (v19 & v11));
      v14 = *v13;
      if (*a2 == *v13)
        goto LABEL_8;
    }
    result = 0;
    if (v16)
      v13 = v16;
    *a3 = v13;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,unsigned int,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -4096)
      return a4;
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
    goto LABEL_10;
  *a1 += 2;
  if (*a4 != -4096)
LABEL_7:
    --a1[1];
  return a4;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::detail::TypedValue<mlir::IntegerType>,mlir::ValueRange &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"scf.condition";
    v20[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v9);
  v11 = *a3;
  v13 = *a4;
  v12 = a4[1];
  v20[0] = v11;
  mlir::OperationState::addOperands((uint64_t)v22, (uint64_t)v20, 1);
  mlir::OperationState::addOperands((uint64_t)v22, v13, v12);
  v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void `anonymous namespace'::WhileRemoveUnusedArgs::~WhileRemoveUnusedArgs(_anonymous_namespace_::WhileRemoveUnusedArgs *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t `anonymous namespace'::WhileRemoveUnusedArgs::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  mlir::GenericProgramPoint **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD **v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  mlir::GenericProgramPoint *v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  mlir::GenericProgramPoint *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[4];
  uint64_t v94[2];
  unint64_t v95[2];
  unint64_t v96[2];
  unint64_t v97[2];
  void *v98;
  uint64_t v99;
  _WORD v100[24];
  int v101;
  _QWORD *v102;
  uint64_t v103;
  _BYTE v104[48];
  void **v105;
  uint64_t v106;
  _QWORD v107[8];

  v3 = a3;
  v4 = a2;
  v107[6] = *MEMORY[0x1E0C80C00];
  v5 = a2 + 64;
  v6 = *(unsigned int *)(a2 + 40);
  v7 = (a2
      + 64
      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 32 * v6 + 8);
  v9 = v8 - 8;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD ***)(v9 + 48);
  v11 = *(_QWORD *)(v9 + 56) - (_QWORD)v10;
  if (!v11)
  {
LABEL_7:
    v98 = "No args to remove";
    v100[8] = 259;
    v105 = &v98;
    v13 = a3[2];
    if (!v13)
      return 0;
    result = mlir::RewriterBase::Listener::classof(a3[2]);
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v13 + 64))(v13, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::scf::WhileOp &>(mlir::scf::WhileOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v105);
    return result;
  }
  v12 = 8 * (v11 >> 3);
  while (**v10)
  {
    ++v10;
    v12 -= 8;
    if (!v12)
      goto LABEL_7;
  }
  v15 = *(_QWORD *)(v7 + 32 * v6 + 32);
  if (v15)
    v16 = (mlir::GenericProgramPoint **)(v15 - 8);
  else
    v16 = 0;
  mlir::Block::getTerminator(v16);
  v18 = v17;
  v105 = (void **)v107;
  v106 = 0x600000000;
  v102 = v104;
  v103 = 0x600000000;
  v101 = 0;
  v19 = *(unsigned int *)(v4 + 40);
  v20 = v5
      + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1)
      + (((unint64_t)*(unsigned int *)(v4 + 44) >> 21) & 0x7F8);
  v98 = v100;
  v99 = 0x600000000;
  v21 = *(_QWORD *)(((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v19 + 8);
  if (v21)
    v22 = v21 - 8;
  else
    v22 = 0;
  v24 = *(_QWORD *)(v22 + 48);
  v23 = *(_QWORD *)(v22 + 56);
  v25 = v23 - v24;
  v26 = (v23 - v24) >> 3;
  if ((unint64_t)(v23 - v24) < 0x31)
  {
    if (v26 <= 6)
      goto LABEL_22;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, v107, (v23 - v24) >> 3, 8);
  if (v26 > HIDWORD(v103))
LABEL_21:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v26, 8);
LABEL_22:
  v27 = ((v25 >> 3) + 63) >> 6;
  if (HIDWORD(v99) < v27)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v100, v27, 8);
  v28 = *(unsigned int *)(v4 + 40);
  v29 = *(unsigned int *)(v4 + 44);
  v30 = (v29 >> 23) & 1;
  v31 = (v29 >> 21) & 0x7F8;
  v32 = *(_QWORD *)(((v5 + 16 * v30 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v28 + 8);
  if (v32)
    v33 = v32 - 8;
  else
    v33 = 0;
  if ((*(_BYTE *)(v18 + 46) & 0x80) != 0)
  {
    v34 = *(_QWORD *)(v18 + 72);
    v35 = *(unsigned int *)(v18 + 68);
    v90 = (mlir::GenericProgramPoint *)v18;
    if ((v29 & 0x800000) == 0)
      goto LABEL_66;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v90 = (mlir::GenericProgramPoint *)v18;
    if ((v29 & 0x800000) == 0)
      goto LABEL_66;
  }
  v37 = *(_QWORD ***)(v33 + 48);
  v36 = *(_QWORD ***)(v33 + 56);
  v38 = *(unsigned int *)(v4 + 68);
  v39 = v36 == v37 || v35 == 0;
  if (!v39 && (_DWORD)v38 != 0)
  {
    v85 = v5;
    v86 = v3;
    v41 = 0;
    v87 = v4;
    v42 = v34 + 24;
    v43 = *(_QWORD *)(v4 + 72) + 24;
    v44 = 32 * v35 - 32;
    v45 = 32 * v38 - 32;
    v46 = 8 * (v36 - v37) - 8;
    v91 = v45;
    while (1)
    {
      if (!**v37)
      {
        llvm::BitVector::push_back((llvm::BitVector *)&v98, 1);
        goto LABEL_56;
      }
      v47 = *(void **)(v42 + v41);
      v48 = *(_QWORD *)(v43 + v41);
      v49 = v101;
      v50 = v99;
      v51 = v101 + 1;
      if ((v101 + 1) <= (_DWORD)v99 << 6)
      {
        ++v101;
        goto LABEL_52;
      }
      v52 = v44;
      v53 = v43;
      v54 = v42;
      if ((v101 & 0x3F) != 0)
        *((_QWORD *)v98 + v99 - 1) &= ~(-1 << (v101 & 0x3F));
      v101 = v51;
      v55 = (v49 + 64) >> 6;
      if ((_DWORD)v50 != (_DWORD)v55)
        break;
LABEL_48:
      v59 = v51 & 0x3F;
      v42 = v54;
      v43 = v53;
      v44 = v52;
      v45 = v91;
      if (v59)
        *((_QWORD *)v98 + v50 - 1) &= ~(-1 << v59);
LABEL_52:
      v60 = v106;
      if (v106 >= HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, v107, v106 + 1, 8);
        v105[v106] = v47;
        LODWORD(v106) = v106 + 1;
        v61 = v103;
        if (v103 >= HIDWORD(v103))
        {
LABEL_62:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, v104, v61 + 1, 8);
          v102[v103] = v48;
          v62 = v103 + 1;
          goto LABEL_55;
        }
      }
      else
      {
        v105[v106] = v47;
        LODWORD(v106) = v60 + 1;
        v61 = v103;
        if (v103 >= HIDWORD(v103))
          goto LABEL_62;
      }
      v102[v61] = v48;
      v62 = v61 + 1;
LABEL_55:
      LODWORD(v103) = v62;
LABEL_56:
      if (v46)
      {
        if (v44 != v41)
        {
          ++v37;
          v46 -= 8;
          v39 = v45 == v41;
          v41 += 32;
          if (!v39)
            continue;
        }
      }
      v3 = v86;
      v4 = v87;
      v28 = *(unsigned int *)(v87 + 40);
      v63 = *(unsigned int *)(v87 + 44);
      v30 = (v63 >> 23) & 1;
      v31 = (v63 >> 21) & 0x7F8;
      v5 = v85;
      goto LABEL_66;
    }
    if (v50 > v55)
    {
LABEL_47:
      LODWORD(v99) = v55;
      LODWORD(v50) = v55;
      goto LABEL_48;
    }
    v56 = v50;
    v57 = v50;
    if (HIDWORD(v99) < v55)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v100, v55, 8);
      v56 = v99;
      v57 = v99;
      v58 = v55 - v50;
      if (v55 == v50)
        goto LABEL_46;
    }
    else
    {
      v58 = v55 - v50;
      if (v55 == v50)
      {
LABEL_46:
        LODWORD(v55) = v55 - v50 + v57;
        LOBYTE(v51) = v101;
        goto LABEL_47;
      }
    }
    v88 = v57;
    bzero((char *)v98 + 8 * v56, 8 * v58);
    v57 = v88;
    goto LABEL_46;
  }
LABEL_66:
  v64 = ((v5 + 16 * v30 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v28;
  v65 = *(_QWORD *)(v64 + 8);
  if (v65)
    v66 = v65 - 8;
  else
    v66 = 0;
  v67 = *(_QWORD *)(v64 + 32);
  if (v67)
    v68 = v67 - 8;
  else
    v68 = 0;
  v92 = v68;
  mlir::Block::eraseArguments(v66, (uint64_t)&v98);
  v69 = *(_QWORD *)(v4 + 24);
  v70 = *(unsigned int *)(v4 + 36);
  v71 = v4 - 16;
  if (!(_DWORD)v70)
    v71 = 0;
  v94[0] = v71;
  v94[1] = v70;
  mlir::OperandRange::getTypes(v94, v93);
  v94[0] = 0;
  v72 = (unsigned int *)mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &,decltype(nullptr),decltype(nullptr)>((mlir::OpBuilder *)(v3 + 1), v69, v93, (uint64_t)&v102);
  v73 = (((unint64_t)&v72[4 * (((unint64_t)v72[11] >> 23) & 1) + 17]
        + (((unint64_t)v72[11] >> 21) & 0x7F8)
        + 3) & 0xFFFFFFFFFFFFFFF8)
      + 32 * v72[10];
  v74 = *(_QWORD *)(v73 + 8);
  if (v74)
    v75 = v74 - 8;
  else
    v75 = 0;
  v76 = *(_QWORD *)(v73 + 32);
  if (v76)
    v77 = v76 - 8;
  else
    v77 = 0;
  v78 = v3 + 3;
  v89 = *(_OWORD *)(v3 + 3);
  v79 = *((_QWORD *)v90 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v90);
  v3[3] = v79;
  v3[4] = v80;
  v81 = mlir::OpBuilder::create<mlir::scf::YieldOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)(v3 + 1), *((_QWORD *)v90 + 3), (uint64_t)&v105);
  (*(void (**)(_QWORD *, mlir::GenericProgramPoint *, mlir::GenericProgramPoint *))(*v3 + 32))(v3, v90, v81);
  mlir::ValueRange::ValueRange(v97, *(_QWORD *)(v75 + 48), (uint64_t)(*(_QWORD *)(v75 + 56) - *(_QWORD *)(v75 + 48)) >> 3);
  mlir::RewriterBase::mergeBlocks((uint64_t)v3, v66, v75, v97[0], v97[1]);
  mlir::ValueRange::ValueRange(v96, *(_QWORD *)(v77 + 48), (uint64_t)(*(_QWORD *)(v77 + 56) - *(_QWORD *)(v77 + 48)) >> 3);
  mlir::RewriterBase::mergeBlocks((uint64_t)v3, v92, v77, v96[0], v96[1]);
  v82 = v72[9];
  if ((_DWORD)v82)
    v83 = (uint64_t)(v72 - 4);
  else
    v83 = 0;
  mlir::ValueRange::ValueRange(v95, v83, v82);
  (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*v3 + 24))(v3, v4, v95[0], v95[1]);
  if (!(_QWORD)v89)
  {
    *v78 = 0;
    v3[4] = 0;
    v84 = v98;
    if (v98 == v100)
      goto LABEL_86;
    goto LABEL_85;
  }
  *(_OWORD *)v78 = v89;
  v84 = v98;
  if (v98 != v100)
LABEL_85:
    free(v84);
LABEL_86:
  if (v102 != (_QWORD *)v104)
    free(v102);
  if (v105 != v107)
    free(v105);
  return 1;
}

void llvm::BitVector::push_back(llvm::BitVector *this, int a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v4 = *((_DWORD *)this + 16);
  v5 = v4 + 1;
  v6 = *((unsigned int *)this + 2);
  if (v4 + 1 > (_DWORD)v6 << 6)
  {
    if ((v4 & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)this + 8 * v6 - 8) &= ~(-1 << (v4 & 0x3F));
    *((_DWORD *)this + 16) = v5;
    v7 = (v4 + 64) >> 6;
    if ((_DWORD)v6 == (_DWORD)v7)
    {
LABEL_11:
      v11 = v5 & 0x3F;
      if (v11)
        *(_QWORD *)(*(_QWORD *)this + 8 * v6 - 8) &= ~(-1 << v11);
      if (a2)
        goto LABEL_14;
      return;
    }
    if (v6 > v7)
    {
LABEL_10:
      *((_DWORD *)this + 2) = v7;
      LODWORD(v6) = v7;
      goto LABEL_11;
    }
    v8 = v6;
    v9 = v6;
    if (*((_DWORD *)this + 3) < v7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, (v4 + 64) >> 6, 8);
      v8 = *((unsigned int *)this + 2);
      v9 = *((_DWORD *)this + 2);
      v10 = v7 - v6;
      if (v7 == v6)
        goto LABEL_9;
    }
    else
    {
      v10 = v7 - v6;
      if (v7 == v6)
      {
LABEL_9:
        LODWORD(v7) = v9 + v7 - v6;
        v5 = *((_DWORD *)this + 16);
        goto LABEL_10;
      }
    }
    bzero((void *)(*(_QWORD *)this + 8 * v8), 8 * v10);
    goto LABEL_9;
  }
  *((_DWORD *)this + 16) = v5;
  if (a2)
LABEL_14:
    *(_QWORD *)(*(_QWORD *)this + 8 * (v4 >> 6)) |= 1 << v4;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,6u> &,decltype(nullptr),decltype(nullptr)>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t NextResultAtOffset;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"scf.while";
    v25[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v9);
  NextResultAtOffset = *a3;
  v12 = a3[1];
  v13 = a3[3];
  if (v12)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v12);
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v13 - v12);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], 0, v14, 0, v18);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v16;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::RegionRange,llvm::PointerUnion<mlir::Region *,std::unique_ptr<mlir::Region> const*,mlir::Region **>,mlir::Region *,mlir::Region *,mlir::Region *>::iterator,std::back_insert_iterator<llvm::SmallVectorImpl<mlir::RegionSuccessor>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double result;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  if (a1 != a3 || a2 != a4)
  {
    while (1)
    {
      v19 = mlir::RegionRange::dereference_iterator(&v21, a2);
      mlir::ValueRange::ValueRange(&v20, 0, 0);
      v11 = *(unsigned int *)(a5 + 8);
      v12 = *(_QWORD *)a5;
      if (v11 < *(_DWORD *)(a5 + 12))
        goto LABEL_5;
      v16 = v11 + 1;
      v17 = v12 + 24 * v11 > (unint64_t)&v19;
      if (v12 > (unint64_t)&v19 || !v17)
        break;
      v18 = (char *)&v19 - v12;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16, 24);
      v12 = *(_QWORD *)a5;
      v13 = (unint64_t *)&v18[*(_QWORD *)a5];
LABEL_6:
      v14 = v12 + 24 * *(unsigned int *)(a5 + 8);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(a5 + 8);
      a2 = ++*((_QWORD *)&v21 + 1);
      if ((_QWORD)v21 == a3 && a2 == a4)
        goto LABEL_3;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16, 24);
    v12 = *(_QWORD *)a5;
LABEL_5:
    v13 = &v19;
    goto LABEL_6;
  }
LABEL_3:
  result = *(double *)&v21;
  *(_OWORD *)a6 = v21;
  *(_QWORD *)(a6 + 16) = a5;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ForallOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::IndexSwitchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::scf::IndexSwitchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::scf::YieldOp>::Impl<mlir::scf::IndexSwitchOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"scf.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::scf::detail::ParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t mlir::isOpTriviallyDead(void ***this, mlir::Operation *a2)
{
  uint64_t v3;
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *NextResultAtOffset;

  v3 = *((unsigned int *)this + 9);
  v4 = this - 2;
  if ((_DWORD)v3)
    v5 = (uint64_t)v4;
  else
    v5 = 0;
  if ((_DWORD)v3)
  {
    if (*(_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v4, 0))
      return 0;
    v6 = 1;
    while (v3 != v6)
    {
      NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++);
      if (*NextResultAtOffset)
        return 0;
    }
  }
  return mlir::wouldOpBeTriviallyDead(this, a2);
}

uint64_t mlir::wouldOpBeTriviallyDead(void ***this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t InherentAttr;
  char v5;
  unsigned int v6;
  unsigned __int8 *v7;
  __guard *v8;
  unsigned __int8 *v9;
  __guard *v10;
  uint64_t v11;
  int HasRecursiveMemory;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t i;
  uint64_t v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**InterfaceFor)(_QWORD, uint64_t, void **);
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  unint64_t v47;
  const void *v48;
  const void **BucketFor;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  void *v64;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  _BYTE v70[32];
  const char *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[40];
  _QWORD *v76;
  unsigned int v77;
  unsigned int v78;
  _QWORD v79[3];

  v79[1] = *MEMORY[0x1E0C80C00];
  if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(this + 6) & 1) != 0)
    return 0;
  if (!mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this))
    goto LABEL_9;
  if (*((_BYTE *)this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8);
    if (v5)
    {
      if (!InherentAttr)
        goto LABEL_9;
      return 0;
    }
  }
  if ((mlir::DictionaryAttr::contains((uint64_t)(this + 7), "sym_name", 8uLL) & 1) != 0)
    return 0;
LABEL_9:
  v76 = v79;
  v6 = 1;
  v78 = 1;
  v79[0] = this;
  do
  {
    v9 = v7;
    v10 = v8;
    v11 = v76[v6 - 1];
    v77 = v6 - 1;
    HasRecursiveMemory = mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((_QWORD *)(v11 + 48));
    v13 = HasRecursiveMemory;
    if (HasRecursiveMemory)
    {
      v14 = *(unsigned int *)(v11 + 44);
      if ((v14 & 0x7FFFFF) != 0)
      {
        v15 = ((v11 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(v11 + 40);
        v16 = v15 + 24 * (v14 & 0x7FFFFF);
        for (i = *(_QWORD *)(v15 + 8); i != v15; i = *(_QWORD *)(i + 8))
        {
LABEL_17:
          v18 = i - 8;
          if (!i)
            v18 = 0;
          v19 = (mlir::GenericProgramPoint *)(v18 + 32);
          v20 = *(mlir::GenericProgramPoint **)(v18 + 40);
          if (v20 != (mlir::GenericProgramPoint *)(v18 + 32))
          {
            do
            {
              mlir::GenericProgramPoint::~GenericProgramPoint(v20);
              v22 = v21;
              v23 = v77;
              if (v77 >= (unint64_t)v78)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v77 + 1, 8);
                v23 = v77;
              }
              v76[v23] = v22;
              ++v77;
              v20 = (mlir::GenericProgramPoint *)*((_QWORD *)v20 + 1);
            }
            while (v20 != v19);
          }
        }
        while (1)
        {
          v15 += 24;
          if (v15 == v16)
            break;
          i = *(_QWORD *)(v15 + 8);
          if (i != v15)
            goto LABEL_17;
        }
      }
    }
    if (!mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v11))
    {
      v8 = v10;
      v7 = v9;
      goto LABEL_10;
    }
    v8 = v10;
    if (!v11)
    {
      v7 = v9;
LABEL_10:
      if ((v13 & 1) == 0)
        goto LABEL_108;
      goto LABEL_11;
    }
    InterfaceFor = (void (**)(_QWORD, uint64_t, void **))mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v11);
    v7 = v9;
    v73 = v75;
    v74 = 0x100000000;
    (*InterfaceFor)(InterfaceFor, v11, &v73);
    v66 = v70;
    v67 = v70;
    v68 = 4;
    v69 = 0;
    if (!(_DWORD)v74)
    {
LABEL_100:
      v62 = 1;
      v63 = v67;
      if (v67 == v66)
        goto LABEL_102;
LABEL_101:
      free(v63);
      goto LABEL_102;
    }
    v25 = (char *)v73;
    v26 = (char *)v73 + 40 * v74;
    do
    {
      v27 = **(_QWORD **)v25;
      v28 = atomic_load(v9);
      if ((v28 & 1) == 0 && __cxa_guard_acquire((__guard *)v9))
      {
        v71 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Allocate]";
        v72 = 79;
        v37 = llvm::StringRef::find((uint64_t *)&v71, "DesiredTypeName = ", 0x12uLL, 0);
        if (v72 >= v37)
          v38 = v37;
        else
          v38 = v72;
        v39 = &v71[v38];
        v40 = v72 - v38;
        v41 = 18;
        if (v40 < 0x12)
          v41 = v40;
        v42 = v40 - v41;
        if (v42 >= v42 - 1)
          v43 = v42 - 1;
        else
          v43 = v42;
        mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
        __cxa_guard_release((__guard *)v9);
      }
      if (v27 == mlir::detail::TypeIDResolver<mlir::MemoryEffects::Allocate,void>::resolveTypeID(void)::id)
      {
        v29 = *((_QWORD *)v25 + 2);
        if (v29 >= 8 && (v29 & ((uint64_t)(v29 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v71 = (const char *)(v29 & ((uint64_t)(v29 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
          if (mlir::Value::getDefiningOp((mlir::Value *)&v71) == v11)
          {
            v31 = *((_QWORD *)v25 + 2);
            if (v31 <= 7)
              v32 = 0;
            else
              v32 = (const void *)(v31 & ((uint64_t)(v31 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
            if (v67 != v66)
            {
LABEL_32:
              llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v66, v32);
              goto LABEL_33;
            }
            v33 = HIDWORD(v68);
            if (HIDWORD(v68))
            {
              v34 = 0;
              v35 = 8 * HIDWORD(v68);
              v36 = v67;
              while ((const void *)*v36 != v32)
              {
                if (*v36 == -2)
                  v34 = v36;
                ++v36;
                v35 -= 8;
                if (!v35)
                {
                  if (!v34)
                    goto LABEL_53;
                  *v34 = v32;
                  --v69;
                  break;
                }
              }
            }
            else
            {
LABEL_53:
              if (HIDWORD(v68) >= v68)
                goto LABEL_32;
              ++HIDWORD(v68);
              *(_QWORD *)&v67[8 * v33] = v32;
            }
          }
        }
      }
LABEL_33:
      v25 += 40;
    }
    while (v25 != v26);
    if (!(_DWORD)v74)
      goto LABEL_100;
    v44 = (char *)v73;
    v45 = (char *)v73 + 40 * v74;
    while (2)
    {
      v47 = *((_QWORD *)v44 + 2);
      if (v47 <= 7)
        v48 = 0;
      else
        v48 = (const void *)(v47 & ((uint64_t)(v47 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
      if (v67 != v66)
      {
        BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v66, v48);
        if (*BucketFor != v48)
        {
          v50 = v68;
          if (v67 == v66)
            v50 = HIDWORD(v68);
          BucketFor = (const void **)&v67[8 * v50];
        }
        if (v67 == v66)
          v51 = HIDWORD(v68);
        else
          v51 = v68;
        if (BucketFor == (const void **)&v67[8 * v51])
          goto LABEL_82;
LABEL_69:
        v44 += 40;
        if (v44 == v45)
          goto LABEL_100;
        continue;
      }
      break;
    }
    v46 = &v67[8 * HIDWORD(v68)];
    if (HIDWORD(v68))
    {
      v54 = 0;
      while (*(const void **)&v67[v54] != v48)
      {
        v54 += 8;
        if (8 * HIDWORD(v68) == v54)
          goto LABEL_68;
      }
      v46 = &v67[v54];
    }
LABEL_68:
    if (v46 != &v67[8 * HIDWORD(v68)])
      goto LABEL_69;
LABEL_82:
    v52 = **(_QWORD **)v44;
    if ((v53 & 1) == 0
    {
      v71 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
      v72 = 75;
      v55 = llvm::StringRef::find((uint64_t *)&v71, "DesiredTypeName = ", 0x12uLL, 0);
      if (v72 >= v55)
        v56 = v55;
      else
        v56 = v72;
      v57 = &v71[v56];
      v58 = v72 - v56;
      v59 = 18;
      if (v58 < 0x12)
        v59 = v58;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      v8[274] = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
    }
    if (v52 == v8[274])
      goto LABEL_69;
    v62 = 0;
    v63 = v67;
    if (v67 != v66)
      goto LABEL_101;
LABEL_102:
    if (v73 != v75)
      free(v73);
    if ((v62 & 1) == 0)
    {
LABEL_108:
      v3 = 0;
      v64 = v76;
      if (v76 != v79)
        goto LABEL_109;
      return v3;
    }
LABEL_11:
    v6 = v77;
  }
  while (v77);
  v3 = 1;
  v64 = v76;
  if (v76 != v79)
LABEL_109:
    free(v64);
  return v3;
}

uint64_t mlir::isMemoryEffectFree(mlir *this, mlir::Operation *a2)
{
  void (**InterfaceFor)(_QWORD, mlir *, void **);
  int v4;
  uint64_t result;
  unint64_t v6;
  mlir::Region *v7;
  mlir::Region *v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  mlir *v11;
  mlir::Operation *v12;
  __int128 v13;
  mlir::GenericProgramPoint *v14;
  void *v15[2];
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this)
    && this)
  {
    v15[0] = &v16;
    v15[1] = (void *)0x400000000;
    InterfaceFor = (void (**)(_QWORD, mlir *, void **))mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    (*InterfaceFor)(InterfaceFor, this, v15);
    v4 = (int)v15[1];
    if (v15[0] != &v16)
      free(v15[0]);
    if (v4)
      return 0;
    if ((mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((_QWORD *)this + 6) & 1) == 0)
      return 1;
    goto LABEL_11;
  }
  result = mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((_QWORD *)this + 6);
  if ((_DWORD)result)
  {
LABEL_11:
    v6 = *((unsigned int *)this + 11);
    if ((v6 & 0x7FFFFF) != 0)
    {
      v7 = (mlir::Region *)((((unint64_t)this + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *((unsigned int *)this + 10));
      v8 = (mlir::Region *)((char *)v7 + 24 * (v6 & 0x7FFFFF));
      while (1)
      {
        mlir::Region::OpIterator::OpIterator(&v13, v7, 0);
        mlir::Region::OpIterator::OpIterator(&v17, v7, 1);
        v9 = v14;
        v16 = v14;
        *(_OWORD *)v15 = v13;
        v10 = v18;
        if (v14 != v18)
          break;
LABEL_16:
        v7 = (mlir::Region *)((char *)v7 + 24);
        result = 1;
        if (v7 == v8)
          return result;
      }
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v9);
        if ((mlir::isMemoryEffectFree(v11, v12) & 1) == 0)
          return 0;
        mlir::Region::OpIterator::operator++((uint64_t *)&v13);
        v9 = v14;
        if (v14 == v10)
          goto LABEL_16;
      }
    }
    return 1;
  }
  return result;
}

void mlir::getEffectsRecursively(mlir *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  int HasRecursiveMemory;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**InterfaceFor)(_QWORD, uint64_t, void **);
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[6];
  void *__src;
  uint64_t v29;
  _QWORD v30[7];

  v30[5] = *MEMORY[0x1E0C80C00];
  __src = v30;
  v29 = 0x100000000;
  v24 = v27;
  v26 = 6;
  v27[0] = this;
  v3 = 1;
  do
  {
    v4 = *((_QWORD *)v24 + v3 - 1);
    v25 = v3 - 1;
    HasRecursiveMemory = mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((_QWORD *)(v4 + 48));
    v6 = HasRecursiveMemory;
    if (HasRecursiveMemory)
    {
      v7 = *(unsigned int *)(v4 + 44);
      if ((v7 & 0x7FFFFF) != 0)
      {
        v8 = ((v4 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
           + 32 * *(unsigned int *)(v4 + 40);
        v9 = v8 + 24 * (v7 & 0x7FFFFF);
        do
        {
          for (i = *(_QWORD *)(v8 + 8); i != v8; i = *(_QWORD *)(i + 8))
          {
            v11 = i - 8;
            if (!i)
              v11 = 0;
            v12 = (mlir::GenericProgramPoint *)(v11 + 32);
            v13 = *(mlir::GenericProgramPoint **)(v11 + 40);
            if (v13 != (mlir::GenericProgramPoint *)(v11 + 32))
            {
              do
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(v13);
                v15 = v14;
                v16 = v25;
                if (v25 >= (unint64_t)v26)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v25 + 1, 8);
                  v16 = v25;
                }
                *((_QWORD *)v24 + v16) = v15;
                ++v25;
                v13 = (mlir::GenericProgramPoint *)*((_QWORD *)v13 + 1);
              }
              while (v13 != v12);
            }
          }
          v8 += 24;
        }
        while (v8 != v9);
      }
    }
    if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v4)
      && v4)
    {
      InterfaceFor = (void (**)(_QWORD, uint64_t, void **))mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v4);
      (*InterfaceFor)(InterfaceFor, v4, &__src);
    }
    else if ((v6 & 1) == 0)
    {
      v18 = 0;
      v19 = a2;
      *(_BYTE *)a2 = 0;
      goto LABEL_34;
    }
    v3 = v25;
  }
  while (v25);
  v19 = a2;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000000;
  v20 = v29;
  v18 = 1;
  if ((_DWORD)v29 && &__src != (void **)a2)
  {
    if (__src != v30)
    {
      *(_QWORD *)a2 = __src;
      v21 = HIDWORD(v29);
      *(_DWORD *)(a2 + 8) = v20;
      *(_DWORD *)(a2 + 12) = v21;
      __src = v30;
      HIDWORD(v29) = 0;
LABEL_33:
      LODWORD(v29) = 0;
      v18 = 1;
      goto LABEL_34;
    }
    if (v29 < 2)
    {
      v22 = 1;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v29, 40);
      v22 = v29;
      if (!(_DWORD)v29)
        goto LABEL_32;
    }
    memcpy(*(void **)a2, __src, 40 * v22);
LABEL_32:
    *(_DWORD *)(a2 + 8) = v20;
    goto LABEL_33;
  }
LABEL_34:
  *(_BYTE *)(v19 + 56) = v18;
  if (v24 != v27)
    free(v24);
  if (__src != v30)
    free(__src);
}

void mlir::openInputFile(const void *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  openInputFileImpl(a4, a1, a2, a3, 0);
}

void openInputFileImpl(_QWORD *a1, const void *a2, std::string::size_type a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  std::string __p;
  std::string __dst;
  std::string v27;
  std::error_code v28;
  std::string v29;
  __int16 v30;
  _QWORD v31[2];
  std::error_code v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = 261;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v29.__r_.__value_.__l.__size_ = a3;
  llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&v29, 0, 1, a5, (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    v28 = v32;
    if (!v32.__val_)
    {
      v11 = *(_QWORD *)&v32.__val_;
      *(_QWORD *)&v32.__val_ = 0;
      *a1 = v11;
      if ((v33 & 1) != 0)
        return;
      goto LABEL_32;
    }
    if (!a4)
      goto LABEL_31;
    if (!a2)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_19;
    }
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v12 = a3 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = a3;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
      p_dst = &__dst;
      if (!a3)
        goto LABEL_18;
    }
    memmove(p_dst, a2, a3);
LABEL_18:
    p_dst->__r_.__value_.__s.__data_[a3] = 0;
LABEL_19:
    v14 = std::string::insert(&__dst, 0, "cannot open input file '");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v27, "': ");
    v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::error_code::message(&__p, &v28);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
    v21 = v20->__r_.__value_.__r.__words[0];
    v31[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    v23 = v31[0];
    *(_QWORD *)a4 = v21;
    *(_QWORD *)(a4 + 8) = v23;
    *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v31 + 7);
    *(_BYTE *)(a4 + 23) = v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
LABEL_37:
        operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_38;
LABEL_31:
        *a1 = 0;
        if ((v33 & 1) != 0)
          return;
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
LABEL_38:
      operator delete(__dst.__r_.__value_.__l.__data_);
      *a1 = 0;
      if ((v33 & 1) != 0)
        return;
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  std::system_category();
  v9 = *(_QWORD *)&v32.__val_;
  *(_QWORD *)&v32.__val_ = 0;
  *a1 = v9;
  if ((v33 & 1) != 0)
    return;
LABEL_32:
  v24 = *(_QWORD *)&v32.__val_;
  *(_QWORD *)&v32.__val_ = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
}

void mlir::openOutputFile(const void *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  void *v22;
  std::string __p;
  std::string __dst;
  std::string v25;
  std::string v26;
  std::error_code v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v27.__val_ = 0;
  v27.__cat_ = std::system_category();
  v8 = operator new(0x90uLL);
  llvm::ToolOutputFile::ToolOutputFile(v8, a1, a2, &v27, 0);
  if (!v27.__val_)
  {
    *a4 = v8;
    return;
  }
  if (!a3)
    goto LABEL_27;
  if (!a1)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_15;
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v10 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v10 = a2 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = a2;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a2;
    p_dst = &__dst;
    if (!a2)
      goto LABEL_14;
  }
  memmove(p_dst, a1, a2);
LABEL_14:
  p_dst->__r_.__value_.__s.__data_[a2] = 0;
LABEL_15:
  v12 = std::string::insert(&__dst, 0, "cannot open output file '");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v25, "': ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::error_code::message(&__p, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v26, (const std::string::value_type *)p_p, size);
  v19 = v18->__r_.__value_.__r.__words[0];
  v28[0] = v18->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  v21 = v28[0];
  *(_QWORD *)a3 = v19;
  *(_QWORD *)(a3 + 8) = v21;
  *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v28 + 7);
  *(_BYTE *)(a3 + 23) = v20;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
      *a4 = 0;
      if (!v8[128])
        goto LABEL_29;
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_25:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_32:
  operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
LABEL_27:
  *a4 = 0;
  if (v8[128])
LABEL_28:
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(v8 + 32));
LABEL_29:
  llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)v8);
  operator delete(v22);
}

void mlir::detail::InterfaceMap::insert(uint64_t a1, unint64_t a2, void *a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;

  v4 = *(_QWORD **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 16 * v5;
  if ((_DWORD)v5)
  {
    do
    {
      v7 = v5 >> 1;
      v8 = &v4[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v5 = v7;
    }
    while (v5);
    if (v4 != (_QWORD *)v6 && *v4 == a2)
    {
      free(a3);
    }
    else
    {
      v11 = a2;
      v12 = a3;
      llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(a1, (uint64_t)v4, &v11);
    }
  }
  else
  {
    v11 = a2;
    v12 = a3;
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(a1, v6, &v11);
  }
}

_QWORD *llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::insert_one_impl<std::pair<mlir::TypeID,void *>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  const double *v21;
  const double *v22;
  double *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  float64x2x2_t v27;
  float64x2x2_t v28;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 16 * v6 != a2)
  {
    v7 = a2 - v5;
    v8 = (a2 - v5) >> 4;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    result = (_QWORD *)(v5 + 16 * v8);
    *(_OWORD *)(v5 + 16 * v6) = *(_OWORD *)(v5 + 16 * v6 - 16);
    v10 = *(unsigned int *)(a1 + 8);
    v11 = *(_QWORD *)a1 + 16 * v10;
    v12 = (_QWORD *)(v11 - 16);
    if ((_QWORD *)(v11 - 16) == result)
      goto LABEL_15;
    v13 = v11 - ((v7 & 0xFFFFFFFFFFFFFFF0) + v5) - 32;
    if (v13 >= 0x30)
    {
      v17 = (v13 >> 4) + 1;
      v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
      v14 = v11 - v18;
      v12 = (_QWORD *)((char *)v12 - v18);
      v19 = (double *)(v11 - 32);
      v20 = v17 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = v19 - 2;
        v27 = vld2q_f64(v21);
        v22 = v19 - 6;
        v28 = vld2q_f64(v22);
        v23 = v19 - 4;
        vst2q_f64(v19, v27);
        vst2q_f64(v23, v28);
        v19 -= 8;
        v20 -= 4;
      }
      while (v20);
      if (v17 == (v17 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_15;
    }
    else
    {
      v14 = *(_QWORD *)a1 + 16 * v10;
    }
    v24 = (_QWORD *)(v14 - 8);
    do
    {
      v25 = *(v12 - 2);
      v12 -= 2;
      *(v24 - 1) = v25;
      *v24 = v12[1];
      v24 -= 2;
    }
    while (v12 != result);
LABEL_15:
    *(_DWORD *)(a1 + 8) = v10 + 1;
    *result = *a3;
    result[1] = a3[1];
    return result;
  }
  v15 = *(_OWORD *)a3;
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v26 = *(_OWORD *)a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    v15 = v26;
    v6 = *(unsigned int *)(a1 + 8);
    v5 = *(_QWORD *)a1;
  }
  *(_OWORD *)(v5 + 16 * v6) = v15;
  v16 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v16;
  return (_QWORD *)(*(_QWORD *)a1 + 16 * v16 - 16);
}

mlir::StorageUniquer *mlir::StorageUniquer::StorageUniquer(mlir::StorageUniquer *this)
{
  _OWORD *v2;
  char *v3;

  v2 = operator new(0x108uLL);
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  *((_QWORD *)v2 + 32) = 0;
  v2[12] = 0u;
  v2[9] = 0u;
  v3 = (char *)operator new(0x78uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E0E51EB8;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *((_QWORD *)v3 + 3) = v3 + 40;
  *((_QWORD *)v3 + 4) = 0x100000000;
  MEMORY[0x186DA1428](v3 + 48);
  *((_DWORD *)v3 + 28) = 0;
  *(_QWORD *)v2 = v3 + 24;
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  MEMORY[0x186DA1428]((char *)v2 + 40);
  *((_DWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = v2 + 9;
  *((_QWORD *)v2 + 17) = 0x400000000;
  *((_QWORD *)v2 + 24) = 0;
  *((_QWORD *)v2 + 22) = v2 + 12;
  *((_QWORD *)v2 + 23) = 0;
  *((_QWORD *)v2 + 26) = 0;
  *((_QWORD *)v2 + 27) = 0;
  *((_QWORD *)v2 + 25) = 1;
  *((_DWORD *)v2 + 56) = 0;
  *((_QWORD *)v2 + 29) = 0;
  *((_QWORD *)v2 + 30) = 0;
  *((_DWORD *)v2 + 62) = 0;
  *((_BYTE *)v2 + 256) = 1;
  *(_QWORD *)this = v2;
  return this;
}

void mlir::StorageUniquer::~StorageUniquer(llvm ***this)
{
  llvm **v2;

  v2 = *this;
  *this = 0;
  if (v2)
    mlir::detail::StorageUniquerImpl::~StorageUniquerImpl(v2);
}

uint64_t mlir::StorageUniquer::getParametricStorageTypeImpl(unsigned __int8 **a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  return mlir::detail::StorageUniquerImpl::getOrCreate(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t mlir::detail::StorageUniquerImpl::getOrCreate(unsigned __int8 *a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  unsigned __int8 *v12;
  uint64_t **v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  pthread_rwlock_t **v18;
  unint64_t *v19;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ThreadSafeAllocator;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unsigned int v43;
  std::recursive_mutex *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *p_shared_weak_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  int v71;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  llvm *v75;
  int v76;
  int v77;
  int v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  unsigned int v122;
  uint64_t v123;
  __int128 v124;
  unsigned int v125;
  uint64_t (*v126)(uint64_t);
  uint64_t v127;
  __int128 v128;
  _QWORD *v129;
  __int128 v130;
  _QWORD v131[11];

  v12 = a1;
  v131[9] = *MEMORY[0x1E0C80C00];
  v123 = a2;
  v14 = *v13;
  v15 = v12[256];
  v16 = (*((_DWORD *)*v13 + 6) - 1) & a3;
  v17 = (_OWORD *)atomic_load((unint64_t *)((*v13)[2] + 8 * v16));
  if (!v17)
  {
    v17 = operator new(0x28uLL);
    *v17 = 0u;
    v17[1] = 0u;
    *((_QWORD *)v17 + 4) = 0;
    v18 = (pthread_rwlock_t **)llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)((char *)v17 + 24));
    *((_QWORD *)v17 + 4) = 0;
    v19 = (unint64_t *)(v14[2] + 8 * v16);
    do
    {
      if (__ldaxr(v19))
      {
        __clrex();
        llvm::sys::RWMutexImpl::~RWMutexImpl(v18);
        llvm::deallocate_buffer(*(llvm **)v17, (void *)(16 * *((unsigned int *)v17 + 4)));
      }
    }
    while (__stlxr((unint64_t)v17, v19));
  }
  v125 = a3;
  v126 = a4;
  v127 = a5;
  if (!v15)
  {
    LODWORD(v124) = a3;
    *((_QWORD *)&v124 + 1) = 0;
    v30 = (uint64_t)v129;
    if (!BYTE8(v130))
      return v129[1];
    ThreadSafeAllocator = mlir::detail::StorageUniquerImpl::getThreadSafeAllocator((mlir::detail::StorageUniquerImpl *)v12);
    v32 = a6(a7, ThreadSafeAllocator);
    *(_QWORD *)(v30 + 8) = v32;
    return v32;
  }
  {
    *v91 = 1;
    v91[1] = -4096;
    v91[4] = -4096;
    v91[7] = -4096;
    v91[10] = -4096;
  }
  v23 = v22;
  v24 = *v14;
  v26 = (uint64_t *)(v22 + 8);
  v25 = *(_DWORD *)v22;
  v27 = *(_DWORD *)v22 & 1;
  v120 = a7;
  if (v27)
  {
    v28 = 4;
    v29 = v22 + 8;
  }
  else
  {
    v28 = *(_DWORD *)(v22 + 16);
    if (!v28)
    {
      v35 = 0;
      v43 = 0;
      goto LABEL_26;
    }
    v29 = *(_QWORD *)(v22 + 8);
  }
  v33 = v28 - 1;
  v34 = v33 & ((v24 >> 4) ^ (v24 >> 9));
  v35 = (uint64_t *)(v29 + 24 * v34);
  v36 = *v35;
  if (*v35 == v24)
    goto LABEL_17;
  v92 = 0;
  v93 = 1;
  while (v36 != -4096)
  {
    if (v92)
      v94 = 0;
    else
      v94 = v36 == -8192;
    if (v94)
      v92 = v35;
    v95 = v34 + v93++;
    v34 = v95 & v33;
    v35 = (uint64_t *)(v29 + 24 * v34);
    v36 = *v35;
    if (*v35 == v24)
      goto LABEL_17;
  }
  if (v92)
    v35 = v92;
  if (v27)
    v43 = 4;
  else
    v43 = *(_DWORD *)(v22 + 16);
LABEL_26:
  if (4 * (v25 >> 1) + 4 >= 3 * v43)
  {
    v43 *= 2;
LABEL_114:
    if (v43 >= 5)
    {
      v98 = (v43 - 1) | ((unint64_t)(v43 - 1) >> 1);
      v99 = v98 | (v98 >> 2) | ((v98 | (v98 >> 2)) >> 4);
      v100 = ((v99 | (v99 >> 8)) >> 16) | v99 | (v99 >> 8);
      if ((v100 + 1) > 0x40)
        v43 = v100 + 1;
      else
        v43 = 64;
    }
    if (!v27)
    {
      v101 = *(uint64_t **)(v22 + 8);
      v102 = *(unsigned int *)(v22 + 16);
      if (v43 > 4)
      {
        v108 = v43;
        *(_QWORD *)(v22 + 8) = llvm::allocate_buffer(24 * v43, (std::align_val_t)8uLL);
        *(_QWORD *)(v23 + 16) = v108;
      }
      else
      {
        *(_DWORD *)v22 = v25 | 1;
      }
      llvm::deallocate_buffer((llvm *)v101, (void *)(24 * v102));
    }
    v103 = (uint64_t *)&v129;
    if ((*v26 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v104 = *(_QWORD *)(v22 + 32);
      if ((v104 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_123;
    }
    else
    {
      v129 = (_QWORD *)*v26;
      v130 = *(_OWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      v103 = v131;
      v104 = *(_QWORD *)(v22 + 32);
      if ((v104 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
LABEL_123:
        v105 = *(_QWORD *)(v22 + 56);
        if ((v105 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_124;
        goto LABEL_139;
      }
    }
    *v103 = v104;
    *(_OWORD *)(v103 + 1) = *(_OWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    v103 += 3;
    v105 = *(_QWORD *)(v22 + 56);
    if ((v105 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_124:
      v106 = *(_QWORD *)(v22 + 80);
      if ((v106 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_125;
      goto LABEL_140;
    }
LABEL_139:
    *v103 = v105;
    *(_OWORD *)(v103 + 1) = *(_OWORD *)(v22 + 64);
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)(v22 + 72) = 0;
    v103 += 3;
    v106 = *(_QWORD *)(v22 + 80);
    if ((v106 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_125:
      if (v43 < 5)
      {
LABEL_127:
        v25 = *(_DWORD *)v23;
        if ((*(_DWORD *)v23 & 1) != 0)
        {
          v109 = 4;
          v110 = v26;
        }
        else
        {
          v109 = *(_DWORD *)(v23 + 16);
          if (!v109)
          {
            v27 = 0;
            v35 = 0;
            goto LABEL_28;
          }
          v110 = *(uint64_t **)(v23 + 8);
        }
        v27 = *(_DWORD *)v23 & 1;
        v111 = v109 - 1;
        v112 = v111 & ((v24 >> 4) ^ (v24 >> 9));
        v35 = &v110[3 * v112];
        v113 = *v35;
        if (*v35 != v24)
        {
          v115 = 0;
          v116 = 1;
          while (v113 != -4096)
          {
            if (v115)
              v117 = 0;
            else
              v117 = v113 == -8192;
            if (v117)
              v115 = v35;
            v118 = v112 + v116++;
            v112 = v118 & v111;
            v35 = &v110[3 * v112];
            v113 = *v35;
            if (*v35 == v24)
              goto LABEL_28;
          }
          if (v115)
            v35 = v115;
        }
        goto LABEL_28;
      }
LABEL_126:
      *(_DWORD *)v22 &= ~1u;
      v107 = v43;
      *(_QWORD *)(v22 + 8) = llvm::allocate_buffer(24 * v43, (std::align_val_t)8uLL);
      *(_QWORD *)(v23 + 16) = v107;
      goto LABEL_127;
    }
LABEL_140:
    *v103 = v106;
    *(_OWORD *)(v103 + 1) = *(_OWORD *)(v22 + 88);
    *(_QWORD *)(v22 + 88) = 0;
    *(_QWORD *)(v22 + 96) = 0;
    v103 += 3;
    if (v43 < 5)
      goto LABEL_127;
    goto LABEL_126;
  }
  if (v43 + ~(v25 >> 1) - *(_DWORD *)(v22 + 4) <= v43 >> 3)
    goto LABEL_114;
LABEL_28:
  *(_DWORD *)v23 = (v25 & 0xFFFFFFFE | v27) + 2;
  if (*v35 != -4096)
    --*(_DWORD *)(v23 + 4);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = v24;
LABEL_17:
  v121 = a6;
  v37 = (std::__shared_weak_count *)v35[2];
  if (v37)
  {
    v38 = std::__shared_weak_count::lock(v37);
    if (v38)
    {
      v39 = v38;
      v40 = v35[1];
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (v42)
      {
        if (v40)
          goto LABEL_79;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v39);
        if (v40)
          goto LABEL_79;
      }
    }
  }
  v122 = a3;
  v44 = (std::recursive_mutex *)(*v14 + 24);
  std::recursive_mutex::lock(v44);
  v45 = *v14;
  v46 = operator new(0x18uLL);
  v46[1] = 0;
  v46[2] = 0;
  *v46 = 0;
  v129 = v46;
  v47 = *(unsigned int *)(v45 + 8);
  v48 = *(_QWORD *)v45;
  v49 = (uint64_t *)&v129;
  if (v47 >= *(_DWORD *)(v45 + 12))
  {
    v96 = v47 + 1;
    v97 = v48 + 8 * v47 > (unint64_t)&v129;
    if (v48 <= (unint64_t)&v129 && v97)
    {
      v114 = (char *)&v129 - v48;
      v48 = *(_QWORD *)v45;
      v49 = (uint64_t *)&v114[*(_QWORD *)v45];
    }
    else
    {
      v48 = *(_QWORD *)v45;
      v49 = (uint64_t *)&v129;
    }
  }
  v50 = *(unsigned int *)(v45 + 8);
  v51 = *v49;
  *v49 = 0;
  *(_QWORD *)(v48 + 8 * v50) = v51;
  *(_DWORD *)(v45 + 8) = v50 + 1;
  v52 = (uint64_t)v129;
  v129 = 0;
  if (v52)
    llvm::deallocate_buffer(*(llvm **)v52, (void *)(16 * *(unsigned int *)(v52 + 16)));
  v53 = *v14;
  v54 = (std::__shared_weak_count *)v14[1];
  v40 = *(_QWORD *)(*(_QWORD *)v53 + 8 * *(unsigned int *)(v53 + 8) - 8);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
    do
      v58 = __ldxr(p_shared_weak_owners);
    while (__stxr(v58 + 1, p_shared_weak_owners));
  }
  v59 = (std::__shared_weak_count *)v35[2];
  v35[1] = v40;
  v35[2] = (uint64_t)v54;
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (!v54)
    goto LABEL_46;
  v60 = (unint64_t *)&v54->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v62 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 <= 1u)
      goto LABEL_47;
  }
  else
  {
LABEL_46:
    v62 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 <= 1u)
    {
LABEL_47:
      v63 = v12;
      v64 = *(uint64_t **)(v23 + 8);
      v65 = *(_DWORD *)(v23 + 16);
      if (v62)
        v66 = (uint64_t *)(v23 + 104);
      else
        v66 = &v64[3 * v65];
      if (v62)
      {
        v64 = v26;
        v65 = 4;
      }
      v67 = &v64[3 * v65];
      goto LABEL_62;
    }
  }
  if ((v62 & 1) != 0)
  {
    v63 = v12;
    v67 = (uint64_t *)(v23 + 104);
  }
  else
  {
    v26 = *(uint64_t **)(v23 + 8);
    v68 = *(_DWORD *)(v23 + 16);
    v67 = &v26[3 * v68];
    v63 = v12;
    if (!v68)
    {
      v69 = 0;
      v66 = *(uint64_t **)(v23 + 8);
      goto LABEL_66;
    }
  }
  v62 &= 1u;
  v66 = v26;
  while ((*v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v66 += 3;
    if (v66 == v67)
    {
      v66 = v67;
      break;
    }
  }
LABEL_62:
  if (v62)
  {
    v70 = (uint64_t *)(v23 + 104);
    if (v66 != (uint64_t *)(v23 + 104))
      goto LABEL_70;
    goto LABEL_78;
  }
  v26 = *(uint64_t **)(v23 + 8);
  v69 = *(_DWORD *)(v23 + 16);
LABEL_66:
  v70 = &v26[3 * v69];
  if (v66 != v70)
  {
    do
    {
LABEL_70:
      v72 = v67;
      if (v66 + 3 != v67)
      {
        v72 = v66 + 3;
        while ((*v72 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v72 += 3;
          if (v72 == v67)
          {
            v72 = v67;
            break;
          }
        }
      }
      v73 = (std::__shared_weak_count *)v66[2];
      if (v73)
      {
        if (v73->__shared_owners_ != -1)
          goto LABEL_69;
        std::__shared_weak_count::__release_weak(v73);
      }
      *v66 = -8192;
      v71 = *(_DWORD *)(v23 + 4) + 1;
      *(_DWORD *)v23 -= 2;
      *(_DWORD *)(v23 + 4) = v71;
LABEL_69:
      v66 = v72;
    }
    while (v72 != v70);
  }
LABEL_78:
  std::recursive_mutex::unlock(v44);
  v12 = v63;
  a3 = v122;
LABEL_79:
  LODWORD(v129) = a3;
  *(_QWORD *)&v130 = 0;
  v74 = v124;
  v32 = *(_QWORD *)(v124 + 8);
  if (!v32)
  {
    llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)v17 + 3);
    v75 = *(llvm **)v17;
    v76 = *((_DWORD *)v17 + 4);
    if (v76)
    {
      v119 = v12;
      v77 = v76 - 1;
      v78 = 1;
      v79 = v126;
      v80 = v127;
      v81 = v125 & (v76 - 1);
      v82 = (uint64_t)v75 + 16 * v81;
      v83 = *(_QWORD *)(v82 + 8);
      if ((v83 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_84;
      while (v83 != -4096)
      {
        while (1)
        {
          v84 = v81 + v78++;
          v81 = v84 & v77;
          v82 = (uint64_t)v75 + 16 * (v84 & v77);
          v83 = *(_QWORD *)(v82 + 8);
          if ((v83 | 0x1000) == 0xFFFFFFFFFFFFF000)
            break;
LABEL_84:
          if ((v79(v80) & 1) != 0)
          {
            v87 = v120;
            v86 = v121;
            v12 = v119;
            if (v82 != *(_QWORD *)v17 + 16 * *((unsigned int *)v17 + 4))
              goto LABEL_89;
            goto LABEL_92;
          }
          if (*(_QWORD *)(v82 + 8) == -4096)
            goto LABEL_86;
        }
      }
LABEL_86:
      v85 = *((unsigned int *)v17 + 4);
      v12 = v119;
      v82 = *(_QWORD *)v17 + 16 * v85;
      v87 = v120;
      v86 = v121;
      if (v82 != *(_QWORD *)v17 + 16 * v85)
      {
LABEL_89:
        v32 = *(_QWORD *)(v82 + 8);
        *(_QWORD *)(v74 + 8) = v32;
        llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)v17 + 3);
        return v32;
      }
    }
    else
    {
      v87 = v120;
      v86 = v121;
    }
LABEL_92:
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)v17 + 3);
    llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)v17 + 3);
    LODWORD(v128) = v125;
    *((_QWORD *)&v128 + 1) = 0;
    v89 = (uint64_t)v129;
    if (BYTE8(v130))
    {
      v90 = mlir::detail::StorageUniquerImpl::getThreadSafeAllocator((mlir::detail::StorageUniquerImpl *)v12);
      v32 = v86(v87, v90);
      *(_QWORD *)(v89 + 8) = v32;
    }
    else
    {
      v32 = v129[1];
    }
    *(_QWORD *)(v74 + 8) = v32;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)v17 + 3);
  }
  return v32;
}

uint64_t *mlir::StorageUniquer::registerParametricStorageTypeImpl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;

  v7 = *a1;
  v8 = operator new(0x30uLL);
  v9 = (char *)operator new(0x78uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_1E0E51E48;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *((_QWORD *)v9 + 3) = v9 + 40;
  *((_QWORD *)v9 + 4) = 0x100000000;
  MEMORY[0x186DA1428](v9 + 48);
  *((_DWORD *)v9 + 28) = 0;
  *v8 = v9 + 24;
  v8[1] = v9;
  v10 = operator new[](0x40uLL);
  v8[2] = v10;
  v8[3] = 8;
  v8[4] = a3;
  v8[5] = a4;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v10[6] = 0;
  v10[7] = 0;
  v11 = *(_QWORD *)(v7 + 208);
  v33 = v8;
  v12 = *(_DWORD *)(v7 + 224);
  if (!v12)
    goto LABEL_23;
  v13 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = (_QWORD *)(v11 + 16 * v13);
  v15 = *v14;
  if (*v14 == a2)
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v15 == -8192;
    if (v18)
      v16 = v14;
    v19 = v13 + v17++;
    v13 = v19 & (v12 - 1);
    v14 = (_QWORD *)(v11 + 16 * v13);
    v15 = *v14;
    if (*v14 == a2)
  }
  v23 = v16 ? v16 : v14;
  v24 = *(_DWORD *)(v7 + 216);
  if (4 * v24 + 4 < 3 * v12)
  {
    if (v12 + ~v24 - *(_DWORD *)(v7 + 220) > v12 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_23:
    v12 *= 2;
  }
  v25 = *(_QWORD *)(v7 + 208);
  v26 = *(_DWORD *)(v7 + 224) - 1;
  v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  v23 = (_QWORD *)(v25 + 16 * v27);
  v28 = *v23;
  if (*v23 == a2)
  {
    v20 = a2;
    goto LABEL_15;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != -4096)
  {
    if (v29)
      v31 = 0;
    else
      v31 = v28 == -8192;
    if (v31)
      v29 = v23;
    v32 = v27 + v30++;
    v27 = v32 & v26;
    v23 = (_QWORD *)(v25 + 16 * (v32 & v26));
    v28 = *v23;
    v20 = a2;
    if (*v23 == a2)
      goto LABEL_15;
  }
  if (v29)
    v23 = v29;
LABEL_14:
  v20 = *v23;
LABEL_15:
  ++*(_DWORD *)(v7 + 216);
  if (v20 != -4096)
    --*(_DWORD *)(v7 + 220);
  *v23 = a2;
  v21 = (uint64_t)v33;
  v33 = 0;
  v23[1] = v21;
}

uint64_t *std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 24))
    {
      v3 = 0;
      do
      {
        v4 = atomic_load((unint64_t *)(*(_QWORD *)(v2 + 16) + 8 * v3));
        if (v4)
        {
          if (*(_QWORD *)(v2 + 32) && *(_DWORD *)(v4 + 8))
          {
            v5 = *(unsigned int *)(v4 + 16);
            if ((_DWORD)v5)
            {
              v6 = 16 * v5;
              v7 = *(llvm **)v4;
              while ((*((_QWORD *)v7 + 1) | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v7 = (llvm *)((char *)v7 + 16);
                v6 -= 16;
                if (!v6)
                  goto LABEL_4;
              }
            }
            else
            {
              v7 = *(llvm **)v4;
            }
            v8 = *(_QWORD *)v4 + 16 * v5;
LABEL_16:
            if (v7 != (llvm *)v8)
            {
              (*(void (**)(_QWORD, _QWORD))(v2 + 32))(*(_QWORD *)(v2 + 40), *((_QWORD *)v7 + 1));
              while (1)
              {
                v7 = (llvm *)((char *)v7 + 16);
                if (v7 == (llvm *)v8)
                  break;
                if ((*((_QWORD *)v7 + 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_16;
              }
            }
          }
LABEL_4:
          llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)(v4 + 24));
          llvm::deallocate_buffer(*(llvm **)v4, (void *)(16 * *(unsigned int *)(v4 + 16)));
        }
        ++v3;
      }
      while (v3 != *(_QWORD *)(v2 + 24));
    }
    v9 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v9)
      operator delete[](v9);
    v10 = *(std::__shared_weak_count **)(v2 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t mlir::StorageUniquer::getSingletonImpl(uint64_t *a1, uint64_t a2)
{
  return mlir::detail::StorageUniquerImpl::getSingleton(*a1, a2);
}

uint64_t mlir::detail::StorageUniquerImpl::getSingleton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v6 = *(_QWORD *)(a1 + 232);
  v4 = a1 + 232;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (!v7)
    goto LABEL_22;
  v8 = v7 - 1;
  v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    return v10[1];
  v14 = 0;
  v15 = 1;
  while (v11 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (_QWORD *)(v5 + 16 * (v17 & v8));
    v11 = *v10;
    if (*v10 == a2)
      return v10[1];
  }
  if (v14)
    v10 = v14;
  v18 = *(_DWORD *)(a1 + 240);
  if (4 * v18 + 4 < 3 * v7)
  {
    if (v7 + ~v18 - *(_DWORD *)(a1 + 244) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_22:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4, v7);
  v19 = *(_QWORD *)(a1 + 232);
  v20 = *(_DWORD *)(a1 + 248) - 1;
  v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v19 + 16 * v21);
  v22 = *v10;
  if (*v10 == a2)
  {
    v13 = a2;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != -4096)
  {
    if (v23)
      v25 = 0;
    else
      v25 = v22 == -8192;
    if (v25)
      v23 = v10;
    v26 = v21 + v24++;
    v21 = v26 & v20;
    v10 = (_QWORD *)(v19 + 16 * (v26 & v20));
    v22 = *v10;
    v13 = a2;
    if (*v10 == a2)
      goto LABEL_7;
  }
  if (v23)
    v10 = v23;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++*(_DWORD *)(a1 + 240);
  if (v13 != -4096)
    --*(_DWORD *)(a1 + 244);
  *v10 = a2;
  v10[1] = 0;
  return v10[1];
}

BOOL mlir::StorageUniquer::isParametricStorageInitialized(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int v9;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 224);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 208);
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(v3 + 16 * v5);
  if (v6 == a2)
    return 1;
  v8 = 1;
  do
  {
    result = v6 != -4096;
    if (v6 == -4096)
      break;
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    result = 1;
  }
  while (v6 != a2);
  return result;
}

_QWORD *mlir::StorageUniquer::registerSingletonImpl(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v5 = *a1;
  v6 = a3(a4, *a1 + 112);
  result = (_QWORD *)(v5 + 232);
  v8 = *(_QWORD *)(v5 + 232);
  v9 = *(_DWORD *)(v5 + 248);
  if (!v9)
    goto LABEL_23;
  v10 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (_QWORD *)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 == a2)
    return result;
  v14 = 0;
  v15 = 1;
  while (v12 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v12 == -8192;
    if (v16)
      v14 = v11;
    v17 = v10 + v15++;
    v10 = v17 & (v9 - 1);
    v11 = (_QWORD *)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      return result;
  }
  v18 = v14 ? v14 : v11;
  v19 = *(_DWORD *)(v5 + 240);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *(_DWORD *)(v5 + 244) > v9 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v9 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  v20 = *(_QWORD *)(v5 + 232);
  v21 = *(_DWORD *)(v5 + 248) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v18 = (_QWORD *)(v20 + 16 * v22);
  v23 = *v18;
  if (*v18 == a2)
  {
    v13 = a2;
    goto LABEL_7;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != -4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == -8192;
    if (v26)
      v24 = v18;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v18 = (_QWORD *)(v20 + 16 * (v27 & v21));
    v23 = *v18;
    v13 = a2;
    if (*v18 == a2)
      goto LABEL_7;
  }
  if (v24)
    v18 = v24;
LABEL_6:
  v13 = *v18;
LABEL_7:
  ++*(_DWORD *)(v5 + 240);
  if (v13 != -4096)
    --*(_DWORD *)(v5 + 244);
  *v18 = a2;
  v18[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  v2 = *(char **)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(void **)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        operator delete(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
    free(v2);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>>>,mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>>>::operator[](uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *a2;
  if (!v4)
    goto LABEL_21;
  v6 = v4 - 1;
  v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (*v8 == v5)
    return v8 + 1;
  v12 = 0;
  v13 = 1;
  while (v9 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v9 == -8192;
    if (v14)
      v12 = v8;
    v15 = v7 + v13++;
    v7 = v15 & v6;
    v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v15 & v6));
    v9 = *v8;
    if (*v8 == v5)
      return v8 + 1;
  }
  if (v12)
    v8 = v12;
  v16 = *(_DWORD *)(a1 + 8);
  if (4 * v16 + 4 < 3 * v4)
  {
    if (v4 + ~v16 - *(_DWORD *)(a1 + 12) > v4 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v4 *= 2;
  }
  v5 = *a2;
  v17 = *(_DWORD *)(a1 + 16) - 1;
  v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
  v19 = *v8;
  if (*v8 == *a2)
  {
LABEL_23:
    ++*(_DWORD *)(a1 + 8);
    if (v5 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v20 = 0;
  v21 = 1;
  while (v19 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v19 == -8192;
    if (v22)
      v20 = v8;
    v23 = v18 + v21++;
    v18 = v23 & v17;
    v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v17));
    v19 = *v8;
    if (*v8 == v5)
      goto LABEL_23;
  }
  if (v20)
    v8 = v20;
LABEL_6:
  v11 = *v8;
  ++*(_DWORD *)(a1 + 8);
  if (v11 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *v8 = v5;
  v8[1] = 0;
  return v8 + 1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>>>,mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<`anonymous namespace'::ParametricStorageUniquer>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v24 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = *(_DWORD *)(a1 + 16) - 1;
          v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * v26);
          v27 = *v22;
          if (*v22 != v24)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -8192;
              if (v30)
                v28 = v22;
              v31 = v26 + v29++;
              v26 = v31 & v25;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v31 & v25));
              v27 = *v22;
              if (*v22 == v24)
                goto LABEL_24;
            }
            if (v28)
              v22 = v28;
          }
LABEL_24:
          *v22 = v24;
          v23 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          v22[1] = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t llvm::detail::DenseSetImpl<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,llvm::DenseMap<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,llvm::detail::DenseSetEmpty,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo,llvm::detail::DenseSetPair<`anonymous namespace'::ParametricStorageUniquer::HashedStorage>>,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>::insert_as<`anonymous namespace'::ParametricStorageUniquer::LookupKey>(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  llvm *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  llvm *v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  unint64_t v39;
  _OWORD *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;

  v6 = result;
  v60 = *a3;
  v7 = *(_DWORD *)(a2 + 16);
  if (!v7)
  {
    v15 = 0;
LABEL_5:
    v16 = 2 * v15;
    goto LABEL_26;
  }
  v8 = 0;
  v9 = *(llvm **)a2;
  v10 = v7 - 1;
  v11 = 1;
  v12 = *(_DWORD *)a4 & (v7 - 1);
  v13 = *(_QWORD *)a2 + 16 * v12;
  v14 = *(_QWORD *)(v13 + 8);
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    goto LABEL_15;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(a4 + 8))(*(_QWORD *)(a4 + 16));
    if ((result & 1) != 0)
    {
      v21 = 0;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 == -4096)
      break;
    while (1)
    {
      if (v8)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v8 = v13;
      v18 = v12 + v11++;
      v12 = v18 & v10;
      v13 = (uint64_t)v9 + 16 * (v18 & v10);
      v14 = *(_QWORD *)(v13 + 8);
      if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_15:
      if (v14 == -4096)
        goto LABEL_16;
    }
  }
LABEL_16:
  if (v8)
    v13 = v8;
  v15 = *(_DWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 8);
  if (4 * v19 + 4 >= 3 * v15)
    goto LABEL_5;
  v20 = v15 + ~v19 - *(_DWORD *)(a2 + 12) > v15 >> 3;
  v16 = *(_DWORD *)(a2 + 16);
  if (v20)
    goto LABEL_21;
LABEL_26:
  v23 = *(llvm **)a2;
  v24 = (v16 - 1) | ((unint64_t)(v16 - 1) >> 1);
  v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
  v26 = ((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8);
  if ((v26 + 1) > 0x40)
    v27 = v26 + 1;
  else
    v27 = 64;
  *(_DWORD *)(a2 + 16) = v27;
  result = (uint64_t)llvm::allocate_buffer(16 * v27, (std::align_val_t)8uLL);
  *(_QWORD *)a2 = result;
  if (v23)
  {
    *(_QWORD *)(a2 + 8) = 0;
    v28 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v28)
    {
      v29 = (v28 - 1) & 0xFFFFFFFFFFFFFFFLL;
      v30 = (_OWORD *)result;
      if (v29 < 3)
        goto LABEL_35;
      v31 = v29 + 1;
      v30 = (_OWORD *)(result + 16 * (v31 & 0x1FFFFFFFFFFFFFFCLL));
      v32 = (_OWORD *)(result + 32);
      v33 = v31 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v32 - 2) = xmmword_181235240;
        *(v32 - 1) = xmmword_181235240;
        *v32 = xmmword_181235240;
        v32[1] = xmmword_181235240;
        v32 += 4;
        v33 -= 4;
      }
      while (v33);
      if (v31 != (v31 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        v34 = (_OWORD *)(result + 16 * v28);
        do
          *v30++ = xmmword_181235240;
        while (v30 != v34);
      }
    }
    if (v15)
    {
      v35 = v23;
      do
      {
        v44 = *((_QWORD *)v35 + 1);
        if ((v44 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v45 = *(_DWORD *)(a2 + 16) - 1;
          v46 = v45 & *(_DWORD *)v35;
          v43 = *(_QWORD *)a2 + 16 * v46;
          v47 = *(_QWORD *)(v43 + 8);
          if (v47 != v44)
          {
            v48 = 0;
            v49 = 1;
            while (v47 != -4096)
            {
              if (v48)
                v50 = 0;
              else
                v50 = v47 == -8192;
              if (v50)
                v48 = v43;
              v51 = v46 + v49++;
              v46 = v51 & v45;
              v43 = *(_QWORD *)a2 + 16 * (v51 & v45);
              v47 = *(_QWORD *)(v43 + 8);
              if (v47 == v44)
                goto LABEL_49;
            }
            if (v48)
              v43 = v48;
          }
LABEL_49:
          *(_OWORD *)v43 = *(_OWORD *)v35;
          ++*(_DWORD *)(a2 + 8);
        }
        v35 = (llvm *)((char *)v35 + 16);
      }
      while (v35 != (llvm *)((char *)v23 + 16 * v15));
    }
    llvm::deallocate_buffer(v23, (void *)(16 * v15));
  }
  *(_QWORD *)(a2 + 8) = 0;
  v36 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v36)
  {
    v37 = (v36 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v38 = (_OWORD *)result;
    if (v37 < 3)
      goto LABEL_44;
    v39 = v37 + 1;
    v38 = (_OWORD *)(result + 16 * (v39 & 0x1FFFFFFFFFFFFFFCLL));
    v40 = (_OWORD *)(result + 32);
    v41 = (__n128)xmmword_181235240;
    v42 = v39 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      *(v40 - 2) = xmmword_181235240;
      *(v40 - 1) = xmmword_181235240;
      *v40 = xmmword_181235240;
      v40[1] = xmmword_181235240;
      v40 += 4;
      v42 -= 4;
    }
    while (v42);
    if (v39 != (v39 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      v41 = (__n128)xmmword_181235240;
      do
        *v38++ = xmmword_181235240;
      while (v38 != (_OWORD *)(result + 16 * v36));
    }
    v52 = 0;
    v53 = v36 - 1;
    v54 = 1;
    v55 = *(_DWORD *)a4 & (v36 - 1);
    v13 = result + 16 * v55;
    v56 = *(_QWORD *)(v13 + 8);
    if ((v56 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_75;
    while (1)
    {
      v59 = result;
      result = (*(uint64_t (**)(_QWORD, __n128))(a4 + 8))(*(_QWORD *)(a4 + 16), v41);
      if ((result & 1) != 0)
        break;
      v56 = *(_QWORD *)(v13 + 8);
      result = v59;
      if (v56 == -4096)
      {
LABEL_76:
        if (v52)
          v13 = v52;
        break;
      }
      while (1)
      {
        if (v52)
          v57 = 0;
        else
          v57 = v56 == -8192;
        if (v57)
          v52 = v13;
        v58 = v55 + v54++;
        v55 = v58 & v53;
        v13 = result + 16 * (v58 & v53);
        v56 = *(_QWORD *)(v13 + 8);
        if ((v56 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_75:
        if (v56 == -4096)
          goto LABEL_76;
      }
    }
  }
  else
  {
    v13 = 0;
  }
LABEL_21:
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)(v13 + 8) != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_OWORD *)v13 = v60;
  v21 = 1;
LABEL_25:
  v22 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)v6 = v13;
  *(_QWORD *)(v6 + 8) = v22;
  *(_BYTE *)(v6 + 16) = v21;
  return result;
}

int *mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::CacheType::~CacheType(int *a1)
{
  int v2;
  int *v3;
  int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  std::recursive_mutex *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  std::__shared_weak_count **v33;
  uint64_t v34;
  _QWORD *v36;

  v2 = *a1;
  if (*a1 > 1)
  {
    v4 = a1 + 2;
    if ((v2 & 1) == 0)
    {
      v6 = a1[4];
      v7 = *((_QWORD *)a1 + 1) + 24 * v6;
      if (v6)
      {
        v4 = (int *)*((_QWORD *)a1 + 1);
        goto LABEL_8;
      }
      v36 = a1 + 2;
LABEL_13:
      if ((v2 & 1) != 0)
        goto LABEL_50;
      goto LABEL_14;
    }
    v7 = (uint64_t)(a1 + 26);
LABEL_8:
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == (int *)v7)
      {
        v4 = (int *)v7;
        break;
      }
    }
    v36 = a1 + 2;
    if ((v2 & 1) == 0)
    {
LABEL_18:
      v8 = *((_QWORD *)a1 + 1) + 24 * a1[4];
      if (v4 != (int *)v8)
        goto LABEL_22;
      goto LABEL_13;
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = a1 + 26;
      v5 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v5 = a1[4];
      v4 = &v3[6 * v5];
    }
    v7 = (uint64_t)&v3[6 * v5];
    v36 = a1 + 2;
    if (!v2)
      goto LABEL_18;
  }
  v8 = (uint64_t)(a1 + 26);
  if (v4 == a1 + 26)
    goto LABEL_13;
  do
  {
LABEL_22:
    v11 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
    if (!v11)
      goto LABEL_37;
    v12 = std::__shared_weak_count::lock(v11);
    if (!v12)
      goto LABEL_37;
    v13 = v12;
    v14 = *((_QWORD *)v4 + 1);
    if (v14)
    {
      v15 = *(_QWORD *)v4;
      v16 = (std::recursive_mutex *)(*(_QWORD *)v4 + 24);
      std::recursive_mutex::lock(v16);
      v17 = *(_QWORD **)v15;
      v18 = *(unsigned int *)(v15 + 8);
      v19 = *(_QWORD *)v15 + 8 * v18;
      v20 = *(_QWORD **)v15;
      if ((_DWORD)v18)
      {
        v21 = 8 * v18;
        v20 = *(_QWORD **)v15;
        while (*v20 != v14)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            v20 = (_QWORD *)(*(_QWORD *)v15 + 8 * v18);
            break;
          }
        }
      }
      v22 = v20 + 1;
      if (v20 + 1 == (_QWORD *)v19)
      {
        v23 = v18 - 1;
        *(_DWORD *)(v15 + 8) = v23;
        v24 = v23;
        v25 = v17[v24];
        v17[v24] = 0;
        if (v25)
          goto LABEL_32;
      }
      else
      {
        do
        {
          v29 = *(v22 - 1);
          *(v22 - 1) = *v22;
          *v22 = 0;
          if (v29)
            llvm::deallocate_buffer(*(llvm **)v29, (void *)(16 * *(unsigned int *)(v29 + 16)));
          ++v22;
        }
        while (v22 != (_QWORD *)v19);
        v30 = *(_QWORD **)v15;
        v31 = *(_DWORD *)(v15 + 8) - 1;
        *(_DWORD *)(v15 + 8) = v31;
        v32 = v31;
        v25 = v30[v32];
        v30[v32] = 0;
        if (v25)
LABEL_32:
          llvm::deallocate_buffer(*(llvm **)v25, (void *)(16 * *(unsigned int *)(v25 + 16)));
      }
      std::recursive_mutex::unlock(v16);
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v28 = v4 + 6;
      v4 = (int *)v7;
      if (v28 == (int *)v7)
        continue;
    }
    else
    {
LABEL_37:
      v28 = v4 + 6;
      v4 = (int *)v7;
      if (v28 == (int *)v7)
        continue;
    }
    v4 = v28;
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == (int *)v7)
      {
        v4 = (int *)v7;
        break;
      }
    }
  }
  while (v4 != (int *)v8);
  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
LABEL_50:
    v9 = 4;
    v10 = v36;
    goto LABEL_51;
  }
LABEL_14:
  v9 = a1[4];
  if ((_DWORD)v9)
  {
    v10 = (_QWORD *)*v36;
LABEL_51:
    v33 = (std::__shared_weak_count **)(v10 + 2);
    v34 = 24 * v9;
    do
    {
      if (((unint64_t)*(v33 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v33)
        std::__shared_weak_count::__release_weak(*v33);
      v33 += 3;
      v34 -= 24;
    }
    while (v34);
    v2 = *a1;
  }
  if ((v2 & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  return a1;
}

void llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>>>,mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState *,std::weak_ptr<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  int *v7;
  int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = (char *)(a1 + 26);
    v9 = (char *)(a1 + 2);
    v11 = 72;
  }
  else
  {
    v8 = a1[4];
    if (!v8)
      goto LABEL_11;
    v9 = (char *)*((_QWORD *)a1 + 1);
    v10 = &v9[24 * v8];
    v11 = v10 - v9 - 24;
    if (v11 < 0x18)
    {
      v13 = (char *)*((_QWORD *)a1 + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v13 = -4096;
        v13 += 24;
      }
      while (v13 != v10);
      goto LABEL_11;
    }
  }
  v12 = v11 / 0x18 + 1;
  v13 = &v9[24 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
  v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)v9 = -4096;
    *((_QWORD *)v9 + 3) = -4096;
    v9 += 48;
    v14 -= 2;
  }
  while (v14);
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)a1 & 1) != 0)
        {
          v17 = 4;
          v16 = v7;
        }
        else
        {
          v16 = (int *)*((_QWORD *)a1 + 1);
          v17 = a1[4];
        }
        v18 = v17 - 1;
        v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        v20 = (uint64_t *)&v16[6 * v19];
        v21 = *v20;
        if (*v20 != v15)
        {
          v23 = 0;
          v24 = 1;
          while (v21 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v21 == -8192;
            if (v25)
              v23 = v20;
            v26 = v19 + v24++;
            v19 = v26 & v18;
            v20 = (uint64_t *)&v16[6 * (v26 & v18)];
            v21 = *v20;
            if (*v20 == v15)
              goto LABEL_19;
          }
          if (v23)
            v20 = v23;
        }
LABEL_19:
        *v20 = v15;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v4 + 1);
        v4[1] = 0;
        v4[2] = 0;
        *a1 += 2;
        v22 = (std::__shared_weak_count *)v4[2];
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;

  v24 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  v5 = *(char **)a1;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_19;
  v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v9 = 8 * v7;
  if (v8 < 0xB)
  {
    v10 = v4;
LABEL_12:
    v19 = &v5[8 * v7];
    do
    {
      v20 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      v6 += 8;
      *(_QWORD *)v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  v10 = v4;
  if (!v11)
    goto LABEL_12;
  v12 = v8 + 1;
  v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = &v4[v13];
  v6 = &v5[v13];
  v14 = (__int128 *)(v5 + 16);
  v15 = v4 + 16;
  v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17 = *(v14 - 1);
    v18 = *v14;
    *(v14 - 1) = 0uLL;
    *v14 = 0uLL;
    *(v15 - 1) = v17;
    *v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v21 = *(_QWORD *)a1 - 8;
  do
  {
    v22 = *(_QWORD *)(v21 + v9);
    *(_QWORD *)(v21 + v9) = 0;
    if (v22)
      llvm::deallocate_buffer(*(llvm **)v22, (void *)(16 * *(unsigned int *)(v22 + 16)));
    v9 -= 8;
  }
  while (v9);
  v6 = *(char **)a1;
LABEL_19:
  v23 = v24;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t mlir::detail::StorageUniquerImpl::getThreadSafeAllocator(mlir::detail::StorageUniquerImpl *this)
{
  uint64_t v2;
  uint64_t result;
  _OWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 256))
    return (uint64_t)this + 112;
  v2 = mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::get((void **)this);
  result = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
  {
    v4 = operator new(0x60uLL);
    *v4 = 0u;
    v4[1] = 0u;
    v4[3] = 0u;
    v4[2] = 0u;
    *((_QWORD *)v4 + 2) = v4 + 2;
    *((_DWORD *)v4 + 7) = 4;
    *((_QWORD *)v4 + 10) = 0;
    *((_QWORD *)v4 + 8) = v4 + 5;
    *((_QWORD *)v4 + 9) = 0;
    *((_QWORD *)v4 + 11) = 1;
    *(_QWORD *)v2 = v4;
    std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 40));
    v5 = *(_QWORD *)v2;
    v10 = *(_QWORD *)v2;
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    if ((unint64_t)v6 >= *((_QWORD *)this + 4))
    {
      v7 = std::vector<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>::__push_back_slow_path<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>((_QWORD *)this + 2, &v10);
      v8 = v10;
      *((_QWORD *)this + 3) = v7;
      v10 = 0;
      if (v8)
      {
        v9 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v8);
        operator delete(v9);
      }
    }
    else
    {
      *v6 = v5;
      *((_QWORD *)this + 3) = v6 + 1;
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 40));
    return *(_QWORD *)v2;
  }
  return result;
}

uint64_t mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::get(void **a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  int *v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  std::recursive_mutex *v19;
  unsigned int *v20;
  _QWORD *v21;
  char *Address;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  void *__p;

  {
    v37 = (_QWORD *)mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache);
    *v37 = 1;
    v37[1] = -4096;
    v37[4] = -4096;
    v37[7] = -4096;
    v37[10] = -4096;
    _tlv_atexit((void (__cdecl *)(void *))mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::CacheType::~CacheType, v37);
  }
  v3 = mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::getStaticCache(void)::cache);
  v4 = (int *)v3;
  v5 = *a1;
  __p = *a1;
  v6 = v3 + 8;
  if ((*(_BYTE *)v3 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v7 = *(_DWORD *)(v3 + 16);
    if (!v7)
    {
      v18 = 0;
LABEL_16:
      v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(v3, v18, (uint64_t *)&__p);
      goto LABEL_8;
    }
    v6 = *(_QWORD *)(v3 + 8);
  }
  v8 = v7 - 1;
  v9 = v8 & ((v5 >> 4) ^ (v5 >> 9));
  v10 = (_QWORD *)(v6 + 24 * v9);
  v11 = (void *)*v10;
  if (v5 != (void *)*v10)
  {
    v38 = 0;
    v39 = 1;
    while (v11 != (void *)-4096)
    {
      if (v38)
        v40 = 0;
      else
        v40 = v11 == (void *)-8192;
      if (v40)
        v38 = v10;
      v41 = v9 + v39++;
      v9 = v41 & v8;
      v10 = (_QWORD *)(v6 + 24 * v9);
      v11 = (void *)*v10;
      if (v5 == (void *)*v10)
        goto LABEL_8;
    }
    if (v38)
      v18 = v38;
    else
      v18 = v10;
    goto LABEL_16;
  }
LABEL_8:
  v12 = (std::__shared_weak_count *)v10[2];
  if (v12)
  {
    v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      v14 = v13;
      v15 = v10[1];
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (v17)
      {
        if (v15)
          return v15;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
        if (v15)
          return v15;
      }
    }
  }
  v19 = (std::recursive_mutex *)((char *)*a1 + 24);
  std::recursive_mutex::lock(v19);
  v20 = (unsigned int *)*a1;
  v21 = operator new(8uLL);
  *v21 = 0;
  __p = v21;
  Address = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::StorageUniquer::StorageAllocator *>,false>::reserveForParamAndGetAddress((uint64_t)v20, (unint64_t)&__p, 1);
  v23 = *(_QWORD *)v20;
  v24 = v20[2];
  v25 = *(_QWORD *)Address;
  *(_QWORD *)Address = 0;
  *(_QWORD *)(v23 + 8 * v24) = v25;
  v20[2] = v24 + 1;
  v26 = __p;
  __p = 0;
  if (v26)
    operator delete(v26);
  v27 = (unsigned int *)*a1;
  v28 = (std::__shared_weak_count *)a1[1];
  v15 = *(_QWORD *)(*(_QWORD *)v27 + 8 * v27[2] - 8);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
  }
  v33 = (std::__shared_weak_count *)v10[2];
  v10[1] = v15;
  v10[2] = v28;
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  if (v28)
  {
    v34 = (unint64_t *)&v28->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::clearExpiredEntries(v4);
  std::recursive_mutex::unlock(v19);
  return v15;
}

int *mlir::ThreadLocalCache<mlir::StorageUniquer::StorageAllocator *>::CacheType::~CacheType(int *a1)
{
  int v2;
  int *v3;
  int *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  std::recursive_mutex *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int *v28;
  void *v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  std::__shared_weak_count **v33;
  uint64_t v34;

  v2 = *a1;
  if (*a1 > 1)
  {
    v6 = a1 + 2;
    if ((v2 & 1) == 0)
    {
      v4 = (int *)*((_QWORD *)a1 + 1);
      v7 = a1[4];
      v8 = &v4[6 * v7];
      if (v7)
        goto LABEL_8;
      goto LABEL_18;
    }
    v8 = a1 + 26;
    v4 = a1 + 2;
LABEL_8:
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == v8)
      {
        v4 = v8;
        break;
      }
    }
    v6 = a1 + 2;
    if ((v2 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = a1 + 26;
      v5 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v5 = a1[4];
      v4 = &v3[6 * v5];
    }
    v8 = &v3[6 * v5];
    v6 = a1 + 2;
    if (!v2)
    {
LABEL_18:
      v9 = *((_QWORD *)a1 + 1) + 24 * a1[4];
      if (v4 != (int *)v9)
        goto LABEL_21;
LABEL_13:
      if ((v2 & 1) != 0)
        goto LABEL_49;
      goto LABEL_14;
    }
  }
  v9 = (uint64_t)(a1 + 26);
  if (v4 == a1 + 26)
    goto LABEL_13;
  do
  {
LABEL_21:
    v11 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
    if (!v11)
      goto LABEL_36;
    v12 = std::__shared_weak_count::lock(v11);
    if (!v12)
      goto LABEL_36;
    v13 = v12;
    v14 = *((_QWORD *)v4 + 1);
    if (v14)
    {
      v15 = *(_QWORD *)v4;
      v16 = (std::recursive_mutex *)(*(_QWORD *)v4 + 24);
      std::recursive_mutex::lock(v16);
      v17 = *(_QWORD **)v15;
      v18 = *(unsigned int *)(v15 + 8);
      v19 = *(_QWORD *)v15 + 8 * v18;
      v20 = *(_QWORD **)v15;
      if ((_DWORD)v18)
      {
        v21 = 8 * v18;
        v20 = *(_QWORD **)v15;
        while (*v20 != v14)
        {
          ++v20;
          v21 -= 8;
          if (!v21)
          {
            v20 = (_QWORD *)(*(_QWORD *)v15 + 8 * v18);
            break;
          }
        }
      }
      v22 = v20 + 1;
      if (v20 + 1 == (_QWORD *)v19)
      {
        v23 = v18 - 1;
        *(_DWORD *)(v15 + 8) = v23;
        v24 = v23;
        v25 = (void *)v17[v24];
        v17[v24] = 0;
        if (!v25)
        {
LABEL_32:
          std::recursive_mutex::unlock(v16);
          goto LABEL_33;
        }
      }
      else
      {
        do
        {
          v29 = (void *)*(v22 - 1);
          *(v22 - 1) = *v22;
          *v22 = 0;
          if (v29)
            operator delete(v29);
          ++v22;
        }
        while (v22 != (_QWORD *)v19);
        v30 = *(_QWORD **)v15;
        v31 = *(_DWORD *)(v15 + 8) - 1;
        *(_DWORD *)(v15 + 8) = v31;
        v32 = v31;
        v25 = (void *)v30[v32];
        v30[v32] = 0;
        if (!v25)
          goto LABEL_32;
      }
      operator delete(v25);
      goto LABEL_32;
    }
LABEL_33:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v28 = v4 + 6;
      v4 = v8;
      if (v28 == v8)
        continue;
      goto LABEL_37;
    }
LABEL_36:
    v28 = v4 + 6;
    v4 = v8;
    if (v28 == v8)
      continue;
LABEL_37:
    v4 = v28;
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == v8)
      {
        v4 = v8;
        break;
      }
    }
  }
  while (v4 != (int *)v9);
  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
LABEL_49:
    v10 = 4;
    goto LABEL_50;
  }
LABEL_14:
  v10 = a1[4];
  if ((_DWORD)v10)
  {
    v6 = (_QWORD *)*v6;
LABEL_50:
    v33 = (std::__shared_weak_count **)(v6 + 2);
    v34 = 24 * v10;
    do
    {
      if (((unint64_t)*(v33 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v33)
        std::__shared_weak_count::__release_weak(*v33);
      v33 += 3;
      v34 -= 24;
    }
    while (v34);
    v2 = *a1;
  }
  if ((v2 & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  return a1;
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::StorageUniquer::StorageAllocator *>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12))
    return (char *)v3;
  v8 = *(_QWORD *)a1 + 8 * v4;
  if (*(_QWORD *)a1 > a2 || v8 <= a2)
  {
    v52 = 0;
    v10 = (char *)(a1 + 16);
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
    v12 = *(char **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v13)
    {
LABEL_22:
      v29 = v52;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v29;
      return (char *)v3;
    }
    v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        v18 = v14 + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v11[v19];
        v17 = &v12[v19];
        v20 = (__int128 *)(v12 + 16);
        v21 = v11 + 16;
        v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(v20 - 1);
          v24 = *v20;
          *(v20 - 1) = 0uLL;
          *v20 = 0uLL;
          *(v21 - 1) = v23;
          *v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v27 = *(_QWORD *)a1 - 8;
          do
          {
            v28 = *(void **)(v27 + v15);
            *(_QWORD *)(v27 + v15) = 0;
            if (v28)
              operator delete(v28);
            v15 -= 8;
          }
          while (v15);
          v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v16 = v11;
      v17 = *(char **)a1;
    }
    v25 = &v12[8 * v13];
    do
    {
      v26 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      v17 += 8;
      *(_QWORD *)v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  v30 = a2 - *(_QWORD *)a1;
  v52 = 0;
  v31 = (char *)(a1 + 16);
  v32 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v52);
  v33 = *(char **)a1;
  v34 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v34)
  {
    v35 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v36 = 8 * v34;
    if (v35 >= 0xB)
    {
      if (v33 >= &v32[v36] || (v37 = v32, v38 = *(char **)a1, v32 >= &v33[v36]))
      {
        v39 = v35 + 1;
        v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v37 = &v32[v40];
        v38 = &v33[v40];
        v41 = (__int128 *)(v33 + 16);
        v42 = v32 + 16;
        v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = *(v41 - 1);
          v45 = *v41;
          *(v41 - 1) = 0uLL;
          *v41 = 0uLL;
          *(v42 - 1) = v44;
          *v42 = v45;
          v41 += 2;
          v42 += 2;
          v43 -= 4;
        }
        while (v43);
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          v48 = *(_QWORD *)a1 - 8;
          do
          {
            v49 = *(void **)(v48 + v36);
            *(_QWORD *)(v48 + v36) = 0;
            if (v49)
              operator delete(v49);
            v36 -= 8;
          }
          while (v36);
          v33 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      v37 = v32;
      v38 = *(char **)a1;
    }
    v46 = &v33[8 * v34];
    do
    {
      v47 = *(_QWORD *)v38;
      *(_QWORD *)v38 = 0;
      v38 += 8;
      *(_QWORD *)v37 = v47;
      v37 += 8;
    }
    while (v38 != v46);
    goto LABEL_35;
  }
LABEL_40:
  v50 = v30 >> 3;
  v51 = v52;
  if (v33 != v31)
    free(v33);
  *(_QWORD *)a1 = v32;
  *(_DWORD *)(a1 + 12) = v51;
  return &v32[8 * v50];
}

_QWORD *std::vector<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>::__push_back_slow_path<std::unique_ptr<mlir::StorageUniquer::StorageAllocator>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v27);
        operator delete(v29);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void mlir::detail::StorageUniquerImpl::~StorageUniquerImpl(llvm **this)
{
  llvm::deallocate_buffer(this[29], (void *)(16 * *((unsigned int *)this + 62)));
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::DenseSet<`anonymous namespace'::ParametricStorageUniquer::HashedStorage,`anonymous namespace'::ParametricStorageUniquer::StorageKeyInfo>>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  v2 = *(char **)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        llvm::deallocate_buffer(*(llvm **)v6, (void *)(16 * *(unsigned int *)(v6 + 16)));
      v4 -= 8;
    }
    while (v4);
    v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
    free(v2);
}

mlir::TimingManager *mlir::TimingManager::getRootTimer(mlir::TimingManager *this)
{
  char v2;

  (*(void (**)(mlir::TimingManager *))(*(_QWORD *)this + 16))(this);
  if (v2)
    return this;
  else
    return 0;
}

uint64_t mlir::TimingManager::getRootScope@<X0>(mlir::TimingManager *this@<X0>, mlir::TimingManager **a2@<X8>)
{
  uint64_t result;
  char v5;
  mlir::TimingManager *v6;
  uint64_t v7;

  result = (*(uint64_t (**)(mlir::TimingManager *))(*(_QWORD *)this + 16))(this);
  if (v5)
    v6 = this;
  else
    v6 = 0;
  if (v5)
    v7 = result;
  else
    v7 = 0;
  *a2 = v6;
  a2[1] = (mlir::TimingManager *)v7;
  if (v5)
    return (*(uint64_t (**)(mlir::TimingManager *, uint64_t))(*(_QWORD *)this + 24))(this, result);
  return result;
}

mlir::DefaultTimingManager *mlir::DefaultTimingManager::DefaultTimingManager(mlir::DefaultTimingManager *this)
{
  _QWORD *v2;
  char *v3;
  llvm *v4;
  char *v5;
  uint64_t *v6;
  std::mutex *v8;

  *(_QWORD *)this = off_1E0E2B5E8;
  v2 = operator new(0xA0uLL);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = v2 + 4;
  v2[3] = 0x400000000;
  v2[10] = 0;
  v2[8] = v2 + 10;
  v2[9] = 0;
  v2[11] = 1;
  v2[12] = 0;
  v2[13] = 0;
  v2[14] = 0x800000000;
  v2[15] = v2;
  llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)(v2 + 16));
  v2[17] = 0;
  v3 = (char *)operator new(0x78uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &unk_1E0E51E80;
  *((_QWORD *)v3 + 1) = 0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *((_QWORD *)v3 + 3) = v3 + 40;
  *((_QWORD *)v3 + 4) = 0x100000000;
  MEMORY[0x186DA1428](v3 + 48);
  *((_DWORD *)v3 + 28) = 0;
  v2[18] = v3 + 24;
  v2[19] = v3;
  *(_QWORD *)this = off_1E0E2BD00;
  *((_QWORD *)this + 1) = v2;
  v4 = (llvm *)operator new(0x18uLL);
  *(_QWORD *)v4 = 0x100000000;
  *((_QWORD *)v4 + 1) = llvm::errs(v4);
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)this + 2) = v4;
  v5 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 3) = llvm::get_threadid((llvm *)v5);
  *((_QWORD *)v5 + 4) = 1953460082;
  *(_WORD *)(v5 + 55) = 4;
  *((_QWORD *)v5 + 8) = 0;
  *((_QWORD *)v5 + 9) = 0;
  *((_DWORD *)v5 + 20) = 0;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 11) = v5 + 104;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 14) = 0;
  *((_DWORD *)v5 + 30) = 0;
  *((_QWORD *)v5 + 16) = 850045863;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *((_QWORD *)v5 + 23) = 0;
  v6 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
  v8 = (std::mutex *)v5;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 56) = 1;
  return this;
}

void mlir::DefaultTimingManager::~DefaultTimingManager(mlir::DefaultTimingManager *this)
{
  std::mutex **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E0E2BD00;
  mlir::DefaultTimingManager::print(this);
  v2 = (std::mutex **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E0E2B5E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 152);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)(v3 + 128));
    free(*(void **)(v3 + 96));
    v7 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v3);
    operator delete(v7);
  }
}

{
  void *v1;

  mlir::DefaultTimingManager::~DefaultTimingManager(this);
  operator delete(v1);
}

std::mutex **mlir::DefaultTimingManager::print(mlir::DefaultTimingManager *this)
{
  uint64_t v2;
  _anonymous_namespace_::TimerImpl *v3;
  char *v4;
  uint64_t *v5;
  std::mutex **result;
  std::mutex *v7;

  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)v2)
  {
    v3 = *(_anonymous_namespace_::TimerImpl **)(v2 + 16);
  }
  v4 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 3) = llvm::get_threadid((llvm *)v4);
  *((_QWORD *)v4 + 4) = 1953460082;
  *(_WORD *)(v4 + 55) = 4;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_DWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 11) = v4 + 104;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_DWORD *)v4 + 30) = 0;
  *((_QWORD *)v4 + 16) = 850045863;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *((_QWORD *)v4 + 23) = 0;
  v5 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
  v7 = (std::mutex *)v4;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 56) = 1;
  return result;
}

uint64_t mlir::DefaultTimingManager::setEnabled(uint64_t this, char a2)
{
  **(_BYTE **)(this + 16) = a2;
  return this;
}

llvm::raw_ostream *`anonymous namespace'::TimerImpl::print(uint64_t a1, llvm::raw_ostream *this, int a3)
{
  int8x16_t *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _OWORD *v8;
  __int128 v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  float64x2_t v22;
  char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  _QWORD *v46;
  BOOL v47;
  uint64_t v48;
  char *v49;
  uint64_t (***v50)();
  uint64_t v51;
  uint64_t v52;
  llvm *v53;
  uint64_t v55;
  float64x2_t v56;
  double v57;
  uint64_t v58;
  uint64_t *v59;
  float64x2_t v60;
  uint64_t v61;
  llvm::raw_ostream *result;
  float64x2_t v63;
  int8x16_t *v64;
  int64x2_t v65;
  float64x2_t v66;
  int64x2_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t *v71;
  uint64_t (**v72)();
  void **v73;
  uint64_t (***v74)();
  uint64_t (***v75)();
  uint64_t v76;

  v5 = (int8x16_t *)a1;
  v76 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 4);
  v65 = *(int64x2_t *)(a1 + 8);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 2)
  {
    *(_BYTE *)(v6 + 2) = 61;
    *(_WORD *)v6 = 15677;
    *((_QWORD *)this + 4) += 3;
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, "===", 3uLL);
  }
  v8 = operator new(0x50uLL);
  *(_QWORD *)&v9 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v9 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v8 = v9;
  v8[1] = v9;
  v8[2] = v9;
  v8[3] = v9;
  *(_OWORD *)((char *)v8 + 57) = v9;
  *((_BYTE *)v8 + 73) = 0;
  v10 = llvm::raw_ostream::write(v7, (const char *)v8, 0x49uLL);
  v11 = (_DWORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 3uLL)
  {
    *v11 = 171785533;
    *((_QWORD *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, "===\n", 4uLL);
  }
  v63 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
  v66 = vcvtq_f64_s64(v65);
  operator delete(v8);
  v12 = llvm::raw_ostream::indent(this, 0x19u);
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 <= 0x1CuLL)
  {
    v12 = llvm::raw_ostream::write(v12, "... Execution time report ...", 0x1DuLL);
    v14 = (_BYTE *)*((_QWORD *)v12 + 4);
    v67 = (int64x2_t)vdivq_f64(v66, v63);
    if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
      goto LABEL_9;
LABEL_12:
    *((_QWORD *)v12 + 4) = v14 + 1;
    *v14 = 10;
    v15 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 2)
      goto LABEL_10;
    goto LABEL_13;
  }
  qmemcpy(v13, "... Execution time report ...", 29);
  v17 = *((_QWORD *)v12 + 3);
  v14 = (_BYTE *)(*((_QWORD *)v12 + 4) + 29);
  *((_QWORD *)v12 + 4) = v14;
  v67 = (int64x2_t)vdivq_f64(v66, v63);
  if ((unint64_t)v14 < v17)
    goto LABEL_12;
LABEL_9:
  llvm::raw_ostream::write(v12, 10);
  v15 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 2)
  {
LABEL_10:
    *(_BYTE *)(v15 + 2) = 61;
    *(_WORD *)v15 = 15677;
    *((_QWORD *)this + 4) += 3;
    v16 = this;
    goto LABEL_14;
  }
LABEL_13:
  v16 = llvm::raw_ostream::write(this, "===", 3uLL);
LABEL_14:
  v18 = operator new(0x50uLL);
  *(_QWORD *)&v19 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v19 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v18 = v19;
  v18[1] = v19;
  v18[2] = v19;
  v18[3] = v19;
  *(_OWORD *)((char *)v18 + 57) = v19;
  *((_BYTE *)v18 + 73) = 0;
  v20 = llvm::raw_ostream::write(v16, (const char *)v18, 0x49uLL);
  v21 = (_DWORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 3uLL)
  {
    *v21 = 171785533;
    *((_QWORD *)v20 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v20, "===\n", 4uLL);
  }
  operator delete(v18);
  v72 = (uint64_t (**)())&unk_1E0E20220;
  v73 = (void **)"  Total Execution Time: %.4f seconds\n\n";
  v74 = (uint64_t (***)())v67.i64[0];
  llvm::raw_ostream::operator<<(this, (uint64_t)&v72);
  v22 = (float64x2_t)v67;
  v23 = (char *)*((_QWORD *)this + 4);
  if (*(double *)&v67.i64[1] == *(double *)v67.i64)
  {
LABEL_20:
    if (*((_QWORD *)this + 3) - (_QWORD)v23 <= 0x21uLL)
      goto LABEL_21;
    goto LABEL_61;
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v23 <= 0x12uLL)
  {
    llvm::raw_ostream::write(this, "  ----User Time----", 0x13uLL);
    v22 = (float64x2_t)v67;
    v23 = (char *)*((_QWORD *)this + 4);
    goto LABEL_20;
  }
  *(_DWORD *)(v23 + 15) = 757935405;
  *(_OWORD *)v23 = *(_OWORD *)"  ----User Time----";
  v48 = *((_QWORD *)this + 3);
  v23 = (char *)(*((_QWORD *)this + 4) + 19);
  *((_QWORD *)this + 4) = v23;
  if ((unint64_t)(v48 - (_QWORD)v23) <= 0x21)
  {
LABEL_21:
    llvm::raw_ostream::write(this, "  ----Wall Time----  ----Name----\n", 0x22uLL);
    v22 = (float64x2_t)v67;
    if (a3 != 1)
      goto LABEL_22;
    goto LABEL_62;
  }
LABEL_61:
  qmemcpy(v23, "  ----Wall Time----  ----Name----\n", 34);
  *((_QWORD *)this + 4) += 34;
  if (a3 != 1)
  {
LABEL_22:
    if (a3)
      goto LABEL_88;
    v68 = 0;
    v69 = 0;
    v70 = 0x1800000000;
    v71 = v5;
    v72 = off_1E0E50568;
    v73 = &v68;
    v74 = &v72;
    v75 = &v72;
    if ((_DWORD)v69)
    {
      v24 = (char *)v68;
      if (*(_QWORD *)v68)
        v25 = *(_QWORD *)v68 == -8;
      else
        v25 = 1;
      if (v25)
      {
        do
        {
          v27 = *((_QWORD *)v24 + 1);
          v24 += 8;
          v26 = v27;
          if (v27)
            v28 = v26 == -8;
          else
            v28 = 1;
        }
        while (v28);
      }
      v64 = v5;
      v29 = (char *)v68 + 8 * v69;
      if (v24 != v29)
        goto LABEL_34;
    }
    else
    {
      v24 = (char *)v68;
      v64 = v5;
      v29 = (char *)v68 + 8 * v69;
      if (v68 != v29)
      {
LABEL_34:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = *(_QWORD **)v24;
        while (1)
        {
          v34 = v33 + 3;
          v37 = *v33;
          v36 = v33 + 1;
          v35 = v37;
          if (v31 >= v32)
            break;
          *(_QWORD *)v31 = v34;
          *((_QWORD *)v31 + 1) = v35;
          *((_OWORD *)v31 + 1) = *v36;
          v31 += 32;
          do
          {
LABEL_51:
            v46 = (_QWORD *)*((_QWORD *)v24 + 1);
            v24 += 8;
            v33 = v46;
            if (v46)
              v47 = v33 + 1 == 0;
            else
              v47 = 1;
          }
          while (v47);
          if (v24 == v29)
            goto LABEL_65;
        }
        v38 = (v31 - v30) >> 5;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        if ((v32 - v30) >> 4 > v39)
          v39 = (v32 - v30) >> 4;
        if ((unint64_t)(v32 - v30) >= 0x7FFFFFFFFFFFFFE0)
          v40 = 0x7FFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
        {
          if (v40 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v41 = (char *)operator new(32 * v40);
          v42 = (uint64_t)&v41[32 * v38];
          *(_QWORD *)v42 = v34;
          *(_QWORD *)(v42 + 8) = v35;
          *(_OWORD *)(v42 + 16) = *v36;
          if (v31 != v30)
          {
LABEL_46:
            v43 = v42;
            do
            {
              v44 = (char *)(v43 - 32);
              v45 = *((_OWORD *)v31 - 1);
              *(_OWORD *)(v43 - 32) = *((_OWORD *)v31 - 2);
              *(_OWORD *)(v43 - 16) = v45;
              v31 -= 32;
              v43 -= 32;
            }
            while (v31 != v30);
            v32 = &v41[32 * v40];
            v31 = (char *)(v42 + 32);
            if (!v30)
              goto LABEL_50;
LABEL_49:
            operator delete(v30);
LABEL_50:
            v30 = v44;
            goto LABEL_51;
          }
        }
        else
        {
          v41 = 0;
          v42 = 32 * v38;
          *(_QWORD *)v42 = v34;
          *(_QWORD *)(v42 + 8) = v35;
          *(_OWORD *)(v42 + 16) = *v36;
          if (v31 != v30)
            goto LABEL_46;
        }
        v44 = (char *)v42;
        v32 = &v41[32 * v40];
        v31 = (char *)(v42 + 32);
        if (!v30)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    v31 = 0;
    v30 = 0;
LABEL_65:
    if (v31 - v30 >= 64)
    if (v30 != v31)
    {
      v49 = v30;
      do
      {
        printTimeEntry(this, 0, *(const void **)v49, *((_QWORD *)v49 + 1), *((double *)v49 + 2), *((double *)v49 + 3), *(double *)v67.i64, *(double *)&v67.i64[1]);
        v49 += 32;
      }
      while (v49 != v31);
    }
    v5 = v64;
    if (v30)
      operator delete(v30);
    v50 = v75;
    if (v75 == &v72)
    {
      v51 = 4;
      v50 = &v72;
    }
    else
    {
      if (!v75)
        goto LABEL_77;
      v51 = 5;
    }
    (*v50)[v51]();
LABEL_77:
    if (HIDWORD(v69) && (_DWORD)v69)
    {
      v52 = 0;
      do
      {
        v53 = *(llvm **)((char *)v68 + v52);
        if (v53 != (llvm *)-8 && v53 != 0)
          llvm::deallocate_buffer(v53, (void *)(*(_QWORD *)v53 + 25));
        v52 += 8;
      }
      while (8 * v69 != v52);
    }
    free(v68);
    goto LABEL_87;
  }
LABEL_62:
LABEL_87:
  v22 = (float64x2_t)v67;
LABEL_88:
  v55 = v5[6].u32[0];
  v56.f64[0] = v22.f64[0];
  v57 = *(double *)&v67.i64[1];
  if ((_DWORD)v55)
  {
    v58 = 16 * v55;
    v59 = (uint64_t *)(v5[5].i64[1] + 8);
    v60 = (float64x2_t)vdupq_n_s64(0xC1CDCD6500000000);
    v56 = v22;
    do
    {
      v61 = *v59;
      v59 += 2;
      v56 = vaddq_f64(v56, vdivq_f64(vcvtq_f64_s64(*(int64x2_t *)(v61 + 8)), v60));
      v58 -= 16;
    }
    while (v58);
    v57 = v56.f64[1];
  }
  printTimeEntry(this, 0, "Rest", 4uLL, v56.f64[0], v57, v22.f64[0], *(double *)&v67.i64[1]);
  result = printTimeEntry(this, 0, "Total", 5uLL, *(double *)v67.i64, *(double *)&v67.i64[1], *(double *)v67.i64, *(double *)&v67.i64[1]);
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    return (llvm::raw_ostream *)llvm::raw_ostream::flush_nonempty(this);
  return result;
}

uint64_t *std::unique_ptr<`anonymous namespace'::TimerImpl>::operator=[abi:nn180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *result;
  *result = v2;
  if (v3)
  {
    std::mutex::~mutex((std::mutex *)(v3 + 128));
    v4 = *(unsigned int *)(v3 + 120);
    v5 = *(llvm **)(v3 + 104);
    if ((_DWORD)v4)
    {
      v6 = (char **)((char *)v5 + 32);
      v7 = 48 * v4;
      do
      {
        if ((unint64_t)*(v6 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          llvm::deallocate_buffer((llvm *)*(v6 - 3), (void *)(16 * *((unsigned int *)v6 - 2)));
        }
        v6 += 6;
        v7 -= 48;
      }
      while (v7);
      v5 = *(llvm **)(v3 + 104);
      v8 = 48 * *(unsigned int *)(v3 + 120);
    }
    else
    {
      v8 = 0;
    }
    llvm::deallocate_buffer(v5, (void *)v8);
  }
  return result;
}

std::mutex **std::unique_ptr<`anonymous namespace'::TimerImpl>::~unique_ptr[abi:nn180100](std::mutex **a1)
{
  return a1;
}

uint64_t mlir::DefaultTimingManager::rootTimer(mlir::DefaultTimingManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (*(_BYTE *)v1)
    return *(_QWORD *)(v1 + 16);
  else
    return 0;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep mlir::DefaultTimingManager::startTimer(mlir::DefaultTimingManager *this, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;

  result = std::chrono::steady_clock::now().__d_.__rep_;
  *a2 = result;
  return result;
}

int64x2_t mlir::DefaultTimingManager::stopTimer(mlir::DefaultTimingManager *this, char *a2)
{
  int64x2_t result;

  result = vaddq_s64(*(int64x2_t *)(a2 + 8), vdupq_n_s64(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)a2));
  *(int64x2_t *)(a2 + 8) = result;
  return result;
}

uint64_t mlir::DefaultTimingManager::nestTimer(llvm *a1, uint64_t a2, uint64_t a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t threadid;
  uint64_t *v9;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  _QWORD *buffer;
  unsigned int v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  llvm *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  llvm *v52;
  uint64_t v53;
  llvm *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  int v58;
  int v59;
  char **v60;
  unint64_t v61;
  char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _anonymous_namespace_::TimerImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  uint64_t v92;

  v92 = a3;
  threadid = llvm::get_threadid(a1);
  if (threadid == *(_QWORD *)(a2 + 24))
  {
  }
  v11 = threadid;
  std::mutex::lock((std::mutex *)(a2 + 128));
  v12 = *(llvm **)(a2 + 104);
  v13 = *(unsigned int *)(a2 + 120);
  if (!(_DWORD)v13)
    goto LABEL_24;
  v14 = v13 - 1;
  v15 = (v13 - 1) & (37 * v11);
  v16 = (uint64_t *)((char *)v12 + 48 * v15);
  v17 = *v16;
  if (*v16 != v11)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -1)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -2;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (uint64_t *)((char *)v12 + 48 * (v21 & v14));
      v17 = *v16;
      if (*v16 == v11)
        goto LABEL_20;
    }
    if (v18)
      v16 = v18;
    v27 = *(_DWORD *)(a2 + 112);
    if (4 * v27 + 4 < (3 * v13))
    {
      v22 = (int)v13 + ~v27 - *(_DWORD *)(a2 + 116) > v13 >> 3;
      v23 = *(_DWORD *)(a2 + 120);
      if (v22)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    v23 = 2 * v13;
LABEL_25:
    v28 = (v23 - 1) | ((unint64_t)(v23 - 1) >> 1);
    v29 = v28 | (v28 >> 2) | ((v28 | (v28 >> 2)) >> 4);
    v30 = ((v29 | (v29 >> 8)) >> 16) | v29 | (v29 >> 8);
    if ((v30 + 1) > 0x40)
      v31 = v30 + 1;
    else
      v31 = 64;
    *(_DWORD *)(a2 + 120) = v31;
    buffer = llvm::allocate_buffer(48 * v31, (std::align_val_t)8uLL);
    *(_QWORD *)(a2 + 104) = buffer;
    if (v12)
    {
      *(_QWORD *)(a2 + 112) = 0;
      v33 = *(_DWORD *)(a2 + 120);
      if (!v33)
        goto LABEL_44;
      v34 = 48 * v33 - 48;
      if (v34 >= 0x30)
      {
        v42 = v34 / 0x30 + 1;
        v35 = &buffer[6 * (v42 & 0xFFFFFFFFFFFFFFELL)];
        v43 = v42 & 0xFFFFFFFFFFFFFFELL;
        v44 = buffer;
        do
        {
          *v44 = -1;
          v44[6] = -1;
          v44 += 12;
          v43 -= 2;
        }
        while (v43);
        if (v42 == (v42 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_44:
          if (!(_DWORD)v13)
LABEL_95:
            llvm::deallocate_buffer(v12, (void *)(48 * v13));
          v46 = v12;
          while (1)
          {
            v47 = *(_QWORD *)v46;
            if (*(_QWORD *)v46 <= 0xFFFFFFFFFFFFFFFDLL)
              break;
            v46 = (llvm *)((char *)v46 + 48);
            if (v46 == (llvm *)((char *)v12 + 48 * v13))
              goto LABEL_95;
          }
          v48 = *(_DWORD *)(a2 + 120);
          if (v48)
          {
            v49 = *(_QWORD *)(a2 + 104);
            v50 = v48 - 1;
            v51 = v50 & (37 * v47);
            v52 = (llvm *)(v49 + 48 * v51);
            v53 = *(_QWORD *)v52;
            if (*(_QWORD *)v52 != v47)
            {
              v54 = 0;
              v55 = 1;
              while (v53 != -1)
              {
                if (v54)
                  v56 = 0;
                else
                  v56 = v53 == -2;
                if (v56)
                  v54 = v52;
                v57 = v51 + v55++;
                v51 = v57 & v50;
                v52 = (llvm *)(v49 + 48 * v51);
                v53 = *(_QWORD *)v52;
                if (*(_QWORD *)v52 == v47)
                  goto LABEL_61;
              }
              if (v54)
                v52 = v54;
            }
          }
          else
          {
            v52 = 0;
          }
LABEL_61:
          *((_QWORD *)v52 + 1) = 0;
          *((_QWORD *)v52 + 2) = 0;
          *(_QWORD *)v52 = v47;
          *((_DWORD *)v52 + 6) = 0;
          *((_QWORD *)v52 + 1) = *((_QWORD *)v46 + 1);
          *((_QWORD *)v46 + 1) = 0;
          *((_DWORD *)v52 + 4) = *((_DWORD *)v46 + 4);
          *((_DWORD *)v46 + 4) = 0;
          v58 = *((_DWORD *)v52 + 5);
          *((_DWORD *)v52 + 5) = *((_DWORD *)v46 + 5);
          *((_DWORD *)v46 + 5) = v58;
          v59 = *((_DWORD *)v52 + 6);
          *((_DWORD *)v52 + 6) = *((_DWORD *)v46 + 6);
          *((_QWORD *)v52 + 4) = (char *)v52 + 48;
          v60 = (char **)((char *)v52 + 32);
          *((_DWORD *)v46 + 6) = v59;
          *((_QWORD *)v52 + 5) = 0;
          v61 = *((unsigned int *)v46 + 10);
          v62 = (char *)*((_QWORD *)v46 + 4);
          if (v52 == v46 || !(_DWORD)v61)
          {
            ++*(_DWORD *)(a2 + 112);
            if ((_DWORD)v61)
            {
              v64 = v62 - 8;
              v65 = 16 * v61;
              do
              {
                v65 -= 16;
              }
              while (v65);
              v62 = (char *)*((_QWORD *)v46 + 4);
            }
LABEL_85:
            if (v62 != (char *)v46 + 48)
              free(v62);
            llvm::deallocate_buffer(*((llvm **)v46 + 1), (void *)(16 * *((unsigned int *)v46 + 6)));
          }
          if (v62 != (char *)v46 + 48)
          {
            *((_QWORD *)v52 + 4) = v62;
            v63 = *((_DWORD *)v46 + 11);
            *((_DWORD *)v52 + 10) = v61;
            *((_DWORD *)v52 + 11) = v63;
            *((_QWORD *)v46 + 4) = (char *)v46 + 48;
            *((_DWORD *)v46 + 11) = 0;
            v62 = (char *)v46 + 48;
LABEL_84:
            *((_DWORD *)v46 + 10) = 0;
            ++*(_DWORD *)(a2 + 112);
            goto LABEL_85;
          }
          v91 = *((_DWORD *)v46 + 10);
          v62 = (char *)*((_QWORD *)v46 + 4);
          v66 = *((unsigned int *)v46 + 10);
          if (!(_DWORD)v66)
          {
            v71 = v91;
LABEL_78:
            *((_DWORD *)v52 + 10) = v71;
            v74 = *((unsigned int *)v46 + 10);
            if ((_DWORD)v74)
            {
              v75 = v62 - 8;
              v76 = 16 * v74;
              do
              {
                v77 = *(_anonymous_namespace_::TimerImpl **)&v75[v76];
                *(_QWORD *)&v75[v76] = 0;
                if (v77)
                v76 -= 16;
              }
              while (v76);
              v62 = (char *)*((_QWORD *)v46 + 4);
            }
            goto LABEL_84;
          }
          v67 = *v60;
          v68 = (v66 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (v68 >= 7 && (v67 >= &v62[16 * v66] || v62 >= &v67[16 * v66]))
          {
            v78 = v68 + 1;
            v79 = (v68 + 1) & 0x1FFFFFFFFFFFFFFELL;
            v69 = &v67[16 * v79];
            v70 = &v62[16 * v79];
            v80 = v79;
            v81 = (__int128 *)*((_QWORD *)v46 + 4);
            do
            {
              v82 = *v81;
              v83 = v81[1];
              *((_QWORD *)v81 + 1) = 0;
              *((_QWORD *)v81 + 3) = 0;
              *(_OWORD *)v67 = v82;
              *((_OWORD *)v67 + 1) = v83;
              v67 += 32;
              v81 += 2;
              v80 -= 2;
            }
            while (v80);
            v20 = v78 == v79;
            v71 = v91;
            if (v20)
              goto LABEL_76;
          }
          else
          {
            v69 = *v60;
            v70 = (char *)*((_QWORD *)v46 + 4);
            v71 = v91;
          }
          v72 = &v62[16 * v66];
          do
          {
            *(_QWORD *)v69 = *(_QWORD *)v70;
            v73 = *((_QWORD *)v70 + 1);
            *((_QWORD *)v70 + 1) = 0;
            *((_QWORD *)v69 + 1) = v73;
            v70 += 16;
            v69 += 16;
          }
          while (v70 != v72);
LABEL_76:
          v62 = (char *)*((_QWORD *)v46 + 4);
          goto LABEL_78;
        }
      }
      else
      {
        v35 = buffer;
      }
      v45 = &buffer[6 * v33];
      do
      {
        *v35 = -1;
        v35 += 6;
      }
      while (v35 != v45);
      goto LABEL_44;
    }
    *(_QWORD *)(a2 + 112) = 0;
    v36 = *(_DWORD *)(a2 + 120);
    if (v36)
    {
      v37 = 48 * v36 - 48;
      v38 = buffer;
      if (v37 < 0x30)
        goto LABEL_113;
      v39 = v37 / 0x30 + 1;
      v38 = &buffer[6 * (v39 & 0xFFFFFFFFFFFFFFELL)];
      v40 = v39 & 0xFFFFFFFFFFFFFFELL;
      v41 = buffer;
      do
      {
        *v41 = -1;
        v41[6] = -1;
        v41 += 12;
        v40 -= 2;
      }
      while (v40);
      if (v39 != (v39 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_113:
        do
        {
          *v38 = -1;
          v38 += 6;
        }
        while (v38 != &buffer[6 * v36]);
      }
    }
    v84 = v36 - 1;
    v85 = (v36 - 1) & (37 * v11);
    v16 = &buffer[6 * v85];
    v86 = *v16;
    if (*v16 == v11)
    {
LABEL_97:
      ++*(_DWORD *)(a2 + 112);
      if (v11 == -1)
        goto LABEL_19;
      goto LABEL_18;
    }
    v87 = 0;
    v88 = 1;
    while (v86 != -1)
    {
      if (v87)
        v89 = 0;
      else
        v89 = v86 == -2;
      if (v89)
        v87 = v16;
      v90 = v85 + v88++;
      v85 = v90 & v84;
      v16 = &buffer[6 * (v90 & v84)];
      v86 = *v16;
      if (*v16 == v11)
        goto LABEL_97;
    }
    if (v87)
      v16 = v87;
LABEL_17:
    v24 = *v16;
    ++*(_DWORD *)(a2 + 112);
    if (v24 == -1)
    {
LABEL_19:
      *v16 = v11;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = (uint64_t)(v16 + 6);
      v16[5] = 0;
      goto LABEL_20;
    }
LABEL_18:
    --*(_DWORD *)(a2 + 116);
    goto LABEL_19;
  }
LABEL_20:
  std::mutex::unlock((std::mutex *)(a2 + 128));
  return v26;
}

void mlir::DefaultTimingManager::hideTimer(mlir::DefaultTimingManager *this, _BYTE *a2)
{
  a2[56] = 1;
}

uint64_t `anonymous namespace'::TimerImpl::addAsyncUserTime(_anonymous_namespace_::TimerImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _anonymous_namespace_::TimerImpl **v5;
  _anonymous_namespace_::TimerImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_::TimerImpl **v14;
  _anonymous_namespace_::TimerImpl *v15;

  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 16 * v2;
    v5 = (_anonymous_namespace_::TimerImpl **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    if (!*((_DWORD *)this + 28))
      goto LABEL_11;
  }
  else
  {
    v3 = 0;
    if (!*((_DWORD *)this + 28))
      goto LABEL_11;
  }
  v7 = *((unsigned int *)this + 30);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = *((_QWORD *)this + 13);
    while (*(_QWORD *)v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v9 += 48;
      v8 -= 48;
      if (!v8)
        goto LABEL_11;
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 13);
  }
  v11 = *((_QWORD *)this + 13) + 48 * v7;
LABEL_14:
  if (v9 != v11)
  {
    v12 = *(unsigned int *)(v9 + 40);
    if ((_DWORD)v12)
    {
      v13 = 16 * v12;
      v14 = (_anonymous_namespace_::TimerImpl **)(*(_QWORD *)(v9 + 32) + 8);
      do
      {
        v15 = *v14;
        v14 += 2;
        v3 += *((_QWORD *)v15 + 2);
        v13 -= 16;
      }
      while (v13);
    }
    while (1)
    {
      v9 += 48;
      if (v9 == v11)
        break;
      if (*(_QWORD *)v9 < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_14;
    }
  }
LABEL_11:
  *((_QWORD *)this + 2) += v3;
  return v3;
}

uint64_t `anonymous namespace'::TimerImpl::mergeAsyncChildren(_anonymous_namespace_::TimerImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_::TimerImpl **v4;
  _anonymous_namespace_::TimerImpl *v5;

  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = (_anonymous_namespace_::TimerImpl **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

uint64_t `anonymous namespace'::TimerImpl::mergeChildren(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  char **v12;
  llvm *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  llvm *v20;
  unint64_t v21;
  llvm *v22;
  unint64_t v23;
  uint64_t v24;
  llvm *v25;
  llvm *v26;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v4 = result;
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 48 * v5;
      v7 = *(llvm **)a2;
      while (*(_QWORD *)v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 = (llvm *)((char *)v7 + 48);
        v6 -= 48;
        if (!v6)
          goto LABEL_14;
      }
    }
    else
    {
      v7 = *(llvm **)a2;
    }
    v8 = *(_QWORD *)a2 + 48 * v5;
    if (v7 != (llvm *)v8)
    {
LABEL_9:
      while (1)
      {
        v7 = (llvm *)((char *)v7 + 48);
        if (v7 == (llvm *)v8)
          break;
        if (*(_QWORD *)v7 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v7 != (llvm *)v8)
            goto LABEL_9;
          break;
        }
      }
      v3 = *(_DWORD *)(a2 + 8);
    }
  }
LABEL_14:
  if (v3 | *(_DWORD *)(a2 + 12))
  {
    v9 = *(unsigned int *)(a2 + 16);
    v10 = *(llvm **)a2;
    if (v9 <= 4 * v3 || v9 < 0x41)
    {
      if ((_DWORD)v9)
      {
        v13 = (llvm *)((char *)v10 + 48 * v9);
        do
        {
          if (*(_QWORD *)v10 == -2)
          {
            *(_QWORD *)v10 = -1;
          }
          else if (*(_QWORD *)v10 != -1)
          {
            v14 = (char *)*((_QWORD *)v10 + 4);
            v15 = *((unsigned int *)v10 + 10);
            if ((_DWORD)v15)
            {
              v16 = v14 - 8;
              v17 = 16 * v15;
              do
              {
                v17 -= 16;
              }
              while (v17);
              v14 = (char *)*((_QWORD *)v10 + 4);
            }
            if (v14 != (char *)v10 + 48)
              free(v14);
            llvm::deallocate_buffer(*((llvm **)v10 + 1), (void *)(16 * *((unsigned int *)v10 + 6)));
          }
          v10 = (llvm *)((char *)v10 + 48);
        }
        while (v10 != v13);
      }
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      v11 = 48 * v9;
      v12 = (char **)((char *)v10 + 32);
      do
      {
        if ((unint64_t)*(v12 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          llvm::deallocate_buffer((llvm *)*(v12 - 3), (void *)(16 * *((unsigned int *)v12 - 2)));
        }
        v12 += 6;
        v11 -= 48;
      }
      while (v11);
      v18 = 1 << (33 - __clz(v3 - 1));
      if (v18 <= 64)
        v18 = 64;
      if (v3)
        v19 = v18;
      else
        v19 = 0;
      if (v19 != *(_DWORD *)(a2 + 16))
        llvm::deallocate_buffer(*(llvm **)a2, (void *)(48 * v9));
      *(_QWORD *)(a2 + 8) = 0;
      if (v19)
      {
        v20 = *(llvm **)a2;
        v21 = 48 * v19 - 48;
        if (v21 < 0x30)
        {
          v22 = *(llvm **)a2;
LABEL_49:
          v26 = (llvm *)((char *)v20 + 48 * v19);
          do
          {
            *(_QWORD *)v22 = -1;
            v22 = (llvm *)((char *)v22 + 48);
          }
          while (v22 != v26);
          return result;
        }
        v23 = v21 / 0x30 + 1;
        v22 = (llvm *)((char *)v20 + 48 * (v23 & 0xFFFFFFFFFFFFFFELL));
        v24 = v23 & 0xFFFFFFFFFFFFFFELL;
        v25 = *(llvm **)a2;
        do
        {
          *(_QWORD *)v25 = -1;
          *((_QWORD *)v25 + 6) = -1;
          v25 = (llvm *)((char *)v25 + 96);
          v24 -= 2;
        }
        while (v24);
        if (v23 != (v23 & 0xFFFFFFFFFFFFFFELL))
          goto LABEL_49;
      }
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = result + 64;
  if (!*(_DWORD *)(result + 96))
    llvm::deallocate_buffer(*(llvm **)(result + 64), (void *)(16 * *(unsigned int *)(result + 80)));
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 24);
    v6 = &v5[2 * v4];
    do
    {
      v7 = v5 + 1;
      v31 = *v5;
      v9 = *v8;
      if (*v8)
      {
        v10 = *v7;
        v11 = *(_QWORD *)(*v7 + 8);
        v12 = *(_QWORD *)(v9 + 16);
        if (*(_QWORD *)(v9 + 8) > v11)
          v11 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = v11;
        *(_QWORD *)(v9 + 16) = v12 + *(_QWORD *)(v10 + 16);
        v13 = *v7;
        *v7 = 0;
        if (v13)
        {
          std::mutex::~mutex((std::mutex *)(v13 + 128));
          v14 = *(unsigned int *)(v13 + 120);
          v15 = *(llvm **)(v13 + 104);
          if ((_DWORD)v14)
          {
            v16 = (char **)((char *)v15 + 32);
            v17 = 48 * v14;
            do
            {
              if ((unint64_t)*(v16 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
              {
                llvm::deallocate_buffer((llvm *)*(v16 - 3), (void *)(16 * *((unsigned int *)v16 - 2)));
              }
              v16 += 6;
              v17 -= 48;
            }
            while (v17);
            v15 = *(llvm **)(v13 + 104);
            v18 = 48 * *(unsigned int *)(v13 + 120);
          }
          else
          {
            v18 = 0;
          }
          llvm::deallocate_buffer(v15, (void *)v18);
        }
      }
      else
      {
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  if (!*(_QWORD *)(a2 + 8))
  {
LABEL_22:
    v20 = *(unsigned int *)(a2 + 32);
    if (!(_DWORD)v20)
      goto LABEL_38;
    goto LABEL_23;
  }
  v19 = *(unsigned int *)(a2 + 16);
  if (v19 > 4 * *(_DWORD *)(a2 + 8) && v19 >= 0x41)
  {
    result = llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(a2);
    goto LABEL_22;
  }
  if ((_DWORD)v19)
  {
    v23 = *(_QWORD **)a2;
    v24 = (v19 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v24)
    {
      v25 = v24 + 1;
      v26 = (v24 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v27 = &v23[2 * v26];
      v28 = v23 + 2;
      v29 = v26;
      do
      {
        *(v28 - 2) = -4096;
        *v28 = -4096;
        v28 += 4;
        v29 -= 2;
      }
      while (v29);
      if (v25 == v26)
        goto LABEL_37;
    }
    else
    {
      v27 = *(_QWORD **)a2;
    }
    v30 = &v23[2 * v19];
    do
    {
      *v27 = -4096;
      v27 += 2;
    }
    while (v27 != v30);
  }
LABEL_37:
  *(_QWORD *)(a2 + 8) = 0;
  v20 = *(unsigned int *)(a2 + 32);
  if (!(_DWORD)v20)
    goto LABEL_38;
LABEL_23:
  v21 = *(_QWORD *)(a2 + 24) - 8;
  v22 = 16 * v20;
  do
  {
    result = *(_QWORD *)(v21 + v22);
    *(_QWORD *)(v21 + v22) = 0;
    if (result)
    v22 -= 16;
  }
  while (v22);
LABEL_38:
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,false>::destroy_range(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v2 -= 16;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>::~pair(uint64_t a1)
{
  return a1;
}

{
  return a1;
}

uint64_t llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  char *v36;
  std::mutex *v37;
  uint64_t v38;
  std::mutex *v39;

  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_24;
  v6 = *(_QWORD *)a1;
  v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v5 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (v4 == *v8)
  {
LABEL_3:
    v10 = *(_DWORD *)(v6 + 16 * v7 + 8);
    return *(_QWORD *)(a1 + 24) + 16 * v10 + 8;
  }
  v21 = 0;
  v22 = 1;
  while (v9 != -4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v9 == -8192;
    if (v23)
      v21 = v8;
    v24 = v7 + v22++;
    v7 = v24 & (v5 - 1);
    v8 = (_QWORD *)(v6 + 16 * v7);
    v9 = *v8;
    if (v4 == *v8)
      goto LABEL_3;
  }
  v25 = (uint64_t)(v21 ? v21 : v8);
  v26 = *(_DWORD *)(a1 + 8);
  if (4 * v26 + 4 < 3 * v5)
  {
    if (v5 + ~v26 - *(_DWORD *)(a1 + 12) > v5 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_24:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v5);
  v27 = *(_DWORD *)(a1 + 16) - 1;
  v28 = v27 & ((v4 >> 4) ^ (v4 >> 9));
  v25 = *(_QWORD *)a1 + 16 * v28;
  v29 = *(_QWORD *)v25;
  if (v4 == *(_QWORD *)v25)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v4 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v32 = 0;
  v33 = 1;
  while (v29 != -4096)
  {
    if (v32)
      v34 = 0;
    else
      v34 = v29 == -8192;
    if (v34)
      v32 = v25;
    v35 = v28 + v33++;
    v28 = v35 & v27;
    v25 = *(_QWORD *)a1 + 16 * v28;
    v29 = *(_QWORD *)v25;
    if (v4 == *(_QWORD *)v25)
      goto LABEL_26;
  }
  if (v32)
    v25 = v32;
LABEL_6:
  v11 = *(_QWORD *)v25;
  ++*(_DWORD *)(a1 + 8);
  if (v11 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v25 = v4;
  *(_DWORD *)(v25 + 8) = 0;
  v13 = (unint64_t *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  v14 = *a2;
  v15 = (char *)&v38;
  v37 = 0;
  v38 = v14;
  v39 = 0;
  v16 = *(unsigned int *)(a1 + 32);
  if (v16 >= *(_DWORD *)(a1 + 36))
  {
    v30 = v16 + 1;
    v31 = v12 + 16 * v16 > (unint64_t)&v38;
    if (v12 <= (unint64_t)&v38 && v31)
    {
      v36 = (char *)&v38 - v12;
      v12 = *v13;
      v15 = &v36[*v13];
    }
    else
    {
      v12 = *v13;
      v15 = (char *)&v38;
    }
  }
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (_QWORD *)(v12 + 16 * v17);
  *v18 = *(_QWORD *)v15;
  v19 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = 0;
  v18[1] = v19;
  *(_DWORD *)(a1 + 32) = v17 + 1;
  v10 = *(_DWORD *)(a1 + 32) - 1;
  *(_DWORD *)(v25 + 8) = v10;
  return *(_QWORD *)(a1 + 24) + 16 * v10 + 8;
}

std::mutex **std::unique_ptr<`anonymous namespace'::TimerImpl>::reset[abi:nn180100](std::mutex **result, std::mutex *a2)
{
  std::mutex *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex(v2 + 2);
  }
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _anonymous_namespace_::TimerImpl *v22;
  int v23;
  unint64_t v24;

  v24 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v24);
  v5 = *(char **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v6)
    goto LABEL_20;
  v7 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
  v8 = 16 * v6;
  if (v7 < 7 || (v4 < &v5[v8] ? (v9 = v5 >= &v4[v8]) : (v9 = 1), !v9))
  {
    v12 = v4;
    v13 = *(char **)a1;
LABEL_13:
    v19 = &v5[16 * v6];
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v20 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v12 + 1) = v20;
      v13 += 16;
      v12 += 16;
    }
    while (v13 != v19);
    goto LABEL_15;
  }
  v10 = v7 + 1;
  v11 = (v7 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v12 = &v4[16 * v11];
  v13 = &v5[16 * v11];
  v14 = v11;
  v15 = v4;
  v16 = *(char **)a1;
  do
  {
    v17 = *(_OWORD *)v16;
    v18 = *((_OWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *(_OWORD *)v15 = v17;
    *((_OWORD *)v15 + 1) = v18;
    v15 += 32;
    v16 += 32;
    v14 -= 2;
  }
  while (v14);
  if (v10 != v11)
    goto LABEL_13;
LABEL_15:
  v21 = *(_QWORD *)a1 - 8;
  do
  {
    v22 = *(_anonymous_namespace_::TimerImpl **)(v21 + v8);
    *(_QWORD *)(v21 + v8) = 0;
    if (v22)
    v8 -= 16;
  }
  while (v8);
  v5 = *(char **)a1;
LABEL_20:
  v23 = v24;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

void `anonymous namespace'::TimerImpl::~TimerImpl(_anonymous_namespace_::TimerImpl *this)
{
  std::mutex::~mutex((std::mutex *)this + 2);
  llvm::deallocate_buffer(*((llvm **)this + 13), (void *)(48 * *((unsigned int *)this + 30)));
}

void sub_18068E874()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 64), (void *)(16 * *(unsigned int *)(v0 + 80)));
}

uint64_t sub_18068E890()
{
  uint64_t v0;

  if (*(char *)(v0 + 55) < 0)
    operator delete(*(void **)(v0 + 32));
  return v0;
}

void llvm::DenseMap<unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>>>::~DenseMap(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  char *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = (char *)v3 + 8;
    v5 = 48 * v2;
    while (*((_QWORD *)v4 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 += 48;
      v5 -= 48;
      if (!v5)
        llvm::deallocate_buffer(*(llvm **)a1, (void *)(48 * *(unsigned int *)(a1 + 16)));
    }
  }
  llvm::deallocate_buffer(v3, 0);
}

uint64_t sub_18068E940()
{
  uint64_t v0;

  return v0;
}

void llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>::~MapVector(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
}

{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
}

uint64_t sub_18068E97C()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>>>,unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MapVector<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      if (*(_QWORD *)(result - 8) <= 0xFFFFFFFFFFFFFFFDLL)
      result += 48;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_18068EA0C()
{
  uint64_t v0;

  return v0;
}

uint64_t llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>::~SmallVector(uint64_t a1)
{
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

char **llvm::SmallVector<std::pair<void const*,std::unique_ptr<`anonymous namespace'::TimerImpl>>,0u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 - 16;
    do
    {
      v4 -= 16;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

llvm::raw_ostream *`anonymous namespace'::TimerImpl::printAsTree(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, double a4, double a5)
{
  llvm::raw_ostream *v9;
  uint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v9 = result;
  if (*((_BYTE *)result + 56))
  {
    v10 = *((unsigned int *)result + 24);
    if (!(_DWORD)v10)
      return result;
    goto LABEL_11;
  }
  v11 = *((char *)result + 55);
  if (v11 >= 0)
    v12 = (char *)result + 32;
  else
    v12 = (const void *)*((_QWORD *)result + 4);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)result + 55);
  else
    v13 = *((_QWORD *)result + 5);
  v14 = vdivq_f64(vcvtq_f64_s64(*(int64x2_t *)((char *)result + 8)), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
  result = printTimeEntry(a2, a3, v12, v13, v14.f64[0], v14.f64[1], a4, a5);
  a3 = (a3 + 2);
  v10 = *((unsigned int *)v9 + 24);
  if ((_DWORD)v10)
  {
LABEL_11:
    v15 = *((_QWORD *)v9 + 11);
    v16 = 16 * v10;
    v17 = (uint64_t *)(v15 + 8);
    do
    {
      v18 = *v17;
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

llvm::raw_ostream *printTimeEntry(llvm::raw_ostream *a1, unsigned int a2, const void *a3, size_t a4, double a5, double a6, double a7, double a8)
{
  llvm::raw_ostream *v14;
  llvm::raw_ostream *result;
  void *v16;
  const char *v17;
  double v18;
  double v19;

  if (a8 != a7)
  {
    v16 = &unk_1E0E20240;
    v17 = "  %8.4f (%5.1f%%)";
    v18 = a6;
    v19 = a6 * 100.0 / a8;
    llvm::raw_ostream::operator<<(a1, (uint64_t)&v16);
  }
  v16 = &unk_1E0E20240;
  v17 = "  %8.4f (%5.1f%%)  ";
  v18 = a5;
  v19 = a5 * 100.0 / a7;
  llvm::raw_ostream::operator<<(a1, (uint64_t)&v16);
  v14 = llvm::raw_ostream::indent(a1, a2);
  result = (llvm::raw_ostream *)*((_QWORD *)v14 + 4);
  if (a4 <= *((_QWORD *)v14 + 3) - (_QWORD)result)
  {
    if (a4)
    {
      memcpy(result, a3, a4);
      result = (llvm::raw_ostream *)(*((_QWORD *)v14 + 4) + a4);
      *((_QWORD *)v14 + 4) = result;
    }
  }
  else
  {
    v14 = llvm::raw_ostream::write(v14, (const char *)a3, a4);
    result = (llvm::raw_ostream *)*((_QWORD *)v14 + 4);
  }
  if (*((llvm::raw_ostream **)v14 + 3) == result)
    return llvm::raw_ostream::write(v14, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)v14 + 4);
  return result;
}

uint64_t llvm::format_object<double>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

__n128 std::__function::__func<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1},std::allocator<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1}>,void ()(`anonymous namespace'::TimerImpl*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E50568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1},std::allocator<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1}>,void ()(`anonymous namespace'::TimerImpl*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E50568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1},std::allocator<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1}>,void ()(`anonymous namespace'::TimerImpl*)>::operator()(uint64_t a1, int8x16_t **a2)
{
  int8x16_t *v3;
  llvm::StringMapImpl *v4;
  int v5;
  int8x16_t *v6;
  size_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v16;
  _QWORD *buffer;
  size_t *v18;
  char *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  float64x2_t v25;
  uint64_t v26;

  v3 = *a2;
  v25 = vdivq_f64(vcvtq_f64_s64(*(int64x2_t *)((char *)*a2 + 8)), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
  v4 = *(llvm::StringMapImpl **)(a1 + 8);
  v5 = (*a2)[3].i8[7];
  if (v5 >= 0)
    v6 = v3 + 2;
  else
    v6 = (int8x16_t *)v3[2].i64[0];
  if (v5 >= 0)
    v7 = (*a2)[3].u8[7];
  else
    v7 = v3[2].u64[1];
  result = llvm::StringMapImpl::LookupBucketFor(*(uint64_t **)(a1 + 8), v6, (const unsigned __int8 *)v7);
  v9 = *(_QWORD *)v4;
  v10 = result;
  v11 = *(_QWORD *)(*(_QWORD *)v4 + 8 * result);
  if (v11 == -8)
  {
    --*((_DWORD *)v4 + 4);
  }
  else if (v11)
  {
    v12 = v25;
    goto LABEL_10;
  }
  buffer = llvm::allocate_buffer(v7 + 25, (std::align_val_t)8uLL);
  v18 = buffer;
  v19 = (char *)(buffer + 3);
  if (v7)
    memcpy(buffer + 3, v6, v7);
  v19[v7] = 0;
  v18[1] = 0;
  v18[2] = 0;
  *v18 = v7;
  *(_QWORD *)(v9 + 8 * v10) = v18;
  ++*((_DWORD *)v4 + 3);
  result = llvm::StringMapImpl::RehashTable(v4, v10);
  v20 = (uint64_t *)(*(_QWORD *)v4 + 8 * result);
  v12 = v25;
  v11 = *v20;
  if (*v20)
    v21 = v11 == -8;
  else
    v21 = 1;
  if (v21)
  {
    do
    {
      v22 = v20[1];
      ++v20;
      v11 = v22;
      if (v22)
        v23 = v11 == -8;
      else
        v23 = 1;
    }
    while (v23);
  }
LABEL_10:
  *(float64x2_t *)(v11 + 8) = vaddq_f64(v12, *(float64x2_t *)(v11 + 8));
  v13 = v3[6].u32[0];
  if ((_DWORD)v13)
  {
    v14 = 16 * v13;
    for (i = (uint64_t *)(v3[5].i64[1] + 8); ; i += 2)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      v26 = *i;
      if (!v16)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v26);
      v14 -= 16;
      if (!v14)
        return result;
    }
    v24 = std::__throw_bad_function_call[abi:nn180100]();
  }
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1},std::allocator<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1}>,void ()(`anonymous namespace'::TimerImpl*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_19TimerImpl11printAsListERN4llvm11raw_ostreamENS_10TimeRecordEEUlPS0_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_19TimerImpl11printAsListERN4llvm11raw_ostreamENS_10TimeRecordEEUlPS0_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_19TimerImpl11printAsListERN4llvm11raw_ostreamENS_10TimeRecordEEUlPS0_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_19TimerImpl11printAsListERN4llvm11raw_ostreamENS_10TimeRecordEEUlPS0_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1},std::allocator<`anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(`anonymous namespace'::TimerImpl*)#1}>,void ()(`anonymous namespace'::TimerImpl*)>::target_type()
{
}

uint64_t `anonymous namespace'::TimerImpl::printAsList(llvm::raw_ostream &,`anonymous namespace'::TimeRecord)::{lambda(std::pair<llvm::StringRef,`anonymous namespace'::TimeRecord> const*,std::pair<llvm::StringRef,`anonymous namespace'::TimeRecord> const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 16);
  v3 = *(double *)(a2 + 16);
  if (v3 < v2)
    return 0xFFFFFFFFLL;
  else
    return v2 < v3;
}

uint64_t llvm::format_object<double,double>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t `anonymous namespace'::TimerImpl::nestTail(uint64_t *a1, void (*a2)(void **__return_ptr, uint64_t), uint64_t a3)
{
  uint64_t result;
  char *v5;
  std::string *v6;
  void *__p[2];
  uint64_t v8;
  std::mutex *v9;

  result = *a1;
  if (!result)
  {
    a2(__p, a3);
    v5 = (char *)operator new(0xC0uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 3) = llvm::get_threadid((llvm *)v5);
    v6 = (std::string *)(v5 + 32);
    if (SHIBYTE(v8) < 0)
    {
      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *((_QWORD *)v5 + 6) = v8;
    }
    v5[56] = 0;
    *((_QWORD *)v5 + 8) = 0;
    *((_QWORD *)v5 + 9) = 0;
    *((_DWORD *)v5 + 20) = 0;
    *((_QWORD *)v5 + 13) = 0;
    *((_QWORD *)v5 + 11) = v5 + 104;
    *((_QWORD *)v5 + 12) = 0;
    *((_QWORD *)v5 + 14) = 0;
    *((_DWORD *)v5 + 30) = 0;
    *((_QWORD *)v5 + 16) = 850045863;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *((_QWORD *)v5 + 23) = 0;
    v9 = (std::mutex *)v5;
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    return *a1;
  }
  return result;
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

char **std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  char **v1;

  v1 = (char **)(a1 + 24);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  return llvm::SmallVector<std::unique_ptr<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>,1u>::~SmallVector(v1);
}

char **llvm::SmallVector<std::unique_ptr<llvm::StringMap<llvm::StringMapEntry<std::nullopt_t> *,llvm::MallocAllocator>>,1u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = &v2[8 * v3];
    do
    {
      v6 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      v5 = v6;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v5 + 12))
        {
          v7 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v7)
          {
            v8 = 0;
            do
            {
              v9 = *(llvm **)(*(_QWORD *)v5 + v8);
              if (v9 != (llvm *)-8 && v9 != 0)
                llvm::deallocate_buffer(v9, (void *)(*(_QWORD *)v9 + 17));
              v8 += 8;
            }
            while (8 * v7 != v8);
          }
        }
        free(*(void **)v5);
        operator delete((void *)v5);
      }
    }
    while (v4 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_anonymous_namespace_::TimerImpl **std::unique_ptr<`anonymous namespace'::TimerImpl>::~unique_ptr[abi:nn180100](_anonymous_namespace_::TimerImpl **a1)
{
  _anonymous_namespace_::TimerImpl *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  return a1;
}

unint64_t mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  void *buffer;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  _QWORD *v16;

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_45);
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    v14 = __cxa_guard_acquire(&_MergedGlobals_45);
    a1 = v13;
    if (v14)
    {
      llvm::sys::RWMutexImpl::RWMutexImpl((llvm::sys::RWMutexImpl *)&qword_1ECD32E48);
      qword_1ECD32E50 = 0;
      qword_1ECD32E58 = 0;
      qword_1ECD32E60 = 0;
      qword_1ECD32E68 = (uint64_t)&unk_1ECD32E78;
      qword_1ECD32E70 = 0x400000000;
      qword_1ECD32E98 = (uint64_t)&qword_1ECD32EA8;
      unk_1ECD32EA0 = 0u;
      unk_1ECD32EB0 = 0u;
      *(_OWORD *)((char *)&qword_1ECD32EB8 + 4) = 0u;
      __cxa_guard_release(&_MergedGlobals_45);
      a1 = v13;
    }
  }
  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  llvm::sys::RWMutexImpl::lock_shared(&qword_1ECD32E48);
  v16 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(&qword_1ECD32EB8, (uint64_t)&v15, &v16)|| v16 == (_QWORD *)(qword_1ECD32EB8 + 24 * dword_1ECD32EC8))
  {
    llvm::sys::RWMutexImpl::unlock_shared(&qword_1ECD32E48);
    llvm::sys::RWMutexImpl::lock(&qword_1ECD32E48);
    v16 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(&qword_1ECD32EB8, (uint64_t)&v15, &v16))
    {
      v6 = v16[2];
    }
    else
    {
      v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>,llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::ScopedHashTableVal<llvm::StringRef,char> *>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)&qword_1ECD32EB8, (uint64_t)&v15, (uint64_t)&v15, v16);
      *(_OWORD *)v7 = v15;
      v7[2] = &mlir::detail::TypeIDResolver<void,void>::id;
      qword_1ECD32EA8 += 8;
      if (qword_1ECD32E58
        && ((qword_1ECD32E58 + 7) & 0xFFFFFFFFFFFFFFF8) - qword_1ECD32E58 + 8 <= qword_1ECD32E60 - qword_1ECD32E58)
      {
        v6 = (qword_1ECD32E58 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v8 = qword_1ECD32E70 >> 7;
        if (qword_1ECD32E70 >> 7 >= 0x1E)
          LOBYTE(v8) = 30;
        v9 = 4096 << v8;
        buffer = llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
        v11 = qword_1ECD32E70;
        if (qword_1ECD32E70 >= HIDWORD(qword_1ECD32E70))
        {
          v12 = buffer;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&qword_1ECD32E68, &unk_1ECD32E78, qword_1ECD32E70 + 1, 8);
          buffer = v12;
          v11 = qword_1ECD32E70;
        }
        *(_QWORD *)(qword_1ECD32E68 + 8 * v11) = buffer;
        LODWORD(qword_1ECD32E70) = qword_1ECD32E70 + 1;
        qword_1ECD32E60 = (uint64_t)buffer + v9;
        v6 = ((unint64_t)buffer + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      qword_1ECD32E58 = v6 + 8;
      v7[2] = v6;
    }
    llvm::sys::RWMutexImpl::unlock_shared(&qword_1ECD32E48);
    return v6;
  }
  else
  {
    v4 = v16[2];
    llvm::sys::RWMutexImpl::unlock_shared(&qword_1ECD32E48);
    return v4;
  }
}

void `anonymous namespace'::ImplicitTypeIDRegistry::~ImplicitTypeIDRegistry(llvm **this)
{
  llvm::deallocate_buffer(this[14], (void *)(24 * *((unsigned int *)this + 32)));
}

void sub_18068F524()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (*(_DWORD *)(v0 + 88))
    llvm::deallocate_buffer(**(llvm ***)(v0 + 80), *(void **)(*(_QWORD *)(v0 + 80) + 8));
  *(_DWORD *)(v0 + 88) = 0;
  v1 = *(_DWORD *)(v0 + 40);
  if (v1)
  {
    *(_QWORD *)(v0 + 96) = 0;
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)v2 + 4096;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)v2;
    *(_QWORD *)(v0 + 24) = v3;
    if (v1 != 1)
    {
      v4 = ((unint64_t)(v2 + 8 - *(_QWORD *)(v0 + 32)) >> 10) & 0x1FFFFFF;
      if (v4 >= 0x1E)
        LOBYTE(v4) = 30;
      llvm::deallocate_buffer(*(llvm **)(v2 + 8), (void *)(4096 << v4));
    }
    *(_DWORD *)(v0 + 40) = 1;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v0 + 16);
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)v0);
}

mlir::tensor::TensorDialect *mlir::tensor::TensorDialect::TensorDialect(mlir::tensor::TensorDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v8;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"tensor", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id);
  *v3 = off_1E0E4EB80;
  v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"affine", 6))
  {
    v8 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"affine", 6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::affine::AffineDialect * mlir::MLIRContext::getOrLoadDialect<mlir::affine::AffineDialect>(void)::{lambda(void)#1}>, (uint64_t)&v8);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  if (!mlir::MLIRContext::isDialectLoading(v5, (uint64_t)"arith", 5))
  {
    v8 = v5;
    mlir::MLIRContext::getOrLoadDialect(v5, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v8);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 4);
  if (!mlir::MLIRContext::isDialectLoading(v6, (uint64_t)"complex", 7))
  {
    v8 = v6;
    mlir::MLIRContext::getOrLoadDialect(v6, (uint64_t)"complex", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::complex::ComplexDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::complex::ComplexDialect * mlir::MLIRContext::getOrLoadDialect<mlir::complex::ComplexDialect>(void)::{lambda(void)#1}>, (uint64_t)&v8);
  }
  mlir::tensor::TensorDialect::initialize(this);
  return this;
}

const char *mlir::tensor::TensorDialect::initialize(mlir::tensor::TensorDialect *this)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  const char *result;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  unint64_t v18;

  mlir::Dialect::addOperations<mlir::tensor::BitcastOp,mlir::tensor::CastOp,mlir::tensor::CollapseShapeOp,mlir::tensor::DimOp,mlir::tensor::EmptyOp,mlir::tensor::ExpandShapeOp,mlir::tensor::ExtractOp,mlir::tensor::ExtractSliceOp,mlir::tensor::FromElementsOp,mlir::tensor::GatherOp,mlir::tensor::GenerateOp,mlir::tensor::InsertOp,mlir::tensor::InsertSliceOp,mlir::tensor::PackOp,mlir::tensor::PadOp,mlir::tensor::ParallelInsertSliceOp,mlir::tensor::RankOp,mlir::tensor::ReshapeOp,mlir::tensor::ScatterOp,mlir::tensor::SplatOp,mlir::tensor::UnPackOp,mlir::tensor::YieldOp>((uint64_t)this);
  v2 = (char *)operator new(0x18uLL);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v8 = v7;
    v2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v18 = 79;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v16;
    }
  }
  v5 = v4[157];
  *((_QWORD *)v2 + 1) = this;
  *((_QWORD *)v2 + 2) = v5;
  *(_QWORD *)v2 = off_1E0E18FE8;
  v17 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void mlir::tensor::TensorDialect::~TensorDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_18068F850(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::tensor::BitcastOp,mlir::tensor::CastOp,mlir::tensor::CollapseShapeOp,mlir::tensor::DimOp,mlir::tensor::EmptyOp,mlir::tensor::ExpandShapeOp,mlir::tensor::ExtractOp,mlir::tensor::ExtractSliceOp,mlir::tensor::FromElementsOp,mlir::tensor::GatherOp,mlir::tensor::GenerateOp,mlir::tensor::InsertOp,mlir::tensor::InsertSliceOp,mlir::tensor::PackOp,mlir::tensor::PadOp,mlir::tensor::ParallelInsertSliceOp,mlir::tensor::RankOp,mlir::tensor::ReshapeOp,mlir::tensor::ScatterOp,mlir::tensor::SplatOp,mlir::tensor::UnPackOp,mlir::tensor::YieldOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t result;
  _QWORD *v42;

  v2 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v3 = (uint64_t)v42;
  v42 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v5 = (uint64_t)v42;
  v42 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::CollapseShapeOp::getAttributeNames(void)::attrNames, 1);
  v7 = (uint64_t)v42;
  v42 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v9 = (uint64_t)v42;
  v42 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v11 = (uint64_t)v42;
  v42 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::ExpandShapeOp::getAttributeNames(void)::attrNames, 1);
  v13 = (uint64_t)v42;
  v42 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v15 = (uint64_t)v42;
  v42 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::ExtractSliceOp::getAttributeNames(void)::attrNames, 4);
  v17 = (uint64_t)v42;
  v42 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v19 = (uint64_t)v42;
  v42 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::GatherOp::getAttributeNames(void)::attrNames, 2);
  v21 = (uint64_t)v42;
  v42 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  mlir::RegisteredOperationName::insert<mlir::tensor::GenerateOp>(a1);
  v22 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v23 = (uint64_t)v42;
  v42 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::InsertSliceOp::getAttributeNames(void)::attrNames, 4);
  v25 = (uint64_t)v42;
  v42 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::PackOp::getAttributeNames(void)::attrNames, 4);
  v27 = (uint64_t)v42;
  v42 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::PadOp::getAttributeNames(void)::attrNames, 4);
  v29 = (uint64_t)v42;
  v42 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  mlir::RegisteredOperationName::insert<mlir::tensor::ParallelInsertSliceOp>(a1);
  v30 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v31 = (uint64_t)v42;
  v42 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v33 = (uint64_t)v42;
  v42 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::ScatterOp::getAttributeNames(void)::attrNames, 2);
  v35 = (uint64_t)v42;
  v42 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  v37 = (uint64_t)v42;
  v42 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::tensor::UnPackOp::getAttributeNames(void)::attrNames, 3);
  v39 = (uint64_t)v42;
  v42 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = operator new(0x70uLL);
  v42 = mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

mlir::affine::AffineDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::affine::AffineDialect * mlir::MLIRContext::getOrLoadDialect<mlir::affine::AffineDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::affine::AffineDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::affine::AffineDialect *v4;
  mlir::affine::AffineDialect *result;

  v3 = *a1;
  v4 = (mlir::affine::AffineDialect *)operator new(0x60uLL);
  result = mlir::affine::AffineDialect::AffineDialect(v4, v3);
  *a2 = result;
  return result;
}

mlir::complex::ComplexDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::complex::ComplexDialect * mlir::MLIRContext::getOrLoadDialect<mlir::complex::ComplexDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::complex::ComplexDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::complex::ComplexDialect *v4;
  mlir::complex::ComplexDialect *result;

  v3 = *a1;
  v4 = (mlir::complex::ComplexDialect *)operator new(0x60uLL);
  result = mlir::complex::ComplexDialect::ComplexDialect(v4, v3);
  *a2 = result;
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::tensor::GenerateOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"tensor.generate", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::GenerateOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E44CD8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::tensor::ParallelInsertSliceOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"tensor.parallel_insert_slice", 28, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ParallelInsertSliceOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E45188;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::tensor::ParallelInsertSliceOp::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.bitcast", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::BitcastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45AE8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::BitcastOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::BitcastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::BitcastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::areCastCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[137], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::BitcastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::BitcastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return !*(_DWORD *)(a5 + 8) && mlir::impl::foldCastInterfaceOp(a2, a3, a4, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  __guard v133;
  __guard v134;
  __guard v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      v186 = 110;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[195];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v186 = 85;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[234];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v8 = a1, mlir::tensor::BitcastOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::impl::verifyCastInterfaceOp(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::BitcastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.cast", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E453E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::CastOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::CastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::areCastCompatible;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[137], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return !*(_DWORD *)(a5 + 8) && mlir::impl::foldCastInterfaceOp(a2, a3, a4, a5);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __guard v149;
  __guard v150;
  __guard v151;
  __guard v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[195];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v210 = 82;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v210 = 85;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[234];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = p_vtable[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v32[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v8 = a1, mlir::tensor::BitcastOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::impl::verifyCastInterfaceOp(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E450C0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::tensor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::tensor *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::CollapseShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::CollapseShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v210 = 116;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v210 = 82;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[138];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v32[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::tensor::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::tensor::CollapseShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::tensor::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.dim", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::DimOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45250;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::foldHook(uint64_t a1, mlir::tensor *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, mlir::tensor *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::DimOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::DimOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::DimOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::DimOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::DimOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::tensor::DimOp::getSpeculatability((mlir::tensor::DimOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getShapedValue;
  v2[1] = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDimension;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[483], v2);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getShapedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::getDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3) | 4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::DimOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::DimOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.dim";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::tensor *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::tensor *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase((uint64_t)v14, (unsigned int *)a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::DimOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8
    || (mlir::tensor *)((char *)a2 - 16) == (mlir::tensor *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  __guard v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v210 = 109;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[305];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v210 = 90;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[208];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = p_vtable[486];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface::Trait<Empty>]";
      v210 = 90;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedDimOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[33];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v210 = 90;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v32[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::DimOp::print((mlir::memref::DimOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::DimOp>,mlir::OpTrait::OneResult<mlir::tensor::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::OpInvariants<mlir::tensor::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::tensor::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::DimOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::DimOp>,mlir::OpTrait::OneResult<mlir::tensor::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::tensor::DimOp>,mlir::OpTrait::OpInvariants<mlir::tensor::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::tensor::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::DimOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::detail *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v7 = a1, mlir::tensor::DimOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::detail::verifyShapedDimOpInterface(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::tensor::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.empty", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45638;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::EmptyOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::EmptyOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::EmptyOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::EmptyOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::EmptyOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::EmptyOp::reifyResultShapes((uint64_t)&v5, a3, a4);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v186 = 116;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[198];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v186 = 102;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v29[483] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::EmptyOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::tensor::EmptyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::EmptyOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::EmptyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.expand_shape", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44DA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::ExpandShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::ExpandShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExpandShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::ExpandShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExpandShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::ExpandShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::tensor::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::tensor::ExpandShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::tensor::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.extract", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45BB0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::ExtractOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::ExtractOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::ExtractOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::ExtractOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::ExtractOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::ExtractOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::tensor::ExtractOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.extract";
  v16[1] = 14;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::ExtractOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  void **p_vtable;
  void *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v210 = 104;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = p_vtable[501];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[197];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[138];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[158];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v210 = 90;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v30 == (_QWORD)a1
      || v32[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::ExtractOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::tensor::ExtractOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::ExtractOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.extract_slice", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44F30;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::ExtractSliceOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::ExtractSliceOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::ExtractSliceOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::ExtractSliceOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ExtractSliceOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::ExtractSliceOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::reifyResultShapes(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::ExtractSliceOp::reifyResultShapes((mlir::memref::ReinterpretCastOp *)&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0xD0uLL);
  *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasZeroOffset;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[171], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  uint64_t v8;

  v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::isSameAs(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v10;

  v10 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return mlir::detail::sameOffsetsSizesAndStrides(v10, InterfaceFor, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 1;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ExtractSliceOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 0;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::ExtractSliceOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::ExtractSliceOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  void **v32;
  void *v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 v40;
  __guard *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  __guard v188;
  __guard v189;
  __guard v190;
  __guard v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __guard v210;
  __guard v211;
  __guard v212;
  __guard v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __guard v237;
  __guard v238;
  __guard v239;
  __guard v240;
  __guard v241;
  __guard v242;
  __guard v243;
  __guard v244;
  __guard v245;
  __guard v246;
  __guard v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v288 = 116;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v288 = 97;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[197];
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[138];
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v288 = 102;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[483];
  v32 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[486];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[504];
  v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[158];
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      v288 = 100;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == a1
      || v36 == a1
      || v39 == (_QWORD)a1
      || v41[61] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::SubViewOp::print((mlir::memref::SubViewOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  char v3;
  uint64_t *v5;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ExtractSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::ExtractSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ExtractSliceOp>>(a1, a2))return 0;
  v5 = a1;
  mlir::tensor::ExtractSliceOp::verify((mlir::tensor::ExtractSliceOp *)&v5);
  return v3 != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ExtractSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::ExtractSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::ExtractSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::ExtractSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ExtractSliceOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v6 = a1, mlir::tensor::ExtractSliceOp::verifyInvariantsImpl(&v6)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::ExtractSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.from_elements", 20, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44FF8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::FromElementsOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::FromElementsOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::FromElementsOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::FromElementsOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::FromElementsOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::FromElementsOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v186 = 116;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[198];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v186 = 86;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::FromElementsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::tensor::FromElementsOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::FromElementsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.gather", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::GatherOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45890;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::GatherOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::GatherOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::GatherOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::GatherOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::GatherOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::GatherOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::GatherOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GatherOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::GatherOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::GatherOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::GatherOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::GatherOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[56];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::GatherOpGenericAdaptorBase::GatherOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::GatherOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v210 = 116;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v210 = 90;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[208];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[138];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v32[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::GatherOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::tensor::GatherOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::GatherOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::GatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::GenerateOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::GenerateOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::GenerateOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::GenerateOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::GenerateOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::GenerateOp::reifyResultShapes((uint64_t)&v5, a3, a4);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  __guard *v20;
  __guard v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  void **p_vtable;
  void *v30;
  unsigned __int8 v31;
  __guard *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __guard v149;
  __guard v150;
  __guard v151;
  __guard v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v210 = 81;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v210 = 116;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v210 = 88;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[198];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v210 = 83;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[184];
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor:"
             ":YieldOp>::Impl<Empty>]";
      v210 = 130;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[499];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[192];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v210 = 97;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = p_vtable[502];
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v210 = 102;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v32[483] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::GenerateOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v6 = a1;
  if (!mlir::tensor::GenerateOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::GenerateOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::GenerateOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::ReifyRankedShapedTypeOpInterface::Trait>::verifyRegionInvariants(uint64_t *a1)
{
  uint64_t *v3;

  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::verifyRegionTrait((uint64_t)a1))
    return 0;
  v3 = a1;
  return mlir::tensor::GenerateOp::verifyRegions(&v3) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const void **v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[4];
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::YieldOp,void>::id)
    goto LABEL_3;
  v40 = 1283;
  v39[0] = "expects regions to end with '";
  v39[2] = "tensor.yield";
  v39[3] = 12;
  v41[0] = v39;
  v41[2] = "', found '";
  v42 = 770;
  v47 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  v43[3] = v13;
  v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v35) = 3;
  v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v37 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v32 = v17 + 1;
    v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v35;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v38 = 262;
  v35 = (const void **)"tensor.yield";
  v36 = 12;
  v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  if (v55)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v54;
      v25 = __p;
      if (v54 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v54 = v23;
      operator delete(v25);
    }
    v26 = v51;
    if (v51)
    {
      v27 = v52;
      v28 = v51;
      if (v52 != v51)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v51;
      }
      v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50)
      free(v49);
  }
  return v22;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.insert", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::InsertOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45958;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::InsertOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::InsertOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDpsInitsMutable;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[488], v2);
}

mlir::MutableOperandRange *mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::OpOperand *DestMutable;
  uint64_t v5;

  v5 = a1;
  DestMutable = (mlir::OpOperand *)mlir::tensor::InsertOp::getDestMutable((mlir::tensor::InsertOp *)&v5);
  return mlir::MutableOperandRange::MutableOperandRange(a2, DestMutable);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.insert";
  v16[1] = 13;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::InsertOpGenericAdaptorBase::InsertOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::InsertOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  __guard *v23;
  __guard v24;
  unsigned __int8 v25;
  void **p_vtable;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  __guard v162;
  __guard v163;
  __guard v164;
  __guard v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __guard v177;
  __guard v178;
  __guard v179;
  __guard v180;
  __guard v181;
  __guard v182;
  __guard v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __guard v192;
  __guard v193;
  __guard v194;
  __guard v195;
  __guard v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v235 = 116;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[196];
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v235 = 97;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[303];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[138];
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      v235 = 97;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[445];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = p_vtable[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[158];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v35[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::InsertOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::tensor::InsertOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::InsertOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::InsertOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::detail::verifyDestinationStyleOpInterface(a1, a2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.insert_slice", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E44E68;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::InsertSliceOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::InsertSliceOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::InsertSliceOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::InsertSliceOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::InsertSliceOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::InsertSliceOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::InsertSliceOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a3 + 32) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a3 + 40) == (unint64_t)*(unsigned int *)(a2 + 40);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::InsertSliceOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::tensor::InsertSliceOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::InsertSliceOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::InsertSliceOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::InsertSliceOp::reifyResultShapes((uint64_t)&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDpsInitsMutable;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[488], v2);
}

mlir::MutableOperandRange *mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::OpOperand *DestMutable;
  uint64_t v5;

  v5 = a1;
  DestMutable = (mlir::OpOperand *)mlir::tensor::InsertSliceOp::getDestMutable((mlir::tensor::InsertSliceOp *)&v5);
  return mlir::MutableOperandRange::MutableOperandRange(a2, DestMutable);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0xD0uLL);
  *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::hasZeroOffset;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[171], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 2;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::tensor::InsertSliceOp::getStrides((mlir::tensor::InsertSliceOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 2;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  uint64_t v8;

  v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 2) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v9);
  return *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 2) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v11);
  return *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 2) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isSameAs(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v10;

  v10 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return mlir::detail::sameOffsetsSizesAndStrides(v10, InterfaceFor, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 1;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 0;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  void **StaticOffsets;
  unint64_t v5;
  unint64_t v6;
  uint64_t Sizes;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticOffsets = (void **)mlir::memref::ReinterpretCastOp::getStaticOffsets(a1);
  v6 = v5;
  Sizes = mlir::memref::ReinterpretCastOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v14, Sizes, v8);
  mlir::getMixedValues(StaticOffsets, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  void **StaticSizes;
  unint64_t v5;
  unint64_t v6;
  uint64_t Strides;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticSizes = (void **)mlir::memref::ReinterpretCastOp::getStaticSizes(a1);
  v6 = v5;
  Strides = mlir::memref::ReinterpretCastOp::getStrides(a1);
  mlir::ValueRange::ValueRange(v14, Strides, v8);
  mlir::getMixedValues(StaticSizes, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  void **StaticStrides;
  unint64_t v5;
  unint64_t v6;
  uint64_t Strides;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticStrides = (void **)mlir::memref::ReinterpretCastOp::getStaticStrides(a1);
  v6 = v5;
  Strides = mlir::tensor::InsertSliceOp::getStrides(a1);
  mlir::ValueRange::ValueRange(v14, Strides, v8);
  mlir::getMixedValues(StaticStrides, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertSliceOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::InsertSliceOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::InsertSliceOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.insert_slice";
  v16[1] = 19;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[88];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::InsertSliceOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::InsertSliceOp::fold(&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  __guard *v32;
  __guard v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  void **v38;
  void *v39;
  unsigned __int8 v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 v43;
  __guard *v44;
  __guard v45;
  unsigned __int8 v46;
  uint64_t *v47;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  const char *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  const char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  const char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  unint64_t v166;
  const char *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  const char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  const char *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  __guard v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  __guard v222;
  __guard v223;
  __guard v224;
  __guard v225;
  __guard v226;
  __guard v227;
  __guard v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __guard v253;
  __guard v254;
  __guard v255;
  __guard v256;
  __guard v257;
  __guard v258;
  __guard v259;
  __guard v260;
  __guard v261;
  __guard v262;
  __guard v263;
  __guard v264;
  __guard v265;
  __guard v266;
  __guard v267;
  __guard v268;
  __guard v269;
  __guard v270;
  __guard v271;
  __guard v272;
  __guard v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __guard v286;
  __guard v287;
  __guard v288;
  __guard v289;
  __guard v290;
  __guard v291;
  __guard v292;
  __guard v293;
  __guard v294;
  __guard v295;
  __guard v296;
  __guard v297;
  __guard v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  const char *v344;
  unint64_t v345;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v328 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v65 = v64;
    a1 = v328;
    if (v65)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v345 = 83;
      v66 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v66)
        v67 = v66;
      else
        v67 = v345;
      v68 = &v344[v67];
      v69 = v345 - v67;
      if (v345 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v345 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v328;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v313 = v3;
    v329 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v74 = v73;
    v3 = v313;
    a1 = v329;
    if (v74)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v345 = 81;
      v75 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v75)
        v76 = v75;
      else
        v76 = v345;
      v77 = &v344[v76];
      v78 = v345 - v76;
      if (v345 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v345 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v313;
      a1 = v329;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v314 = v3;
    v330 = a1;
    v299 = v6;
    v6 = v299;
    v3 = v314;
    v83 = v82;
    a1 = v330;
    if (v83)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v345 = 116;
      v84 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v84)
        v85 = v84;
      else
        v85 = v345;
      v86 = &v344[v85];
      v87 = v345 - v85;
      if (v345 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v345 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v6 = v299;
      v3 = v314;
      a1 = v330;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v315 = v3;
    v331 = a1;
    v286 = v9;
    v300 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v286;
    v6 = v300;
    v92 = v91;
    v3 = v315;
    a1 = v331;
    if (v92)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v345 = 86;
      v93 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v93)
        v94 = v93;
      else
        v94 = v345;
      v95 = &v344[v94];
      v96 = v345 - v94;
      if (v345 - v94 >= 0x12)
        v97 = 18;
      else
        v97 = v345 - v94;
      v98 = v96 - v97;
      if (v98 >= v98 - 1)
        v99 = v98 - 1;
      else
        v99 = v98;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v95[v97], v99);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v286;
      v6 = v300;
      v3 = v315;
      a1 = v331;
    }
  }
  v12 = v11[196];
  if ((v13 & 1) == 0)
  {
    v316 = v3;
    v332 = a1;
    v287 = v9;
    v301 = v6;
    v274 = v12;
    v12 = v274;
    v9 = v287;
    v6 = v301;
    v3 = v316;
    v101 = v100;
    a1 = v332;
    if (v101)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v345 = 97;
      v102 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v102)
        v103 = v102;
      else
        v103 = v345;
      v104 = &v344[v103];
      v105 = v345 - v103;
      if (v345 - v103 >= 0x12)
        v106 = 18;
      else
        v106 = v345 - v103;
      v107 = v105 - v106;
      if (v107 >= v107 - 1)
        v108 = v107 - 1;
      else
        v108 = v107;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v104[v106], v108);
      v12 = v274;
      v9 = v287;
      v6 = v301;
      v3 = v316;
      a1 = v332;
    }
  }
  v15 = v14[303];
  if ((v16 & 1) == 0)
  {
    v317 = v3;
    v333 = a1;
    v288 = v9;
    v302 = v6;
    v275 = v12;
    v263 = v15;
    v15 = v263;
    v12 = v275;
    v9 = v288;
    v6 = v302;
    v3 = v317;
    v110 = v109;
    a1 = v333;
    if (v110)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v345 = 96;
      v111 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v111)
        v112 = v111;
      else
        v112 = v345;
      v113 = &v344[v112];
      v114 = v345 - v112;
      if (v345 - v112 >= 0x12)
        v115 = 18;
      else
        v115 = v345 - v112;
      v116 = v114 - v115;
      if (v116 >= v116 - 1)
        v117 = v116 - 1;
      else
        v117 = v116;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v113[v115], v117);
      v15 = v263;
      v12 = v275;
      v9 = v288;
      v6 = v302;
      v3 = v317;
      a1 = v333;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v318 = v3;
    v334 = a1;
    v289 = v9;
    v303 = v6;
    v276 = v12;
    v253 = v18;
    v264 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v253;
    v15 = v264;
    v12 = v276;
    v9 = v289;
    v6 = v303;
    v3 = v318;
    v119 = v118;
    a1 = v334;
    if (v119)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v345 = 84;
      v120 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v120)
        v121 = v120;
      else
        v121 = v345;
      v122 = &v344[v121];
      v123 = v345 - v121;
      if (v345 - v121 >= 0x12)
        v124 = 18;
      else
        v124 = v345 - v121;
      v125 = v123 - v124;
      if (v125 >= v125 - 1)
        v126 = v125 - 1;
      else
        v126 = v125;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v122[v124], v126);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v253;
      v15 = v264;
      v12 = v276;
      v9 = v289;
      v6 = v303;
      v3 = v318;
      a1 = v334;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v319 = v3;
    v335 = a1;
    v290 = v9;
    v304 = v6;
    v277 = v12;
    v254 = v18;
    v265 = v15;
    v244 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v244;
    v18 = v254;
    v15 = v265;
    v12 = v277;
    v9 = v290;
    v6 = v304;
    v3 = v319;
    v128 = v127;
    a1 = v335;
    if (v128)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v345 = 89;
      v129 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v129)
        v130 = v129;
      else
        v130 = v345;
      v131 = &v344[v130];
      v132 = v345 - v130;
      if (v345 - v130 >= 0x12)
        v133 = 18;
      else
        v133 = v345 - v130;
      v134 = v132 - v133;
      if (v134 >= v134 - 1)
        v135 = v134 - 1;
      else
        v135 = v134;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v131[v133], v135);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v244;
      v18 = v254;
      v15 = v265;
      v12 = v277;
      v9 = v290;
      v6 = v304;
      v3 = v319;
      a1 = v335;
    }
  }
  v24 = p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v320 = v3;
    v336 = a1;
    v291 = v9;
    v305 = v6;
    v278 = v12;
    v255 = v18;
    v266 = v15;
    v236 = v24;
    v245 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v236;
    v21 = v245;
    v18 = v255;
    v15 = v266;
    v12 = v278;
    v9 = v291;
    v6 = v305;
    v3 = v320;
    v137 = v136;
    a1 = v336;
    if (v137)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v345 = 86;
      v138 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v138)
        v139 = v138;
      else
        v139 = v345;
      v140 = &v344[v139];
      v141 = v345 - v139;
      if (v345 - v139 >= 0x12)
        v142 = 18;
      else
        v142 = v345 - v139;
      v143 = v141 - v142;
      if (v143 >= v143 - 1)
        v144 = v143 - 1;
      else
        v144 = v143;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v140[v142], v144);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v236;
      v21 = v245;
      v18 = v255;
      v15 = v266;
      v12 = v278;
      v9 = v291;
      v6 = v305;
      v3 = v320;
      a1 = v336;
    }
  }
  v27 = v26[138];
  if ((v28 & 1) == 0)
  {
    v321 = v3;
    v337 = a1;
    v292 = v9;
    v306 = v6;
    v279 = v12;
    v256 = v18;
    v267 = v15;
    v237 = v24;
    v246 = v21;
    v229 = v27;
    v27 = v229;
    v24 = v237;
    v21 = v246;
    v18 = v256;
    v15 = v267;
    v12 = v279;
    v9 = v292;
    v6 = v306;
    v3 = v321;
    v146 = v145;
    a1 = v337;
    if (v146)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v345 = 102;
      v147 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v147)
        v148 = v147;
      else
        v148 = v345;
      v149 = &v344[v148];
      v150 = v345 - v148;
      if (v345 - v148 >= 0x12)
        v151 = 18;
      else
        v151 = v345 - v148;
      v152 = v150 - v151;
      if (v152 >= v152 - 1)
        v153 = v152 - 1;
      else
        v153 = v152;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v149[v151], v153);
      v27 = v229;
      v24 = v237;
      v21 = v246;
      v18 = v256;
      v15 = v267;
      v12 = v279;
      v9 = v292;
      v6 = v306;
      v3 = v321;
      a1 = v337;
    }
  }
  v30 = v29[483];
  if ((v31 & 1) == 0)
  {
    v322 = v3;
    v338 = a1;
    v293 = v9;
    v307 = v6;
    v280 = v12;
    v257 = v18;
    v268 = v15;
    v238 = v24;
    v247 = v21;
    v223 = v30;
    v230 = v27;
    v30 = v223;
    v27 = v230;
    v24 = v238;
    v21 = v247;
    v18 = v257;
    v15 = v268;
    v12 = v280;
    v9 = v293;
    v6 = v307;
    v3 = v322;
    v155 = v154;
    a1 = v338;
    if (v155)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      v345 = 97;
      v156 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v156)
        v157 = v156;
      else
        v157 = v345;
      v158 = &v344[v157];
      v159 = v345 - v157;
      if (v345 - v157 >= 0x12)
        v160 = 18;
      else
        v160 = v345 - v157;
      v161 = v159 - v160;
      if (v161 >= v161 - 1)
        v162 = v161 - 1;
      else
        v162 = v161;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v158[v160], v162);
      v30 = v223;
      v27 = v230;
      v24 = v238;
      v21 = v247;
      v18 = v257;
      v15 = v268;
      v12 = v280;
      v9 = v293;
      v6 = v307;
      v3 = v322;
      a1 = v338;
    }
  }
  v33 = v32[445];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v323 = v3;
    v339 = a1;
    v294 = v9;
    v308 = v6;
    v281 = v12;
    v258 = v18;
    v269 = v15;
    v239 = v24;
    v248 = v21;
    v224 = v30;
    v231 = v27;
    v218 = v33;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v218;
    v30 = v224;
    v27 = v231;
    v24 = v239;
    v21 = v248;
    v18 = v258;
    v15 = v269;
    v12 = v281;
    v9 = v294;
    v6 = v308;
    v3 = v323;
    v164 = v163;
    a1 = v339;
    if (v164)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v345 = 95;
      v165 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v165)
        v166 = v165;
      else
        v166 = v345;
      v167 = &v344[v166];
      v168 = v345 - v166;
      if (v345 - v166 >= 0x12)
        v169 = 18;
      else
        v169 = v345 - v166;
      v170 = v168 - v169;
      if (v170 >= v170 - 1)
        v171 = v170 - 1;
      else
        v171 = v170;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v167[v169], v171);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v218;
      v30 = v224;
      v27 = v231;
      v24 = v239;
      v21 = v248;
      v18 = v258;
      v15 = v269;
      v12 = v281;
      v9 = v294;
      v6 = v308;
      v3 = v323;
      a1 = v339;
    }
  }
  v36 = v35[486];
  v38 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v37 & 1) == 0)
  {
    v324 = v3;
    v340 = a1;
    v295 = v9;
    v309 = v6;
    v282 = v12;
    v259 = v18;
    v270 = v15;
    v240 = v24;
    v249 = v21;
    v225 = v30;
    v232 = v27;
    v214 = v36;
    v219 = v33;
    v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v36 = v214;
    v33 = v219;
    v30 = v225;
    v27 = v232;
    v24 = v240;
    v21 = v249;
    v18 = v259;
    v15 = v270;
    v12 = v282;
    v9 = v295;
    v6 = v309;
    v3 = v324;
    v173 = v172;
    a1 = v340;
    if (v173)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v345 = 99;
      v174 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v174)
        v175 = v174;
      else
        v175 = v345;
      v176 = &v344[v175];
      v177 = v345 - v175;
      if (v345 - v175 >= 0x12)
        v178 = 18;
      else
        v178 = v345 - v175;
      v179 = v177 - v178;
      if (v179 >= v179 - 1)
        v180 = v179 - 1;
      else
        v180 = v179;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v176[v178], v180);
      v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v36 = v214;
      v33 = v219;
      v30 = v225;
      v27 = v232;
      v24 = v240;
      v21 = v249;
      v18 = v259;
      v15 = v270;
      v12 = v282;
      v9 = v295;
      v6 = v309;
      v3 = v324;
      a1 = v340;
    }
  }
  v39 = v38[504];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v325 = v3;
    v341 = a1;
    v296 = v9;
    v310 = v6;
    v283 = v12;
    v260 = v18;
    v271 = v15;
    v241 = v24;
    v250 = v21;
    v226 = v30;
    v233 = v27;
    v215 = v36;
    v220 = v33;
    v211 = v39;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v211;
    v36 = v215;
    v33 = v220;
    v30 = v226;
    v27 = v233;
    v24 = v241;
    v21 = v250;
    v18 = v260;
    v15 = v271;
    v12 = v283;
    v9 = v296;
    v6 = v310;
    v3 = v325;
    v182 = v181;
    a1 = v341;
    if (v182)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v345 = 93;
      v183 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v183)
        v184 = v183;
      else
        v184 = v345;
      v185 = &v344[v184];
      v186 = v345 - v184;
      if (v345 - v184 >= 0x12)
        v187 = 18;
      else
        v187 = v345 - v184;
      v188 = v186 - v187;
      if (v188 >= v188 - 1)
        v189 = v188 - 1;
      else
        v189 = v188;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v185[v187], v189);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v211;
      v36 = v215;
      v33 = v220;
      v30 = v226;
      v27 = v233;
      v24 = v241;
      v21 = v250;
      v18 = v260;
      v15 = v271;
      v12 = v283;
      v9 = v296;
      v6 = v310;
      v3 = v325;
      a1 = v341;
    }
  }
  v42 = v41[158];
  if ((v43 & 1) == 0)
  {
    v326 = v3;
    v342 = a1;
    v297 = v9;
    v311 = v6;
    v284 = v12;
    v261 = v18;
    v272 = v15;
    v242 = v24;
    v251 = v21;
    v227 = v30;
    v234 = v27;
    v216 = v36;
    v221 = v33;
    v209 = v42;
    v212 = v39;
    v42 = v209;
    v39 = v212;
    v36 = v216;
    v33 = v221;
    v30 = v227;
    v27 = v234;
    v24 = v242;
    v21 = v251;
    v18 = v261;
    v15 = v272;
    v12 = v284;
    v9 = v297;
    v6 = v311;
    v3 = v326;
    v191 = v190;
    a1 = v342;
    if (v191)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      v345 = 100;
      v192 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v192)
        v193 = v192;
      else
        v193 = v345;
      v194 = &v344[v193];
      v195 = v345 - v193;
      if (v345 - v193 >= 0x12)
        v196 = 18;
      else
        v196 = v345 - v193;
      v197 = v195 - v196;
      if (v197 >= v197 - 1)
        v198 = v197 - 1;
      else
        v198 = v197;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v194[v196], v198);
      v42 = v209;
      v39 = v212;
      v36 = v216;
      v33 = v221;
      v30 = v227;
      v27 = v234;
      v24 = v242;
      v21 = v251;
      v18 = v261;
      v15 = v272;
      v12 = v284;
      v9 = v297;
      v6 = v311;
      v3 = v326;
      a1 = v342;
    }
  }
  v45 = v44[61];
  v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v46 & 1) == 0)
  {
    v327 = v3;
    v343 = a1;
    v298 = v9;
    v312 = v6;
    v285 = v12;
    v262 = v18;
    v273 = v15;
    v243 = v24;
    v252 = v21;
    v228 = v30;
    v235 = v27;
    v217 = v36;
    v222 = v33;
    v210 = v42;
    v213 = v39;
    v208 = v45;
    v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v208;
    v42 = v210;
    v39 = v213;
    v36 = v217;
    v33 = v222;
    v30 = v228;
    v27 = v235;
    v24 = v243;
    v21 = v252;
    v18 = v262;
    v15 = v273;
    v12 = v285;
    v9 = v298;
    v6 = v312;
    v3 = v327;
    v200 = v199;
    a1 = v343;
    if (v200)
    {
      v344 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v345 = 90;
      v201 = llvm::StringRef::find((uint64_t *)&v344, "DesiredTypeName = ", 0x12uLL, 0);
      if (v345 >= v201)
        v202 = v201;
      else
        v202 = v345;
      v203 = &v344[v202];
      v204 = v345 - v202;
      if (v345 - v202 >= 0x12)
        v205 = 18;
      else
        v205 = v345 - v202;
      v206 = v204 - v205;
      if (v206 >= v206 - 1)
        v207 = v206 - 1;
      else
        v207 = v206;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v203[v205], v207);
      v47 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v45 = v208;
      v42 = v210;
      v39 = v213;
      v36 = v217;
      v33 = v222;
      v30 = v228;
      v27 = v235;
      v24 = v243;
      v21 = v252;
      v18 = v262;
      v15 = v273;
      v12 = v285;
      v9 = v298;
      v6 = v312;
      v3 = v327;
      a1 = v343;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v36 == a1
      || v39 == a1
      || v42 == (_QWORD)a1
      || v45 == (_QWORD)a1
      || v47[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::InsertSliceOp::print((mlir::tensor::InsertSliceOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  char v3;
  uint64_t *v5;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::InsertSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::InsertSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::DestinationStyleOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::InsertSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::InsertSliceOp>>(a1, a2))return 0;
  v5 = a1;
  mlir::tensor::InsertSliceOp::verify((mlir::tensor::InsertSliceOp *)&v5);
  return v3 != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OneResult<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::InsertSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::InsertSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::InsertSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::DestinationStyleOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::InsertSliceOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::InsertSliceOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::InsertSliceOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::InsertSliceOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v6 = a1, mlir::tensor::InsertSliceOp::verifyInvariantsImpl(&v6)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::tensor::InsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::detail::verifyDestinationStyleOpInterface(a1, a2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.pack", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::PackOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E454A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::tensor::PackOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::PackOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::PackOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::PackOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::PackOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::PackOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::PackOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::PackOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PackOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::PackOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::PackOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getDpsInitsMutable;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[488], v2);
}

mlir::MutableOperandRange *mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::OpOperand *DestMutable;
  uint64_t v5;

  v5 = a1;
  DestMutable = (mlir::OpOperand *)mlir::tensor::InsertSliceOp::getDestMutable((mlir::tensor::InsertSliceOp *)&v5);
  return mlir::MutableOperandRange::MutableOperandRange(a2, DestMutable);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PackOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PackOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::tensor::PackOp::getSpeculatability((mlir::tensor::PackOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::PackOp::reifyResultShapes(&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::PackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::PackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::PackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.pack";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::PackOpGenericAdaptorBase::PackOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::PackOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  void **v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  __guard *v38;
  __guard v39;
  unsigned __int8 v40;
  uint64_t *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  __guard v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  void *v187;
  __guard v188;
  __guard v189;
  __guard v190;
  __guard v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __guard v210;
  __guard v211;
  __guard v212;
  __guard v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  __guard v222;
  __guard v223;
  __guard v224;
  __guard v225;
  __guard v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __guard v237;
  __guard v238;
  __guard v239;
  __guard v240;
  __guard v241;
  __guard v242;
  __guard v243;
  __guard v244;
  __guard v245;
  __guard v246;
  __guard v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v288 = 116;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[196];
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v288 = 97;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[303];
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = p_vtable[481];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[138];
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      v288 = 97;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[445];
  v32 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[486];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[158];
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v288 = 102;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[483];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v288 = 90;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == a1
      || v36 == (_QWORD)a1
      || v39 == (_QWORD)a1
      || v41[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::PackOp::print((mlir::tensor::PackOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::PackOp>,mlir::OpTrait::OneResult<mlir::tensor::PackOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::PackOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::PackOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::PackOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::PackOp>,mlir::OpTrait::OpInvariants<mlir::tensor::PackOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::PackOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::PackOp>,mlir::DestinationStyleOpInterface::Trait<mlir::tensor::PackOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::PackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::PackOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::PackOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::PackOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::tensor::PackOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::PackOp>,mlir::OpTrait::OneResult<mlir::tensor::PackOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::PackOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::PackOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::PackOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::PackOp>,mlir::OpTrait::OpInvariants<mlir::tensor::PackOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::PackOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::PackOp>,mlir::DestinationStyleOpInterface::Trait<mlir::tensor::PackOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::PackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::PackOp>,mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::tensor::PackOp>,mlir::InferTypeOpInterface::Trait<mlir::tensor::PackOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  v6 = a1;
  return mlir::tensor::PackOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::PackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::detail::verifyDestinationStyleOpInterface(a1, a2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.pad", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45318;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::PadOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t *a2)@<X8>)
{
  *a1 = mlir::tensor::PadOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                     + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::getInherentAttr(uint64_t a1, uint64_t a2, _WORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::PadOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _WORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_WORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::PadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::PadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::PadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::PadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::PadOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::PadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::PadOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::PadOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PadOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::PadOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::PadOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::PadOpGenericAdaptorBase::PadOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::PadOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  __guard *v23;
  __guard v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  void **p_vtable;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  void **v35;
  void *v36;
  unsigned __int8 v37;
  void **v38;
  void *v39;
  unsigned __int8 v40;
  uint64_t *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  __guard v201;
  __guard v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __guard v210;
  __guard v211;
  __guard v212;
  __guard v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __guard v237;
  __guard v238;
  __guard v239;
  __guard v240;
  __guard v241;
  __guard v242;
  __guard v243;
  __guard v244;
  __guard v245;
  __guard v246;
  __guard v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  const char *v287;
  unint64_t v288;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v273;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v288 = 116;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v288 = 97;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[197];
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[184];
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor:"
             ":YieldOp>::Impl<Empty>]";
      v288 = 130;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[499];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = p_vtable[481];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[138];
  v35 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[486];
  v38 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[504];
  v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v36 == a1
      || v39 == a1
      || v41[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::PadOp::print((mlir::tensor::PadOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::tensor::PadOp>,mlir::OpTrait::OneResult<mlir::tensor::PadOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::PadOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::PadOp>,mlir::OpTrait::SingleBlock<mlir::tensor::PadOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::OpInvariants<mlir::tensor::PadOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::PadOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::PadOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::PadOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::PadOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::PadOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::tensor::PadOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::tensor::PadOp>,mlir::OpTrait::OneResult<mlir::tensor::PadOp>,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::PadOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::PadOp>,mlir::OpTrait::SingleBlock<mlir::tensor::PadOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::PadOp>,mlir::OpTrait::OpInvariants<mlir::tensor::PadOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::PadOp>,mlir::OpAsmOpInterface::Trait<mlir::tensor::PadOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::PadOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::PadOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::PadOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  v6 = a1;
  return mlir::tensor::PadOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::tensor::PadOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(uint64_t *a1)
{
  uint64_t *v3;

  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::tensor::YieldOp>::Impl<mlir::tensor::GenerateOp>::verifyRegionTrait((uint64_t)a1))
    return 0;
  v3 = a1;
  return mlir::tensor::PadOp::verifyRegions(&v3) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::tensor::ParallelInsertSliceOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::ParallelInsertSliceOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::ParallelInsertSliceOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::ParallelInsertSliceOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::InsertSliceOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::InsertSliceOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::InsertSliceOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a3 + 32) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a3 + 40) == (unint64_t)*(unsigned int *)(a2 + 40);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ParallelInsertSliceOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::tensor::InsertSliceOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::InsertSliceOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0xD0uLL);
  *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::hasZeroOffset;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[171], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(mlir::tensor::ParallelInsertSliceOp::getDest((mlir::tensor::ParallelInsertSliceOp *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::tensor::InsertSliceOp::getStrides((mlir::tensor::InsertSliceOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  uint64_t v8;

  v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v9);
  return *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v11);
  return *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::isSameAs(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v10;

  v10 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return mlir::detail::sameOffsetsSizesAndStrides(v10, InterfaceFor, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 1;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::tensor::ParallelInsertSliceOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::InsertSliceOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 0;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  __guard *v11;
  __guard v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  __guard *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  __guard v107;
  __guard v108;
  __guard v109;
  __guard v110;
  __guard v111;
  __guard v112;
  __guard v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  const char *v140;
  unint64_t v141;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v132;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v141 = 83;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[196];
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v141 = 97;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[303];
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v141 = 96;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[423];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v141 = 89;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = p_vtable[481];
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      v141 = 100;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v23[61] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::InsertSliceOp::print((mlir::tensor::InsertSliceOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::ZeroResults<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ParallelInsertSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ParallelInsertSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ParallelInsertSliceOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::tensor::ParallelInsertSliceOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::ZeroResults<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::tensor::ParallelInsertSliceOp>,mlir::OpTrait::OpInvariants<mlir::tensor::ParallelInsertSliceOp>,mlir::BytecodeOpInterface::Trait<mlir::tensor::ParallelInsertSliceOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::tensor::ParallelInsertSliceOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v6 = a1, mlir::tensor::ParallelInsertSliceOp::verifyInvariantsImpl(&v6)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::tensor::ParallelInsertSliceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.rank", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::RankOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45570;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::RankOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::RankOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::RankOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::RankOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::RankOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::RankOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::RankOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.rank";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::RankOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::tensor::RankOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::tensor::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.reshape", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ReshapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45C78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::ReshapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ReshapeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ReshapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ReshapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::ReshapeOpGenericAdaptorBase::ReshapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::ReshapeOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      v186 = 110;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[195];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v186 = 90;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[208];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v186 = 86;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ReshapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::tensor::ReshapeOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::ReshapeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ScatterOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.scatter", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::ScatterOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45D40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::ScatterOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::ScatterOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::ScatterOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::ScatterOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::ScatterOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::ScatterOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::ScatterOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::ScatterOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::GatherOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::ScatterOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ScatterOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ScatterOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::ScatterOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::ScatterOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __guard v171;
  __guard v172;
  __guard v173;
  __guard v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  const char *v209;
  unint64_t v210;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v198;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v210 = 116;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<3>::Impl<Empty>]";
      v210 = 90;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[209];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[138];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[486];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[504];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == a1
      || v30 == a1
      || v32[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::ScatterOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3))
    return 0;
  v6 = a1;
  if (!mlir::tensor::ScatterOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::ScatterOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::tensor::ScatterOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::SplatOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.splat", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::SplatOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45700;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::SplatOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::SplatOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::SplatOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::SplatOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::SplatOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::SplatOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::SplatOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::SplatOpGenericAdaptorBase::SplatOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::SplatOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v186 = 116;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v186 = 86;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[138];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::SplatOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::tensor::SplatOp::verifyInvariantsImpl((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::tensor::SplatOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.unpack", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::UnPackOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E45A20;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::getCanonicalizationPatterns(uint64_t a1, uint64_t *a2)
{
  return mlir::tensor::UnPackOp::getCanonicalizationPatterns(a2);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::tensor::UnPackOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::tensor::UnPackOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::tensor::UnPackOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::tensor::UnPackOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::tensor::PackOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::getOpPropertyByteSize()
{
  return 24;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;

  if (a4)
  {
    v4 = *a4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::tensor::UnPackOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::tensor::UnPackOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] == a2[1])
    return a3[2] == a2[2];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::tensor::UnPackOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::PrefetchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::tensor::UnPackOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::UnPackOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getDpsInitsMutable;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[488], v2);
}

mlir::MutableOperandRange *mlir::detail::DestinationStyleOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getDpsInitsMutable@<X0>(uint64_t a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::OpOperand *DestMutable;
  uint64_t v5;

  v5 = a1;
  DestMutable = (mlir::OpOperand *)mlir::tensor::InsertOp::getDestMutable((mlir::tensor::InsertOp *)&v5);
  return mlir::MutableOperandRange::MutableOperandRange(a2, DestMutable);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::UnPackOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::UnPackOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::tensor::UnPackOp::getSpeculatability((mlir::tensor::UnPackOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::reifyResultShapes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[172], v2);
}

uint64_t mlir::detail::ReifyRankedShapedTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::reifyResultShapes(uint64_t a1, uint64_t a2, mlir::IndexType **a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::tensor::UnPackOp::reifyResultShapes(&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x18uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::isCompatibleReturnTypes;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[153], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::UnPackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::tensor::UnPackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::tensor::UnPackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::tensor::InsertOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "tensor.unpack";
  v16[1] = 13;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  mlir::tensor::detail::UnPackOpGenericAdaptorBase::UnPackOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::tensor::UnPackOp::fold((uint64_t)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __guard *v26;
  __guard v27;
  unsigned __int8 v28;
  void **v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  __guard *v35;
  __guard v36;
  unsigned __int8 v37;
  uint64_t *v38;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __guard v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __guard v214;
  __guard v215;
  __guard v216;
  __guard v217;
  __guard v218;
  __guard v219;
  __guard v220;
  __guard v221;
  __guard v222;
  __guard v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  const char *v260;
  unint64_t v261;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v247 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v53 = v52;
    a1 = v247;
    if (v53)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v261 = 83;
      v54 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v54)
        v55 = v54;
      else
        v55 = v261;
      v56 = &v260[v55];
      v57 = v261 - v55;
      if (v261 - v55 >= 0x12)
        v58 = 18;
      else
        v58 = v261 - v55;
      v59 = v57 - v58;
      if (v59 >= v59 - 1)
        v60 = v59 - 1;
      else
        v60 = v59;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v247;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v235 = v3;
    v248 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v62 = v61;
    v3 = v235;
    a1 = v248;
    if (v62)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v261 = 81;
      v63 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v63)
        v64 = v63;
      else
        v64 = v261;
      v65 = &v260[v64];
      v66 = v261 - v64;
      if (v261 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v261 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v235;
      a1 = v248;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v236 = v3;
    v249 = a1;
    v224 = v6;
    v6 = v224;
    v3 = v236;
    v71 = v70;
    a1 = v249;
    if (v71)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<Empty>]";
      v261 = 116;
      v72 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v72)
        v73 = v72;
      else
        v73 = v261;
      v74 = &v260[v73];
      v75 = v261 - v73;
      if (v261 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v261 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v6 = v224;
      v3 = v236;
      a1 = v249;
    }
  }
  v9 = v8[297];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v237 = v3;
    v250 = a1;
    v214 = v9;
    v225 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v214;
    v6 = v225;
    v80 = v79;
    v3 = v237;
    a1 = v250;
    if (v80)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v261 = 86;
      v81 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v81)
        v82 = v81;
      else
        v82 = v261;
      v83 = &v260[v82];
      v84 = v261 - v82;
      if (v261 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v261 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v214;
      v6 = v225;
      v3 = v237;
      a1 = v250;
    }
  }
  v12 = v11[196];
  if ((v13 & 1) == 0)
  {
    v238 = v3;
    v251 = a1;
    v215 = v9;
    v226 = v6;
    v205 = v12;
    v12 = v205;
    v9 = v215;
    v6 = v226;
    v89 = v88;
    v3 = v238;
    a1 = v251;
    if (v89)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v261 = 97;
      v90 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v90)
        v91 = v90;
      else
        v91 = v261;
      v92 = &v260[v91];
      v93 = v261 - v91;
      if (v261 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v261 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v12 = v205;
      v9 = v215;
      v6 = v226;
      v3 = v238;
      a1 = v251;
    }
  }
  v15 = v14[303];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v239 = v3;
    v252 = a1;
    v216 = v9;
    v227 = v6;
    v197 = v15;
    v206 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v197;
    v12 = v206;
    v9 = v216;
    v6 = v227;
    v98 = v97;
    v3 = v239;
    a1 = v252;
    if (v98)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v261 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v99)
        v100 = v99;
      else
        v100 = v261;
      v101 = &v260[v100];
      v102 = v261 - v100;
      if (v261 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v261 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v197;
      v12 = v206;
      v9 = v216;
      v6 = v227;
      v3 = v239;
      a1 = v252;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v240 = v3;
    v253 = a1;
    v217 = v9;
    v228 = v6;
    v198 = v15;
    v207 = v12;
    v190 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v190;
    v15 = v198;
    v12 = v207;
    v9 = v217;
    v6 = v228;
    v107 = v106;
    v3 = v240;
    a1 = v253;
    if (v107)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v261 = 89;
      v108 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v108)
        v109 = v108;
      else
        v109 = v261;
      v110 = &v260[v109];
      v111 = v261 - v109;
      if (v261 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v261 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v190;
      v15 = v198;
      v12 = v207;
      v9 = v217;
      v6 = v228;
      v3 = v240;
      a1 = v253;
    }
  }
  v21 = p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v241 = v3;
    v254 = a1;
    v218 = v9;
    v229 = v6;
    v199 = v15;
    v208 = v12;
    v184 = v21;
    v191 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v184;
    v18 = v191;
    v15 = v199;
    v12 = v208;
    v9 = v218;
    v6 = v229;
    v116 = v115;
    v3 = v241;
    a1 = v254;
    if (v116)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v261 = 86;
      v117 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v117)
        v118 = v117;
      else
        v118 = v261;
      v119 = &v260[v118];
      v120 = v261 - v118;
      if (v261 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v261 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v184;
      v18 = v191;
      v15 = v199;
      v12 = v208;
      v9 = v218;
      v6 = v229;
      v3 = v241;
      a1 = v254;
    }
  }
  v24 = v23[138];
  if ((v25 & 1) == 0)
  {
    v242 = v3;
    v255 = a1;
    v219 = v9;
    v230 = v6;
    v200 = v15;
    v209 = v12;
    v185 = v21;
    v192 = v18;
    v179 = v24;
    v24 = v179;
    v21 = v185;
    v18 = v192;
    v15 = v200;
    v12 = v209;
    v9 = v219;
    v6 = v230;
    v125 = v124;
    v3 = v242;
    a1 = v255;
    if (v125)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestinationStyleOpInterface::Trait<Empty>]";
      v261 = 97;
      v126 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v126)
        v127 = v126;
      else
        v127 = v261;
      v128 = &v260[v127];
      v129 = v261 - v127;
      if (v261 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v261 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::DestinationStyleOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestinationStyleOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v24 = v179;
      v21 = v185;
      v18 = v192;
      v15 = v200;
      v12 = v209;
      v9 = v219;
      v6 = v230;
      v3 = v242;
      a1 = v255;
    }
  }
  v27 = v26[445];
  v29 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v28 & 1) == 0)
  {
    v243 = v3;
    v256 = a1;
    v220 = v9;
    v231 = v6;
    v201 = v15;
    v210 = v12;
    v186 = v21;
    v193 = v18;
    v175 = v27;
    v180 = v24;
    v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v27 = v175;
    v24 = v180;
    v21 = v186;
    v18 = v193;
    v15 = v201;
    v12 = v210;
    v9 = v220;
    v6 = v231;
    v134 = v133;
    v3 = v243;
    a1 = v256;
    if (v134)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v261 = 95;
      v135 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v135)
        v136 = v135;
      else
        v136 = v261;
      v137 = &v260[v136];
      v138 = v261 - v136;
      if (v261 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v261 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v29 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v27 = v175;
      v24 = v180;
      v21 = v186;
      v18 = v193;
      v15 = v201;
      v12 = v210;
      v9 = v220;
      v6 = v231;
      v3 = v243;
      a1 = v256;
    }
  }
  v30 = v29[486];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v244 = v3;
    v257 = a1;
    v221 = v9;
    v232 = v6;
    v202 = v15;
    v211 = v12;
    v187 = v21;
    v194 = v18;
    v176 = v27;
    v181 = v24;
    v172 = v30;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v172;
    v27 = v176;
    v24 = v181;
    v21 = v187;
    v18 = v194;
    v15 = v202;
    v12 = v211;
    v9 = v221;
    v6 = v232;
    v143 = v142;
    v3 = v244;
    a1 = v257;
    if (v143)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v261 = 93;
      v144 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v144)
        v145 = v144;
      else
        v145 = v261;
      v146 = &v260[v145];
      v147 = v261 - v145;
      if (v261 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v261 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v172;
      v27 = v176;
      v24 = v181;
      v21 = v187;
      v18 = v194;
      v15 = v202;
      v12 = v211;
      v9 = v221;
      v6 = v232;
      v3 = v244;
      a1 = v257;
    }
  }
  v33 = v32[158];
  if ((v34 & 1) == 0)
  {
    v245 = v3;
    v258 = a1;
    v222 = v9;
    v233 = v6;
    v203 = v15;
    v212 = v12;
    v188 = v21;
    v195 = v18;
    v177 = v27;
    v182 = v24;
    v170 = v33;
    v173 = v30;
    v33 = v170;
    v30 = v173;
    v27 = v177;
    v24 = v182;
    v21 = v188;
    v18 = v195;
    v15 = v203;
    v12 = v212;
    v9 = v222;
    v6 = v233;
    v152 = v151;
    v3 = v245;
    a1 = v258;
    if (v152)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ReifyRankedShapedTypeOpInterface::Trait<Empty>]";
      v261 = 102;
      v153 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v153)
        v154 = v153;
      else
        v154 = v261;
      v155 = &v260[v154];
      v156 = v261 - v154;
      if (v261 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v261 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::ReifyRankedShapedTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ReifyRankedShapedTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v33 = v170;
      v30 = v173;
      v27 = v177;
      v24 = v182;
      v21 = v188;
      v18 = v195;
      v15 = v203;
      v12 = v212;
      v9 = v222;
      v6 = v233;
      v3 = v245;
      a1 = v258;
    }
  }
  v36 = v35[483];
  v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v246 = v3;
    v259 = a1;
    v223 = v9;
    v234 = v6;
    v204 = v15;
    v213 = v12;
    v189 = v21;
    v196 = v18;
    v178 = v27;
    v183 = v24;
    v171 = v33;
    v174 = v30;
    v169 = v36;
    v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v36 = v169;
    v33 = v171;
    v30 = v174;
    v27 = v178;
    v24 = v183;
    v21 = v189;
    v18 = v196;
    v15 = v204;
    v12 = v213;
    v9 = v223;
    v6 = v234;
    v161 = v160;
    v3 = v246;
    a1 = v259;
    if (v161)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v261 = 90;
      v162 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v162)
        v163 = v162;
      else
        v163 = v261;
      v164 = &v260[v163];
      v165 = v261 - v163;
      if (v261 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v261 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v36 = v169;
      v33 = v171;
      v30 = v174;
      v27 = v178;
      v24 = v183;
      v21 = v189;
      v18 = v196;
      v15 = v204;
      v12 = v213;
      v9 = v223;
      v6 = v234;
      v3 = v246;
      a1 = v259;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == a1
      || v33 == (_QWORD)a1
      || v36 == (_QWORD)a1
      || v38[152] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::tensor::UnPackOp::print((mlir::tensor::UnPackOp *)&v7, a3);
}

BOOL mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::tensor::UnPackOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::tensor::UnPackOp::verify((mlir::tensor::UnPackOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::tensor::UnPackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::RankedTensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::DestinationStyleOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ReifyRankedShapedTypeOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  return mlir::detail::verifyDestinationStyleOpInterface(a1, a2)
      && mlir::detail::verifyInferredResultTypes(a1, v3) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"tensor.yield", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::tensor::YieldOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E457C8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::tensor::YieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::tensor::YieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::YieldOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::tensor::YieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getSuccessorRegions;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[173], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  mlir::Operation *v3;

  v3 = a1;
  return mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands(&v3, a2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::tensor::YieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  __guard *v29;
  __guard v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __guard v157;
  __guard v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  const char *v234;
  unint64_t v235;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v222;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v235 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[181];
  v14 = &unk_1EDC07000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_1EDC07000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::tensor::GenerateOp, mlir::t"
             "ensor::PadOp>::Impl<Empty>]";
      v235 = 134;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_1EDC07000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = (void *)v14[31];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = p_vtable[486];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[504];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[158];
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[459];
  v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v235 = 82;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[182];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v235 = 84;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == (_QWORD)a1
      || v35[190] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::YieldOp>,mlir::OpTrait::ZeroResults<mlir::tensor::YieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::YieldOp>,mlir::OpTrait::OneOperand<mlir::tensor::YieldOp>,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl<mlir::tensor::YieldOp>,mlir::OpTrait::OpInvariants<mlir::tensor::YieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::YieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::YieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::YieldOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::tensor::YieldOp>,mlir::OpTrait::ReturnLike<mlir::tensor::YieldOp>,mlir::OpTrait::IsTerminator<mlir::tensor::YieldOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::tensor::YieldOp>,mlir::OpTrait::ZeroResults<mlir::tensor::YieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::tensor::YieldOp>,mlir::OpTrait::OneOperand<mlir::tensor::YieldOp>,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl<mlir::tensor::YieldOp>,mlir::OpTrait::OpInvariants<mlir::tensor::YieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::tensor::YieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::tensor::YieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::tensor::YieldOp>,mlir::RegionBranchTerminatorOpInterface::Trait<mlir::tensor::YieldOp>,mlir::OpTrait::ReturnLike<mlir::tensor::YieldOp>,mlir::OpTrait::IsTerminator<mlir::tensor::YieldOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::OpTrait::impl *v9;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl<mlir::tensor::YieldOp>::verifyTrait((uint64_t *)a1)
    && (v9 = a1, mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v9, v6)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl<mlir::tensor::YieldOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  void *v4;
  uint64_t v6;
  __int128 *v7;
  char *v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char **v16;
  uint64_t v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  char *v32;
  const char *v33;
  const void **v34;
  __int16 v35;
  const char *v36[3];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      v4 = *(void **)(*(_QWORD *)(ParentOp + 48) + 16);
      if (v4 == &mlir::detail::TypeIDResolver<mlir::tensor::GenerateOp,void>::id
        || v4 == &mlir::detail::TypeIDResolver<mlir::tensor::PadOp,void>::id)
      {
        return 1;
      }
    }
  }
  v35 = 257;
  mlir::Operation::emitOpError(a1, &v34, (uint64_t)v40);
  if (v40[0])
  {
    LODWORD(v37) = 3;
    *((_QWORD *)&v37 + 1) = "expects parent op ";
    *(_QWORD *)&v38 = 18;
    v7 = &v37;
    v8 = (char *)v41;
    if (v42 >= v43)
    {
      v28 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        v31 = (char *)&v37 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v8 = (char *)v41;
        v7 = (__int128 *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
        v7 = &v37;
        v8 = (char *)v41;
      }
    }
    v9 = &v8[24 * v42];
    v10 = *v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    ++v42;
  }
  v33 = "to be one of '";
  v11 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v40, &v33);
  v12 = (uint64_t)v11;
  v37 = xmmword_1E0E54AE0;
  v38 = *(_OWORD *)&off_1E0E54AF0;
  if (*v11)
  {
    v36[0] = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)&v37, (uint64_t)&v39, (uint64_t)(v11 + 1), (uint64_t)(v11 + 1), v36);
    if (*(_QWORD *)v12)
    {
      v13 = v12 + 24;
      v14 = *(_QWORD *)(v12 + 24);
      LODWORD(v36[0]) = 3;
      v36[1] = "'";
      v36[2] = (const char *)1;
      v15 = *(unsigned int *)(v12 + 32);
      v16 = v36;
      if (v15 >= *(_DWORD *)(v12 + 36))
      {
        v29 = v15 + 1;
        v30 = v14 + 24 * v15 > (unint64_t)v36;
        if (v14 <= (unint64_t)v36 && v30)
        {
          v32 = (char *)v36 - v14;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 40), v29, 24);
          v14 = *(_QWORD *)(v12 + 24);
          v16 = (const char **)&v32[v14];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v12 + 40), v29, 24);
          v14 = *(_QWORD *)(v12 + 24);
          v16 = v36;
        }
      }
      v17 = v14 + 24 * *(unsigned int *)(v12 + 32);
      v18 = *(_OWORD *)v16;
      *(_QWORD *)(v17 + 16) = v16[2];
      *(_OWORD *)v17 = v18;
      ++*(_DWORD *)(v12 + 32);
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v12);
  if (v40[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  if (v49)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v48;
      v21 = __p;
      if (v48 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v48 = v19;
      operator delete(v21);
    }
    v22 = v45;
    if (v45)
    {
      v23 = v46;
      v24 = v45;
      if (v46 != v45)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v45;
      }
      v46 = v22;
      operator delete(v24);
    }
    if (v41 != v44)
      free(v41);
  }
  return v6;
}

uint64_t mlir::Op<mlir::tensor::YieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::tensor::GenerateOp,mlir::tensor::PadOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void `anonymous namespace'::TensorInlinerInterface::~TensorInlinerInterface(_anonymous_namespace_::TensorInlinerInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t `anonymous namespace'::TensorInlinerInterface::isLegalToInline()
{
  return 1;
}

{
  return 1;
}

mlir::GenericProgramPoint *mlir::tensor::TensorDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  mlir::GenericProgramPoint *result;
  _QWORD *v10;
  uint64_t v11;

  v11 = a4;
  result = mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
  if (!result)
  {
    if (mlir::complex::ConstantOp::isBuildableWith((uint64_t)a3, a4))
    {
      v10 = a3;
      return mlir::OpBuilder::create<mlir::complex::ConstantOp,mlir::Type &,mlir::ArrayAttr>(a2, a5, &v11, (uint64_t *)&v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t mlir::tensor::getMixedSize(mlir::IndexType **a1, uint64_t a2, uint64_t a3, mlir::MLIRContext *a4)
{
  unsigned int v4;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t Value;
  unint64_t v12;
  mlir::MLIRContext *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  void *v18[2];
  _QWORD v19[2];

  v4 = a4;
  v19[1] = *MEMORY[0x1E0C80C00];
  v13 = a4;
  v14 = a3;
  v12 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = v17;
  v16 = 0x600000000;
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12) + 8 * a4) != 0x8000000000000000)
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
    v8 = mlir::Builder::getIndexAttr(a1, *(mlir::MLIRContext **)(Value + 8 * v4)) & 0xFFFFFFFFFFFFFFFBLL;
    v9 = v15;
    if (v15 == v17)
      return v8;
LABEL_7:
    free(v9);
    return v8;
  }
  v18[0] = v19;
  v18[1] = (void *)0x100000000;
  mlir::OpBuilder::createOrFold<mlir::tensor::DimOp,mlir::Value &,long long &>((uint64_t)a1, (uint64_t)v18, a2, &v14, &v13);
  v7 = *(_QWORD *)v18[0];
  if (v18[0] != v19)
    free(v18[0]);
  v8 = v7 | 4;
  v9 = v15;
  if (v15 != v17)
    goto LABEL_7;
  return v8;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::EmptyOp,llvm::SmallVector<mlir::OpFoldResult,6u> &,mlir::Type>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.empty", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"tensor.empty";
    v18[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::tensor::EmptyOp::build(v11, (uint64_t)v20, *(uint64_t **)a3, *(unsigned int *)(a3 + 8), *a4, 0);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::EmptyOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

BOOL mlir::tensor::isSameTypeWithoutEncoding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *Value;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t RHS;
  uint64_t v11;
  uint64_t v12;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v2 = a1;
  else
    v2 = 0;
  v12 = v2;
  if (!v2)
    return a1 == a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v3 = a2;
  else
    v3 = 0;
  v11 = v3;
  if (!v3)
    return 0;
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
  v6 = v5;
  v7 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v11);
  if (v6 != v8 || memcmp(Value, v7, 8 * v6))
    return 0;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v12);
  return RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v11);
}

BOOL mlir::tensor::BitcastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  _QWORD *v13;
  void *v14;
  _QWORD *v16;
  BOOL v17;
  int IntOrFloatBitWidth;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[5];

  result = 0;
  if (a2 == 1 && a4 == 1)
  {
    v21[3] = v4;
    v21[4] = v5;
    v9 = mlir::TypeRange::dereference_iterator(a1, 0);
    v10 = mlir::TypeRange::dereference_iterator(a3, 0);
    v11 = *(void **)(*(_QWORD *)v9 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v13 = (_QWORD *)v9;
    }
    else
    {
      v13 = 0;
    }
    v20 = v13;
    v14 = *(void **)(*(_QWORD *)v10 + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v16 = (_QWORD *)v10;
    }
    else
    {
      v16 = 0;
    }
    v19 = v16;
    if (v13)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (v17)
      return 0;
    v21[0] = mlir::TensorType::getElementType((mlir::TensorType *)&v20);
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v21);
    v21[0] = mlir::TensorType::getElementType((mlir::TensorType *)&v19);
    return IntOrFloatBitWidth == mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v21)
        && mlir::verifyCompatibleShape(v20, v19);
  }
  return result;
}

void mlir::tensor::BitcastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.bitcast", 14, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E18230;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ChainedTensorBitcast]";
  v39 = 93;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::tensor::preservesStaticInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t RHS;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v2 = a1;
  else
    v2 = 0;
  v20 = v2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v3 = a2;
  else
    v3 = 0;
  v19 = v3;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v19))
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
    v9 = v8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
    if (v9 == v10)
    {
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
      v13 = v12;
      v14 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
      v5 = 1;
      if (v13 && v15)
      {
        v16 = 8 * v15 - 8;
        v17 = 8 * v13 - 8;
        while (*Value == 0x8000000000000000 || *v14 != 0x8000000000000000)
        {
          v5 = 1;
          if (v17)
          {
            ++Value;
            ++v14;
            v18 = v16;
            v16 -= 8;
            v17 -= 8;
            if (v18)
              continue;
          }
          return v5;
        }
        return 0;
      }
      return v5;
    }
  }
  return 0;
}

uint64_t mlir::tensor::foldTensorCast(mlir::tensor *this, mlir::Operation *a2)
{
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  if ((*((_BYTE *)this + 46) & 0x80) != 0 && (v2 = *((unsigned int *)this + 17), (_DWORD)v2))
  {
    v3 = 0;
    v4 = (uint64_t *)*((_QWORD *)this + 9);
    v5 = 32 * v2;
    do
    {
      v12 = v4[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (DefiningOp)
      {
        v7 = DefiningOp;
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CastOp,void>::id)
        {
          if (mlir::tensor::preservesStaticInformation(*(_QWORD *)(DefiningOp - 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            v8 = *(uint64_t **)(*(_QWORD *)(v7 + 72) + 24);
            v9 = (uint64_t *)v4[1];
            if (v9)
            {
              *v9 = *v4;
              if (*v4)
                *(_QWORD *)(*v4 + 8) = v4[1];
            }
            v4[3] = (uint64_t)v8;
            v10 = *v8;
            *v4 = *v8;
            v4[1] = (uint64_t)v8;
            if (v10)
              *(_QWORD *)(v10 + 8) = v4;
            *v8 = (uint64_t)v4;
            v3 = 1;
          }
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL mlir::tensor::CastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  _QWORD *v13;
  void *v14;
  _QWORD *v16;
  BOOL v17;
  uint64_t ElementType;
  _QWORD *v19;
  _QWORD *v20[5];

  result = 0;
  if (a2 == 1 && a4 == 1)
  {
    v20[3] = v4;
    v20[4] = v5;
    v9 = mlir::TypeRange::dereference_iterator(a1, 0);
    v10 = mlir::TypeRange::dereference_iterator(a3, 0);
    v11 = *(void **)(*(_QWORD *)v9 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v13 = (_QWORD *)v9;
    }
    else
    {
      v13 = 0;
    }
    v20[0] = v13;
    v14 = *(void **)(*(_QWORD *)v10 + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v16 = (_QWORD *)v10;
    }
    else
    {
      v16 = 0;
    }
    v19 = v16;
    if (v13)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (!v17
      && (ElementType = mlir::TensorType::getElementType((mlir::TensorType *)v20),
          ElementType == mlir::TensorType::getElementType((mlir::TensorType *)&v19)))
    {
      return mlir::verifyCompatibleShape(v20[0], v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::tensor::CastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.cast", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E16630;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ChainedTensorCast]";
  v73 = 90;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.cast", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E18F90;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TensorCastExtractSlice]";
  v73 = 95;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v38;
  v42 = (uint64_t)(v56 + 8);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::tensor::DimOp::build(mlir::IndexType **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::IndexType *v6;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v8;
  unsigned int v9;
  uint64_t IndexType;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::IndexType *v17;
  unint64_t v18;
  unint64_t v19;
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v15 = a4;
  v16 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  __src = v22;
  v21 = 0x200000000;
  v6 = *a1;
  mlir::ValueRange::ValueRange(&v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if ((_DWORD)v21 != 1)
  {
    if (!(_DWORD)v21)
    {
      if (HIDWORD(v21))
      {
        v9 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v9, 8 - 8 * v9);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v22, 1uLL, 8);
      v9 = v21;
      if ((_DWORD)v21 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v21) = 1;
  }
  v17 = v6;
  IndexType = mlir::Builder::getIndexType(&v17, v8);
  *(_QWORD *)__src = IndexType;
  v11 = __src;
  v12 = v21;
  v13 = *(unsigned int *)(a2 + 72);
  v14 = v13 + v21;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  if (__src != v22)
    free(__src);
}

BOOL mlir::tensor::DimOp::getSpeculatability(mlir::tensor::DimOp *this)
{
  char v2;

  mlir::getConstantIntValue(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) | 4);
  if (!v2)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
  return 0;
}

unint64_t mlir::tensor::DimOp::fold(mlir::tensor **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t Int;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t DefiningOp;
  uint64_t v10;
  mlir::Operation *v11;
  uint64_t v12;
  uint64_t Value;
  uint64_t v14;
  void *v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  mlir::Operation *v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *__p;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  if (!v2)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v2 = 0;
  v47 = v2;
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = 0;
  v46 = v4;
  if (!v4)
    return 0;
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v47);
  if (Int < 0)
    return 0;
  v6 = Int;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
  if (v6 >= v7)
    return 0;
  v8 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v47);
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46) + 8 * v8) != 0x8000000000000000)
  {
    __p = (void *)mlir::Attribute::getContext((mlir::tensor *)((char *)*a1 + 24));
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
    v14 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v47);
    return mlir::Builder::getIndexAttr((mlir::IndexType **)&__p, *(mlir::MLIRContext **)(Value + 8 * v14)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  __p = *(void **)(*((_QWORD *)*a1 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  v10 = DefiningOp;
  if (DefiningOp
    && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::GenerateOp,void>::id)
  {
    if (*(_DWORD *)(DefiningOp + 36))
      v23 = DefiningOp - 16;
    else
      v23 = 0;
    __p = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
      v24 = *(_QWORD *)(v10 + 72);
    else
      v24 = 0;
    v25 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__p);
    v27 = v26;
    v28 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v47);
    if (v27 >= v28)
      v29 = v28;
    else
      v29 = v27;
    if (v29)
    {
      v30 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v30 < 3)
      {
        v31 = 0;
        v32 = (uint64_t *)v25;
        goto LABEL_50;
      }
      v33 = v30 + 1;
      v34 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v32 = (uint64_t *)(v25 + 8 * v34);
      v35 = (int64x2_t *)(v25 + 16);
      v36 = 0uLL;
      v37 = vdupq_n_s64(0x8000000000000000);
      v38 = v34;
      v39 = 0uLL;
      do
      {
        v36 = vsubq_s64(v36, vceqq_s64(v35[-1], v37));
        v39 = vsubq_s64(v39, vceqq_s64(*v35, v37));
        v35 += 2;
        v38 -= 4;
      }
      while (v38);
      v31 = vaddvq_s64(vaddq_s64(v39, v36));
      if (v33 != v34)
      {
LABEL_50:
        v40 = (uint64_t *)(v25 + 8 * v29);
        do
        {
          v41 = *v32++;
          if (v41 == 0x8000000000000000)
            ++v31;
        }
        while (v32 != v40);
      }
    }
    else
    {
      v31 = 0;
    }
    return *(_QWORD *)(v24 + 32 * v31 + 24) | 4;
  }
  mlir::IntegerAttr::getValue(&v47, (llvm::APInt *)&__p);
  if (v45 > 0x40)
  {
    v12 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v12) = (_DWORD)__p;
  }
  if (v10)
  {
    v16 = *(void **)(*(_QWORD *)(v10 + 48) + 16);
    v17 = v16 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id;
    v18 = v16 == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id ? (void *)v10 : 0;
    __p = v18;
    if (v17)
    {
      v19 = *(_DWORD *)(v10 + 36) ? v10 - 16 : 0;
      v43 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
      v21 = v20;
      v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)__p + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
      if (v21 == v11
        && mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::ExtractSliceOp>::isDynamicSize((uint64_t)&__p, v12))
      {
        return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::SubViewOp>::getDynamicSize((uint64_t)&__p, v12) | 4;
      }
    }
  }
  if (!mlir::tensor::foldTensorCast(*a1, v11))
    return 0;
  if (*((_DWORD *)*a1 + 9))
    v22 = (uint64_t)*a1 - 16;
  else
    v22 = 0;
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0) | 4;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::tensor::ExtractSliceOp>::isDynamicSize(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v2 = 0;
  v4 = *(_QWORD *)(v2 + 8);
  return *(_QWORD *)(mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v4)
                   + 8 * a2) == 0x8000000000000000;
}

void mlir::tensor::DimOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.dim", 10, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E151D8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DimOfCastOp]";
  v73 = 84;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.dim", 10, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E15F50;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DimOfDestStyleOp]";
  v73 = 89;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v38;
  v42 = (uint64_t)(v56 + 8);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::tensor::EmptyOp::build(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15[2];
  void *v16;
  uint64_t v17;
  _BYTE v18[48];
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x600000000;
  v16 = v18;
  v17 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a3, a4, (uint64_t)&v16, (uint64_t)&v19);
  v9 = v19;
  v10 = v20;
  mlir::ValueRange::ValueRange(v15, (uint64_t)v16, v17);
  v11 = v15[0];
  v12 = v15[1];
  v13 = mlir::RankedTensorType::get((uint64_t)v9, v10, a5, a6);
  mlir::OperationState::addOperands(a2, v11, v12);
  v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 72);
  if (v16 != v18)
    free(v16);
  if (v19 != v21)
    free(v19);
}

uint64_t mlir::tensor::EmptyOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t Value;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t *v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  int *v41;
  char *v42;
  char *v43;
  __int128 v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  unint64_t v61;
  const void **v62;
  __int16 v63;
  int v64;
  const char *v65;
  uint64_t v66;
  _QWORD v67[3];
  void *v68;
  unsigned int v69;
  unsigned int v70;
  _BYTE v71[96];
  void *v72;
  _QWORD *v73;
  void *__p;
  _QWORD **v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  v67[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v5 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v5 >= 3)
  {
    v8 = v5 + 1;
    v9 = (v5 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v7 = (uint64_t *)(Value + 8 * v9);
    v10 = (int64x2_t *)(Value + 16);
    v11 = 0uLL;
    v12 = vdupq_n_s64(0x8000000000000000);
    v13 = v9;
    v14 = 0uLL;
    do
    {
      v11 = vsubq_s64(v11, vceqq_s64(v10[-1], v12));
      v14 = vsubq_s64(v14, vceqq_s64(*v10, v12));
      v10 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 = vaddvq_s64(vaddq_s64(v14, v11));
    if (v8 == v9)
      goto LABEL_14;
  }
  else
  {
    v6 = 0;
    v7 = (uint64_t *)Value;
  }
  do
  {
    v15 = *v7++;
    if (v15 == 0x8000000000000000)
      ++v6;
  }
  while (v7 != (uint64_t *)(Value + 8 * v4));
LABEL_14:
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    if (v6 == *((_DWORD *)*this + 17))
      return 1;
  }
  else if (!v6)
  {
    return 1;
  }
  v62 = (const void **)"incorrect number of dynamic sizes, has ";
  v63 = 259;
  mlir::OpState::emitOpError(this, &v62, (uint64_t)v67);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v17 = (const char *)*((unsigned int *)*this + 17);
    if (!v67[0])
      goto LABEL_24;
  }
  else
  {
    v17 = 0;
    if (!v67[0])
      goto LABEL_24;
  }
  v64 = 5;
  v65 = v17;
  v18 = &v64;
  v19 = (char *)v68;
  if (v69 >= v70)
  {
    v54 = v69 + 1;
    if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
    {
      v58 = (char *)&v64 - (_BYTE *)v68;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
      v19 = (char *)v68;
      v18 = (int *)((char *)v68 + v58);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
      v18 = &v64;
      v19 = (char *)v68;
    }
  }
  v20 = &v19[24 * v69];
  v21 = *(_OWORD *)v18;
  *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
  *(_OWORD *)v20 = v21;
  v22 = ++v69;
  if (v67[0])
  {
    v64 = 3;
    v65 = ", expected ";
    v66 = 11;
    v23 = &v64;
    v24 = (char *)v68;
    if (v22 >= v70)
    {
      v56 = v22 + 1;
      v57 = (char *)v68 + 24 * v22 > (char *)&v64;
      if (v68 <= &v64 && v57)
      {
        v60 = (char *)&v64 - (_BYTE *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v24 = (char *)v68;
        v23 = (int *)((char *)v68 + v60);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v56, 24);
        v23 = &v64;
        v24 = (char *)v68;
      }
    }
    v25 = &v24[24 * v69];
    v26 = *(_OWORD *)v23;
    *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v25 = v26;
    ++v69;
  }
LABEL_24:
  if (*((_DWORD *)*this + 9))
    v27 = (uint64_t)(*this - 2);
  else
    v27 = 0;
  v61 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v28 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
  if (v29)
  {
    v30 = (v29 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v30 < 3)
    {
      v31 = 0;
      v32 = (uint64_t *)v28;
      goto LABEL_34;
    }
    v33 = v30 + 1;
    v34 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v32 = (uint64_t *)(v28 + 8 * v34);
    v35 = (int64x2_t *)(v28 + 16);
    v36 = 0uLL;
    v37 = vdupq_n_s64(0x8000000000000000);
    v38 = v34;
    v39 = 0uLL;
    do
    {
      v36 = vsubq_s64(v36, vceqq_s64(v35[-1], v37));
      v39 = vsubq_s64(v39, vceqq_s64(*v35, v37));
      v35 += 2;
      v38 -= 4;
    }
    while (v38);
    v31 = vaddvq_s64(vaddq_s64(v39, v36));
    if (v33 != v34)
    {
      do
      {
LABEL_34:
        v40 = *v32++;
        if (v40 == 0x8000000000000000)
          ++v31;
      }
      while (v32 != (uint64_t *)(v28 + 8 * v29));
    }
  }
  else
  {
    v31 = 0;
  }
  if (v67[0])
  {
    v64 = 2;
    v65 = (const char *)v31;
    v41 = &v64;
    v42 = (char *)v68;
    if (v69 >= v70)
    {
      v55 = v69 + 1;
      if (v68 <= &v64 && (char *)v68 + 24 * v69 > (char *)&v64)
      {
        v59 = (char *)&v64 - (_BYTE *)v68;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
        v42 = (char *)v68;
        v41 = (int *)((char *)v68 + v59);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v55, 24);
        v41 = &v64;
        v42 = (char *)v68;
      }
    }
    v43 = &v42[24 * v69];
    v44 = *(_OWORD *)v41;
    *((_QWORD *)v43 + 2) = *((_QWORD *)v41 + 2);
    *(_OWORD *)v43 = v44;
    ++v69;
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v67);
  if (v67[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v67);
  if (v76)
  {
    v45 = (_QWORD **)__p;
    if (__p)
    {
      v46 = v75;
      v47 = __p;
      if (v75 != __p)
      {
        do
          v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
        while (v46 != v45);
        v47 = __p;
      }
      v75 = v45;
      operator delete(v47);
    }
    v48 = v72;
    if (v72)
    {
      v49 = v73;
      v50 = v72;
      if (v73 != v72)
      {
        do
        {
          v52 = (void *)*--v49;
          v51 = v52;
          *v49 = 0;
          if (v52)
            operator delete[](v51);
        }
        while (v49 != v48);
        v50 = v72;
      }
      v73 = v48;
      operator delete(v50);
    }
    if (v68 != v71)
      free(v68);
  }
  return v16;
}

uint64_t mlir::tensor::EmptyOp::reifyResultShapes(uint64_t a1, mlir::IndexType **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Value;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[7];

  v31[6] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v6 = *(_QWORD *)a1 - 16;
  else
    v6 = 0;
  v28 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  v29 = v31;
  v30 = 0x600000000;
  if (v7)
  {
    v8 = v7;
    if (v7 < 7)
    {
      v9 = 0;
      v10 = v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v7, 8);
      v9 = v30;
      v10 = v8 - v30;
      if (v8 == v30)
        goto LABEL_10;
    }
    bzero((char *)v29 + 8 * v9, 8 * v10);
LABEL_10:
    LODWORD(v30) = v8;
  }
  v11 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v11)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(a3, 1 - v11, (unint64_t)&v29);
LABEL_18:
    v15 = v29;
    if (v29 == v31)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((_DWORD)v11 == 1)
    goto LABEL_18;
  v12 = *(_QWORD **)a3;
  v13 = v11 << 6;
  do
  {
    v14 = *(char **)((char *)v12 + v13 - 64);
    if ((char *)v12 + v13 - 48 != v14)
      free(v14);
    v13 -= 64;
  }
  while (v13 != 64);
  *(_DWORD *)(a3 + 8) = 1;
  v15 = v29;
  if (v29 != v31)
LABEL_19:
    free(v15);
LABEL_20:
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v16 = *(_QWORD *)a1 - 16;
  else
    v16 = 0;
  v29 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 36))
        v25 = *(_QWORD *)a1 - 16;
      else
        v25 = 0;
      v29 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29) + 8 * v19) == 0x8000000000000000)
      {
        v26 = v18++;
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v26 + 24) | 4;
      }
      else
      {
        if (*(_DWORD *)(*(_QWORD *)a1 + 36))
          v20 = *(_QWORD *)a1 - 16;
        else
          v20 = 0;
        v29 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
        v22 = mlir::Builder::getIndexAttr(a2, *(mlir::MLIRContext **)(Value + 8 * v19)) & 0xFFFFFFFFFFFFFFFBLL;
      }
      *(_QWORD *)(**(_QWORD **)a3 + 8 * v19++) = v22;
      if (*(_DWORD *)(*(_QWORD *)a1 + 36))
        v23 = *(_QWORD *)a1 - 16;
      else
        v23 = 0;
      v29 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    }
    while (v19 < v24);
  }
  return 1;
}

uint64_t mlir::tensor::EmptyOp::getMixedSizes@<X0>(mlir::tensor::EmptyOp *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Value;
  uint64_t IndexAttr;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  mlir::IndexType *v20[4];

  v4 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v20[0] = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  memset(&v20[1], 0, 24);
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v5 = *(_QWORD *)this - 16;
  else
    v5 = 0;
  v19 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)this + 36))
        v17 = *(_QWORD *)this - 16;
      else
        v17 = 0;
      v19 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19) + 8 * v9) == 0x8000000000000000)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * v8 + 24);
        v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13 + 1, 8);
          v13 = *(unsigned int *)(a2 + 8);
        }
        ++v8;
        v14 = v18 | 4;
      }
      else
      {
        if (*(_DWORD *)(*(_QWORD *)this + 36))
          v10 = *(_QWORD *)this - 16;
        else
          v10 = 0;
        v19 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
        IndexAttr = mlir::Builder::getIndexAttr(v20, *(mlir::MLIRContext **)(Value + 8 * v9));
        v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13 + 1, 8);
          v13 = *(unsigned int *)(a2 + 8);
        }
        v14 = IndexAttr & 0xFFFFFFFFFFFFFFFBLL;
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v14;
      ++*(_DWORD *)(a2 + 8);
      ++v9;
      if (*(_DWORD *)(*(_QWORD *)this + 36))
        v15 = *(_QWORD *)this - 16;
      else
        v15 = 0;
      v19 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
    }
    while (v9 < v16);
  }
  return result;
}

void mlir::tensor::EmptyOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.cast", 11, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E19640;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldEmptyTensorWithCastOp]";
  v107 = 98;
  v9 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v9)
    v10 = v9;
  else
    v10 = v107;
  v11 = &v106[v10];
  v12 = v107 - v10;
  if (v107 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v107 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_116;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_117;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_120;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.dim", 10, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E19400;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldEmptyTensorWithDimOp]";
  v107 = 97;
  v43 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v43)
    v44 = v43;
  else
    v44 = v107;
  v45 = &v106[v44];
  v46 = v107 - v44;
  if (v107 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v107 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_116;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_117;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_121;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_121:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"tensor.empty", 12, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E1A1A8;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ReplaceEmptyTensorStaticShapeDims]";
  v107 = 106;
  v77 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v77)
    v78 = v77;
  else
    v78 = v107;
  v79 = &v106[v78];
  v80 = v107 - v78;
  if (v107 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v107 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
LABEL_116:
    abort();
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (!v88)
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
    goto LABEL_112;
  }
  if (v88 >> 61)
LABEL_117:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v89 = (char *)operator new(8 * v88);
  v90 = &v89[8 * v85];
  v91 = &v89[8 * v88];
  *(_QWORD *)v90 = v72;
  v76 = (uint64_t)(v90 + 8);
  v92 = (char *)(v75 - v84);
  if (v75 != v84)
  {
LABEL_100:
    v93 = (unint64_t)(v92 - 8);
    if (v93 < 0x78
      || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
    {
      goto LABEL_122;
    }
    v94 = (v93 >> 3) + 1;
    v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    v96 = &v75[-v95];
    v90 -= v95;
    v97 = &v89[8 * v85 - 16];
    v98 = v75 - 16;
    v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *((_OWORD *)v98 - 1);
      v100 = *(_OWORD *)v98;
      *((_OWORD *)v98 - 1) = 0uLL;
      *(_OWORD *)v98 = 0uLL;
      *((_OWORD *)v97 - 1) = v101;
      *(_OWORD *)v97 = v100;
      v97 -= 32;
      v98 -= 32;
      v99 -= 4;
    }
    while (v99);
    v75 = v96;
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_122:
      do
      {
        v102 = *((_QWORD *)v75 - 1);
        v75 -= 8;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v90 - 1) = v102;
        v90 -= 8;
      }
      while (v75 != v84);
    }
    v75 = (char *)a1[1];
    v103 = (char *)a1[2];
    a1[1] = v90;
    a1[2] = v76;
    a1[3] = v91;
    while (v103 != v75)
    {
      v105 = *((_QWORD *)v103 - 1);
      v103 -= 8;
      v104 = v105;
      *(_QWORD *)v103 = 0;
      if (v105)
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    }
    goto LABEL_113;
  }
LABEL_112:
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
}

uint64_t mlir::tensor::ExtractOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "extracted", 9);
}

uint64_t mlir::tensor::ExtractOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void **v13;
  __int16 v14;
  unint64_t v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    if (v2 == *((unsigned int *)*this + 17) - 1)
      return 1;
  }
  else if (v2 == -1)
  {
    return 1;
  }
  v13 = (const void **)"incorrect number of indices for extract_element";
  v14 = 259;
  mlir::OpState::emitOpError(this, &v13, (uint64_t)v16);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  if (v23)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v22;
      v6 = __p;
      if (v22 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v22 = v4;
      operator delete(v6);
    }
    v7 = v19;
    if (v19)
    {
      v8 = v20;
      v9 = v19;
      if (v20 != v19)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v19;
      }
      v20 = v7;
      operator delete(v9);
    }
    if (v17 != &v18)
      free(v17);
  }
  return v3;
}

unint64_t mlir::tensor::ExtractOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  int isSplat;
  uint64_t v8;
  uint64_t v9;
  uint64_t NumElements;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t Int;
  uint64_t v15;
  uint64_t DefiningOp;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t FlattenedIndex;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  void *v49[2];
  _QWORD v50[10];

  v50[9] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 40);
  v5 = *v4;
  if (*v4)
  {
    if (mlir::DenseElementsAttr::classof(*v4))
      v6 = (void *)v5;
    else
      v6 = 0;
    v49[0] = v6;
    if (v6)
    {
      isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v49);
      v8 = isSplat ? v5 : 0;
      v47 = v8;
      if ((isSplat & 1) != 0)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47);
        mlir::NamedAttribute::NamedAttribute(v49, v47, 0);
        v9 = v47;
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
        mlir::NamedAttribute::NamedAttribute(&v39, v9, NumElements);
        return mlir::DenseElementsAttr::AttributeElementIterator::operator*(v49) & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    v4 = *(uint64_t **)(a2 + 40);
  }
  v49[0] = v50;
  v49[1] = (void *)0x800000000;
  if (8 * *(_QWORD *)(a2 + 48) != 8)
  {
    v12 = (unint64_t *)(v4 + 1);
    v13 = 8 * ((8 * *(_QWORD *)(a2 + 48) - 8) >> 3);
    while (*v12 && *(_UNKNOWN **)(*(_QWORD *)*v12 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v39 = *v12;
      Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v39);
      v15 = LODWORD(v49[1]);
      if (LODWORD(v49[1]) >= (unint64_t)HIDWORD(v49[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v49, v50, LODWORD(v49[1]) + 1, 8);
        v15 = LODWORD(v49[1]);
      }
      *((_QWORD *)v49[0] + v15) = Int;
      ++LODWORD(v49[1]);
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_19:
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (DefiningOp)
  {
    v17 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v18 = v17 == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id ? DefiningOp : 0;
    if (v17 == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
    {
      v39 = *(_QWORD *)(DefiningOp - 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
      v21 = 0;
      v22 = v20 - 1;
      if ((((_DWORD)v20 - 1) & 0x80000000) == 0)
      {
        v23 = (v20 - 1);
        v24 = 1;
        do
        {
          if (v22 > v23)
            v24 *= *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39) + 8 * v23);
          v21 += v24 * *((_QWORD *)v49[0] + v23);
        }
        while (v23-- > 0);
      }
      if ((*(_BYTE *)(v18 + 46) & 0x80) != 0)
      {
        v11 = 0;
        if ((v21 & 0x80000000) == 0 && (signed int)v21 < *(_DWORD *)(v18 + 68))
          v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 72) + 32 * v21 + 24) | 4);
        goto LABEL_41;
      }
      goto LABEL_40;
    }
  }
  v11 = **(_QWORD ***)(a2 + 40);
  if (!v11)
    goto LABEL_41;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8))
  {
    v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v11 + 8);
    v45 = v11;
    v46 = v19;
    if (mlir::ElementsAttr::isValidIndex((uint64_t)v11, v19, (_QWORD *)v49[0], LODWORD(v49[1])))
    {
      mlir::ElementsAttr::getValues<mlir::Attribute>((uint64_t *)&v45, (uint64_t)&v39);
      FlattenedIndex = mlir::ElementsAttr::getFlattenedIndex(v44, (uint64_t)v49[0]);
      v27 = FlattenedIndex;
      LOWORD(v47) = v39;
      v28 = BYTE1(v39);
      if ((_BYTE)v39)
      {
        v29 = v40;
        v48[0] = v40;
        v30 = v41 + FlattenedIndex;
      }
      else
      {
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v40 + 16))(v48);
        v28 = BYTE1(v47);
        v30 = v41 + v27;
        v48[1] = v41 + v27;
        if (!(_BYTE)v47)
        {
          v36 = v48[0];
          v48[0] = 0;
          if (BYTE1(v47))
            v37 = 0;
          else
            v37 = v41 + v27;
          v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 24))(v36, v37);
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          if (!(_BYTE)v47)
          {
            v38 = v48[0];
            v48[0] = 0;
            if (v38)
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          }
          goto LABEL_50;
        }
        v29 = v48[0];
      }
      if (v28)
        v32 = 0;
      else
        v32 = v30;
      v33 = *(_QWORD *)(v29 + 8 * v32);
LABEL_50:
      if (!v42)
      {
        v34 = v43;
        v43 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      v11 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFFBLL);
      if (!(_BYTE)v39)
      {
        v35 = v40;
        v40 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      goto LABEL_41;
    }
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
LABEL_40:
  v11 = 0;
LABEL_41:
  if (v49[0] != v50)
    free(v49[0]);
  return (unint64_t)v11;
}

void mlir::tensor::ExtractOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.extract", 14, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E187B8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtractFromTensorCast]";
  v39 = 94;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::tensor::FromElementsOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "from_elements", 13);
}

void mlir::tensor::FromElementsOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v8 = a4;
  v5 = mlir::ValueRange::dereference_iterator(&v9, 0);
  v6 = mlir::RankedTensorType::get((uint64_t)&v8, 1, *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8, 0);
  mlir::OperationState::addOperands(a2, v9, v10);
  v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v7) = v6;
  ++*(_DWORD *)(a2 + 72);
}

unint64_t mlir::tensor::FromElementsOp::fold(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a2 + 48);
  v4 = *(uint64_t **)(a2 + 40);
  if (*(_DWORD *)(a2 + 48))
  {
    v5 = 8 * v3;
    v6 = *(uint64_t **)(a2 + 40);
    while (*v6)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v6 = &v4[v3];
        break;
      }
    }
    if (v3 != v6 - v4)
      return 0;
  }
  v7 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    return mlir::DenseElementsAttr::get(0, 0, v4, v3) & 0xFFFFFFFFFFFFFFFBLL;
  v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
  return mlir::DenseElementsAttr::get((uint64_t)v7, v8, *(uint64_t **)(a2 + 40), *(unsigned int *)(a2 + 48)) & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::tensor::FromElementsOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.extract", 14, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E19B70;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtractElementFromIndexCast]";
  v39 = 100;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::tensor::GatherOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "gather", 6);
}

uint64_t mlir::tensor::GatherOp::inferResultType(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  const void *Value;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Values;
  void *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[48];
  uint64_t RHS;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[7];

  v57[6] = *MEMORY[0x1E0C80C00];
  v45 = a2;
  v46 = a1;
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  v10 = v8 - 1;
  v55 = v57;
  v56 = 0x600000000;
  v11 = 8 * (v8 - 1);
  if (v11 < 0x31)
  {
    v12 = 0;
    if (v8 == 1)
      goto LABEL_6;
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, (8 * v10) >> 3, 8);
  v12 = v56;
  if (v10)
  {
LABEL_5:
    memcpy((char *)v55 + 8 * v12, Value, v11);
    v12 = v56;
  }
LABEL_6:
  v13 = v12 + (v11 >> 3);
  LODWORD(v56) = v13;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
  if (v14 + v13 > (unint64_t)HIDWORD(v56))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v14 + v13, 8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
  if (v15)
  {
    v16 = v15;
    if (a4)
    {
      v17 = &a3[a4];
      v18 = (8 * a4) >> 3;
      if ((a5 & 1) != 0)
      {
        for (i = 0; i != v16; ++i)
        {
          v22 = a3;
          v23 = v18;
          do
          {
            v24 = v23 >> 1;
            v25 = &v22[v23 >> 1];
            v27 = *v25;
            v26 = v25 + 1;
            v23 += ~(v23 >> 1);
            if (v27 < i)
              v22 = v26;
            else
              v23 = v24;
          }
          while (v23);
          if (v22 == v17 || i < *v22)
          {
            v20 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46) + 8 * i);
            v21 = v56;
            if (v56 >= (unint64_t)HIDWORD(v56))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
              v21 = v56;
            }
            *((_QWORD *)v55 + v21) = v20;
            LODWORD(v56) = v56 + 1;
          }
        }
        goto LABEL_42;
      }
      v31 = 0;
      while (1)
      {
        v32 = a3;
        v33 = v18;
        do
        {
          v34 = v33 >> 1;
          v35 = &v32[v33 >> 1];
          v37 = *v35;
          v36 = v35 + 1;
          v33 += ~(v33 >> 1);
          if (v37 < v31)
            v32 = v36;
          else
            v33 = v34;
        }
        while (v33);
        if (v32 == v17 || v31 < *v32)
        {
          v38 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46) + 8 * v31);
          v39 = v56;
          if (v56 >= (unint64_t)HIDWORD(v56))
            goto LABEL_41;
        }
        else
        {
          v39 = v56;
          v38 = 1;
          if (v56 >= (unint64_t)HIDWORD(v56))
          {
LABEL_41:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v39 + 1, 8);
            v39 = v56;
          }
        }
        *((_QWORD *)v55 + v39) = v38;
        LODWORD(v56) = v56 + 1;
        if (++v31 == v16)
          goto LABEL_42;
      }
    }
    for (j = 0; j != v16; ++j)
    {
      v29 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46) + 8 * j);
      v30 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v56 + 1, 8);
        v30 = v56;
      }
      *((_QWORD *)v55 + v30) = v29;
      LODWORD(v56) = v56 + 1;
    }
  }
LABEL_42:
  v47 = v46;
  v48 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47);
  v49 = v40;
  v50 = v52;
  v51 = 0x600000000;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v47);
  Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v47);
  v54 = Values;
  v48 = v55;
  v49 = v56;
  LODWORD(v51) = 0;
  if ((_DWORD)v56)
    v42 = v55;
  else
    v42 = v50;
  v43 = mlir::RankedTensorType::get((uint64_t)v42, v56, RHS, Values);
  if (v50 != v52)
    free(v50);
  if (v55 != v57)
    free(v55);
  return v43;
}

uint64_t mlir::tensor::GatherOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t NextResultAtOffset;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  const void **v65;
  __int16 v66;
  int v67;
  const char *v68;
  uint64_t v69;
  _QWORD v70[3];
  void *v71;
  unsigned int v72;
  unsigned int v73;
  _BYTE v74[96];
  void *v75;
  _QWORD *v76;
  void *__p;
  _QWORD **v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v70[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v70);
  v3 = v2;
  v70[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v4 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v70);
  v6 = v5;
  if (!verifyGatherOrScatterDims(*this, v4, v5, v3, (const void **)"gather", (const char *)6, (const void **)"source", (const char *)6))return 0;
  v7 = mlir::tensor::GatherOp::inferResultType(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, v4, v6, 0);
  v8 = 1;
  v9 = mlir::tensor::GatherOp::inferResultType(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, v4, v6, 1);
  if (*((_DWORD *)*this + 9))
    v10 = (uint64_t)(*this - 2);
  else
    v10 = 0;
  if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8) != v7)
  {
    v11 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    if ((*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8) != v9)
    {
      v65 = (const void **)"result type mismatch: expected ";
      v66 = 259;
      mlir::OpState::emitOpError(this, &v65, (uint64_t)v70);
      if (v70[0])
      {
        v12 = &v67;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v7);
        v13 = (char *)v71;
        if (v72 >= v73)
        {
          v50 = v72 + 1;
          if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
          {
            v59 = (char *)&v67 - (_BYTE *)v71;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v50, 24);
            v13 = (char *)v71;
            v12 = (int *)((char *)v71 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v50, 24);
            v12 = &v67;
            v13 = (char *)v71;
          }
        }
        v14 = &v13[24 * v72];
        v15 = *(_OWORD *)v12;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v14 = v15;
        v16 = ++v72;
        if (v70[0])
        {
          v67 = 3;
          v68 = " or its rank-reduced variant ";
          v69 = 29;
          v17 = &v67;
          v18 = (char *)v71;
          if (v16 >= v73)
          {
            v52 = v16 + 1;
            v53 = (char *)v71 + 24 * v16 > (char *)&v67;
            if (v71 <= &v67 && v53)
            {
              v61 = (char *)&v67 - (_BYTE *)v71;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v52, 24);
              v18 = (char *)v71;
              v17 = (int *)((char *)v71 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v52, 24);
              v17 = &v67;
              v18 = (char *)v71;
            }
          }
          v19 = &v18[24 * v72];
          v20 = *(_OWORD *)v17;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
          *(_OWORD *)v19 = v20;
          ++v72;
          if (v70[0])
          {
            v21 = &v67;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v9);
            v22 = (char *)v71;
            if (v72 >= v73)
            {
              v56 = v72 + 1;
              if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
              {
                v63 = (char *)&v67 - (_BYTE *)v71;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                v22 = (char *)v71;
                v21 = (int *)((char *)v71 + v63);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                v21 = &v67;
                v22 = (char *)v71;
              }
            }
            v23 = &v22[24 * v72];
            v24 = *(_OWORD *)v21;
            *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
            *(_OWORD *)v23 = v24;
            v25 = ++v72;
            if (v70[0])
            {
              v67 = 3;
              v68 = " (got: ";
              v69 = 7;
              v26 = &v67;
              v27 = (char *)v71;
              if (v25 >= v73)
              {
                v57 = v25 + 1;
                v58 = (char *)v71 + 24 * v25 > (char *)&v67;
                if (v71 <= &v67 && v58)
                {
                  v64 = (char *)&v67 - (_BYTE *)v71;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  v27 = (char *)v71;
                  v26 = (int *)((char *)v71 + v64);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  v26 = &v67;
                  v27 = (char *)v71;
                }
              }
              v28 = &v27[24 * v72];
              v29 = *(_OWORD *)v26;
              *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
              *(_OWORD *)v28 = v29;
              ++v72;
            }
          }
        }
      }
      if (*((_DWORD *)*this + 9))
        v30 = (uint64_t)(*this - 2);
      else
        v30 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v30, 0);
      if (v70[0])
      {
        v32 = &v67;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
        v33 = (char *)v71;
        if (v72 >= v73)
        {
          v51 = v72 + 1;
          if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
          {
            v60 = (char *)&v67 - (_BYTE *)v71;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v51, 24);
            v33 = (char *)v71;
            v32 = (int *)((char *)v71 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v51, 24);
            v32 = &v67;
            v33 = (char *)v71;
          }
        }
        v34 = &v33[24 * v72];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
        *(_OWORD *)v34 = v35;
        v36 = ++v72;
        if (v70[0])
        {
          v67 = 3;
          v68 = ")";
          v69 = 1;
          v37 = &v67;
          v38 = (char *)v71;
          if (v36 >= v73)
          {
            v54 = v36 + 1;
            v55 = (char *)v71 + 24 * v36 > (char *)&v67;
            if (v71 <= &v67 && v55)
            {
              v62 = (char *)&v67 - (_BYTE *)v71;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              v38 = (char *)v71;
              v37 = (int *)((char *)v71 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              v37 = &v67;
              v38 = (char *)v71;
            }
          }
          v39 = &v38[24 * v72];
          v40 = *(_OWORD *)v37;
          *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
          *(_OWORD *)v39 = v40;
          ++v72;
        }
      }
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
      if (v70[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
      if (v79)
      {
        v41 = (_QWORD **)__p;
        if (__p)
        {
          v42 = v78;
          v43 = __p;
          if (v78 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v78 = v41;
          operator delete(v43);
        }
        v44 = v75;
        if (v75)
        {
          v45 = v76;
          v46 = v75;
          if (v76 != v75)
          {
            do
            {
              v48 = (void *)*--v45;
              v47 = v48;
              *v45 = 0;
              if (v48)
                operator delete[](v47);
            }
            while (v45 != v44);
            v46 = v75;
          }
          v76 = v44;
          operator delete(v46);
        }
        if (v71 != v74)
          free(v71);
      }
    }
  }
  return v8;
}

uint64_t verifyGatherOrScatterDims(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const void **a5, const char *a6, const void **a7, const char *a8)
{
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  const void ***v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t i;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void ***v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  const void ***v55;
  char *v56;
  char *v57;
  __int128 v58;
  const void ***v59;
  char *v60;
  char *v61;
  __int128 v62;
  _QWORD **v63;
  _QWORD **v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  const void ***v69;
  char *v70;
  char *v71;
  __int128 v72;
  _QWORD **v73;
  _QWORD **v74;
  void *v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  const void **v94;
  const char *v95;
  uint64_t v96;
  __int16 v97;
  const void **v98;
  const char *v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  _BYTE v103[16];
  void *v104;
  unsigned int v105;
  unsigned int v106;
  _BYTE v107[96];
  void *v108;
  _QWORD *v109;
  void *__p;
  _QWORD **v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 <= a4)
    {
      for (i = 0; i != a3; ++i)
      {
        v38 = a2[i];
        if (v38 < 0)
        {
          v101 = 261;
          v98 = a5;
          v99 = a6;
          mlir::Operation::emitOpError(a1, &v98, (uint64_t)&v102);
          if (v102)
          {
            LODWORD(v94) = 3;
            v95 = "_dims value must be non-negative";
            v96 = 32;
            v45 = &v94;
            v46 = (char *)v104;
            if (v105 >= v106)
            {
              v83 = v105 + 1;
              if (v104 <= &v94 && (char *)v104 + 24 * v105 > (char *)&v94)
              {
                v90 = (char *)&v94 - (_BYTE *)v104;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v83, 24);
                v46 = (char *)v104;
                v45 = (const void ***)((char *)v104 + v90);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v83, 24);
                v45 = &v94;
                v46 = (char *)v104;
              }
            }
            v47 = &v46[24 * v105];
            v48 = *(_OWORD *)v45;
            *((_QWORD *)v47 + 2) = v45[2];
            *(_OWORD *)v47 = v48;
            ++v105;
          }
          v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v102);
          if (v102)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v102);
          if (!v112)
            return v18;
          v49 = (_QWORD **)__p;
          if (__p)
          {
            v50 = v111;
            v51 = __p;
            if (v111 != __p)
            {
              do
                v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
              while (v50 != v49);
              v51 = __p;
            }
            v111 = v49;
            operator delete(v51);
          }
          v22 = v108;
          if (!v108)
            goto LABEL_106;
          v52 = v109;
          v24 = v108;
          if (v109 == v108)
            goto LABEL_105;
          do
          {
            v54 = (void *)*--v52;
            v53 = v54;
            *v52 = 0;
            if (v54)
              operator delete[](v53);
          }
          while (v52 != v22);
          goto LABEL_104;
        }
        if (v38 >= a4)
        {
          v97 = 261;
          v94 = a5;
          v95 = a6;
          mlir::Operation::emitOpError(a1, &v94, (uint64_t)&v102);
          if (v102)
          {
            LODWORD(v98) = 3;
            v99 = "_dims value must be smaller than ";
            v100 = 33;
            v55 = &v98;
            v56 = (char *)v104;
            if (v105 >= v106)
            {
              v84 = v105 + 1;
              if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
              {
                v91 = (char *)&v98 - (_BYTE *)v104;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
                v56 = (char *)v104;
                v55 = (const void ***)((char *)v104 + v91);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
                v55 = &v98;
                v56 = (char *)v104;
              }
            }
            v57 = &v56[24 * v105];
            v58 = *(_OWORD *)v55;
            *((_QWORD *)v57 + 2) = v55[2];
            *(_OWORD *)v57 = v58;
            ++v105;
            if (v102)
            {
              v101 = 261;
              v98 = a7;
              v99 = a8;
              mlir::Diagnostic::operator<<((uint64_t)v103, &v98);
              if (v102)
              {
                LODWORD(v98) = 3;
                v99 = " rank";
                v100 = 5;
                v59 = &v98;
                v60 = (char *)v104;
                if (v105 >= v106)
                {
                  v85 = v105 + 1;
                  if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
                  {
                    v92 = (char *)&v98 - (_BYTE *)v104;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
                    v60 = (char *)v104;
                    v59 = (const void ***)((char *)v104 + v92);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
                    v59 = &v98;
                    v60 = (char *)v104;
                  }
                }
                v61 = &v60[24 * v105];
                v62 = *(_OWORD *)v59;
                *((_QWORD *)v61 + 2) = v59[2];
                *(_OWORD *)v61 = v62;
                ++v105;
              }
            }
          }
          v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v102);
          if (v102)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v102);
          if (!v112)
            return v18;
          v63 = (_QWORD **)__p;
          if (__p)
          {
            v64 = v111;
            v65 = __p;
            if (v111 != __p)
            {
              do
                v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
              while (v64 != v63);
              v65 = __p;
            }
            v111 = v63;
            operator delete(v65);
          }
          v22 = v108;
          if (!v108)
            goto LABEL_106;
          v66 = v109;
          v24 = v108;
          if (v109 == v108)
            goto LABEL_105;
          do
          {
            v68 = (void *)*--v66;
            v67 = v68;
            *v66 = 0;
            if (v68)
              operator delete[](v67);
          }
          while (v66 != v22);
          goto LABEL_104;
        }
      }
      if (a3 < 2)
        return 1;
      v41 = *a2;
      v39 = a2 + 1;
      v40 = v41;
      v42 = a3 - 1;
      v18 = 1;
      while (1)
      {
        v44 = *v39++;
        v43 = v44;
        if (v40 >= v44)
          break;
        v40 = v43;
        if (!--v42)
          return v18;
      }
      v101 = 261;
      v98 = a5;
      v99 = a6;
      mlir::Operation::emitOpError(a1, &v98, (uint64_t)&v102);
      if (v102)
      {
        LODWORD(v94) = 3;
        v95 = "_dims values must be strictly increasing";
        v96 = 40;
        v69 = &v94;
        v70 = (char *)v104;
        if (v105 >= v106)
        {
          v86 = v105 + 1;
          if (v104 <= &v94 && (char *)v104 + 24 * v105 > (char *)&v94)
          {
            v93 = (char *)&v94 - (_BYTE *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v86, 24);
            v70 = (char *)v104;
            v69 = (const void ***)((char *)v104 + v93);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v86, 24);
            v69 = &v94;
            v70 = (char *)v104;
          }
        }
        v71 = &v70[24 * v105];
        v72 = *(_OWORD *)v69;
        *((_QWORD *)v71 + 2) = v69[2];
        *(_OWORD *)v71 = v72;
        ++v105;
      }
      v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v102);
      if (v102)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v102);
      if (!v112)
        return v18;
      v73 = (_QWORD **)__p;
      if (__p)
      {
        v74 = v111;
        v75 = __p;
        if (v111 != __p)
        {
          do
            v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
          while (v74 != v73);
          v75 = __p;
        }
        v111 = v73;
        operator delete(v75);
      }
      v22 = v108;
      if (!v108)
        goto LABEL_106;
      v76 = v109;
      v24 = v108;
      if (v109 == v108)
        goto LABEL_105;
      do
      {
        v78 = (void *)*--v76;
        v77 = v78;
        *v76 = 0;
        if (v78)
          operator delete[](v77);
      }
      while (v76 != v22);
      goto LABEL_104;
    }
    v97 = 261;
    v94 = a5;
    v95 = a6;
    mlir::Operation::emitOpError(a1, &v94, (uint64_t)&v102);
    if (v102)
    {
      LODWORD(v98) = 3;
      v99 = "_dims overflow ";
      v100 = 15;
      v10 = &v98;
      v11 = (char *)v104;
      if (v105 >= v106)
      {
        v81 = v105 + 1;
        if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
        {
          v88 = (char *)&v98 - (_BYTE *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          v11 = (char *)v104;
          v10 = (const void ***)((char *)v104 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          v10 = &v98;
          v11 = (char *)v104;
        }
      }
      v12 = &v11[24 * v105];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = v10[2];
      *(_OWORD *)v12 = v13;
      ++v105;
      if (v102)
      {
        v101 = 261;
        v98 = a7;
        v99 = a8;
        mlir::Diagnostic::operator<<((uint64_t)v103, &v98);
        if (v102)
        {
          LODWORD(v98) = 3;
          v99 = " rank";
          v100 = 5;
          v14 = &v98;
          v15 = (char *)v104;
          if (v105 >= v106)
          {
            v82 = v105 + 1;
            if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
            {
              v89 = (char *)&v98 - (_BYTE *)v104;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
              v15 = (char *)v104;
              v14 = (const void ***)((char *)v104 + v89);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
              v14 = &v98;
              v15 = (char *)v104;
            }
          }
          v16 = &v15[24 * v105];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = v14[2];
          *(_OWORD *)v16 = v17;
          ++v105;
        }
      }
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v102);
    if (v102)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v102);
    if (v112)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v111;
        v21 = __p;
        if (v111 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v111 = v19;
        operator delete(v21);
      }
      v22 = v108;
      if (!v108)
        goto LABEL_106;
      v23 = v109;
      v24 = v108;
      if (v109 == v108)
      {
LABEL_105:
        v109 = v22;
        operator delete(v24);
LABEL_106:
        if (v104 != v107)
          free(v104);
        return v18;
      }
      do
      {
        v26 = (void *)*--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v23 != v22);
LABEL_104:
      v24 = v108;
      goto LABEL_105;
    }
  }
  else
  {
    v101 = 261;
    v98 = a5;
    v99 = a6;
    mlir::Operation::emitOpError(a1, &v98, (uint64_t)&v102);
    if (v102)
    {
      LODWORD(v94) = 3;
      v95 = "_dims must be non-empty";
      v96 = 23;
      v27 = &v94;
      v28 = (char *)v104;
      if (v105 >= v106)
      {
        v80 = v105 + 1;
        if (v104 <= &v94 && (char *)v104 + 24 * v105 > (char *)&v94)
        {
          v87 = (char *)&v94 - (_BYTE *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          v28 = (char *)v104;
          v27 = (const void ***)((char *)v104 + v87);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          v27 = &v94;
          v28 = (char *)v104;
        }
      }
      v29 = &v28[24 * v105];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = v27[2];
      *(_OWORD *)v29 = v30;
      ++v105;
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v102);
    if (v102)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v102);
    if (v112)
    {
      v31 = (_QWORD **)__p;
      if (__p)
      {
        v32 = v111;
        v33 = __p;
        if (v111 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v111 = v31;
        operator delete(v33);
      }
      v22 = v108;
      if (!v108)
        goto LABEL_106;
      v34 = v109;
      v24 = v108;
      if (v109 == v108)
        goto LABEL_105;
      do
      {
        v36 = (void *)*--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v34 != v22);
      goto LABEL_104;
    }
  }
  return v18;
}

unint64_t mlir::tensor::GatherOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  unint64_t result;

  v3 = *(uint64_t **)(a2 + 56);
  v4 = *v3;
  if (*v3 && !mlir::DenseElementsAttr::classof(*v3))
    v4 = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  result = reshapeConstantSource(v4, (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (result <= 7)
    return 0;
  return result;
}

unint64_t reshapeConstantSource(unint64_t result, _QWORD *a2)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v7 = a2;
  v8 = result;
  if (result)
  {
    if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v8))
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v7))
        return 0;
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
      if (v3)
      {
        v4 = 8 * v3;
        while (*Value != 0x8000000000000000)
        {
          ++Value;
          v4 -= 8;
          if (!v4)
            goto LABEL_8;
        }
        return 0;
      }
LABEL_8:
      v5 = (uint64_t)v7;
      if (v7)
        v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
      else
        v6 = 0;
      return mlir::DenseElementsAttr::reshape((uint64_t *)&v8, v5, v6) & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::tensor::InsertOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "inserted", 8);
}

uint64_t mlir::tensor::InsertOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void **v13;
  __int16 v14;
  unint64_t v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    if (v2 == *((unsigned int *)*this + 17) - 2)
      return 1;
  }
  else if (v2 == -2)
  {
    return 1;
  }
  v13 = (const void **)"incorrect number of indices";
  v14 = 259;
  mlir::OpState::emitOpError(this, &v13, (uint64_t)v16);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  if (v23)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v22;
      v6 = __p;
      if (v22 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v22 = v4;
      operator delete(v6);
    }
    v7 = v19;
    if (v19)
    {
      v8 = v20;
      v9 = v19;
      if (v20 != v19)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v19;
      }
      v20 = v7;
      operator delete(v9);
    }
    if (v17 != &v18)
      free(v17);
  }
  return v3;
}

unint64_t mlir::tensor::InsertOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int isSplat;
  uint64_t v8;
  uint64_t v9;
  uint64_t NumElements;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = *(uint64_t **)(a2 + 40);
  v4 = *v2;
  v3 = v2[1];
  if (*v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = mlir::DenseElementsAttr::classof(v2[1]) ? v3 : 0;
  *(_QWORD *)&v14 = v6;
  if (!v6)
    return 0;
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v14);
  v8 = isSplat ? v3 : 0;
  v12 = v8;
  if (isSplat
    && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12),
        mlir::NamedAttribute::NamedAttribute(&v14, v12, 0),
        v9 = v12,
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v12),
        mlir::NamedAttribute::NamedAttribute(&v13, v9, NumElements),
        v4 == mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v14)))
  {
    return v3 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::tensor::GenerateOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "generated", 9);
}

uint64_t mlir::tensor::GenerateOp::reifyResultShapes(uint64_t a1, mlir::IndexType **a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t i;
  uint64_t Value;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v23 = *(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
  v24 = v26;
  v25 = 0x600000000;
  if (v6)
  {
    v7 = v6;
    if (v6 < 7)
    {
      v8 = 0;
      v9 = v6;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v6, 8);
      v8 = v25;
      v9 = v7 - v25;
      if (v7 == v25)
        goto LABEL_7;
    }
    bzero((char *)v24 + 8 * v8, 8 * v9);
LABEL_7:
    LODWORD(v25) = v7;
  }
  v10 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v10)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(a3, 1 - v10, (unint64_t)&v24);
LABEL_15:
    v14 = v24;
    if (v24 == v26)
      goto LABEL_17;
    goto LABEL_16;
  }
  if ((_DWORD)v10 == 1)
    goto LABEL_15;
  v11 = *(_QWORD **)a3;
  v12 = v10 << 6;
  do
  {
    v13 = *(char **)((char *)v11 + v12 - 64);
    if ((char *)v11 + v12 - 48 != v13)
      free(v13);
    v12 -= 64;
  }
  while (v12 != 64);
  *(_DWORD *)(a3 + 8) = 1;
  v14 = v24;
  if (v24 != v26)
LABEL_16:
    free(v14);
LABEL_17:
  v24 = (void *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  if (v15)
  {
    v16 = v15;
    v17 = 0;
    for (i = 0; i != v16; ++i)
    {
      v24 = (void *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
      if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24) + 8 * i) == 0x8000000000000000)
      {
        v21 = v17++;
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * v21 + 24) | 4;
      }
      else
      {
        v24 = (void *)(*(_QWORD *)(*(_QWORD *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
        v20 = mlir::Builder::getIndexAttr(a2, *(mlir::MLIRContext **)(Value + 8 * i)) & 0xFFFFFFFFFFFFFFFBLL;
      }
      *(_QWORD *)(**(_QWORD **)a3 + 8 * i) = v20;
    }
  }
  return 1;
}

uint64_t mlir::tensor::GenerateOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t Value;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  const char *v39;
  __int16 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[48];
  _QWORD v45[2];
  _WORD v46[24];
  _QWORD v47[3];
  void *v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v41 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
  {
    v3 = *((unsigned int *)v2 + 17);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    if (v5)
    {
LABEL_3:
      v6 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v6 >= 3)
      {
        v9 = v6 + 1;
        v10 = (v6 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v8 = (uint64_t *)(Value + 8 * v10);
        v11 = (int64x2_t *)(Value + 16);
        v12 = 0uLL;
        v13 = vdupq_n_s64(0x8000000000000000);
        v14 = v10;
        v15 = 0uLL;
        do
        {
          v12 = vsubq_s64(v12, vceqq_s64(v11[-1], v13));
          v15 = vsubq_s64(v15, vceqq_s64(*v11, v13));
          v11 += 2;
          v14 -= 4;
        }
        while (v14);
        v7 = vaddvq_s64(vaddq_s64(v15, v12));
        if (v9 == v10)
          goto LABEL_11;
      }
      else
      {
        v7 = 0;
        v8 = (uint64_t *)Value;
      }
      do
      {
        v16 = *v8++;
        if (v16 == 0x8000000000000000)
          ++v7;
      }
      while (v8 != (uint64_t *)(Value + 8 * v5));
LABEL_11:
      if (v7 == v3)
        goto LABEL_12;
      goto LABEL_42;
    }
  }
  if (!v3)
  {
LABEL_12:
    v45[0] = v46;
    v45[1] = 0x600000000;
    v42 = v44;
    v43 = 0x600000000;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      operandsAndShape(v41, (*this)[9], *((unsigned int *)*this + 17), (uint64_t)v45, (uint64_t)&v42);
      v17 = v43;
      if ((_DWORD)v43)
        goto LABEL_14;
    }
    else
    {
      operandsAndShape(v41, 0, 0, (uint64_t)v45, (uint64_t)&v42);
      v17 = v43;
      if ((_DWORD)v43)
      {
LABEL_14:
        v18 = v42;
        v19 = 8 * v17;
        while (*v18 < 0x8000000000000001)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_17;
        }
        v39 = "tensor dimensions must be non-negative";
        v40 = 259;
        mlir::OpState::emitError(this, (uint64_t)&v39, (uint64_t)v47);
        v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
        if (v47[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
        if (v54)
        {
          v22 = (_QWORD **)__p;
          if (__p)
          {
            v23 = v53;
            v24 = __p;
            if (v53 != __p)
            {
              do
                v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
              while (v23 != v22);
              v24 = __p;
            }
            v53 = v22;
            operator delete(v24);
          }
          v25 = v50;
          if (v50)
          {
            v26 = v51;
            v27 = v50;
            if (v51 != v50)
            {
              do
              {
                v29 = (void *)*--v26;
                v28 = v29;
                *v26 = 0;
                if (v29)
                  operator delete[](v28);
              }
              while (v26 != v25);
              v27 = v50;
            }
            v51 = v25;
            operator delete(v27);
          }
          if (v48 != v49)
            free(v48);
        }
LABEL_18:
        if (v42 != v44)
          free(v42);
        v21 = (void *)v45[0];
        if ((_WORD *)v45[0] == v46)
          return v20;
LABEL_59:
        free(v21);
        return v20;
      }
    }
LABEL_17:
    v20 = 1;
    goto LABEL_18;
  }
LABEL_42:
  v45[0] = "must have as many index operands as dynamic extents in the result type";
  v46[8] = 259;
  mlir::OpState::emitError(this, (uint64_t)v45, (uint64_t)v47);
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  if (v54)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v53;
      v32 = __p;
      if (v53 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v53 = v30;
      operator delete(v32);
    }
    v33 = v50;
    if (v50)
    {
      v34 = v51;
      v35 = v50;
      if (v51 != v50)
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v50;
      }
      v51 = v33;
      operator delete(v35);
    }
    v21 = v48;
    if (v48 != v49)
      goto LABEL_59;
  }
  return v20;
}

void operandsAndShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Value;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t DefiningOp;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void **p_p;
  void *__p;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v40 = a1;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  if (v9)
  {
    v10 = (uint64_t *)Value;
    v11 = 0;
    v35 = (void *)(a5 + 16);
    v12 = (_DWORD *)(a4 + 8);
    v34 = (void *)(a4 + 16);
    for (i = 8 * v9; i; i -= 8)
    {
      while (1)
      {
        v14 = *v10;
        if (*v10 == 0x8000000000000000)
          break;
        v29 = *(unsigned int *)(a5 + 8);
        if (v29 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v35, v29 + 1, 8);
          v29 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v29) = v14;
        ++*(_DWORD *)(a5 + 8);
        ++v10;
        i -= 8;
        if (!i)
          return;
      }
      v39 = 1;
      __p = 0;
      v15 = a2 + 32 * v11;
      v17 = *(_QWORD *)(v15 + 24);
      v16 = (uint64_t *)(v15 + 24);
      p_p = &__p;
      v41 = v17;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v41);
      if (!DefiningOp)
        goto LABEL_28;
      v19 = DefiningOp;
      if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
        goto LABEL_28;
      v36 = v11;
      v20 = a4;
      v21 = v12;
      v42[0] = v43;
      v42[1] = (void *)0x100000000;
      mlir::Operation::fold(v19, 0, 0, (uint64_t)v42);
      v22 = *(_QWORD *)v42[0];
      if (v42[0] != v43)
        free(v42[0]);
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      v12 = v21;
      a4 = v20;
      v11 = v36;
      if (!v23)
        goto LABEL_28;
      v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(v19 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      v25 = v24 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
         || v24 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
      v26 = v25 || v24 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
      v27 = v26 || v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (v27 && (mlir::detail::constant_int_value_binder::match((uint64_t *)&p_p, v23) & 1) != 0)
      {
        if (v39 > 0x40)
          v28 = *(_QWORD *)__p;
        else
          v28 = (uint64_t)((_QWORD)__p << -(uint64_t)v39) >> -(uint64_t)v39;
        v33 = *(unsigned int *)(a5 + 8);
        if (v33 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v35, v33 + 1, 8);
          v33 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v33) = v28;
        ++*(_DWORD *)(a5 + 8);
        if (v39 < 0x41)
          goto LABEL_3;
      }
      else
      {
LABEL_28:
        v30 = *(unsigned int *)(a5 + 8);
        if (v30 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v35, v30 + 1, 8);
          v30 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v30) = 0x8000000000000000;
        ++*(_DWORD *)(a5 + 8);
        v31 = *v16;
        v32 = *(unsigned int *)(a4 + 8);
        if (v32 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v34, v32 + 1, 8);
          v32 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v32) = v31;
        ++*v12;
        if (v39 < 0x41)
          goto LABEL_3;
      }
      if (__p)
        operator delete[](__p);
LABEL_3:
      ++v11;
      ++v10;
    }
  }
}

uint64_t mlir::tensor::GenerateOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  uint64_t ArgumentTypes;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  const void **v40[4];
  __int16 v41;
  unint64_t v42;
  _QWORD v43[3];
  void *v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD **v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v42 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  ArgumentTypes = mlir::Region::getArgumentTypes((mlir::Region *)((((unint64_t)&v2[2
                                                                                        * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1)
                                                                                        + 8]
                                                                  + (((unint64_t)*((unsigned int *)v2 + 11) >> 21) & 0x7F8)
                                                                  + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                + 32 * *((unsigned int *)v2 + 10)));
  if (ArgumentTypes == v4)
  {
LABEL_5:
    v7 = *((unsigned int *)*this + 11);
    if ((v7 & 0x7FFFFF) != 0)
    {
      v8 = (_QWORD *)((((unint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8] + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *((unsigned int *)*this + 10));
      if ((_QWORD *)*v8 != v8)
        goto LABEL_7;
    }
    else
    {
      v8 = 0;
      if (MEMORY[0])
      {
LABEL_7:
        v9 = v8[1];
        if (v9)
          v10 = v9 - 8;
        else
          v10 = 0;
        v11 = (*(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 48)) >> 3;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
        if (v12 == v11)
          goto LABEL_11;
        goto LABEL_45;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
    if (!v32)
    {
LABEL_11:
      v13 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                                                   + 8]
                        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                        + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)*this + 10)
                      + 8);
      if (v13)
        v14 = (mlir::GenericProgramPoint **)(v13 - 8);
      else
        v14 = 0;
      mlir::Block::getTerminator(v14);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v16 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42))
        return 1;
      v41 = 259;
      mlir::OpState::emitOpError(this, v40, (uint64_t)v43);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
      if (v43[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
      if (!v50)
        return v17;
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v49;
        v20 = __p;
        if (v49 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v49 = v18;
        operator delete(v20);
      }
      v21 = v46;
      if (!v46)
        goto LABEL_61;
      v22 = v47;
      v23 = v46;
      if (v47 == v46)
      {
LABEL_60:
        v47 = v21;
        operator delete(v23);
LABEL_61:
        if (v44 != &v45)
          free(v44);
        return v17;
      }
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
LABEL_59:
      v23 = v46;
      goto LABEL_60;
    }
LABEL_45:
    v40[0] = (const void **)"must have one body argument per input dimension";
    v41 = 259;
    mlir::OpState::emitError(this, (uint64_t)v40, (uint64_t)v43);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v17;
    v33 = (_QWORD **)__p;
    if (__p)
    {
      v34 = v49;
      v35 = __p;
      if (v49 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v49 = v33;
      operator delete(v35);
    }
    v21 = v46;
    if (!v46)
      goto LABEL_61;
    v36 = v47;
    v23 = v46;
    if (v47 == v46)
      goto LABEL_60;
    do
    {
      v38 = (void *)*--v36;
      v37 = v38;
      *v36 = 0;
      if (v38)
        operator delete[](v37);
    }
    while (v36 != v21);
    goto LABEL_59;
  }
  v5 = ArgumentTypes;
  v6 = v4;
  while (1)
  {
    v43[0] = *(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!mlir::Type::isIndex((mlir::Type *)v43))
      break;
    v5 += 8;
    if (v5 == v6)
      goto LABEL_5;
  }
  v40[0] = (const void **)"all body arguments must be index";
  v41 = 259;
  mlir::OpState::emitError(this, (uint64_t)v40, (uint64_t)v43);
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
  if (v43[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
  if (v50)
  {
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v49;
      v28 = __p;
      if (v49 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v49 = v26;
      operator delete(v28);
    }
    v21 = v46;
    if (!v46)
      goto LABEL_61;
    v29 = v47;
    v23 = v46;
    if (v47 == v46)
      goto LABEL_60;
    do
    {
      v31 = (void *)*--v29;
      v30 = v31;
      *v29 = 0;
      if (v31)
        operator delete[](v30);
    }
    while (v29 != v21);
    goto LABEL_59;
  }
  return v17;
}

void mlir::tensor::GenerateOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.extract", 14, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E195E8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtractFromTensorGenerate]";
  v73 = 98;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.generate", 15, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E18670;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::StaticTensorGenerate]";
  v73 = 93;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v38;
  v42 = (uint64_t)(v56 + 8);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v56 - 1) = v68;
        v56 -= 8;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::tensor::RankOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "rank", 4);
}

uint64_t mlir::tensor::ReshapeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ElementType;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *Value;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD **v55;
  _QWORD **v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD **v62;
  _QWORD **v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  _QWORD *v69;
  _QWORD *v70;
  const void **v71[4];
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  _QWORD *v80;
  void *__p;
  _QWORD **v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v74 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v73 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v74);
  if (ElementType != mlir::TensorType::getElementType((mlir::TensorType *)&v73))
  {
    v71[0] = (const void **)"element types of source and destination tensor types should be the same";
    v72 = 259;
    mlir::OpState::emitOpError(this, v71, (uint64_t)&v75);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
    if (v75)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
    if (v83)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v82;
        v10 = __p;
        if (v82 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v82 = v8;
        operator delete(v10);
      }
      v11 = v79;
      if (!v79)
        goto LABEL_93;
      v12 = v80;
      v13 = v79;
      if (v80 == v79)
      {
LABEL_92:
        v80 = v11;
        operator delete(v13);
LABEL_93:
        if (v77 != &v78)
          free(v77);
        return v7;
      }
      do
      {
        v15 = (void *)*--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          operator delete[](v14);
      }
      while (v12 != v11);
LABEL_91:
      v13 = v79;
      goto LABEL_92;
    }
    return v7;
  }
  v75 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v75);
  v17 = (_QWORD *)v73;
  v18 = (_QWORD *)v74;
  v19 = *(void **)(*(_QWORD *)v73 + 136);
  if (v19 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v17 = 0;
  v70 = v17;
  v20 = *(void **)(*(_QWORD *)v74 + 136);
  if (v20 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v18 = 0;
  v69 = v18;
  if (v19 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return 1;
  if (v20 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && mlir::TensorType::hasRank((mlir::TensorType *)&v70))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
    if (v22)
    {
      v23 = 8 * v22;
      while (*Value != 0x8000000000000000)
      {
        ++Value;
        v23 -= 8;
        if (!v23)
          goto LABEL_31;
      }
      goto LABEL_61;
    }
LABEL_31:
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v69))
      goto LABEL_61;
    v24 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
    if (v25)
    {
      v26 = 8 * v25;
      while (*v24 != 0x8000000000000000)
      {
        ++v24;
        v26 -= 8;
        if (!v26)
          goto LABEL_36;
      }
      goto LABEL_61;
    }
LABEL_36:
    v27 = v69;
    if (v69)
      v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v69 + 8);
    else
      v28 = 0;
    v75 = (unint64_t)v27;
    v76 = v28;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
    if (v30)
    {
      v31 = (v30 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v31)
      {
        v32 = v31 + 1;
        v33 = (v31 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v34 = (uint64_t *)(ArgAttrsAttr + 8 * v33);
        v35 = (_QWORD *)(ArgAttrsAttr + 8);
        v36 = 1;
        v37 = v33;
        v38 = 1;
        do
        {
          v36 *= *(v35 - 1);
          v38 *= *v35;
          v35 += 2;
          v37 -= 2;
        }
        while (v37);
        v39 = v38 * v36;
        if (v32 == v33)
          goto LABEL_48;
      }
      else
      {
        v39 = 1;
        v34 = (uint64_t *)ArgAttrsAttr;
      }
      do
      {
        v40 = *v34++;
        v39 *= v40;
      }
      while (v34 != (uint64_t *)(ArgAttrsAttr + 8 * v30));
    }
    else
    {
      v39 = 1;
    }
LABEL_48:
    v41 = v70;
    if (v70)
      v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v70 + 8);
    else
      v42 = 0;
    v75 = (unint64_t)v41;
    v76 = v42;
    v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
    if (!v44)
    {
      v53 = 1;
      goto LABEL_60;
    }
    v45 = (v44 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v45)
    {
      v46 = v45 + 1;
      v47 = (v45 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v48 = (uint64_t *)(v43 + 8 * v47);
      v49 = (_QWORD *)(v43 + 8);
      v50 = 1;
      v51 = v47;
      v52 = 1;
      do
      {
        v50 *= *(v49 - 1);
        v52 *= *v49;
        v49 += 2;
        v51 -= 2;
      }
      while (v51);
      v53 = v52 * v50;
      if (v46 == v47)
      {
LABEL_60:
        if (v39 != v53)
        {
          v71[0] = (const void **)"source and destination tensor should have the same number of elements";
          v72 = 259;
          mlir::OpState::emitOpError(this, v71, (uint64_t)&v75);
          v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v75);
          return v7;
        }
        goto LABEL_61;
      }
    }
    else
    {
      v53 = 1;
      v48 = (uint64_t *)v43;
    }
    do
    {
      v54 = *v48++;
      v53 *= v54;
    }
    while (v48 != (uint64_t *)(v43 + 8 * v44));
    goto LABEL_60;
  }
LABEL_61:
  if (v16 != 0x8000000000000000)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
    if (v16 != v61)
    {
      v71[0] = (const void **)"length of shape operand differs from the result's tensor rank";
      v72 = 259;
      mlir::OpState::emitOpError(this, v71, (uint64_t)&v75);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
      if (v75)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
      if (v83)
      {
        v62 = (_QWORD **)__p;
        if (__p)
        {
          v63 = v82;
          v64 = __p;
          if (v82 != __p)
          {
            do
              v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
            while (v63 != v62);
            v64 = __p;
          }
          v82 = v62;
          operator delete(v64);
        }
        v11 = v79;
        if (!v79)
          goto LABEL_93;
        v65 = v80;
        v13 = v79;
        if (v80 == v79)
          goto LABEL_92;
        do
        {
          v67 = (void *)*--v65;
          v66 = v67;
          *v65 = 0;
          if (v67)
            operator delete[](v66);
        }
        while (v65 != v11);
        goto LABEL_91;
      }
      return v7;
    }
    return 1;
  }
  v71[0] = (const void **)"cannot use shape operand with dynamic length to reshape to statically-ranked tensor type";
  v72 = 259;
  mlir::OpState::emitOpError(this, v71, (uint64_t)&v75);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v75);
  if (v75)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  if (v83)
  {
    v55 = (_QWORD **)__p;
    if (__p)
    {
      v56 = v82;
      v57 = __p;
      if (v82 != __p)
      {
        do
          v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
        while (v56 != v55);
        v57 = __p;
      }
      v82 = v55;
      operator delete(v57);
    }
    v11 = v79;
    if (!v79)
      goto LABEL_93;
    v58 = v80;
    v13 = v79;
    if (v80 == v79)
      goto LABEL_92;
    do
    {
      v60 = (void *)*--v58;
      v59 = v60;
      *v58 = 0;
      if (v60)
        operator delete[](v59);
    }
    while (v58 != v11);
    goto LABEL_91;
  }
  return v7;
}

unint64_t mlir::tensor::ReshapeOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t NextResultAtOffset;
  unint64_t result;

  v3 = *(uint64_t **)(a2 + 40);
  v4 = *v3;
  if (*v3 && !mlir::DenseElementsAttr::classof(*v3))
    v4 = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  result = reshapeConstantSource(v4, (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (result <= 7)
    return 0;
  return result;
}

uint64_t mlir::tensor::CollapseShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "collapsed", 9);
}

uint64_t mlir::tensor::ExpandShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "expanded", 8);
}

uint64_t mlir::tensor::ExpandShapeOp::getCorrespondingSourceDim(mlir::tensor::ExpandShapeOp *this, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&v16);
  v19 = v21;
  v20 = 0x400000000;
  if (v17)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v19, (uint64_t)&v16);
    v3 = (char *)v16;
    if (!v17)
      goto LABEL_8;
    v4 = 32 * v17;
    do
    {
      v5 = *(char **)&v3[v4 - 32];
      if (&v3[v4 - 16] != v5)
        free(v5);
      v4 -= 32;
    }
    while (v4);
  }
  v3 = (char *)v16;
LABEL_8:
  if (v3 != (char *)&v18)
    free(v3);
  v6 = (char *)v19;
  if (!(_DWORD)v20)
  {
    v7 = 0;
    if (v19 == v21)
      return v7;
    goto LABEL_26;
  }
  v7 = 0;
  v8 = v19;
  while (1)
  {
    v9 = (_QWORD *)*v8;
    v10 = *((unsigned int *)v8 + 2);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = (_QWORD *)*v8;
      while (*v12 != a2)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
        {
          v12 = &v9[v10];
          break;
        }
      }
    }
    else
    {
      v12 = (_QWORD *)*v8;
    }
    if (v10 != v12 - v9)
      break;
    ++v7;
    v8 += 4;
    if (v8 == (_QWORD *)((char *)v19 + 32 * v20))
    {
      v7 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      break;
    }
  }
  v13 = 32 * v20;
  do
  {
    v14 = *(char **)&v6[v13 - 32];
    if (&v6[v13 - 16] != v14)
      free(v14);
    v13 -= 32;
  }
  while (v13);
  v6 = (char *)v19;
  if (v19 != v21)
LABEL_26:
    free(v6);
  return v7;
}

void mlir::tensor::CollapseShapeOp::getReassociationExprs(mlir::tensor::CollapseShapeOp *this@<X0>, _QWORD *a2@<X8>)
{
  mlir::MLIRContext *Context;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&v11);
  mlir::convertReassociationIndicesToExprs(Context, (unsigned int **)v11, v12, (uint64_t)&v14);
  *a2 = a2 + 2;
  a2[1] = 0x400000000;
  if (v15)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)a2, (uint64_t)&v14);
    v5 = v14;
    if (!v15)
      goto LABEL_8;
    v6 = 32 * v15;
    do
    {
      v7 = *(char **)&v5[v6 - 32];
      if (&v5[v6 - 16] != v7)
        free(v7);
      v6 -= 32;
    }
    while (v6);
  }
  v5 = v14;
LABEL_8:
  if (v5 != (char *)v16)
    free(v5);
  v8 = (char *)v11;
  if (v12)
  {
    v9 = 32 * v12;
    do
    {
      v10 = *(char **)&v8[v9 - 32];
      if (&v8[v9 - 16] != v10)
        free(v10);
      v9 -= 32;
    }
    while (v9);
    v8 = (char *)v11;
  }
  if (v8 != (char *)&v13)
    free(v8);
}

uint64_t mlir::tensor::CollapseShapeOp::inferCollapsedType(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t Value;
  unsigned int v6;
  uint64_t *v7;
  unsigned int Kind;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t RHS;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  v29 = a1;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
  v30 = v32;
  v31 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, a3, 8);
LABEL_4:
    v6 = 0;
    v7 = &a2[a3];
    while (1)
    {
      v28 = *a2;
      Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v28);
      v9 = Kind;
      if (Kind)
      {
        v10 = (_QWORD *)(Value + 8 * v6);
        v11 = 8 * Kind;
        v12 = v10;
        while (*v12 != 0x8000000000000000)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = &v10[Kind];
            break;
          }
        }
        if (Kind == v12 - v10)
        {
          if (Kind < 2)
          {
            v13 = 0;
            goto LABEL_21;
          }
          v13 = 0;
          if (__CFADD__(v6, Kind - 1))
          {
LABEL_21:
            v14 = 1;
          }
          else
          {
            v14 = 1;
            if (!(((unint64_t)Kind - 1) >> 32))
            {
              v13 = Kind & 0xFFFFFFFE;
              v15 = v6;
              v16 = v13;
              v17 = 1;
              v18 = 1;
              do
              {
                v17 *= *(_QWORD *)(Value + 8 * v15);
                v18 *= *(_QWORD *)(Value + 8 * (v15 + 1));
                v15 += 2;
                v16 -= 2;
              }
              while (v16);
              v14 = v18 * v17;
              if (v13 == Kind)
                goto LABEL_24;
            }
          }
          v19 = v6 + v13;
          v20 = Kind - v13;
          do
          {
            v14 *= *(_QWORD *)(Value + 8 * v19++);
            --v20;
          }
          while (v20);
          goto LABEL_24;
        }
        v14 = 0x8000000000000000;
      }
      else
      {
        v14 = 1;
      }
LABEL_24:
      v21 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 8);
        v21 = v31;
      }
      *((_QWORD *)v30 + v21) = v14;
      v22 = v31 + 1;
      LODWORD(v31) = v31 + 1;
      v6 += v9;
      if (++a2 == v7)
        goto LABEL_29;
    }
  }
  if (a3)
    goto LABEL_4;
  v22 = v31;
LABEL_29:
  v23 = v30;
  v24 = v22;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v29);
  v26 = mlir::RankedTensorType::get((uint64_t)v23, v24, RHS, 0);
  if (v30 != v32)
    free(v30);
  return v26;
}

uint64_t mlir::tensor::ExpandShapeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  const void **v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  const char *v38;
  const void ***v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  const void ***v44;
  char *v45;
  char *v46;
  __int128 v47;
  const char *v48;
  const void ***v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  _QWORD **v62;
  _QWORD **v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  const char *v75;
  const char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *Value;
  uint64_t v81;
  uint64_t v82;
  const void ***v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  const void ***v88;
  char *v89;
  char *v90;
  __int128 v91;
  const char *v92;
  const void ***v93;
  char *v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  const void ***v98;
  char *v99;
  char *v100;
  __int128 v101;
  _QWORD **v102;
  _QWORD **v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  mlir::AffineMap *v108;
  unsigned int v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  uint64_t *v113;
  const void **v114;
  uint64_t v115;
  _QWORD **v116;
  _QWORD **v117;
  void *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  void *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  __int128 v139;
  _QWORD **v140;
  _QWORD **v141;
  void *v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t *v149;
  char *v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  __int128 v157;
  _QWORD **v158;
  _QWORD **v159;
  void *v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t *v166;
  char *v167;
  char *v168;
  __int128 v169;
  uint64_t v170;
  uint64_t *v171;
  char *v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  uint64_t *v176;
  char *v177;
  char *v178;
  __int128 v179;
  uint64_t v180;
  uint64_t *v181;
  char *v182;
  char *v183;
  __int128 v184;
  unsigned int NumDims;
  uint64_t *v186;
  char *v187;
  char *v188;
  __int128 v189;
  _QWORD **v190;
  _QWORD **v191;
  void *v192;
  _QWORD *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t ArgAttrsAttr;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  BOOL v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  BOOL v217;
  unint64_t v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  BOOL v225;
  unint64_t v226;
  BOOL v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  BOOL v232;
  unint64_t v233;
  BOOL v234;
  unint64_t v235;
  BOOL v236;
  unint64_t v237;
  BOOL v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  int64_t v242;
  int64_t v243;
  int64_t v244;
  int64_t v245;
  int64_t v246;
  int64_t v247;
  int64_t v248;
  int64_t v249;
  int64_t v250;
  int64_t v251;
  int64_t v252;
  int64_t v253;
  int64_t v254;
  int64_t v255;
  int64_t v256;
  int64_t v257;
  int64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  int v262;
  const void **v263;
  const char *v264;
  uint64_t v265;
  __int16 v266;
  const void **v267;
  _QWORD *v268;
  uint64_t *v269;
  uint64_t **v270;
  uint64_t *v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  mlir::AffineMap *v275;
  unsigned int v276;
  _BYTE v277[16];
  __int16 v278;
  void *v279;
  unsigned int v280;
  uint64_t v281;
  void *v282;
  unsigned int v283;
  unsigned int v284;
  _BYTE v285[96];
  void *v286;
  _QWORD *v287;
  void *__p;
  _QWORD **v289;
  char v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v260 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v259 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v260);
  v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v259);
  if (v7 >= v8)
  {
    v275 = (mlir::AffineMap *)"expected rank expansion, but found source rank ";
    v278 = 259;
    mlir::OpState::emitOpError(this, (const void ***)&v275, (uint64_t)&v279);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v260);
    if (v279)
    {
      LODWORD(v263) = 2;
      v264 = v38;
      v39 = &v263;
      v40 = (char *)v282;
      if (v283 >= v284)
      {
        v210 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v239 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v210, 24);
          v40 = (char *)v282;
          v39 = (const void ***)((char *)v282 + v239);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v210, 24);
          v39 = &v263;
          v40 = (char *)v282;
        }
      }
      v41 = &v40[24 * v283];
      v42 = *(_OWORD *)v39;
      *((_QWORD *)v41 + 2) = v39[2];
      *(_OWORD *)v41 = v42;
      v43 = ++v283;
      if (v279)
      {
        LODWORD(v263) = 3;
        v264 = " >= result rank ";
        v265 = 16;
        v44 = &v263;
        v45 = (char *)v282;
        if (v43 >= v284)
        {
          v212 = v43 + 1;
          v213 = (char *)v282 + 24 * v43 > (char *)&v263;
          if (v282 <= &v263 && v213)
          {
            v241 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v212, 24);
            v45 = (char *)v282;
            v44 = (const void ***)((char *)v282 + v241);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v212, 24);
            v44 = &v263;
            v45 = (char *)v282;
          }
        }
        v46 = &v45[24 * v283];
        v47 = *(_OWORD *)v44;
        *((_QWORD *)v46 + 2) = v44[2];
        *(_OWORD *)v46 = v47;
        ++v283;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v259);
    if (v279)
    {
      LODWORD(v263) = 2;
      v264 = v48;
      v49 = &v263;
      v50 = (char *)v282;
      if (v283 >= v284)
      {
        v211 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v240 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v211, 24);
          v50 = (char *)v282;
          v49 = (const void ***)((char *)v282 + v240);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v211, 24);
          v49 = &v263;
          v50 = (char *)v282;
        }
      }
      v51 = &v50[24 * v283];
      v52 = *(_OWORD *)v49;
      *((_QWORD *)v51 + 2) = v49[2];
      *(_OWORD *)v51 = v52;
      ++v283;
    }
    v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v54 = (_QWORD **)__p;
      if (__p)
      {
        v55 = v289;
        v56 = __p;
        if (v289 != __p)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = __p;
        }
        v289 = v54;
        operator delete(v56);
      }
      v57 = v286;
      if (v286)
      {
        v58 = v287;
        v59 = v286;
        if (v287 != v286)
        {
          do
          {
            v61 = (void *)*--v58;
            v60 = v61;
            *v58 = 0;
            if (v61)
              operator delete[](v60);
          }
          while (v58 != v57);
          v59 = v286;
        }
        v287 = v57;
        operator delete(v59);
      }
      v68 = v282;
      if (v282 != v285)
        goto LABEL_189;
    }
    return v53;
  }
  v9 = *this;
  if (*((_DWORD *)*this + 9))
    v10 = (uint64_t)(*this - 2);
  else
    v10 = 0;
  v11 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v261 = v9;
  v268 = v11;
  v269 = v9;
  v267 = v12;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v268);
  v14 = v13;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v267);
  if (v14 < v15)
  {
    v275 = (mlir::AffineMap *)"expected the type ";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    if (v279)
    {
      v16 = &v263;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v263, (uint64_t)v268);
      v17 = (char *)v282;
      if (v283 >= v284)
      {
        v214 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v242 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v214, 24);
          v17 = (char *)v282;
          v16 = (const void ***)((char *)v282 + v242);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v214, 24);
          v16 = &v263;
          v17 = (char *)v282;
        }
      }
      v18 = &v17[24 * v283];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      v20 = ++v283;
      if (v279)
      {
        LODWORD(v263) = 3;
        v264 = " to have higher rank than the type = ";
        v265 = 37;
        v21 = &v263;
        v22 = (char *)v282;
        if (v20 >= v284)
        {
          v216 = v20 + 1;
          v217 = (char *)v282 + 24 * v20 > (char *)&v263;
          if (v282 <= &v263 && v217)
          {
            v244 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v216, 24);
            v22 = (char *)v282;
            v21 = (const void ***)((char *)v282 + v244);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v216, 24);
            v21 = &v263;
            v22 = (char *)v282;
          }
        }
        v23 = &v22[24 * v283];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v283;
        if (v279)
        {
          v25 = &v263;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v263, (uint64_t)v267);
          v26 = (char *)v282;
          if (v283 >= v284)
          {
            v220 = v283 + 1;
            if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
            {
              v246 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v220, 24);
              v26 = (char *)v282;
              v25 = (const void ***)((char *)v282 + v246);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v220, 24);
              v25 = &v263;
              v26 = (char *)v282;
            }
          }
          v27 = &v26[24 * v283];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = v25[2];
          *(_OWORD *)v27 = v28;
          ++v283;
        }
      }
    }
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v289;
        v32 = __p;
        if (v289 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v289 = v30;
        operator delete(v32);
      }
      v33 = v286;
      if (v286)
      {
        v34 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
LABEL_147:
        v35 = v286;
LABEL_148:
        v287 = v33;
        operator delete(v35);
        goto LABEL_149;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (!v14)
  {
    v275 = (mlir::AffineMap *)"expected non-zero memref ranks";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v69 = (_QWORD **)__p;
      if (__p)
      {
        v70 = v289;
        v71 = __p;
        if (v289 != __p)
        {
          do
            v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
          while (v70 != v69);
          v71 = __p;
        }
        v289 = v69;
        operator delete(v71);
      }
      v33 = v286;
      if (v286)
      {
        v72 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v74 = (void *)*--v72;
          v73 = v74;
          *v72 = 0;
          if (v74)
            operator delete[](v73);
        }
        while (v72 != v33);
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (v14 == v15)
  {
    v275 = (mlir::AffineMap *)"expected to collapse or expand dims";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v62 = (_QWORD **)__p;
      if (__p)
      {
        v63 = v289;
        v64 = __p;
        if (v289 != __p)
        {
          do
            v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
          while (v63 != v62);
          v64 = __p;
        }
        v289 = v62;
        operator delete(v64);
      }
      v33 = v286;
      if (v286)
      {
        v65 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v67 = (void *)*--v65;
          v66 = v67;
          *v65 = 0;
          if (v67)
            operator delete[](v66);
        }
        while (v65 != v33);
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (v15)
  {
    v75 = (const char *)v15;
    v279 = (void *)v9[2 * (((unint64_t)*((unsigned int *)v9 + 11) >> 23) & 1) + 8];
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v279);
    if (v75 != v76)
    {
      v275 = (mlir::AffineMap *)"expected rank of the collapsed type(";
      v278 = 259;
      mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
      if (v279)
      {
        LODWORD(v263) = 5;
        v264 = v75;
        v83 = &v263;
        v84 = (char *)v282;
        if (v283 >= v284)
        {
          v222 = v283 + 1;
          if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
          {
            v248 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v222, 24);
            v84 = (char *)v282;
            v83 = (const void ***)((char *)v282 + v248);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v222, 24);
            v83 = &v263;
            v84 = (char *)v282;
          }
        }
        v85 = &v84[24 * v283];
        v86 = *(_OWORD *)v83;
        *((_QWORD *)v85 + 2) = v83[2];
        *(_OWORD *)v85 = v86;
        v87 = ++v283;
        if (v279)
        {
          LODWORD(v263) = 3;
          v264 = ") to be the number of reassociation maps(";
          v265 = 41;
          v88 = &v263;
          v89 = (char *)v282;
          if (v87 >= v284)
          {
            v224 = v87 + 1;
            v225 = (char *)v282 + 24 * v87 > (char *)&v263;
            if (v282 <= &v263 && v225)
            {
              v250 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v224, 24);
              v89 = (char *)v282;
              v88 = (const void ***)((char *)v282 + v250);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v224, 24);
              v88 = &v263;
              v89 = (char *)v282;
            }
          }
          v90 = &v89[24 * v283];
          v91 = *(_OWORD *)v88;
          *((_QWORD *)v90 + 2) = v88[2];
          *(_OWORD *)v90 = v91;
          ++v283;
        }
      }
      v272 = v269[2 * (((unint64_t)*((unsigned int *)v269 + 11) >> 23) & 1) + 8];
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v272);
      if (v279)
      {
        LODWORD(v263) = 5;
        v264 = v92;
        v93 = &v263;
        v94 = (char *)v282;
        if (v283 >= v284)
        {
          v223 = v283 + 1;
          if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
          {
            v249 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v223, 24);
            v94 = (char *)v282;
            v93 = (const void ***)((char *)v282 + v249);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v223, 24);
            v93 = &v263;
            v94 = (char *)v282;
          }
        }
        v95 = &v94[24 * v283];
        v96 = *(_OWORD *)v93;
        *((_QWORD *)v95 + 2) = v93[2];
        *(_OWORD *)v95 = v96;
        v97 = ++v283;
        if (v279)
        {
          LODWORD(v263) = 3;
          v264 = ")";
          v265 = 1;
          v98 = &v263;
          v99 = (char *)v282;
          if (v97 >= v284)
          {
            v226 = v97 + 1;
            v227 = (char *)v282 + 24 * v97 > (char *)&v263;
            if (v282 <= &v263 && v227)
            {
              v251 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v226, 24);
              v99 = (char *)v282;
              v98 = (const void ***)((char *)v282 + v251);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v226, 24);
              v98 = &v263;
              v99 = (char *)v282;
            }
          }
          v100 = &v99[24 * v283];
          v101 = *(_OWORD *)v98;
          *((_QWORD *)v100 + 2) = v98[2];
          *(_OWORD *)v100 = v101;
          ++v283;
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
      if (v279)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
      if (v290)
      {
        v102 = (_QWORD **)__p;
        if (__p)
        {
          v103 = v289;
          v104 = __p;
          if (v289 != __p)
          {
            do
              v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
            while (v103 != v102);
            v104 = __p;
          }
          v289 = v102;
          operator delete(v104);
        }
        v33 = v286;
        if (v286)
        {
          v105 = v287;
          v35 = v286;
          if (v287 == v286)
            goto LABEL_148;
          do
          {
            v107 = (void *)*--v105;
            v106 = v107;
            *v105 = 0;
            if (v107)
              operator delete[](v106);
          }
          while (v105 != v33);
          goto LABEL_147;
        }
        goto LABEL_149;
      }
      goto LABEL_151;
    }
    mlir::tensor::CollapseShapeOp::getReassociationExprs((mlir::tensor::CollapseShapeOp *)&v269, &v279);
    mlir::getSymbolLessAffineMaps((uint64_t)v279, v280, (uint64_t)&v275);
    v77 = (char *)v279;
    if (v280)
    {
      v78 = 32 * v280;
      do
      {
        v79 = *(char **)&v77[v78 - 32];
        if (&v77[v78 - 16] != v79)
          free(v79);
        v78 -= 32;
      }
      while (v78);
      v77 = (char *)v279;
    }
    if (v77 != (char *)&v281)
      free(v77);
    v108 = v275;
    v109 = v276;
    if (v276)
    {
      v110 = 0;
      v111 = (const char *)v14;
      v112 = 8 * v276;
      while (mlir::AffineMap::getNumDims(v108) == v14)
      {
        ++v110;
        v108 = (mlir::AffineMap *)((char *)v108 + 8);
        v112 -= 8;
        if (!v112)
        {
          v108 = v275;
          v109 = v276;
          goto LABEL_130;
        }
      }
      v263 = (const void **)"expected reassociation map #";
      v266 = 259;
      mlir::OpState::emitOpError(&v269, &v263, (uint64_t)&v279);
      if (v279)
      {
        LODWORD(v272) = 5;
        v273 = v110;
        v166 = &v272;
        v167 = (char *)v282;
        if (v283 >= v284)
        {
          v229 = v283 + 1;
          if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
          {
            v253 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v229, 24);
            v167 = (char *)v282;
            v166 = (uint64_t *)((char *)v282 + v253);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v229, 24);
            v166 = &v272;
            v167 = (char *)v282;
          }
        }
        v168 = &v167[24 * v283];
        v169 = *(_OWORD *)v166;
        *((_QWORD *)v168 + 2) = v166[2];
        *(_OWORD *)v168 = v169;
        v170 = ++v283;
        if (v279)
        {
          LODWORD(v272) = 3;
          v273 = " of same rank as expanded memref(";
          v274 = 33;
          v171 = &v272;
          v172 = (char *)v282;
          if (v170 >= v284)
          {
            v233 = v170 + 1;
            v234 = (char *)v282 + 24 * v170 > (char *)&v272;
            if (v282 <= &v272 && v234)
            {
              v256 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v233, 24);
              v172 = (char *)v282;
              v171 = (uint64_t *)((char *)v282 + v256);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v233, 24);
              v171 = &v272;
              v172 = (char *)v282;
            }
          }
          v173 = &v172[24 * v283];
          v174 = *(_OWORD *)v171;
          *((_QWORD *)v173 + 2) = v171[2];
          *(_OWORD *)v173 = v174;
          v175 = ++v283;
          if (v279)
          {
            LODWORD(v272) = 5;
            v273 = v111;
            v176 = &v272;
            v177 = (char *)v282;
            if (v175 >= v284)
            {
              v235 = v175 + 1;
              v236 = (char *)v282 + 24 * v175 > (char *)&v272;
              if (v282 <= &v272 && v236)
              {
                v257 = (char *)&v272 - (_BYTE *)v282;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v235, 24);
                v177 = (char *)v282;
                v176 = (uint64_t *)((char *)v282 + v257);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v235, 24);
                v176 = &v272;
                v177 = (char *)v282;
              }
            }
            v178 = &v177[24 * v283];
            v179 = *(_OWORD *)v176;
            *((_QWORD *)v178 + 2) = v176[2];
            *(_OWORD *)v178 = v179;
            v180 = ++v283;
            if (v279)
            {
              LODWORD(v272) = 3;
              v273 = "), but got ";
              v274 = 11;
              v181 = &v272;
              v182 = (char *)v282;
              if (v180 >= v284)
              {
                v237 = v180 + 1;
                v238 = (char *)v282 + 24 * v180 > (char *)&v272;
                if (v282 <= &v272 && v238)
                {
                  v258 = (char *)&v272 - (_BYTE *)v282;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v237, 24);
                  v182 = (char *)v282;
                  v181 = (uint64_t *)((char *)v282 + v258);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v237, 24);
                  v181 = &v272;
                  v182 = (char *)v282;
                }
              }
              v183 = &v182[24 * v283];
              v184 = *(_OWORD *)v181;
              *((_QWORD *)v183 + 2) = v181[2];
              *(_OWORD *)v183 = v184;
              ++v283;
            }
          }
        }
      }
      NumDims = mlir::AffineMap::getNumDims(v108);
      if (v279)
      {
        LODWORD(v272) = 5;
        v273 = (const char *)NumDims;
        v186 = &v272;
        v187 = (char *)v282;
        if (v283 >= v284)
        {
          v230 = v283 + 1;
          if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
          {
            v254 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v230, 24);
            v187 = (char *)v282;
            v186 = (uint64_t *)((char *)v282 + v254);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v230, 24);
            v186 = &v272;
            v187 = (char *)v282;
          }
        }
        v188 = &v187[24 * v283];
        v189 = *(_OWORD *)v186;
        *((_QWORD *)v188 + 2) = v186[2];
        *(_OWORD *)v188 = v189;
        ++v283;
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
      if (v279)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
      if (!v290)
        goto LABEL_252;
      v190 = (_QWORD **)__p;
      if (__p)
      {
        v191 = v289;
        v192 = __p;
        if (v289 != __p)
        {
          do
            v191 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v191 - 1);
          while (v191 != v190);
          v192 = __p;
        }
        v289 = v190;
        operator delete(v192);
      }
      v193 = v286;
      if (v286)
      {
        v194 = v287;
        v195 = v286;
        if (v287 != v286)
        {
          do
          {
            v197 = (void *)*--v194;
            v196 = v197;
            *v194 = 0;
            if (v197)
              operator delete[](v196);
          }
          while (v194 != v193);
          v195 = v286;
        }
        v287 = v193;
        operator delete(v195);
      }
      v209 = v282;
      if (v282 == v285)
      {
LABEL_252:
        v122 = v275;
        if (v275 != (mlir::AffineMap *)v277)
        {
LABEL_150:
          free(v122);
          goto LABEL_151;
        }
        goto LABEL_151;
      }
    }
    else
    {
LABEL_130:
      v262 = 0;
      if ((mlir::isReassociationValid(v108, v109, &v262) & 1) != 0)
      {
        v113 = v269;
        v114 = v267;
        if (v267)
          v115 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v267 + 8);
        else
          v115 = 0;
        v198 = v268;
        if (v268)
          v199 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v268 + 8);
        else
          v199 = 0;
        v271 = v113;
        v272 = (uint64_t)v198;
        v263 = v114;
        v264 = (const char *)v115;
        v273 = (const char *)v199;
        v270 = &v271;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
        v202 = v201;
        v203 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v272);
        v205 = v204;
        mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v271, (uint64_t)&v279);
        v29 = mlir::reshapeLikeShapesAreCompatible((uint64_t (*)(uint64_t, _QWORD **))llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::LogicalResult mlir::verifyReshapeLikeShapes<mlir::tensor::ExpandShapeOp>(mlir::tensor::ExpandShapeOp,mlir::ShapedType,mlir::ShapedType,BOOL)::{lambda(llvm::Twine const&)#1}>, (uint64_t)&v270, ArgAttrsAttr, v202, v203, v205, (uint64_t)v279, v280, 1);
        v206 = (uint64_t *)v279;
        if (v280)
        {
          v207 = 4 * v280;
          do
          {
            v208 = (uint64_t *)v206[v207 - 4];
            if (&v206[v207 - 2] != v208)
              free(v208);
            v207 -= 4;
          }
          while (v207 * 8);
          v206 = (uint64_t *)v279;
        }
        if (v206 == &v281)
          goto LABEL_252;
        v209 = v206;
      }
      else
      {
        v263 = (const void **)"expected reassociation map #";
        v266 = 259;
        mlir::OpState::emitOpError(&v269, &v263, (uint64_t)&v279);
        if (v279)
        {
          LODWORD(v272) = 2;
          v273 = (const char *)v262;
          v149 = &v272;
          v150 = (char *)v282;
          if (v283 >= v284)
          {
            v228 = v283 + 1;
            if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
            {
              v252 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v228, 24);
              v150 = (char *)v282;
              v149 = (uint64_t *)((char *)v282 + v252);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v228, 24);
              v149 = &v272;
              v150 = (char *)v282;
            }
          }
          v151 = &v150[24 * v283];
          v152 = *(_OWORD *)v149;
          *((_QWORD *)v151 + 2) = v149[2];
          *(_OWORD *)v151 = v152;
          v153 = ++v283;
          if (v279)
          {
            LODWORD(v272) = 3;
            v273 = " to be valid and contiguous";
            v274 = 27;
            v154 = &v272;
            v155 = (char *)v282;
            if (v153 >= v284)
            {
              v231 = v153 + 1;
              v232 = (char *)v282 + 24 * v153 > (char *)&v272;
              if (v282 <= &v272 && v232)
              {
                v255 = (char *)&v272 - (_BYTE *)v282;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v231, 24);
                v155 = (char *)v282;
                v154 = (uint64_t *)((char *)v282 + v255);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v231, 24);
                v154 = &v272;
                v155 = (char *)v282;
              }
            }
            v156 = &v155[24 * v283];
            v157 = *(_OWORD *)v154;
            *((_QWORD *)v156 + 2) = v154[2];
            *(_OWORD *)v156 = v157;
            ++v283;
          }
        }
        v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
        if (v279)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
        if (!v290)
          goto LABEL_252;
        v158 = (_QWORD **)__p;
        if (__p)
        {
          v159 = v289;
          v160 = __p;
          if (v289 != __p)
          {
            do
              v159 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v159 - 1);
            while (v159 != v158);
            v160 = __p;
          }
          v289 = v158;
          operator delete(v160);
        }
        v161 = v286;
        if (v286)
        {
          v162 = v287;
          v163 = v286;
          if (v287 != v286)
          {
            do
            {
              v165 = (void *)*--v162;
              v164 = v165;
              *v162 = 0;
              if (v165)
                operator delete[](v164);
            }
            while (v162 != v161);
            v163 = v286;
          }
          v287 = v161;
          operator delete(v163);
        }
        v209 = v282;
        if (v282 == v285)
          goto LABEL_252;
      }
    }
    free(v209);
    goto LABEL_252;
  }
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v268);
  if (v81)
  {
    v82 = 8 * v81;
    while (*Value == 1)
    {
      ++Value;
      v82 -= 8;
      if (!v82)
        goto LABEL_152;
    }
    v275 = (mlir::AffineMap *)"invalid to reshape tensor/memref with non-unit extent dimensions to zero-rank tensor/memref";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v116 = (_QWORD **)__p;
      if (__p)
      {
        v117 = v289;
        v118 = __p;
        if (v289 != __p)
        {
          do
            v117 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v117 - 1);
          while (v117 != v116);
          v118 = __p;
        }
        v289 = v116;
        operator delete(v118);
      }
      v33 = v286;
      if (v286)
      {
        v119 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v121 = (void *)*--v119;
          v120 = v121;
          *v119 = 0;
          if (v121)
            operator delete[](v120);
        }
        while (v119 != v33);
        goto LABEL_147;
      }
LABEL_149:
      v122 = v282;
      if (v282 == v285)
        goto LABEL_151;
      goto LABEL_150;
    }
LABEL_151:
    if (!v29)
      return 0;
  }
LABEL_152:
  mlir::tensor::CollapseShapeOp::getReassociationExprs((mlir::tensor::CollapseShapeOp *)&v261, &v279);
  mlir::getSymbolLessAffineMaps((uint64_t)v279, v280, (uint64_t)&v275);
  v123 = (char *)v279;
  if (v280)
  {
    v124 = 32 * v280;
    do
    {
      v125 = *(char **)&v123[v124 - 32];
      if (&v123[v124 - 16] != v125)
        free(v125);
      v124 -= 32;
    }
    while (v124);
    v123 = (char *)v279;
  }
  if (v123 != (char *)&v281)
    free(v123);
  v126 = mlir::tensor::CollapseShapeOp::inferCollapsedType((uint64_t)v11, (uint64_t *)v275, v276);
  if (mlir::tensor::isSameTypeWithoutEncoding((uint64_t)v12, v126))
  {
    v53 = 1;
  }
  else
  {
    v263 = (const void **)"expected collapsed type to be ";
    v266 = 259;
    mlir::OpState::emitOpError(&v261, &v263, (uint64_t)&v279);
    if (v279)
    {
      v127 = &v272;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v272, v126);
      v128 = (char *)v282;
      if (v283 >= v284)
      {
        v215 = v283 + 1;
        if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
        {
          v243 = (char *)&v272 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v215, 24);
          v128 = (char *)v282;
          v127 = (uint64_t *)((char *)v282 + v243);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v215, 24);
          v127 = &v272;
          v128 = (char *)v282;
        }
      }
      v129 = &v128[24 * v283];
      v130 = *(_OWORD *)v127;
      *((_QWORD *)v129 + 2) = v127[2];
      *(_OWORD *)v129 = v130;
      v131 = ++v283;
      if (v279)
      {
        LODWORD(v272) = 3;
        v273 = ", but got ";
        v274 = 10;
        v132 = &v272;
        v133 = (char *)v282;
        if (v131 >= v284)
        {
          v218 = v131 + 1;
          v219 = (char *)v282 + 24 * v131 > (char *)&v272;
          if (v282 <= &v272 && v219)
          {
            v245 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v218, 24);
            v133 = (char *)v282;
            v132 = (uint64_t *)((char *)v282 + v245);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v218, 24);
            v132 = &v272;
            v133 = (char *)v282;
          }
        }
        v134 = &v133[24 * v283];
        v135 = *(_OWORD *)v132;
        *((_QWORD *)v134 + 2) = v132[2];
        *(_OWORD *)v134 = v135;
        ++v283;
        if (v279)
        {
          v136 = &v272;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v272, (uint64_t)v12);
          v137 = (char *)v282;
          if (v283 >= v284)
          {
            v221 = v283 + 1;
            if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
            {
              v247 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v221, 24);
              v137 = (char *)v282;
              v136 = (uint64_t *)((char *)v282 + v247);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v221, 24);
              v136 = &v272;
              v137 = (char *)v282;
            }
          }
          v138 = &v137[24 * v283];
          v139 = *(_OWORD *)v136;
          *((_QWORD *)v138 + 2) = v136[2];
          *(_OWORD *)v138 = v139;
          ++v283;
        }
      }
    }
    v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v140 = (_QWORD **)__p;
      if (__p)
      {
        v141 = v289;
        v142 = __p;
        if (v289 != __p)
        {
          do
            v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          v142 = __p;
        }
        v289 = v140;
        operator delete(v142);
      }
      v143 = v286;
      if (v286)
      {
        v144 = v287;
        v145 = v286;
        if (v287 != v286)
        {
          do
          {
            v147 = (void *)*--v144;
            v146 = v147;
            *v144 = 0;
            if (v147)
              operator delete[](v146);
          }
          while (v144 != v143);
          v145 = v286;
        }
        v287 = v143;
        operator delete(v145);
      }
      if (v282 != v285)
        free(v282);
    }
  }
  v68 = v275;
  if (v275 != (mlir::AffineMap *)v277)
LABEL_189:
    free(v68);
  return v53;
}

uint64_t mlir::tensor::CollapseShapeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  const void **v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  const char *v38;
  const void ***v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  const void ***v44;
  char *v45;
  char *v46;
  __int128 v47;
  const char *v48;
  const void ***v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  _QWORD **v62;
  _QWORD **v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  const char *v75;
  const char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *Value;
  uint64_t v81;
  uint64_t v82;
  const void ***v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  const void ***v88;
  char *v89;
  char *v90;
  __int128 v91;
  const char *v92;
  const void ***v93;
  char *v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  const void ***v98;
  char *v99;
  char *v100;
  __int128 v101;
  _QWORD **v102;
  _QWORD **v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  mlir::AffineMap *v108;
  unsigned int v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  uint64_t *v113;
  const void **v114;
  uint64_t v115;
  _QWORD **v116;
  _QWORD **v117;
  void *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  void *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  __int128 v139;
  _QWORD **v140;
  _QWORD **v141;
  void *v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t *v149;
  char *v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  __int128 v157;
  _QWORD **v158;
  _QWORD **v159;
  void *v160;
  _QWORD *v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t *v166;
  char *v167;
  char *v168;
  __int128 v169;
  uint64_t v170;
  uint64_t *v171;
  char *v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  uint64_t *v176;
  char *v177;
  char *v178;
  __int128 v179;
  uint64_t v180;
  uint64_t *v181;
  char *v182;
  char *v183;
  __int128 v184;
  unsigned int NumDims;
  uint64_t *v186;
  char *v187;
  char *v188;
  __int128 v189;
  _QWORD **v190;
  _QWORD **v191;
  void *v192;
  _QWORD *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  void *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t ArgAttrsAttr;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  BOOL v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  BOOL v217;
  unint64_t v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  BOOL v225;
  unint64_t v226;
  BOOL v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  BOOL v232;
  unint64_t v233;
  BOOL v234;
  unint64_t v235;
  BOOL v236;
  unint64_t v237;
  BOOL v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  int64_t v242;
  int64_t v243;
  int64_t v244;
  int64_t v245;
  int64_t v246;
  int64_t v247;
  int64_t v248;
  int64_t v249;
  int64_t v250;
  int64_t v251;
  int64_t v252;
  int64_t v253;
  int64_t v254;
  int64_t v255;
  int64_t v256;
  int64_t v257;
  int64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  int v262;
  const void **v263;
  const char *v264;
  uint64_t v265;
  __int16 v266;
  const void **v267;
  _QWORD *v268;
  uint64_t *v269;
  uint64_t **v270;
  uint64_t *v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  mlir::AffineMap *v275;
  unsigned int v276;
  _BYTE v277[16];
  __int16 v278;
  void *v279;
  unsigned int v280;
  uint64_t v281;
  void *v282;
  unsigned int v283;
  unsigned int v284;
  _BYTE v285[96];
  void *v286;
  _QWORD *v287;
  void *__p;
  _QWORD **v289;
  char v290;
  uint64_t v291;

  v291 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v260 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v259 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v260);
  v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v259);
  if (v7 <= v8)
  {
    v275 = (mlir::AffineMap *)"expected rank reduction, but found source rank ";
    v278 = 259;
    mlir::OpState::emitOpError(this, (const void ***)&v275, (uint64_t)&v279);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v260);
    if (v279)
    {
      LODWORD(v263) = 2;
      v264 = v38;
      v39 = &v263;
      v40 = (char *)v282;
      if (v283 >= v284)
      {
        v210 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v239 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v210, 24);
          v40 = (char *)v282;
          v39 = (const void ***)((char *)v282 + v239);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v210, 24);
          v39 = &v263;
          v40 = (char *)v282;
        }
      }
      v41 = &v40[24 * v283];
      v42 = *(_OWORD *)v39;
      *((_QWORD *)v41 + 2) = v39[2];
      *(_OWORD *)v41 = v42;
      v43 = ++v283;
      if (v279)
      {
        LODWORD(v263) = 3;
        v264 = " <= result rank ";
        v265 = 16;
        v44 = &v263;
        v45 = (char *)v282;
        if (v43 >= v284)
        {
          v212 = v43 + 1;
          v213 = (char *)v282 + 24 * v43 > (char *)&v263;
          if (v282 <= &v263 && v213)
          {
            v241 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v212, 24);
            v45 = (char *)v282;
            v44 = (const void ***)((char *)v282 + v241);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v212, 24);
            v44 = &v263;
            v45 = (char *)v282;
          }
        }
        v46 = &v45[24 * v283];
        v47 = *(_OWORD *)v44;
        *((_QWORD *)v46 + 2) = v44[2];
        *(_OWORD *)v46 = v47;
        ++v283;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v259);
    if (v279)
    {
      LODWORD(v263) = 2;
      v264 = v48;
      v49 = &v263;
      v50 = (char *)v282;
      if (v283 >= v284)
      {
        v211 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v240 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v211, 24);
          v50 = (char *)v282;
          v49 = (const void ***)((char *)v282 + v240);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v211, 24);
          v49 = &v263;
          v50 = (char *)v282;
        }
      }
      v51 = &v50[24 * v283];
      v52 = *(_OWORD *)v49;
      *((_QWORD *)v51 + 2) = v49[2];
      *(_OWORD *)v51 = v52;
      ++v283;
    }
    v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v54 = (_QWORD **)__p;
      if (__p)
      {
        v55 = v289;
        v56 = __p;
        if (v289 != __p)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = __p;
        }
        v289 = v54;
        operator delete(v56);
      }
      v57 = v286;
      if (v286)
      {
        v58 = v287;
        v59 = v286;
        if (v287 != v286)
        {
          do
          {
            v61 = (void *)*--v58;
            v60 = v61;
            *v58 = 0;
            if (v61)
              operator delete[](v60);
          }
          while (v58 != v57);
          v59 = v286;
        }
        v287 = v57;
        operator delete(v59);
      }
      v68 = v282;
      if (v282 != v285)
        goto LABEL_189;
    }
    return v53;
  }
  v9 = *this;
  v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (*((_DWORD *)*this + 9))
    v11 = (uint64_t)(*this - 2);
  else
    v11 = 0;
  v12 = (const void **)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v261 = v9;
  v268 = v10;
  v269 = v9;
  v267 = v12;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v268);
  v14 = v13;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v267);
  if (v14 < v15)
  {
    v275 = (mlir::AffineMap *)"expected the type ";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    if (v279)
    {
      v16 = &v263;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v263, (uint64_t)v268);
      v17 = (char *)v282;
      if (v283 >= v284)
      {
        v214 = v283 + 1;
        if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
        {
          v242 = (char *)&v263 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v214, 24);
          v17 = (char *)v282;
          v16 = (const void ***)((char *)v282 + v242);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v214, 24);
          v16 = &v263;
          v17 = (char *)v282;
        }
      }
      v18 = &v17[24 * v283];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      v20 = ++v283;
      if (v279)
      {
        LODWORD(v263) = 3;
        v264 = " to have higher rank than the type = ";
        v265 = 37;
        v21 = &v263;
        v22 = (char *)v282;
        if (v20 >= v284)
        {
          v216 = v20 + 1;
          v217 = (char *)v282 + 24 * v20 > (char *)&v263;
          if (v282 <= &v263 && v217)
          {
            v244 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v216, 24);
            v22 = (char *)v282;
            v21 = (const void ***)((char *)v282 + v244);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v216, 24);
            v21 = &v263;
            v22 = (char *)v282;
          }
        }
        v23 = &v22[24 * v283];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v283;
        if (v279)
        {
          v25 = &v263;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v263, (uint64_t)v267);
          v26 = (char *)v282;
          if (v283 >= v284)
          {
            v220 = v283 + 1;
            if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
            {
              v246 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v220, 24);
              v26 = (char *)v282;
              v25 = (const void ***)((char *)v282 + v246);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v220, 24);
              v25 = &v263;
              v26 = (char *)v282;
            }
          }
          v27 = &v26[24 * v283];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = v25[2];
          *(_OWORD *)v27 = v28;
          ++v283;
        }
      }
    }
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v30 = (_QWORD **)__p;
      if (__p)
      {
        v31 = v289;
        v32 = __p;
        if (v289 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v289 = v30;
        operator delete(v32);
      }
      v33 = v286;
      if (v286)
      {
        v34 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
LABEL_147:
        v35 = v286;
LABEL_148:
        v287 = v33;
        operator delete(v35);
        goto LABEL_149;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (!v14)
  {
    v275 = (mlir::AffineMap *)"expected non-zero memref ranks";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v69 = (_QWORD **)__p;
      if (__p)
      {
        v70 = v289;
        v71 = __p;
        if (v289 != __p)
        {
          do
            v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
          while (v70 != v69);
          v71 = __p;
        }
        v289 = v69;
        operator delete(v71);
      }
      v33 = v286;
      if (v286)
      {
        v72 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v74 = (void *)*--v72;
          v73 = v74;
          *v72 = 0;
          if (v74)
            operator delete[](v73);
        }
        while (v72 != v33);
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (v14 == v15)
  {
    v275 = (mlir::AffineMap *)"expected to collapse or expand dims";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v62 = (_QWORD **)__p;
      if (__p)
      {
        v63 = v289;
        v64 = __p;
        if (v289 != __p)
        {
          do
            v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
          while (v63 != v62);
          v64 = __p;
        }
        v289 = v62;
        operator delete(v64);
      }
      v33 = v286;
      if (v286)
      {
        v65 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v67 = (void *)*--v65;
          v66 = v67;
          *v65 = 0;
          if (v67)
            operator delete[](v66);
        }
        while (v65 != v33);
        goto LABEL_147;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (v15)
  {
    v75 = (const char *)v15;
    v279 = (void *)v9[2 * (((unint64_t)*((unsigned int *)v9 + 11) >> 23) & 1) + 8];
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v279);
    if (v75 != v76)
    {
      v275 = (mlir::AffineMap *)"expected rank of the collapsed type(";
      v278 = 259;
      mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
      if (v279)
      {
        LODWORD(v263) = 5;
        v264 = v75;
        v83 = &v263;
        v84 = (char *)v282;
        if (v283 >= v284)
        {
          v222 = v283 + 1;
          if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
          {
            v248 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v222, 24);
            v84 = (char *)v282;
            v83 = (const void ***)((char *)v282 + v248);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v222, 24);
            v83 = &v263;
            v84 = (char *)v282;
          }
        }
        v85 = &v84[24 * v283];
        v86 = *(_OWORD *)v83;
        *((_QWORD *)v85 + 2) = v83[2];
        *(_OWORD *)v85 = v86;
        v87 = ++v283;
        if (v279)
        {
          LODWORD(v263) = 3;
          v264 = ") to be the number of reassociation maps(";
          v265 = 41;
          v88 = &v263;
          v89 = (char *)v282;
          if (v87 >= v284)
          {
            v224 = v87 + 1;
            v225 = (char *)v282 + 24 * v87 > (char *)&v263;
            if (v282 <= &v263 && v225)
            {
              v250 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v224, 24);
              v89 = (char *)v282;
              v88 = (const void ***)((char *)v282 + v250);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v224, 24);
              v88 = &v263;
              v89 = (char *)v282;
            }
          }
          v90 = &v89[24 * v283];
          v91 = *(_OWORD *)v88;
          *((_QWORD *)v90 + 2) = v88[2];
          *(_OWORD *)v90 = v91;
          ++v283;
        }
      }
      v272 = v269[2 * (((unint64_t)*((unsigned int *)v269 + 11) >> 23) & 1) + 8];
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v272);
      if (v279)
      {
        LODWORD(v263) = 5;
        v264 = v92;
        v93 = &v263;
        v94 = (char *)v282;
        if (v283 >= v284)
        {
          v223 = v283 + 1;
          if (v282 <= &v263 && (char *)v282 + 24 * v283 > (char *)&v263)
          {
            v249 = (char *)&v263 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v223, 24);
            v94 = (char *)v282;
            v93 = (const void ***)((char *)v282 + v249);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v223, 24);
            v93 = &v263;
            v94 = (char *)v282;
          }
        }
        v95 = &v94[24 * v283];
        v96 = *(_OWORD *)v93;
        *((_QWORD *)v95 + 2) = v93[2];
        *(_OWORD *)v95 = v96;
        v97 = ++v283;
        if (v279)
        {
          LODWORD(v263) = 3;
          v264 = ")";
          v265 = 1;
          v98 = &v263;
          v99 = (char *)v282;
          if (v97 >= v284)
          {
            v226 = v97 + 1;
            v227 = (char *)v282 + 24 * v97 > (char *)&v263;
            if (v282 <= &v263 && v227)
            {
              v251 = (char *)&v263 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v226, 24);
              v99 = (char *)v282;
              v98 = (const void ***)((char *)v282 + v251);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v226, 24);
              v98 = &v263;
              v99 = (char *)v282;
            }
          }
          v100 = &v99[24 * v283];
          v101 = *(_OWORD *)v98;
          *((_QWORD *)v100 + 2) = v98[2];
          *(_OWORD *)v100 = v101;
          ++v283;
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
      if (v279)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
      if (v290)
      {
        v102 = (_QWORD **)__p;
        if (__p)
        {
          v103 = v289;
          v104 = __p;
          if (v289 != __p)
          {
            do
              v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
            while (v103 != v102);
            v104 = __p;
          }
          v289 = v102;
          operator delete(v104);
        }
        v33 = v286;
        if (v286)
        {
          v105 = v287;
          v35 = v286;
          if (v287 == v286)
            goto LABEL_148;
          do
          {
            v107 = (void *)*--v105;
            v106 = v107;
            *v105 = 0;
            if (v107)
              operator delete[](v106);
          }
          while (v105 != v33);
          goto LABEL_147;
        }
        goto LABEL_149;
      }
      goto LABEL_151;
    }
    mlir::tensor::CollapseShapeOp::getReassociationExprs((mlir::tensor::CollapseShapeOp *)&v269, &v279);
    mlir::getSymbolLessAffineMaps((uint64_t)v279, v280, (uint64_t)&v275);
    v77 = (char *)v279;
    if (v280)
    {
      v78 = 32 * v280;
      do
      {
        v79 = *(char **)&v77[v78 - 32];
        if (&v77[v78 - 16] != v79)
          free(v79);
        v78 -= 32;
      }
      while (v78);
      v77 = (char *)v279;
    }
    if (v77 != (char *)&v281)
      free(v77);
    v108 = v275;
    v109 = v276;
    if (v276)
    {
      v110 = 0;
      v111 = (const char *)v14;
      v112 = 8 * v276;
      while (mlir::AffineMap::getNumDims(v108) == v14)
      {
        ++v110;
        v108 = (mlir::AffineMap *)((char *)v108 + 8);
        v112 -= 8;
        if (!v112)
        {
          v108 = v275;
          v109 = v276;
          goto LABEL_130;
        }
      }
      v263 = (const void **)"expected reassociation map #";
      v266 = 259;
      mlir::OpState::emitOpError(&v269, &v263, (uint64_t)&v279);
      if (v279)
      {
        LODWORD(v272) = 5;
        v273 = v110;
        v166 = &v272;
        v167 = (char *)v282;
        if (v283 >= v284)
        {
          v229 = v283 + 1;
          if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
          {
            v253 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v229, 24);
            v167 = (char *)v282;
            v166 = (uint64_t *)((char *)v282 + v253);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v229, 24);
            v166 = &v272;
            v167 = (char *)v282;
          }
        }
        v168 = &v167[24 * v283];
        v169 = *(_OWORD *)v166;
        *((_QWORD *)v168 + 2) = v166[2];
        *(_OWORD *)v168 = v169;
        v170 = ++v283;
        if (v279)
        {
          LODWORD(v272) = 3;
          v273 = " of same rank as expanded memref(";
          v274 = 33;
          v171 = &v272;
          v172 = (char *)v282;
          if (v170 >= v284)
          {
            v233 = v170 + 1;
            v234 = (char *)v282 + 24 * v170 > (char *)&v272;
            if (v282 <= &v272 && v234)
            {
              v256 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v233, 24);
              v172 = (char *)v282;
              v171 = (uint64_t *)((char *)v282 + v256);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v233, 24);
              v171 = &v272;
              v172 = (char *)v282;
            }
          }
          v173 = &v172[24 * v283];
          v174 = *(_OWORD *)v171;
          *((_QWORD *)v173 + 2) = v171[2];
          *(_OWORD *)v173 = v174;
          v175 = ++v283;
          if (v279)
          {
            LODWORD(v272) = 5;
            v273 = v111;
            v176 = &v272;
            v177 = (char *)v282;
            if (v175 >= v284)
            {
              v235 = v175 + 1;
              v236 = (char *)v282 + 24 * v175 > (char *)&v272;
              if (v282 <= &v272 && v236)
              {
                v257 = (char *)&v272 - (_BYTE *)v282;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v235, 24);
                v177 = (char *)v282;
                v176 = (uint64_t *)((char *)v282 + v257);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v235, 24);
                v176 = &v272;
                v177 = (char *)v282;
              }
            }
            v178 = &v177[24 * v283];
            v179 = *(_OWORD *)v176;
            *((_QWORD *)v178 + 2) = v176[2];
            *(_OWORD *)v178 = v179;
            v180 = ++v283;
            if (v279)
            {
              LODWORD(v272) = 3;
              v273 = "), but got ";
              v274 = 11;
              v181 = &v272;
              v182 = (char *)v282;
              if (v180 >= v284)
              {
                v237 = v180 + 1;
                v238 = (char *)v282 + 24 * v180 > (char *)&v272;
                if (v282 <= &v272 && v238)
                {
                  v258 = (char *)&v272 - (_BYTE *)v282;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v237, 24);
                  v182 = (char *)v282;
                  v181 = (uint64_t *)((char *)v282 + v258);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v237, 24);
                  v181 = &v272;
                  v182 = (char *)v282;
                }
              }
              v183 = &v182[24 * v283];
              v184 = *(_OWORD *)v181;
              *((_QWORD *)v183 + 2) = v181[2];
              *(_OWORD *)v183 = v184;
              ++v283;
            }
          }
        }
      }
      NumDims = mlir::AffineMap::getNumDims(v108);
      if (v279)
      {
        LODWORD(v272) = 5;
        v273 = (const char *)NumDims;
        v186 = &v272;
        v187 = (char *)v282;
        if (v283 >= v284)
        {
          v230 = v283 + 1;
          if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
          {
            v254 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v230, 24);
            v187 = (char *)v282;
            v186 = (uint64_t *)((char *)v282 + v254);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v230, 24);
            v186 = &v272;
            v187 = (char *)v282;
          }
        }
        v188 = &v187[24 * v283];
        v189 = *(_OWORD *)v186;
        *((_QWORD *)v188 + 2) = v186[2];
        *(_OWORD *)v188 = v189;
        ++v283;
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
      if (v279)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
      if (!v290)
        goto LABEL_252;
      v190 = (_QWORD **)__p;
      if (__p)
      {
        v191 = v289;
        v192 = __p;
        if (v289 != __p)
        {
          do
            v191 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v191 - 1);
          while (v191 != v190);
          v192 = __p;
        }
        v289 = v190;
        operator delete(v192);
      }
      v193 = v286;
      if (v286)
      {
        v194 = v287;
        v195 = v286;
        if (v287 != v286)
        {
          do
          {
            v197 = (void *)*--v194;
            v196 = v197;
            *v194 = 0;
            if (v197)
              operator delete[](v196);
          }
          while (v194 != v193);
          v195 = v286;
        }
        v287 = v193;
        operator delete(v195);
      }
      v209 = v282;
      if (v282 == v285)
      {
LABEL_252:
        v122 = v275;
        if (v275 != (mlir::AffineMap *)v277)
        {
LABEL_150:
          free(v122);
          goto LABEL_151;
        }
        goto LABEL_151;
      }
    }
    else
    {
LABEL_130:
      v262 = 0;
      if ((mlir::isReassociationValid(v108, v109, &v262) & 1) != 0)
      {
        v113 = v269;
        v114 = v267;
        if (v267)
          v115 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v267 + 8);
        else
          v115 = 0;
        v198 = v268;
        if (v268)
          v199 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v268 + 8);
        else
          v199 = 0;
        v271 = v113;
        v272 = (uint64_t)v198;
        v263 = v114;
        v264 = (const char *)v115;
        v273 = (const char *)v199;
        v270 = &v271;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v263);
        v202 = v201;
        v203 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v272);
        v205 = v204;
        mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v271, (uint64_t)&v279);
        v29 = mlir::reshapeLikeShapesAreCompatible((uint64_t (*)(uint64_t, _QWORD **))llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::LogicalResult mlir::verifyReshapeLikeShapes<mlir::tensor::CollapseShapeOp>(mlir::tensor::CollapseShapeOp,mlir::ShapedType,mlir::ShapedType,BOOL)::{lambda(llvm::Twine const&)#1}>, (uint64_t)&v270, ArgAttrsAttr, v202, v203, v205, (uint64_t)v279, v280, 0);
        v206 = (uint64_t *)v279;
        if (v280)
        {
          v207 = 4 * v280;
          do
          {
            v208 = (uint64_t *)v206[v207 - 4];
            if (&v206[v207 - 2] != v208)
              free(v208);
            v207 -= 4;
          }
          while (v207 * 8);
          v206 = (uint64_t *)v279;
        }
        if (v206 == &v281)
          goto LABEL_252;
        v209 = v206;
      }
      else
      {
        v263 = (const void **)"expected reassociation map #";
        v266 = 259;
        mlir::OpState::emitOpError(&v269, &v263, (uint64_t)&v279);
        if (v279)
        {
          LODWORD(v272) = 2;
          v273 = (const char *)v262;
          v149 = &v272;
          v150 = (char *)v282;
          if (v283 >= v284)
          {
            v228 = v283 + 1;
            if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
            {
              v252 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v228, 24);
              v150 = (char *)v282;
              v149 = (uint64_t *)((char *)v282 + v252);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v228, 24);
              v149 = &v272;
              v150 = (char *)v282;
            }
          }
          v151 = &v150[24 * v283];
          v152 = *(_OWORD *)v149;
          *((_QWORD *)v151 + 2) = v149[2];
          *(_OWORD *)v151 = v152;
          v153 = ++v283;
          if (v279)
          {
            LODWORD(v272) = 3;
            v273 = " to be valid and contiguous";
            v274 = 27;
            v154 = &v272;
            v155 = (char *)v282;
            if (v153 >= v284)
            {
              v231 = v153 + 1;
              v232 = (char *)v282 + 24 * v153 > (char *)&v272;
              if (v282 <= &v272 && v232)
              {
                v255 = (char *)&v272 - (_BYTE *)v282;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v231, 24);
                v155 = (char *)v282;
                v154 = (uint64_t *)((char *)v282 + v255);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v231, 24);
                v154 = &v272;
                v155 = (char *)v282;
              }
            }
            v156 = &v155[24 * v283];
            v157 = *(_OWORD *)v154;
            *((_QWORD *)v156 + 2) = v154[2];
            *(_OWORD *)v156 = v157;
            ++v283;
          }
        }
        v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
        if (v279)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
        if (!v290)
          goto LABEL_252;
        v158 = (_QWORD **)__p;
        if (__p)
        {
          v159 = v289;
          v160 = __p;
          if (v289 != __p)
          {
            do
              v159 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v159 - 1);
            while (v159 != v158);
            v160 = __p;
          }
          v289 = v158;
          operator delete(v160);
        }
        v161 = v286;
        if (v286)
        {
          v162 = v287;
          v163 = v286;
          if (v287 != v286)
          {
            do
            {
              v165 = (void *)*--v162;
              v164 = v165;
              *v162 = 0;
              if (v165)
                operator delete[](v164);
            }
            while (v162 != v161);
            v163 = v286;
          }
          v287 = v161;
          operator delete(v163);
        }
        v209 = v282;
        if (v282 == v285)
          goto LABEL_252;
      }
    }
    free(v209);
    goto LABEL_252;
  }
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v268);
  if (v81)
  {
    v82 = 8 * v81;
    while (*Value == 1)
    {
      ++Value;
      v82 -= 8;
      if (!v82)
        goto LABEL_152;
    }
    v275 = (mlir::AffineMap *)"invalid to reshape tensor/memref with non-unit extent dimensions to zero-rank tensor/memref";
    v278 = 259;
    mlir::OpState::emitOpError(&v269, (const void ***)&v275, (uint64_t)&v279);
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v116 = (_QWORD **)__p;
      if (__p)
      {
        v117 = v289;
        v118 = __p;
        if (v289 != __p)
        {
          do
            v117 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v117 - 1);
          while (v117 != v116);
          v118 = __p;
        }
        v289 = v116;
        operator delete(v118);
      }
      v33 = v286;
      if (v286)
      {
        v119 = v287;
        v35 = v286;
        if (v287 == v286)
          goto LABEL_148;
        do
        {
          v121 = (void *)*--v119;
          v120 = v121;
          *v119 = 0;
          if (v121)
            operator delete[](v120);
        }
        while (v119 != v33);
        goto LABEL_147;
      }
LABEL_149:
      v122 = v282;
      if (v282 == v285)
        goto LABEL_151;
      goto LABEL_150;
    }
LABEL_151:
    if (!v29)
      return 0;
  }
LABEL_152:
  mlir::tensor::CollapseShapeOp::getReassociationExprs((mlir::tensor::CollapseShapeOp *)&v261, &v279);
  mlir::getSymbolLessAffineMaps((uint64_t)v279, v280, (uint64_t)&v275);
  v123 = (char *)v279;
  if (v280)
  {
    v124 = 32 * v280;
    do
    {
      v125 = *(char **)&v123[v124 - 32];
      if (&v123[v124 - 16] != v125)
        free(v125);
      v124 -= 32;
    }
    while (v124);
    v123 = (char *)v279;
  }
  if (v123 != (char *)&v281)
    free(v123);
  v126 = mlir::tensor::CollapseShapeOp::inferCollapsedType((uint64_t)v10, (uint64_t *)v275, v276);
  if (mlir::tensor::isSameTypeWithoutEncoding((uint64_t)v12, v126))
  {
    v53 = 1;
  }
  else
  {
    v263 = (const void **)"expected collapsed type to be ";
    v266 = 259;
    mlir::OpState::emitOpError(&v261, &v263, (uint64_t)&v279);
    if (v279)
    {
      v127 = &v272;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v272, v126);
      v128 = (char *)v282;
      if (v283 >= v284)
      {
        v215 = v283 + 1;
        if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
        {
          v243 = (char *)&v272 - (_BYTE *)v282;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v215, 24);
          v128 = (char *)v282;
          v127 = (uint64_t *)((char *)v282 + v243);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v215, 24);
          v127 = &v272;
          v128 = (char *)v282;
        }
      }
      v129 = &v128[24 * v283];
      v130 = *(_OWORD *)v127;
      *((_QWORD *)v129 + 2) = v127[2];
      *(_OWORD *)v129 = v130;
      v131 = ++v283;
      if (v279)
      {
        LODWORD(v272) = 3;
        v273 = ", but got ";
        v274 = 10;
        v132 = &v272;
        v133 = (char *)v282;
        if (v131 >= v284)
        {
          v218 = v131 + 1;
          v219 = (char *)v282 + 24 * v131 > (char *)&v272;
          if (v282 <= &v272 && v219)
          {
            v245 = (char *)&v272 - (_BYTE *)v282;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v218, 24);
            v133 = (char *)v282;
            v132 = (uint64_t *)((char *)v282 + v245);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v218, 24);
            v132 = &v272;
            v133 = (char *)v282;
          }
        }
        v134 = &v133[24 * v283];
        v135 = *(_OWORD *)v132;
        *((_QWORD *)v134 + 2) = v132[2];
        *(_OWORD *)v134 = v135;
        ++v283;
        if (v279)
        {
          v136 = &v272;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v272, (uint64_t)v12);
          v137 = (char *)v282;
          if (v283 >= v284)
          {
            v221 = v283 + 1;
            if (v282 <= &v272 && (char *)v282 + 24 * v283 > (char *)&v272)
            {
              v247 = (char *)&v272 - (_BYTE *)v282;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v221, 24);
              v137 = (char *)v282;
              v136 = (uint64_t *)((char *)v282 + v247);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, v285, v221, 24);
              v136 = &v272;
              v137 = (char *)v282;
            }
          }
          v138 = &v137[24 * v283];
          v139 = *(_OWORD *)v136;
          *((_QWORD *)v138 + 2) = v136[2];
          *(_OWORD *)v138 = v139;
          ++v283;
        }
      }
    }
    v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v279);
    if (v279)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v279);
    if (v290)
    {
      v140 = (_QWORD **)__p;
      if (__p)
      {
        v141 = v289;
        v142 = __p;
        if (v289 != __p)
        {
          do
            v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          v142 = __p;
        }
        v289 = v140;
        operator delete(v142);
      }
      v143 = v286;
      if (v286)
      {
        v144 = v287;
        v145 = v286;
        if (v287 != v286)
        {
          do
          {
            v147 = (void *)*--v144;
            v146 = v147;
            *v144 = 0;
            if (v147)
              operator delete[](v146);
          }
          while (v144 != v143);
          v145 = v286;
        }
        v287 = v143;
        operator delete(v145);
      }
      if (v282 != v285)
        free(v282);
    }
  }
  v68 = v275;
  if (v275 != (mlir::AffineMap *)v277)
LABEL_189:
    free(v68);
  return v53;
}

void mlir::tensor::ExpandShapeOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  const char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  const char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  unint64_t v180;

  v178 = a2;
  mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::tensor::ExpandShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v178);
  mlir::RewritePatternSet::addImpl<mlir::ComposeExpandOfCollapseOp<mlir::tensor::ExpandShapeOp,mlir::tensor::CollapseShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v178);
  v3 = v178;
  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v179, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.expand_shape", 19, (__int16)v179, v3, 0, 0);
  *(_QWORD *)v4 = &off_1E0E19150;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v179 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithConstant<mlir::tensor::ExpandShapeOp>]";
  v180 = 125;
  v9 = llvm::StringRef::find((uint64_t *)&v179, "DesiredTypeName = ", 0x12uLL, 0);
  if (v180 >= v9)
    v10 = v9;
  else
    v10 = v180;
  v11 = &v179[v10];
  v12 = v180 - v10;
  if (v180 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v180 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_192;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_193;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_196;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_196:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = v178;
  v39 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v179, 1);
  mlir::Pattern::Pattern((uint64_t)(v39 + 2), (uint64_t)"tensor.expand_shape", 19, (__int16)v179, v38, 0, 0);
  *(_QWORD *)v39 = &off_1E0E18390;
  if (*((_QWORD *)v39 + 9))
  {
    v40 = v39[22];
    if (v40 <= v39[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v39 + 20), v39 + 24, v40, 16);
    v39[22] = v39[22];
    v42 = (char *)a1[2];
    v41 = a1[3];
    if ((unint64_t)v42 < v41)
      goto LABEL_42;
    goto LABEL_53;
  }
  v179 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithSplat<mlir::tensor::ExpandShapeOp>]";
  v180 = 122;
  v44 = llvm::StringRef::find((uint64_t *)&v179, "DesiredTypeName = ", 0x12uLL, 0);
  if (v180 >= v44)
    v45 = v44;
  else
    v45 = v180;
  v46 = &v179[v45];
  v47 = v180 - v45;
  if (v180 - v45 >= 0x12)
    v48 = 18;
  else
    v48 = v180 - v45;
  v49 = &v46[v48];
  v50 = v47 - v48;
  if (v50 >= v50 - 1)
    --v50;
  *((_QWORD *)v39 + 8) = v49;
  *((_QWORD *)v39 + 9) = v50;
  v40 = v39[22];
  if (v40 > v39[23])
    goto LABEL_52;
LABEL_41:
  v39[22] = v40;
  v42 = (char *)a1[2];
  v41 = a1[3];
  if ((unint64_t)v42 < v41)
  {
LABEL_42:
    *(_QWORD *)v42 = v39;
    v43 = (uint64_t)(v42 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v51 = (char *)a1[1];
  v52 = (v42 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
    goto LABEL_192;
  v54 = v41 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (v55 >> 61)
      goto LABEL_193;
    v56 = (char *)operator new(8 * v55);
    v57 = &v56[8 * v52];
    v58 = &v56[8 * v55];
    *(_QWORD *)v57 = v39;
    v43 = (uint64_t)(v57 + 8);
    v59 = (char *)(v42 - v51);
    if (v42 != v51)
      goto LABEL_62;
  }
  else
  {
    v56 = 0;
    v57 = (char *)(8 * v52);
    v58 = 0;
    *(_QWORD *)(8 * v52) = v39;
    v43 = 8 * v52 + 8;
    v59 = (char *)(v42 - v51);
    if (v42 != v51)
    {
LABEL_62:
      v60 = (unint64_t)(v59 - 8);
      if (v60 < 0x78
        || &v42[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] < v57 && &v56[v42 - v51 - (v60 & 0xFFFFFFFFFFFFFFF8) - 8] < v42)
      {
        goto LABEL_197;
      }
      v61 = (v60 >> 3) + 1;
      v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      v63 = &v42[-v62];
      v57 -= v62;
      v64 = &v56[8 * v52 - 16];
      v65 = v42 - 16;
      v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v68 = *((_OWORD *)v65 - 1);
        v67 = *(_OWORD *)v65;
        *((_OWORD *)v65 - 1) = 0uLL;
        *(_OWORD *)v65 = 0uLL;
        *((_OWORD *)v64 - 1) = v68;
        *(_OWORD *)v64 = v67;
        v64 -= 32;
        v65 -= 32;
        v66 -= 4;
      }
      while (v66);
      v42 = v63;
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          v69 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *(_QWORD *)v42 = 0;
          *((_QWORD *)v57 - 1) = v69;
          v57 -= 8;
        }
        while (v42 != v51);
      }
      v42 = (char *)a1[1];
      v70 = (char *)a1[2];
      a1[1] = v57;
      a1[2] = v43;
      a1[3] = v58;
      while (v70 != v42)
      {
        v72 = *((_QWORD *)v70 - 1);
        v70 -= 8;
        v71 = v72;
        *(_QWORD *)v70 = 0;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v57;
  a1[2] = v43;
  a1[3] = v58;
LABEL_75:
  if (v42)
    operator delete(v42);
LABEL_77:
  a1[2] = v43;
  v73 = v178;
  v74 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v179, 1);
  mlir::Pattern::Pattern((uint64_t)(v74 + 2), (uint64_t)"tensor.expand_shape", 19, (__int16)v179, v73, 0, 0);
  *(_QWORD *)v74 = &off_1E0E19BC8;
  if (*((_QWORD *)v74 + 9))
  {
    v75 = v74[22];
    if (v75 <= v74[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v74 + 20), v74 + 24, v75, 16);
    v74[22] = v74[22];
    v77 = (char *)a1[2];
    v76 = a1[3];
    if ((unint64_t)v77 < v76)
      goto LABEL_80;
    goto LABEL_91;
  }
  v179 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithFromElements<mlir::tenso"
         "r::ExpandShapeOp>]";
  v180 = 129;
  v79 = llvm::StringRef::find((uint64_t *)&v179, "DesiredTypeName = ", 0x12uLL, 0);
  if (v180 >= v79)
    v80 = v79;
  else
    v80 = v180;
  v81 = &v179[v80];
  v82 = v180 - v80;
  if (v180 - v80 >= 0x12)
    v83 = 18;
  else
    v83 = v180 - v80;
  v84 = &v81[v83];
  v85 = v82 - v83;
  if (v85 >= v85 - 1)
    --v85;
  *((_QWORD *)v74 + 8) = v84;
  *((_QWORD *)v74 + 9) = v85;
  v75 = v74[22];
  if (v75 > v74[23])
    goto LABEL_90;
LABEL_79:
  v74[22] = v75;
  v77 = (char *)a1[2];
  v76 = a1[3];
  if ((unint64_t)v77 < v76)
  {
LABEL_80:
    *(_QWORD *)v77 = v74;
    v78 = (uint64_t)(v77 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v86 = (char *)a1[1];
  v87 = (v77 - v86) >> 3;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
    goto LABEL_192;
  v89 = v76 - (_QWORD)v86;
  if (v89 >> 2 > v88)
    v88 = v89 >> 2;
  if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
    v90 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v90 = v88;
  if (v90)
  {
    if (v90 >> 61)
      goto LABEL_193;
    v91 = (char *)operator new(8 * v90);
    v92 = &v91[8 * v87];
    v93 = &v91[8 * v90];
    *(_QWORD *)v92 = v74;
    v78 = (uint64_t)(v92 + 8);
    v94 = (char *)(v77 - v86);
    if (v77 != v86)
      goto LABEL_100;
  }
  else
  {
    v91 = 0;
    v92 = (char *)(8 * v87);
    v93 = 0;
    *(_QWORD *)(8 * v87) = v74;
    v78 = 8 * v87 + 8;
    v94 = (char *)(v77 - v86);
    if (v77 != v86)
    {
LABEL_100:
      v95 = (unint64_t)(v94 - 8);
      if (v95 < 0x78
        || &v77[-(v95 & 0xFFFFFFFFFFFFFFF8) - 8] < v92 && &v91[v77 - v86 - (v95 & 0xFFFFFFFFFFFFFFF8) - 8] < v77)
      {
        goto LABEL_198;
      }
      v96 = (v95 >> 3) + 1;
      v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
      v98 = &v77[-v97];
      v92 -= v97;
      v99 = &v91[8 * v87 - 16];
      v100 = v77 - 16;
      v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v103 = *((_OWORD *)v100 - 1);
        v102 = *(_OWORD *)v100;
        *((_OWORD *)v100 - 1) = 0uLL;
        *(_OWORD *)v100 = 0uLL;
        *((_OWORD *)v99 - 1) = v103;
        *(_OWORD *)v99 = v102;
        v99 -= 32;
        v100 -= 32;
        v101 -= 4;
      }
      while (v101);
      v77 = v98;
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_198:
        do
        {
          v104 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *(_QWORD *)v77 = 0;
          *((_QWORD *)v92 - 1) = v104;
          v92 -= 8;
        }
        while (v77 != v86);
      }
      v77 = (char *)a1[1];
      v105 = (char *)a1[2];
      a1[1] = v92;
      a1[2] = v78;
      a1[3] = v93;
      while (v105 != v77)
      {
        v107 = *((_QWORD *)v105 - 1);
        v105 -= 8;
        v106 = v107;
        *(_QWORD *)v105 = 0;
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v92;
  a1[2] = v78;
  a1[3] = v93;
LABEL_113:
  if (v77)
    operator delete(v77);
LABEL_115:
  a1[2] = v78;
  v108 = v178;
  v109 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v179, 1);
  mlir::Pattern::Pattern((uint64_t)(v109 + 2), (uint64_t)"tensor.dim", 10, (__int16)v179, v108, 0, 0);
  *(_QWORD *)v109 = off_1E0E18338;
  if (*((_QWORD *)v109 + 9))
  {
    v110 = v109[22];
    if (v110 <= v109[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v109 + 20), v109 + 24, v110, 16);
    v109[22] = v109[22];
    v112 = (char *)a1[2];
    v111 = a1[3];
    if ((unint64_t)v112 < v111)
      goto LABEL_118;
    goto LABEL_129;
  }
  v179 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldDimOfExpandShape]";
  v180 = 93;
  v114 = llvm::StringRef::find((uint64_t *)&v179, "DesiredTypeName = ", 0x12uLL, 0);
  if (v180 >= v114)
    v115 = v114;
  else
    v115 = v180;
  v116 = &v179[v115];
  v117 = v180 - v115;
  if (v180 - v115 >= 0x12)
    v118 = 18;
  else
    v118 = v180 - v115;
  v119 = &v116[v118];
  v120 = v117 - v118;
  if (v120 >= v120 - 1)
    --v120;
  *((_QWORD *)v109 + 8) = v119;
  *((_QWORD *)v109 + 9) = v120;
  v110 = v109[22];
  if (v110 > v109[23])
    goto LABEL_128;
LABEL_117:
  v109[22] = v110;
  v112 = (char *)a1[2];
  v111 = a1[3];
  if ((unint64_t)v112 < v111)
  {
LABEL_118:
    *(_QWORD *)v112 = v109;
    v113 = (uint64_t)(v112 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v121 = (char *)a1[1];
  v122 = (v112 - v121) >> 3;
  v123 = v122 + 1;
  if ((unint64_t)(v122 + 1) >> 61)
    goto LABEL_192;
  v124 = v111 - (_QWORD)v121;
  if (v124 >> 2 > v123)
    v123 = v124 >> 2;
  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
    v125 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v125 = v123;
  if (v125)
  {
    if (v125 >> 61)
      goto LABEL_193;
    v126 = (char *)operator new(8 * v125);
    v127 = &v126[8 * v122];
    v128 = &v126[8 * v125];
    *(_QWORD *)v127 = v109;
    v113 = (uint64_t)(v127 + 8);
    v129 = (char *)(v112 - v121);
    if (v112 != v121)
      goto LABEL_138;
  }
  else
  {
    v126 = 0;
    v127 = (char *)(8 * v122);
    v128 = 0;
    *(_QWORD *)(8 * v122) = v109;
    v113 = 8 * v122 + 8;
    v129 = (char *)(v112 - v121);
    if (v112 != v121)
    {
LABEL_138:
      v130 = (unint64_t)(v129 - 8);
      if (v130 < 0x78
        || &v112[-(v130 & 0xFFFFFFFFFFFFFFF8) - 8] < v127
        && &v126[v112 - v121 - (v130 & 0xFFFFFFFFFFFFFFF8) - 8] < v112)
      {
        goto LABEL_199;
      }
      v131 = (v130 >> 3) + 1;
      v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
      v133 = &v112[-v132];
      v127 -= v132;
      v134 = &v126[8 * v122 - 16];
      v135 = v112 - 16;
      v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v138 = *((_OWORD *)v135 - 1);
        v137 = *(_OWORD *)v135;
        *((_OWORD *)v135 - 1) = 0uLL;
        *(_OWORD *)v135 = 0uLL;
        *((_OWORD *)v134 - 1) = v138;
        *(_OWORD *)v134 = v137;
        v134 -= 32;
        v135 -= 32;
        v136 -= 4;
      }
      while (v136);
      v112 = v133;
      if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          v139 = *((_QWORD *)v112 - 1);
          v112 -= 8;
          *(_QWORD *)v112 = 0;
          *((_QWORD *)v127 - 1) = v139;
          v127 -= 8;
        }
        while (v112 != v121);
      }
      v112 = (char *)a1[1];
      v140 = (char *)a1[2];
      a1[1] = v127;
      a1[2] = v113;
      a1[3] = v128;
      while (v140 != v112)
      {
        v142 = *((_QWORD *)v140 - 1);
        v140 -= 8;
        v141 = v142;
        *(_QWORD *)v140 = 0;
        if (v142)
          (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v127;
  a1[2] = v113;
  a1[3] = v128;
LABEL_151:
  if (v112)
    operator delete(v112);
LABEL_153:
  a1[2] = v113;
  v143 = v178;
  v144 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v179, 1);
  mlir::Pattern::Pattern((uint64_t)(v144 + 2), (uint64_t)"tensor.dim", 10, (__int16)v179, v143, 0, 0);
  *(_QWORD *)v144 = off_1E0E18DE8;
  if (*((_QWORD *)v144 + 9))
  {
    v145 = v144[22];
    if (v145 <= v144[23])
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v144 + 20), v144 + 24, v145, 16);
    v144[22] = v144[22];
    v147 = (char *)a1[2];
    v146 = a1[3];
    if ((unint64_t)v147 < v146)
      goto LABEL_156;
    goto LABEL_167;
  }
  v179 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldDimOfCollapseShape]";
  v180 = 95;
  v149 = llvm::StringRef::find((uint64_t *)&v179, "DesiredTypeName = ", 0x12uLL, 0);
  if (v180 >= v149)
    v150 = v149;
  else
    v150 = v180;
  v151 = &v179[v150];
  v152 = v180 - v150;
  if (v180 - v150 >= 0x12)
    v153 = 18;
  else
    v153 = v180 - v150;
  v154 = &v151[v153];
  v155 = v152 - v153;
  if (v155 >= v155 - 1)
    --v155;
  *((_QWORD *)v144 + 8) = v154;
  *((_QWORD *)v144 + 9) = v155;
  v145 = v144[22];
  if (v145 > v144[23])
    goto LABEL_166;
LABEL_155:
  v144[22] = v145;
  v147 = (char *)a1[2];
  v146 = a1[3];
  if ((unint64_t)v147 < v146)
  {
LABEL_156:
    *(_QWORD *)v147 = v144;
    v148 = (uint64_t)(v147 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v156 = (char *)a1[1];
  v157 = (v147 - v156) >> 3;
  v158 = v157 + 1;
  if ((unint64_t)(v157 + 1) >> 61)
LABEL_192:
    abort();
  v159 = v146 - (_QWORD)v156;
  if (v159 >> 2 > v158)
    v158 = v159 >> 2;
  if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
    v160 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v160 = v158;
  if (!v160)
  {
    v161 = 0;
    v162 = (char *)(8 * v157);
    v163 = 0;
    *(_QWORD *)(8 * v157) = v144;
    v148 = 8 * v157 + 8;
    v164 = (char *)(v147 - v156);
    if (v147 != v156)
      goto LABEL_176;
    goto LABEL_188;
  }
  if (v160 >> 61)
LABEL_193:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v161 = (char *)operator new(8 * v160);
  v162 = &v161[8 * v157];
  v163 = &v161[8 * v160];
  *(_QWORD *)v162 = v144;
  v148 = (uint64_t)(v162 + 8);
  v164 = (char *)(v147 - v156);
  if (v147 != v156)
  {
LABEL_176:
    v165 = (unint64_t)(v164 - 8);
    if (v165 < 0x78
      || &v147[-(v165 & 0xFFFFFFFFFFFFFFF8) - 8] < v162
      && &v161[v147 - v156 - (v165 & 0xFFFFFFFFFFFFFFF8) - 8] < v147)
    {
      goto LABEL_200;
    }
    v166 = (v165 >> 3) + 1;
    v167 = 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
    v168 = &v147[-v167];
    v162 -= v167;
    v169 = &v161[8 * v157 - 16];
    v170 = v147 - 16;
    v171 = v166 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v173 = *((_OWORD *)v170 - 1);
      v172 = *(_OWORD *)v170;
      *((_OWORD *)v170 - 1) = 0uLL;
      *(_OWORD *)v170 = 0uLL;
      *((_OWORD *)v169 - 1) = v173;
      *(_OWORD *)v169 = v172;
      v169 -= 32;
      v170 -= 32;
      v171 -= 4;
    }
    while (v171);
    v147 = v168;
    if (v166 != (v166 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_200:
      do
      {
        v174 = *((_QWORD *)v147 - 1);
        v147 -= 8;
        *(_QWORD *)v147 = 0;
        *((_QWORD *)v162 - 1) = v174;
        v162 -= 8;
      }
      while (v147 != v156);
    }
    v147 = (char *)a1[1];
    v175 = (char *)a1[2];
    a1[1] = v162;
    a1[2] = v148;
    a1[3] = v163;
    while (v175 != v147)
    {
      v177 = *((_QWORD *)v175 - 1);
      v175 -= 8;
      v176 = v177;
      *(_QWORD *)v175 = 0;
      if (v177)
        (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
    }
    goto LABEL_189;
  }
LABEL_188:
  a1[1] = v162;
  a1[2] = v148;
  a1[3] = v163;
LABEL_189:
  if (v147)
    operator delete(v147);
LABEL_191:
  a1[2] = v148;
}

void mlir::tensor::CollapseShapeOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  const char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  unint64_t v145;

  v143 = a2;
  mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::tensor::CollapseShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v143);
  mlir::RewritePatternSet::addImpl<mlir::ComposeCollapseOfExpandOp<mlir::tensor::CollapseShapeOp,mlir::tensor::ExpandShapeOp,mlir::tensor::CastOp>,mlir::MLIRContext *&>(a1, 0, 0, &v143);
  v3 = v143;
  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v144, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.collapse_shape", 21, (__int16)v144, v3, 0, 0);
  *(_QWORD *)v4 = &off_1E0E191A8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v144 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithConstant<mlir::tensor::C"
         "ollapseShapeOp>]";
  v145 = 127;
  v9 = llvm::StringRef::find((uint64_t *)&v144, "DesiredTypeName = ", 0x12uLL, 0);
  if (v145 >= v9)
    v10 = v9;
  else
    v10 = v145;
  v11 = &v144[v10];
  v12 = v145 - v10;
  if (v145 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v145 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_154;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_155;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_158;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_158:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = v143;
  v39 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v144, 1);
  mlir::Pattern::Pattern((uint64_t)(v39 + 2), (uint64_t)"tensor.collapse_shape", 21, (__int16)v144, v38, 0, 0);
  *(_QWORD *)v39 = &off_1E0E183E8;
  if (*((_QWORD *)v39 + 9))
  {
    v40 = v39[22];
    if (v40 <= v39[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v39 + 20), v39 + 24, v40, 16);
    v39[22] = v39[22];
    v42 = (char *)a1[2];
    v41 = a1[3];
    if ((unint64_t)v42 < v41)
      goto LABEL_42;
    goto LABEL_53;
  }
  v144 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithSplat<mlir::tensor::CollapseShapeOp>]";
  v145 = 124;
  v44 = llvm::StringRef::find((uint64_t *)&v144, "DesiredTypeName = ", 0x12uLL, 0);
  if (v145 >= v44)
    v45 = v44;
  else
    v45 = v145;
  v46 = &v144[v45];
  v47 = v145 - v45;
  if (v145 - v45 >= 0x12)
    v48 = 18;
  else
    v48 = v145 - v45;
  v49 = &v46[v48];
  v50 = v47 - v48;
  if (v50 >= v50 - 1)
    --v50;
  *((_QWORD *)v39 + 8) = v49;
  *((_QWORD *)v39 + 9) = v50;
  v40 = v39[22];
  if (v40 > v39[23])
    goto LABEL_52;
LABEL_41:
  v39[22] = v40;
  v42 = (char *)a1[2];
  v41 = a1[3];
  if ((unint64_t)v42 < v41)
  {
LABEL_42:
    *(_QWORD *)v42 = v39;
    v43 = (uint64_t)(v42 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v51 = (char *)a1[1];
  v52 = (v42 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
    goto LABEL_154;
  v54 = v41 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (v55 >> 61)
      goto LABEL_155;
    v56 = (char *)operator new(8 * v55);
    v57 = &v56[8 * v52];
    v58 = &v56[8 * v55];
    *(_QWORD *)v57 = v39;
    v43 = (uint64_t)(v57 + 8);
    v59 = (char *)(v42 - v51);
    if (v42 != v51)
      goto LABEL_62;
  }
  else
  {
    v56 = 0;
    v57 = (char *)(8 * v52);
    v58 = 0;
    *(_QWORD *)(8 * v52) = v39;
    v43 = 8 * v52 + 8;
    v59 = (char *)(v42 - v51);
    if (v42 != v51)
    {
LABEL_62:
      v60 = (unint64_t)(v59 - 8);
      if (v60 < 0x78
        || &v42[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] < v57 && &v56[v42 - v51 - (v60 & 0xFFFFFFFFFFFFFFF8) - 8] < v42)
      {
        goto LABEL_159;
      }
      v61 = (v60 >> 3) + 1;
      v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      v63 = &v42[-v62];
      v57 -= v62;
      v64 = &v56[8 * v52 - 16];
      v65 = v42 - 16;
      v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v68 = *((_OWORD *)v65 - 1);
        v67 = *(_OWORD *)v65;
        *((_OWORD *)v65 - 1) = 0uLL;
        *(_OWORD *)v65 = 0uLL;
        *((_OWORD *)v64 - 1) = v68;
        *(_OWORD *)v64 = v67;
        v64 -= 32;
        v65 -= 32;
        v66 -= 4;
      }
      while (v66);
      v42 = v63;
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_159:
        do
        {
          v69 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *(_QWORD *)v42 = 0;
          *((_QWORD *)v57 - 1) = v69;
          v57 -= 8;
        }
        while (v42 != v51);
      }
      v42 = (char *)a1[1];
      v70 = (char *)a1[2];
      a1[1] = v57;
      a1[2] = v43;
      a1[3] = v58;
      while (v70 != v42)
      {
        v72 = *((_QWORD *)v70 - 1);
        v70 -= 8;
        v71 = v72;
        *(_QWORD *)v70 = 0;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v57;
  a1[2] = v43;
  a1[3] = v58;
LABEL_75:
  if (v42)
    operator delete(v42);
LABEL_77:
  a1[2] = v43;
  v73 = v143;
  v74 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v144, 1);
  mlir::Pattern::Pattern((uint64_t)(v74 + 2), (uint64_t)"tensor.collapse_shape", 21, (__int16)v144, v73, 0, 0);
  *(_QWORD *)v74 = &off_1E0E19C20;
  if (*((_QWORD *)v74 + 9))
  {
    v75 = v74[22];
    if (v75 <= v74[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v74 + 20), v74 + 24, v75, 16);
    v74[22] = v74[22];
    v77 = (char *)a1[2];
    v76 = a1[3];
    if ((unint64_t)v77 < v76)
      goto LABEL_80;
    goto LABEL_91;
  }
  v144 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldReshapeWithFromElements<mlir::tenso"
         "r::CollapseShapeOp>]";
  v145 = 131;
  v79 = llvm::StringRef::find((uint64_t *)&v144, "DesiredTypeName = ", 0x12uLL, 0);
  if (v145 >= v79)
    v80 = v79;
  else
    v80 = v145;
  v81 = &v144[v80];
  v82 = v145 - v80;
  if (v145 - v80 >= 0x12)
    v83 = 18;
  else
    v83 = v145 - v80;
  v84 = &v81[v83];
  v85 = v82 - v83;
  if (v85 >= v85 - 1)
    --v85;
  *((_QWORD *)v74 + 8) = v84;
  *((_QWORD *)v74 + 9) = v85;
  v75 = v74[22];
  if (v75 > v74[23])
    goto LABEL_90;
LABEL_79:
  v74[22] = v75;
  v77 = (char *)a1[2];
  v76 = a1[3];
  if ((unint64_t)v77 < v76)
  {
LABEL_80:
    *(_QWORD *)v77 = v74;
    v78 = (uint64_t)(v77 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v86 = (char *)a1[1];
  v87 = (v77 - v86) >> 3;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
    goto LABEL_154;
  v89 = v76 - (_QWORD)v86;
  if (v89 >> 2 > v88)
    v88 = v89 >> 2;
  if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
    v90 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v90 = v88;
  if (v90)
  {
    if (v90 >> 61)
      goto LABEL_155;
    v91 = (char *)operator new(8 * v90);
    v92 = &v91[8 * v87];
    v93 = &v91[8 * v90];
    *(_QWORD *)v92 = v74;
    v78 = (uint64_t)(v92 + 8);
    v94 = (char *)(v77 - v86);
    if (v77 != v86)
      goto LABEL_100;
  }
  else
  {
    v91 = 0;
    v92 = (char *)(8 * v87);
    v93 = 0;
    *(_QWORD *)(8 * v87) = v74;
    v78 = 8 * v87 + 8;
    v94 = (char *)(v77 - v86);
    if (v77 != v86)
    {
LABEL_100:
      v95 = (unint64_t)(v94 - 8);
      if (v95 < 0x78
        || &v77[-(v95 & 0xFFFFFFFFFFFFFFF8) - 8] < v92 && &v91[v77 - v86 - (v95 & 0xFFFFFFFFFFFFFFF8) - 8] < v77)
      {
        goto LABEL_160;
      }
      v96 = (v95 >> 3) + 1;
      v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
      v98 = &v77[-v97];
      v92 -= v97;
      v99 = &v91[8 * v87 - 16];
      v100 = v77 - 16;
      v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v103 = *((_OWORD *)v100 - 1);
        v102 = *(_OWORD *)v100;
        *((_OWORD *)v100 - 1) = 0uLL;
        *(_OWORD *)v100 = 0uLL;
        *((_OWORD *)v99 - 1) = v103;
        *(_OWORD *)v99 = v102;
        v99 -= 32;
        v100 -= 32;
        v101 -= 4;
      }
      while (v101);
      v77 = v98;
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_160:
        do
        {
          v104 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *(_QWORD *)v77 = 0;
          *((_QWORD *)v92 - 1) = v104;
          v92 -= 8;
        }
        while (v77 != v86);
      }
      v77 = (char *)a1[1];
      v105 = (char *)a1[2];
      a1[1] = v92;
      a1[2] = v78;
      a1[3] = v93;
      while (v105 != v77)
      {
        v107 = *((_QWORD *)v105 - 1);
        v105 -= 8;
        v106 = v107;
        *(_QWORD *)v105 = 0;
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v92;
  a1[2] = v78;
  a1[3] = v93;
LABEL_113:
  if (v77)
    operator delete(v77);
LABEL_115:
  a1[2] = v78;
  v108 = v143;
  v109 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v144, 1);
  mlir::Pattern::Pattern((uint64_t)(v109 + 2), (uint64_t)"tensor.collapse_shape", 21, (__int16)v144, v108, 0, 0);
  *(_QWORD *)v109 = off_1E0E182E0;
  if (*((_QWORD *)v109 + 9))
  {
    v110 = v109[22];
    if (v110 <= v109[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v109 + 20), v109 + 24, v110, 16);
    v109[22] = v109[22];
    v112 = (char *)a1[2];
    v111 = a1[3];
    if ((unint64_t)v112 < v111)
      goto LABEL_118;
    goto LABEL_129;
  }
  v144 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldCollapseOfCastOp]";
  v145 = 93;
  v114 = llvm::StringRef::find((uint64_t *)&v144, "DesiredTypeName = ", 0x12uLL, 0);
  if (v145 >= v114)
    v115 = v114;
  else
    v115 = v145;
  v116 = &v144[v115];
  v117 = v145 - v115;
  if (v145 - v115 >= 0x12)
    v118 = 18;
  else
    v118 = v145 - v115;
  v119 = &v116[v118];
  v120 = v117 - v118;
  if (v120 >= v120 - 1)
    --v120;
  *((_QWORD *)v109 + 8) = v119;
  *((_QWORD *)v109 + 9) = v120;
  v110 = v109[22];
  if (v110 > v109[23])
    goto LABEL_128;
LABEL_117:
  v109[22] = v110;
  v112 = (char *)a1[2];
  v111 = a1[3];
  if ((unint64_t)v112 < v111)
  {
LABEL_118:
    *(_QWORD *)v112 = v109;
    v113 = (uint64_t)(v112 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v121 = (char *)a1[1];
  v122 = (v112 - v121) >> 3;
  v123 = v122 + 1;
  if ((unint64_t)(v122 + 1) >> 61)
LABEL_154:
    abort();
  v124 = v111 - (_QWORD)v121;
  if (v124 >> 2 > v123)
    v123 = v124 >> 2;
  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
    v125 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v125 = v123;
  if (!v125)
  {
    v126 = 0;
    v127 = (char *)(8 * v122);
    v128 = 0;
    *(_QWORD *)(8 * v122) = v109;
    v113 = 8 * v122 + 8;
    v129 = (char *)(v112 - v121);
    if (v112 != v121)
      goto LABEL_138;
    goto LABEL_150;
  }
  if (v125 >> 61)
LABEL_155:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v126 = (char *)operator new(8 * v125);
  v127 = &v126[8 * v122];
  v128 = &v126[8 * v125];
  *(_QWORD *)v127 = v109;
  v113 = (uint64_t)(v127 + 8);
  v129 = (char *)(v112 - v121);
  if (v112 != v121)
  {
LABEL_138:
    v130 = (unint64_t)(v129 - 8);
    if (v130 < 0x78
      || &v112[-(v130 & 0xFFFFFFFFFFFFFFF8) - 8] < v127
      && &v126[v112 - v121 - (v130 & 0xFFFFFFFFFFFFFFF8) - 8] < v112)
    {
      goto LABEL_161;
    }
    v131 = (v130 >> 3) + 1;
    v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
    v133 = &v112[-v132];
    v127 -= v132;
    v134 = &v126[8 * v122 - 16];
    v135 = v112 - 16;
    v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v138 = *((_OWORD *)v135 - 1);
      v137 = *(_OWORD *)v135;
      *((_OWORD *)v135 - 1) = 0uLL;
      *(_OWORD *)v135 = 0uLL;
      *((_OWORD *)v134 - 1) = v138;
      *(_OWORD *)v134 = v137;
      v134 -= 32;
      v135 -= 32;
      v136 -= 4;
    }
    while (v136);
    v112 = v133;
    if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        v139 = *((_QWORD *)v112 - 1);
        v112 -= 8;
        *(_QWORD *)v112 = 0;
        *((_QWORD *)v127 - 1) = v139;
        v127 -= 8;
      }
      while (v112 != v121);
    }
    v112 = (char *)a1[1];
    v140 = (char *)a1[2];
    a1[1] = v127;
    a1[2] = v113;
    a1[3] = v128;
    while (v140 != v112)
    {
      v142 = *((_QWORD *)v140 - 1);
      v140 -= 8;
      v141 = v142;
      *(_QWORD *)v140 = 0;
      if (v142)
        (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
    }
    goto LABEL_151;
  }
LABEL_150:
  a1[1] = v127;
  a1[2] = v113;
  a1[3] = v128;
LABEL_151:
  if (v112)
    operator delete(v112);
LABEL_153:
  a1[2] = v113;
}

unint64_t mlir::tensor::ExpandShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t DefiningOp;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *a1;
  v3 = *(uint64_t **)(a2 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::CollapseShapeOp,void>::id)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        return *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) | 4;
    }
  }
  v8 = *v3;
  if (!*v3)
    return 0;
  v9 = mlir::DenseElementsAttr::classof(*v3);
  v10 = v9 ? v8 : 0;
  v15 = v10;
  if (!v9)
    return 0;
  if (*(_DWORD *)(v2 + 36))
    v11 = v2 - 16;
  else
    v11 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  else
    v13 = 0;
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::tensor::CollapseShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t DefiningOp;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *a1;
  v3 = *(uint64_t **)(a2 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExpandShapeOp,void>::id)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        return *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) | 4;
    }
  }
  v8 = *v3;
  if (!*v3)
    return 0;
  v9 = mlir::DenseElementsAttr::classof(*v3);
  v10 = v9 ? v8 : 0;
  v15 = v10;
  if (!v9)
    return 0;
  if (*(_DWORD *)(v2 + 36))
    v11 = v2 - 16;
  else
    v11 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  else
    v13 = 0;
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::tensor::ExtractSliceOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "extracted_slice", 15);
}

uint64_t mlir::tensor::ExtractSliceOp::inferResultType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t RHS;
  uint64_t v15;
  uint64_t v17;
  void *v18[2];
  _BYTE v19[48];
  void *v20[2];
  _BYTE v21[48];
  void *v22[2];
  _BYTE v23[48];
  void *v24[2];
  _BYTE v25[48];
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[48];
  void *v29[2];
  _QWORD v30[8];

  v30[6] = *MEMORY[0x1E0C80C00];
  v29[0] = v30;
  v29[1] = (void *)0x600000000;
  v26 = v28;
  v27 = 0x600000000;
  v24[0] = v25;
  v24[1] = (void *)0x600000000;
  v22[0] = v23;
  v22[1] = (void *)0x600000000;
  v20[0] = v21;
  v20[1] = (void *)0x600000000;
  v18[0] = v19;
  v18[1] = (void *)0x600000000;
  mlir::dispatchIndexOpFoldResults(a2, a3, (uint64_t)v22, (uint64_t)v29);
  mlir::dispatchIndexOpFoldResults(a4, a5, (uint64_t)v20, (uint64_t)&v26);
  mlir::dispatchIndexOpFoldResults(a6, a7, (uint64_t)v18, (uint64_t)v24);
  v12 = (uint64_t)v26;
  v13 = v27;
  v17 = a1;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v17);
  v15 = mlir::RankedTensorType::get(v12, v13, RHS, 0);
  if (v18[0] != v19)
    free(v18[0]);
  if (v20[0] != v21)
    free(v20[0]);
  if (v22[0] != v23)
    free(v22[0]);
  if (v24[0] != v25)
    free(v24[0]);
  if (v26 != v28)
    free(v26);
  if (v29[0] != v30)
    free(v29[0]);
  return v15;
}

uint64_t mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t RHS;
  int v10;
  int v11;
  uint64_t Value;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *__p;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[7];

  v27[6] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
  v24 = mlir::RankedTensorType::get(a5, a6, RHS, 0);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  v11 = v10 - a1;
  if (v10 - a1 >= 1)
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
    v14 = v13;
    mlir::getPositionsOfShapeOne(v11, Value, v13, (unint64_t *)&__p);
    v25 = v27;
    v26 = 0x600000000;
    v15 = 0;
    if (v14)
    {
      v16 = 0;
      while (1)
      {
        if ((__p & 1) != 0)
        {
          if (((1 << v16) & ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58))) == 0)
          {
LABEL_10:
            v17 = *(_QWORD *)(Value + 8 * v16);
            if (v15 >= HIDWORD(v26))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v15 + 1, 8);
              v15 = v26;
            }
            *((_QWORD *)v25 + v15) = v17;
            v15 = v26 + 1;
            LODWORD(v26) = v26 + 1;
          }
        }
        else if ((*(_QWORD *)(*(_QWORD *)__p + 8 * (v16 >> 6)) & (1 << v16)) == 0)
        {
          goto LABEL_10;
        }
        if (v14 == ++v16)
        {
          v18 = v25;
          goto LABEL_14;
        }
      }
    }
    v18 = v27;
LABEL_14:
    v19 = v15;
    v20 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v24);
    v24 = mlir::RankedTensorType::get((uint64_t)v18, v19, v20, 0);
    if (v25 != v27)
      free(v25);
    v21 = __p;
    if ((__p & 1) == 0 && __p)
    {
      if (*(void **)__p != (char *)__p + 16)
        free(*(void **)__p);
      operator delete(v21);
    }
  }
  return v24;
}

BOOL llvm::SmallBitVector::test(llvm::SmallBitVector *this, unsigned int a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
    return ((1 << a2) & (v2 >> 1) & ~(-1 << (v2 >> 58))) != 0;
  else
    return (*(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 6)) & (1 << a2)) != 0;
}

uint64_t mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(int a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18[2];
  _BYTE v19[48];
  void *v20[2];
  _BYTE v21[48];
  void *v22[2];
  _BYTE v23[48];
  void *v24[2];
  _BYTE v25[48];
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[48];
  void *v29[2];
  _QWORD v30[8];

  v30[6] = *MEMORY[0x1E0C80C00];
  v29[0] = v30;
  v29[1] = (void *)0x600000000;
  v26 = v28;
  v27 = 0x600000000;
  v24[0] = v25;
  v24[1] = (void *)0x600000000;
  v22[0] = v23;
  v22[1] = (void *)0x600000000;
  v20[0] = v21;
  v20[1] = (void *)0x600000000;
  v18[0] = v19;
  v18[1] = (void *)0x600000000;
  mlir::dispatchIndexOpFoldResults(a3, a4, (uint64_t)v22, (uint64_t)v29);
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)v20, (uint64_t)&v26);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)v18, (uint64_t)v24);
  v16 = mlir::tensor::ExtractSliceOp::inferCanonicalRankReducedResultType(a1, a2, v14, v15, (uint64_t)v26, v27);
  if (v18[0] != v19)
    free(v18[0]);
  if (v20[0] != v21)
    free(v20[0]);
  if (v22[0] != v23)
    free(v22[0]);
  if (v24[0] != v25)
    free(v24[0]);
  if (v26 != v28)
    free(v26);
  if (v29[0] != v30)
    free(v29[0]);
  return v16;
}

void mlir::tensor::ExtractSliceOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *__src, uint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t RHS;
  uint64_t DenseI64ArrayAttr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26[2];
  unint64_t v27[2];
  unint64_t v28[2];
  void *v29;
  uint64_t v30;
  _BYTE v31[48];
  void *v32;
  uint64_t v33;
  _BYTE v34[48];
  void *v35;
  uint64_t v36;
  _BYTE v37[48];
  void *v38;
  uint64_t v39;
  _BYTE v40[48];
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[48];
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[8];

  v46[6] = *MEMORY[0x1E0C80C00];
  v44 = v46;
  v45 = 0x600000000;
  v41 = v43;
  v42 = 0x600000000;
  v38 = v40;
  v39 = 0x600000000;
  v35 = v37;
  v36 = 0x600000000;
  v32 = v34;
  v33 = 0x600000000;
  v29 = v31;
  v30 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v35, (uint64_t)&v44);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v32, (uint64_t)&v41);
  mlir::dispatchIndexOpFoldResults(a9, a10, (uint64_t)&v29, (uint64_t)&v38);
  if (!a3)
  {
    v18 = (uint64_t)v41;
    v19 = v42;
    v25 = *(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
    a3 = mlir::RankedTensorType::get(v18, v19, RHS, 0);
  }
  mlir::ValueRange::ValueRange(v28, (uint64_t)v35, v36);
  mlir::ValueRange::ValueRange(v27, (uint64_t)v32, v33);
  mlir::ValueRange::ValueRange(v26, (uint64_t)v29, v30);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v44, v45);
  v22 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v41, v42);
  v23 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v38, v39);
  mlir::tensor::ExtractSliceOp::build(v23, a2, a3, a4, v28[0], v28[1], v27[0], v27[1], v26[0], v26[1], DenseI64ArrayAttr, v22, v23);
  *(_QWORD *)(a2 + 192) = 0;
  v24 = *(unsigned int *)(a2 + 120);
  if (a12 + v24 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a12 + v24, 16);
    LODWORD(v24) = *(_DWORD *)(a2 + 120);
  }
  if (a12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v24), __src, 16 * a12);
    LODWORD(v24) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v24 + a12;
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
}

void mlir::tensor::ExtractSliceOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _DWORD *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  v18 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v18[6] = 1;
  v18[7] = a6;
  v18[8] = a8;
  v18[9] = a10;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a11;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = a12;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ExtractSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = a13;
  v19 = *(unsigned int *)(a2 + 72);
  if (v19 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v19) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::tensor::ExtractSliceOp::verify(mlir::tensor::ExtractSliceOp *this)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int isRankReducedType;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(this, (uint64_t)&v18);
  v3 = (uint64_t *)v18;
  v4 = v19;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&v15);
  v5 = (uint64_t *)v15;
  v6 = v16;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(this, (uint64_t)&v12);
  v7 = (_QWORD *)mlir::tensor::ExtractSliceOp::inferResultType(v2, v3, v4, v5, v6, (uint64_t *)v12, v13);
  if (v12 != &v14)
    free(v12);
  if (v15 != &v17)
    free(v15);
  if (v18 != v20)
    free(v18);
  if (v7)
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
  else
    v8 = 0;
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v9 = *(_QWORD *)this - 16;
  else
    v9 = 0;
  v10 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v10)
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
  isRankReducedType = mlir::isRankReducedType(v7, v8, v10);
  produceSliceErrorMsg(isRankReducedType);
}

void produceSliceErrorMsg(int a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1806C0A54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, int a14, __int16 a15, char a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t *v52;
  int *v53;
  int *v54;
  int *v55;
  __int128 v56;
  uint64_t v57;
  _QWORD **v58;
  _QWORD **v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  void *v65;
  unint64_t v67;
  int64_t v68;
  const char *v69;
  __int16 v70;
  int v71;
  const char *v72;
  uint64_t v73;
  _QWORD v74[3];
  int *v75;
  unsigned int v76;
  unsigned int v77;
  _BYTE v78[96];
  _QWORD *v79;
  _QWORD *v80;
  _QWORD **v81;
  _QWORD **v82;
  char v83;

  v69 = "expected rank to be smaller or equal to ";
  v70 = 259;
  mlir::Operation::emitError(v52, (uint64_t)&v69, (uint64_t)v74);
  if (v74[0])
  {
    v71 = 3;
    v72 = "the other rank. ";
    v73 = 16;
    v53 = &v71;
    v54 = v75;
    if (v76 >= v77)
    {
      v67 = v76 + 1;
      if (v75 <= &v71 && &v75[6 * v76] > &v71)
      {
        v68 = (char *)&v71 - (char *)v75;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v67, 24);
        v54 = v75;
        v53 = (int *)((char *)v75 + v68);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v67, 24);
        v53 = &v71;
        v54 = v75;
      }
    }
    v55 = &v54[6 * v76];
    v56 = *(_OWORD *)v53;
    *((_QWORD *)v55 + 2) = *((_QWORD *)v53 + 2);
    *(_OWORD *)v55 = v56;
    ++v76;
  }
  v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
  if (v74[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
  if (v83)
  {
    v58 = v81;
    if (v81)
    {
      v59 = v82;
      v60 = v81;
      if (v82 != v81)
      {
        do
          v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
        while (v59 != v58);
        v60 = v81;
      }
      v82 = v58;
      operator delete(v60);
    }
    v61 = v79;
    if (v79)
    {
      v62 = v80;
      v63 = v79;
      if (v80 != v79)
      {
        do
        {
          v65 = (void *)*--v62;
          v64 = v65;
          *v62 = 0;
          if (v65)
            operator delete[](v64);
        }
        while (v62 != v61);
        v63 = v79;
      }
      v80 = v61;
      operator delete(v63);
    }
    if (v75 != (int *)v78)
      free(v75);
  }
  return v57;
}

void getDroppedDims(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t Int;
  unint64_t v21;

  if (a5 >= 0x3A)
  {
    v11 = operator new(0x48uLL);
    v10 = (unint64_t)v11;
    v12 = a5 + 63;
    v13 = (a5 + 63) >> 6;
    *(_QWORD *)v11 = v11 + 4;
    v11[3] = 6;
    if ((a5 + 63) < 0x1C0)
    {
      if (v12 < 0x40)
      {
LABEL_9:
        *(_DWORD *)(v10 + 8) = v13;
        *(_DWORD *)(v10 + 64) = a5;
        *a1 = v10;
        goto LABEL_10;
      }
      v14 = v11 + 4;
      v15 = 8 * v13;
    }
    else
    {
      v11[2] = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v11 + 4, v12 >> 6, 8);
      v14 = *(void **)v10;
      v15 = 8 * v13;
    }
    bzero(v14, v15);
    goto LABEL_9;
  }
  v10 = (a5 << 58) | 1;
  *a1 = v10;
  if (a5)
  {
LABEL_10:
    v16 = 0;
    v17 = 0;
    for (i = 8 * a5; i; i -= 8)
    {
      v19 = *(_QWORD *)(a4 + 8 * v17);
      if ((v19 & 4) != 0)
      {
        if (v16 == a3)
          goto LABEL_19;
      }
      else
      {
        v21 = v19 & 0xFFFFFFFFFFFFFFF8;
        Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v21);
        if (v16 == a3 || Int == 1 && *(_QWORD *)(a2 + 8 * v16) != 1)
        {
LABEL_19:
          if ((v10 & 1) != 0)
          {
            v10 = v10 & 0xFC00000000000000 | (2
                                              * (((v10 >> 1) & ~(-1 << (v10 >> 58)) | (1 << v17)) & ~(-1 << (v10 >> 58)))) | 1;
            *a1 = v10;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v10 + 8 * (v17 >> 6)) |= 1 << v17;
          }
          goto LABEL_12;
        }
      }
      ++v16;
LABEL_12:
      ++v17;
    }
  }
}

uint64_t mlir::tensor::ExtractSliceOp::reifyResultShapes(mlir::memref::ReinterpretCastOp *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t Value;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *__p;
  unint64_t v45;
  void *__dst;
  uint64_t v47;
  _BYTE v48[48];
  void *__src;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x1E0C80C00];
  v5 = a3[2];
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      goto LABEL_19;
    v6 = *(_QWORD *)a3;
    v7 = v5 << 6;
    do
    {
      v8 = *(void **)(v6 + v7 - 64);
      if ((void *)(v6 + v7 - 48) != v8)
        free(v8);
      v7 -= 64;
    }
    while (v7 != 64);
  }
  else
  {
    if (a3[3])
    {
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpFoldResult,6u>,false>::grow((uint64_t)a3, 1uLL);
      v9 = a3[2];
      if ((_DWORD)v9 == 1)
        goto LABEL_18;
    }
    v10 = *(_QWORD *)a3;
    v11 = *(_QWORD *)a3 + (v9 << 6);
    v12 = -v9 & 0x3FFFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = v12 + 1;
      v14 = (v12 + 1) & 0x7FFFFFFFFFFFFFELL;
      v15 = v11 + (v14 << 6);
      v16 = v11 + 80;
      v17 = v14;
      do
      {
        *(_QWORD *)(v16 - 80) = v16 - 64;
        *(_QWORD *)(v16 - 16) = v16;
        *(_QWORD *)(v16 - 72) = 0x600000000;
        *(_QWORD *)(v16 - 8) = 0x600000000;
        v16 += 128;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
        goto LABEL_18;
    }
    else
    {
      v15 = v11;
    }
    v18 = v15 + 16;
    do
    {
      v19 = v18 - 16;
      *(_QWORD *)(v18 - 16) = v18;
      *(_QWORD *)(v18 - 8) = 0x600000000;
      v18 += 64;
    }
    while (v19 != v10);
  }
LABEL_18:
  a3[2] = 1;
LABEL_19:
  v20 = *(_QWORD *)a3;
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v21 = *(_QWORD *)a1 - 16;
  else
    v21 = 0;
  __dst = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&__dst);
  if (v22 > *(unsigned int *)(v20 + 12))
    llvm::SmallVectorBase<unsigned int>::grow_pod(v20, (void *)(v20 + 16), v22, 8);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(a1, (uint64_t)&__src);
  __dst = v48;
  v47 = 0x600000000;
  v23 = v50;
  v24 = __src;
  if ((_DWORD)v50)
  {
    if (__src == v51)
    {
      v25 = v50;
      if (v50 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v48, v50, 8),
            v25 = v50,
            v24 = __src,
            (_DWORD)v50))
      {
        memcpy(__dst, v24, 8 * v25);
        v24 = __src;
      }
      LODWORD(v47) = v23;
    }
    else
    {
      __dst = __src;
      v47 = v50;
      __src = v51;
      HIDWORD(v50) = 0;
      v24 = v51;
    }
    LODWORD(v50) = 0;
  }
  if (v24 != v51)
    free(v24);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v26 = *(_QWORD *)a1 - 16;
  else
    v26 = 0;
  v45 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  v29 = v28;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(a1, (uint64_t)&__src);
  getDroppedDims((unint64_t *)&__p, Value, v29, (uint64_t)__src, v50);
  if (__src != v51)
    free(__src);
  v30 = (void **)__p;
  if (!(_DWORD)v47)
  {
    if ((__p & 1) != 0)
      goto LABEL_52;
    goto LABEL_48;
  }
  v31 = __dst;
  if ((__p & 1) == 0)
  {
    v32 = 0;
    v33 = 8 * v47;
    do
    {
      if (((*((_QWORD *)*v30 + (v32 >> 6)) >> v32) & 1) == 0)
      {
        v34 = *(_QWORD *)a3;
        v35 = v31[v32];
        v36 = *(unsigned int *)(*(_QWORD *)a3 + 8);
        if (v36 >= *(unsigned int *)(*(_QWORD *)a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)a3, (void *)(v34 + 16), v36 + 1, 8);
          v36 = *(unsigned int *)(v34 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v34 + 8 * v36) = v35;
        ++*(_DWORD *)(v34 + 8);
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
LABEL_48:
    if (v30)
    {
      if (*v30 != v30 + 2)
        free(*v30);
      operator delete(v30);
    }
    goto LABEL_52;
  }
  v38 = 0;
  v39 = 8 * v47;
  v40 = ((unint64_t)__p >> 1) & ~(-1 << ((unint64_t)__p >> 58));
  do
  {
    if ((v40 & (1 << v38)) == 0)
    {
      v41 = *(_QWORD *)a3;
      v42 = v31[v38];
      v43 = *(unsigned int *)(*(_QWORD *)a3 + 8);
      if (v43 >= *(unsigned int *)(*(_QWORD *)a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)a3, (void *)(v41 + 16), v43 + 1, 8);
        v43 = *(unsigned int *)(v41 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v41 + 8 * v43) = v42;
      ++*(_DWORD *)(v41 + 8);
    }
    ++v38;
    v39 -= 8;
  }
  while (v39);
LABEL_52:
  if (__dst != v48)
    free(__dst);
  return 1;
}

void mlir::tensor::ExtractSliceOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;

  v38 = a2;
  mlir::RewritePatternSet::addImpl<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::tensor::ExtractSliceOp,SliceReturnTypeCanonicalizer,SliceCanonicalizer>,mlir::MLIRContext *&>(a1, 0, 0, &v38);
  v3 = v38;
  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v39, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.extract_slice", 20, (__int16)v39, v3, 0, 0);
  *(_QWORD *)v4 = off_1E0E193A8;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v39 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ExtractSliceOpCastFolder]";
  v40 = 97;
  v9 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
  if (v40 >= v9)
    v10 = v9;
  else
    v10 = v40;
  v11 = &v39[v10];
  v12 = v40 - v10;
  if (v40 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v40 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

unint64_t mlir::tensor::ExtractSliceOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DefiningOp;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t InterfaceFor;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v3 = *(uint64_t **)(a2 + 80);
  v4 = *v3;
  if (*v3)
  {
    if (mlir::DenseElementsAttr::classof(*v3))
      v5 = v4;
    else
      v5 = 0;
    v24 = v5;
    if (v5)
    {
      if (!mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v24))
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
  }
  if (*(_DWORD *)(*a1 + 36))
    v6 = *a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  result = reshapeConstantSource(v4, (_QWORD *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (result <= 7)
  {
    if (*(_DWORD *)(*a1 + 36))
      v10 = *a1 - 16;
    else
      v10 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v9 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_18:
      v11 = *a1;
      v24 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 24);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
      if (!DefiningOp)
        return 0;
      v13 = DefiningOp;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id)
        return 0;
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v15 = *(_DWORD *)(v11 + 36) ? v11 - 16 : 0;
      if (v14 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        return 0;
      InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v11);
      v17 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v13);
      if ((mlir::detail::sameOffsetsSizesAndStrides(v13, v17, v11, InterfaceFor, (uint64_t (*)(uint64_t, _QWORD, _QWORD))llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldExtractAfterInsertSlice(mlir::tensor::ExtractSliceOp)::$_0>, (uint64_t)&v24) & 1) == 0)return 0;
      v18 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 24);
      if (v18)
        return v18 | 4;
      else
        return 0;
    }
    v19 = *a1;
    v20 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(*a1);
    if (*(_DWORD *)(*a1 + 36))
      v21 = *a1 - 16;
    else
      v21 = 0;
    v22 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v22)
    {
      v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
      if (!foldIdentityOffsetSizeAndStrideOpInterface(v19, v20, (uint64_t)v22, v23))
        goto LABEL_18;
    }
    else if (!foldIdentityOffsetSizeAndStrideOpInterface(v19, v20, 0, 0))
    {
      goto LABEL_18;
    }
    return *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) | 4;
  }
  return result;
}

uint64_t foldIdentityOffsetSizeAndStrideOpInterface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t ConstantIntValue;
  char v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _QWORD *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  BOOL v35;
  BOOL v36;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  void *__src;
  uint64_t v41;
  _BYTE v42[32];
  void *__dst;
  uint64_t v44;
  _BYTE v45[32];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v39[0] = a1;
  v39[1] = a2;
  v38[0] = a3;
  v38[1] = a4;
  mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  mlir::OffsetSizeAndStrideOpInterface::getMixedOffsets((uint64_t *)&__dst, (mlir::OffsetSizeAndStrideOpInterface *)v39);
  v4 = (uint64_t *)__dst;
  if ((_DWORD)v44)
  {
    v5 = 8 * v44 - 8;
    do
    {
      v6 = *v4++;
      ConstantIntValue = mlir::getConstantIntValue(v6);
      if (v8)
        v9 = ConstantIntValue == 0;
      else
        v9 = 0;
      v10 = v9;
      v11 = v10 != 1 || v5 == 0;
      v5 -= 8;
    }
    while (!v11);
    v4 = (uint64_t *)__dst;
    if (__dst == v45)
      goto LABEL_16;
  }
  else
  {
    v10 = 1;
    if (__dst == v45)
      goto LABEL_16;
  }
  free(v4);
LABEL_16:
  if (!v10)
    return 0;
  v37[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v38);
  v37[1] = v12;
  mlir::OffsetSizeAndStrideOpInterface::getMixedSizes((uint64_t *)&__src, (mlir::OffsetSizeAndStrideOpInterface *)v39);
  __dst = v45;
  v44 = 0x400000000;
  v13 = v41;
  v14 = __src;
  if ((_DWORD)v41)
  {
    if (__src == v42)
    {
      v15 = v41;
      if (v41 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v45, v41, 8),
            v15 = v41,
            v14 = __src,
            (_DWORD)v41))
      {
        memcpy(__dst, v14, 8 * v15);
        v14 = __src;
      }
      LODWORD(v44) = v13;
    }
    else
    {
      __dst = __src;
      v44 = v41;
      __src = v42;
      HIDWORD(v41) = 0;
      v14 = v42;
    }
    LODWORD(v41) = 0;
  }
  v16 = v37;
  v46 = v37;
  if (v14 != v42)
  {
    free(v14);
    v16 = v46;
    v13 = v44;
  }
  v17 = 0;
  v18 = (uint64_t *)__dst;
  if (v13)
  {
    v19 = v16[1];
    if (v19)
    {
      v20 = (_QWORD *)*v16;
      v21 = v13;
      v22 = 8 * v19 - 8;
      v23 = 8 * v21 - 8;
      do
      {
        v24 = mlir::getConstantIntValue(*v18);
        if (v25)
          v26 = v24 == *v20;
        else
          v26 = 0;
        v17 = !v26;
        if (!v26)
          break;
        if (!v23)
          break;
        ++v18;
        ++v20;
        v27 = v22;
        v22 -= 8;
        v23 -= 8;
      }
      while (v27);
      v18 = (uint64_t *)__dst;
    }
  }
  if (v18 != (uint64_t *)v45)
    free(v18);
  if ((v17 & 1) != 0)
    return 0;
  mlir::OffsetSizeAndStrideOpInterface::getMixedStrides((uint64_t *)&__dst, (mlir::OffsetSizeAndStrideOpInterface *)v39);
  v30 = (uint64_t *)__dst;
  if (!(_DWORD)v44)
  {
    v28 = 1;
    if (__dst == v45)
      return v28;
LABEL_64:
    free(v30);
    return v28;
  }
  v31 = 8 * v44 - 8;
  do
  {
    v32 = *v30++;
    v33 = mlir::getConstantIntValue(v32);
    if (v34)
      v35 = v33 == 1;
    else
      v35 = 0;
    v28 = v35;
    v36 = (_DWORD)v28 != 1 || v31 == 0;
    v31 -= 8;
  }
  while (!v36);
  v30 = (uint64_t *)__dst;
  if (__dst != v45)
    goto LABEL_64;
  return v28;
}

_QWORD *llvm::SmallVector<mlir::OpFoldResult,6u>::SmallVector(_QWORD *result, unint64_t a2, unint64_t *a3)
{
  _DWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t *v10;
  unint64_t v11;

  v4 = result;
  v5 = result + 2;
  *result = result + 2;
  result[1] = 0x600000000;
  v6 = *a3;
  if (a2 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, v5, a2, 8);
    v7 = (unint64_t *)(*(_QWORD *)v4 + 8 * (a2 & 0xFFFFFFFFFFFFFFFCLL));
    v8 = a2 & 3;
    v9 = vdupq_n_s64(v6);
    v10 = (int64x2_t *)(*(_QWORD *)v4 + 16);
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v10[-1] = v9;
      *v10 = v9;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      do
      {
        *v7++ = v6;
        --v8;
      }
      while (v8);
    }
    goto LABEL_6;
  }
  if (!a2
    || (*v5 = v6, a2 == 1)
    || (result[3] = v6, a2 == 2)
    || (result[4] = v6, a2 == 3)
    || (result[5] = v6, a2 == 4)
    || (result[6] = v6, a2 == 5))
  {
LABEL_6:
    v4[2] = a2;
    return v4;
  }
  result[7] = v6;
  *((_DWORD *)result + 2) = a2;
  return result;
}

uint64_t mlir::tensor::InsertSliceOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "inserted_slice", 14);
}

void mlir::tensor::InsertSliceOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *__src, uint64_t a12)
{
  unint64_t v17;
  uint64_t DenseI64ArrayAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24[2];
  unint64_t v25[2];
  unint64_t v26[2];
  void *v27;
  uint64_t v28;
  _BYTE v29[48];
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  void *v33;
  uint64_t v34;
  _BYTE v35[48];
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  _BYTE *v39;
  uint64_t v40;
  _BYTE v41[48];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[8];

  v44[6] = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v43 = 0x600000000;
  v39 = v41;
  v40 = 0x600000000;
  v36 = v38;
  v37 = 0x600000000;
  v33 = v35;
  v34 = 0x600000000;
  v30 = v32;
  v31 = 0x600000000;
  v27 = v29;
  v28 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v33, (uint64_t)&v42);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v30, (uint64_t)&v39);
  mlir::dispatchIndexOpFoldResults(a9, a10, (uint64_t)&v27, (uint64_t)&v36);
  v17 = *(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v26, (uint64_t)v33, v34);
  mlir::ValueRange::ValueRange(v25, (uint64_t)v30, v31);
  mlir::ValueRange::ValueRange(v24, (uint64_t)v27, v28);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v42, v43);
  v19 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v39, v40);
  v20 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v36, v37);
  mlir::tensor::InsertSliceOp::build(v20, a2, v17, a3, a4, v26[0], v26[1], v21, v25[0], v25[1], v24[0], v24[1], DenseI64ArrayAttr, v19, v20);
  *(_QWORD *)(a2 + 192) = 0;
  v22 = *(unsigned int *)(a2 + 120);
  if (a12 + v22 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a12 + v22, 16);
    LODWORD(v22) = *(_DWORD *)(a2 + 120);
  }
  if (a12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v22), __src, 16 * a12);
    LODWORD(v22) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v22 + a12;
  if (v27 != v29)
    free(v27);
  if (v30 != v32)
    free(v30);
  if (v33 != v35)
    free(v33);
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  if (v42 != v44)
    free(v42);
}

void mlir::tensor::InsertSliceOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a5;
  v22 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, a6, a7);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::OperationState::addOperands(a2, a11, a12);
  v18 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  *(_QWORD *)(v18 + 24) = 0x100000001;
  *(_DWORD *)(v18 + 32) = a7;
  *(_DWORD *)(v18 + 36) = a10;
  *(_DWORD *)(v18 + 40) = a12;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a13;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = a14;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::InsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = a15;
  v19 = *(unsigned int *)(a2 + 72);
  if (v19 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v19) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::tensor::InsertSliceOp::verify(mlir::tensor::InsertSliceOp *this)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t RHS;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int isRankReducedType;
  unint64_t v15;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v3 = *(_QWORD *)this - 16;
  else
    v3 = 0;
  v4 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v15);
  v5 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v5 = 0;
  v15 = *(_QWORD *)(v5 + 8);
  v6 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v15);
  v8 = v7;
  v9 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v9 = 0;
  v15 = *(_QWORD *)(v9 + 16);
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v15);
  v15 = v4;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v15);
  v11 = (_QWORD *)mlir::RankedTensorType::get(v6, v8, RHS, 0);
  v12 = v11;
  if (!v11)
  {
    v13 = 0;
    if (!v2)
      goto LABEL_12;
    goto LABEL_10;
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  if (v2)
LABEL_10:
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
LABEL_12:
  isRankReducedType = mlir::isRankReducedType(v12, v13, v2);
  produceSliceErrorMsg(isRankReducedType);
}

uint64_t mlir::tensor::InsertSliceOp::fold(uint64_t *a1)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t InterfaceFor;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v38))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    if (v3)
    {
      v4 = 8 * v3;
      while (*Value != 0x8000000000000000)
      {
        ++Value;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(*a1 + 36))
        v5 = *a1 - 16;
      else
        v5 = 0;
      v37 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v37))
      {
        v6 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
        if (v7)
        {
          v8 = 8 * v7;
          while (*v6 != 0x8000000000000000)
          {
            ++v6;
            v8 -= 8;
            if (!v8)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          if (*(_DWORD *)(*a1 + 36))
            v10 = *a1 - 16;
          else
            v10 = 0;
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            v32 = *a1;
            InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(*a1);
            v34 = *(_DWORD *)(*a1 + 36) ? *a1 - 16 : 0;
            v35 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
            v36 = v35 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v35 + 8) : 0;
            if (foldIdentityOffsetSizeAndStrideOpInterface(v32, InterfaceFor, (uint64_t)v35, v36))
              return *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) | 4;
          }
        }
      }
    }
  }
  v11 = *a1;
  if (*(_BYTE *)(*a1 + 47))
    v12 = *a1 + 80;
  else
    v12 = 0;
  v38 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * *(unsigned int *)(v12 + 24) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v38);
  if (DefiningOp
    && (v14 = DefiningOp,
        *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::InsertSliceOp,void>::id)
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
    && (v15 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v11),
        v16 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v14),
        mlir::detail::sameOffsetsSizesAndStrides(v14, v16, v11, v15, (uint64_t (*)(uint64_t, _QWORD, _QWORD))llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldInsertAfterInsertSlice(mlir::tensor::InsertSliceOp)::$_0>, (uint64_t)&v38)))
  {
    if (HIBYTE(*(_DWORD *)(v11 + 44)))
      v17 = v11 + 16 * (((unint64_t)*(unsigned int *)(v11 + 44) >> 23) & 1) + 64;
    else
      v17 = 0;
    v18 = (uint64_t *)(*(_QWORD *)(v11 + 72) + 32 * *(unsigned int *)(v17 + 24));
    if (*(_BYTE *)(v14 + 47))
      v19 = v14 + 80;
    else
      v19 = 0;
    v20 = *(uint64_t **)(*(_QWORD *)(v14 + 72) + 32 * *(unsigned int *)(v19 + 24) + 24);
    v21 = (uint64_t *)v18[1];
    if (v21)
    {
      *v21 = *v18;
      if (*v18)
        *(_QWORD *)(*v18 + 8) = v18[1];
    }
    v18[3] = (uint64_t)v20;
    v18[1] = (uint64_t)v20;
    v22 = *v20;
    *v18 = *v20;
    if (v22)
      *(_QWORD *)(v22 + 8) = v18;
    *v20 = (uint64_t)v18;
    if (*(_DWORD *)(*a1 + 36))
      v23 = *a1 - 16;
    else
      v23 = 0;
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0) | 4;
  }
  else
  {
    v25 = *a1;
    v38 = *(_QWORD *)(*(_QWORD *)(v25 + 72) + 24);
    v26 = mlir::Value::getDefiningOp((mlir::Value *)&v38);
    if (v26
      && (v27 = v26,
          *(_UNKNOWN **)(*(_QWORD *)(v26 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractSliceOp,void>::id)
      && (*(_BYTE *)(v25 + 47) ? (v28 = v25 + 80) : (v28 = 0),
          *(_QWORD *)(*(_QWORD *)(v26 + 72) + 24) == *(_QWORD *)(*(_QWORD *)(v25 + 72)
                                                                 + 32 * *(unsigned int *)(v28 + 24)
                                                                 + 24)
       && (v29 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v25),
           v30 = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(v27),
           (mlir::detail::sameOffsetsSizesAndStrides(v27, v30, v25, v29, (uint64_t (*)(uint64_t, _QWORD, _QWORD))llvm::function_ref<BOOL ()(mlir::OpFoldResult,mlir::OpFoldResult)>::callback_fn<foldInsertAfterExtractSlice(mlir::tensor::InsertSliceOp)::$_0>, (uint64_t)&v38) & 1) != 0)))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v27 + 72) + 24);
      if (v31)
        return v31 | 4;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t mlir::tensor::InsertSliceOp::reifyResultShapes(uint64_t a1, mlir::IndexType **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::MLIRContext *i;
  unint64_t MixedSize;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[7];

  v33[6] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v6 = *(_QWORD *)a1 - 16;
  else
    v6 = 0;
  v30 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  v31 = v33;
  v32 = 0x600000000;
  if (v7)
  {
    v8 = v7;
    if (v7 < 7)
    {
      v9 = 0;
      v10 = v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v7, 8);
      v9 = v32;
      v10 = v8 - v32;
      if (v8 == v32)
        goto LABEL_10;
    }
    bzero((char *)v31 + 8 * v9, 8 * v10);
LABEL_10:
    LODWORD(v32) = v8;
  }
  v11 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v11)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(a3, 1 - v11, (unint64_t)&v31);
LABEL_18:
    v15 = v31;
    if (v31 == v33)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((_DWORD)v11 == 1)
    goto LABEL_18;
  v12 = *(_QWORD *)a3;
  v13 = v11 << 6;
  do
  {
    v14 = *(void **)(v12 + v13 - 64);
    if ((void *)(v12 + v13 - 48) != v14)
      free(v14);
    v13 -= 64;
  }
  while (v13 != 64);
  *(_DWORD *)(a3 + 8) = 1;
  v15 = v31;
  if (v31 != v33)
LABEL_19:
    free(v15);
LABEL_20:
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(*(_QWORD *)a1 + 47))
    v17 = *(_QWORD *)a1 + 80;
  else
    v17 = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 32 * *(unsigned int *)(v17 + 24) + 24);
  v30 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  v31 = v33;
  v32 = 0x600000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  if (v19 >= 1)
  {
    for (i = 0; (uint64_t)i < v23; i = (mlir::MLIRContext *)((char *)i + 1))
    {
      MixedSize = mlir::tensor::getMixedSize(a2, v16, v18, i);
      v22 = v32;
      if (v32 >= (unint64_t)HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 8);
        v22 = v32;
      }
      *((_QWORD *)v31 + v22) = MixedSize;
      LODWORD(v32) = v32 + 1;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
    }
  }
  v24 = *(_QWORD *)a3;
  v25 = v31;
  if ((void **)v24 != &v31)
  {
    if (v31 != v33)
    {
      if (*(_QWORD *)v24 != v24 + 16)
      {
        free(*(void **)v24);
        v25 = v31;
      }
      *(_QWORD *)v24 = v25;
      *(_QWORD *)(v24 + 8) = v32;
      v31 = v33;
      HIDWORD(v32) = 0;
      goto LABEL_45;
    }
    v26 = v32;
    v27 = *(unsigned int *)(v24 + 8);
    if (v27 >= v32)
    {
      if ((_DWORD)v32)
        memmove(*(void **)v24, v33, 8 * v32);
      goto LABEL_44;
    }
    if (*(_DWORD *)(v24 + 12) >= v32)
    {
      if ((_DWORD)v27)
      {
        memmove(*(void **)v24, v33, 8 * v27);
        v28 = v32;
        if (v27 == v32)
        {
LABEL_44:
          *(_DWORD *)(v24 + 8) = v26;
LABEL_45:
          LODWORD(v32) = 0;
          v25 = v31;
          goto LABEL_46;
        }
      }
      else
      {
        v27 = 0;
        v28 = v32;
        if (!(_DWORD)v32)
          goto LABEL_44;
      }
    }
    else
    {
      *(_DWORD *)(v24 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v24, (void *)(v24 + 16), v26, 8);
      v27 = 0;
      v28 = v32;
      if (!(_DWORD)v32)
        goto LABEL_44;
    }
    memcpy((void *)(*(_QWORD *)v24 + 8 * v27), (char *)v31 + 8 * v27, 8 * v28 - 8 * v27);
    goto LABEL_44;
  }
LABEL_46:
  if (v25 != v33)
    free(v25);
  return 1;
}

void mlir::tensor::InsertSliceOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.insert_slice", 19, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E1A2B0;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpConstantArgumentFolder<mli"
         "r::tensor::InsertSliceOp>]";
  v107 = 137;
  v9 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v9)
    v10 = v9;
  else
    v10 = v107;
  v11 = &v106[v10];
  v12 = v107 - v10;
  if (v107 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v107 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_116;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_117;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_120;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.insert_slice", 19, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v38 = &off_1E0E19200;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpCastFolder<mlir::tensor::InsertSliceOp>]";
  v107 = 125;
  v43 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v43)
    v44 = v43;
  else
    v44 = v107;
  v45 = &v106[v44];
  v46 = v107 - v44;
  if (v107 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v107 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_116;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_117;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_121;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_121:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"tensor.insert_slice", 19, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v72 = &off_1E0E1A0A0;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpSourceCastInserter<mlir::t"
         "ensor::InsertSliceOp>]";
  v107 = 133;
  v77 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v77)
    v78 = v77;
  else
    v78 = v107;
  v79 = &v106[v78];
  v80 = v107 - v78;
  if (v107 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v107 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
LABEL_116:
    abort();
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (!v88)
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
    goto LABEL_112;
  }
  if (v88 >> 61)
LABEL_117:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v89 = (char *)operator new(8 * v88);
  v90 = &v89[8 * v85];
  v91 = &v89[8 * v88];
  *(_QWORD *)v90 = v72;
  v76 = (uint64_t)(v90 + 8);
  v92 = (char *)(v75 - v84);
  if (v75 != v84)
  {
LABEL_100:
    v93 = (unint64_t)(v92 - 8);
    if (v93 < 0x78
      || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
    {
      goto LABEL_122;
    }
    v94 = (v93 >> 3) + 1;
    v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    v96 = &v75[-v95];
    v90 -= v95;
    v97 = &v89[8 * v85 - 16];
    v98 = v75 - 16;
    v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *((_OWORD *)v98 - 1);
      v100 = *(_OWORD *)v98;
      *((_OWORD *)v98 - 1) = 0uLL;
      *(_OWORD *)v98 = 0uLL;
      *((_OWORD *)v97 - 1) = v101;
      *(_OWORD *)v97 = v100;
      v97 -= 32;
      v98 -= 32;
      v99 -= 4;
    }
    while (v99);
    v75 = v96;
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_122:
      do
      {
        v102 = *((_QWORD *)v75 - 1);
        v75 -= 8;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v90 - 1) = v102;
        v90 -= 8;
      }
      while (v75 != v84);
    }
    v75 = (char *)a1[1];
    v103 = (char *)a1[2];
    a1[1] = v90;
    a1[2] = v76;
    a1[3] = v91;
    while (v103 != v75)
    {
      v105 = *((_QWORD *)v103 - 1);
      v103 -= 8;
      v104 = v105;
      *(_QWORD *)v103 = 0;
      if (v105)
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    }
    goto LABEL_113;
  }
LABEL_112:
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
}

uint64_t mlir::tensor::PadOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "padded", 6);
}

uint64_t mlir::tensor::PadOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  int *v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  int *v67;
  char *v68;
  char *v69;
  __int128 v70;
  int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  _QWORD **v75;
  _QWORD **v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  _QWORD v103[4];
  __int16 v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  const char *v109;
  uint64_t v110;
  _QWORD v111[3];
  void *v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE v115[96];
  void *v116;
  _QWORD *v117;
  void *__p;
  _QWORD **v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v107 = v3;
  v4 = *((_DWORD *)v2 + 9);
  v5 = (uint64_t)(v2 - 2);
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  v106 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  v111[0] = *(_QWORD *)(v7 + 16);
  v8 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v111);
  v10 = v9;
  v11 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v11 = 0;
  v111[0] = *(_QWORD *)(v11 + 8);
  v12 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v111);
  v105 = mlir::tensor::PadOp::inferResultType(v3, v8, v10, v12, v13, 0, 0);
  if (v105)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    v15 = v14;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v105);
    if (v15 == v16)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
      if (v17 < 1)
        return 1;
      v18 = 0;
      v19 = 8 * v17;
      while (1)
      {
        v20 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106) + v18);
        if (v20 != *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v105) + v18)
          && *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v105) + v18) != 0x8000000000000000)
        {
          break;
        }
        v18 += 8;
        if (v19 == v18)
          return 1;
      }
      v103[0] = "specified type ";
      v104 = 259;
      mlir::OpState::emitError(this, (uint64_t)v103, (uint64_t)v111);
      if (v111[0])
      {
        v21 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v106);
        v22 = (char *)v112;
        if (v113 >= v114)
        {
          v90 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v100 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
            v22 = (char *)v112;
            v21 = (int *)((char *)v112 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v90, 24);
            v21 = &v108;
            v22 = (char *)v112;
          }
        }
        v23 = &v22[24 * v113];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        v25 = ++v113;
        if (v111[0])
        {
          v108 = 3;
          v109 = " does not match the inferred type ";
          v110 = 34;
          v26 = &v108;
          v27 = (char *)v112;
          if (v25 >= v114)
          {
            v91 = v25 + 1;
            v92 = (char *)v112 + 24 * v25 > (char *)&v108;
            if (v112 <= &v108 && v92)
            {
              v101 = (char *)&v108 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              v27 = (char *)v112;
              v26 = (int *)((char *)v112 + v101);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              v26 = &v108;
              v27 = (char *)v112;
            }
          }
          v28 = &v27[24 * v113];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
          ++v113;
          if (v111[0])
          {
            v30 = &v108;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v105);
            v31 = (char *)v112;
            if (v113 >= v114)
            {
              v93 = v113 + 1;
              if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
              {
                v102 = (char *)&v108 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                v31 = (char *)v112;
                v30 = (int *)((char *)v112 + v102);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                v30 = &v108;
                v31 = (char *)v112;
              }
            }
            v32 = &v31[24 * v113];
            v33 = *(_OWORD *)v30;
            *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
            *(_OWORD *)v32 = v33;
            ++v113;
          }
        }
      }
      v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v111);
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      if (v120)
      {
        v35 = (_QWORD **)__p;
        if (__p)
        {
          v36 = v119;
          v37 = __p;
          if (v119 != __p)
          {
            do
              v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            v37 = __p;
          }
          v119 = v35;
          operator delete(v37);
        }
        v38 = v116;
        if (!v116)
          goto LABEL_81;
        v39 = v117;
        v40 = v116;
        if (v117 == v116)
        {
LABEL_80:
          v117 = v38;
          operator delete(v40);
LABEL_81:
          if (v112 != v115)
            free(v112);
          return v34;
        }
        do
        {
          v42 = (void *)*--v39;
          v41 = v42;
          *v39 = 0;
          if (v42)
            operator delete[](v41);
        }
        while (v39 != v38);
LABEL_79:
        v40 = v116;
        goto LABEL_80;
      }
    }
    else
    {
      v103[0] = "specified type ";
      v104 = 259;
      mlir::OpState::emitError(this, (uint64_t)v103, (uint64_t)v111);
      if (v111[0])
      {
        v62 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v106);
        v63 = (char *)v112;
        if (v113 >= v114)
        {
          v83 = v113 + 1;
          if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
          {
            v95 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
            v63 = (char *)v112;
            v62 = (int *)((char *)v112 + v95);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
            v62 = &v108;
            v63 = (char *)v112;
          }
        }
        v64 = &v63[24 * v113];
        v65 = *(_OWORD *)v62;
        *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
        *(_OWORD *)v64 = v65;
        v66 = ++v113;
        if (v111[0])
        {
          v108 = 3;
          v109 = " does not match the inferred type ";
          v110 = 34;
          v67 = &v108;
          v68 = (char *)v112;
          if (v66 >= v114)
          {
            v86 = v66 + 1;
            v87 = (char *)v112 + 24 * v66 > (char *)&v108;
            if (v112 <= &v108 && v87)
            {
              v97 = (char *)&v108 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
              v68 = (char *)v112;
              v67 = (int *)((char *)v112 + v97);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
              v67 = &v108;
              v68 = (char *)v112;
            }
          }
          v69 = &v68[24 * v113];
          v70 = *(_OWORD *)v67;
          *((_QWORD *)v69 + 2) = *((_QWORD *)v67 + 2);
          *(_OWORD *)v69 = v70;
          ++v113;
          if (v111[0])
          {
            v71 = &v108;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v105);
            v72 = (char *)v112;
            if (v113 >= v114)
            {
              v89 = v113 + 1;
              if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
              {
                v99 = (char *)&v108 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                v72 = (char *)v112;
                v71 = (int *)((char *)v112 + v99);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                v71 = &v108;
                v72 = (char *)v112;
              }
            }
            v73 = &v72[24 * v113];
            v74 = *(_OWORD *)v71;
            *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
            *(_OWORD *)v73 = v74;
            ++v113;
          }
        }
      }
      v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v111);
      if (v111[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
      if (v120)
      {
        v75 = (_QWORD **)__p;
        if (__p)
        {
          v76 = v119;
          v77 = __p;
          if (v119 != __p)
          {
            do
              v76 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v76 - 1);
            while (v76 != v75);
            v77 = __p;
          }
          v119 = v75;
          operator delete(v77);
        }
        v38 = v116;
        if (!v116)
          goto LABEL_81;
        v78 = v117;
        v40 = v116;
        if (v117 == v116)
          goto LABEL_80;
        do
        {
          v80 = (void *)*--v78;
          v79 = v80;
          *v78 = 0;
          if (v80)
            operator delete[](v79);
        }
        while (v78 != v38);
        goto LABEL_79;
      }
    }
  }
  else
  {
    v103[0] = "failed to infer expectedType from sourceType ";
    v104 = 259;
    mlir::OpState::emitError(this, (uint64_t)v103, (uint64_t)v111);
    if (v111[0])
    {
      v43 = &v108;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v107);
      v44 = (char *)v112;
      if (v113 >= v114)
      {
        v82 = v113 + 1;
        if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
        {
          v94 = (char *)&v108 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v82, 24);
          v44 = (char *)v112;
          v43 = (int *)((char *)v112 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v82, 24);
          v43 = &v108;
          v44 = (char *)v112;
        }
      }
      v45 = &v44[24 * v113];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
      *(_OWORD *)v45 = v46;
      v47 = ++v113;
      if (v111[0])
      {
        v108 = 3;
        v109 = ", specified resultType is ";
        v110 = 26;
        v48 = &v108;
        v49 = (char *)v112;
        if (v47 >= v114)
        {
          v84 = v47 + 1;
          v85 = (char *)v112 + 24 * v47 > (char *)&v108;
          if (v112 <= &v108 && v85)
          {
            v96 = (char *)&v108 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
            v49 = (char *)v112;
            v48 = (int *)((char *)v112 + v96);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
            v48 = &v108;
            v49 = (char *)v112;
          }
        }
        v50 = &v49[24 * v113];
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
        *(_OWORD *)v50 = v51;
        ++v113;
        if (v111[0])
        {
          v52 = &v108;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v106);
          v53 = (char *)v112;
          if (v113 >= v114)
          {
            v88 = v113 + 1;
            if (v112 <= &v108 && (char *)v112 + 24 * v113 > (char *)&v108)
            {
              v98 = (char *)&v108 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v88, 24);
              v53 = (char *)v112;
              v52 = (int *)((char *)v112 + v98);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v88, 24);
              v52 = &v108;
              v53 = (char *)v112;
            }
          }
          v54 = &v53[24 * v113];
          v55 = *(_OWORD *)v52;
          *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
          *(_OWORD *)v54 = v55;
          ++v113;
        }
      }
    }
    v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v111);
    if (v111[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v111);
    if (v120)
    {
      v56 = (_QWORD **)__p;
      if (__p)
      {
        v57 = v119;
        v58 = __p;
        if (v119 != __p)
        {
          do
            v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          v58 = __p;
        }
        v119 = v56;
        operator delete(v58);
      }
      v38 = v116;
      if (!v116)
        goto LABEL_81;
      v59 = v117;
      v40 = v116;
      if (v117 == v116)
        goto LABEL_80;
      do
      {
        v61 = (void *)*--v59;
        v60 = v61;
        *v59 = 0;
        if (v61)
          operator delete[](v60);
      }
      while (v59 != v38);
      goto LABEL_79;
    }
  }
  return v34;
}

uint64_t mlir::tensor::PadOp::inferResultType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t RHS;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v23 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
  v14 = a3 == v13 && a5 == v13;
  if (!v14 || a7 && a7 != a5)
    return 0;
  v24 = v26;
  v25 = 0x400000000;
  if (!a5)
  {
    v20 = 0;
    v21 = v26;
    goto LABEL_24;
  }
  v17 = 0;
  do
  {
    if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23) + 8 * v17) == 0x8000000000000000
      || *(_QWORD *)(a2 + 8 * v17) == 0x8000000000000000
      || *(_QWORD *)(a4 + 8 * v17) == 0x8000000000000000)
    {
      if (a7)
      {
        v18 = *(_QWORD *)(a6 + 8 * v17);
        v19 = v25;
        if (v25 < (unint64_t)HIDWORD(v25))
          goto LABEL_19;
      }
      else
      {
        v18 = 0x8000000000000000;
        v19 = v25;
        if (v25 < (unint64_t)HIDWORD(v25))
          goto LABEL_19;
      }
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 8 * v17)
          + *(_QWORD *)(a4 + 8 * v17)
          + *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23) + 8 * v17);
      v19 = v25;
      if (v25 < (unint64_t)HIDWORD(v25))
        goto LABEL_19;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v19 + 1, 8);
    v19 = v25;
LABEL_19:
    *((_QWORD *)v24 + v19) = v18;
    v20 = (v25 + 1);
    LODWORD(v25) = v25 + 1;
    ++v17;
  }
  while (a5 != v17);
  v21 = v24;
LABEL_24:
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v23);
  v15 = mlir::RankedTensorType::get((uint64_t)v21, v20, RHS, 0);
  if (v24 != v26)
    free(v24);
  return v15;
}

uint64_t mlir::tensor::PadOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  mlir::Block *v11;
  uint64_t ArgumentTypes;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  int *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  int *v51;
  char *v52;
  char *v53;
  __int128 v54;
  _QWORD **v55;
  _QWORD **v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  unint64_t v74;
  const void **v75[4];
  __int16 v76;
  int v77;
  const char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE v85[96];
  void *v86;
  _QWORD *v87;
  void *__p;
  _QWORD **v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x7FFFFF) != 0)
    v4 = (((unint64_t)&v2[2 * ((v3 >> 23) & 1) + 8] + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)v2 + 10);
  else
    v4 = 0;
  v5 = *((_DWORD *)v2 + 9);
  v6 = (uint64_t)(v2 - 2);
  if (v5)
    v7 = v6;
  else
    v7 = 0;
  v80 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
  v9 = v8;
  v10 = *(_QWORD *)(v4 + 8);
  if (v10)
    v11 = (mlir::Block *)(v10 - 8);
  else
    v11 = 0;
  if (((*((_QWORD *)v11 + 7) - *((_QWORD *)v11 + 6)) >> 3) != v8)
  {
    v75[0] = (const void **)"expected the block to have ";
    v76 = 259;
    mlir::OpState::emitError(this, (uint64_t)v75, (uint64_t)&v80);
    if (v80)
    {
      v77 = 5;
      v78 = (const char *)v9;
      v30 = &v77;
      v31 = (char *)v82;
      if (v83 >= v84)
      {
        v64 = v83 + 1;
        if (v82 <= &v77 && (char *)v82 + 24 * v83 > (char *)&v77)
        {
          v70 = (char *)&v77 - (_BYTE *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
          v31 = (char *)v82;
          v30 = (int *)((char *)v82 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
          v30 = &v77;
          v31 = (char *)v82;
        }
      }
      v32 = &v31[24 * v83];
      v33 = *(_OWORD *)v30;
      *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
      *(_OWORD *)v32 = v33;
      v34 = ++v83;
      if (v80)
      {
        v77 = 3;
        v78 = " arguments";
        v79 = 10;
        v35 = &v77;
        v36 = (char *)v82;
        if (v34 >= v84)
        {
          v65 = v34 + 1;
          v66 = (char *)v82 + 24 * v34 > (char *)&v77;
          if (v82 <= &v77 && v66)
          {
            v71 = (char *)&v77 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v36 = (char *)v82;
            v35 = (int *)((char *)v82 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v65, 24);
            v35 = &v77;
            v36 = (char *)v82;
          }
        }
        v37 = &v36[24 * v83];
        v38 = *(_OWORD *)v35;
        *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
        *(_OWORD *)v37 = v38;
        ++v83;
      }
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v80);
    if (v80)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
    if (!v90)
      return v21;
    v39 = (_QWORD **)__p;
    if (__p)
    {
      v40 = v89;
      v41 = __p;
      if (v89 != __p)
      {
        do
          v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
        while (v40 != v39);
        v41 = __p;
      }
      v89 = v39;
      operator delete(v41);
    }
    v25 = v86;
    if (!v86)
      goto LABEL_52;
    v42 = v87;
    v27 = v86;
    if (v87 == v86)
      goto LABEL_51;
    do
    {
      v44 = (void *)*--v42;
      v43 = v44;
      *v42 = 0;
      if (v44)
        operator delete[](v43);
    }
    while (v42 != v25);
    goto LABEL_50;
  }
  ArgumentTypes = mlir::Block::getArgumentTypes(v11);
  if (ArgumentTypes == v13)
  {
LABEL_15:
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)v11);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v19 = (_QWORD *)(*(*this - 1) & 0xFFFFFFFFFFFFFFF8);
    if (v19)
    {
      v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
      v80 = (unint64_t)v19;
      v81 = v20;
      if (v18 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v80))
      {
LABEL_17:
        v75[0] = (const void **)"expected yield type to match shape element type";
        v76 = 259;
        mlir::OpState::emitOpError(this, v75, (uint64_t)&v80);
        v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v80);
        if (v80)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
        if (!v90)
          return v21;
        v22 = (_QWORD **)__p;
        if (__p)
        {
          v23 = v89;
          v24 = __p;
          if (v89 != __p)
          {
            do
              v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
            while (v23 != v22);
            v24 = __p;
          }
          v89 = v22;
          operator delete(v24);
        }
        v25 = v86;
        if (!v86)
          goto LABEL_52;
        v26 = v87;
        v27 = v86;
        if (v87 == v86)
        {
LABEL_51:
          v87 = v25;
          operator delete(v27);
LABEL_52:
          v45 = v82;
          if (v82 == v85)
            return v21;
LABEL_53:
          free(v45);
          return v21;
        }
        do
        {
          v29 = (void *)*--v26;
          v28 = v29;
          *v26 = 0;
          if (v29)
            operator delete[](v28);
        }
        while (v26 != v25);
LABEL_50:
        v27 = v86;
        goto LABEL_51;
      }
    }
    else
    {
      v80 = 0;
      v81 = 0;
      if (v18 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v80))
        goto LABEL_17;
    }
    return 1;
  }
  v14 = ArgumentTypes;
  v15 = v13;
  v16 = 0;
  while (1)
  {
    v74 = *(_QWORD *)(*(_QWORD *)v14 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!mlir::Type::isIndex((mlir::Type *)&v74))
      break;
    ++v16;
    v14 += 8;
    if (v14 == v15)
      goto LABEL_15;
  }
  v75[0] = (const void **)"expected block argument ";
  v76 = 259;
  mlir::OpState::emitOpError(this, v75, (uint64_t)&v80);
  if (v80)
  {
    v77 = 5;
    v78 = (const char *)(v16 + 1);
    v46 = &v77;
    v47 = (char *)v82;
    if (v83 >= v84)
    {
      v67 = v83 + 1;
      if (v82 <= &v77 && (char *)v82 + 24 * v83 > (char *)&v77)
      {
        v72 = (char *)&v77 - (_BYTE *)v82;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
        v47 = (char *)v82;
        v46 = (int *)((char *)v82 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v67, 24);
        v46 = &v77;
        v47 = (char *)v82;
      }
    }
    v48 = &v47[24 * v83];
    v49 = *(_OWORD *)v46;
    *((_QWORD *)v48 + 2) = *((_QWORD *)v46 + 2);
    *(_OWORD *)v48 = v49;
    v50 = ++v83;
    if (v80)
    {
      v77 = 3;
      v78 = " to be an index";
      v79 = 15;
      v51 = &v77;
      v52 = (char *)v82;
      if (v50 >= v84)
      {
        v68 = v50 + 1;
        v69 = (char *)v82 + 24 * v50 > (char *)&v77;
        if (v82 <= &v77 && v69)
        {
          v73 = (char *)&v77 - (_BYTE *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
          v52 = (char *)v82;
          v51 = (int *)((char *)v82 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
          v51 = &v77;
          v52 = (char *)v82;
        }
      }
      v53 = &v52[24 * v83];
      v54 = *(_OWORD *)v51;
      *((_QWORD *)v53 + 2) = *((_QWORD *)v51 + 2);
      *(_OWORD *)v53 = v54;
      ++v83;
    }
  }
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v80);
  if (v80)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v80);
  if (v90)
  {
    v55 = (_QWORD **)__p;
    if (__p)
    {
      v56 = v89;
      v57 = __p;
      if (v89 != __p)
      {
        do
          v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
        while (v56 != v55);
        v57 = __p;
      }
      v89 = v55;
      operator delete(v57);
    }
    v58 = v86;
    if (v86)
    {
      v59 = v87;
      v60 = v86;
      if (v87 != v86)
      {
        do
        {
          v62 = (void *)*--v59;
          v61 = v62;
          *v59 = 0;
          if (v62)
            operator delete[](v61);
        }
        while (v59 != v58);
        v60 = v86;
      }
      v87 = v58;
      operator delete(v60);
    }
    v45 = v82;
    if (v82 != v85)
      goto LABEL_53;
  }
  return v21;
}

void mlir::tensor::PadOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__src, uint64_t a15)
{
  uint64_t v20;
  uint64_t DenseI64ArrayAttr;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t UnitAttr;
  uint64_t v27;

  v20 = a3;
  if (!a3)
    v20 = mlir::tensor::PadOp::inferResultType(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8, a5, a6, a7, a8, 0, 0);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, a5, a6);
  v25 = mlir::Builder::getDenseI64ArrayAttr(a1, a7, a8);
  if (a13)
    UnitAttr = mlir::Builder::getUnitAttr(a1, v24);
  else
    UnitAttr = 0;
  mlir::tensor::PadOp::build(UnitAttr, a2, v20, a4, a9, a10, a11, a12, DenseI64ArrayAttr, v25, UnitAttr);
  *(_QWORD *)(a2 + 192) = 0;
  v27 = *(unsigned int *)(a2 + 120);
  if (a15 + v27 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a15 + v27, 16);
    LODWORD(v27) = *(_DWORD *)(a2 + 120);
  }
  if (a15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v27), __src, 16 * a15);
    LODWORD(v27) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v27 + a15;
}

void mlir::tensor::PadOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  v17 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v17[6] = 1;
  v17[7] = a6;
  v17[8] = a8;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = a9;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = a10;
  if (a11)
    *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::PadOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a11;
  mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v18 = *(unsigned int *)(a2 + 72);
  if (v18 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v18) = a3;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::tensor::PadOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, char a9, void *__src, uint64_t a11)
{
  uint64_t v17;
  uint64_t DenseI64ArrayAttr;
  mlir::MLIRContext *v19;
  uint64_t v20;
  uint64_t UnitAttr;
  uint64_t v22;
  unint64_t v23[2];
  unint64_t v24[2];
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  void *v31;
  uint64_t v32;
  _BYTE v33[32];
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[4] = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a4 + 8);
  v34 = v36;
  v35 = 0x400000000;
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v25 = v27;
  v26 = 0x400000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v34, (uint64_t)&v28);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v31, (uint64_t)&v25);
  if (!a3)
    a3 = mlir::tensor::PadOp::inferResultType(v17 & 0xFFFFFFFFFFFFFFF8, (uint64_t)v28, v29, (uint64_t)v25, v26, 0, 0);
  mlir::ValueRange::ValueRange(v24, (uint64_t)v34, v35);
  mlir::ValueRange::ValueRange(v23, (uint64_t)v31, v32);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v28, v29);
  v20 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v25, v26);
  if (a9)
    UnitAttr = mlir::Builder::getUnitAttr(a1, v19);
  else
    UnitAttr = 0;
  mlir::tensor::PadOp::build(UnitAttr, a2, a3, a4, v24[0], v24[1], v23[0], v23[1], DenseI64ArrayAttr, v20, UnitAttr);
  *(_QWORD *)(a2 + 192) = 0;
  v22 = *(unsigned int *)(a2 + 120);
  if (a11 + v22 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a11 + v22, 16);
    LODWORD(v22) = *(_DWORD *)(a2 + 120);
  }
  if (a11)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v22), __src, 16 * a11);
    LODWORD(v22) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v22 + a11;
  if (v25 != v27)
    free(v25);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  if (v34 != v36)
    free(v34);
}

void mlir::tensor::PadOp::getPaddedDims(mlir::tensor::PadOp *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t ConstantIntValue;
  char v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v24 = (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  v5 = v4;
  if (v4 <= 0x39)
  {
    v6 = (v4 << 58) | 1;
    goto LABEL_9;
  }
  v7 = operator new(0x48uLL);
  v6 = (unint64_t)v7;
  v8 = v5 + 63;
  v9 = (v5 + 63) >> 6;
  *(_QWORD *)v7 = v7 + 4;
  v7[3] = 6;
  if ((v5 + 63) >= 0x1C0)
  {
    v7[2] = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, v7 + 4, v8 >> 6, 8);
    v10 = *(void **)v6;
    v11 = 8 * v9;
LABEL_7:
    bzero(v10, v11);
    goto LABEL_8;
  }
  if (v8 >= 0x40)
  {
    v10 = v7 + 4;
    v11 = 8 * v9;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(v6 + 8) = v9;
  *(_DWORD *)(v6 + 64) = v5;
LABEL_9:
  *a2 = v6;
  mlir::tensor::PadOp::getMixedLowPad(this, (uint64_t)&v24);
  v12 = v24;
  if (v25)
  {
    v13 = 0;
    v14 = 8 * v25;
    do
    {
      ConstantIntValue = mlir::getConstantIntValue(v12[v13]);
      if (v16)
        v17 = ConstantIntValue == 0;
      else
        v17 = 0;
      if (!v17)
      {
        if ((v6 & 1) != 0)
        {
          v6 = v6 & 0xFC00000000000000 | (2
                                          * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << v13)) & ~(-1 << (v6 >> 58)))) | 1;
          *a2 = v6;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * (v13 >> 6)) |= 1 << v13;
        }
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v12 = v24;
  }
  if (v12 != v26)
    free(v12);
  mlir::tensor::PadOp::getMixedHighPad(this, (uint64_t)&v24);
  v18 = v24;
  if (v25)
  {
    v19 = 0;
    v20 = 8 * v25;
    do
    {
      v21 = mlir::getConstantIntValue(v18[v19]);
      if (v22)
        v23 = v21 == 0;
      else
        v23 = 0;
      if (!v23)
      {
        if ((v6 & 1) != 0)
        {
          v6 = v6 & 0xFC00000000000000 | (2
                                          * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << v19)) & ~(-1 << (v6 >> 58)))) | 1;
          *a2 = v6;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * (v19 >> 6)) |= 1 << v19;
        }
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
    v18 = v24;
  }
  if (v18 != v26)
    free(v18);
}

void mlir::tensor::PadOp::getMixedLowPad(mlir::tensor::PadOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void **v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t Context;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v4 = 0;
  *(_QWORD *)&v21 = *(_QWORD *)(v4 + 16);
  v5 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v21);
  LODWORD(v7) = v6;
  v8 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v9 = *(_QWORD *)this + 16 * ((v8 >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 28);
  if ((v8 & 0x800000) != 0)
    v12 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v12 = 0;
  mlir::ValueRange::ValueRange((unint64_t *)&v20, v12 + 32 * v10, (v11 + v10) - v10);
  v21 = v20;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v7 = v7;
  if ((_DWORD)v7)
  {
    v13 = 0;
    do
    {
      v15 = *v5++;
      v14 = v15;
      if (v15 == (void *)0x8000000000000000)
      {
        v16 = mlir::ValueRange::dereference_iterator(&v21, v13) | 4;
        v17 = *(unsigned int *)(a2 + 8);
        v18 = *(unsigned int *)(a2 + 12);
        ++v13;
      }
      else
      {
        v16 = mlir::Builder::getI64IntegerAttr((mlir::Builder *)&Context, v14) & 0xFFFFFFFFFFFFFFFBLL;
        v17 = *(unsigned int *)(a2 + 8);
        v18 = *(unsigned int *)(a2 + 12);
      }
      if (v17 >= v18)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v17 + 1, 8);
        v17 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = v16;
      ++*(_DWORD *)(a2 + 8);
      --v7;
    }
    while (v7);
  }
}

void mlir::tensor::PadOp::getMixedHighPad(mlir::tensor::PadOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void **v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t Context;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v4 = 0;
  *(_QWORD *)&v22 = *(_QWORD *)(v4 + 8);
  v5 = (void **)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v22);
  LODWORD(v7) = v6;
  v8 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v9 = (_DWORD *)(*(_QWORD *)this + 16 * ((v8 >> 23) & 1) + 64);
  else
    v9 = 0;
  v10 = v9[6];
  v11 = v9[7];
  v12 = v9[8];
  if ((v8 & 0x800000) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v13 = 0;
  mlir::ValueRange::ValueRange((unint64_t *)&v21, v13 + 32 * (v11 + v10), (v12 + v11 + v10) - (unint64_t)(v11 + v10));
  v22 = v21;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v7 = v7;
  if ((_DWORD)v7)
  {
    v14 = 0;
    do
    {
      v16 = *v5++;
      v15 = v16;
      if (v16 == (void *)0x8000000000000000)
      {
        v17 = mlir::ValueRange::dereference_iterator(&v22, v14) | 4;
        v18 = *(unsigned int *)(a2 + 8);
        v19 = *(unsigned int *)(a2 + 12);
        ++v14;
      }
      else
      {
        v17 = mlir::Builder::getI64IntegerAttr((mlir::Builder *)&Context, v15) & 0xFFFFFFFFFFFFFFFBLL;
        v18 = *(unsigned int *)(a2 + 8);
        v19 = *(unsigned int *)(a2 + 12);
      }
      if (v18 >= v19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v18 + 1, 8);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      --v7;
    }
    while (v7);
  }
}

void mlir::tensor::PadOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  const char *v147;
  unint64_t v148;
  uint64_t v149;
  const char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  unint64_t v175;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.pad", 10, (__int16)v174, a2, 0, 0);
  *(_QWORD *)v4 = off_1E0E18810;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v174 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldStaticZeroPadding]";
  v175 = 94;
  v9 = llvm::StringRef::find((uint64_t *)&v174, "DesiredTypeName = ", 0x12uLL, 0);
  if (v175 >= v9)
    v10 = v9;
  else
    v10 = v175;
  v11 = &v174[v10];
  v12 = v175 - v10;
  if (v175 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v175 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_192;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_193;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_196;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_196:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.pad", 10, (__int16)v174, a2, 0, 0);
  *(_QWORD *)v38 = off_1E0E18440;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v174 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldSourceTensorCast]";
  v175 = 93;
  v43 = llvm::StringRef::find((uint64_t *)&v174, "DesiredTypeName = ", 0x12uLL, 0);
  if (v175 >= v43)
    v44 = v43;
  else
    v44 = v175;
  v45 = &v174[v44];
  v46 = v175 - v44;
  if (v175 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v175 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_192;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_193;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_197;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"tensor.pad", 10, (__int16)v174, a2, 0, 0);
  *(_QWORD *)v72 = off_1E0E18498;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v174 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldTargetTensorCast]";
  v175 = 93;
  v77 = llvm::StringRef::find((uint64_t *)&v174, "DesiredTypeName = ", 0x12uLL, 0);
  if (v175 >= v77)
    v78 = v77;
  else
    v78 = v175;
  v79 = &v174[v78];
  v80 = v175 - v78;
  if (v175 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v175 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
    goto LABEL_192;
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (v88)
  {
    if (v88 >> 61)
      goto LABEL_193;
    v89 = (char *)operator new(8 * v88);
    v90 = &v89[8 * v85];
    v91 = &v89[8 * v88];
    *(_QWORD *)v90 = v72;
    v76 = (uint64_t)(v90 + 8);
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
  }
  else
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
    {
LABEL_100:
      v93 = (unint64_t)(v92 - 8);
      if (v93 < 0x78
        || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
      {
        goto LABEL_198;
      }
      v94 = (v93 >> 3) + 1;
      v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v96 = &v75[-v95];
      v90 -= v95;
      v97 = &v89[8 * v85 - 16];
      v98 = v75 - 16;
      v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v100 = *(_OWORD *)v98;
        *((_OWORD *)v98 - 1) = 0uLL;
        *(_OWORD *)v98 = 0uLL;
        *((_OWORD *)v97 - 1) = v101;
        *(_OWORD *)v97 = v100;
        v97 -= 32;
        v98 -= 32;
        v99 -= 4;
      }
      while (v99);
      v75 = v96;
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_198:
        do
        {
          v102 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v90 - 1) = v102;
          v90 -= 8;
        }
        while (v75 != v84);
      }
      v75 = (char *)a1[1];
      v103 = (char *)a1[2];
      a1[1] = v90;
      a1[2] = v76;
      a1[3] = v91;
      while (v103 != v75)
      {
        v105 = *((_QWORD *)v103 - 1);
        v103 -= 8;
        v104 = v105;
        *(_QWORD *)v103 = 0;
        if (v105)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
      }
      goto LABEL_113;
    }
  }
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
  v106 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 1);
  mlir::Pattern::Pattern((uint64_t)(v106 + 2), (uint64_t)"tensor.pad", 10, (__int16)v174, a2, 0, 0);
  *(_QWORD *)v106 = off_1E0E18E40;
  if (*((_QWORD *)v106 + 9))
  {
    v107 = v106[22];
    if (v107 <= v106[23])
      goto LABEL_117;
LABEL_128:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 20), v106 + 24, v107, 16);
    v106[22] = v106[22];
    v109 = (char *)a1[2];
    v108 = a1[3];
    if ((unint64_t)v109 < v108)
      goto LABEL_118;
    goto LABEL_129;
  }
  v174 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldOrthogonalPaddings]";
  v175 = 95;
  v111 = llvm::StringRef::find((uint64_t *)&v174, "DesiredTypeName = ", 0x12uLL, 0);
  if (v175 >= v111)
    v112 = v111;
  else
    v112 = v175;
  v113 = &v174[v112];
  v114 = v175 - v112;
  if (v175 - v112 >= 0x12)
    v115 = 18;
  else
    v115 = v175 - v112;
  v116 = &v113[v115];
  v117 = v114 - v115;
  if (v117 >= v117 - 1)
    --v117;
  *((_QWORD *)v106 + 8) = v116;
  *((_QWORD *)v106 + 9) = v117;
  v107 = v106[22];
  if (v107 > v106[23])
    goto LABEL_128;
LABEL_117:
  v106[22] = v107;
  v109 = (char *)a1[2];
  v108 = a1[3];
  if ((unint64_t)v109 < v108)
  {
LABEL_118:
    *(_QWORD *)v109 = v106;
    v110 = (uint64_t)(v109 + 8);
    goto LABEL_153;
  }
LABEL_129:
  v118 = (char *)a1[1];
  v119 = (v109 - v118) >> 3;
  v120 = v119 + 1;
  if ((unint64_t)(v119 + 1) >> 61)
    goto LABEL_192;
  v121 = v108 - (_QWORD)v118;
  if (v121 >> 2 > v120)
    v120 = v121 >> 2;
  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
    v122 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
  {
    if (v122 >> 61)
      goto LABEL_193;
    v123 = (char *)operator new(8 * v122);
    v124 = &v123[8 * v119];
    v125 = &v123[8 * v122];
    *(_QWORD *)v124 = v106;
    v110 = (uint64_t)(v124 + 8);
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
      goto LABEL_138;
  }
  else
  {
    v123 = 0;
    v124 = (char *)(8 * v119);
    v125 = 0;
    *(_QWORD *)(8 * v119) = v106;
    v110 = 8 * v119 + 8;
    v126 = (char *)(v109 - v118);
    if (v109 != v118)
    {
LABEL_138:
      v127 = (unint64_t)(v126 - 8);
      if (v127 < 0x78
        || &v109[-(v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v124
        && &v123[v109 - v118 - (v127 & 0xFFFFFFFFFFFFFFF8) - 8] < v109)
      {
        goto LABEL_199;
      }
      v128 = (v127 >> 3) + 1;
      v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
      v130 = &v109[-v129];
      v124 -= v129;
      v131 = &v123[8 * v119 - 16];
      v132 = v109 - 16;
      v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v135 = *((_OWORD *)v132 - 1);
        v134 = *(_OWORD *)v132;
        *((_OWORD *)v132 - 1) = 0uLL;
        *(_OWORD *)v132 = 0uLL;
        *((_OWORD *)v131 - 1) = v135;
        *(_OWORD *)v131 = v134;
        v131 -= 32;
        v132 -= 32;
        v133 -= 4;
      }
      while (v133);
      v109 = v130;
      if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_199:
        do
        {
          v136 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *(_QWORD *)v109 = 0;
          *((_QWORD *)v124 - 1) = v136;
          v124 -= 8;
        }
        while (v109 != v118);
      }
      v109 = (char *)a1[1];
      v137 = (char *)a1[2];
      a1[1] = v124;
      a1[2] = v110;
      a1[3] = v125;
      while (v137 != v109)
      {
        v139 = *((_QWORD *)v137 - 1);
        v137 -= 8;
        v138 = v139;
        *(_QWORD *)v137 = 0;
        if (v139)
          (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      }
      goto LABEL_151;
    }
  }
  a1[1] = v124;
  a1[2] = v110;
  a1[3] = v125;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  a1[2] = v110;
  v140 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v174, 1);
  mlir::Pattern::Pattern((uint64_t)(v140 + 2), (uint64_t)"tensor.pad", 10, (__int16)v174, a2, 0, 0);
  *(_QWORD *)v140 = off_1E0E169B8;
  if (*((_QWORD *)v140 + 9))
  {
    v141 = v140[22];
    if (v141 <= v140[23])
      goto LABEL_155;
LABEL_166:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v140 + 20), v140 + 24, v141, 16);
    v140[22] = v140[22];
    v143 = (char *)a1[2];
    v142 = a1[3];
    if ((unint64_t)v143 < v142)
      goto LABEL_156;
    goto LABEL_167;
  }
  v174 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldStaticPadding]";
  v175 = 90;
  v145 = llvm::StringRef::find((uint64_t *)&v174, "DesiredTypeName = ", 0x12uLL, 0);
  if (v175 >= v145)
    v146 = v145;
  else
    v146 = v175;
  v147 = &v174[v146];
  v148 = v175 - v146;
  if (v175 - v146 >= 0x12)
    v149 = 18;
  else
    v149 = v175 - v146;
  v150 = &v147[v149];
  v151 = v148 - v149;
  if (v151 >= v151 - 1)
    --v151;
  *((_QWORD *)v140 + 8) = v150;
  *((_QWORD *)v140 + 9) = v151;
  v141 = v140[22];
  if (v141 > v140[23])
    goto LABEL_166;
LABEL_155:
  v140[22] = v141;
  v143 = (char *)a1[2];
  v142 = a1[3];
  if ((unint64_t)v143 < v142)
  {
LABEL_156:
    *(_QWORD *)v143 = v140;
    v144 = (uint64_t)(v143 + 8);
    goto LABEL_191;
  }
LABEL_167:
  v152 = (char *)a1[1];
  v153 = (v143 - v152) >> 3;
  v154 = v153 + 1;
  if ((unint64_t)(v153 + 1) >> 61)
LABEL_192:
    abort();
  v155 = v142 - (_QWORD)v152;
  if (v155 >> 2 > v154)
    v154 = v155 >> 2;
  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
    v156 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v156 = v154;
  if (!v156)
  {
    v157 = 0;
    v158 = (char *)(8 * v153);
    v159 = 0;
    *(_QWORD *)(8 * v153) = v140;
    v144 = 8 * v153 + 8;
    v160 = (char *)(v143 - v152);
    if (v143 != v152)
      goto LABEL_176;
    goto LABEL_188;
  }
  if (v156 >> 61)
LABEL_193:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v157 = (char *)operator new(8 * v156);
  v158 = &v157[8 * v153];
  v159 = &v157[8 * v156];
  *(_QWORD *)v158 = v140;
  v144 = (uint64_t)(v158 + 8);
  v160 = (char *)(v143 - v152);
  if (v143 != v152)
  {
LABEL_176:
    v161 = (unint64_t)(v160 - 8);
    if (v161 < 0x78
      || &v143[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v158
      && &v157[v143 - v152 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8] < v143)
    {
      goto LABEL_200;
    }
    v162 = (v161 >> 3) + 1;
    v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
    v164 = &v143[-v163];
    v158 -= v163;
    v165 = &v157[8 * v153 - 16];
    v166 = v143 - 16;
    v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v169 = *((_OWORD *)v166 - 1);
      v168 = *(_OWORD *)v166;
      *((_OWORD *)v166 - 1) = 0uLL;
      *(_OWORD *)v166 = 0uLL;
      *((_OWORD *)v165 - 1) = v169;
      *(_OWORD *)v165 = v168;
      v165 -= 32;
      v166 -= 32;
      v167 -= 4;
    }
    while (v167);
    v143 = v164;
    if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_200:
      do
      {
        v170 = *((_QWORD *)v143 - 1);
        v143 -= 8;
        *(_QWORD *)v143 = 0;
        *((_QWORD *)v158 - 1) = v170;
        v158 -= 8;
      }
      while (v143 != v152);
    }
    v143 = (char *)a1[1];
    v171 = (char *)a1[2];
    a1[1] = v158;
    a1[2] = v144;
    a1[3] = v159;
    while (v171 != v143)
    {
      v173 = *((_QWORD *)v171 - 1);
      v171 -= 8;
      v172 = v173;
      *(_QWORD *)v171 = 0;
      if (v173)
        (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
    }
    goto LABEL_189;
  }
LABEL_188:
  a1[1] = v158;
  a1[2] = v144;
  a1[3] = v159;
LABEL_189:
  if (v143)
    operator delete(v143);
LABEL_191:
  a1[2] = v144;
}

uint64_t mlir::tensor::PadOp::getConstantPaddingValue(mlir::tensor::PadOp *this)
{
  uint64_t v2;
  mlir::GenericProgramPoint **v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t DefiningOp;
  uint64_t ParentBlock;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v2)
    v3 = (mlir::GenericProgramPoint **)(v2 - 8);
  else
    v3 = 0;
  mlir::Block::getTerminator(v3);
  v5 = 0;
  if (v4)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::tensor::YieldOp,void>::id;
  else
    v6 = 0;
  if (!v6)
    return v5;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24);
  v12 = v5;
  v13 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  if (DefiningOp)
  {
    if ((mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)) & 1) != 0)
      return v5;
  }
  ParentBlock = mlir::Value::getParentBlock((mlir::Value *)&v12);
  v9 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v9)
    v10 = v9 - 8;
  else
    v10 = 0;
  if (ParentBlock != v10)
    return v12;
  return 0;
}

uint64_t mlir::tensor::PadOp::fold(uint64_t a1)
{
  uint64_t v2;
  _QWORD *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  uint64_t v8;
  unint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v2 = *(_QWORD *)a1 - 16;
  else
    v2 = 0;
  v10 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v10))
    return 0;
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v10);
  if (v4)
  {
    v5 = 8 * v4;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 36) ? *(_QWORD *)a1 - 16 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  if ((*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(*(_QWORD *)a1 + 80))
  {
    return 0;
  }
  return v8 | 4;
}

void mlir::tensor::ParallelInsertSliceOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *__src, uint64_t a12)
{
  uint64_t DenseI64ArrayAttr;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22[2];
  unint64_t v23[2];
  unint64_t v24[2];
  unint64_t v25[2];
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  void *v29;
  uint64_t v30;
  _BYTE v31[48];
  void *v32;
  uint64_t v33;
  _BYTE v34[48];
  void *v35;
  uint64_t v36;
  _BYTE v37[48];
  _BYTE *v38;
  uint64_t v39;
  _BYTE v40[48];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[8];

  v43[6] = *MEMORY[0x1E0C80C00];
  v41 = v43;
  v42 = 0x600000000;
  v38 = v40;
  v39 = 0x600000000;
  v35 = v37;
  v36 = 0x600000000;
  v32 = v34;
  v33 = 0x600000000;
  v29 = v31;
  v30 = 0x600000000;
  v26 = v28;
  v27 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v32, (uint64_t)&v41);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v29, (uint64_t)&v38);
  mlir::dispatchIndexOpFoldResults(a9, a10, (uint64_t)&v26, (uint64_t)&v35);
  mlir::ValueRange::ValueRange(v25, 0, 0);
  mlir::ValueRange::ValueRange(v24, (uint64_t)v32, v33);
  mlir::ValueRange::ValueRange(v23, (uint64_t)v29, v30);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v26, v27);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v41, v42);
  v17 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v38, v39);
  v18 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v35, v36);
  mlir::tensor::ParallelInsertSliceOp::build(v18, a2, v25[0], v25[1], a3, a4, v24[0], v24[1], v23[0], v23[1], v22[0], v22[1], DenseI64ArrayAttr, v17, v18);
  *(_QWORD *)(a2 + 192) = 0;
  v19 = *(unsigned int *)(a2 + 120);
  if (a12 + v19 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a12 + v19, 16);
    LODWORD(v19) = *(_DWORD *)(a2 + 120);
  }
  if (a12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v19), __src, 16 * a12);
    LODWORD(v19) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v19 + a12;
  if (v26 != v28)
    free(v26);
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
}

void mlir::tensor::ParallelInsertSliceOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a6;
  v25 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  mlir::OperationState::addOperands(a2, a11, a12);
  v20 = mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  *(_QWORD *)(v20 + 24) = 0x100000001;
  *(_DWORD *)(v20 + 32) = a8;
  *(_DWORD *)(v20 + 36) = a10;
  *(_DWORD *)(v20 + 40) = a12;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a13;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = a14;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::tensor::detail::ParallelInsertSliceOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = a15;
  v21 = *(unsigned int *)(a2 + 72);
  if (a4 + v21 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v21, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    v22 = 0;
    v23 = *(_QWORD *)(a2 + 64) + 8 * v21;
    do
    {
      *(_QWORD *)(v23 + 8 * v22) = mlir::TypeRange::dereference_iterator(a3, v22);
      ++v22;
    }
    while (a4 != v22);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v21 + a4;
}

uint64_t mlir::tensor::ParallelInsertSliceOp::verify(uint64_t **this)
{
  mlir::Block *ParentOp;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t RHS;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  mlir::Block *v16;
  mlir::Operation *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  int isRankReducedType;
  uint64_t v28;
  const char *v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *__p;
  _QWORD **v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  ParentOp = (mlir::Block *)(*this)[2];
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  if (mlir::OpInterface<mlir::ParallelCombiningOpInterface,mlir::detail::ParallelCombiningOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)ParentOp))
  {
    v3 = (*this)[9];
    v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v5 = (uint64_t)(*this + 10);
    if (!*((_BYTE *)*this + 47))
      v5 = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 32 * *(unsigned int *)(v5 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v32 = (*this)[10];
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v32);
    v7 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v7 = 0;
    v32 = *(_QWORD *)(v7 + 8);
    v8 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v32);
    v10 = v9;
    v11 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v11 = 0;
    v32 = *(_QWORD *)(v11 + 16);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v32);
    v32 = v6;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v32);
    v13 = (_QWORD *)mlir::RankedTensorType::get(v8, v10, RHS, 0);
    v14 = v13;
    if (v13)
    {
      v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
      if (!v4)
      {
LABEL_31:
        isRankReducedType = mlir::isRankReducedType(v14, v15, v4);
        produceSliceErrorMsg(isRankReducedType);
        return v28;
      }
    }
    else
    {
      v15 = 0;
      if (!v4)
        goto LABEL_31;
    }
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    goto LABEL_31;
  }
  v30 = "expected ParallelCombiningOpInterface parent, got:";
  v31 = 259;
  mlir::OpState::emitError(this, (uint64_t)&v30, (uint64_t)&v32);
  v16 = (mlir::Block *)(*this)[2];
  if (!v16)
  {
    v17 = 0;
    if (!v32)
      goto LABEL_16;
    goto LABEL_15;
  }
  v17 = (mlir::Operation *)mlir::Block::getParentOp(v16);
  if (v32)
LABEL_15:
    mlir::Diagnostic::operator<<((mlir::Diagnostic *)&v33, v17);
LABEL_16:
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v32);
  if (v32)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v32);
  if (v40)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v39;
      v21 = __p;
      if (v39 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v39 = v19;
      operator delete(v21);
    }
    v22 = v36;
    if (v36)
    {
      v23 = v37;
      v24 = v36;
      if (v37 != v36)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v36;
      }
      v37 = v22;
      operator delete(v24);
    }
    if (v34 != &v35)
      free(v34);
  }
  return v18;
}

void mlir::tensor::ParallelInsertSliceOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;

  v4 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v4 + 2), (uint64_t)"tensor.parallel_insert_slice", 28, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v4 = &off_1E0E1A308;
  if (*((_QWORD *)v4 + 9))
  {
    v5 = v4[22];
    if (v5 <= v4[23])
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v4 + 20), v4 + 24, v5, 16);
    v4[22] = v4[22];
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpConstantArgumentFolder<mli"
         "r::tensor::ParallelInsertSliceOp>]";
  v107 = 145;
  v9 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v9)
    v10 = v9;
  else
    v10 = v107;
  v11 = &v106[v10];
  v12 = v107 - v10;
  if (v107 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v107 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *((_QWORD *)v4 + 8) = v14;
  *((_QWORD *)v4 + 9) = v15;
  v5 = v4[22];
  if (v5 > v4[23])
    goto LABEL_14;
LABEL_3:
  v4[22] = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_116;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_117;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v4;
    v8 = (uint64_t)(v22 + 8);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v22 && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_120;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 -= v27;
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_120:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v22 - 1) = v34;
          v22 -= 8;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v38 + 2), (uint64_t)"tensor.parallel_insert_slice", 28, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v38 = &off_1E0E19258;
  if (*((_QWORD *)v38 + 9))
  {
    v39 = v38[22];
    if (v39 <= v38[23])
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 20), v38 + 24, v39, 16);
    v38[22] = v38[22];
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpCastFolder<mlir::tensor::P"
         "arallelInsertSliceOp>]";
  v107 = 133;
  v43 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v43)
    v44 = v43;
  else
    v44 = v107;
  v45 = &v106[v44];
  v46 = v107 - v44;
  if (v107 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v107 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *((_QWORD *)v38 + 8) = v48;
  *((_QWORD *)v38 + 9) = v49;
  v39 = v38[22];
  if (v39 > v38[23])
    goto LABEL_52;
LABEL_41:
  v38[22] = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    goto LABEL_116;
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      goto LABEL_117;
    v55 = (char *)operator new(8 * v54);
    v56 = &v55[8 * v51];
    v57 = &v55[8 * v54];
    *(_QWORD *)v56 = v38;
    v42 = (uint64_t)(v56 + 8);
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
  }
  else
  {
    v55 = 0;
    v56 = (char *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
    {
LABEL_62:
      v59 = (unint64_t)(v58 - 8);
      if (v59 < 0x78
        || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v56 && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
      {
        goto LABEL_121;
      }
      v60 = (v59 >> 3) + 1;
      v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = &v41[-v61];
      v56 -= v61;
      v63 = &v55[8 * v51 - 16];
      v64 = v41 - 16;
      v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v66 = *(_OWORD *)v64;
        *((_OWORD *)v64 - 1) = 0uLL;
        *(_OWORD *)v64 = 0uLL;
        *((_OWORD *)v63 - 1) = v67;
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v41 = v62;
      if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_121:
        do
        {
          v68 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v56 - 1) = v68;
          v56 -= 8;
        }
        while (v41 != v50);
      }
      v41 = (char *)a1[1];
      v69 = (char *)a1[2];
      a1[1] = v56;
      a1[2] = v42;
      a1[3] = v57;
      while (v69 != v41)
      {
        v71 = *((_QWORD *)v69 - 1);
        v69 -= 8;
        v70 = v71;
        *(_QWORD *)v69 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      goto LABEL_75;
    }
  }
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
  v72 = (unsigned int *)operator new(0x60uLL);
  mlir::PatternBenefit::PatternBenefit(&v106, 1);
  mlir::Pattern::Pattern((uint64_t)(v72 + 2), (uint64_t)"tensor.parallel_insert_slice", 28, (__int16)v106, a2, 0, 0);
  *(_QWORD *)v72 = &off_1E0E1A0F8;
  if (*((_QWORD *)v72 + 9))
  {
    v73 = v72[22];
    if (v73 <= v72[23])
      goto LABEL_79;
LABEL_90:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v72 + 20), v72 + 24, v73, 16);
    v72[22] = v72[22];
    v75 = (char *)a1[2];
    v74 = a1[3];
    if ((unint64_t)v75 < v74)
      goto LABEL_80;
    goto LABEL_91;
  }
  v106 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::InsertSliceOpSourceCastInserter<mlir::t"
         "ensor::ParallelInsertSliceOp>]";
  v107 = 141;
  v77 = llvm::StringRef::find((uint64_t *)&v106, "DesiredTypeName = ", 0x12uLL, 0);
  if (v107 >= v77)
    v78 = v77;
  else
    v78 = v107;
  v79 = &v106[v78];
  v80 = v107 - v78;
  if (v107 - v78 >= 0x12)
    v81 = 18;
  else
    v81 = v107 - v78;
  v82 = &v79[v81];
  v83 = v80 - v81;
  if (v83 >= v83 - 1)
    --v83;
  *((_QWORD *)v72 + 8) = v82;
  *((_QWORD *)v72 + 9) = v83;
  v73 = v72[22];
  if (v73 > v72[23])
    goto LABEL_90;
LABEL_79:
  v72[22] = v73;
  v75 = (char *)a1[2];
  v74 = a1[3];
  if ((unint64_t)v75 < v74)
  {
LABEL_80:
    *(_QWORD *)v75 = v72;
    v76 = (uint64_t)(v75 + 8);
    goto LABEL_115;
  }
LABEL_91:
  v84 = (char *)a1[1];
  v85 = (v75 - v84) >> 3;
  v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61)
LABEL_116:
    abort();
  v87 = v74 - (_QWORD)v84;
  if (v87 >> 2 > v86)
    v86 = v87 >> 2;
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
    v88 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v88 = v86;
  if (!v88)
  {
    v89 = 0;
    v90 = (char *)(8 * v85);
    v91 = 0;
    *(_QWORD *)(8 * v85) = v72;
    v76 = 8 * v85 + 8;
    v92 = (char *)(v75 - v84);
    if (v75 != v84)
      goto LABEL_100;
    goto LABEL_112;
  }
  if (v88 >> 61)
LABEL_117:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v89 = (char *)operator new(8 * v88);
  v90 = &v89[8 * v85];
  v91 = &v89[8 * v88];
  *(_QWORD *)v90 = v72;
  v76 = (uint64_t)(v90 + 8);
  v92 = (char *)(v75 - v84);
  if (v75 != v84)
  {
LABEL_100:
    v93 = (unint64_t)(v92 - 8);
    if (v93 < 0x78
      || &v75[-(v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v90 && &v89[v75 - v84 - (v93 & 0xFFFFFFFFFFFFFFF8) - 8] < v75)
    {
      goto LABEL_122;
    }
    v94 = (v93 >> 3) + 1;
    v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    v96 = &v75[-v95];
    v90 -= v95;
    v97 = &v89[8 * v85 - 16];
    v98 = v75 - 16;
    v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *((_OWORD *)v98 - 1);
      v100 = *(_OWORD *)v98;
      *((_OWORD *)v98 - 1) = 0uLL;
      *(_OWORD *)v98 = 0uLL;
      *((_OWORD *)v97 - 1) = v101;
      *(_OWORD *)v97 = v100;
      v97 -= 32;
      v98 -= 32;
      v99 -= 4;
    }
    while (v99);
    v75 = v96;
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_122:
      do
      {
        v102 = *((_QWORD *)v75 - 1);
        v75 -= 8;
        *(_QWORD *)v75 = 0;
        *((_QWORD *)v90 - 1) = v102;
        v90 -= 8;
      }
      while (v75 != v84);
    }
    v75 = (char *)a1[1];
    v103 = (char *)a1[2];
    a1[1] = v90;
    a1[2] = v76;
    a1[3] = v91;
    while (v103 != v75)
    {
      v105 = *((_QWORD *)v103 - 1);
      v103 -= 8;
      v104 = v105;
      *(_QWORD *)v103 = 0;
      if (v105)
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
    }
    goto LABEL_113;
  }
LABEL_112:
  a1[1] = v90;
  a1[2] = v76;
  a1[3] = v91;
LABEL_113:
  if (v75)
    operator delete(v75);
LABEL_115:
  a1[2] = v76;
}

uint64_t mlir::tensor::ScatterOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "scatter", 7);
}

uint64_t mlir::tensor::ScatterOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  const void **v72[4];
  __int16 v73;
  int v74;
  const char *v75;
  uint64_t v76;
  _QWORD v77[3];
  void *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD **v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v77[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v77);
  v3 = v2;
  v77[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v4 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v77);
  v6 = v5;
  if (!verifyGatherOrScatterDims(*this, v4, v5, v3, (const void **)"scatter", (const char *)7, (const void **)"dest", (const char *)4))return 0;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v7 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v7 = 0;
  if (*(_QWORD *)(v7 + 8))
  {
    v8 = mlir::tensor::GatherOp::inferResultType(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, v4, v6, 0);
    v9 = 1;
    v10 = mlir::tensor::GatherOp::inferResultType(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, v4, v6, 1);
    v11 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v11 != v8 && v11 != v10)
    {
      v13 = v10;
      v72[0] = (const void **)"source type mismatch: expected ";
      v73 = 259;
      mlir::OpState::emitOpError(this, v72, (uint64_t)v77);
      if (v77[0])
      {
        v14 = &v74;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v8);
        v15 = (char *)v78;
        if (v79 >= v80)
        {
          v57 = v79 + 1;
          if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
          {
            v66 = (char *)&v74 - (_BYTE *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v57, 24);
            v15 = (char *)v78;
            v14 = (int *)((char *)v78 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v57, 24);
            v14 = &v74;
            v15 = (char *)v78;
          }
        }
        v16 = &v15[24 * v79];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        v18 = ++v79;
        if (v77[0])
        {
          v74 = 3;
          v75 = " or its rank-reduced variant ";
          v76 = 29;
          v19 = &v74;
          v20 = (char *)v78;
          if (v18 >= v80)
          {
            v58 = v18 + 1;
            v59 = (char *)v78 + 24 * v18 > (char *)&v74;
            if (v78 <= &v74 && v59)
            {
              v67 = (char *)&v74 - (_BYTE *)v78;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v58, 24);
              v20 = (char *)v78;
              v19 = (int *)((char *)v78 + v67);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v58, 24);
              v19 = &v74;
              v20 = (char *)v78;
            }
          }
          v21 = &v20[24 * v79];
          v22 = *(_OWORD *)v19;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v21 = v22;
          ++v79;
          if (v77[0])
          {
            v23 = &v74;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v13);
            v24 = (char *)v78;
            if (v79 >= v80)
            {
              v60 = v79 + 1;
              if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
              {
                v68 = (char *)&v74 - (_BYTE *)v78;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v60, 24);
                v24 = (char *)v78;
                v23 = (int *)((char *)v78 + v68);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v60, 24);
                v23 = &v74;
                v24 = (char *)v78;
              }
            }
            v25 = &v24[24 * v79];
            v26 = *(_OWORD *)v23;
            *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v25 = v26;
            v27 = ++v79;
            if (v77[0])
            {
              v74 = 3;
              v75 = " (got: ";
              v76 = 7;
              v28 = &v74;
              v29 = (char *)v78;
              if (v27 >= v80)
              {
                v61 = v27 + 1;
                v62 = (char *)v78 + 24 * v27 > (char *)&v74;
                if (v78 <= &v74 && v62)
                {
                  v69 = (char *)&v74 - (_BYTE *)v78;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
                  v29 = (char *)v78;
                  v28 = (int *)((char *)v78 + v69);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
                  v28 = &v74;
                  v29 = (char *)v78;
                }
              }
              v30 = &v29[24 * v79];
              v31 = *(_OWORD *)v28;
              *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v30 = v31;
              ++v79;
              if (v77[0])
              {
                v32 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
                v33 = &v74;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v74, v32);
                v34 = (char *)v78;
                if (v79 >= v80)
                {
                  v63 = v79 + 1;
                  if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
                  {
                    v70 = (char *)&v74 - (_BYTE *)v78;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
                    v34 = (char *)v78;
                    v33 = (int *)((char *)v78 + v70);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v63, 24);
                    v33 = &v74;
                    v34 = (char *)v78;
                  }
                }
                v35 = &v34[24 * v79];
                v36 = *(_OWORD *)v33;
                *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
                *(_OWORD *)v35 = v36;
                v37 = ++v79;
                if (v77[0])
                {
                  v74 = 3;
                  v75 = ")";
                  v76 = 1;
                  v38 = &v74;
                  v39 = (char *)v78;
                  if (v37 >= v80)
                  {
                    v64 = v37 + 1;
                    v65 = (char *)v78 + 24 * v37 > (char *)&v74;
                    if (v78 <= &v74 && v65)
                    {
                      v71 = (char *)&v74 - (_BYTE *)v78;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
                      v39 = (char *)v78;
                      v38 = (int *)((char *)v78 + v71);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
                      v38 = &v74;
                      v39 = (char *)v78;
                    }
                  }
                  v40 = &v39[24 * v79];
                  v41 = *(_OWORD *)v38;
                  *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
                  *(_OWORD *)v40 = v41;
                  ++v79;
                }
              }
            }
          }
        }
      }
      v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v77);
      if (v77[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
      if (v86)
      {
        v42 = (_QWORD **)__p;
        if (__p)
        {
          v43 = v85;
          v44 = __p;
          if (v85 != __p)
          {
            do
              v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
            while (v43 != v42);
            v44 = __p;
          }
          v85 = v42;
          operator delete(v44);
        }
        v45 = v82;
        if (!v82)
          goto LABEL_54;
        v46 = v83;
        v47 = v82;
        if (v83 == v82)
        {
LABEL_53:
          v83 = v45;
          operator delete(v47);
LABEL_54:
          if (v78 != v81)
            free(v78);
          return v9;
        }
        do
        {
          v49 = (void *)*--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
            operator delete[](v48);
        }
        while (v46 != v45);
LABEL_52:
        v47 = v82;
        goto LABEL_53;
      }
    }
  }
  else
  {
    v72[0] = (const void **)"requires 'unique' attribute to be set";
    v73 = 259;
    mlir::OpState::emitOpError(this, v72, (uint64_t)v77);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v77);
    if (v77[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
    if (v86)
    {
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v85;
        v52 = __p;
        if (v85 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v85 = v50;
        operator delete(v52);
      }
      v45 = v82;
      if (!v82)
        goto LABEL_54;
      v53 = v83;
      v47 = v82;
      if (v83 == v82)
        goto LABEL_53;
      do
      {
        v55 = (void *)*--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v53 != v45);
      goto LABEL_52;
    }
  }
  return v9;
}

uint64_t mlir::tensor::SplatOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "splat", 5);
}

unint64_t mlir::tensor::SplatOp::fold(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a2 + 40);
  if (!v2)
    return 0;
  v3 = *(void **)(*(_QWORD *)v2 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    return 0;
  }
  v5 = (_QWORD *)(*(_QWORD *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5)
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  else
    v6 = 0;
  v8[0] = v2;
  return mlir::DenseElementsAttr::get((uint64_t)v5, v6, v8, 1uLL) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::tensor::PackOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "pack", 4);
}

uint64_t mlir::tensor::PackOp::reifyResultShapes(uint64_t *a1, mlir::IndexType **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::MLIRContext *i;
  unint64_t MixedSize;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *a1 + 80;
  if (*(_BYTE *)(*a1 + 47))
    v7 = *a1 + 80;
  else
    v7 = 0;
  v32 = (void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 32 * *(unsigned int *)(v7 + 24) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v32);
  v32 = v34;
  v33 = 0x600000000;
  if (v8)
  {
    v9 = v8;
    if (v8 < 7)
    {
      v10 = 0;
      v11 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v8, 8);
      v10 = v33;
      v11 = v9 - v33;
      if (v9 == v33)
        goto LABEL_10;
    }
    bzero((char *)v32 + 8 * v10, 8 * v11);
LABEL_10:
    LODWORD(v33) = v9;
  }
  v12 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v12)
  {
    llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpFoldResult,6u>>::append(a3, 1 - v12, (unint64_t)&v32);
LABEL_18:
    v16 = v32;
    if (v32 == v34)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((_DWORD)v12 == 1)
    goto LABEL_18;
  v13 = *(_QWORD *)a3;
  v14 = v12 << 6;
  do
  {
    v15 = *(void **)(v13 + v14 - 64);
    if ((void *)(v13 + v14 - 48) != v15)
      free(v15);
    v14 -= 64;
  }
  while (v14 != 64);
  *(_DWORD *)(a3 + 8) = 1;
  v16 = v32;
  if (v32 != v34)
LABEL_19:
    free(v16);
LABEL_20:
  v17 = *(_QWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 47))
    v18 = v6;
  else
    v18 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 32 * *(unsigned int *)(v18 + 24) + 24);
  v31 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  v32 = v34;
  v33 = 0x600000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
  if (v20 >= 1)
  {
    for (i = 0; (uint64_t)i < v24; i = (mlir::MLIRContext *)((char *)i + 1))
    {
      MixedSize = mlir::tensor::getMixedSize(a2, v17, v19, i);
      v23 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
        v23 = v33;
      }
      *((_QWORD *)v32 + v23) = MixedSize;
      LODWORD(v33) = v33 + 1;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
    }
  }
  v25 = *(_QWORD *)a3;
  v26 = v32;
  if ((void **)v25 != &v32)
  {
    if (v32 != v34)
    {
      if (*(_QWORD *)v25 != v25 + 16)
      {
        free(*(void **)v25);
        v26 = v32;
      }
      *(_QWORD *)v25 = v26;
      *(_QWORD *)(v25 + 8) = v33;
      v32 = v34;
      HIDWORD(v33) = 0;
      goto LABEL_45;
    }
    v27 = v33;
    v28 = *(unsigned int *)(v25 + 8);
    if (v28 >= v33)
    {
      if ((_DWORD)v33)
        memmove(*(void **)v25, v34, 8 * v33);
      goto LABEL_44;
    }
    if (*(_DWORD *)(v25 + 12) >= v33)
    {
      if ((_DWORD)v28)
      {
        memmove(*(void **)v25, v34, 8 * v28);
        v29 = v33;
        if (v28 == v33)
        {
LABEL_44:
          *(_DWORD *)(v25 + 8) = v27;
LABEL_45:
          LODWORD(v33) = 0;
          v26 = v32;
          goto LABEL_46;
        }
      }
      else
      {
        v28 = 0;
        v29 = v33;
        if (!(_DWORD)v33)
          goto LABEL_44;
      }
    }
    else
    {
      *(_DWORD *)(v25 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v25, (void *)(v25 + 16), v27, 8);
      v28 = 0;
      v29 = v33;
      if (!(_DWORD)v33)
        goto LABEL_44;
    }
    memcpy((void *)(*(_QWORD *)v25 + 8 * v28), (char *)v32 + 8 * v28, 8 * v29 - 8 * v28);
    goto LABEL_44;
  }
LABEL_46:
  if (v26 != v34)
    free(v26);
  return 1;
}

void mlir::tensor::PackOp::getMixedTiles(mlir::tensor::PackOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t Context;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)this;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  if (HIBYTE(*(_DWORD *)(v3 + 44)))
    v5 = v3 + 16 * (((unint64_t)*(unsigned int *)(v3 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 16);
  v16 = Context;
  v17 = v6;
  v7 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v17);
  if (v8)
  {
    v9 = (void **)v7;
    v10 = 0;
    v11 = 8 * v8;
    do
    {
      if (*v9 == (void *)0x8000000000000000)
      {
        if (*(_BYTE *)(v3 + 47))
          v12 = (_DWORD *)(v3 + 80);
        else
          v12 = 0;
        v13 = v10++;
        v14 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 32 * (v12[7] + v12[6] + v12[8]) + 32 * v13 + 24) | 4;
      }
      else
      {
        v14 = mlir::Builder::getI64IntegerAttr((mlir::Builder *)&v16, *v9) & 0xFFFFFFFFFFFFFFFBLL;
      }
      v15 = *(unsigned int *)(a2 + 8);
      if (v15 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v15 + 1, 8);
        v15 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = v14;
      ++*(_DWORD *)(a2 + 8);
      ++v9;
      v11 -= 8;
    }
    while (v11);
  }
}

void mlir::tensor::PackOp::getStaticTiles(mlir::tensor::PackOp *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7[2];
  _QWORD v8[7];

  v8[6] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v7[0] = v8;
  v7[1] = (void *)0x600000000;
  *a2 = a2 + 2;
  a2[1] = 0x600000000;
  mlir::tensor::PackOp::getMixedTiles((mlir::tensor::PackOp *)&v3, (uint64_t)&v4);
  mlir::dispatchIndexOpFoldResults((uint64_t *)v4, v5, (uint64_t)v7, (uint64_t)a2);
  if (v4 != &v6)
    free(v4);
  if (v7[0] != v8)
    free(v7[0]);
}

uint64_t mlir::tensor::PackOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  mlir::MLIRContext **v22;
  mlir::MLIRContext *v23;
  _QWORD *i;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t RHS;
  llvm **p_DenseI64ArrayAttr;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  llvm **v44;
  char *v45;
  char *v46;
  __int128 v47;
  unint64_t v48;
  llvm **v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t Value;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int64_t ConstantIntValue;
  char v69;
  int v70;
  _QWORD **v71;
  _QWORD **v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  mlir::MLIRContext *Context;
  unint64_t v86;
  llvm *DenseI64ArrayAttr;
  const char *v88;
  uint64_t v89;
  __int16 v90;
  uint64_t *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  unsigned int v95;
  unsigned int v96;
  _BYTE v97[96];
  void *v98;
  _QWORD *v99;
  void *__p;
  _QWORD **v101;
  char v102;
  const void **v103;
  unsigned int v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v91 = *this;
  mlir::tensor::PackOp::getMixedTiles((mlir::tensor::PackOp *)&v91, (uint64_t)&v103);
  if (v104)
  {
    v3 = (uint64_t *)v103;
    v4 = 8 * v104;
    while (!mlir::isConstantIntValue(*v3, 0))
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
    DenseI64ArrayAttr = (llvm *)"invalid zero tile factor";
    v90 = 259;
    mlir::Operation::emitError(v2, (uint64_t)&DenseI64ArrayAttr, (uint64_t)&v92);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v92);
    if (v92)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v92);
    if (v102)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v101;
        v14 = __p;
        if (v101 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v101 = v12;
        operator delete(v14);
      }
      v15 = v98;
      if (!v98)
        goto LABEL_53;
      v16 = v99;
      v17 = v98;
      if (v99 == v98)
        goto LABEL_52;
      do
      {
        v19 = (void *)*--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v16 != v15);
      goto LABEL_51;
    }
    goto LABEL_55;
  }
LABEL_5:
  v86 = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
  v6 = v5;
  v92 = (void *)v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8];
  v7 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  v9 = v8;
  if (HIBYTE(*((_DWORD *)v2 + 11)))
    v10 = (unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8];
  else
    v10 = 0;
  v92 = *(void **)(v10 + 8);
  if (!v92)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v2 + 3));
    DenseI64ArrayAttr = (llvm *)mlir::Builder::getDenseI64ArrayAttr(&Context, 0, 0);
    mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&DenseI64ArrayAttr);
    if (v9 > v6)
      goto LABEL_36;
LABEL_26:
    DenseI64ArrayAttr = 0;
    v88 = 0;
    LODWORD(v89) = 0;
    if (v9)
    {
      v20 = 8 * v9;
      v21 = 8 * v9;
      v22 = (mlir::MLIRContext **)v7;
      do
      {
        v23 = *v22++;
        Context = v23;
        llvm::DenseMapBase<llvm::DenseMap<long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&DenseI64ArrayAttr, (uint64_t *)&Context, (uint64_t)&v92);
        v21 -= 8;
      }
      while (v21);
      if (v9 == v88)
      {
        for (i = (_QWORD *)v7; (*i & 0x8000000000000000) == 0 && *i < (int64_t)v6; ++i)
        {
          v20 -= 8;
          if (!v20)
            llvm::deallocate_buffer(DenseI64ArrayAttr, (void *)(8 * v89));
        }
      }
      llvm::deallocate_buffer(DenseI64ArrayAttr, (void *)(8 * v89));
    }
    llvm::deallocate_buffer(0, 0);
  }
  mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  if (v9 <= v6)
    goto LABEL_26;
LABEL_36:
  DenseI64ArrayAttr = (llvm *)"invalid inner_dims_pos vector";
  v90 = 259;
  mlir::Operation::emitError(v2, (uint64_t)&DenseI64ArrayAttr, (uint64_t)&v92);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v92);
  if (v92)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v92);
  if (v102)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v101;
      v27 = __p;
      if (v101 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v101 = v25;
      operator delete(v27);
    }
    v15 = v98;
    if (!v98)
      goto LABEL_53;
    v28 = v99;
    v17 = v98;
    if (v99 == v98)
    {
LABEL_52:
      v99 = v15;
      operator delete(v17);
LABEL_53:
      if (v94 != v97)
        free(v94);
      goto LABEL_55;
    }
    do
    {
      v30 = (void *)*--v28;
      v29 = v30;
      *v28 = 0;
      if (v30)
        operator delete[](v29);
    }
    while (v28 != v15);
LABEL_51:
    v17 = v98;
    goto LABEL_52;
  }
LABEL_55:
  if (v103 != (const void **)&v105)
    free(v103);
  if (!v11)
    return 0;
  v31 = *this;
  v32 = *((unsigned int *)*this + 11);
  v33 = &(*this)[2 * ((v32 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v33 = 0;
  v34 = *((_DWORD *)v33 + 8);
  if ((v32 & 0x800000) != 0)
  {
    v35 = v31[9];
    if (!v34)
      goto LABEL_87;
  }
  else
  {
    v35 = 0;
    if (!v34)
      goto LABEL_87;
  }
  v36 = *(_QWORD *)(v35 + 32 * (*((_DWORD *)v33 + 7) + *((_DWORD *)v33 + 6)) + 24);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
    v92 = (void *)(*(_QWORD *)(*(_QWORD *)(v31[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v37 != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v92))
    {
      v103 = (const void **)"expected padding_value has ";
      v106 = 259;
      mlir::OpState::emitOpError(this, &v103, (uint64_t)&v92);
      Context = (mlir::MLIRContext *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Context);
      if (v92)
      {
        p_DenseI64ArrayAttr = &DenseI64ArrayAttr;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&DenseI64ArrayAttr, RHS);
        v40 = (char *)v94;
        if (v95 >= v96)
        {
          v78 = v95 + 1;
          if (v94 <= &DenseI64ArrayAttr && (char *)v94 + 24 * v95 > (char *)&DenseI64ArrayAttr)
          {
            v82 = (char *)&DenseI64ArrayAttr - (_BYTE *)v94;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v78, 24);
            v40 = (char *)v94;
            p_DenseI64ArrayAttr = (llvm **)((char *)v94 + v82);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v78, 24);
            p_DenseI64ArrayAttr = &DenseI64ArrayAttr;
            v40 = (char *)v94;
          }
        }
        v41 = &v40[24 * v95];
        v42 = *(_OWORD *)p_DenseI64ArrayAttr;
        *((_QWORD *)v41 + 2) = p_DenseI64ArrayAttr[2];
        *(_OWORD *)v41 = v42;
        v43 = ++v95;
        if (v92)
        {
          LODWORD(DenseI64ArrayAttr) = 3;
          v88 = " but got: ";
          v89 = 10;
          v44 = &DenseI64ArrayAttr;
          v45 = (char *)v94;
          if (v43 >= v96)
          {
            v79 = v43 + 1;
            v80 = (char *)v94 + 24 * v43 > (char *)&DenseI64ArrayAttr;
            if (v94 <= &DenseI64ArrayAttr && v80)
            {
              v83 = (char *)&DenseI64ArrayAttr - (_BYTE *)v94;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v79, 24);
              v45 = (char *)v94;
              v44 = (llvm **)((char *)v94 + v83);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v79, 24);
              v44 = &DenseI64ArrayAttr;
              v45 = (char *)v94;
            }
          }
          v46 = &v45[24 * v95];
          v47 = *(_OWORD *)v44;
          *((_QWORD *)v46 + 2) = v44[2];
          *(_OWORD *)v46 = v47;
          ++v95;
          if (v92)
          {
            v48 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
            v49 = &DenseI64ArrayAttr;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&DenseI64ArrayAttr, v48);
            v50 = (char *)v94;
            if (v95 >= v96)
            {
              v81 = v95 + 1;
              if (v94 <= &DenseI64ArrayAttr && (char *)v94 + 24 * v95 > (char *)&DenseI64ArrayAttr)
              {
                v84 = (char *)&DenseI64ArrayAttr - (_BYTE *)v94;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v81, 24);
                v50 = (char *)v94;
                v49 = (llvm **)((char *)v94 + v84);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v81, 24);
                v49 = &DenseI64ArrayAttr;
                v50 = (char *)v94;
              }
            }
            v51 = &v50[24 * v95];
            v52 = *(_OWORD *)v49;
            *((_QWORD *)v51 + 2) = v49[2];
            *(_OWORD *)v51 = v52;
            ++v95;
          }
        }
      }
      v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v92);
      if (v92)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v92);
      if (v102)
      {
        v54 = (_QWORD **)__p;
        if (__p)
        {
          v55 = v101;
          v56 = __p;
          if (v101 != __p)
          {
            do
              v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
            while (v55 != v54);
            v56 = __p;
          }
          v101 = v54;
          operator delete(v56);
        }
        v57 = v98;
        if (!v98)
          goto LABEL_117;
        v58 = v99;
        v59 = v98;
        if (v99 == v98)
        {
LABEL_116:
          v99 = v57;
          operator delete(v59);
LABEL_117:
          if (v94 != v97)
            free(v94);
          return v53;
        }
        do
        {
          v61 = (void *)*--v58;
          v60 = v61;
          *v58 = 0;
          if (v61)
            operator delete[](v60);
        }
        while (v58 != v57);
LABEL_115:
        v59 = v98;
        goto LABEL_116;
      }
      return v53;
    }
    return 1;
  }
LABEL_87:
  v103 = (const void **)(*(_QWORD *)(*(_QWORD *)(v31[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v103);
  v92 = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v63 = (_QWORD *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  v65 = v64;
  mlir::tensor::PackOp::getMixedTiles((mlir::tensor::PackOp *)this, (uint64_t)&v92);
  v66 = (uint64_t *)v92;
  if (v65)
  {
    v67 = 8 * v65;
    do
    {
      if (*(_QWORD *)(Value + 8 * *v63) != 0x8000000000000000)
      {
        ConstantIntValue = mlir::getConstantIntValue(*v66);
        if (v69)
        {
          if (*(_QWORD *)(Value + 8 * *v63) % ConstantIntValue)
          {
            v70 = 1;
            v66 = (uint64_t *)v92;
            if (v92 != &v93)
              goto LABEL_96;
            goto LABEL_97;
          }
        }
      }
      ++v63;
      ++v66;
      v67 -= 8;
    }
    while (v67);
    v70 = 0;
    v66 = (uint64_t *)v92;
    if (v92 == &v93)
      goto LABEL_97;
    goto LABEL_96;
  }
  v70 = 0;
  if (v92 != &v93)
LABEL_96:
    free(v66);
LABEL_97:
  if (!v70)
    return 1;
  v103 = (const void **)"invalid tile factor provided. Only full tiles are supported when padding_value is not set";
  v106 = 259;
  mlir::OpState::emitOpError(this, &v103, (uint64_t)&v92);
  v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v92);
  if (v92)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v92);
  if (v102)
  {
    v71 = (_QWORD **)__p;
    if (__p)
    {
      v72 = v101;
      v73 = __p;
      if (v101 != __p)
      {
        do
          v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
        while (v72 != v71);
        v73 = __p;
      }
      v101 = v71;
      operator delete(v73);
    }
    v57 = v98;
    if (!v98)
      goto LABEL_117;
    v74 = v99;
    v59 = v98;
    if (v99 == v98)
      goto LABEL_116;
    do
    {
      v76 = (void *)*--v74;
      v75 = v76;
      *v74 = 0;
      if (v76)
        operator delete[](v75);
    }
    while (v74 != v57);
    goto LABEL_115;
  }
  return v53;
}

