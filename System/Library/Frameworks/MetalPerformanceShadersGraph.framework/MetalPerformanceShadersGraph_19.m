uint64_t mlir::Dialect::addInterfaces<mlir::mps::MPSInlinerInterface,mlir::mps::MPSBytecodeDialectInterface>(mlir::Dialect *a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  mlir::mps::MPSBytecodeDialectInterface *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  unint64_t v22;

  v2 = operator new(0x18uLL);
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v18 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v10 = v9;
    v2 = v18;
    if (v10)
    {
      v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      v22 = 79;
      v11 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v11)
        v12 = v11;
      else
        v12 = v22;
      v13 = &v21[v12];
      v14 = v22 - v12;
      if (v22 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v22 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v18;
    }
  }
  v2[2] = v4[157];
  *v2 = &unk_1E0E4B918;
  v2[1] = a1;
  v20 = v2;
  mlir::Dialect::addInterface((uint64_t)a1, (uint64_t *)&v20);
  v5 = (mlir::mps::MPSBytecodeDialectInterface *)operator new(0x30uLL);
  mlir::mps::MPSBytecodeDialectInterface::MPSBytecodeDialectInterface(v5, a1);
  v19 = v6;
  mlir::Dialect::addInterface((uint64_t)a1, &v19);
  v7 = v19;
  v19 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::Dialect::addInterface<mlir::mps::MPSOpAsmInterface,mlir::mps::MPSResourceBlobManagerInterface &>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  unint64_t v20;

  v4 = operator new(0x20uLL);
  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v10)
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      v20 = 77;
      v11 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v11)
        v12 = v11;
      else
        v12 = v20;
      v13 = &v19[v12];
      v14 = v20 - v12;
      if (v20 - v12 >= 0x12)
        v15 = 18;
      else
        v15 = v20 - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v7 = v6[154];
  *v4 = &unk_1E0E4B8A8;
  v4[1] = a1;
  v4[2] = v7;
  v4[3] = a2;
  v18 = v4;
  mlir::Dialect::addInterface(a1, (uint64_t *)&v18);
  v8 = (uint64_t)v18;
  v18 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v4;
}

mlir::GenericProgramPoint *mlir::mps::MPSDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a4;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8))
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8);
    v10 = a3;
    v11 = v8;
    if (a3)
      return mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v12, &v10);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  return 0;
}

uint64_t mlir::mps::createBlobHandle@<X0>(mlir::mps *this@<X0>, mlir::MLIRContext *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  mlir::mps::MPSResourceBlobManagerInterface *Manager;
  uint64_t result;
  __int128 *v9;
  char v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  Manager = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::mps::MPSResourceBlobManagerInterface::getManager(this, a2);
  mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(Manager, (uint64_t)a2, a3, (uint64_t)&v22);
  v15 = v22;
  v16 = v23;
  v19 = v26;
  if (v26 >= 8)
  {
    if ((v26 & 2) != 0 && (v26 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(&v17, &v24);
    }
    else
    {
      v17 = v24;
      v18 = v25;
    }
    v26 = 0;
  }
  v20 = v27;
  v21 = 1;
  result = mlir::mps::MPSResourceBlobManagerInterface::insert((uint64_t)Manager, (int8x16_t *)"tmp", (const unsigned __int8 *)3, (uint64_t)&v15, a4);
  if (v21 && v19 >= 8)
  {
    v9 = (v19 & 2) != 0 ? &v17 : (__int128 *)v17;
    result = (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v19 & 0xFFFFFFFFFFFFFFF8))(v9, v15, *((_QWORD *)&v15 + 1), v16);
    v10 = v19;
    if (v19 >= 8)
    {
      if ((v19 & 4) != 0)
      {
        if ((v19 & 2) != 0)
          v11 = &v17;
        else
          v11 = (__int128 *)v17;
        result = (*(uint64_t (**)(__int128 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
      }
      if ((v10 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v17, *((void **)&v17 + 1));
    }
  }
  if (v26 >= 8)
  {
    v12 = (v26 & 2) != 0 ? &v24 : (__int128 *)v24;
    result = (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v26 & 0xFFFFFFFFFFFFFFF8))(v12, v22, *((_QWORD *)&v22 + 1), v23);
    v13 = v26;
    if (v26 >= 8)
    {
      if ((v26 & 4) != 0)
      {
        if ((v26 & 2) != 0)
          v14 = &v24;
        else
          v14 = (__int128 *)v24;
        result = (*(uint64_t (**)(__int128 *))((v26 & 0xFFFFFFFFFFFFFFF8) + 16))(v14);
      }
      if ((v13 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v24, *((void **)&v24 + 1));
    }
  }
  return result;
}

uint64_t mlir::mps::getBufferTensorAttr(_QWORD *a1)
{
  mlir::mps *Context;
  uint64_t v2;
  uint64_t v3;
  mlir::MLIRContext *ElementsAttrStorageSize;
  uint64_t RHS;
  void *v6;
  BOOL v7;
  uint64_t v8;
  mlir::Type *v9;
  unsigned int v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 **AttributeUniquer;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[2];

  v18 = a1;
  Context = (mlir::mps *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v2 = (uint64_t)v18;
  if (v18)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  else
    v3 = 0;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v18);
  *(_QWORD *)&v19 = RHS;
  v6 = *(void **)(*(_QWORD *)RHS + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    if (v6 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v7 = v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v8 = RHS;
      else
        v8 = 0;
      *(_QWORD *)&v16 = v8;
      if (!v7)
      {
LABEL_10:
        v9 = (mlir::Type *)&v19;
LABEL_19:
        v10 = mlir::Type::getIntOrFloatBitWidth(v9) >> 3;
        goto LABEL_20;
      }
LABEL_18:
      v23[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v16);
      v9 = (mlir::Type *)v23;
      goto LABEL_19;
    }
    if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v19) >= 8)
    {
      v11 = *(void **)(*(_QWORD *)v19 + 136);
      v12 = v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v13 = v19;
      else
        v13 = 0;
      *(_QWORD *)&v16 = v13;
      if (!v12)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  v10 = 1;
LABEL_20:
  mlir::mps::createBlobHandle(Context, ElementsAttrStorageSize, v10, (uint64_t *)&v16);
  v19 = v16;
  v20 = v17;
  v21 = 0;
  v22 = v18;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v23[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v23[1] = Context;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v23, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, (uint64_t *)&v22, &v19, &v21);
}

unint64_t mlir::mps::`anonymous namespace'::getElementsAttrStorageSize(uint64_t a1, uint64_t a2)
{
  uint64_t *ArgAttrsAttr;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ElementsAttrElementBitWidth;
  uint64_t *v10;
  uint64_t v11;
  uint64_t OperandRange;
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(ArgAttrsAttr, v3) + 7) >> 3;
  }
  else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 2))
  {
    v5 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v5, v6) + 3) >> 2;
  }
  else if (*(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id
         || mlir::Type::isInteger((mlir::Type *)&OperandRange, 4))
  {
    v7 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v7, v8) + 1) >> 1;
  }
  else
  {
    v10 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v10, v11) * ElementsAttrElementBitWidth) >> 3;
  }
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **AttributeUniquer;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v6 = *(_OWORD *)a3;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = 0;
  v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, &v6, &v8);
}

uint64_t mlir::mps::getBufferTensorAttr(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v3;
  const void *v5[2];
  uint64_t v6;
  void *v7;
  _QWORD v8[7];

  v8[6] = *MEMORY[0x1E0C80C00];
  v5[1] = a3;
  v6 = a1;
  v5[0] = a2;
  mlir::mps::getBufferTensorAttrs((mlir::Attribute *)&v6, 1uLL, v5, 1, (uint64_t)&v7);
  v3 = *(_QWORD *)v7;
  if (v7 != v8)
    free(v7);
  return v3;
}

void mlir::mps::getBufferTensorAttrs(mlir::Attribute *a1@<X0>, unint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  mlir::Attribute *v8;
  unint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t v11;
  mlir::Attribute *v12;
  uint64_t v13;
  uint64_t RHS;
  void *v15;
  BOOL v16;
  uint64_t v17;
  mlir::Type *p_Value;
  unsigned int v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  mlir::MLIRContext **v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 **AttributeUniquer;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t ElementsAttrStorageSize;
  const void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  mlir::MLIRContext *Context;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t Value;
  _QWORD v59[2];
  void *v60;
  uint64_t v61;
  _BYTE v62[160];
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[12];

  v65[10] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a5 + 8) = 0x600000000;
    return;
  }
  v8 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext(a1);
  v63 = v65;
  v64 = 0xA00000000;
  if (a2 <= 0xA)
  {
    v60 = v62;
    v61 = 0xA00000000;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, a2, 8);
    v60 = v62;
    v61 = 0xA00000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, a2, 16);
  }
  v9 = 0;
  v10 = 0;
  v11 = 8 * a2;
  v12 = v8;
  do
  {
    while (1)
    {
      v57 = *(_QWORD **)v12;
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v57);
      *(_QWORD *)&v55 = RHS;
      v15 = *(void **)(*(_QWORD *)RHS + 136);
      if (v15 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
      {
LABEL_16:
        v19 = 1;
        goto LABEL_24;
      }
      if (v15 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v55) < 8)
          goto LABEL_16;
        v20 = *(void **)(*(_QWORD *)v55 + 136);
        v21 = v20 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
        if (v20 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
          v22 = v55;
        else
          v22 = 0;
        v59[0] = v22;
        if (v21)
        {
LABEL_22:
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v59);
          p_Value = (mlir::Type *)&Value;
          goto LABEL_23;
        }
      }
      else
      {
        v16 = v15 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
        if (v15 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
          v17 = RHS;
        else
          v17 = 0;
        v59[0] = v17;
        if (v16)
          goto LABEL_22;
      }
      p_Value = (mlir::Type *)&v55;
LABEL_23:
      v19 = mlir::Type::getIntOrFloatBitWidth(p_Value) >> 3;
LABEL_24:
      v23 = v19;
      if (v9 <= v19)
        v9 = v19;
      v24 = v64;
      if (v64 >= (unint64_t)HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, v65, v64 + 1, 8);
        v24 = v64;
      }
      v25 = ((unint64_t)v10 + v23 - 1) / v23 * v23;
      v63[v24] = v25;
      LODWORD(v64) = v64 + 1;
      v26 = v61;
      if (v61 >= (unint64_t)HIDWORD(v61))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, v61 + 1, 16);
        v26 = v61;
      }
      v27 = (mlir::MLIRContext **)((char *)v60 + 16 * v26);
      *v27 = v10;
      v27[1] = (mlir::MLIRContext *)v25;
      LODWORD(v61) = v61 + 1;
      v28 = (uint64_t)v57;
      if (!v57)
        break;
      v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v57 + 8);
      v12 = (mlir::Attribute *)((char *)v12 + 8);
      v11 -= 8;
      if (!v11)
        goto LABEL_32;
    }
    v12 = (mlir::Attribute *)((char *)v12 + 8);
    v11 -= 8;
  }
  while (v11);
LABEL_32:
  mlir::mps::createBlobHandle(Context, v10, v9, (uint64_t *)&v55);
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x600000000;
  if (a2 >= 7)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), a2, 8);
  if (a4 && (_DWORD)v64)
  {
    v29 = (_QWORD **)v63;
    v30 = 8 * v64 - 8;
    v31 = 16 * a4 - 16;
    v32 = 8 * a2 - 8;
    do
    {
      v33 = *(_QWORD *)v8;
      v53 = v55;
      v54 = v56;
      v57 = *v29;
      Value = v33;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      v59[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
      v59[1] = Context;
      v35 = mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v59, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &Value, &v53, (uint64_t *)&v57);
      v36 = *(unsigned int *)(a5 + 8);
      if (v36 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v36 + 1, 8);
        v36 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v36) = v35;
      v37 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v37;
      v38 = *(_QWORD **)(*(_QWORD *)a5 + 8 * v37 - 8);
      v39 = (_QWORD *)v38[1];
      v40 = *(_QWORD *)(v38[2] + 16);
      v41 = v38[5];
      if (v39)
        v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      else
        v42 = 0;
      v44 = *a3;
      a3 += 2;
      memcpy((void *)(v40 + v41), v44, ElementsAttrStorageSize);
      if (!v32)
        break;
      if (!v31)
        break;
      v8 = (mlir::Attribute *)((char *)v8 + 8);
      ++v29;
      v45 = v30;
      v30 -= 8;
      v31 -= 16;
      v32 -= 8;
    }
    while (v45);
  }
  v46 = (char *)v60;
  if ((_DWORD)v61)
  {
    v47 = v55;
    v48 = (char *)v60 + 16 * v61;
    do
    {
      v49 = *(_QWORD *)v46;
      v50 = *((_QWORD *)v46 + 1);
      v46 += 16;
      memset((void *)(*(_QWORD *)(v47 + 16) + v49), 255, v50 - v49);
    }
    while (v46 != v48);
    v46 = (char *)v60;
  }
  if (v46 != v62)
    free(v46);
  if (v63 != v65)
    free(v63);
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unsigned __int8 **AttributeUniquer;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v8 = a4;
  v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, a3, &v8);
}

uint64_t mlir::mps::MPSBufferTensorAttr::getMutableRawData(mlir::mps::MPSBufferTensorAttr *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(*(_QWORD *)this + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 16);
  v3 = *(_QWORD *)(*(_QWORD *)this + 40);
  if (v1)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  else
    v4 = 0;
  return v2 + v3;
}

llvm::raw_ostream *mlir::mps::operator<<(llvm::raw_ostream *a1, unsigned int *a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  unint64_t v7;
  llvm::raw_ostream *v8;

  v3 = llvm::raw_ostream::operator<<(a1, a2[2]);
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v4)
  {
    v8 = llvm::raw_ostream::write(v3, ".", 1uLL);
    v5 = llvm::raw_ostream::operator<<(v8, a2[3]);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (*((_BYTE **)v5 + 3) != v6)
      goto LABEL_3;
LABEL_6:
    v5 = llvm::raw_ostream::write(v5, ".", 1uLL);
    v7 = a2[4];
    return llvm::raw_ostream::operator<<(v5, v7);
  }
  *v4 = 46;
  ++*((_QWORD *)v3 + 4);
  v5 = llvm::raw_ostream::operator<<(v3, a2[3]);
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v6)
    goto LABEL_6;
LABEL_3:
  *v6 = 46;
  ++*((_QWORD *)v5 + 4);
  v7 = a2[4];
  return llvm::raw_ostream::operator<<(v5, v7);
}

void mlir::mps::MPSDialect::convertUnregisteredOperation(mlir::OpBuilder *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  const void *AttrData;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  int v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::ArrayAttr *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  mlir::MLIRContext *Value;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD v35[4];
  __int16 v36;
  uint64_t v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v37[0] = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v37);
  v10 = v9;
  if (v9 >= 0x17)
    v11 = 23;
  else
    v11 = v9;
  if (v11)
  {
    if (memcmp(AttrData, "mps.reverse_square_root", v11) || v10 != 23)
      goto LABEL_9;
  }
  else if (v9 != 23)
  {
LABEL_9:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v13 = *(_DWORD *)(a2 + 8);
  if (v13 && (v13 != 1 || *(_DWORD *)(a2 + 12) >= 2u))
  {
    v35[0] = "incorrect version of the operation";
    v36 = 259;
    mlir::Operation::emitError((uint64_t *)a3, (uint64_t)v35, (uint64_t)v37);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v43;
        v19 = __p;
        if (v43 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v43 = v17;
        operator delete(v19);
      }
      v20 = v40;
      if (!v40)
        goto LABEL_48;
      v21 = v41;
      v22 = v40;
      if (v41 == v40)
        goto LABEL_47;
      do
      {
        v24 = (void *)*--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          operator delete[](v23);
      }
      while (v21 != v20);
      goto LABEL_46;
    }
  }
  else
  {
    if ((*(_BYTE *)(a3 + 46) & 0x80) != 0 && *(_DWORD *)(a3 + 68) == 1)
    {
      v14 = *(_QWORD *)(a3 + 24);
      v37[0] = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 24);
      v15 = mlir::OpBuilder::create<mlir::mps::ReciprocalSquareRootOp,mlir::Value>(a1, v14, v37);
      if (*(_BYTE *)(a3 + 47))
      {
        v37[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
        v16 = (mlir::ArrayAttr *)v37;
      }
      else
      {
        v16 = (mlir::ArrayAttr *)(a3 + 56);
      }
      Value = (mlir::MLIRContext *)mlir::ArrayAttr::getValue(v16);
      mlir::Operation::setAttrs((uint64_t)v15, Value, v32);
      v33 = *((unsigned int *)v15 + 9);
      v34 = (char *)v15 - 16;
      if (!(_DWORD)v33)
        v34 = 0;
      *(_QWORD *)a4 = v34;
      *(_QWORD *)(a4 + 8) = v33;
      *(_BYTE *)(a4 + 16) = 1;
      return;
    }
    v35[0] = "incorrect number of operands";
    v36 = 259;
    mlir::Operation::emitError((uint64_t *)a3, (uint64_t)v35, (uint64_t)v37);
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v25 = (_QWORD **)__p;
      if (__p)
      {
        v26 = v43;
        v27 = __p;
        if (v43 != __p)
        {
          do
            v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          v27 = __p;
        }
        v43 = v25;
        operator delete(v27);
      }
      v20 = v40;
      if (!v40)
        goto LABEL_48;
      v28 = v41;
      v22 = v40;
      if (v41 == v40)
      {
LABEL_47:
        v41 = v20;
        operator delete(v22);
LABEL_48:
        if (v38 != &v39)
          free(v38);
        return;
      }
      do
      {
        v30 = (void *)*--v28;
        v29 = v30;
        *v28 = 0;
        if (v30)
          operator delete[](v29);
      }
      while (v28 != v20);
LABEL_46:
      v22 = v40;
      goto LABEL_47;
    }
  }
}

uint64_t mlir::mps::`anonymous namespace'::inferElementWiseUnaryComparisonOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t IntegerType;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v11;
  _BYTE v13[24];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v16[0] = a2;
  v16[1] = a3;
  v15 = a1;
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v15, 1u);
  v7 = mlir::UnrankedTensorType::get(IntegerType);
  if (a3 == 1)
  {
    v8 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v9 = *(void **)(*(_QWORD *)v8 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v9 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v8 = 0;
    }
    v14 = v8;
    if (v8)
    {
      v13[0] = 0;
      v13[16] = 0;
      v7 = mlir::TensorType::cloneWith((uint64_t)&v14, (uint64_t)v13, IntegerType);
    }
  }
  v11 = *(unsigned int *)(a4 + 8);
  if (v11 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v7;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::inferElementWiseBinaryMathOpReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t BroadcastedType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ElementTypeOrSelf;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20[2];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a2;
  v21[1] = a3;
  if (a3 != 2)
  {
LABEL_14:
    v13 = mlir::Float32Type::get(this, a2);
    v14 = mlir::UnrankedTensorType::get(v13);
    v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12))
    {
LABEL_15:
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = v14;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
LABEL_18:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a4 + 8);
    goto LABEL_15;
  }
  v6 = mlir::ValueRange::dereference_iterator(v21, 0);
  v7 = mlir::ValueRange::dereference_iterator(v21, 1);
  v8 = (_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  if (v9)
    v9 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  else
    v8 = 0;
  v20[0] = v8;
  v20[1] = v9;
  v10 = (_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
    v18 = v10;
    v19 = v11;
    if (!v8)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    v18 = 0;
    v19 = 0;
    if (!v8)
      goto LABEL_14;
  }
  if (!v10)
    goto LABEL_14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v20)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18) & 1) == 0)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v20[0]);
    v14 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12))
      goto LABEL_15;
    goto LABEL_18;
  }
  BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v20[0], v18, 0);
  if (BroadcastedType)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a4, BroadcastedType);
    return 1;
  }
}

uint64_t mlir::mps::`anonymous namespace'::inferElementWiseBinaryComparisonOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t BroadcastedType;
  uint64_t v9;
  uint64_t Context;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v24[0] = a3;
  v24[1] = a4;
  if (a4 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  v22 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v24, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v22, v21, 0);
  v20 = BroadcastedType;
  if (!BroadcastedType)
    return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v22, " and ", (uint64_t *)&v21, " are not broadcast compatible");
  v9 = BroadcastedType;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v11 = mlir::IntegerType::get(Context, 1u, 0);
  v12 = v11;
  v13 = *(void **)(*(_QWORD *)v9 + 136);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v16 = mlir::UnrankedTensorType::get(v11);
    if (!v16)
      return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
  }
  else
  {
    if (v13 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
    v23 = v9;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
    v16 = mlir::RankedTensorType::get(Value, v15, v12, 0);
    if (!v16)
      return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
  }
  v18 = *(unsigned int *)(a5 + 8);
  if (v18 >= *(_DWORD *)(a5 + 12))
  {
    v19 = v16;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v18 + 1, 8);
    v16 = v19;
    LODWORD(v18) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v18) = v16;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

void mlir::mps::UnrealizedFoldOp::downgradeToVersion(uint64_t **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  const void **v20;
  __int16 v21;
  _QWORD v22[2];
  int v23;
  _QWORD v24[3];
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *__p;
  _QWORD **v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v22[0] = &unk_1E0E4B858;
  v22[1] = 0x100000001;
  v23 = 0;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 && (v5 != 1 || *(_DWORD *)(a2 + 12)))
  {
    v6 = *((unsigned int *)v4 + 9);
    v7 = v4 - 2;
    if (!(_DWORD)v6)
      v7 = 0;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v16[0] = "failed to downgrade: requested target version is {0}, but the op was first defined in version {1}";
    v16[1] = 97;
    v16[2] = v19;
    v16[3] = 2;
    v17[0] = &unk_1E0E23F50;
    v17[1] = a2;
    v18[0] = &unk_1E0E23FE0;
    v18[1] = v22;
    v19[0] = v17;
    v19[1] = v18;
    v21 = 263;
    v20 = (const void **)v16;
    mlir::OpState::emitOpError(a1, &v20, (uint64_t)v24);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    if (v31)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v30;
        v10 = __p;
        if (v30 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v30 = v8;
        operator delete(v10);
      }
      v11 = v27;
      if (v27)
      {
        v12 = v28;
        v13 = v27;
        if (v28 != v27)
        {
          do
          {
            v15 = (void *)*--v12;
            v14 = v15;
            *v12 = 0;
            if (v15)
              operator delete[](v14);
          }
          while (v12 != v11);
          v13 = v27;
        }
        v28 = v11;
        operator delete(v13);
      }
      if (v25 != &v26)
        free(v25);
    }
  }
}

mlir::GenericProgramPoint *mlir::mps::ReciprocalSquareRootOp::downgradeToVersion@<X0>(mlir::GenericProgramPoint *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  mlir::GenericProgramPoint *v6;
  int v7;
  uint64_t v8;
  mlir::StringAttr *Context;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t v16;
  uint64_t v17;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  unint64_t v30[2];
  unint64_t v31[2];
  unint64_t v32[2];
  unint64_t AttrDictionary;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(mlir::GenericProgramPoint **)result;
  v7 = *(_DWORD *)(a3 + 8);
  if (!v7 || v7 == 1 && *(_DWORD *)(a3 + 12) <= 1u)
  {
    v8 = *((_QWORD *)v6 + 3);
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v6 + 24));
    v29 = 261;
    v28[0] = "mps.reverse_square_root";
    v28[1] = 23;
    v10 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
    if ((*((_BYTE *)v6 + 46) & 0x80) != 0)
    {
      v11 = *((_QWORD *)v6 + 9);
      v12 = *((unsigned int *)v6 + 17);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    mlir::ValueRange::ValueRange(v32, v11, v12);
    v13 = *((unsigned int *)v6 + 9);
    v14 = (unint64_t)v6 - 16;
    if (!(_DWORD)v13)
      v14 = 0;
    AttrDictionary = v14;
    v34 = v13;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v25);
    NextResultAtOffset = v25;
    v16 = v26;
    v17 = v27;
    if (v26)
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, v26);
    mlir::ValueRange::ValueRange(&AttrDictionary, NextResultAtOffset, v17 - v16);
    mlir::TypeRange::TypeRange(v31, AttrDictionary, v34);
    if (*((_BYTE *)v6 + 47))
    {
      AttrDictionary = mlir::Operation::getAttrDictionary(v6);
      p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_AttrDictionary = (mlir::GenericProgramPoint *)((char *)v6 + 56);
    }
    Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
    v21 = v20;
    mlir::SuccessorRange::SuccessorRange(&AttrDictionary, v6);
    mlir::BlockRange::BlockRange(v30, AttrDictionary, v34);
    result = mlir::OpBuilder::create(a2, v8, v10, v32[0], v32[1], v31[0], v31[1], v22, Value, v21, v30[0], v30[1], 0, 0);
    v6 = result;
  }
  v23 = *((unsigned int *)v6 + 9);
  v24 = (char *)v6 - 16;
  if (!(_DWORD)v23)
    v24 = 0;
  *(_QWORD *)a4 = v24;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t mlir::mps::`anonymous namespace'::inferElementWiseTernaryMathOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  _QWORD *BroadcastedType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = a3;
  v17[1] = a4;
  if (a4 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  v16 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = v8;
  BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(v16, v15, 0);
  if (!BroadcastedType)
    return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " and ", (uint64_t *)&v15, " are not broadcast compatible");
  v10 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v8, 0);
  if (!v10)
    return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " , ", (uint64_t *)&v15, " and ", (uint64_t *)&v14, " are not broadcast compatible");
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    v13 = v10;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    v10 = v13;
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

uint64_t mlir::mps::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v13;
  uint64_t ElementTypeOrSelf;
  _QWORD *BroadcastedType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v23[0] = a4;
  v23[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v22 = v13;
  v21 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v23, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v23, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v21);
  BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(v21, v20, ElementTypeOrSelf);
  if (!BroadcastedType)
    return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a2, a3, "input types ", (uint64_t *)&v22, ", ", (uint64_t *)&v21, ", and ", (uint64_t *)&v20, " are not broadcast compatible");
  v16 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v13, ElementTypeOrSelf);
  if (!v16)
    return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a2, a3, "input types ", (uint64_t *)&v22, ", ", (uint64_t *)&v21, ", and ", (uint64_t *)&v20, " are not broadcast compatible");
  v17 = v16;
  v18 = *(unsigned int *)(a11 + 8);
  if (v18 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v18) = v17;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, const char *a9)
{
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v25);
  if (v25)
    mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>((uint64_t)&v26, a3, a4, a5, a6, a7, a8, a9);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  if (v33)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v32;
      v18 = __p;
      if (v32 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v32 = v16;
      operator delete(v18);
    }
    v19 = v29;
    if (v29)
    {
      v20 = v30;
      v21 = v29;
      if (v30 != v29)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v29;
      }
      v30 = v19;
      operator delete(v21);
    }
    if (v27 != &v28)
      free(v27);
  }
  return v15;
}

uint64_t mlir::mps::SelectOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t ElementTypeOrSelf;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  int *v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  const void **v72[4];
  __int16 v73;
  uint64_t v74;
  int v75;
  const char *v76;
  uint64_t v77;
  _QWORD v78[3];
  void *v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE v82[96];
  void *v83;
  _QWORD *v84;
  void *__p;
  _QWORD **v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  v5 = *(_QWORD *)(v2[11] + 8);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v4);
  v74 = mlir::getElementTypeOrSelf(v3);
  if (v74 == ElementTypeOrSelf || mlir::Type::isInteger((mlir::Type *)&v74, 1))
  {
    v7 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (mlir::OpTrait::util::getBroadcastedType(v3, v4, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v3, v7, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v4, v7, ElementTypeOrSelf))
    {
      return 1;
    }
    v72[0] = (const void **)"input types ";
    v73 = 259;
    mlir::OpState::emitOpError(this, v72, (uint64_t)v78);
    if (v78[0])
    {
      v9 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      v10 = (char *)v79;
      if (v80 >= v81)
      {
        v55 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          v65 = (char *)&v75 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          v10 = (char *)v79;
          v9 = (int *)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          v9 = &v75;
          v10 = (char *)v79;
        }
      }
      v11 = &v10[24 * v80];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v80;
      if (v78[0])
      {
        v75 = 3;
        v76 = ", ";
        v77 = 2;
        v14 = &v75;
        v15 = (char *)v79;
        if (v13 >= v81)
        {
          v56 = v13 + 1;
          v57 = (char *)v79 + 24 * v13 > (char *)&v75;
          if (v79 <= &v75 && v57)
          {
            v66 = (char *)&v75 - (_BYTE *)v79;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            v15 = (char *)v79;
            v14 = (int *)((char *)v79 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            v14 = &v75;
            v15 = (char *)v79;
          }
        }
        v16 = &v15[24 * v80];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v80;
        if (v78[0])
        {
          v18 = &v75;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v4);
          v19 = (char *)v79;
          if (v80 >= v81)
          {
            v59 = v80 + 1;
            if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
            {
              v68 = (char *)&v75 - (_BYTE *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              v19 = (char *)v79;
              v18 = (int *)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              v18 = &v75;
              v19 = (char *)v79;
            }
          }
          v20 = &v19[24 * v80];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v20 = v21;
          v22 = ++v80;
          if (v78[0])
          {
            v75 = 3;
            v76 = ", and ";
            v77 = 6;
            v23 = &v75;
            v24 = (char *)v79;
            if (v22 >= v81)
            {
              v60 = v22 + 1;
              v61 = (char *)v79 + 24 * v22 > (char *)&v75;
              if (v79 <= &v75 && v61)
              {
                v69 = (char *)&v75 - (_BYTE *)v79;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                v24 = (char *)v79;
                v23 = (int *)((char *)v79 + v69);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                v23 = &v75;
                v24 = (char *)v79;
              }
            }
            v25 = &v24[24 * v80];
            v26 = *(_OWORD *)v23;
            *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v25 = v26;
            ++v80;
            if (v78[0])
            {
              v27 = &v75;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v7);
              v28 = (char *)v79;
              if (v80 >= v81)
              {
                v62 = v80 + 1;
                if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
                {
                  v70 = (char *)&v75 - (_BYTE *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  v28 = (char *)v79;
                  v27 = (int *)((char *)v79 + v70);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  v27 = &v75;
                  v28 = (char *)v79;
                }
              }
              v29 = &v28[24 * v80];
              v30 = *(_OWORD *)v27;
              *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
              *(_OWORD *)v29 = v30;
              v31 = ++v80;
              if (v78[0])
              {
                v75 = 3;
                v76 = " are not broadcast compatible";
                v77 = 29;
                v32 = &v75;
                v33 = (char *)v79;
                if (v31 >= v81)
                {
                  v63 = v31 + 1;
                  v64 = (char *)v79 + 24 * v31 > (char *)&v75;
                  if (v79 <= &v75 && v64)
                  {
                    v71 = (char *)&v75 - (_BYTE *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    v33 = (char *)v79;
                    v32 = (int *)((char *)v79 + v71);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    v32 = &v75;
                    v33 = (char *)v79;
                  }
                }
                v34 = &v33[24 * v80];
                v35 = *(_OWORD *)v32;
                *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
                *(_OWORD *)v34 = v35;
                ++v80;
              }
            }
          }
        }
      }
    }
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    if (v87)
    {
      v36 = (_QWORD **)__p;
      if (__p)
      {
        v37 = v86;
        v38 = __p;
        if (v86 != __p)
        {
          do
            v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          v38 = __p;
        }
        v86 = v36;
        operator delete(v38);
      }
      v39 = v83;
      if (!v83)
        goto LABEL_53;
      v40 = v84;
      v41 = v83;
      if (v84 == v83)
      {
LABEL_52:
        v84 = v39;
        operator delete(v41);
LABEL_53:
        if (v79 != v82)
          free(v79);
        return v8;
      }
      do
      {
        v43 = (void *)*--v40;
        v42 = v43;
        *v40 = 0;
        if (v43)
          operator delete[](v42);
      }
      while (v40 != v39);
LABEL_51:
      v41 = v83;
      goto LABEL_52;
    }
  }
  else
  {
    v72[0] = (const void **)"condition operand must be a 1-bit integer tensor or match the value element type, but got ";
    v73 = 259;
    mlir::OpState::emitOpError(this, v72, (uint64_t)v78);
    if (v78[0])
    {
      v44 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      v45 = (char *)v79;
      if (v80 >= v81)
      {
        v58 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          v67 = (char *)&v75 - (_BYTE *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          v45 = (char *)v79;
          v44 = (int *)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          v44 = &v75;
          v45 = (char *)v79;
        }
      }
      v46 = &v45[24 * v80];
      v47 = *(_OWORD *)v44;
      *((_QWORD *)v46 + 2) = *((_QWORD *)v44 + 2);
      *(_OWORD *)v46 = v47;
      ++v80;
    }
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    if (v87)
    {
      v48 = (_QWORD **)__p;
      if (__p)
      {
        v49 = v86;
        v50 = __p;
        if (v86 != __p)
        {
          do
            v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          v50 = __p;
        }
        v86 = v48;
        operator delete(v50);
      }
      v39 = v83;
      if (!v83)
        goto LABEL_53;
      v51 = v84;
      v41 = v83;
      if (v84 == v83)
        goto LABEL_52;
      do
      {
        v53 = (void *)*--v51;
        v52 = v53;
        *v51 = 0;
        if (v53)
          operator delete[](v52);
      }
      while (v51 != v39);
      goto LABEL_51;
    }
  }
  return v8;
}

uint64_t mlir::mps::`anonymous namespace'::verifyTensorBufferAttr(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t RHS;
  void *v12;
  BOOL v13;
  uint64_t v14;
  mlir::Type *p_Value;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  _QWORD *v40;
  const char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  void *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD **v90;
  _QWORD **v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  void *v95;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  BOOL v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  _QWORD *v123;
  uint64_t Value;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  _QWORD v128[3];
  void *v129;
  unsigned int v130;
  unsigned int v131;
  _BYTE v132[96];
  void *v133;
  _QWORD *v134;
  void *__p;
  _QWORD **v136;
  char v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v123 = a3;
  if (!*(_BYTE *)(a4 + 96))
  {
    if ((a6 & 1) == 0)
    {
      a1(v128, a2);
      if (v128[0])
      {
        LODWORD(v125) = 3;
        v126 = "MPSBufferTensor blob entry is undefined";
        v127 = 39;
        v16 = (char *)&v125;
        v17 = (char *)v129;
        if (v130 >= v131)
        {
          v99 = v130 + 1;
          if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
          {
            v115 = (char *)&v125 - (_BYTE *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v99, 24);
            v17 = (char *)v129;
            v16 = (char *)v129 + v115;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v99, 24);
            v16 = (char *)&v125;
            v17 = (char *)v129;
          }
        }
        v18 = &v17[24 * v130];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v18 = v19;
        ++v130;
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
      if (v128[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
      if (v137)
      {
        v21 = (_QWORD **)__p;
        if (__p)
        {
          v22 = v136;
          v23 = __p;
          if (v136 != __p)
          {
            do
              v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            v23 = __p;
          }
          v136 = v21;
          operator delete(v23);
        }
        v24 = v133;
        if (!v133)
          goto LABEL_106;
        v25 = v134;
        v26 = v133;
        if (v134 == v133)
          goto LABEL_105;
        do
        {
          v28 = (void *)*--v25;
          v27 = v28;
          *v25 = 0;
          if (v28)
            operator delete[](v27);
        }
        while (v25 != v24);
        goto LABEL_104;
      }
      return v20;
    }
    return 1;
  }
  if (!*(_BYTE *)(a4 + 80))
  {
    a1(v128, a2);
    if (v128[0])
    {
      LODWORD(v125) = 3;
      v126 = "MPSBufferTensor blob entry memory was released while still in use";
      v127 = 65;
      v29 = (char *)&v125;
      v30 = (char *)v129;
      if (v130 >= v131)
      {
        v97 = v130 + 1;
        if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
        {
          v113 = (char *)&v125 - (_BYTE *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v97, 24);
          v30 = (char *)v129;
          v29 = (char *)v129 + v113;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v97, 24);
          v29 = (char *)&v125;
          v30 = (char *)v129;
        }
      }
      v31 = &v30[24 * v130];
      v32 = *(_OWORD *)v29;
      *((_QWORD *)v31 + 2) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v31 = v32;
      ++v130;
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
    if (v128[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
    if (v137)
    {
      v33 = (_QWORD **)__p;
      if (__p)
      {
        v34 = v136;
        v35 = __p;
        if (v136 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v136 = v33;
        operator delete(v35);
      }
      v24 = v133;
      if (!v133)
        goto LABEL_106;
      v36 = v134;
      v26 = v133;
      if (v134 == v133)
        goto LABEL_105;
      do
      {
        v38 = (void *)*--v36;
        v37 = v38;
        *v36 = 0;
        if (v38)
          operator delete[](v37);
      }
      while (v36 != v24);
      goto LABEL_104;
    }
    return v20;
  }
  v10 = *(_QWORD *)(a4 + 16);
  v9 = *(const char **)(a4 + 24);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v123);
  v128[0] = RHS;
  v12 = *(void **)(*(_QWORD *)RHS + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
    goto LABEL_46;
  if (v12 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v128) >= 8)
    {
      v62 = *(void **)(*(_QWORD *)v128[0] + 136);
      v63 = v62 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v62 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v64 = v128[0];
      else
        v64 = 0;
      v125 = v64;
      if (!v63)
        goto LABEL_9;
      goto LABEL_76;
    }
LABEL_46:
    v39 = 1;
    v40 = v123;
    if (v123)
      goto LABEL_78;
LABEL_47:
    if (v41 > v9)
      goto LABEL_79;
    goto LABEL_48;
  }
  v13 = v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v14 = RHS;
  else
    v14 = 0;
  v125 = v14;
  if (!v13)
  {
LABEL_9:
    p_Value = (mlir::Type *)v128;
    goto LABEL_77;
  }
LABEL_76:
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v125);
  p_Value = (mlir::Type *)&Value;
LABEL_77:
  v39 = mlir::Type::getIntOrFloatBitWidth(p_Value) >> 3;
  v40 = v123;
  if (!v123)
    goto LABEL_47;
LABEL_78:
  v65 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v40 + 8);
  if (v41 > v9)
  {
LABEL_79:
    a1(v128, a2);
    if (v128[0])
    {
      LODWORD(v125) = 3;
      v126 = "MPSBufferTensor blob is of size ";
      v127 = 32;
      v66 = (char *)&v125;
      v67 = (char *)v129;
      if (v130 >= v131)
      {
        v98 = v130 + 1;
        if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
        {
          v114 = (char *)&v125 - (_BYTE *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v98, 24);
          v67 = (char *)v129;
          v66 = (char *)v129 + v114;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v98, 24);
          v66 = (char *)&v125;
          v67 = (char *)v129;
        }
      }
      v68 = &v67[24 * v130];
      v69 = *(_OWORD *)v66;
      *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
      *(_OWORD *)v68 = v69;
      v70 = ++v130;
      if (v128[0])
      {
        LODWORD(v125) = 5;
        v126 = v9;
        v71 = (char *)&v125;
        v72 = (char *)v129;
        if (v70 >= v131)
        {
          v101 = v70 + 1;
          v102 = (char *)v129 + 24 * v70 > (char *)&v125;
          if (v129 <= &v125 && v102)
          {
            v117 = (char *)&v125 - (_BYTE *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v101, 24);
            v72 = (char *)v129;
            v71 = (char *)v129 + v117;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v101, 24);
            v71 = (char *)&v125;
            v72 = (char *)v129;
          }
        }
        v73 = &v72[24 * v130];
        v74 = *(_OWORD *)v71;
        *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
        *(_OWORD *)v73 = v74;
        v75 = ++v130;
        if (v128[0])
        {
          LODWORD(v125) = 3;
          v126 = " bytes, expected it to be at least ";
          v127 = 35;
          v76 = (char *)&v125;
          v77 = (char *)v129;
          if (v75 >= v131)
          {
            v105 = v75 + 1;
            v106 = (char *)v129 + 24 * v75 > (char *)&v125;
            if (v129 <= &v125 && v106)
            {
              v119 = (char *)&v125 - (_BYTE *)v129;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v105, 24);
              v77 = (char *)v129;
              v76 = (char *)v129 + v119;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v105, 24);
              v76 = (char *)&v125;
              v77 = (char *)v129;
            }
          }
          v78 = &v77[24 * v130];
          v79 = *(_OWORD *)v76;
          *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
          *(_OWORD *)v78 = v79;
          v80 = ++v130;
          if (v128[0])
          {
            LODWORD(v125) = 5;
            v126 = v41;
            v81 = (char *)&v125;
            v82 = (char *)v129;
            if (v80 >= v131)
            {
              v109 = v80 + 1;
              v110 = (char *)v129 + 24 * v80 > (char *)&v125;
              if (v129 <= &v125 && v110)
              {
                v121 = (char *)&v125 - (_BYTE *)v129;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v109, 24);
                v82 = (char *)v129;
                v81 = (char *)v129 + v121;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v109, 24);
                v81 = (char *)&v125;
                v82 = (char *)v129;
              }
            }
            v83 = &v82[24 * v130];
            v84 = *(_OWORD *)v81;
            *((_QWORD *)v83 + 2) = *((_QWORD *)v81 + 2);
            *(_OWORD *)v83 = v84;
            v85 = ++v130;
            if (v128[0])
            {
              LODWORD(v125) = 3;
              v126 = " bytes";
              v127 = 6;
              v86 = (char *)&v125;
              v87 = (char *)v129;
              if (v85 >= v131)
              {
                v111 = v85 + 1;
                v112 = (char *)v129 + 24 * v85 > (char *)&v125;
                if (v129 <= &v125 && v112)
                {
                  v122 = (char *)&v125 - (_BYTE *)v129;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v111, 24);
                  v87 = (char *)v129;
                  v86 = (char *)v129 + v122;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v111, 24);
                  v86 = (char *)&v125;
                  v87 = (char *)v129;
                }
              }
              v88 = &v87[24 * v130];
              v89 = *(_OWORD *)v86;
              *((_QWORD *)v88 + 2) = *((_QWORD *)v86 + 2);
              *(_OWORD *)v88 = v89;
              ++v130;
            }
          }
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
    if (v128[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
    if (v137)
    {
      v90 = (_QWORD **)__p;
      if (__p)
      {
        v91 = v136;
        v92 = __p;
        if (v136 != __p)
        {
          do
            v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
          while (v91 != v90);
          v92 = __p;
        }
        v136 = v90;
        operator delete(v92);
      }
      v24 = v133;
      if (!v133)
        goto LABEL_106;
      v93 = v134;
      v26 = v133;
      if (v134 == v133)
      {
LABEL_105:
        v134 = v24;
        operator delete(v26);
LABEL_106:
        if (v129 != v132)
          free(v129);
        return v20;
      }
      do
      {
        v95 = (void *)*--v93;
        v94 = v95;
        *v93 = 0;
        if (v95)
          operator delete[](v94);
      }
      while (v93 != v24);
LABEL_104:
      v26 = v133;
      goto LABEL_105;
    }
    return v20;
  }
LABEL_48:
  if (!((v10 + a5) % (unint64_t)v39))
    return 1;
  a1(v128, a2);
  if (v128[0])
  {
    LODWORD(v125) = 3;
    v126 = "MPSBufferTensor blob is not aligned to ";
    v127 = 39;
    v42 = (char *)&v125;
    v43 = (char *)v129;
    if (v130 >= v131)
    {
      v100 = v130 + 1;
      if (v129 <= &v125 && (char *)v129 + 24 * v130 > (char *)&v125)
      {
        v116 = (char *)&v125 - (_BYTE *)v129;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v100, 24);
        v43 = (char *)v129;
        v42 = (char *)v129 + v116;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v100, 24);
        v42 = (char *)&v125;
        v43 = (char *)v129;
      }
    }
    v44 = &v43[24 * v130];
    v45 = *(_OWORD *)v42;
    *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
    *(_OWORD *)v44 = v45;
    v46 = ++v130;
    if (v128[0])
    {
      LODWORD(v125) = 5;
      v126 = (const char *)v39;
      v47 = (char *)&v125;
      v48 = (char *)v129;
      if (v46 >= v131)
      {
        v103 = v46 + 1;
        v104 = (char *)v129 + 24 * v46 > (char *)&v125;
        if (v129 <= &v125 && v104)
        {
          v118 = (char *)&v125 - (_BYTE *)v129;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v103, 24);
          v48 = (char *)v129;
          v47 = (char *)v129 + v118;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v103, 24);
          v47 = (char *)&v125;
          v48 = (char *)v129;
        }
      }
      v49 = &v48[24 * v130];
      v50 = *(_OWORD *)v47;
      *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
      *(_OWORD *)v49 = v50;
      v51 = ++v130;
      if (v128[0])
      {
        LODWORD(v125) = 3;
        v126 = " bytes";
        v127 = 6;
        v52 = (char *)&v125;
        v53 = (char *)v129;
        if (v51 >= v131)
        {
          v107 = v51 + 1;
          v108 = (char *)v129 + 24 * v51 > (char *)&v125;
          if (v129 <= &v125 && v108)
          {
            v120 = (char *)&v125 - (_BYTE *)v129;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v107, 24);
            v53 = (char *)v129;
            v52 = (char *)v129 + v120;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, v132, v107, 24);
            v52 = (char *)&v125;
            v53 = (char *)v129;
          }
        }
        v54 = &v53[24 * v130];
        v55 = *(_OWORD *)v52;
        *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
        *(_OWORD *)v54 = v55;
        ++v130;
      }
    }
  }
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v128);
  if (v128[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v128);
  if (v137)
  {
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v136;
      v58 = __p;
      if (v136 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v136 = v56;
      operator delete(v58);
    }
    v24 = v133;
    if (!v133)
      goto LABEL_106;
    v59 = v134;
    v26 = v133;
    if (v134 == v133)
      goto LABEL_105;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v24);
    goto LABEL_104;
  }
  return v20;
}

__n128 mlir::mps::MPSBufferTensorAttr::getHandle@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  v2 = *this;
  result = (*this)[1];
  *a2 = result;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  return result;
}

_QWORD *mlir::mps::ConstantOp::getValue(mlir::mps::ConstantOp *this)
{
  mlir::UnitAttr *Context;
  mlir::MLIRContext *v3;
  _QWORD *v4;
  _QWORD *result;

  Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  v4 = *(_QWORD **)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (v4 || (result = (_QWORD *)mlir::UnitAttr::get(Context, v3), (v4 = result) != 0))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    return v4;
  }
  return result;
}

uint64_t mlir::mps::ConstantOp::setValueAttr(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  mlir::mps::MPSResourceBlobManagerInterface *Context;
  mlir::MLIRContext *v10;
  pthread_rwlock_t **v11;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)result;
  v4 = *(unsigned int *)(*(_QWORD *)result + 44);
  if (a2)
  {
    v5 = *(void **)(*a2 + 136);
    v6 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
    v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id ? a2 : 0;
    v13 = v7;
    if (v6)
    {
      v8 = a2[2];
      Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
      v11 = (pthread_rwlock_t **)((char *)mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v10) + 48);
      llvm::sys::RWMutexImpl::lock(v11);
      ++*(_QWORD *)(v8 + 88);
      result = llvm::sys::RWMutexImpl::unlock_shared(v11);
    }
  }
  v12 = (_QWORD *)(v3 + 16 * ((v4 >> 23) & 1) + 64);
  if (!BYTE3(v4))
    v12 = 0;
  *v12 = a2;
  return result;
}

uint64_t mlir::mps::ConstantOp::updateValue(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  mlir::MLIRContext *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  mlir::mps::MPSResourceBlobManagerInterface *Context;
  mlir::MLIRContext *v14;
  pthread_rwlock_t **v15;
  _QWORD *v16;
  _QWORD *v17;

  result = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
  v6 = *(_QWORD **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  if (!v6)
  {
    result = mlir::UnitAttr::get((mlir::UnitAttr *)result, v5);
    v6 = (_QWORD *)result;
  }
  if (v6)
    result = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v6 + 8);
  if (v6 != a2)
  {
    v7 = *a1;
    v8 = *(unsigned int *)(*a1 + 44);
    if (a2)
    {
      v9 = *(void **)(*a2 + 136);
      v10 = v9 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
      v11 = v9 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id ? a2 : 0;
      v17 = v11;
      if (v10)
      {
        v12 = a2[2];
        Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
        v15 = (pthread_rwlock_t **)((char *)mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v14) + 48);
        llvm::sys::RWMutexImpl::lock(v15);
        ++*(_QWORD *)(v12 + 88);
        result = llvm::sys::RWMutexImpl::unlock_shared(v15);
      }
    }
    v16 = (_QWORD *)(v7 + 16 * ((v8 >> 23) & 1) + 64);
    if (!BYTE3(v8))
      v16 = 0;
    *v16 = a2;
  }
  return result;
}

uint64_t mlir::mps::ConstantOp::verify(uint64_t **this)
{
  mlir::UnitAttr *Context;
  mlir::MLIRContext *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *Type;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD *ArgAttrsAttr;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OperandRange;
  const void **v35;
  const void **v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t *p_Value;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  __int128 v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  unint64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  const void **v94[4];
  __int16 v95;
  const void **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t Value;
  const char *v100;
  uint64_t v101;
  _QWORD v102[3];
  void *v103;
  unsigned int v104;
  unsigned int v105;
  _BYTE v106[96];
  void *v107;
  _QWORD *v108;
  void *__p;
  _QWORD **v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*this + 3));
  v4 = (uint64_t *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!v4 && (v4 = (uint64_t *)mlir::UnitAttr::get(Context, v3)) == 0
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8))
  {
    v94[0] = (const void **)"failed: property must contain a valid ElementsAttr";
    v95 = 259;
    mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    if (v111)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v110;
        v14 = __p;
        if (v110 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v110 = v12;
        operator delete(v14);
      }
      v15 = v107;
      if (!v107)
        goto LABEL_107;
      v16 = v108;
      v17 = v107;
      if (v108 == v107)
        goto LABEL_106;
      do
      {
        v19 = (void *)*--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v16 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  v102[0] = v4;
  v102[1] = v5;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v102);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8))
  {
    v92 = 0;
    v93 = 0;
LABEL_29:
    v94[0] = (const void **)"failed: property contained an non shaped-type attribute";
    v95 = 259;
    mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    if (v111)
    {
      v20 = (_QWORD **)__p;
      if (__p)
      {
        v21 = v110;
        v22 = __p;
        if (v110 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v110 = v20;
        operator delete(v22);
      }
      v15 = v107;
      if (!v107)
        goto LABEL_107;
      v23 = v108;
      v17 = v107;
      if (v108 == v107)
        goto LABEL_106;
      do
      {
        v25 = (void *)*--v23;
        v24 = v25;
        *v23 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v23 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v92 = Type;
  v93 = v7;
  if (!Type)
    goto LABEL_29;
  if (*(_UNKNOWN **)(*v4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
  {
    v102[0] = this;
  }
  if (*((_DWORD *)*this + 9))
    v8 = (uint64_t)(*this - 2);
  else
    v8 = 0;
  v9 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    v90 = v9;
    v91 = v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90))
    {
LABEL_53:
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
      v35 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v92);
      v102[0] = OperandRange;
      v94[0] = v35;
      if ((const void **)OperandRange == v35)
        return 1;
      v36 = v35;
      if (mlir::Type::isF16((mlir::Type *)v102) || mlir::Type::isBF16((mlir::Type *)v102))
      {
        if (mlir::Type::isF32((mlir::Type *)v94))
          return 1;
      }
      else if (*(_UNKNOWN **)(*(_QWORD *)v102[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
             && *((_UNKNOWN **)*v36 + 17) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v98 = v102[0];
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v98);
        if (mlir::Type::isF16((mlir::Type *)&Value))
        {
          v96 = v36;
          v97 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v96);
          if (mlir::Type::isF32((mlir::Type *)&v97))
            return 1;
        }
      }
      v94[0] = (const void **)"invalid element type: constant value ";
      v95 = 259;
      mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
      if (v102[0])
      {
        p_Value = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
        v57 = (char *)v103;
        if (v104 >= v105)
        {
          v77 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            v85 = (char *)&Value - (_BYTE *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            v57 = (char *)v103;
            p_Value = (uint64_t *)((char *)v103 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            p_Value = &Value;
            v57 = (char *)v103;
          }
        }
        v58 = &v57[24 * v104];
        v59 = *(_OWORD *)p_Value;
        *((_QWORD *)v58 + 2) = p_Value[2];
        *(_OWORD *)v58 = v59;
        v60 = ++v104;
        if (v102[0])
        {
          LODWORD(Value) = 3;
          v100 = " doesn't match op result ";
          v101 = 25;
          v61 = &Value;
          v62 = (char *)v103;
          if (v60 >= v105)
          {
            v80 = v60 + 1;
            v81 = (char *)v103 + 24 * v60 > (char *)&Value;
            if (v103 <= &Value && v81)
            {
              v87 = (char *)&Value - (_BYTE *)v103;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              v62 = (char *)v103;
              v61 = (uint64_t *)((char *)v103 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              v61 = &Value;
              v62 = (char *)v103;
            }
          }
          v63 = &v62[24 * v104];
          v64 = *(_OWORD *)v61;
          *((_QWORD *)v63 + 2) = v61[2];
          *(_OWORD *)v63 = v64;
          ++v104;
          if (v102[0])
          {
            v65 = &Value;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
            v66 = (char *)v103;
            if (v104 >= v105)
            {
              v83 = v104 + 1;
              if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
              {
                v89 = (char *)&Value - (_BYTE *)v103;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                v66 = (char *)v103;
                v65 = (uint64_t *)((char *)v103 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                v65 = &Value;
                v66 = (char *)v103;
              }
            }
            v67 = &v66[24 * v104];
            v68 = *(_OWORD *)v65;
            *((_QWORD *)v67 + 2) = v65[2];
            *(_OWORD *)v67 = v68;
            ++v104;
          }
        }
      }
      v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
      if (v102[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
      if (v111)
      {
        v69 = (_QWORD **)__p;
        if (__p)
        {
          v70 = v110;
          v71 = __p;
          if (v110 != __p)
          {
            do
              v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            v71 = __p;
          }
          v110 = v69;
          operator delete(v71);
        }
        v15 = v107;
        if (!v107)
          goto LABEL_107;
        v72 = v108;
        v17 = v107;
        if (v108 == v107)
        {
LABEL_106:
          v108 = v15;
          operator delete(v17);
LABEL_107:
          if (v103 != v106)
            free(v103);
          return v11;
        }
        do
        {
          v74 = (void *)*--v72;
          v73 = v74;
          *v72 = 0;
          if (v74)
            operator delete[](v73);
        }
        while (v72 != v15);
LABEL_105:
        v17 = v107;
        goto LABEL_106;
      }
      return v11;
    }
  }
  else
  {
    v90 = 0;
    v91 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90))
      goto LABEL_53;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v92);
  v28 = v27;
  v29 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
  if (v28 == v30)
  {
    if (!v28)
      goto LABEL_53;
    v31 = 8 * v28 - 8;
    while (1)
    {
      v32 = v31;
      if (*ArgAttrsAttr != *v29 && *v29 != 0x8000000000000000)
        break;
      ++ArgAttrsAttr;
      ++v29;
      v31 -= 8;
      if (!v32)
        goto LABEL_53;
    }
  }
  v94[0] = (const void **)"invalid shape: constant value ";
  v95 = 259;
  mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
  if (v102[0])
  {
    v37 = &Value;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
    v38 = (char *)v103;
    if (v104 >= v105)
    {
      v76 = v104 + 1;
      if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
      {
        v84 = (char *)&Value - (_BYTE *)v103;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        v38 = (char *)v103;
        v37 = (uint64_t *)((char *)v103 + v84);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        v37 = &Value;
        v38 = (char *)v103;
      }
    }
    v39 = &v38[24 * v104];
    v40 = *(_OWORD *)v37;
    *((_QWORD *)v39 + 2) = v37[2];
    *(_OWORD *)v39 = v40;
    v41 = ++v104;
    if (v102[0])
    {
      LODWORD(Value) = 3;
      v100 = " is not compatible with op result ";
      v101 = 34;
      v42 = &Value;
      v43 = (char *)v103;
      if (v41 >= v105)
      {
        v78 = v41 + 1;
        v79 = (char *)v103 + 24 * v41 > (char *)&Value;
        if (v103 <= &Value && v79)
        {
          v86 = (char *)&Value - (_BYTE *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          v43 = (char *)v103;
          v42 = (uint64_t *)((char *)v103 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          v42 = &Value;
          v43 = (char *)v103;
        }
      }
      v44 = &v43[24 * v104];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = v42[2];
      *(_OWORD *)v44 = v45;
      ++v104;
      if (v102[0])
      {
        v46 = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
        v47 = (char *)v103;
        if (v104 >= v105)
        {
          v82 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            v88 = (char *)&Value - (_BYTE *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            v47 = (char *)v103;
            v46 = (uint64_t *)((char *)v103 + v88);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            v46 = &Value;
            v47 = (char *)v103;
          }
        }
        v48 = &v47[24 * v104];
        v49 = *(_OWORD *)v46;
        *((_QWORD *)v48 + 2) = v46[2];
        *(_OWORD *)v48 = v49;
        ++v104;
      }
    }
  }
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
  if (v102[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
  if (v111)
  {
    v50 = (_QWORD **)__p;
    if (__p)
    {
      v51 = v110;
      v52 = __p;
      if (v110 != __p)
      {
        do
          v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        v52 = __p;
      }
      v110 = v50;
      operator delete(v52);
    }
    v15 = v107;
    if (!v107)
      goto LABEL_107;
    v53 = v108;
    v17 = v107;
    if (v108 == v107)
      goto LABEL_106;
    do
    {
      v55 = (void *)*--v53;
      v54 = v55;
      *v53 = 0;
      if (v55)
        operator delete[](v54);
    }
    while (v53 != v15);
    goto LABEL_105;
  }
  return v11;
}

_QWORD *mlir::Type::dyn_cast<mlir::ShapedType>(_QWORD **a1)
{
  _QWORD *v1;

  v1 = *a1;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**a1 + 8))
    return 0;
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  return v1;
}

uint64_t mlir::mps::MatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  _BOOL4 Value;
  _BOOL4 v21;
  int64x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t *ArgAttrsAttr;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  int v44;
  _BYTE *v45;
  size_t v46;
  int v47;
  _BYTE *v48;
  char *v49;
  unint64_t v50;
  int64x2_t *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  uint64_t v86;
  _QWORD *__src;
  char *__srca;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[8];
  char v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  _BYTE v109[32];
  unint64_t v110[2];
  void *v111;
  uint64_t v112;
  _BYTE v113[32];
  char *v114;
  unint64_t v115;
  _BYTE v116[32];
  int64x2_t *v117;
  unint64_t v118;
  int64x2_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v105 = a4;
  v106 = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v97 = a6;
  v98[0] = 0;
  v99 = 0;
  v100 = v16;
  v17 = a5;
  v101 = a9;
  v102 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v97);
    if (v99)
      v99 = 0;
    mlir::OperationName::OperationName(v98, "mps.matmul", 10, Context);
    v99 = 1;
    v17 = v106;
  }
  v103 = a4;
  v104 = a5;
  if (v17 <= 1)
  {
    v19 = mlir::Float32Type::get(this, a2);
LABEL_25:
    v29 = mlir::UnrankedTensorType::get(v19);
    goto LABEL_26;
  }
  mlir::UnknownLoc::get(this, a2);
  v91 = *((_QWORD *)&v100 + 1);
  v92 = v100;
  if (!(_QWORD)v100)
  {
    Value = 0;
    if (*((_QWORD *)&v100 + 1))
      goto LABEL_12;
LABEL_14:
    v21 = 0;
    goto LABEL_15;
  }
  Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v92);
  if (!v91)
    goto LABEL_14;
LABEL_12:
  v21 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v91);
LABEL_15:
  v22 = (int64x2_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v105, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v23 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v105, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v117 = v22;
  v118 = v23;
  mlir::ValueRange::ValueRange(v110, (uint64_t)&v117, 2uLL);
  if (*(_UNKNOWN **)(v22->i64[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_24;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8))
  {
    v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8);
    v95 = (uint64_t)v22;
    v96 = v25;
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v23 + 8);
    if (v26)
      goto LABEL_19;
LABEL_22:
    v23 = 0;
    v93 = 0;
    v94 = v26;
    v28 = v95;
    if (v95)
      goto LABEL_29;
    goto LABEL_23;
  }
  v95 = 0;
  v96 = 0;
  v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v23 + 8);
  if (!v26)
    goto LABEL_22;
LABEL_19:
  v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v23 + 8);
  v93 = v23;
  v94 = v27;
  v28 = v95;
  if (v95)
    goto LABEL_29;
LABEL_23:
  if (!v23)
  {
LABEL_24:
    v19 = v24;
    goto LABEL_25;
  }
LABEL_29:
  if (*(_UNKNOWN **)(*(_QWORD *)v28 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v23 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v32 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", &v95, ", ", (uint64_t *)&v93);
    v29 = 0;
    goto LABEL_32;
  }
  v107 = v109;
  v108 = 0x400000000;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v95);
  v35 = v34;
  v36 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v93);
  v117 = &v119;
  v118 = 0x400000000;
  v90 = v37;
  v114 = v116;
  v115 = 0x400000000;
  v89 = v35;
  if (v35 == 1)
  {
    v38 = *ArgAttrsAttr;
    v119.i64[0] = 1;
    v119.i64[1] = v38;
    goto LABEL_38;
  }
  if (!v35)
  {
    v119 = vdupq_n_s64(1uLL);
LABEL_38:
    LODWORD(v118) = 2;
    goto LABEL_39;
  }
  v42 = v35;
  v43 = 8 * v35;
  v111 = v113;
  v112 = 0x400000000;
  __src = v36;
  if (v43 < 0x21)
  {
    v44 = 0;
    v45 = v113;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v42) >> 3, 8);
    v44 = v112;
    v45 = v111;
  }
  memcpy(&v45[8 * v44], ArgAttrsAttr, v43);
  v51 = (int64x2_t *)v111;
  v52 = v112 + (v43 >> 3);
  LODWORD(v112) = v112 + (v43 >> 3);
  if (v111 != v113)
  {
    if (v117 != &v119)
    {
      free(v117);
      v51 = (int64x2_t *)v111;
      LODWORD(v52) = v112;
    }
    v117 = v51;
    v118 = __PAIR64__(HIDWORD(v112), v52);
    v111 = v113;
    HIDWORD(v112) = 0;
    goto LABEL_80;
  }
  if (v118 >= v52)
  {
    if ((_DWORD)v52)
      memmove(v117, v113, 8 * v52);
    goto LABEL_79;
  }
  if (HIDWORD(v118) >= v52)
  {
    if ((_DWORD)v118)
    {
      v86 = v118;
      memmove(v117, v113, 8 * v118);
      v55 = v86;
      goto LABEL_77;
    }
  }
  else
  {
    LODWORD(v118) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, &v119, v52, 8);
  }
  v55 = 0;
LABEL_77:
  if (v55 != v112)
    memcpy((char *)v117 + 8 * v55, (char *)v111 + 8 * v55, 8 * v112 - 8 * v55);
LABEL_79:
  LODWORD(v118) = v52;
LABEL_80:
  LODWORD(v112) = 0;
  if (v111 != v113)
    free(v111);
  v36 = __src;
  v37 = v90;
  if (Value)
  {
    v56 = &v117->i8[8 * v118];
    *((_QWORD *)v56 - 1) = ArgAttrsAttr[v43 / 8 - 2];
    *((_QWORD *)v56 - 2) = ArgAttrsAttr[v43 / 8 - 1];
  }
LABEL_39:
  if (v37 == 1)
  {
    v40 = *v36;
    LODWORD(v115) = 0;
    if (HIDWORD(v115) > 1)
    {
      v41 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
      v41 = v115;
    }
    v49 = &v114[8 * v41];
    *(_QWORD *)v49 = v40;
    goto LABEL_53;
  }
  if (v37)
  {
    __srca = (char *)v36;
    v46 = 8 * v37;
    v111 = v113;
    v112 = 0x400000000;
    if (8 * v37 < 0x21)
    {
      v47 = 0;
      v48 = v113;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v37) >> 3, 8);
      v47 = v112;
      v48 = v111;
    }
    memcpy(&v48[8 * v47], __srca, v46);
    v53 = (char *)v111;
    v50 = v112 + (v46 >> 3);
    LODWORD(v112) = v112 + (v46 >> 3);
    if (v111 != v113)
    {
      if (v114 != v116)
      {
        free(v114);
        v53 = (char *)v111;
        LODWORD(v50) = v112;
      }
      v114 = v53;
      v115 = __PAIR64__(HIDWORD(v112), v50);
      v111 = v113;
      HIDWORD(v112) = 0;
      goto LABEL_90;
    }
    v54 = v115;
    if (v115 >= v50)
    {
      if ((_DWORD)v50)
        memmove(v114, v113, 8 * v50);
      goto LABEL_89;
    }
    if (HIDWORD(v115) >= v50)
    {
      if ((_DWORD)v115)
      {
        memmove(v114, v113, 8 * v115);
        goto LABEL_87;
      }
    }
    else
    {
      LODWORD(v115) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v50, 8);
    }
    v54 = 0;
LABEL_87:
    if (v54 != v112)
      memcpy(&v114[8 * v54], (char *)v111 + 8 * v54, 8 * v112 - 8 * v54);
LABEL_89:
    LODWORD(v115) = v50;
LABEL_90:
    LODWORD(v112) = 0;
    if (v111 != v113)
    {
      free(v111);
      LODWORD(v50) = v115;
    }
    if (v21)
    {
      v57 = &v114[8 * v50];
      *((_QWORD *)v57 - 1) = *(_QWORD *)&__srca[v46 - 16];
      *((_QWORD *)v57 - 2) = *(_QWORD *)&__srca[v46 - 8];
    }
    goto LABEL_94;
  }
  LODWORD(v115) = 0;
  if (HIDWORD(v115) > 1)
  {
    v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
    v39 = v115;
  }
  v49 = &v114[8 * v39];
  *(_QWORD *)v49 = 1;
LABEL_53:
  *((_QWORD *)v49 + 1) = 1;
  LODWORD(v50) = v115 + 2;
  LODWORD(v115) = v115 + 2;
LABEL_94:
  LODWORD(v108) = 0;
  if (v118 <= v50)
  {
    v58 = 0;
    if ((_DWORD)v50)
    {
      v62 = (uint64_t *)v114;
      v63 = 8 * v50;
      do
      {
        v64 = *v62;
        if (v58 >= HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
          v58 = v108;
        }
        *((_QWORD *)v107 + v58) = v64;
        v58 = v108 + 1;
        LODWORD(v108) = v108 + 1;
        ++v62;
        v63 -= 8;
      }
      while (v63);
    }
  }
  else
  {
    v58 = 0;
    v59 = (uint64_t *)v117;
    v60 = 8 * v118;
    do
    {
      v61 = *v59;
      if (v58 >= HIDWORD(v108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
        v58 = v108;
      }
      *((_QWORD *)v107 + v58) = v61;
      v58 = v108 + 1;
      LODWORD(v108) = v108 + 1;
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  v65 = (char *)v117;
  v66 = v118;
  v67 = &v117->i8[8 * v118];
  v68 = v114;
  v69 = v115;
  v70 = &v114[8 * v115];
  v71 = v107;
  v72 = (char *)v107 + 8 * v58;
  *((_QWORD *)v72 - 1) = *((_QWORD *)v70 - 1);
  v73 = v70 - 16;
  *((_QWORD *)v72 - 2) = *((_QWORD *)v67 - 2);
  v74 = v67 - 16 == v65 || v73 == v68;
  if (!v74)
  {
    v75 = 8 * v66 - 24;
    v76 = &v71[v58 - 3];
    v77 = 8 * v69 - 24;
    while (1)
    {
      v78 = *(_QWORD *)&v65[v75];
      v79 = *(_QWORD *)&v68[v77];
      if (v78 == 0x8000000000000000)
      {
        if (v79 <= 1)
          v78 = 0x8000000000000000;
        else
          v78 = *(_QWORD *)&v68[v77];
      }
      else if (v79 == 0x8000000000000000)
      {
        if (v78 <= 1)
          v78 = 0x8000000000000000;
      }
      else if (v78 != v79 && v79 != 1)
      {
        v74 = v78 == 1;
        v78 = *(_QWORD *)&v68[v77];
        if (!v74)
        {
          LODWORD(v108) = 0;
          v84 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "incompatible dimensions");
          v85 = v84;
          v68 = v114;
          v83 = v85;
          if (v114 == v116)
            goto LABEL_132;
LABEL_131:
          free(v68);
          goto LABEL_132;
        }
      }
      *v76-- = v78;
      if (v75)
      {
        v75 -= 8;
        v81 = v77;
        v77 -= 8;
        if (v81)
          continue;
      }
      break;
    }
  }
  if (v89 <= 1)
  {
    v82 = *((_QWORD *)v72 - 1);
    LODWORD(v108) = --v58;
    v71[v58 - 1] = v82;
  }
  if (v90 <= 1)
    LODWORD(v108) = v58 - 1;
  v83 = 1;
  if (v68 != v116)
    goto LABEL_131;
LABEL_132:
  if (v117 != &v119)
    free(v117);
  if (v83)
  {
    v29 = mlir::RankedTensorType::get((uint64_t)v107, v108, v24, 0);
    v32 = 1;
  }
  else
  {
    v32 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid shape");
    v29 = 0;
  }
  if (v107 != v109)
    free(v107);
LABEL_32:
  if (!v32)
    return 0;
LABEL_26:
  v30 = *(unsigned int *)(a11 + 8);
  if (v30 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v30) = v29;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::defaultInferReturnTypes(mlir::Float32Type *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;

  if (!a3)
  {
    v7 = mlir::Float32Type::get(a1, (mlir::MLIRContext *)a2);
    v4 = mlir::UnrankedTensorType::get(v7);
    v5 = a2[2];
    if (v5 < a2[3])
      goto LABEL_3;
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 4, v5 + 1, 8);
    v5 = a2[2];
    goto LABEL_3;
  }
  v4 = mlir::UnrankedTensorType::get(a3);
  v5 = a2[2];
  if (v5 >= a2[3])
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  ++a2[2];
  return 1;
}

uint64_t mlir::mps::MatMulOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BOOL4 Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  const void **v52;
  __int16 v53;
  _QWORD v54[2];
  unint64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD **v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v3)
  {
    v55 = 0;
    v56 = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
  v5 = (*this)[9];
  v55 = v3;
  v56 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v6 + 8);
LABEL_6:
  v54[0] = v6;
  v54[1] = v7;
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
  v10 = v9;
  v12 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
  v13 = v11;
  if (!v10)
  {
    v14 = 1;
    if (v11)
      goto LABEL_12;
LABEL_23:
    v19 = 1;
    v20 = 1;
    if (v14 == 0x8000000000000000)
      return v20;
    goto LABEL_24;
  }
  if (v10 != 1)
  {
    v60[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    ArgAttrsAttr = &ArgAttrsAttr[v10 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)v60) << 63 >> 63)];
  }
  v14 = *ArgAttrsAttr;
  if (!v13)
    goto LABEL_23;
LABEL_12:
  if (v13 != 1)
  {
    v15 = &v12[v13];
    v16 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v16 = 0;
    v60[0] = *(_QWORD *)(v16 + 8);
    Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)v60);
    v18 = 0x1FFFFFFFFFFFFFFELL;
    if (Value)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    v12 = &v15[v18];
  }
  v19 = *v12;
  v20 = 1;
  if (v14 != 0x8000000000000000)
  {
LABEL_24:
    if (v19 != 0x8000000000000000 && v14 != v19)
    {
      v52 = (const void **)"contracting dimensions differ ";
      v53 = 259;
      mlir::OpState::emitOpError(this, &v52, (uint64_t)v60);
      if (v60[0])
      {
        v57 = 2;
        v58 = (const char *)v14;
        v22 = &v57;
        v23 = (char *)v61;
        if (v62 >= v63)
        {
          v44 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v49 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            v23 = (char *)v61;
            v22 = (int *)((char *)v61 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            v22 = &v57;
            v23 = (char *)v61;
          }
        }
        v24 = &v23[24 * v62];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        v26 = ++v62;
        if (v60[0])
        {
          v57 = 3;
          v58 = " & ";
          v59 = 3;
          v27 = &v57;
          v28 = (char *)v61;
          if (v26 >= v63)
          {
            v45 = v26 + 1;
            v46 = (char *)v61 + 24 * v26 > (char *)&v57;
            if (v61 <= &v57 && v46)
            {
              v50 = (char *)&v57 - (_BYTE *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              v28 = (char *)v61;
              v27 = (int *)((char *)v61 + v50);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              v27 = &v57;
              v28 = (char *)v61;
            }
          }
          v29 = &v28[24 * v62];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          v31 = ++v62;
          if (v60[0])
          {
            v57 = 2;
            v58 = (const char *)v19;
            v32 = &v57;
            v33 = (char *)v61;
            if (v31 >= v63)
            {
              v47 = v31 + 1;
              v48 = (char *)v61 + 24 * v31 > (char *)&v57;
              if (v61 <= &v57 && v48)
              {
                v51 = (char *)&v57 - (_BYTE *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                v33 = (char *)v61;
                v32 = (int *)((char *)v61 + v51);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                v32 = &v57;
                v33 = (char *)v61;
              }
            }
            v34 = &v33[24 * v62];
            v35 = *(_OWORD *)v32;
            *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
            *(_OWORD *)v34 = v35;
            ++v62;
          }
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      if (v69)
      {
        v36 = (_QWORD **)__p;
        if (__p)
        {
          v37 = v68;
          v38 = __p;
          if (v68 != __p)
          {
            do
              v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            v38 = __p;
          }
          v68 = v36;
          operator delete(v38);
        }
        v39 = v65;
        if (v65)
        {
          v40 = v66;
          v41 = v65;
          if (v66 != v65)
          {
            do
            {
              v43 = (void *)*--v40;
              v42 = v43;
              *v40 = 0;
              if (v43)
                operator delete[](v42);
            }
            while (v40 != v39);
            v41 = v65;
          }
          v66 = v39;
          operator delete(v41);
        }
        if (v61 != v64)
          free(v61);
      }
    }
  }
  return v20;
}

BOOL mlir::mps::MatMulOp::getTransposeRhs(mlir::mps::MatMulOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 8);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v3);
}

uint64_t mlir::mps::verifySparseTensorHelper(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD *__return_ptr, uint64_t, _QWORD *), uint64_t a8)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *ArgAttrsAttr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t (****v57)(llvm::detail::format_adapter *__hidden);
  uint64_t v58;
  uint64_t (**v59)(llvm::detail::format_adapter *__hidden);
  uint64_t *v60;
  uint64_t (**v61)(llvm::detail::format_adapter *__hidden);
  uint64_t *v62;
  uint64_t (***v63)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v64)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v65)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v66)(llvm::detail::format_adapter *__hidden);
  uint64_t (****v67)(llvm::detail::format_adapter *__hidden);
  _QWORD v68[4];
  __int16 v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  void *v75;
  _BYTE v76[96];
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v72 = a6;
  v73 = a5;
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    v70 = v13;
    v71 = v14;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70))
      return 1;
  }
  else
  {
    v70 = 0;
    v71 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70))
      return 1;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  if (v16)
  {
    v17 = 8 * v16;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v17 -= 8;
      if (!v17)
        goto LABEL_9;
    }
    return 1;
  }
LABEL_9:
  v18 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70) - 1;
  if (a4 == 2 && v73 != v18)
  {
    v55 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
    v56 = 71;
    v57 = &v65;
    v58 = 3;
    v59 = &off_1E0E23E00;
    v60 = &v73;
    v61 = &off_1E0E23E00;
    v62 = &v72;
    v63 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F80;
    v64 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v70;
    v65 = &v59;
    v66 = &v61;
    v67 = &v63;
    v68[0] = &v55;
    v69 = 263;
    a7(v74, a8, v68);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
    if (v74[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
    if (!v81)
      return v19;
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v80;
      v22 = __p;
      if (v80 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v80 = v20;
      operator delete(v22);
    }
    v23 = v77;
    if (v77)
    {
      v24 = v78;
      v25 = v77;
      if (v78 != v77)
      {
        do
        {
          v27 = (void *)*--v24;
          v26 = v27;
          *v24 = 0;
          if (v27)
            operator delete[](v26);
        }
        while (v24 != v23);
        v25 = v77;
      }
      v78 = v23;
      operator delete(v25);
    }
    v40 = v75;
    if (v75 == v76)
      return v19;
LABEL_66:
    free(v40);
    return v19;
  }
  if (a4 != 1 || v72 == v18)
  {
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v36)
    {
      v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v36 + 8);
      v53 = v36;
      v54 = v37;
      v38 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38)
        goto LABEL_43;
    }
    else
    {
      v53 = 0;
      v54 = 0;
      v38 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38)
      {
LABEL_43:
        v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v38 + 8);
        v51 = v38;
        v52 = v39;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53))
        {
LABEL_51:
          v41 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
          if (v42)
          {
            v43 = 8 * v42;
            while (*v41 != 0x8000000000000000)
            {
              ++v41;
              v43 -= 8;
              if (!v43)
                goto LABEL_55;
            }
          }
          else
          {
LABEL_55:
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51))
            {
              v44 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
              if (v45)
              {
                v46 = 8 * v45;
                while (*v44 != 0x8000000000000000)
                {
                  ++v44;
                  v46 -= 8;
                  if (!v46)
                    goto LABEL_60;
                }
              }
              else
              {
LABEL_60:
                v47 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v53);
                if (v47 != *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51))
                {
                  v49 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v50 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
                  v55 = "failed: index_tensor0 and sparse_values shape mismatch, {0} and {1}";
                  v56 = 67;
                  v57 = &v63;
                  v58 = 2;
                  v59 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F20;
                  v60 = (uint64_t *)v49;
                  v61 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F20;
                  v62 = (uint64_t *)v50;
                  v63 = &v59;
                  v64 = &v61;
                  v69 = 263;
                  v68[0] = &v55;
                  a7(v74, a8, v68);
                  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v74);
                  return v19;
                }
              }
            }
          }
        }
        return 1;
      }
    }
    v51 = v38;
    v52 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53))
      goto LABEL_51;
    return 1;
  }
  v55 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
  v56 = 71;
  v57 = &v65;
  v58 = 3;
  v59 = &off_1E0E23E00;
  v60 = &v73;
  v61 = &off_1E0E23E00;
  v62 = &v72;
  v63 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F80;
  v64 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v70;
  v65 = &v59;
  v66 = &v61;
  v67 = &v63;
  v68[0] = &v55;
  v69 = 263;
  a7(v74, a8, v68);
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
  if (v74[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
  if (v81)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v80;
      v30 = __p;
      if (v80 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v80 = v28;
      operator delete(v30);
    }
    v31 = v77;
    if (v77)
    {
      v32 = v78;
      v33 = v77;
      if (v78 != v77)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v77;
      }
      v78 = v31;
      operator delete(v33);
    }
    v40 = v75;
    if (v75 != v76)
      goto LABEL_66;
  }
  return v19;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v24;
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  v3 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  else
    v4 = 0;
  v26[0] = v3;
  v26[1] = v4;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
  v6 = *ArgAttrsAttr;
  v7 = ArgAttrsAttr[1];
  v8 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && (unint64_t)*((unsigned int *)v8 + 17) - 1 <= 1)
  {
    v24 = (const void **)"failure: expected at least two operands to represent COO, CSR or CSC sparse formats.";
    v25 = 259;
    mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v10 = (_QWORD **)__p;
      if (__p)
      {
        v11 = v32;
        v12 = __p;
        if (v32 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v32 = v10;
        operator delete(v12);
      }
      v13 = v29;
      if (v29)
      {
        v14 = v30;
        v15 = v29;
        if (v30 != v29)
        {
          do
          {
            v17 = (void *)*--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              operator delete[](v16);
          }
          while (v14 != v13);
          v15 = v29;
        }
        v30 = v13;
        operator delete(v15);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
  else
  {
    v18 = (_QWORD *)v8[9];
    v19 = v18[3];
    v20 = v18[7];
    v21 = v18[11];
    v22 = *(_DWORD *)(v8[10] + 8);
    v26[0] = this;
    return mlir::mps::verifySparseTensorHelper(v19, v20, v21, v22, v6, v7, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mps::MaterializeSparseTensorOp::verify(void)::$_0>, (uint64_t)v26);
  }
  return v9;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::getStorageType(mlir::mps::MaterializeSparseTensorOp *this)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)this
                                     + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                                     + 64)
                         + 8);
}

uint64_t mlir::mps::HammingDistanceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t Value;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  mlir::MLIRContext *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t ArgAttrsAttr;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[6];

  v68[4] = *MEMORY[0x1E0C80C00];
  v64 = a4;
  v65 = a5;
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v56 = a6;
  v57[0] = 0;
  v58 = 0;
  v59 = v14;
  v60 = a9;
  v15 = a5;
  v61 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58)
      v58 = 0;
    mlir::OperationName::OperationName(v57, "mps.hamming_distance", 20, Context);
    v58 = 1;
    v15 = v65;
  }
  v62 = a4;
  v63 = a5;
  if (v15 >= 2)
  {
    v17 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::HammingDistanceOpAdaptor::verify((uint64_t)&v56, v17))
    {
      v51 = v59;
      Value = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
      if (v51)
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
      v19 = Value;
      v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v64, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v21 = mlir::ValueRange::dereference_iterator(&v64, 1);
      if (*(_UNKNOWN **)(*(_QWORD *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        goto LABEL_32;
      v22 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        goto LABEL_32;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v20 + 8))
      {
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v20 + 8);
        v54 = v20;
        v55 = v23;
        v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
        if (v24)
          goto LABEL_16;
      }
      else
      {
        v20 = 0;
        v54 = 0;
        v55 = 0;
        v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
        if (v24)
        {
LABEL_16:
          v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
          v52 = v22;
          v53 = v25;
          if (!v20)
            goto LABEL_32;
LABEL_25:
          if (v22)
          {
            v66 = v68;
            v67 = 0x400000000;
            ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
            v32 = v31;
            v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
            v35 = v33;
            v36 = v34;
            if (v32 <= v34)
              v37 = v34;
            else
              v37 = v32;
            if (v32 < 2)
            {
              v38 = 1;
              if (v34 < 2)
                goto LABEL_31;
            }
            else
            {
              v38 = *(_QWORD *)(ArgAttrsAttr + 8 * v32 - 16);
              if (v34 < 2)
              {
LABEL_31:
                v39 = 1;
LABEL_39:
                v43 = v67;
                if (v37 != v67)
                {
                  if (v37 >= v67)
                  {
                    if (v37 > HIDWORD(v67))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v37, 8);
                      v43 = v67;
                    }
                    if (v37 != v43)
                      bzero((char *)v66 + 8 * v43, 8 * (v37 - v43));
                  }
                  LODWORD(v67) = v37;
                  LODWORD(v43) = v37;
                }
                v44 = v66;
                if ((uint64_t)v37 >= 1)
                {
                  v45 = (char *)v66 + 8 * v37;
                  *((_QWORD *)v45 - 1) = v39;
                  if (v37 != 1)
                  {
                    *((_QWORD *)v45 - 2) = v38;
                    if (v37 >= 3)
                    {
                      v46 = v36 - 3;
                      v47 = v32 - 3;
                      do
                      {
                        if ((v47 & 0x8000000000000000) != 0)
                        {
                          if ((v46 & 0x8000000000000000) != 0)
                            v48 = 1;
                          else
                            v48 = *(_QWORD *)(v35 + 8 * v46);
                        }
                        else
                        {
                          v48 = *(_QWORD *)(ArgAttrsAttr + 8 * v47);
                          if ((v46 & 0x8000000000000000) == 0)
                          {
                            if (v48 == 0x8000000000000000)
                              v50 = *(_QWORD *)(v35 + 8 * v46);
                            else
                              v50 = *(_QWORD *)(ArgAttrsAttr + 8 * v47);
                            if (*(_QWORD *)(v35 + 8 * v46) == 1)
                              v50 = *(_QWORD *)(ArgAttrsAttr + 8 * v47);
                            if (v48 == 1)
                              v48 = *(_QWORD *)(v35 + 8 * v46);
                            else
                              v48 = v50;
                          }
                        }
                        v44[v37 - 3] = v48;
                        --v46;
                        v49 = v37 - 3;
                        --v37;
                        --v47;
                      }
                      while (v49 > 0);
                    }
                  }
                }
                v40 = mlir::RankedTensorType::get((uint64_t)v44, v43, v19, 0);
                if (v66 != v68)
                  free(v66);
                goto LABEL_33;
              }
            }
            v39 = *(_QWORD *)(v33 + 8 * v34 - 16);
            goto LABEL_39;
          }
LABEL_32:
          v40 = mlir::UnrankedTensorType::get(v19);
LABEL_33:
          v41 = *(unsigned int *)(a11 + 8);
          if (v41 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
            LODWORD(v41) = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v41) = v40;
          goto LABEL_36;
        }
      }
      v22 = 0;
      v52 = 0;
      v53 = v24;
      if (!v20)
        goto LABEL_32;
      goto LABEL_25;
    }
  }
  v26 = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
  if (!v26)
    v26 = mlir::Float32Type::get(this, v27);
  v28 = mlir::UnrankedTensorType::get(v26);
  v29 = *(_DWORD *)(a11 + 8);
  if (v29 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
    v29 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v29) = v28;
LABEL_36:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::HammingDistanceOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v14[0] = *(_QWORD *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    v12 = "'mps.hamming_distance' op requires attribute 'resultElementType'";
    v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v20;
        v6 = __p;
        if (v20 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v20 = v4;
        operator delete(v6);
      }
      v7 = v17;
      if (v17)
      {
        v8 = v18;
        v9 = v17;
        if (v18 != v17)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v17;
        }
        v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::HammingDistanceOp::verify(uint64_t **this)
{
  BOOL isSignedInteger;
  int IntOrFloatBitWidth;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  uint64_t ArgAttrsAttr;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t i;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  int *v45;
  char *v46;
  char *v47;
  __int128 v48;
  int *v49;
  char *v50;
  char *v51;
  __int128 v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  const void **v73[4];
  __int16 v74;
  uint64_t Value;
  int v76;
  const char *v77;
  uint64_t v78;
  _QWORD v79[3];
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v79[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v79);
  isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&Value);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  if (!isSignedInteger && (IntOrFloatBitWidth == 16 || IntOrFloatBitWidth == 32))
  {
    v4 = (*this)[9];
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v5 + 8);
      v7 = (*this)[9];
      v71 = v5;
      v72 = v6;
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
        goto LABEL_6;
    }
    else
    {
      v71 = 0;
      v72 = 0;
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
LABEL_6:
        v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v8 + 8);
        v5 = v71;
        v69 = v8;
        v70 = v9;
        if (!v71)
          return 1;
        goto LABEL_24;
      }
    }
    v69 = v8;
    v70 = 0;
    if (!v5)
      return 1;
LABEL_24:
    v19 = *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
       || v8 == 0;
    if (v19
      || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      return 1;
    }
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
    v22 = v21;
    v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    if (v22 <= v24)
      v25 = v24;
    else
      v25 = v22;
    if (v22)
    {
      v26 = *(_QWORD *)(ArgAttrsAttr + 8 * v22 - 8);
      if (v24)
        goto LABEL_34;
    }
    else
    {
      v26 = 1;
      if (v24)
      {
LABEL_34:
        v27 = *(_QWORD *)(v23 + 8 * v24 - 8);
        if (v27 == 0x8000000000000000)
        {
LABEL_41:
          if (v25 < 3)
            return 1;
          v31 = v25 - 2;
          v32 = v22 - 3;
          for (i = v24 - 3; ; --i)
          {
            if ((v32 & 0x8000000000000000) != 0)
            {
              v34 = 1;
              if ((i & 0x8000000000000000) == 0)
              {
LABEL_47:
                v35 = *(_QWORD *)(v23 + 8 * i);
                if (v34 == 0x8000000000000000)
                  goto LABEL_44;
                goto LABEL_51;
              }
            }
            else
            {
              v34 = *(_QWORD *)(ArgAttrsAttr + 8 * v32);
              if ((i & 0x8000000000000000) == 0)
                goto LABEL_47;
            }
            v35 = 1;
            if (v34 == 0x8000000000000000)
              goto LABEL_44;
LABEL_51:
            if (v35 != 1 && v35 != 0x8000000000000000 && v34 != 1 && v34 != v35)
            {
              v73[0] = (const void **)"Leading n-2 dimensions not broadcast compatible: ";
              v74 = 259;
              mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
              if (v79[0])
              {
                v76 = 3;
                v77 = "LHS = ";
                v78 = 6;
                v36 = &v76;
                v37 = (char *)v80;
                if (v81 >= v82)
                {
                  v60 = v81 + 1;
                  if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                  {
                    v65 = (char *)&v76 - (_BYTE *)v80;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    v37 = (char *)v80;
                    v36 = (int *)((char *)v80 + v65);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    v36 = &v76;
                    v37 = (char *)v80;
                  }
                }
                v38 = &v37[24 * v81];
                v39 = *(_OWORD *)v36;
                *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
                *(_OWORD *)v38 = v39;
                ++v81;
                if (v79[0])
                {
                  v40 = &v76;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v71);
                  v41 = (char *)v80;
                  if (v81 >= v82)
                  {
                    v61 = v81 + 1;
                    if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                    {
                      v66 = (char *)&v76 - (_BYTE *)v80;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      v41 = (char *)v80;
                      v40 = (int *)((char *)v80 + v66);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      v40 = &v76;
                      v41 = (char *)v80;
                    }
                  }
                  v42 = &v41[24 * v81];
                  v43 = *(_OWORD *)v40;
                  *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
                  *(_OWORD *)v42 = v43;
                  v44 = ++v81;
                  if (v79[0])
                  {
                    v76 = 3;
                    v77 = " RHS = ";
                    v78 = 7;
                    v45 = &v76;
                    v46 = (char *)v80;
                    if (v44 >= v82)
                    {
                      v62 = v44 + 1;
                      v63 = (char *)v80 + 24 * v44 > (char *)&v76;
                      if (v80 <= &v76 && v63)
                      {
                        v67 = (char *)&v76 - (_BYTE *)v80;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        v46 = (char *)v80;
                        v45 = (int *)((char *)v80 + v67);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        v45 = &v76;
                        v46 = (char *)v80;
                      }
                    }
                    v47 = &v46[24 * v81];
                    v48 = *(_OWORD *)v45;
                    *((_QWORD *)v47 + 2) = *((_QWORD *)v45 + 2);
                    *(_OWORD *)v47 = v48;
                    ++v81;
                    if (v79[0])
                    {
                      v49 = &v76;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v69);
                      v50 = (char *)v80;
                      if (v81 >= v82)
                      {
                        v64 = v81 + 1;
                        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                        {
                          v68 = (char *)&v76 - (_BYTE *)v80;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          v50 = (char *)v80;
                          v49 = (int *)((char *)v80 + v68);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          v49 = &v76;
                          v50 = (char *)v80;
                        }
                      }
                      v51 = &v50[24 * v81];
                      v52 = *(_OWORD *)v49;
                      *((_QWORD *)v51 + 2) = *((_QWORD *)v49 + 2);
                      *(_OWORD *)v51 = v52;
                      ++v81;
                    }
                  }
                }
              }
              v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
              if (v79[0])
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
              if (v88)
              {
                v53 = (_QWORD **)__p;
                if (__p)
                {
                  v54 = v87;
                  v55 = __p;
                  if (v87 != __p)
                  {
                    do
                      v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                    while (v54 != v53);
                    v55 = __p;
                  }
                  v87 = v53;
                  operator delete(v55);
                }
                v14 = v84;
                if (v84)
                {
                  v56 = v85;
                  v16 = v84;
                  if (v85 == v84)
                  {
LABEL_79:
                    v85 = v14;
                    operator delete(v16);
                    goto LABEL_80;
                  }
                  do
                  {
                    v58 = (void *)*--v56;
                    v57 = v58;
                    *v56 = 0;
                    if (v58)
                      operator delete[](v57);
                  }
                  while (v56 != v14);
LABEL_78:
                  v16 = v84;
                  goto LABEL_79;
                }
                goto LABEL_80;
              }
              return v10;
            }
LABEL_44:
            --v31;
            --v32;
            if (v31 < 1)
              return 1;
          }
        }
LABEL_38:
        if (v26 != 0x8000000000000000 && v26 != v27)
        {
          v73[0] = (const void **)"Incompatible last dimension shapes: LHS = ";
          v74 = 259;
          mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
          v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v79, (uint64_t *)&v71);
          v29 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v28, " RHS = ");
          v30 = mlir::InFlightDiagnostic::append<mlir::Type &>(v29, (uint64_t *)&v69);
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v30);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v79);
          return v10;
        }
        goto LABEL_41;
      }
    }
    v27 = 1;
    goto LABEL_38;
  }
  v74 = 259;
  mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
  if (v79[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
  if (v88)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v87;
      v13 = __p;
      if (v87 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v87 = v11;
      operator delete(v13);
    }
    v14 = v84;
    if (v84)
    {
      v15 = v85;
      v16 = v84;
      if (v85 == v84)
        goto LABEL_79;
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
      goto LABEL_78;
    }
LABEL_80:
    if (v80 != v83)
      free(v80);
  }
  return v10;
}

uint64_t mlir::mps::TransposeOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v14;
  uint64_t ElementTypeOrSelf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t DefiningOp;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *ArgAttrsAttr;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OperandRange;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[2];
  void **v48;
  __int128 v49;
  char v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[48];
  void *v54[2];
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  uint64_t v58;
  char v59[8];
  char v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    ElementTypeOrSelf = mlir::Float32Type::get(a1, a2);
    goto LABEL_9;
  }
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = a9;
  v62 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.transpose", 13, Context);
    v60 = 1;
  }
  v63 = a4;
  v64 = a5;
  if (a5 <= 2)
  {
    v51 = a4;
    v52 = 0;
    v14 = mlir::ValueRange::dereference_iterator(&v51, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v14);
LABEL_9:
    v16 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v17 = *(unsigned int *)(a11 + 8);
    if (v17 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v17) = v16;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v51 = a4;
  v52 = 0;
  v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v18)
    v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  else
    v19 = 0;
  v47[0] = (uint64_t)v18;
  v47[1] = v19;
  v56[0] = &v57;
  v56[1] = (void *)0x100000000;
  v54[0] = &v55;
  v54[1] = (void *)0x100000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v47))
    goto LABEL_24;
  v51 = v63;
  v52 = 1;
  v51 = (void *)mlir::ValueRange::offset_base(&v51, 1);
  v52 = 0;
  v20 = mlir::ValueRange::dereference_iterator(&v51, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
  v22 = v21;
  v51 = 0;
  v52 = 0;
  v48 = &v51;
  *(_QWORD *)&v49 = v20;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v48, DefiningOp))
  {
LABEL_21:
    v51 = v63;
    v52 = 2;
    v51 = (void *)mlir::ValueRange::offset_base(&v51, 2);
    v52 = 0;
    v24 = mlir::ValueRange::dereference_iterator(&v51, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v26 = v25;
    v51 = 0;
    v52 = 0;
    v48 = &v51;
    *(_QWORD *)&v49 = v24;
    v27 = mlir::Value::getDefiningOp((mlir::Value *)&v49);
    if (v27 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v48, v27))
    {
    }
    else if (!mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant"))
    {
      goto LABEL_24;
    }
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v34 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    v36 = (_BYTE *)(v34 + 8 * v35);
    v51 = v53;
    v52 = 0x600000000;
    v37 = v36 - ArgAttrsAttr;
    if ((unint64_t)(v36 - ArgAttrsAttr) < 0x31)
    {
      v38 = 0;
      v39 = v53;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v37 >> 3, 8);
      v38 = v52;
      v39 = v51;
    }
    if (v36 != ArgAttrsAttr)
    {
      memcpy(&v39[8 * v38], ArgAttrsAttr, v36 - ArgAttrsAttr);
      v38 = v52;
      v39 = v51;
    }
    v40 = v38 + ((unint64_t)v37 >> 3);
    LODWORD(v52) = v40;
    v41 = 8 * *(_QWORD *)v56[0];
    v42 = 8 * *(_QWORD *)v54[0];
    v43 = *(_QWORD *)&v39[v41];
    *(_QWORD *)&v39[v41] = *(_QWORD *)&v39[v42];
    *(_QWORD *)&v39[v42] = v43;
    *(_QWORD *)&v49 = v39;
    *((_QWORD *)&v49 + 1) = v40;
    v50 = 1;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
    v45 = mlir::ShapedType::cloneWith(v47, &v49, OperandRange);
    v46 = *(unsigned int *)(a11 + 8);
    if (v46 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v46) = v45;
    ++*(_DWORD *)(a11 + 8);
    if (v51 != v53)
      free(v51);
    goto LABEL_27;
  }
  if (mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant"))
    goto LABEL_21;
LABEL_24:
  v51 = v63;
  v52 = 0;
  v28 = mlir::ValueRange::dereference_iterator(&v51, 0);
  v29 = mlir::getElementTypeOrSelf(v28);
  v30 = mlir::UnrankedTensorType::get(v29);
  v31 = *(unsigned int *)(a11 + 8);
  if (v31 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v31) = v30;
  ++*(_DWORD *)(a11 + 8);
LABEL_27:
  if (v54[0] != &v55)
    free(v54[0]);
  if (v56[0] != &v57)
    free(v56[0]);
  return 1;
}

_QWORD *llvm::SmallVector<long long,6u>::SmallVector<long long const*,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t mlir::mps::PermuteOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t NumElements;
  uint64_t v21;
  BOOL v22;
  char v24;
  uint64_t v25;
  uint64_t *Value;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t ElementType;
  uint64_t v35;
  unint64_t v36;
  char *v37[2];
  char v38;
  char *v39;
  unint64_t v40;
  _QWORD v41[2];
  void *__b;
  uint64_t v43;
  _BYTE v44[32];
  void *v45;
  uint64_t v46;
  _QWORD v47[5];

  v47[4] = *MEMORY[0x1E0C80C00];
  v41[0] = a4;
  v41[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = mlir::ValueRange::dereference_iterator(v41, 1);
  v15 = *(void **)(*(_QWORD *)v13 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v15 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v17 = v13;
  }
  else
  {
    v17 = 0;
  }
  v36 = v17;
  if (!v17)
  {
    v24 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot permute a non-tensor type");
    v25 = 0;
    goto LABEL_33;
  }
  v18 = v14;
  __b = v44;
  v43 = 0x400000000;
  v40 = v17;
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v40))
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
    NumElements = (unint64_t)v19;
    v39 = v19;
    v21 = v43;
    v22 = (unint64_t)v19 >= v43;
    if (v19 == (char *)v43)
      goto LABEL_22;
  }
  else
  {
    v45 = (void *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8);
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
    NumElements = mlir::ShapedType::getNumElements(Value, v27);
    v39 = (char *)NumElements;
    v21 = v43;
    v22 = NumElements >= v43;
    if (NumElements == v43)
      goto LABEL_22;
  }
  if (v22)
  {
    if (NumElements > HIDWORD(v43))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v44, NumElements, 8);
      v21 = v43;
    }
    if (NumElements != v21)
      bzero((char *)__b + 8 * v21, 8 * (NumElements - v21));
  }
  LODWORD(v43) = NumElements;
LABEL_22:
  v45 = v47;
  v46 = 0x400000000;
  if (*(_UNKNOWN **)(*(_QWORD *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && mlir::matchConstantWithIntVector<long long>(v18, (uint64_t)&v45))
  {
    if (NumElements == v46)
    {
      v37[0] = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
      v37[1] = v28;
      v38 = 1;
    }
    else
    {
      v37[0] = (char *)v46;
      v29 = mlir::emitOptionalError<char const(&)[37],char const(&)[14],unsigned long,char const(&)[5],unsigned long &>(a2, a3, "perm tensor length must equal input ", "tensor rank, ", v37, " != ", &v39);
    }
    v30 = v29;
    v31 = v45;
    if (v45 == v47)
      goto LABEL_30;
LABEL_29:
    free(v31);
    goto LABEL_30;
  }
  if (NumElements)
    memset_pattern16(__b, &unk_1812352C0, 8 * NumElements);
  v30 = 1;
  v31 = v45;
  if (v45 != v47)
    goto LABEL_29;
LABEL_30:
  v32 = __b;
  if (v30)
  {
    v33 = v43;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
    v25 = mlir::RankedTensorType::get((uint64_t)v32, v33, ElementType, 0);
    v24 = 1;
    v32 = __b;
    if (__b == v44)
      goto LABEL_33;
    goto LABEL_32;
  }
  v25 = 0;
  v24 = 0;
  if (__b != v44)
LABEL_32:
    free(v32);
LABEL_33:
  if (!v24)
    return 0;
  v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v25;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PermuteOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  char *v9;
  char *v10;
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t NumElements;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  int *v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  int *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  char **v60;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  _BYTE v74[24];
  const void **v75[4];
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  const char *v80;
  uint64_t v81;
  char **v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  unsigned int v87;
  _BYTE v88[96];
  void *v89;
  _QWORD *v90;
  void *__p;
  _QWORD **v92;
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v78 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  v77 = v6;
  if (v3)
  {
    if (v6)
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v78) || !mlir::TensorType::hasRank((mlir::TensorType *)&v77))
        return 1;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78);
      v10 = v9;
      Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v77);
      if ((char *)mlir::ShapedType::getNumElements(Value, v12) == v10)
      {
        v82 = (char **)&v84;
        v83 = 0x400000000;
        if (mlir::matchConstantWithIntVector<long long>(*(_QWORD *)((*this)[9] + 56), (uint64_t)&v82))
        {
          v13 = (*this)[3];
          v74[0] = 0;
          v74[16] = 0;
        }
        else
        {
          v14 = 1;
        }
        v60 = v82;
        if (v82 == (char **)&v84)
          return v14;
LABEL_77:
        free(v60);
        return v14;
      }
      v75[0] = (const void **)"perm tensor length must equal input tensor rank, ";
      v76 = 259;
      mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
      v37 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v77);
      NumElements = mlir::ShapedType::getNumElements(v37, v38);
      if (v82)
      {
        v79 = 2;
        v80 = (const char *)NumElements;
        v40 = &v79;
        v41 = (char *)v85;
        if (v86 >= v87)
        {
          v64 = v86 + 1;
          if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
          {
            v71 = (char *)&v79 - (_BYTE *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v64, 24);
            v41 = (char *)v85;
            v40 = (int *)((char *)v85 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v64, 24);
            v40 = &v79;
            v41 = (char *)v85;
          }
        }
        v42 = &v41[24 * v86];
        v43 = *(_OWORD *)v40;
        *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
        *(_OWORD *)v42 = v43;
        v44 = ++v86;
        if (v82)
        {
          v79 = 3;
          v80 = " != ";
          v81 = 4;
          v45 = &v79;
          v46 = (char *)v85;
          if (v44 >= v87)
          {
            v65 = v44 + 1;
            v66 = (char *)v85 + 24 * v44 > (char *)&v79;
            if (v85 <= &v79 && v66)
            {
              v72 = (char *)&v79 - (_BYTE *)v85;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v65, 24);
              v46 = (char *)v85;
              v45 = (int *)((char *)v85 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v65, 24);
              v45 = &v79;
              v46 = (char *)v85;
            }
          }
          v47 = &v46[24 * v86];
          v48 = *(_OWORD *)v45;
          *((_QWORD *)v47 + 2) = *((_QWORD *)v45 + 2);
          *(_OWORD *)v47 = v48;
          v49 = ++v86;
          if (v82)
          {
            v79 = 5;
            v80 = v10;
            v50 = &v79;
            v51 = (char *)v85;
            if (v49 >= v87)
            {
              v67 = v49 + 1;
              v68 = (char *)v85 + 24 * v49 > (char *)&v79;
              if (v85 <= &v79 && v68)
              {
                v73 = (char *)&v79 - (_BYTE *)v85;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v67, 24);
                v51 = (char *)v85;
                v50 = (int *)((char *)v85 + v73);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v67, 24);
                v50 = &v79;
                v51 = (char *)v85;
              }
            }
            v52 = &v51[24 * v86];
            v53 = *(_OWORD *)v50;
            *((_QWORD *)v52 + 2) = *((_QWORD *)v50 + 2);
            *(_OWORD *)v52 = v53;
            ++v86;
          }
        }
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v93)
      {
        v54 = (_QWORD **)__p;
        if (__p)
        {
          v55 = v92;
          v56 = __p;
          if (v92 != __p)
          {
            do
              v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
            while (v55 != v54);
            v56 = __p;
          }
          v92 = v54;
          operator delete(v56);
        }
        v22 = v89;
        if (v89)
        {
          v57 = v90;
          v24 = v89;
          if (v90 == v89)
            goto LABEL_75;
          do
          {
            v59 = (void *)*--v57;
            v58 = v59;
            *v57 = 0;
            if (v59)
              operator delete[](v58);
          }
          while (v57 != v22);
          goto LABEL_74;
        }
        goto LABEL_76;
      }
    }
    else
    {
      v76 = 259;
      mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
      if (v82)
      {
        v27 = &v79;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        v28 = (char *)v85;
        if (v86 >= v87)
        {
          v63 = v86 + 1;
          if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
          {
            v70 = (char *)&v79 - (_BYTE *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v63, 24);
            v28 = (char *)v85;
            v27 = (int *)((char *)v85 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v63, 24);
            v27 = &v79;
            v28 = (char *)v85;
          }
        }
        v29 = &v28[24 * v86];
        v30 = *(_OWORD *)v27;
        *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
        *(_OWORD *)v29 = v30;
        ++v86;
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      if (v93)
      {
        v31 = (_QWORD **)__p;
        if (__p)
        {
          v32 = v92;
          v33 = __p;
          if (v92 != __p)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = __p;
          }
          v92 = v31;
          operator delete(v33);
        }
        v22 = v89;
        if (v89)
        {
          v34 = v90;
          v24 = v89;
          if (v90 == v89)
            goto LABEL_75;
          do
          {
            v36 = (void *)*--v34;
            v35 = v36;
            *v34 = 0;
            if (v36)
              operator delete[](v35);
          }
          while (v34 != v22);
          goto LABEL_74;
        }
        goto LABEL_76;
      }
    }
  }
  else
  {
    v76 = 259;
    mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
    if (v82)
    {
      v15 = &v79;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v16 = (char *)v85;
      if (v86 >= v87)
      {
        v62 = v86 + 1;
        if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
        {
          v69 = (char *)&v79 - (_BYTE *)v85;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v62, 24);
          v16 = (char *)v85;
          v15 = (int *)((char *)v85 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v62, 24);
          v15 = &v79;
          v16 = (char *)v85;
        }
      }
      v17 = &v16[24 * v86];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      ++v86;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
    if (v82)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
    if (v93)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v92;
        v21 = __p;
        if (v92 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v92 = v19;
        operator delete(v21);
      }
      v22 = v89;
      if (v89)
      {
        v23 = v90;
        v24 = v89;
        if (v90 == v89)
          goto LABEL_75;
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
LABEL_74:
        v24 = v89;
LABEL_75:
        v90 = v22;
        operator delete(v24);
      }
LABEL_76:
      v60 = (char **)v85;
      if (v85 == v88)
        return v14;
      goto LABEL_77;
    }
  }
  return v14;
}

uint64_t mlir::mps::`anonymous namespace'::permuteShapeWithAxes(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char **a5, uint64_t a6, char *a7)
{
  char **v7;
  uint64_t v11;
  char **v12;
  char *v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v24;
  char *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;

  v28 = 0;
  v29 = (unint64_t)a7;
  v26 = &v27;
  v27 = 0;
  if (!a6)
  {
LABEL_20:
    v21 = 1;
    goto LABEL_21;
  }
  v7 = a5;
  v11 = 0;
  v12 = &a5[a6];
  while (1)
  {
    v13 = *v7;
    v14 = (int64_t)&(*v7)[v29 & ((uint64_t)*v7 >> 63)];
    v24 = (char *)v14;
    v25 = v13;
    if (v29 <= v14)
    {
      v20 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[7],char const(&)[15],unsigned long &>(a1, a2, "invalid axis (", &v25, ") for ", "input of rank ", (char **)&v29);
      goto LABEL_19;
    }
    v15 = v27;
    v16 = &v27;
    v17 = &v27;
    if (v27)
      break;
LABEL_12:
    v19 = (uint64_t *)operator new(0x28uLL);
    v19[4] = v14;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v17;
    *v16 = v19;
    if (*v26)
    {
      v26 = (uint64_t **)*v26;
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, *v16);
      ++v28;
      if (a4)
        goto LABEL_16;
    }
    else
    {
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, v19);
      ++v28;
      if (a4)
      {
LABEL_16:
        if (*(_BYTE *)(a3 + 16))
          *(_QWORD *)(*a4 + 8 * v11) = *(_QWORD *)(*(_QWORD *)a3 + 8 * v14);
      }
    }
    ++v11;
    if (++v7 == v12)
      goto LABEL_20;
  }
  while (1)
  {
    while (1)
    {
      v17 = (uint64_t **)v15;
      v18 = v15[4];
      if (v14 >= v18)
        break;
      v15 = *v17;
      v16 = v17;
      if (!*v17)
        goto LABEL_12;
    }
    if (v18 >= v14)
      break;
    v15 = v17[1];
    if (!v15)
    {
      v16 = v17 + 1;
      goto LABEL_12;
    }
  }
  v20 = mlir::emitOptionalError<char const(&)[37],char const(&)[6],unsigned long &,char const(&)[13]>(a1, a2, "axes in perm tensor must be unique, ", "axis ", &v24, " is repeated");
LABEL_19:
  v21 = v20;
LABEL_21:
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v26, v27);
  return v21;
}

uint64_t mlir::mps::OneHotOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, unint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t Value;
  void *v30;
  _QWORD *v31;
  uint64_t ElementTypeOrSelf;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v42 = a6;
  v43[0] = 0;
  v44 = 0;
  v45 = v14;
  v46 = a9;
  v47 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v42);
    if (v44)
      v44 = 0;
    mlir::OperationName::OperationName(v43, "mps.one_hot", 11, Context);
    v44 = 1;
  }
  v48 = a4;
  v49 = a5;
  if (a5)
  {
    v16 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::OneHotOpAdaptor::verify((uint64_t)&v42, v16))
    {
      v39 = v48;
      v40 = 0;
      v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      v39 = v48;
      v40 = 1;
      v39 = (void *)mlir::ValueRange::offset_base(&v39, 1);
      v40 = 0;
      v22 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
      else
        v22 = 0;
      v39 = v48;
      v40 = 2;
      v39 = (void *)mlir::ValueRange::offset_base(&v39, 2);
      v40 = 0;
      v23 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8))
      {
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
        v24 = v23 == 0;
      }
      else
      {
        v24 = 1;
      }
      v39 = &v41;
      v40 = 0x100000000;
      v37[0] = &v38;
      v37[1] = (void *)0x100000000;
      if (!v17)
        goto LABEL_29;
      if (!v22)
        goto LABEL_29;
      if (v24)
        goto LABEL_29;
      v50 = (unint64_t)v48;
      v51 = 1;
      v50 = mlir::ValueRange::offset_base(&v50, 1);
      v51 = 0;
      v25 = mlir::ValueRange::dereference_iterator(&v50, 0);
      if (!mlir::matchConstantWithIntVector<unsigned long long>(v25, (uint64_t)&v39))
        goto LABEL_29;
      v50 = (unint64_t)v48;
      v51 = 2;
      v50 = mlir::ValueRange::offset_base(&v50, 2);
      v51 = 0;
      v26 = mlir::ValueRange::dereference_iterator(&v50, 0);
      if (mlir::matchConstantWithIntVector<long long>(v26, (uint64_t)v37))
      {
        v36 = 0;
        v27 = *(_DWORD *)v39;
        v28 = *(_DWORD *)v37[0];
        v50 = v45;
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v36);
        v30 = v37[0];
        if (v37[0] == &v38)
        {
LABEL_33:
          if (v39 != &v41)
            free(v39);
          return 1;
        }
      }
      else
      {
LABEL_29:
        v50 = v45;
        v31 = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v31);
        v33 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        v34 = *(unsigned int *)(a11 + 8);
        if (v34 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
          LODWORD(v34) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v34) = v33;
        ++*(_DWORD *)(a11 + 8);
        v30 = v37[0];
        if (v37[0] == &v38)
          goto LABEL_33;
      }
      free(v30);
      goto LABEL_33;
    }
  }
  v19 = mlir::Float32Type::get(this, a2);
  v20 = mlir::UnrankedTensorType::get(v19);
  v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::OneHotOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v14[0] = *(_QWORD *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    v12 = "'mps.one_hot' op requires attribute 'resultElementType'";
    v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v20;
        v6 = __p;
        if (v20 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v20 = v4;
        operator delete(v6);
      }
      v7 = v17;
      if (v17)
      {
        v8 = v18;
        v9 = v17;
        if (v18 != v17)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v17;
        }
        v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v2;
}

void mlir::mps::`anonymous namespace'::inferOneHotReturnType(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *ArgAttrsAttr;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD v21[2];
  void *__dst;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = a2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
  if (a4 >= 0)
    v11 = 0;
  else
    v11 = v10;
  v12 = v11 + a4;
  if (v11 + a4 < 0
    || (v13 = (v11 + a4),
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21),
        v12 >= v14))
  {
    *a6 = mlir::UnrankedTensorType::get(a5);
  }
  else
  {
    __dst = v24;
    v23 = 0x1000000000;
    ArgAttrsAttr = (char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
    v17 = v15;
    v18 = v23;
    if (v15 != v23)
    {
      if (v15 >= v23)
      {
        if (v15 > HIDWORD(v23))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v24, v15, 8);
          v18 = v23;
        }
        if (v17 != v18)
          bzero((char *)__dst + 8 * v18, 8 * (v17 - v18));
      }
      LODWORD(v23) = v17;
    }
    v19 = (char *)__dst;
    if (v12)
    {
      memmove(__dst, ArgAttrsAttr, 8 * v13);
      v19 = (char *)__dst;
    }
    v20 = &v19[8 * v13];
    *(_QWORD *)v20 = a3;
    if (v17 != v13)
    {
      memmove(v20 + 8, &ArgAttrsAttr[8 * v13], 8 * v17 - 8 * v13);
      v19 = (char *)__dst;
    }
    *a6 = mlir::RankedTensorType::get((uint64_t)v19, v23, a5, 0);
    if (__dst != v24)
      free(__dst);
  }
}

uint64_t mlir::mps::OneHotOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  const void **v49;
  __int16 v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  _QWORD v57[3];
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[96];
  void *v62;
  _QWORD *v63;
  void *__p;
  _QWORD **v65;
  char v66;
  void *v67[2];
  _QWORD v68[2];

  v68[1] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    v52 = 0;
    v53 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
      goto LABEL_3;
    return 1;
  }
  v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  v52 = v2;
  v53 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
    return 1;
LABEL_3:
  v67[0] = v68;
  v67[1] = (void *)0x100000000;
  if (mlir::matchConstantWithIntVector<long long>(*(_QWORD *)((*this)[9] + 88), (uint64_t)v67))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
    v5 = v4;
    v51 = 0;
    {
      v7 = v5 - 1;
      v8 = *(const char **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                          + 8 * ((_DWORD)v5 - 1));
      v9 = 1;
      if (v8 != (const char *)0x8000000000000000 && v8 != (const char *)1)
      {
        v50 = 259;
        mlir::OpState::emitOpError(this, &v49, (uint64_t)v57);
        if (v57[0])
        {
          v54 = 2;
          v55 = v8;
          v10 = &v54;
          v11 = (char *)v58;
          if (v59 >= v60)
          {
            v38 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              v45 = (char *)&v54 - (_BYTE *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v38, 24);
              v11 = (char *)v58;
              v10 = (int *)((char *)v58 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v38, 24);
              v10 = &v54;
              v11 = (char *)v58;
            }
          }
          v12 = &v11[24 * v59];
          v13 = *(_OWORD *)v10;
          *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v12 = v13;
          v14 = ++v59;
          if (v57[0])
          {
            v54 = 3;
            v56 = 17;
            v15 = &v54;
            v16 = (char *)v58;
            if (v14 >= v60)
            {
              v39 = v14 + 1;
              v40 = (char *)v58 + 24 * v14 > (char *)&v54;
              if (v58 <= &v54 && v40)
              {
                v46 = (char *)&v54 - (_BYTE *)v58;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v39, 24);
                v16 = (char *)v58;
                v15 = (int *)((char *)v58 + v46);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v39, 24);
                v15 = &v54;
                v16 = (char *)v58;
              }
            }
            v17 = &v16[24 * v59];
            v18 = *(_OWORD *)v15;
            *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
            *(_OWORD *)v17 = v18;
            v19 = ++v59;
            if (v57[0])
            {
              v54 = 2;
              v55 = v7;
              v20 = &v54;
              v21 = (char *)v58;
              if (v19 >= v60)
              {
                v41 = v19 + 1;
                v42 = (char *)v58 + 24 * v19 > (char *)&v54;
                if (v58 <= &v54 && v42)
                {
                  v47 = (char *)&v54 - (_BYTE *)v58;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
                  v21 = (char *)v58;
                  v20 = (int *)((char *)v58 + v47);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
                  v20 = &v54;
                  v21 = (char *)v58;
                }
              }
              v22 = &v21[24 * v59];
              v23 = *(_OWORD *)v20;
              *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v22 = v23;
              v24 = ++v59;
              if (v57[0])
              {
                v54 = 3;
                v55 = ".";
                v56 = 1;
                v25 = &v54;
                v26 = (char *)v58;
                if (v24 >= v60)
                {
                  v43 = v24 + 1;
                  v44 = (char *)v58 + 24 * v24 > (char *)&v54;
                  if (v58 <= &v54 && v44)
                  {
                    v48 = (char *)&v54 - (_BYTE *)v58;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
                    v26 = (char *)v58;
                    v25 = (int *)((char *)v58 + v48);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
                    v25 = &v54;
                    v26 = (char *)v58;
                  }
                }
                v27 = &v26[24 * v59];
                v28 = *(_OWORD *)v25;
                *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
                *(_OWORD *)v27 = v28;
                ++v59;
              }
            }
          }
        }
        v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
        if (v57[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
        if (v66)
        {
          v29 = (_QWORD **)__p;
          if (__p)
          {
            v30 = v65;
            v31 = __p;
            if (v65 != __p)
            {
              do
                v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
              while (v30 != v29);
              v31 = __p;
            }
            v65 = v29;
            operator delete(v31);
          }
          v32 = v62;
          if (v62)
          {
            v33 = v63;
            v34 = v62;
            if (v63 != v62)
            {
              do
              {
                v36 = (void *)*--v33;
                v35 = v36;
                *v33 = 0;
                if (v36)
                  operator delete[](v35);
              }
              while (v33 != v32);
              v34 = v62;
            }
            v63 = v32;
            operator delete(v34);
          }
          if (v58 != v61)
            free(v58);
        }
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }
  if (v67[0] != v68)
    free(v67[0]);
  return v9;
}

uint64_t mlir::mps::`anonymous namespace'::validateSingleAxis(mlir::mps::_anonymous_namespace_ *this, uint64_t a2, const char *a3, const char **a4, uint64_t *a5)
{
  const char *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  BOOL v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48;
  __int16 v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = (const char *)(((unint64_t)a3 & (a2 >> 63)) + a2);
  if ((uint64_t)v7 < 0 || (uint64_t)v7 >= (uint64_t)a3)
  {
    v48 = (const void **)"invalid axis: ";
    v49 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v48, (uint64_t)v53);
    if (v53[0])
    {
      v50 = 2;
      v51 = (const char *)a2;
      v9 = &v50;
      v10 = (char *)v54;
      if (v55 >= v56)
      {
        v37 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          v44 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          v10 = (char *)v54;
          v9 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          v9 = &v50;
          v10 = (char *)v54;
        }
      }
      v11 = &v10[24 * v55];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v55;
      if (v53[0])
      {
        v50 = 3;
        v51 = ", axis must be in ";
        v52 = 18;
        v14 = &v50;
        v15 = (char *)v54;
        if (v13 >= v56)
        {
          v38 = v13 + 1;
          v39 = (char *)v54 + 24 * v13 > (char *)&v50;
          if (v54 <= &v50 && v39)
          {
            v45 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            v15 = (char *)v54;
            v14 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            v14 = &v50;
            v15 = (char *)v54;
          }
        }
        v16 = &v15[24 * v55];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        v18 = ++v55;
        if (v53[0])
        {
          v50 = 3;
          v51 = "range - rank <= axis < rank, rank = ";
          v52 = 36;
          v19 = &v50;
          v20 = (char *)v54;
          if (v18 >= v56)
          {
            v40 = v18 + 1;
            v41 = (char *)v54 + 24 * v18 > (char *)&v50;
            if (v54 <= &v50 && v41)
            {
              v46 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              v20 = (char *)v54;
              v19 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              v19 = &v50;
              v20 = (char *)v54;
            }
          }
          v21 = &v20[24 * v55];
          v22 = *(_OWORD *)v19;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v21 = v22;
          v23 = ++v55;
          if (v53[0])
          {
            v50 = 2;
            v51 = a3;
            v24 = &v50;
            v25 = (char *)v54;
            if (v23 >= v56)
            {
              v42 = v23 + 1;
              v43 = (char *)v54 + 24 * v23 > (char *)&v50;
              if (v54 <= &v50 && v43)
              {
                v47 = (char *)&v50 - (_BYTE *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                v25 = (char *)v54;
                v24 = (int *)((char *)v54 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                v24 = &v50;
                v25 = (char *)v54;
              }
            }
            v26 = &v25[24 * v55];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v55;
          }
        }
      }
    }
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v62)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v61;
        v30 = __p;
        if (v61 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v61 = v28;
        operator delete(v30);
      }
      v31 = v58;
      if (v58)
      {
        v32 = v59;
        v33 = v58;
        if (v59 != v58)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = v58;
        }
        v59 = v31;
        operator delete(v33);
      }
      if (v54 != v57)
        free(v54);
    }
  }
  else
  {
    *a4 = v7;
    return 1;
  }
  return v8;
}

uint64_t mlir::mps::ScatterNDOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int BatchDims;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  uint64_t v53;
  _BYTE v54[8];
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD v61[4];

  v61[2] = *MEMORY[0x1E0C80C00];
  v61[0] = a4;
  v61[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v53 = a6;
  v54[0] = 0;
  v55 = 0;
  v56 = v16;
  v57 = a9;
  v58 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v53);
    if (v55)
      v55 = 0;
    mlir::OperationName::OperationName(v54, "mps.scatter_nd", 14, Context);
    v55 = 1;
  }
  v59 = a4;
  v60 = a5;
  if (a5 >= 3)
  {
    v18 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::ScatterNDOpAdaptor::verify((uint64_t)&v53, v18))
    {
      v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v61, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
      {
        v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v26 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v61, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
      {
        v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
      v28 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v61, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8))
      {
        v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
        if (!v19)
          goto LABEL_32;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        if (!v19)
        {
LABEL_32:
          v33 = mlir::ValueRange::dereference_iterator(v61, 0);
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v33);
          if (!ElementTypeOrSelf)
            ElementTypeOrSelf = mlir::Float32Type::get(this, v35);
          v36 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
          v37 = a11[2];
          if (v37 >= a11[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v37 + 1, 8);
            v37 = a11[2];
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v36;
          goto LABEL_14;
        }
      }
      if (!v26 || !v28)
        goto LABEL_32;
      v46 = v19;
      v47 = v20;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
        if (!v31)
          goto LABEL_42;
        v32 = 8 * v31;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v32 -= 8;
          if (!v32)
            goto LABEL_42;
        }
      }
      {
LABEL_42:
        v22 = (uint64_t)v46;
        v23 = a11[2];
        if (v23 >= a11[3])
          goto LABEL_43;
        goto LABEL_13;
      }
      BatchDims = mlir::mps::detail::ScatterNDOpGenericAdaptorBase::getBatchDims((mlir::mps::detail::ScatterNDOpGenericAdaptorBase *)&v53);
      v50 = v52;
      v51 = 0x400000000;
      if (v39)
      {
        v24 = (uint64_t)v50;
        v40 = v51;
        v41 = mlir::getElementTypeOrSelf(v19);
        *(_QWORD *)&v48 = v24;
        *((_QWORD *)&v48 + 1) = v40;
        v49 = 1;
        v46 = (_QWORD *)mlir::ShapedType::cloneWith((uint64_t *)&v46, &v48, v41);
        v47 = v42;
        v43 = v50;
        if (v50 == v52)
          goto LABEL_41;
      }
      else
      {
        v44 = mlir::ValueRange::dereference_iterator(v61, 0);
        v45 = mlir::getElementTypeOrSelf(v44);
        v43 = v50;
        if (v50 == v52)
        {
LABEL_41:
          if (!v39)
            return v24;
          goto LABEL_42;
        }
      }
      free(v43);
      goto LABEL_41;
    }
  }
  v21 = mlir::Float32Type::get(this, a2);
  v22 = mlir::UnrankedTensorType::get(v21);
  v23 = a11[2];
  if (v23 >= a11[3])
  {
LABEL_43:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v23 + 1, 8);
    LODWORD(v23) = a11[2];
  }
LABEL_13:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v23) = v22;
LABEL_14:
  ++a11[2];
  return 1;
}

uint64_t mlir::mps::ScatterNDOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v25[0] = *(_QWORD *)(a1 + 24);
      v27[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v25);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)v27, 32))
        return 1;
      v25[0] = "'mps.scatter_nd' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
      v26 = 259;
      mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
      v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
      if (v27[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
      if (v34)
      {
        v18 = (_QWORD **)__p;
        if (__p)
        {
          v19 = v33;
          v20 = __p;
          if (v33 != __p)
          {
            do
              v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            v20 = __p;
          }
          v33 = v18;
          operator delete(v20);
        }
        v7 = v30;
        if (!v30)
          goto LABEL_49;
        v21 = v31;
        v9 = v30;
        if (v31 == v30)
        {
LABEL_48:
          v31 = v7;
          operator delete(v9);
LABEL_49:
          if (v28 != &v29)
            free(v28);
          return v3;
        }
        do
        {
          v23 = (void *)*--v21;
          v22 = v23;
          *v21 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v21 != v7);
LABEL_47:
        v9 = v30;
        goto LABEL_48;
      }
    }
    else
    {
      v25[0] = "'mps.scatter_nd' op requires attribute 'mode'";
      v26 = 259;
      mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
      v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
      if (v27[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
      if (v34)
      {
        v12 = (_QWORD **)__p;
        if (__p)
        {
          v13 = v33;
          v14 = __p;
          if (v33 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v33 = v12;
          operator delete(v14);
        }
        v7 = v30;
        if (!v30)
          goto LABEL_49;
        v15 = v31;
        v9 = v30;
        if (v31 == v30)
          goto LABEL_48;
        do
        {
          v17 = (void *)*--v15;
          v16 = v17;
          *v15 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v15 != v7);
        goto LABEL_47;
      }
    }
  }
  else
  {
    v25[0] = "'mps.scatter_nd' op requires attribute 'batch_dims'";
    v26 = 259;
    mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v33;
        v6 = __p;
        if (v33 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v33 = v4;
        operator delete(v6);
      }
      v7 = v30;
      if (!v30)
        goto LABEL_49;
      v8 = v31;
      v9 = v30;
      if (v31 == v30)
        goto LABEL_48;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_47;
    }
  }
  return v3;
}

BOOL mlir::mps::`anonymous namespace'::scatterNDRankInferrable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12) & 1) != 0)
    return 1;
  v7 = 0x8000000000000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v10))
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v10);
    v7 = *(_QWORD *)(ArgAttrsAttr + 8 * v9 - 8);
  }
  return mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v11) && v7 != 0x8000000000000000;
}

void *mlir::mps::detail::ScatterNDOpGenericAdaptorBase::getBatchDims(mlir::mps::detail::ScatterNDOpGenericAdaptorBase *this)
{
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v2 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::`anonymous namespace'::inferScatterNDShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  unint64_t v12;
  const void *ArgAttrsAttr;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v27;
  BOOL v28;
  char **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char **v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v43[0] = a3;
  v43[1] = a4;
  v42[0] = a5;
  v42[1] = a6;
  v41[0] = a7;
  v41[1] = a8;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43))
  {
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
    v14 = v12;
    v15 = *(unsigned int *)(a10 + 8);
    if (v12 != v15)
    {
      if (v12 >= v15)
      {
        if (v12 > *(unsigned int *)(a10 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v12, 8);
          v15 = *(unsigned int *)(a10 + 8);
        }
        if (v14 != v15)
          bzero((void *)(*(_QWORD *)a10 + 8 * v15), 8 * (v14 - v15));
      }
      *(_DWORD *)(a10 + 8) = v14;
    }
    if (v14)
      memmove(*(void **)a10, ArgAttrsAttr, 8 * v14);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43))
    {
      v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
      if (!v17)
        return 1;
      v18 = 8 * v17;
      while (*v16 != 0x8000000000000000)
      {
        ++v16;
        v18 -= 8;
        if (!v18)
          return 1;
      }
    }
  }
  else
  {
    v14 = 0x8000000000000000;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v41)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42))
  {
    return 1;
  }
  v19 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  v21 = v20;
  v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
  v40 = v21;
  v24 = v22 - 1;
  v25 = v23[v22 - 1];
  v39 = (char *)v25;
  if (v25 == 0x8000000000000000)
  {
    if (v14 == 0x8000000000000000)
      return 1;
    v25 = v14 - (_QWORD)&v21[a9] + v24;
    v39 = (char *)v25;
  }
  if (v25 <= 0)
    return mlir::emitOptionalError<char const(&)[36],char const(&)[49],long long &,char const(&)[6]>(a1, a2, "invalid input tensor shapes: minor ", "dimension of indices must have positive length, ", &v39, " <= 0");
  if (v24 > (uint64_t)v21)
  {
    v44 = (char *)(v22 - 1);
    return mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(a1, a2, "invalid input tensor shapes: requires ", "|updates| >= |indices| - 1, ", &v40, " < ", &v44);
  }
  v27 = (unint64_t)&v21[a9 - v22 + 1 + v25];
  if (v14 != 0x8000000000000000)
  {
    v28 = v14 == v27;
    v27 = v14;
    if (!v28)
      return mlir::emitOptionalError<char const(&)[31],char const(&)[45],char const(&)[25]>(a1, a2, "Rank of data array must equal ", "number of outer dimensions in index array + ", "rank of slice to update.");
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43) & 1) == 0)
    llvm::SmallVectorImpl<long long>::assign(a10, v27, 0x8000000000000000);
  if (a9)
  {
    v29 = *(char ***)a10;
    v30 = 8 * a9;
    v31 = (uint64_t *)v19;
    do
    {
      v44 = *v29;
      v32 = *v23++;
      v45 = v32;
      v33 = *v31++;
      v46 = v33;
      *v29++ = (char *)mlir::mps::mergeDynamicDims((unint64_t *)&v44, 3);
      v30 -= 8;
    }
    while (v30);
  }
  v34 = v19 + 8 * (_QWORD)v21;
  if (v34 != v34 - 8 * v27 + 8 * v25 + 8 * a9)
  {
    v35 = 8 * (v25 + a9) - 8 * v27;
    v36 = (uint64_t *)(v34 - 8);
    v37 = (char **)(*(_QWORD *)a10 + 8 * *(unsigned int *)(a10 + 8) - 8);
    do
    {
      v44 = *v37;
      v38 = *v36--;
      v45 = v38;
      *v37-- = (char *)mlir::mps::mergeDynamicDims((unint64_t *)&v44, 2);
      v35 += 8;
    }
    while (v35);
  }
  return 1;
}

uint64_t mlir::mps::ScatterNDOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  const void ***v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  const void **v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const void *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t p_p;
  const void ****v53;
  char *v54;
  char *v55;
  __int128 v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  const void ****v65;
  char *v66;
  char *v67;
  __int128 v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  const void ****v75;
  char *v76;
  char *v77;
  __int128 v78;
  _QWORD **v79;
  _QWORD **v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  unint64_t v106;
  unint64_t v107;
  const void **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  const void ***v113;
  const char *v114;
  uint64_t v115;
  __int16 v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD v121[2];
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  const void **v126;
  uint64_t v127;
  _WORD v128[16];
  void *__p;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  unsigned int v133;
  unsigned int v134;
  _BYTE v135[96];
  void *v136;
  _QWORD *v137;
  void *v138;
  _QWORD **v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = (_QWORD *)(*this)[9];
    v124 = v3;
    v125 = v4;
    v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
      goto LABEL_3;
LABEL_6:
    v122 = v5;
    v123 = 0;
    v8 = (_QWORD *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  v124 = 0;
  v125 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v7 = (*this)[9];
  v122 = v5;
  v123 = v6;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
  {
LABEL_4:
    v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    goto LABEL_8;
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  v121[0] = v8;
  v121[1] = v9;
  v10 = 0x8000000000000000;
  v118 = 0x8000000000000000;
  v119 = 0x8000000000000000;
  v120 = 0x8000000000000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
  {
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122);
    v10 = v12;
    v120 = v12;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
      goto LABEL_10;
LABEL_13:
    v13 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v121);
    v15 = v18;
    v14 = v13[v18 - 1];
    v118 = v14;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
      goto LABEL_11;
    goto LABEL_14;
  }
  ArgAttrsAttr = 0;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
    goto LABEL_13;
LABEL_10:
  v13 = 0;
  v14 = 0x8000000000000000;
  v15 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
  {
LABEL_11:
    v16 = 0;
    v17 = 0x8000000000000000;
    goto LABEL_15;
  }
LABEL_14:
  v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
  v17 = v19;
  v119 = v19;
LABEL_15:
  v126 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v126, (llvm::APInt *)&__p);
  if (v130 > 0x40)
  {
    v20 = *(unsigned int *)__p;
    operator delete[](__p);
    if (v10 == 0x8000000000000000)
      goto LABEL_20;
  }
  else
  {
    v20 = __p;
    if (v10 == 0x8000000000000000)
      goto LABEL_20;
  }
  if (v20 >= v10)
    goto LABEL_24;
LABEL_20:
  if ((v15 == 0x8000000000000000 || v20 < v15) && (v17 == 0x8000000000000000 || v20 < v17))
  {
    v106 = v14;
    v107 = v17;
    v126 = (const void **)v128;
    v127 = 0x400000000;
    if (v20)
    {
      if (v20 < 5)
      {
        v41 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v20, 8);
        v41 = v127;
      }
      if (v20 != v41)
        bzero(&v126[v41], 8 * (v20 - v41));
      v42 = 0;
      LODWORD(v127) = v20;
      do
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
        {
          v45 = (void *)ArgAttrsAttr[v42];
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
            goto LABEL_59;
        }
        else
        {
          v45 = (void *)0x8000000000000000;
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
          {
LABEL_59:
            v46 = 0x8000000000000000;
            if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
              goto LABEL_63;
            goto LABEL_55;
          }
        }
        v46 = v13[v42];
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
        {
LABEL_63:
          v43 = 0x8000000000000000;
          goto LABEL_56;
        }
LABEL_55:
        v43 = v16[v42];
LABEL_56:
        __p = v45;
        v130 = v46;
        v131 = v43;
        v44 = (const void *)mlir::mps::mergeDynamicDims((unint64_t *)&__p, 3);
        v126[v42++] = v44;
      }
      while (v20 != v42);
    }
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122) & 1) != 0
      && !mlir::verifyCompatibleShape(ArgAttrsAttr, v20, v126, v127))
    {
      v108 = (const void **)"invalid updates tensor shape: input tensor shapes ";
      v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        v114 = "must match along batch dimensions";
        v115 = 33;
        v53 = &v113;
        v54 = (char *)v132;
        if (v133 >= v134)
        {
          v98 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            v103 = (char *)&v113 - (_BYTE *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v98, 24);
            v54 = (char *)v132;
            v53 = (const void ****)((char *)v132 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v98, 24);
            v53 = &v113;
            v54 = (char *)v132;
          }
        }
        v55 = &v54[24 * v133];
        v56 = *(_OWORD *)v53;
        *((_QWORD *)v55 + 2) = v53[2];
        *(_OWORD *)v55 = v56;
        ++v133;
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v140)
      {
        v57 = (_QWORD **)v138;
        if (v138)
        {
          v58 = v139;
          v59 = v138;
          if (v139 != v138)
          {
            do
              v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
            while (v58 != v57);
            v59 = v138;
          }
          v139 = v57;
          operator delete(v59);
        }
        v60 = v136;
        if (v136)
        {
          v61 = v137;
          v62 = v136;
          if (v137 == v136)
            goto LABEL_126;
          do
          {
            v64 = (void *)*--v61;
            v63 = v64;
            *v61 = 0;
            if (v64)
              operator delete[](v63);
          }
          while (v61 != v60);
LABEL_125:
          v62 = v136;
LABEL_126:
          v137 = v60;
          operator delete(v62);
        }
LABEL_127:
        if (v132 != v135)
        {
          free(v132);
          v39 = v126;
          if (v126 == (const void **)v128)
            return v30;
          goto LABEL_46;
        }
      }
    }
    else if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)
           && !mlir::verifyCompatibleShape(v13, v20, v126, v127))
    {
      v108 = (const void **)"invalid indices tensor shape: input tensor shapes ";
      v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        v114 = "must match along batch dimensions";
        v115 = 33;
        v65 = &v113;
        v66 = (char *)v132;
        if (v133 >= v134)
        {
          v99 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            v104 = (char *)&v113 - (_BYTE *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v99, 24);
            v66 = (char *)v132;
            v65 = (const void ****)((char *)v132 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v99, 24);
            v65 = &v113;
            v66 = (char *)v132;
          }
        }
        v67 = &v66[24 * v133];
        v68 = *(_OWORD *)v65;
        *((_QWORD *)v67 + 2) = v65[2];
        *(_OWORD *)v67 = v68;
        ++v133;
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v140)
      {
        v69 = (_QWORD **)v138;
        if (v138)
        {
          v70 = v139;
          v71 = v138;
          if (v139 != v138)
          {
            do
              v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            v71 = v138;
          }
          v139 = v69;
          operator delete(v71);
        }
        v60 = v136;
        if (v136)
        {
          v72 = v137;
          v62 = v136;
          if (v137 == v136)
            goto LABEL_126;
          do
          {
            v74 = (void *)*--v72;
            v73 = v74;
            *v72 = 0;
            if (v74)
              operator delete[](v73);
          }
          while (v72 != v60);
          goto LABEL_125;
        }
        goto LABEL_127;
      }
    }
    else
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)
        || mlir::verifyCompatibleShape(v16, v20, v126, v127))
      {
        v47 = v107;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
        {
          goto LABEL_141;
        }
        v48 = v15 - 1;
        if ((uint64_t)v10 < (uint64_t)(v15 - 1))
        {
          v108 = (const void **)"invalid input tensor shapes: requires ";
          v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          v49 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "|updates| >= |indices| - 1, ");
          v50 = mlir::InFlightDiagnostic::operator<<<long long &>(v49, &v120);
          v51 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v50, " < ");
          v113 = (const void ***)(v15 - 1);
          p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v51, (uint64_t *)&v113);
          goto LABEL_148;
        }
        v85 = v106;
        if (v106 == 0x8000000000000000)
        {
          if (v107 == 0x8000000000000000 || (v85 = v48 - (v20 + v10) + v107, v118 = v85, v85 == 0x8000000000000000))
          {
            v108 = (const void **)"invalid input tensor shapes: minor dimension of indices was dynamic and could not be inferred";
            v109 = 93;
            v110 = 0;
            v111 = 0;
            v116 = 263;
            v113 = &v108;
            mlir::OpState::emitOpError(this, (const void ***)&v113, (uint64_t)&__p);
            p_p = (uint64_t)&__p;
            goto LABEL_148;
          }
        }
        else if (v107 == 0x8000000000000000)
        {
          v119 = v20 - v15 + v10 + v106 + 1;
          v47 = v119;
        }
        else if (v107 != v20 - v15 + v10 + v106 + 1)
        {
          v108 = (const void **)"Rank of data array must equal number of outer ";
          v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          v89 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "dimensions in indices array + rank of slice to update, ");
          v90 = mlir::InFlightDiagnostic::operator<<<long long &>(v89, (uint64_t *)&v119);
          v91 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v90, " != ");
          v113 = (const void ***)(v106 + v20);
          v92 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v91, (uint64_t *)&v113);
          v93 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v92, " + ");
          v117 = v10 - (v15 - 1);
          p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v93, (uint64_t *)&v117);
          goto LABEL_148;
        }
        if (v85 <= 0)
        {
          v108 = (const void **)"invalid input tensor shapes: minor dimension of ";
          v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          v87 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "indices must have positive length, ");
          v88 = mlir::InFlightDiagnostic::operator<<<long long &>(v87, &v118);
          p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v88, " <= 0");
        }
        else
        {
          v86 = v10 - (v15 - 1);
          if (mlir::verifyCompatibleShape(&ArgAttrsAttr[v20], v48 - v20, &v13[v20], v48 - v20))
          {
            if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)
              || mlir::verifyCompatibleShape(&ArgAttrsAttr[v48], v86, &v16[v85 + v20], v47 - (v85 + v20)))
            {
LABEL_141:
              v30 = 1;
              goto LABEL_142;
            }
            v108 = (const void **)"invalid input tensor shape: updates tensor ";
            v112 = 259;
            mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
            p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "shape and data tensor shape must match along inner dimensions");
          }
          else
          {
            v108 = (const void **)"invalid input tensor shape: updates tensor ";
            v112 = 259;
            mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
            v94 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "shape and indices tensor shape must match along outer ");
            p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v94, "dimensions");
          }
        }
LABEL_148:
        v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
        v39 = v126;
        if (v126 == (const void **)v128)
          return v30;
        goto LABEL_46;
      }
      v108 = (const void **)"invalid data tensor shape: input tensor shapes ";
      v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        v114 = "must match along batch dimensions";
        v115 = 33;
        v75 = &v113;
        v76 = (char *)v132;
        if (v133 >= v134)
        {
          v100 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            v105 = (char *)&v113 - (_BYTE *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v100, 24);
            v76 = (char *)v132;
            v75 = (const void ****)((char *)v132 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v100, 24);
            v75 = &v113;
            v76 = (char *)v132;
          }
        }
        v77 = &v76[24 * v133];
        v78 = *(_OWORD *)v75;
        *((_QWORD *)v77 + 2) = v75[2];
        *(_OWORD *)v77 = v78;
        ++v133;
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v140)
      {
        v79 = (_QWORD **)v138;
        if (v138)
        {
          v80 = v139;
          v81 = v138;
          if (v139 != v138)
          {
            do
              v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            v81 = v138;
          }
          v139 = v79;
          operator delete(v81);
        }
        v60 = v136;
        if (v136)
        {
          v82 = v137;
          v62 = v136;
          if (v137 == v136)
            goto LABEL_126;
          do
          {
            v84 = (void *)*--v82;
            v83 = v84;
            *v82 = 0;
            if (v84)
              operator delete[](v83);
          }
          while (v82 != v60);
          goto LABEL_125;
        }
        goto LABEL_127;
      }
    }
LABEL_142:
    v39 = v126;
    if (v126 == (const void **)v128)
      return v30;
    goto LABEL_46;
  }
LABEL_24:
  v126 = (const void **)"invalid batch dimensions: ";
  v128[8] = 259;
  mlir::OpState::emitOpError(this, &v126, (uint64_t)&__p);
  if (__p)
  {
    LODWORD(v108) = 5;
    v109 = v20;
    v21 = &v108;
    v22 = (char *)v132;
    if (v133 >= v134)
    {
      v95 = v133 + 1;
      if (v132 <= &v108 && (char *)v132 + 24 * v133 > (char *)&v108)
      {
        v101 = (char *)&v108 - (_BYTE *)v132;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v95, 24);
        v22 = (char *)v132;
        v21 = (const void ***)((char *)v132 + v101);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v95, 24);
        v21 = &v108;
        v22 = (char *)v132;
      }
    }
    v23 = &v22[24 * v133];
    v24 = *(_OWORD *)v21;
    *((_QWORD *)v23 + 2) = v21[2];
    *(_OWORD *)v23 = v24;
    v25 = ++v133;
    if (__p)
    {
      LODWORD(v108) = 3;
      v109 = (uint64_t)", must be less than ranks of all input tensors";
      v110 = 46;
      v26 = &v108;
      v27 = (char *)v132;
      if (v25 >= v134)
      {
        v96 = v25 + 1;
        v97 = (char *)v132 + 24 * v25 > (char *)&v108;
        if (v132 <= &v108 && v97)
        {
          v102 = (char *)&v108 - (_BYTE *)v132;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v96, 24);
          v27 = (char *)v132;
          v26 = (const void ***)((char *)v132 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v96, 24);
          v26 = &v108;
          v27 = (char *)v132;
        }
      }
      v28 = &v27[24 * v133];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = v26[2];
      *(_OWORD *)v28 = v29;
      ++v133;
    }
  }
  v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v140)
  {
    v31 = (_QWORD **)v138;
    if (v138)
    {
      v32 = v139;
      v33 = v138;
      if (v139 != v138)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = v138;
      }
      v139 = v31;
      operator delete(v33);
    }
    v34 = v136;
    if (v136)
    {
      v35 = v137;
      v36 = v136;
      if (v137 != v136)
      {
        do
        {
          v38 = (void *)*--v35;
          v37 = v38;
          *v35 = 0;
          if (v38)
            operator delete[](v37);
        }
        while (v35 != v34);
        v36 = v136;
      }
      v137 = v34;
      operator delete(v36);
    }
    v39 = (const void **)v132;
    if (v132 != v135)
LABEL_46:
      free(v39);
  }
  return v30;
}

uint64_t mlir::mps::getAxis(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DefiningOp;
  int64_t SingleInt;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v14 = a4;
  v15 = (uint64_t **)&v16;
  v18 = a3;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v15, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<long long>(v16, v17);
  v16 = SingleInt;
  v17 = v11;
  v12 = 1;
  if ((_BYTE)v11)
  {
    *(_QWORD *)a5 = SingleInt;
    *(_BYTE *)(a5 + 8) = 1;
    if (SingleInt < 0)
    {
      SingleInt += a4;
      *(_QWORD *)a5 = SingleInt;
      if (SingleInt < 0)
        return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
    }
    if (SingleInt >= a4)
      return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
  }
  return v12;
}

uint64_t mlir::mps::ScatterOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  BOOL v20;
  _QWORD *Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t ElementTypeOrSelf;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47[2];
  void *__dst;
  uint64_t v49;
  _BYTE v50[32];
  _QWORD v51[3];

  v51[2] = *MEMORY[0x1E0C80C00];
  v51[0] = a4;
  v51[1] = a5;
  if (a5 != 4)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v51, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = (_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v16 = 0;
  }
  v46 = v16;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v51, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(void **)(*(_QWORD *)v17 + 136);
  if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v17 = 0;
  }
  v45 = v17;
  if (v16)
    v20 = v17 == 0;
  else
    v20 = 1;
  if (v20)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot scatter a non-tensor type");
  v44 = (uint64_t)v16;
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v44))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
    if (!v24)
      goto LABEL_41;
    v25 = 8 * v24;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v25 -= 8;
      if (!v25)
        goto LABEL_41;
    }
  }
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v45))
  {
    v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
    v28 = v27;
    LOBYTE(v42) = 0;
    v43 = 0;
    v29 = mlir::ValueRange::dereference_iterator(v51, 3);
    if (!mlir::mps::getAxis(a2, a3, v29, v28, (uint64_t)&v42))
      return 0;
    if (v43)
    {
      __dst = v50;
      v49 = 0x400000000;
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v46))
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v28);
        v30 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
        v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
        v33 = (_BYTE *)(v31 + 8 * v32);
        if (v33 != v30)
          memmove(__dst, v30, v33 - v30);
      }
      else
      {
        llvm::SmallVectorImpl<long long>::assign((uint64_t)&__dst, v28, 0x8000000000000000);
      }
      if (v28 >= 1)
      {
        v34 = 0;
        v35 = v42;
        do
        {
          if (v35 != v34)
          {
            v47[0] = *((_QWORD *)__dst + v34);
            v47[1] = *(_QWORD *)(v26 + 8 * v34);
            v36 = mlir::mps::mergeDynamicDims(v47, 2);
            *((_QWORD *)__dst + v34) = v36;
          }
          ++v34;
        }
        while (v28 != v34);
      }
      v37 = __dst;
      v38 = v49;
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v46);
      v44 = mlir::RankedTensorType::get((uint64_t)v37, v38, ElementTypeOrSelf, 0);
      if (__dst != v50)
        free(__dst);
    }
  }
LABEL_41:
  v40 = v44;
  v41 = *(unsigned int *)(a11 + 8);
  if (v41 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
    LODWORD(v41) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v41) = v40;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void llvm::SmallVectorImpl<long long>::assign(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _DWORD *v6;
  int64x2_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int64x2_t v10;
  int64x2_t *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  int64x2_t *v23;
  unint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  unint64_t v28;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v14 = *(unint64_t **)a1;
    v13 = (_DWORD *)(a1 + 8);
    v15 = *(unsigned int *)(a1 + 8);
    if (v15 >= a2)
      v16 = a2;
    else
      v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      if (v16 < 4)
      {
        v17 = *(unint64_t **)a1;
        v18 = v16;
        do
        {
LABEL_19:
          *v17++ = a3;
          --v18;
        }
        while (v18);
        goto LABEL_20;
      }
      v17 = &v14[v16 & 0xFFFFFFFC];
      v18 = v16 & 3;
      v19 = vdupq_n_s64(a3);
      v20 = (int64x2_t *)(v14 + 2);
      v21 = v16 & 0xFFFFFFFC;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFC))
        goto LABEL_19;
    }
LABEL_20:
    v22 = a2 - v15;
    if (a2 > v15)
    {
      v23 = (int64x2_t *)&v14[v15];
      if (v22 >= 4)
      {
        v24 = (unint64_t *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
        v25 = v22 & 3;
        v26 = vdupq_n_s64(a3);
        v27 = v23 + 1;
        v28 = v22 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v26;
          *v27 = v26;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_7;
      }
      else
      {
        v24 = &v14[v15];
        v25 = a2 - v15;
      }
      do
      {
        *v24++ = a3;
        --v25;
      }
      while (v25);
    }
LABEL_7:
    *v13 = a2;
    return;
  }
  *(_DWORD *)(a1 + 8) = 0;
  v6 = (_DWORD *)(a1 + 8);
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
  v7 = *(int64x2_t **)a1;
  v8 = *(unint64_t **)a1;
  v9 = a2;
  if (a2 >= 4)
  {
    v8 = (unint64_t *)v7 + (a2 & 0xFFFFFFFFFFFFFFFCLL);
    v9 = a2 & 3;
    v10 = vdupq_n_s64(a3);
    v11 = v7 + 1;
    v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == a2)
    {
      v13 = (_DWORD *)(a1 + 8);
      goto LABEL_7;
    }
  }
  do
  {
    *v8++ = a3;
    --v9;
  }
  while (v9);
  *v6 = a2;
}

uint64_t mlir::mps::ScatterOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *ArgAttrsAttr;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  const char *v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  const void **v70[4];
  __int16 v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  _QWORD v83[3];
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE v87[96];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = (_QWORD *)(*this)[9];
    v78 = v3;
    v79 = v4;
    v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v78 = 0;
    v79 = 0;
    v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
LABEL_3:
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
      v7 = (*this)[9];
      v76 = v5;
      v77 = v6;
      v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v8)
        goto LABEL_4;
LABEL_8:
      v74 = v8;
      v75 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v76))
        goto LABEL_9;
      return 1;
    }
  }
  v76 = v5;
  v77 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_8;
LABEL_4:
  v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  v74 = v8;
  v75 = v9;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v76))
    return 1;
LABEL_9:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
  v11 = (const char *)v10;
  LOBYTE(v72) = 0;
  v73 = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 120), v10, (uint64_t)&v72))
    return 0;
  if (!v73)
    return 1;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74))
  {
    if (*(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74) != 0x8000000000000000)
    {
      v13 = v72;
      if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76)
                     + 8 * v13) != 0x8000000000000000)
      {
        v14 = ArgAttrsAttr[v13];
        if (v14 != *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74))
        {
          v70[0] = (const void **)"invalid updates tensor shape, shape at axis must ";
          v71 = 259;
          mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
          v57 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v83, "equal length of indices tensor");
          v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v83);
          return v18;
        }
      }
    }
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78))
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v15 == v11)
  {
    v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
    v17 = v72;
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v72, v16, v72)
      && mlir::verifyCompatibleShape(&ArgAttrsAttr[v17 + 1], (uint64_t)&v11[~v17], &v16[v17 + 1], (uint64_t)&v11[~v17]))
    {
      return 1;
    }
    v70[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    v71 = 259;
    mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
    if (v83[0])
    {
      v80 = 3;
      v81 = "data shape must match except at axis";
      v82 = 36;
      v47 = &v80;
      v48 = (char *)v84;
      if (v85 >= v86)
      {
        v62 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          v68 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
          v48 = (char *)v84;
          v47 = (int *)((char *)v84 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
          v47 = &v80;
          v48 = (char *)v84;
        }
      }
      v49 = &v48[24 * v85];
      v50 = *(_OWORD *)v47;
      *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
      *(_OWORD *)v49 = v50;
      ++v85;
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
    if (v83[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
    if (v92)
    {
      v51 = (_QWORD **)__p;
      if (__p)
      {
        v52 = v91;
        v53 = __p;
        if (v91 != __p)
        {
          do
            v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
          while (v52 != v51);
          v53 = __p;
        }
        v91 = v51;
        operator delete(v53);
      }
      v42 = v88;
      if (!v88)
        goto LABEL_65;
      v54 = v89;
      v44 = v88;
      if (v89 == v88)
      {
LABEL_64:
        v89 = v42;
        operator delete(v44);
LABEL_65:
        if (v84 != v87)
          free(v84);
        return v18;
      }
      do
      {
        v56 = (void *)*--v54;
        v55 = v56;
        *v54 = 0;
        if (v56)
          operator delete[](v55);
      }
      while (v54 != v42);
LABEL_63:
      v44 = v88;
      goto LABEL_64;
    }
  }
  else
  {
    v70[0] = (const void **)"invalid input tensor shapes, updates rank and result ";
    v71 = 259;
    mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
    if (v83[0])
    {
      v80 = 3;
      v81 = "rank must be equal, ";
      v82 = 20;
      v20 = &v80;
      v21 = (char *)v84;
      if (v85 >= v86)
      {
        v58 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          v65 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v58, 24);
          v21 = (char *)v84;
          v20 = (int *)((char *)v84 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v58, 24);
          v20 = &v80;
          v21 = (char *)v84;
        }
      }
      v22 = &v21[24 * v85];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      v24 = ++v85;
      if (v83[0])
      {
        v80 = 2;
        v81 = v11;
        v25 = &v80;
        v26 = (char *)v84;
        if (v24 >= v86)
        {
          v60 = v24 + 1;
          v61 = (char *)v84 + 24 * v24 > (char *)&v80;
          if (v84 <= &v80 && v61)
          {
            v67 = (char *)&v80 - (_BYTE *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
            v26 = (char *)v84;
            v25 = (int *)((char *)v84 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
            v25 = &v80;
            v26 = (char *)v84;
          }
        }
        v27 = &v26[24 * v85];
        v28 = *(_OWORD *)v25;
        *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v27 = v28;
        v29 = ++v85;
        if (v83[0])
        {
          v80 = 3;
          v81 = " != ";
          v82 = 4;
          v30 = &v80;
          v31 = (char *)v84;
          if (v29 >= v86)
          {
            v63 = v29 + 1;
            v64 = (char *)v84 + 24 * v29 > (char *)&v80;
            if (v84 <= &v80 && v64)
            {
              v69 = (char *)&v80 - (_BYTE *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
              v31 = (char *)v84;
              v30 = (int *)((char *)v84 + v69);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
              v30 = &v80;
              v31 = (char *)v84;
            }
          }
          v32 = &v31[24 * v85];
          v33 = *(_OWORD *)v30;
          *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
          *(_OWORD *)v32 = v33;
          ++v85;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
    if (v83[0])
    {
      v80 = 2;
      v81 = v34;
      v35 = &v80;
      v36 = (char *)v84;
      if (v85 >= v86)
      {
        v59 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          v66 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v59, 24);
          v36 = (char *)v84;
          v35 = (int *)((char *)v84 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v59, 24);
          v35 = &v80;
          v36 = (char *)v84;
        }
      }
      v37 = &v36[24 * v85];
      v38 = *(_OWORD *)v35;
      *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
      *(_OWORD *)v37 = v38;
      ++v85;
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
    if (v83[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
    if (v92)
    {
      v39 = (_QWORD **)__p;
      if (__p)
      {
        v40 = v91;
        v41 = __p;
        if (v91 != __p)
        {
          do
            v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          v41 = __p;
        }
        v91 = v39;
        operator delete(v41);
      }
      v42 = v88;
      if (!v88)
        goto LABEL_65;
      v43 = v89;
      v44 = v88;
      if (v89 == v88)
        goto LABEL_64;
      do
      {
        v46 = (void *)*--v43;
        v45 = v46;
        *v43 = 0;
        if (v46)
          operator delete[](v45);
      }
      while (v43 != v42);
      goto LABEL_63;
    }
  }
  return v18;
}

uint64_t mlir::mps::ScatterAlongAxisOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  unint64_t v20;
  void *v21;
  BOOL v23;
  _QWORD *Value;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  size_t v36;
  uint64_t v37;
  char Axis;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t ElementTypeOrSelf;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59[3];
  void *__dst;
  unsigned int v61;
  int v62;
  _BYTE v63[32];
  _QWORD v64[4];

  v64[2] = *MEMORY[0x1E0C80C00];
  v64[0] = a4;
  v64[1] = a5;
  if (a5 != 4)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v64, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = (_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v16 = 0;
  }
  v58 = v16;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v64, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(void **)(*(_QWORD *)v17 + 136);
  if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v17 = 0;
  }
  v57 = v17;
  v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v64, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(void **)(*(_QWORD *)v20 + 136);
  if (v21 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v20 = 0;
  }
  v56 = v20;
  if (v16)
    v23 = v57 == 0;
  else
    v23 = 1;
  if (v23 || v20 == 0)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot scatter_along_axis a non-tensor type");
  v55 = (uint64_t)v16;
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v55))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v55);
    if (!v28)
      goto LABEL_66;
    v29 = 8 * v28;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v29 -= 8;
      if (!v29)
        goto LABEL_66;
    }
  }
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v57) || mlir::TensorType::hasRank((mlir::TensorType *)&v56))
  {
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
    {
      v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
      v32 = v31;
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
      {
LABEL_38:
        v33 = 0;
        goto LABEL_41;
      }
    }
    else
    {
      v30 = 0;
      v32 = 0;
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        goto LABEL_38;
    }
    v33 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    v32 = v34;
LABEL_41:
    __dst = v63;
    v62 = 4;
    if ((unint64_t)v32 < 5)
    {
      if (!v32)
        goto LABEL_46;
      v36 = 8 * v32;
      v35 = v63;
    }
    else
    {
      v61 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v32, 8);
      v35 = __dst;
      v36 = 8 * v32;
    }
    memset_pattern16(v35, &unk_1812352C0, v36);
LABEL_46:
    v61 = v32;
    LOBYTE(v53) = 0;
    v54 = 0;
    v37 = mlir::ValueRange::dereference_iterator(v64, 3);
    Axis = mlir::mps::getAxis(a2, a3, v37, v32, (uint64_t)&v53);
    if (Axis)
    {
      if (v54)
      {
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
        {
          llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v32);
          v39 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          v40 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          v42 = (_BYTE *)(v40 + 8 * v41);
          if (v42 != v39)
            memmove(__dst, v39, v42 - v39);
        }
        if (v32 >= 1)
        {
          v43 = 0;
          v44 = v53;
          do
          {
            if (v44 == v43)
              goto LABEL_55;
            if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
            {
              v47 = *(_QWORD *)(v30 + 8 * v43);
              if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
                goto LABEL_61;
            }
            else
            {
              v47 = 0x8000000000000000;
              if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
              {
LABEL_61:
                v45 = 0x8000000000000000;
                goto LABEL_54;
              }
            }
            v45 = *(_QWORD *)(v33 + 8 * v43);
LABEL_54:
            v59[0] = *((_QWORD *)__dst + v43);
            v59[1] = v47;
            v59[2] = v45;
            v46 = mlir::mps::mergeDynamicDims(v59, 3);
            *((_QWORD *)__dst + v43) = v46;
LABEL_55:
            ++v43;
          }
          while (v32 != v43);
        }
      }
      v48 = __dst;
      v49 = v61;
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v58);
      v55 = mlir::RankedTensorType::get((uint64_t)v48, v49, ElementTypeOrSelf, 0);
    }
    if (__dst != v63)
      free(__dst);
    if (!Axis)
      return 0;
  }
LABEL_66:
  v51 = v55;
  v52 = *(unsigned int *)(a11 + 8);
  if (v52 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v52 + 1, 8);
    LODWORD(v52) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v52) = v51;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ScatterAlongAxisOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *ArgAttrsAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  mlir::CallableOpInterface *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int *v39;
  char *v40;
  char *v41;
  __int128 v42;
  const char *v43;
  int *v44;
  char *v45;
  char *v46;
  __int128 v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  void *v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  const char *v60;
  int *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  _QWORD **v75;
  _QWORD **v76;
  void *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  int *v81;
  char *v82;
  char *v83;
  __int128 v84;
  _QWORD **v85;
  _QWORD **v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  void *v91;
  void *v92;
  int *v93;
  char *v94;
  char *v95;
  __int128 v96;
  _QWORD **v97;
  _QWORD **v98;
  void *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  uint64_t v127;
  char v128;
  const void **v129[4];
  __int16 v130;
  _QWORD v131[2];
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  int v136;
  const char *v137;
  uint64_t v138;
  unint64_t v139[3];
  void *v140;
  unsigned int v141;
  unsigned int v142;
  _BYTE v143[96];
  void *v144;
  _QWORD *v145;
  void *__p;
  _QWORD **v147;
  char v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD v151[5];

  v151[4] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = (_QWORD *)(*this)[9];
    v134 = v3;
    v135 = v4;
    v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
      goto LABEL_3;
LABEL_6:
    v132 = v5;
    v133 = 0;
    v8 = (_QWORD *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8)
      goto LABEL_4;
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  v134 = 0;
  v135 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v7 = (*this)[9];
  v132 = v5;
  v133 = v6;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_7;
LABEL_4:
  v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
LABEL_8:
  v131[0] = v8;
  v131[1] = v9;
  v149 = v151;
  v150 = 0x400000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132)
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v131))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    v11 = v10;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
    if (v13 != v11)
    {
      v129[0] = (const void **)"invalid input tensor shapes, indices rank and";
      v130 = 259;
      mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
      if (v139[0])
      {
        v136 = 3;
        v137 = " updates rank must be equal, ";
        v138 = 29;
        v56 = &v136;
        v57 = (char *)v140;
        if (v141 >= v142)
        {
          v105 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            v119 = (char *)&v136 - (_BYTE *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v105, 24);
            v57 = (char *)v140;
            v56 = (int *)((char *)v140 + v119);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v105, 24);
            v56 = &v136;
            v57 = (char *)v140;
          }
        }
        v58 = &v57[24 * v141];
        v59 = *(_OWORD *)v56;
        *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
        *(_OWORD *)v58 = v59;
        ++v141;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
      if (v139[0])
      {
        v136 = 2;
        v137 = v60;
        v61 = &v136;
        v62 = (char *)v140;
        if (v141 >= v142)
        {
          v106 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            v120 = (char *)&v136 - (_BYTE *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v106, 24);
            v62 = (char *)v140;
            v61 = (int *)((char *)v140 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v106, 24);
            v61 = &v136;
            v62 = (char *)v140;
          }
        }
        v63 = &v62[24 * v141];
        v64 = *(_OWORD *)v61;
        *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
        *(_OWORD *)v63 = v64;
        v65 = ++v141;
        if (v139[0])
        {
          v136 = 3;
          v137 = " != ";
          v138 = 4;
          v66 = &v136;
          v67 = (char *)v140;
          if (v65 >= v142)
          {
            v109 = v65 + 1;
            v110 = (char *)v140 + 24 * v65 > (char *)&v136;
            if (v140 <= &v136 && v110)
            {
              v122 = (char *)&v136 - (_BYTE *)v140;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v109, 24);
              v67 = (char *)v140;
              v66 = (int *)((char *)v140 + v122);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v109, 24);
              v66 = &v136;
              v67 = (char *)v140;
            }
          }
          v68 = &v67[24 * v141];
          v69 = *(_OWORD *)v66;
          *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
          *(_OWORD *)v68 = v69;
          v70 = ++v141;
          if (v139[0])
          {
            v136 = 2;
            v137 = (const char *)v11;
            v71 = &v136;
            v72 = (char *)v140;
            if (v70 >= v142)
            {
              v113 = v70 + 1;
              v114 = (char *)v140 + 24 * v70 > (char *)&v136;
              if (v140 <= &v136 && v114)
              {
                v124 = (char *)&v136 - (_BYTE *)v140;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v113, 24);
                v72 = (char *)v140;
                v71 = (int *)((char *)v140 + v124);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v113, 24);
                v71 = &v136;
                v72 = (char *)v140;
              }
            }
            v73 = &v72[24 * v141];
            v74 = *(_OWORD *)v71;
            *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
            *(_OWORD *)v73 = v74;
            ++v141;
          }
        }
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
      if (v139[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
      if (v148)
      {
        v75 = (_QWORD **)__p;
        if (__p)
        {
          v76 = v147;
          v77 = __p;
          if (v147 != __p)
          {
            do
              v76 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v76 - 1);
            while (v76 != v75);
            v77 = __p;
          }
          v147 = v75;
          operator delete(v77);
        }
        v51 = v144;
        if (!v144)
          goto LABEL_123;
        v78 = v145;
        v53 = v144;
        if (v145 == v144)
          goto LABEL_122;
        do
        {
          v80 = (void *)*--v78;
          v79 = v80;
          *v78 = 0;
          if (v80)
            operator delete[](v79);
        }
        while (v78 != v51);
        goto LABEL_121;
      }
      goto LABEL_35;
    }
    v14 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    v16 = v15;
    v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
    v19 = mlir::verifyCompatibleShape(v17, v18, (_QWORD *)v14, v16);
    if (v19)
    {
      v20 = v150;
      if (v11 != v150)
      {
        if (v11 >= (unint64_t)v150)
        {
          if (v11 > (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, v151, v11, 8);
            v20 = v150;
          }
          if (v11 != v20)
            bzero(&v149[v20], 8 * (v11 - v20));
        }
        LODWORD(v150) = v11;
      }
      if (v11 <= 0)
      {
        ArgAttrsAttr = v149;
        goto LABEL_28;
      }
      for (i = 0; i != v11; ++i)
      {
        v139[0] = *(_QWORD *)(v14 + 8 * i);
        v139[1] = v17[i];
        v22 = mlir::mps::mergeDynamicDims(v139, 2);
        ArgAttrsAttr = v149;
        v149[i] = v22;
      }
    }
    else
    {
      v129[0] = (const void **)"invalid input tensor shapes, indices shape and ";
      v130 = 259;
      mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
      if (v139[0])
      {
        v136 = 3;
        v137 = "updates shape must be equal";
        v138 = 27;
        v81 = &v136;
        v82 = (char *)v140;
        if (v141 >= v142)
        {
          v115 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            v125 = (char *)&v136 - (_BYTE *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v115, 24);
            v82 = (char *)v140;
            v81 = (int *)((char *)v140 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v115, 24);
            v81 = &v136;
            v82 = (char *)v140;
          }
        }
        v83 = &v82[24 * v141];
        v84 = *(_OWORD *)v81;
        *((_QWORD *)v83 + 2) = *((_QWORD *)v81 + 2);
        *(_OWORD *)v83 = v84;
        ++v141;
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
      if (v139[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
      if (v148)
      {
        v85 = (_QWORD **)__p;
        if (__p)
        {
          v86 = v147;
          v87 = __p;
          if (v147 != __p)
          {
            do
              v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
            while (v86 != v85);
            v87 = __p;
          }
          v147 = v85;
          operator delete(v87);
        }
        v88 = v144;
        if (v144)
        {
          v89 = v145;
          v90 = v144;
          if (v145 != v144)
          {
            do
            {
              v92 = (void *)*--v89;
              v91 = v92;
              *v89 = 0;
              if (v92)
                operator delete[](v91);
            }
            while (v89 != v88);
            v90 = v144;
          }
          v145 = v88;
          operator delete(v90);
        }
        if (v140 != v143)
          free(v140);
      }
    }
    if (!v19)
      goto LABEL_35;
  }
  else
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      v23 = (mlir::CallableOpInterface *)&v132;
    }
    else
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v131))
        goto LABEL_34;
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
      v23 = (mlir::CallableOpInterface *)v131;
    }
    mlir::CallableOpInterface::getArgAttrsAttr(v23);
    v11 = v24;
  }
LABEL_28:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v134))
    goto LABEL_34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134);
  if (v25 == v11)
  {
    LOBYTE(v127) = 0;
    v128 = 0;
    if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 120), v11, (uint64_t)&v127))
    {
      v14 = 0;
      goto LABEL_35;
    }
    if (!v128
      || (v26 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134),
          v27 = v127,
          mlir::verifyCompatibleShape(ArgAttrsAttr, v127, v26, v127))
      && mlir::verifyCompatibleShape(&ArgAttrsAttr[v27 + 1], v11 + ~v27, &v26[v27 + 1], v11 + ~v27))
    {
LABEL_34:
      v14 = 1;
      goto LABEL_35;
    }
    v129[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    v130 = 259;
    mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
    if (v139[0])
    {
      v136 = 3;
      v137 = "data shape must match except at axis";
      v138 = 36;
      v93 = &v136;
      v94 = (char *)v140;
      if (v141 >= v142)
      {
        v116 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          v126 = (char *)&v136 - (_BYTE *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v116, 24);
          v94 = (char *)v140;
          v93 = (int *)((char *)v140 + v126);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v116, 24);
          v93 = &v136;
          v94 = (char *)v140;
        }
      }
      v95 = &v94[24 * v141];
      v96 = *(_OWORD *)v93;
      *((_QWORD *)v95 + 2) = *((_QWORD *)v93 + 2);
      *(_OWORD *)v95 = v96;
      ++v141;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
    if (v139[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
    if (v148)
    {
      v97 = (_QWORD **)__p;
      if (__p)
      {
        v98 = v147;
        v99 = __p;
        if (v147 != __p)
        {
          do
            v98 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v98 - 1);
          while (v98 != v97);
          v99 = __p;
        }
        v147 = v97;
        operator delete(v99);
      }
      v51 = v144;
      if (!v144)
        goto LABEL_123;
      v100 = v145;
      v53 = v144;
      if (v145 == v144)
      {
LABEL_122:
        v145 = v51;
        operator delete(v53);
LABEL_123:
        if (v140 != v143)
          free(v140);
        goto LABEL_35;
      }
      do
      {
        v102 = (void *)*--v100;
        v101 = v102;
        *v100 = 0;
        if (v102)
          operator delete[](v101);
      }
      while (v100 != v51);
LABEL_121:
      v53 = v144;
      goto LABEL_122;
    }
  }
  else
  {
    v129[0] = (const void **)"invalid input tensor shapes, indices rank and ";
    v130 = 259;
    mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
    if (v139[0])
    {
      v136 = 3;
      v137 = "result rank must be equal, ";
      v138 = 27;
      v29 = &v136;
      v30 = (char *)v140;
      if (v141 >= v142)
      {
        v103 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          v117 = (char *)&v136 - (_BYTE *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v103, 24);
          v30 = (char *)v140;
          v29 = (int *)((char *)v140 + v117);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v103, 24);
          v29 = &v136;
          v30 = (char *)v140;
        }
      }
      v31 = &v30[24 * v141];
      v32 = *(_OWORD *)v29;
      *((_QWORD *)v31 + 2) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v31 = v32;
      v33 = ++v141;
      if (v139[0])
      {
        v136 = 2;
        v137 = (const char *)v11;
        v34 = &v136;
        v35 = (char *)v140;
        if (v33 >= v142)
        {
          v107 = v33 + 1;
          v108 = (char *)v140 + 24 * v33 > (char *)&v136;
          if (v140 <= &v136 && v108)
          {
            v121 = (char *)&v136 - (_BYTE *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v107, 24);
            v35 = (char *)v140;
            v34 = (int *)((char *)v140 + v121);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v107, 24);
            v34 = &v136;
            v35 = (char *)v140;
          }
        }
        v36 = &v35[24 * v141];
        v37 = *(_OWORD *)v34;
        *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
        *(_OWORD *)v36 = v37;
        v38 = ++v141;
        if (v139[0])
        {
          v136 = 3;
          v137 = " != ";
          v138 = 4;
          v39 = &v136;
          v40 = (char *)v140;
          if (v38 >= v142)
          {
            v111 = v38 + 1;
            v112 = (char *)v140 + 24 * v38 > (char *)&v136;
            if (v140 <= &v136 && v112)
            {
              v123 = (char *)&v136 - (_BYTE *)v140;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v111, 24);
              v40 = (char *)v140;
              v39 = (int *)((char *)v140 + v123);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v111, 24);
              v39 = &v136;
              v40 = (char *)v140;
            }
          }
          v41 = &v40[24 * v141];
          v42 = *(_OWORD *)v39;
          *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
          *(_OWORD *)v41 = v42;
          ++v141;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134);
    if (v139[0])
    {
      v136 = 2;
      v137 = v43;
      v44 = &v136;
      v45 = (char *)v140;
      if (v141 >= v142)
      {
        v104 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          v118 = (char *)&v136 - (_BYTE *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v104, 24);
          v45 = (char *)v140;
          v44 = (int *)((char *)v140 + v118);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v104, 24);
          v44 = &v136;
          v45 = (char *)v140;
        }
      }
      v46 = &v45[24 * v141];
      v47 = *(_OWORD *)v44;
      *((_QWORD *)v46 + 2) = *((_QWORD *)v44 + 2);
      *(_OWORD *)v46 = v47;
      ++v141;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
    if (v139[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
    if (v148)
    {
      v48 = (_QWORD **)__p;
      if (__p)
      {
        v49 = v147;
        v50 = __p;
        if (v147 != __p)
        {
          do
            v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          v50 = __p;
        }
        v147 = v48;
        operator delete(v50);
      }
      v51 = v144;
      if (!v144)
        goto LABEL_123;
      v52 = v145;
      v53 = v144;
      if (v145 == v144)
        goto LABEL_122;
      do
      {
        v55 = (void *)*--v52;
        v54 = v55;
        *v52 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v52 != v51);
      goto LABEL_121;
    }
  }
LABEL_35:
  if (v149 != v151)
    free(v149);
  return v14;
}

uint64_t mlir::mps::GatherNDOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  __int128 v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  char *v52;
  unint64_t *v53;
  char *v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t *v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  unint64_t *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  unsigned int v108;
  void *__p;
  uint64_t v110;
  _BYTE v111[32];
  uint64_t v112;
  char v113[8];
  char v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v120 = a4;
  v121 = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v112 = a6;
  v113[0] = 0;
  v114 = 0;
  v115 = v16;
  v17 = a5;
  v116 = a9;
  v117 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v112);
    if (v114)
      v114 = 0;
    mlir::OperationName::OperationName(v113, "mps.gather_nd", 13, Context);
    v114 = 1;
    v17 = v121;
  }
  v118 = a4;
  v119 = a5;
  if (v17 < 2
    || (v19 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::GatherNDOpAdaptor::verify((uint64_t)&v112, v19)))
  {
    v22 = mlir::Float32Type::get(this, a2);
    v23 = mlir::UnrankedTensorType::get(v22);
    v24 = a11[2];
    if (v24 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v24 + 1, 8);
      LODWORD(v24) = a11[2];
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v24) = v23;
    goto LABEL_32;
  }
  v20 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v120, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  if (v21)
    v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  else
    v20 = 0;
  v104 = v20;
  v105 = v21;
  v25 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v120, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26)
  {
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
    v102 = v25;
    v103 = v26;
    v27 = v104;
    if (!v104)
      goto LABEL_26;
  }
  else
  {
    v25 = 0;
    v102 = 0;
    v103 = 0;
    v27 = v104;
    if (!v104)
    {
LABEL_26:
      v33 = mlir::ValueRange::dereference_iterator(&v120, 0);
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v33);
      if (!ElementTypeOrSelf)
        ElementTypeOrSelf = mlir::Float32Type::get(this, v35);
      v32 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_29:
      v36 = a11[2];
      if (v36 >= a11[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v36 + 1, 8);
        v36 = a11[2];
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v32;
LABEL_32:
      ++a11[2];
      return 1;
    }
  }
  if (!v25)
    goto LABEL_26;
  __p = v27;
  v110 = v105;
  v122 = v25;
  v123 = v26;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__p)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122) & 1) == 0
    || (ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122),
        *(_QWORD *)(ArgAttrsAttr + 8 * v29 - 8) == 0x8000000000000000))
  {
    v30 = mlir::getElementTypeOrSelf(v104);
    v31 = (_QWORD *)mlir::UnrankedTensorType::get(v30);
    v32 = (uint64_t)v31;
    if (v31)
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    goto LABEL_29;
  }
  v122 = (_QWORD *)*((_QWORD *)&v115 + 1);
  mlir::IntegerAttr::getValue(&v122, (llvm::APInt *)&__p);
  if (v110 > 0x40)
  {
    v39 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v39 = __p;
  }
  __p = v111;
  v110 = 0x400000000;
  v40 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v104);
  v42 = v41;
  v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
  v45 = v42;
  v108 = v39;
  v46 = (char *)(v42 - v39);
  if (v42 <= v39 || (v47 = (unint64_t *)v43, v48 = v44, v49 = v44 - v39, v44 <= v39))
  {
    v55 = mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>((uint64_t)a2, a3, "invalid batch dimensions: ", &v108, ", must be less than ranks of all input tensors");
    if (!v55)
      goto LABEL_59;
    goto LABEL_77;
  }
  v107 = v46;
  v50 = &v47[v44];
  v51 = &v47[v48];
  v54 = (char *)*(v51 - 1);
  v53 = v51 - 1;
  v52 = v54;
  v106 = v54;
  if (v54 == (char *)0x8000000000000000)
  {
    v55 = mlir::emitOptionalError<char const(&)[30],char const(&)[27]>((uint64_t)a2, a3, "inner-most dimension of indices array ", "cannot be inferred.");
    if (!v55)
      goto LABEL_59;
    goto LABEL_77;
  }
  if (v52 > v46)
  {
    v55 = mlir::emitOptionalError<char const(&)[38],char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>((uint64_t)a2, a3, "invalid input tensor shapes: rank of ", "updates tensor must be greater than or equal to ", "inner-most dimension of indices tensor, ", &v107, " < ", &v106);
    if (!v55)
      goto LABEL_59;
    goto LABEL_77;
  }
  v56 = (uint64_t)&v46[v49 + ~(unint64_t)v52];
  if (v56 > 0)
  {
    v57 = v56 + v39;
    v58 = v110;
    if (v57 != v110)
    {
      if (v57 >= v110)
      {
        v101 = v49;
        if (v57 > HIDWORD(v110))
        {
          v99 = v45;
          v59 = v52;
          v60 = v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v111, v57, 8);
          v57 = v60;
          v52 = v59;
          v45 = v99;
          v50 = &v47[v48];
          v49 = v101;
          v58 = v110;
        }
        if (v57 != v58)
        {
          v61 = v45;
          v62 = v52;
          v100 = v57;
          bzero((char *)__p + 8 * v58, 8 * (v57 - v58));
          LODWORD(v57) = v100;
          v50 = &v47[v48];
          v52 = v62;
          v45 = v61;
          v49 = v101;
        }
      }
      LODWORD(v110) = v57;
      v57 = v57;
    }
    v63 = (unint64_t *)__p;
    v64 = (char *)__p + 8 * v57;
    if (v52 == v46)
      goto LABEL_66;
    v65 = &v40[v45];
    v66 = v45;
    v67 = 8 * v45 - 8 * (_QWORD)&v52[v39] - 8;
    if (v67 >= 0x78)
    {
      v68 = &v40[v45];
      v69 = (char *)__p + 8 * v57;
      if ((char *)&v40[v66] - (_BYTE *)__p - 8 * v57 >= 0x20)
      {
        v72 = (v67 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v68 = &v65[v73 / 0xFFFFFFFFFFFFFFF8];
        v69 = &v64[-v73];
        v74 = (char *)__p + 8 * v57 - 16;
        v75 = &v40[v66 - 2];
        v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *v74 = v77;
          v74 -= 2;
          v75 -= 4;
          v76 -= 4;
        }
        while (v76);
        if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
    }
    else
    {
      v68 = &v40[v45];
      v69 = (char *)__p + 8 * v57;
    }
    v78 = &v65[v52 - v46];
    v79 = v69 - 8;
    do
    {
      v80 = *--v68;
      *(_QWORD *)v79 = v80;
      v79 -= 8;
    }
    while (v68 != v78);
LABEL_66:
    v81 = 8 * v39;
    if (v49 != 1)
    {
      v82 = (uint64_t)&v64[8 * (_QWORD)v52 + -8 * (_QWORD)v46];
      v83 = v48;
      v84 = 8 * v48 - v81 - 16;
      if (v84 < 0xD8)
        goto LABEL_72;
      if ((unint64_t)&v47[v83 - 1] + 8 * v45 - (_QWORD)&v63[(_QWORD)&v52[v57 + v39]] < 0x20)
        goto LABEL_72;
      v85 = (v84 >> 3) + 1;
      v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      v53 = (unint64_t *)((char *)v53 - v86);
      v82 -= v86;
      v87 = (_OWORD *)((char *)v63 + 8 * v57 + 8 * (_QWORD)v52 + v81 - 8 * v45 - 16);
      v88 = &v47[v83 - 5];
      v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v91 = *(_OWORD *)v88;
        v90 = *((_OWORD *)v88 + 1);
        v88 -= 4;
        *(v87 - 1) = v91;
        *v87 = v90;
        v87 -= 2;
        v89 -= 4;
      }
      while (v89);
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        v92 = (_QWORD *)(v82 - 8);
        do
        {
          v93 = *--v53;
          *v92-- = v93;
        }
        while (v53 != &v50[-v49]);
      }
    }
    if ((_DWORD)v39)
    {
      do
      {
        v94 = *v47++;
        v122 = (_QWORD *)v94;
        v95 = *v40++;
        v123 = v95;
        *v63++ = mlir::mps::mergeDynamicDims((unint64_t *)&v122, 2);
        v81 -= 8;
      }
      while (v81);
      v55 = 1;
    }
    else
    {
      v55 = 1;
    }
    goto LABEL_77;
  }
  v55 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Rank of destination array must be greater than 0");
  if (!v55)
  {
LABEL_59:
    v70 = mlir::ValueRange::dereference_iterator(&v120, 0);
    v71 = mlir::getElementTypeOrSelf(v70);
    v32 = 0;
    goto LABEL_79;
  }
LABEL_77:
  v96 = __p;
  v37 = v110;
  v97 = mlir::getElementTypeOrSelf(v104);
  v98 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v96, v37, v97, 0);
  v32 = (uint64_t)v98;
  if (v98)
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v98 + 8);
LABEL_79:
  if (__p != v111)
    free(__p);
  if (v55)
    goto LABEL_29;
  return v37;
}

uint64_t mlir::mps::GatherNDOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v19[0] = *(_QWORD *)(a1 + 32);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32))
      return 1;
    v19[0] = "'mps.gather_nd' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = (void *)*--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          operator delete[](v16);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.gather_nd' op requires attribute 'batch_dims'";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::GatherNDOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *ArgAttrsAttr;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t p_p;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  int64_t v44;
  int64_t v45;
  const void **v46[4];
  __int16 v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  void *__p;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[96];
  void *v62;
  _QWORD *v63;
  void *v64;
  _QWORD **v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v5 = (*this)[9];
    v51 = v3;
    v52 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
    {
LABEL_3:
      v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
      v49 = v6;
      v50 = v7;
      v8 = 0x8000000000000000;
      v48 = 0x8000000000000000;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51))
        goto LABEL_4;
LABEL_8:
      ArgAttrsAttr = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49))
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v49 = v6;
  v50 = 0;
  v8 = 0x8000000000000000;
  v48 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51))
    goto LABEL_8;
LABEL_4:
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  v8 = v10;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49))
  {
LABEL_5:
    v11 = 0;
    v12 = 0x8000000000000000;
    v13 = 0x8000000000000000;
    goto LABEL_10;
  }
LABEL_9:
  v11 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  v13 = v14;
  v12 = v11[v14 - 1];
  v48 = v12;
LABEL_10:
  v15 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v15 = 0;
  v46[0] = *(const void ***)(v15 + 8);
  mlir::IntegerAttr::getValue(v46, (llvm::APInt *)&__p);
  if (v57 > 0x40)
  {
    v16 = *(unsigned int *)__p;
    operator delete[](__p);
    if (v8 == 0x8000000000000000)
      goto LABEL_17;
  }
  else
  {
    v16 = __p;
    if (v8 == 0x8000000000000000)
      goto LABEL_17;
  }
  if (v8 <= v16)
  {
LABEL_19:
    v46[0] = (const void **)"invalid batch dimensions: ";
    v47 = 259;
    mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
    if (__p)
    {
      LODWORD(v53) = 5;
      v54 = (const char *)v16;
      v17 = (uint64_t *)&v53;
      v18 = (char *)v58;
      if (v59 >= v60)
      {
        v41 = v59 + 1;
        if (v58 <= &v53 && (char *)v58 + 24 * v59 > (char *)&v53)
        {
          v44 = (char *)&v53 - (_BYTE *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          v18 = (char *)v58;
          v17 = (uint64_t *)((char *)v58 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          v17 = (uint64_t *)&v53;
          v18 = (char *)v58;
        }
      }
      v19 = &v18[24 * v59];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      v21 = ++v59;
      if (__p)
      {
        LODWORD(v53) = 3;
        v54 = ", must be less than ranks of all input tensors";
        v55 = 46;
        v22 = (uint64_t *)&v53;
        v23 = (char *)v58;
        if (v21 >= v60)
        {
          v42 = v21 + 1;
          v43 = (char *)v58 + 24 * v21 > (char *)&v53;
          if (v58 <= &v53 && v43)
          {
            v45 = (char *)&v53 - (_BYTE *)v58;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v42, 24);
            v23 = (char *)v58;
            v22 = (uint64_t *)((char *)v58 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v42, 24);
            v22 = (uint64_t *)&v53;
            v23 = (char *)v58;
          }
        }
        v24 = &v23[24 * v59];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = v22[2];
        *(_OWORD *)v24 = v25;
        ++v59;
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    if (v66)
    {
      v27 = (_QWORD **)v64;
      if (v64)
      {
        v28 = v65;
        v29 = v64;
        if (v65 != v64)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = v64;
        }
        v65 = v27;
        operator delete(v29);
      }
      v30 = v62;
      if (v62)
      {
        v31 = v63;
        v32 = v62;
        if (v63 != v62)
        {
          do
          {
            v34 = (void *)*--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              operator delete[](v33);
          }
          while (v31 != v30);
          v32 = v62;
        }
        v63 = v30;
        operator delete(v32);
      }
      if (v58 != v61)
        free(v58);
    }
    return v26;
  }
LABEL_17:
  if (v13 != 0x8000000000000000 && v16 >= v13)
    goto LABEL_19;
  v26 = 1;
  if (v8 != 0x8000000000000000 && v13 != 0x8000000000000000)
  {
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v16, v11, v16))
    {
      if (v12 == 0x8000000000000000)
        return v26;
      if (v8 - v16 >= v12)
      {
        if ((uint64_t)(~(v16 + v12) + v8 + v13) > 0)
          return 1;
        v46[0] = (const void **)"Rank of destination array must be greater than 0";
        v47 = 259;
        mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
        p_p = (uint64_t)&__p;
      }
      else
      {
        v46[0] = (const void **)"invalid input tensor shapes: rank of updates tensor ";
        v47 = 259;
        mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
        v35 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must be greater than or equal to inner-most dimension of ");
        v36 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v35, "indices tensor, ");
        v53 = v8 - v16;
        v37 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v36, (uint64_t *)&v53);
        v38 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v37, " < ");
        p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v38, (uint64_t *)&v48);
      }
    }
    else
    {
      v46[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
      v47 = 259;
      mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
      p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must match along batch dimensions");
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
  }
  return v26;
}

uint64_t mlir::mps::GatherOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int BatchDims;
  unint64_t *ArgAttrsAttr;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52[2];
  void *v53;
  uint64_t v54;
  _BYTE v55[32];
  uint64_t v56;
  _BYTE v57[8];
  char v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD v64[3];

  v64[2] = *MEMORY[0x1E0C80C00];
  v64[0] = a4;
  v64[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v56 = a6;
  v57[0] = 0;
  v58 = 0;
  v59 = v16;
  v60 = a9;
  v61 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58)
      v58 = 0;
    mlir::OperationName::OperationName(v57, "mps.gather", 10, Context);
    v58 = 1;
  }
  v62 = a4;
  v63 = a5;
  if (a5 < 3
    || (v18 = mlir::UnknownLoc::get(this, a2), !mlir::mps::GatherOpAdaptor::verify((uint64_t)&v56, v18)))
  {
    v21 = mlir::Float32Type::get(this, a2);
    v22 = mlir::UnrankedTensorType::get(v21);
    v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v23) = v22;
    goto LABEL_15;
  }
  v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v64, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  if (v20)
    v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  else
    v19 = 0;
  v52[0] = v19;
  v52[1] = v20;
  v25 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v64, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
    v50 = v25;
    v51 = v26;
    if (!v19)
      goto LABEL_34;
  }
  else
  {
    v25 = 0;
    v50 = 0;
    v51 = 0;
    if (!v19)
    {
LABEL_34:
      v43 = mlir::ValueRange::dereference_iterator(v64, 0);
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v43);
      if (!ElementTypeOrSelf)
        ElementTypeOrSelf = mlir::Float32Type::get(this, v45);
      v46 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      v47 = *(_DWORD *)(a11 + 8);
      if (v47 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v47 + 1, 8);
        v47 = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v47) = v46;
LABEL_15:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  if (!v25)
    goto LABEL_34;
  v27 = mlir::getElementTypeOrSelf(v19);
  v28 = mlir::UnrankedTensorType::get(v27);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v52)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
  {
    goto LABEL_31;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
  v30 = v29;
  LOBYTE(v48) = 0;
  v49 = 0;
  v31 = mlir::ValueRange::dereference_iterator(v64, 2);
  if (mlir::mps::getAxis((uint64_t)a2, a3, v31, v30, (uint64_t)&v48))
  {
    if (!v49)
      goto LABEL_31;
    BatchDims = mlir::mps::detail::GatherOpGenericAdaptorBase::getBatchDims((mlir::mps::detail::GatherOpGenericAdaptorBase *)&v56);
    v53 = v55;
    v54 = 0x400000000;
    ArgAttrsAttr = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    v35 = v34;
    v36 = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
    if (v38)
    {
      v39 = v53;
      v40 = v54;
      v41 = mlir::getElementTypeOrSelf(v52[0]);
      v28 = mlir::RankedTensorType::get((uint64_t)v39, v40, v41, 0);
    }
    if (v53 != v55)
      free(v53);
    if (v38)
    {
LABEL_31:
      v42 = *(unsigned int *)(a11 + 8);
      if (v42 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v42 + 1, 8);
        LODWORD(v42) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v42) = v28;
      goto LABEL_15;
    }
  }
  return 0;
}

uint64_t mlir::mps::GatherOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v19[0] = *(_QWORD *)(a1 + 32);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32))
      return 1;
    v19[0] = "'mps.gather' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = (void *)*--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          operator delete[](v16);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.gather' op requires attribute 'batch_dims'";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

void *mlir::mps::detail::GatherOpGenericAdaptorBase::getBatchDims(mlir::mps::detail::GatherOpGenericAdaptorBase *this)
{
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *((_QWORD *)this + 4);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v2 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::`anonymous namespace'::inferGatherShape(uint64_t a1, char a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v16;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  unint64_t *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  unint64_t *v64;
  uint64_t v65;
  __int128 v66;
  unint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78[3];

  v78[2] = *MEMORY[0x1E0C80C00];
  v77 = a7;
  v76 = a8;
  v10 = a8;
  v11 = a4 - a8;
  if (a4 <= a8 || a6 < a8)
    return mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(a1, a2, "invalid batch dimensions: ", &v76, ", must be less than ranks of all input tensors");
  v16 = a7 - a8;
  if (a7 < a8)
    return mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(a1, a2, "Axis must be greater than or equal to ", "batch dimensions, ", &v77, " < ", &v76);
  v19 = a6 - a8;
  v20 = v11 - 1;
  if ((uint64_t)(v11 - 1 + v19) < 0)
    return mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(a1, a2, "Rank of destination array must be greater than or equal ", "to 0");
  v22 = v20 + a6;
  v23 = *(unsigned int *)(a9 + 8);
  if (v20 + a6 != v23)
  {
    if (v20 + a6 >= v23)
    {
      v74 = a7 - a8;
      v75 = v11;
      v73 = a6 - a8;
      if (v22 > *(unsigned int *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v20 + a6, 8);
        v19 = v73;
        v16 = v74;
        v11 = v75;
        v23 = *(unsigned int *)(a9 + 8);
      }
      if (v22 != v23)
      {
        bzero((void *)(*(_QWORD *)a9 + 8 * v23), 8 * (v22 - v23));
        v19 = v73;
        v16 = v74;
        v11 = v75;
      }
    }
    *(_DWORD *)(a9 + 8) = v22;
    v23 = v22;
  }
  v24 = &a3[a4];
  v25 = *(unint64_t **)a9;
  v26 = *(_QWORD *)a9 + 8 * v23;
  v27 = v16 - v20;
  if (v16 != v20)
  {
    v28 = 8 * a4 - 16;
    v29 = v28 - 8 * a7;
    if (v29 < 0x78)
    {
      v30 = (char *)&a3[a4];
      v31 = &v25[v23];
LABEL_24:
      v38 = v31 - 1;
      do
      {
        v39 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *v38-- = v39;
      }
      while (v30 != (char *)&v24[v27]);
      goto LABEL_26;
    }
    v30 = (char *)&a3[a4];
    v31 = &v25[v23];
    if (v30 - (char *)v25 - 8 * v23 < 0x20)
      goto LABEL_24;
    v32 = (v29 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (char *)&v24[v33 / 0xFFFFFFFFFFFFFFF8];
    v31 = (unint64_t *)(v26 - v33);
    v34 = &v25[v23 - 2];
    v35 = (__int128 *)((char *)a3 + v28);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 4;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
LABEL_26:
  if (a6 != v10)
  {
    v40 = &a5[a6];
    v41 = v26 + 8 * v27;
    v42 = a6;
    v43 = 8 * a6 - 8 * v10 - 8;
    if (v43 >= 0x98)
    {
      v45 = v23 + a7;
      v44 = &a5[a6];
      if ((unint64_t)&a5[v42 - 1] + 8 * a4 - (_QWORD)&v25[v45] >= 0x20)
      {
        v46 = (v43 >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v44 = &v40[v47 / 0xFFFFFFFFFFFFFFF8];
        v41 -= v47;
        v48 = (_OWORD *)((char *)v25 + v45 * 8 - 8 * a4 - 8);
        v49 = &a5[v42 - 2];
        v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *v48 = v51;
          v48 -= 2;
          v49 -= 4;
          v50 -= 4;
        }
        while (v50);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_35;
      }
    }
    else
    {
      v44 = &a5[a6];
    }
    v52 = &v40[-v19];
    v53 = (_QWORD *)(v41 - 8);
    do
    {
      v54 = *--v44;
      *v53-- = v54;
    }
    while (v44 != v52);
  }
LABEL_35:
  if (a7 != v10)
  {
    v55 = v26 + 8 * (v16 - (v11 + v19)) + 8;
    v56 = &v24[v16 - v11];
    v57 = a7;
    v58 = 8 * a7 - 8 * v10 - 8;
    if (v58 < 0xB8)
      goto LABEL_41;
    v59 = v23 + a7 + v10;
    v60 = 8 * (a6 + a4);
    if ((unint64_t)&a3[v57 - 1] + v60 - (_QWORD)&v25[v59] < 0x20)
      goto LABEL_41;
    v61 = (v58 >> 3) + 1;
    v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    v56 = (unint64_t *)((char *)v56 - v62);
    v55 -= v62;
    v63 = (_OWORD *)((char *)v25 + v59 * 8 - v60 - 8);
    v64 = &a3[v57 - 2];
    v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v66 = *(_OWORD *)v64;
      *(v63 - 1) = *((_OWORD *)v64 - 1);
      *v63 = v66;
      v63 -= 2;
      v64 -= 4;
      v65 -= 4;
    }
    while (v65);
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      v67 = &v24[-v11];
      v68 = (_QWORD *)(v55 - 8);
      do
      {
        v69 = *--v56;
        *v68-- = v69;
      }
      while (v56 != v67);
    }
  }
  if (a8)
  {
    v70 = 8 * v10;
    do
    {
      v71 = *a5++;
      v78[0] = v71;
      v72 = *a3++;
      v78[1] = v72;
      *v25++ = mlir::mps::mergeDynamicDims(v78, 2);
      v70 -= 8;
    }
    while (v70);
  }
  return 1;
}

uint64_t mlir::mps::GatherAlongAxisOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  BOOL v20;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ElementTypeOrSelf;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  char Axis;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53[2];
  void *__dst;
  unsigned int v55;
  int v56;
  _BYTE v57[32];
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  v58[0] = a4;
  v58[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v58, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = (_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v16 = 0;
  }
  v52 = v16;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v58, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(void **)(*(_QWORD *)v17 + 136);
  if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v17 = 0;
  }
  v51 = v17;
  if (v16)
    v20 = v17 == 0;
  else
    v20 = 1;
  if (v20)
    return mlir::emitOptionalError<char const(&)[43]>(a2, a3, "cannot gather_along_axis a non-tensor type");
  if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
    v26 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v51))
      goto LABEL_29;
  }
  else
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    v24 = v23;
    v25 = mlir::getElementTypeOrSelf(v16);
    v26 = mlir::RankedTensorType::get(Value, v24, v25, 0);
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v51))
      goto LABEL_29;
  }
  v28 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
  if (!v29)
    goto LABEL_49;
  v30 = 8 * v29;
  while (*v28 != 0x8000000000000000)
  {
    ++v28;
    v30 -= 8;
    if (!v30)
      goto LABEL_49;
  }
LABEL_29:
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v52))
    goto LABEL_49;
  v32 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
  v33 = v31;
  __dst = v57;
  v56 = 4;
  if (v31 < 5)
  {
    if (!v31)
      goto LABEL_35;
    v35 = 8 * v31;
    v34 = v57;
  }
  else
  {
    v55 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v57, v31, 8);
    v34 = __dst;
    v35 = 8 * v33;
  }
  memset_pattern16(v34, &unk_1812352C0, v35);
LABEL_35:
  v55 = v33;
  LOBYTE(v49) = 0;
  v50 = 0;
  v36 = mlir::ValueRange::dereference_iterator(v58, 2);
  Axis = mlir::mps::getAxis(a2, a3, v36, v33, (uint64_t)&v49);
  if (Axis)
  {
    if (v50)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v51))
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v33);
        v38 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
        v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
        v41 = (_BYTE *)(v39 + 8 * v40);
        if (v41 != v38)
          memmove(__dst, v38, v41 - v38);
      }
      if (v33 >= 1)
      {
        v42 = 0;
        v43 = v49;
        do
        {
          if (v43 != v42)
          {
            v53[0] = *((_QWORD *)__dst + v42);
            v53[1] = *(_QWORD *)(v32 + 8 * v42);
            v44 = mlir::mps::mergeDynamicDims(v53, 2);
            *((_QWORD *)__dst + v42) = v44;
          }
          ++v42;
        }
        while (v33 != v42);
      }
    }
    v45 = __dst;
    v46 = v55;
    v47 = mlir::getElementTypeOrSelf(v52);
    v26 = mlir::RankedTensorType::get((uint64_t)v45, v46, v47, 0);
  }
  if (__dst != v57)
    free(__dst);
  if (!Axis)
    return 0;
LABEL_49:
  v48 = *(unsigned int *)(a11 + 8);
  if (v48 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
    LODWORD(v48) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v26;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::GatherAlongAxisOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *ArgAttrsAttr;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  const char *v30;
  int *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  int *v43;
  char *v44;
  char *v45;
  __int128 v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  char v66;
  const void **v67[4];
  __int16 v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  const char *v74;
  uint64_t v75;
  _QWORD v76[3];
  void *v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE v80[96];
  void *v81;
  _QWORD *v82;
  void *__p;
  _QWORD **v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v5 = (*this)[9];
    v71 = v3;
    v72 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v69 = v6;
    v70 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
      goto LABEL_7;
    return 1;
  }
  v71 = 0;
  v72 = 0;
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  v69 = v6;
  v70 = v7;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
    return 1;
LABEL_7:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  v9 = v8;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69))
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
  if (v10 == v9)
  {
    LOBYTE(v65) = 0;
    v66 = 0;
    if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 88), v9, (uint64_t)&v65))
      return 0;
    if (!v66)
      return 1;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
    v12 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    v13 = v65;
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v65, v12, v65))
    {
      if (mlir::verifyCompatibleShape(&ArgAttrsAttr[v13 + 1], v9 + ~v13, &v12[v13 + 1], v9 + ~v13))
        return 1;
    }
    v67[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    v68 = 259;
    mlir::OpState::emitOpError(this, v67, (uint64_t)v76);
    if (v76[0])
    {
      v73 = 3;
      v74 = "indices shape must match except at axis";
      v75 = 39;
      v43 = &v73;
      v44 = (char *)v77;
      if (v78 >= v79)
      {
        v59 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          v64 = (char *)&v73 - (_BYTE *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          v44 = (char *)v77;
          v43 = (int *)((char *)v77 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          v43 = &v73;
          v44 = (char *)v77;
        }
      }
      v45 = &v44[24 * v78];
      v46 = *(_OWORD *)v43;
      *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
      *(_OWORD *)v45 = v46;
      ++v78;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    if (v85)
    {
      v47 = (_QWORD **)__p;
      if (__p)
      {
        v48 = v84;
        v49 = __p;
        if (v84 != __p)
        {
          do
            v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          v49 = __p;
        }
        v84 = v47;
        operator delete(v49);
      }
      v38 = v81;
      if (!v81)
        goto LABEL_59;
      v50 = v82;
      v40 = v81;
      if (v82 == v81)
      {
LABEL_58:
        v82 = v38;
        operator delete(v40);
LABEL_59:
        if (v77 != v80)
          free(v77);
        return v14;
      }
      do
      {
        v52 = (void *)*--v50;
        v51 = v52;
        *v50 = 0;
        if (v52)
          operator delete[](v51);
      }
      while (v50 != v38);
LABEL_57:
      v40 = v81;
      goto LABEL_58;
    }
  }
  else
  {
    v67[0] = (const void **)"invalid input tensor shapes, updates rank and ";
    v68 = 259;
    mlir::OpState::emitOpError(this, v67, (uint64_t)v76);
    if (v76[0])
    {
      v73 = 3;
      v74 = "indices rank must be equal, ";
      v75 = 28;
      v16 = &v73;
      v17 = (char *)v77;
      if (v78 >= v79)
      {
        v53 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          v60 = (char *)&v73 - (_BYTE *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v53, 24);
          v17 = (char *)v77;
          v16 = (int *)((char *)v77 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v53, 24);
          v16 = &v73;
          v17 = (char *)v77;
        }
      }
      v18 = &v17[24 * v78];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v78;
      if (v76[0])
      {
        v73 = 2;
        v74 = (const char *)v9;
        v21 = &v73;
        v22 = (char *)v77;
        if (v20 >= v79)
        {
          v55 = v20 + 1;
          v56 = (char *)v77 + 24 * v20 > (char *)&v73;
          if (v77 <= &v73 && v56)
          {
            v62 = (char *)&v73 - (_BYTE *)v77;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v55, 24);
            v22 = (char *)v77;
            v21 = (int *)((char *)v77 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v55, 24);
            v21 = &v73;
            v22 = (char *)v77;
          }
        }
        v23 = &v22[24 * v78];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        v25 = ++v78;
        if (v76[0])
        {
          v73 = 3;
          v74 = " != ";
          v75 = 4;
          v26 = &v73;
          v27 = (char *)v77;
          if (v25 >= v79)
          {
            v57 = v25 + 1;
            v58 = (char *)v77 + 24 * v25 > (char *)&v73;
            if (v77 <= &v73 && v58)
            {
              v63 = (char *)&v73 - (_BYTE *)v77;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v57, 24);
              v27 = (char *)v77;
              v26 = (int *)((char *)v77 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v57, 24);
              v26 = &v73;
              v27 = (char *)v77;
            }
          }
          v28 = &v27[24 * v78];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
          ++v78;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    if (v76[0])
    {
      v73 = 2;
      v74 = v30;
      v31 = &v73;
      v32 = (char *)v77;
      if (v78 >= v79)
      {
        v54 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          v61 = (char *)&v73 - (_BYTE *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v54, 24);
          v32 = (char *)v77;
          v31 = (int *)((char *)v77 + v61);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v54, 24);
          v31 = &v73;
          v32 = (char *)v77;
        }
      }
      v33 = &v32[24 * v78];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v33 = v34;
      ++v78;
    }
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    if (v85)
    {
      v35 = (_QWORD **)__p;
      if (__p)
      {
        v36 = v84;
        v37 = __p;
        if (v84 != __p)
        {
          do
            v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
          while (v36 != v35);
          v37 = __p;
        }
        v84 = v35;
        operator delete(v37);
      }
      v38 = v81;
      if (!v81)
        goto LABEL_59;
      v39 = v82;
      v40 = v81;
      if (v82 == v81)
        goto LABEL_58;
      do
      {
        v42 = (void *)*--v39;
        v41 = v42;
        *v39 = 0;
        if (v42)
          operator delete[](v41);
      }
      while (v39 != v38);
      goto LABEL_57;
    }
  }
  return v14;
}

uint64_t mlir::mps::GatherOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *ArgAttrsAttr;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t p_p;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  int64_t v42;
  int64_t v43;
  const void **v44[4];
  __int16 v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  void *__p;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *v62;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v5 = (*this)[9];
    v49 = v3;
    v50 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
    {
LABEL_3:
      v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
      v47 = v6;
      v48 = v7;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49))
        goto LABEL_4;
LABEL_8:
      ArgAttrsAttr = 0;
      v10 = 0x8000000000000000;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47))
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v47 = v6;
  v48 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49))
    goto LABEL_8;
LABEL_4:
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  v10 = v9;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47))
  {
LABEL_5:
    v11 = 0;
    v12 = 0x8000000000000000;
    goto LABEL_10;
  }
LABEL_9:
  v11 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v47);
  v12 = v13;
LABEL_10:
  v14 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v14 = 0;
  v44[0] = *(const void ***)(v14 + 8);
  mlir::IntegerAttr::getValue(v44, (llvm::APInt *)&__p);
  if (v55 > 0x40)
  {
    v15 = *(unsigned int *)__p;
    operator delete[](__p);
    v46 = v15;
    if (v10 == 0x8000000000000000)
      goto LABEL_17;
  }
  else
  {
    v15 = __p;
    v46 = __p;
    if (v10 == 0x8000000000000000)
      goto LABEL_17;
  }
  if (v15 >= v10)
  {
LABEL_19:
    v44[0] = (const void **)"invalid batch dimensions: ";
    v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
    if (__p)
    {
      LODWORD(v51) = 5;
      v52 = (const char *)v15;
      v16 = &v51;
      v17 = (char *)v56;
      if (v57 >= v58)
      {
        v39 = v57 + 1;
        if (v56 <= &v51 && (char *)v56 + 24 * v57 > (char *)&v51)
        {
          v42 = (char *)&v51 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
          v17 = (char *)v56;
          v16 = (unint64_t *)((char *)v56 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
          v16 = &v51;
          v17 = (char *)v56;
        }
      }
      v18 = &v17[24 * v57];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      v20 = ++v57;
      if (__p)
      {
        LODWORD(v51) = 3;
        v52 = ", must be less than ranks of all input tensors";
        v53 = 46;
        v21 = &v51;
        v22 = (char *)v56;
        if (v20 >= v58)
        {
          v40 = v20 + 1;
          v41 = (char *)v56 + 24 * v20 > (char *)&v51;
          if (v56 <= &v51 && v41)
          {
            v43 = (char *)&v51 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
            v22 = (char *)v56;
            v21 = (unint64_t *)((char *)v56 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
            v21 = &v51;
            v22 = (char *)v56;
          }
        }
        v23 = &v22[24 * v57];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v57;
      }
    }
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    if (v64)
    {
      v26 = (_QWORD **)v62;
      if (v62)
      {
        v27 = v63;
        v28 = v62;
        if (v63 != v62)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = v62;
        }
        v63 = v26;
        operator delete(v28);
      }
      v29 = v60;
      if (v60)
      {
        v30 = v61;
        v31 = v60;
        if (v61 != v60)
        {
          do
          {
            v33 = (void *)*--v30;
            v32 = v33;
            *v30 = 0;
            if (v33)
              operator delete[](v32);
          }
          while (v30 != v29);
          v31 = v60;
        }
        v61 = v29;
        operator delete(v31);
      }
      if (v56 != v59)
        free(v56);
    }
    return v25;
  }
LABEL_17:
  if (v12 != 0x8000000000000000 && v15 > v12)
    goto LABEL_19;
  v25 = 1;
  if (v10 == 0x8000000000000000 || v12 == 0x8000000000000000)
    return v25;
  if (!mlir::verifyCompatibleShape(ArgAttrsAttr, v15, v11, v15))
  {
    v44[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
    v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
    p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must match along batch dimensions");
LABEL_51:
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
    return v25;
  }
  LOBYTE(v51) = 0;
  LOBYTE(v52) = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 88), v10, (uint64_t)&v51))
    return 0;
  if ((_BYTE)v52)
  {
    if (v51 >= v15)
    {
      if ((uint64_t)(v10 + v12 - 1) >= 0)
        return v25;
      v44[0] = (const void **)"Rank of destination array must be greater than or equal to 0";
      v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
      p_p = (uint64_t)&__p;
    }
    else
    {
      v44[0] = (const void **)"Axis must be greater than or equal to batch ";
      v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
      v34 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "dimensions, ");
      v35 = mlir::InFlightDiagnostic::operator<<<long long &>(v34, (uint64_t *)&v51);
      v36 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v35, " < ");
      p_p = mlir::InFlightDiagnostic::operator<<<unsigned long>(v36, (uint64_t *)&v46);
    }
    goto LABEL_51;
  }
  return v25;
}

uint64_t mlir::mps::ResizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  uint64_t Context;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  uint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t ElementTypeOrSelf;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ArgAttrsAttr;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t OperandRange;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57[2];
  _BYTE v58[32];
  uint64_t v59;
  char v60[8];
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    *(_OWORD *)v57 = a7[2];
  }
  else
  {
    v14 = 0uLL;
    *(_OWORD *)v57 = 0u;
    v15 = 0uLL;
  }
  v59 = a6;
  v60[0] = 0;
  v61 = 0;
  v62 = v14;
  v63 = v15;
  v64 = *(_OWORD *)v57;
  v65 = a9;
  v66 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(v60, "mps.resize", 10, Context);
    v61 = 1;
  }
  v67 = a4;
  v68 = a5;
  if (!a5
    || (v17 = mlir::UnknownLoc::get(this, a2), !mlir::mps::ResizeOpAdaptor::verify((uint64_t)&v59, v17)))
  {
    v32 = mlir::Float32Type::get(this, a2);
    v33 = mlir::UnrankedTensorType::get(v32);
    v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
LABEL_34:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
LABEL_30:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a5 <= 1)
  {
LABEL_33:
    v57[0] = v67;
    v57[1] = 0;
    v37 = mlir::ValueRange::dereference_iterator(v57, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v37);
    v33 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
      goto LABEL_34;
    goto LABEL_30;
  }
  v57[0] = v67;
  v57[1] = 0;
  v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v57, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8))
  {
    v55 = 0;
    v56 = 0;
    goto LABEL_33;
  }
  v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  v55 = v18;
  v56 = v19;
  if (!v18)
    goto LABEL_33;
  v57[0] = v58;
  v57[1] = (void *)0x400000000;
  v20 = (unint64_t)v67;
  v69 = (unint64_t)v67;
  v70 = v64;
  if ((_DWORD)v64)
    v20 = mlir::ValueRange::offset_base(&v69, v64);
  v69 = v20;
  v70 = 0;
  v21 = mlir::ValueRange::dereference_iterator(&v69, 0);
  if (mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)v57))
  {
    v22 = LODWORD(v57[1]);
    if (!LODWORD(v57[1]))
      goto LABEL_37;
    v23 = (char *)v57[0];
    v24 = (LODWORD(v57[1]) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v25 = (char *)v57[0];
    if (v24 >= 3)
    {
      v26 = v24 + 1;
      v25 = (char *)v57[0] + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v27 = (int64x2_t *)((char *)v57[0] + 16);
      v28.i64[0] = -1;
      v28.i64[1] = -1;
      v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      while (1)
      {
        v30 = vmovn_s64(vceqq_s64(v27[-1], v28));
        if ((v30.i8[0] & 1) != 0)
        {
          v27[-1].i64[0] = 0x8000000000000000;
          if ((v30.i8[4] & 1) == 0)
          {
LABEL_22:
            v31 = vmovn_s64(vceqq_s64(*v27, v28));
            if ((v31.i8[0] & 1) == 0)
              goto LABEL_23;
            goto LABEL_27;
          }
        }
        else if ((v30.i8[4] & 1) == 0)
        {
          goto LABEL_22;
        }
        v27[-1].i64[1] = 0x8000000000000000;
        v31 = vmovn_s64(vceqq_s64(*v27, v28));
        if ((v31.i8[0] & 1) == 0)
        {
LABEL_23:
          if ((v31.i8[4] & 1) != 0)
            goto LABEL_28;
          goto LABEL_19;
        }
LABEL_27:
        v27->i64[0] = 0x8000000000000000;
        if ((v31.i8[4] & 1) != 0)
LABEL_28:
          v27->i64[1] = 0x8000000000000000;
LABEL_19:
        v27 += 2;
        v29 -= 4;
        if (!v29)
        {
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_37;
          break;
        }
      }
    }
    v52 = &v23[8 * v22];
    do
    {
      if (*(_QWORD *)v25 == -1)
        *(_QWORD *)v25 = 0x8000000000000000;
      v25 += 8;
    }
    while (v25 != v52);
LABEL_37:
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v55))
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
      if (v43 != LODWORD(v57[1]))
      {
        v69 = (unint64_t)v67;
        v70 = 0;
        v53 = mlir::ValueRange::dereference_iterator(&v69, 0);
        v54 = mlir::getElementTypeOrSelf(v53);
        v35 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v54);
        v51 = v57[0];
        if (v57[0] == v58)
          return v35;
        goto LABEL_46;
      }
      if (LODWORD(v57[1]))
      {
        v44 = ArgAttrsAttr;
        v45 = 0;
        v46 = v57[0];
        do
        {
          v69 = v46[v45];
          v70 = *(_QWORD *)(v44 + 8 * v45);
          v47 = mlir::mps::mergeDynamicDims(&v69, 2);
          v46 = v57[0];
          *((_QWORD *)v57[0] + v45++) = v47;
        }
        while (v45 < LODWORD(v57[1]));
      }
    }
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
    v41 = mlir::RankedTensorType::get((uint64_t)v57[0], LODWORD(v57[1]), OperandRange, 0);
  }
  else
  {
    v69 = (unint64_t)v67;
    v70 = 0;
    v39 = mlir::ValueRange::dereference_iterator(&v69, 0);
    v40 = mlir::getElementTypeOrSelf(v39);
    v41 = mlir::UnrankedTensorType::get(v40);
  }
  v49 = v41;
  v50 = *(unsigned int *)(a11 + 8);
  if (v50 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
  ++*(_DWORD *)(a11 + 8);
  v35 = 1;
  v51 = v57[0];
  if (v57[0] != v58)
LABEL_46:
    free(v51);
  return v35;
}

uint64_t mlir::mps::ResizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v12 = "'mps.resize' op requires attribute 'mode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = mlir::UnrankedTensorType::get(a2);
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v3;
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

uint64_t mlir::mps::verifyResize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NumElements;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *ArgAttrsAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  const void **v65[4];
  __int16 v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  void *__p;
  _QWORD **v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v11 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v11)
    {
LABEL_3:
      v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
      v69 = v11;
      v70 = v12;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69))
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v69 = v11;
  v70 = 0;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69))
  {
LABEL_4:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    NumElements = v13;
    v15 = 1;
    v16 = (_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v16)
      goto LABEL_5;
LABEL_10:
    v67 = v16;
    v68 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v67))
      goto LABEL_18;
    goto LABEL_11;
  }
LABEL_9:
  NumElements = 0;
  v15 = 0;
  v16 = (_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_10;
LABEL_5:
  v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  v67 = v16;
  v68 = v17;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v67))
    goto LABEL_18;
LABEL_11:
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
  if (v19)
  {
    v20 = 8 * v19;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v20 -= 8;
      if (!v20)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    if (v15)
    {
      v21 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
      if (NumElements != mlir::ShapedType::getNumElements(v21, v22))
      {
        v65[0] = (const void **)"Size of shape must match rank of input";
        v66 = 259;
        mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
        v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
        if (v69)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
        if (v77)
        {
          v43 = (_QWORD **)__p;
          if (__p)
          {
            v44 = v76;
            v45 = __p;
            if (v76 != __p)
            {
              do
                v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              v45 = __p;
            }
            v76 = v43;
            operator delete(v45);
          }
          v46 = v73;
          if (!v73)
            goto LABEL_87;
          v47 = v74;
          v48 = v73;
          if (v74 == v73)
            goto LABEL_86;
          do
          {
            v50 = (void *)*--v47;
            v49 = v50;
            *v47 = 0;
            if (v50)
              operator delete[](v49);
          }
          while (v47 != v46);
          goto LABEL_85;
        }
        return v41;
      }
    }
    v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
    NumElements = mlir::ShapedType::getNumElements(v23, v24);
    v15 = 1;
  }
LABEL_18:
  if (!a6)
    goto LABEL_30;
  v25 = (_QWORD *)(*(_QWORD *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25)
  {
    v63 = 0;
    v64 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63))
      goto LABEL_23;
LABEL_30:
    if (!a7)
      return 1;
    v34 = (_QWORD *)(*(_QWORD *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v34)
    {
      v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v34 + 8);
      v63 = v34;
      v64 = v35;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63))
        return 1;
    }
    else
    {
      v63 = 0;
      v64 = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63))
        return 1;
    }
    v36 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    if (v37)
    {
      v38 = 8 * v37;
      while (*v36 != 0x8000000000000000)
      {
        ++v36;
        v38 -= 8;
        if (!v38)
          goto LABEL_39;
      }
      return 1;
    }
LABEL_39:
    if (!v15)
      return 1;
    v39 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    if (NumElements == mlir::ShapedType::getNumElements(v39, v40))
      return 1;
    v65[0] = (const void **)"Size of offset must match rank of input";
    v66 = 259;
    mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
    v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
    if (v69)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
    if (v77)
    {
      v57 = (_QWORD **)__p;
      if (__p)
      {
        v58 = v76;
        v59 = __p;
        if (v76 != __p)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = __p;
        }
        v76 = v57;
        operator delete(v59);
      }
      v46 = v73;
      if (!v73)
        goto LABEL_87;
      v60 = v74;
      v48 = v73;
      if (v74 == v73)
      {
LABEL_86:
        v74 = v46;
        operator delete(v48);
LABEL_87:
        if (v71 != &v72)
          free(v71);
        return v41;
      }
      do
      {
        v62 = (void *)*--v60;
        v61 = v62;
        *v60 = 0;
        if (v62)
          operator delete[](v61);
      }
      while (v60 != v46);
LABEL_85:
      v48 = v73;
      goto LABEL_86;
    }
    return v41;
  }
  v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  v63 = v25;
  v64 = v26;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63))
    goto LABEL_30;
LABEL_23:
  v27 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
  if (v28)
  {
    v29 = 8 * v28;
    while (*v27 != 0x8000000000000000)
    {
      ++v27;
      v29 -= 8;
      if (!v29)
        goto LABEL_27;
    }
    goto LABEL_30;
  }
LABEL_27:
  if (!v15
    || (v30 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63),
        NumElements == mlir::ShapedType::getNumElements(v30, v31)))
  {
    v32 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    NumElements = mlir::ShapedType::getNumElements(v32, v33);
    v15 = 1;
    goto LABEL_30;
  }
  v65[0] = (const void **)"Size of scale must match rank of input";
  v66 = 259;
  mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
  v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
  if (v69)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  if (v77)
  {
    v51 = (_QWORD **)__p;
    if (__p)
    {
      v52 = v76;
      v53 = __p;
      if (v76 != __p)
      {
        do
          v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
        while (v52 != v51);
        v53 = __p;
      }
      v76 = v51;
      operator delete(v53);
    }
    v46 = v73;
    if (!v73)
      goto LABEL_87;
    v54 = v74;
    v48 = v73;
    if (v74 == v73)
      goto LABEL_86;
    do
    {
      v56 = (void *)*--v54;
      v55 = v56;
      *v54 = 0;
      if (v56)
        operator delete[](v55);
    }
    while (v54 != v46);
    goto LABEL_85;
  }
  return v41;
}

uint64_t mlir::mps::getResizedAxesImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  uint64_t v42;
  int32x2_t v43;
  int32x2_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  float v66;
  unint64_t v67;
  char *v69;
  uint64_t ArgAttrsAttr;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[16];
  void *v81;
  uint64_t v82;
  _BYTE v83[16];
  void *v84;
  uint64_t v85;
  _QWORD v86[6];

  v86[4] = *MEMORY[0x1E0C80C00];
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    v73 = v13;
    v74 = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
      goto LABEL_3;
    return 0;
  }
  v73 = 0;
  v74 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
    return 0;
LABEL_3:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  v16 = v15;
  v84 = v86;
  v85 = 0x400000000;
  v81 = v83;
  v82 = 0x400000000;
  v78 = v80;
  v79 = 0x400000000;
  if (!a1)
  {
    if (!a2)
    {
      ArgAttrsAttr = 0;
      v22 = 0;
      v20 = 0;
      v23 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v23)
        goto LABEL_20;
      goto LABEL_8;
    }
    v25 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v25)
    {
      v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
      v75 = v25;
      v76 = v26;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
LABEL_15:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (v16 != v27)
        {
LABEL_39:
          v24 = 0;
          v45 = v78;
          if (v78 == v80)
            goto LABEL_97;
LABEL_96:
          free(v45);
          goto LABEL_97;
        }
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        a2 = v28;
        v22 = 0;
        v20 = 0;
        v23 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v23)
          goto LABEL_20;
LABEL_8:
        v71 = v23;
        v72 = 0;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
          goto LABEL_47;
        goto LABEL_21;
      }
    }
    else
    {
      v75 = 0;
      v76 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
        goto LABEL_15;
    }
    a2 = 0;
    ArgAttrsAttr = 0;
    v22 = 0;
    v20 = 0;
    v23 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23)
      goto LABEL_20;
    goto LABEL_8;
  }
  v17 = (_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v17)
  {
    v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
    v75 = v17;
    v76 = v18;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      goto LABEL_6;
    goto LABEL_19;
  }
  v75 = 0;
  v76 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
  {
LABEL_19:
    v22 = 0;
    v20 = 0;
    a2 = 0;
    ArgAttrsAttr = 0;
    v23 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23)
      goto LABEL_20;
    goto LABEL_8;
  }
LABEL_6:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v16 != v19)
    goto LABEL_39;
  v20 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  v22 = v21;
  a2 = 0;
  ArgAttrsAttr = 0;
  v23 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_8;
LABEL_20:
  v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
  v71 = v23;
  v72 = v29;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
    goto LABEL_47;
LABEL_21:
  v30 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  if (v31)
  {
    v32 = 8 * v31;
    do
    {
      if (*v30 == 0x8000000000000000)
        goto LABEL_47;
      ++v30;
      v32 -= 8;
    }
    while (v32);
  }
  v33 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  if (v16 != mlir::ShapedType::getNumElements(v33, v34))
    goto LABEL_102;
  mlir::matchConstantWithIntVector<long long>(a4, (uint64_t)&v84);
  v35 = v85;
  if (!(_DWORD)v85)
    goto LABEL_47;
  v36 = (char *)v84;
  v37 = (v85 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v38 = (char *)v84;
  if (v37 < 3)
    goto LABEL_104;
  v39 = v37 + 1;
  v38 = (char *)v84 + 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
  v40 = (int64x2_t *)((char *)v84 + 16);
  v41.i64[0] = -1;
  v41.i64[1] = -1;
  v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v43 = vmovn_s64(vceqq_s64(v40[-1], v41));
    if ((v43.i8[0] & 1) != 0)
    {
      v40[-1].i64[0] = 0x8000000000000000;
      if ((v43.i8[4] & 1) == 0)
        goto LABEL_32;
    }
    else if ((v43.i8[4] & 1) == 0)
    {
LABEL_32:
      v44 = vmovn_s64(vceqq_s64(*v40, v41));
      if ((v44.i8[0] & 1) == 0)
        goto LABEL_37;
      goto LABEL_33;
    }
    v40[-1].i64[1] = 0x8000000000000000;
    v44 = vmovn_s64(vceqq_s64(*v40, v41));
    if ((v44.i8[0] & 1) == 0)
    {
LABEL_37:
      if ((v44.i8[4] & 1) == 0)
        goto LABEL_29;
      goto LABEL_38;
    }
LABEL_33:
    v40->i64[0] = 0x8000000000000000;
    if ((v44.i8[4] & 1) == 0)
      goto LABEL_29;
LABEL_38:
    v40->i64[1] = 0x8000000000000000;
LABEL_29:
    v40 += 2;
    v42 -= 4;
  }
  while (v42);
  if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_47;
LABEL_104:
  v69 = &v36[8 * v35];
  do
  {
    if (*(_QWORD *)v38 == -1)
      *(_QWORD *)v38 = 0x8000000000000000;
    v38 += 8;
  }
  while (v38 != v69);
LABEL_47:
  if (!a5)
  {
LABEL_58:
    if (a6)
    {
      v53 = (_QWORD *)(*(_QWORD *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v53)
      {
        v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v53 + 8);
        v75 = v53;
        v76 = v54;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
          goto LABEL_69;
LABEL_63:
        v55 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (v56)
        {
          v57 = 8 * v56;
          while (*v55 != 0x8000000000000000)
          {
            ++v55;
            v57 -= 8;
            if (!v57)
              goto LABEL_67;
          }
        }
        else
        {
LABEL_67:
          v58 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
          if (v16 != mlir::ShapedType::getNumElements(v58, v59))
            goto LABEL_102;
          mlir::matchConstantWithFloatVector<float>(a6, (uint64_t)&v78);
        }
        goto LABEL_69;
      }
      v75 = 0;
      v76 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
        goto LABEL_63;
    }
LABEL_69:
    if (v16 < 1)
    {
LABEL_95:
      v24 = 1;
      v45 = v78;
      if (v78 == v80)
        goto LABEL_97;
      goto LABEL_96;
    }
    v60 = 0;
    while (1)
    {
      if (v22)
      {
        v62 = *(_QWORD *)(v20 + 8 * v60);
        if ((_DWORD)v85)
          goto LABEL_77;
      }
      else
      {
        v62 = 0x8000000000000000;
        if ((_DWORD)v85)
        {
LABEL_77:
          v63 = *((_QWORD *)v84 + v60);
          if (a2)
            goto LABEL_78;
          goto LABEL_83;
        }
      }
      v63 = 0x8000000000000000;
      if (a2)
      {
LABEL_78:
        v64 = *(_QWORD *)(ArgAttrsAttr + 8 * v60);
        if ((_DWORD)v82)
          goto LABEL_79;
        goto LABEL_84;
      }
LABEL_83:
      v64 = 0x8000000000000000;
      if ((_DWORD)v82)
      {
LABEL_79:
        v65 = *((float *)v81 + v60);
        if (!(_DWORD)v79)
          goto LABEL_85;
        goto LABEL_80;
      }
LABEL_84:
      v65 = 1.0;
      if (!(_DWORD)v79)
      {
LABEL_85:
        v66 = 0.0;
        goto LABEL_86;
      }
LABEL_80:
      v66 = *((float *)v78 + v60);
LABEL_86:
      v75 = (_QWORD *)v62;
      v76 = v63;
      v77 = v64;
      v67 = mlir::mps::mergeDynamicDims((unint64_t *)&v75, 3);
      if (v62 != 0x8000000000000000 && v62 != v67
        || v63 != 0x8000000000000000 && v63 != v67
        || v64 != 0x8000000000000000 && v64 != v67
        || v65 != 1.0
        || v66 != 0.0)
      {
        v61 = *(unsigned int *)(a7 + 8);
        if (v61 >= *(unsigned int *)(a7 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), v61 + 1, 8);
          v61 = *(unsigned int *)(a7 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a7 + 8 * v61) = v60;
        ++*(_DWORD *)(a7 + 8);
      }
      if (v16 == ++v60)
        goto LABEL_95;
    }
  }
  v46 = (_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v46)
  {
    v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
    v75 = v46;
    v76 = v47;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      goto LABEL_58;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      goto LABEL_58;
  }
  v48 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v49)
  {
    v50 = 8 * v49;
    while (*v48 != 0x8000000000000000)
    {
      ++v48;
      v50 -= 8;
      if (!v50)
        goto LABEL_56;
    }
    goto LABEL_58;
  }
LABEL_56:
  v51 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v16 == mlir::ShapedType::getNumElements(v51, v52))
  {
    mlir::matchConstantWithFloatVector<float>(a5, (uint64_t)&v81);
    goto LABEL_58;
  }
LABEL_102:
  v24 = 0;
  v45 = v78;
  if (v78 != v80)
    goto LABEL_96;
LABEL_97:
  if (v81 != v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  return v24;
}

uint64_t mlir::mps::getResizedAxes(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  *(_DWORD *)(a2 + 8) = 0;
  if (!a1)
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id)
  {
    if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeGradientOp,void>::id)
      return 0;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
    if (*(_DWORD *)(a1 + 36))
      v19 = a1 - 16;
    else
      v19 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
    if (*(_BYTE *)(a1 + 47))
      v20 = (unsigned int *)(a1 + 80);
    else
      v20 = 0;
    v21 = *(_QWORD *)(a1 + 72);
    v22 = v20[8];
    v23 = v21 + 32 * v22;
    v24 = v20[9] + v22;
    v25 = v20[10];
    if (v25)
    {
      v15 = *(_QWORD *)(v21 + 32 * v24 + 24);
      v16 = *(_QWORD *)(v23 + 24);
      if (v20[11])
      {
LABEL_22:
        v17 = *(_QWORD *)(v21 + 32 * (v25 + v24) + 24);
LABEL_27:
        v6 = 0;
        return mlir::mps::getResizedAxesImpl(v6, v18, NextResultAtOffset, v16, v15, v17, a2);
      }
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)(v23 + 24);
      if (v20[11])
        goto LABEL_22;
    }
    v17 = 0;
    goto LABEL_27;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  if (*(_DWORD *)(a1 + 36))
    v7 = a1 - 16;
  else
    v7 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  if (*(_BYTE *)(a1 + 47))
    v9 = (unsigned int *)(a1 + 80);
  else
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = v9[8];
  v12 = v10 + 32 * v11;
  v13 = v9[9] + v11;
  v14 = v9[10];
  if (!v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(v12 + 24);
    if (v9[11])
      goto LABEL_13;
LABEL_24:
    v17 = 0;
    v18 = 0;
    return mlir::mps::getResizedAxesImpl(v6, v18, NextResultAtOffset, v16, v15, v17, a2);
  }
  v15 = *(_QWORD *)(v10 + 32 * v13 + 24);
  v16 = *(_QWORD *)(v12 + 24);
  if (!v9[11])
    goto LABEL_24;
LABEL_13:
  v17 = *(_QWORD *)(v10 + 32 * (v14 + v13) + 24);
  v18 = 0;
  return mlir::mps::getResizedAxesImpl(v6, v18, NextResultAtOffset, v16, v15, v17, a2);
}

uint64_t mlir::mps::ResizeOp::getShape(mlir::mps::ResizeOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 32) + 24);
}

uint64_t mlir::mps::ResizeOp::getScale(mlir::mps::ResizeOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[10];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[9] + v2[8]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[9] + v2[8]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::ResizeOp::getOffset(mlir::mps::ResizeOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[11];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[10] + v2[9] + v2[8]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[10] + v2[9] + v2[8]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::getResizeLayout(mlir::mps *this, mlir::Operation *a2)
{
  uint64_t v2;
  void *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[3];

  v2 = (uint64_t)this;
  v16[2] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 0;
  if (this)
  {
    v3 = *(void **)(*((_QWORD *)this + 6) + 16);
    if (v3 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id
      && v3 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeGradientOp,void>::id)
    {
      goto LABEL_13;
    }
    if (*((_DWORD *)this + 9))
      v4 = (char *)this - 16;
    else
      v4 = 0;
    v5 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v4, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
      v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
      v12 = v5;
      v13 = v6;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v12))
      {
LABEL_12:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v12);
        if (v8 > 4)
          goto LABEL_13;
        v10 = v8;
        v14 = v16;
        v15 = 0x200000000;
        if (!mlir::mps::getResizedAxes(v2, (uint64_t)&v14))
          goto LABEL_17;
        v2 = v15;
        if (v15 > 2)
          goto LABEL_17;
        if (v10 == 2)
        {
          v2 = 6;
          v7 = 0x100000000;
          v11 = v14;
          if (v14 == v16)
            return v2 | v7 & 0x100000000;
          goto LABEL_45;
        }
        if (v10 != 3)
        {
          if (v10 != 4)
          {
LABEL_17:
            v7 = 0;
            v2 = 0;
            v11 = v14;
            if (v14 == v16)
              return v2 | v7 & 0x100000000;
            goto LABEL_45;
          }
          if (!(_DWORD)v15)
            goto LABEL_44;
          if ((_DWORD)v15 == 1)
          {
            v2 = 0;
            if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL) == 2 || *(_QWORD *)v14 != 1)
            {
LABEL_44:
              v7 = 0x100000000;
              v11 = v14;
              if (v14 == v16)
                return v2 | v7 & 0x100000000;
LABEL_45:
              free(v11);
              return v2 | v7 & 0x100000000;
            }
LABEL_36:
            v2 = 1;
            v7 = 0x100000000;
            v11 = v14;
            if (v14 == v16)
              return v2 | v7 & 0x100000000;
            goto LABEL_45;
          }
          if (*(_QWORD *)v14 == 1 && *((_QWORD *)v14 + 1) == 2)
            goto LABEL_36;
          goto LABEL_43;
        }
        if ((_DWORD)v15)
        {
          if ((_DWORD)v15 == 1)
          {
            if ((unint64_t)(*(_QWORD *)v14 - 1) < 2)
              goto LABEL_32;
            if (*(_QWORD *)v14)
              goto LABEL_43;
          }
          else
          {
            if (*(_QWORD *)v14)
            {
              if (*(_QWORD *)v14 == 1)
              {
                v2 = 4 * (*((_QWORD *)v14 + 1) == 2);
                v7 = 0x100000000;
                v11 = v14;
                if (v14 == v16)
                  return v2 | v7 & 0x100000000;
                goto LABEL_45;
              }
              goto LABEL_43;
            }
            if (*((_QWORD *)v14 + 1) != 1)
            {
LABEL_43:
              v2 = 0;
              goto LABEL_44;
            }
          }
          v2 = 5;
          v7 = 0x100000000;
          v11 = v14;
          if (v14 == v16)
            return v2 | v7 & 0x100000000;
          goto LABEL_45;
        }
LABEL_32:
        v2 = 4;
        v7 = 0x100000000;
        v11 = v14;
        if (v14 == v16)
          return v2 | v7 & 0x100000000;
        goto LABEL_45;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v12))
        goto LABEL_12;
    }
LABEL_13:
    v7 = 0;
    v2 = 0;
    return v2 | v7 & 0x100000000;
  }
  v7 = 0;
  return v2 | v7 & 0x100000000;
}

uint64_t mlir::mps::ResizeGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  uint64_t Context;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t ArgAttrsAttr;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t OperandRange;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t ElementTypeOrSelf;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46[2];
  _BYTE v47[32];
  uint64_t v48;
  char v49[8];
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    *(_OWORD *)v46 = a7[2];
  }
  else
  {
    v14 = 0uLL;
    *(_OWORD *)v46 = 0u;
    v15 = 0uLL;
  }
  v48 = a6;
  v49[0] = 0;
  v50 = 0;
  v51 = v14;
  v52 = v15;
  v53 = *(_OWORD *)v46;
  v54 = a9;
  v55 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v48);
    if (v50)
      v50 = 0;
    mlir::OperationName::OperationName(v49, "mps.resize_gradient", 19, Context);
    v50 = 1;
  }
  v56 = a4;
  v57 = a5;
  if (!a5
    || (v17 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::ResizeGradientOpAdaptor::verify((uint64_t)&v48, v17)))
  {
    v30 = mlir::Float32Type::get(this, a2);
    v31 = mlir::UnrankedTensorType::get(v30);
    v32 = *(unsigned int *)(a11 + 8);
    if (v32 >= *(_DWORD *)(a11 + 12))
    {
LABEL_27:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
      LODWORD(v32) = *(_DWORD *)(a11 + 8);
    }
LABEL_23:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v32) = v31;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a5 <= 1)
  {
LABEL_26:
    v46[0] = v56;
    v46[1] = 0;
    v35 = mlir::ValueRange::dereference_iterator(v46, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
    v31 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v32 = *(unsigned int *)(a11 + 8);
    if (v32 >= *(_DWORD *)(a11 + 12))
      goto LABEL_27;
    goto LABEL_23;
  }
  v46[0] = v56;
  v46[1] = 0;
  v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v46, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8))
  {
    v44 = 0;
    v45 = 0;
    goto LABEL_26;
  }
  v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  v44 = v18;
  v45 = v19;
  if (!v18)
    goto LABEL_26;
  v46[0] = v47;
  v46[1] = (void *)0x400000000;
  v20 = (unint64_t)v56;
  v58 = (unint64_t)v56;
  v59 = v53;
  if ((_DWORD)v53)
    v20 = mlir::ValueRange::offset_base(&v58, v53);
  v58 = v20;
  v59 = 0;
  v21 = mlir::ValueRange::dereference_iterator(&v58, 0);
  if (mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)v46))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44))
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
      if (v23 != LODWORD(v46[1]))
      {
        v58 = (unint64_t)v56;
        v59 = 0;
        v42 = mlir::ValueRange::dereference_iterator(&v58, 0);
        v43 = mlir::getElementTypeOrSelf(v42);
        v33 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v43);
        v41 = v46[0];
        if (v46[0] == v47)
          return v33;
        goto LABEL_32;
      }
      if (LODWORD(v46[1]))
      {
        v24 = ArgAttrsAttr;
        v25 = 0;
        v26 = v46[0];
        do
        {
          v58 = v26[v25];
          v59 = *(_QWORD *)(v24 + 8 * v25);
          v27 = mlir::mps::mergeDynamicDims(&v58, 2);
          v26 = v46[0];
          *((_QWORD *)v46[0] + v25++) = v27;
        }
        while (v25 < LODWORD(v46[1]));
      }
    }
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v44);
    v29 = mlir::RankedTensorType::get((uint64_t)v46[0], LODWORD(v46[1]), OperandRange, 0);
  }
  else
  {
    v58 = (unint64_t)v56;
    v59 = 0;
    v37 = mlir::ValueRange::dereference_iterator(&v58, 0);
    v38 = mlir::getElementTypeOrSelf(v37);
    v29 = mlir::UnrankedTensorType::get(v38);
  }
  v39 = v29;
  v40 = *(unsigned int *)(a11 + 8);
  if (v40 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v40) = v39;
  ++*(_DWORD *)(a11 + 8);
  v33 = 1;
  v41 = v46[0];
  if (v46[0] != v47)
LABEL_32:
    free(v41);
  return v33;
}

uint64_t mlir::mps::ResizeGradientOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v12 = "'mps.resize_gradient' op requires attribute 'mode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::TopKOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  mlir::Float32Type *v14;
  uint64_t v15;
  uint64_t ElementTypeOrSelf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Context;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *ArgAttrsAttr;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56[2];
  _QWORD v57[2];
  mlir::Float32Type *v58;
  void **v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[8];
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v57[0] = a11;
  v57[1] = &v58;
  v58 = a1;
  if (a7)
  {
    v13 = *a7;
    v64 = a6;
    v65[0] = 0;
    v66 = 0;
    v67 = v13;
    v68 = a9;
    v69 = a10;
    if (!a6)
      goto LABEL_3;
  }
  else
  {
    v64 = a6;
    v65[0] = 0;
    v66 = 0;
    v67 = 0;
    v68 = a9;
    v69 = a10;
    if (!a6)
    {
LABEL_3:
      v70 = a4;
      v71 = a5;
      v14 = v58;
      if (a5)
        goto LABEL_4;
LABEL_14:
      v24 = mlir::Float32Type::get(v14, a2);
      v17 = mlir::UnrankedTensorType::get(v24);
      v18 = *(unsigned int *)(a11 + 8);
      if (v18 < *(_DWORD *)(a11 + 12))
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v64);
  if (v66)
    v66 = 0;
  mlir::OperationName::OperationName(v65, "mps.top_k", 9, Context);
  v66 = 1;
  v70 = a4;
  v71 = a5;
  v14 = v58;
  if (!a5)
    goto LABEL_14;
LABEL_4:
  mlir::UnknownLoc::get(v14, a2);
  if (a5 <= 2)
    goto LABEL_5;
  v61 = v70;
  v62 = 0;
  v25 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v61, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26)
    v26 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  else
    v25 = 0;
  v56[0] = v25;
  v56[1] = v26;
  v61 = v70;
  v62 = 1;
  v61 = (void *)mlir::ValueRange::offset_base(&v61, 1);
  v62 = 0;
  v27 = mlir::ValueRange::dereference_iterator(&v61, 0);
  v61 = 0;
  v62 = 0;
  v59 = &v61;
  v60 = v27;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v60);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<int>((uint64_t)v61, v62);
    v30 = SingleInt & 0xFFFFFF00;
    v31 = SingleInt;
    v32 = BYTE4(SingleInt);
  }
  else
  {
    v30 = 0;
    v32 = 0;
    v31 = 0;
  }
  v61 = v70;
  v62 = 2;
  v61 = (void *)mlir::ValueRange::offset_base(&v61, 2);
  v62 = 0;
  v33 = mlir::ValueRange::dereference_iterator(&v61, 0);
  v61 = 0;
  v62 = 0;
  v59 = &v61;
  v60 = v33;
  v34 = mlir::Value::getDefiningOp((mlir::Value *)&v60);
  if (v34 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v34))
  {
    v35 = mlir::getSingleIntValue<int>((uint64_t)v61, v62);
    v36 = v35 & 0xFFFFFF00;
    v37 = v35;
    v38 = BYTE4(v35);
    if (!v25)
      goto LABEL_5;
  }
  else
  {
    v36 = 0;
    v38 = 0;
    v37 = 0;
    if (!v25)
      goto LABEL_5;
  }
  if (!v32
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56), !v39))
  {
LABEL_5:
    v61 = v70;
    v62 = 0;
    v15 = mlir::ValueRange::dereference_iterator(&v61, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
    v17 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12))
    {
LABEL_6:
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      v19 = mlir::IntegerType::get((uint64_t)v58, 0x20u, 1u);
      v20 = mlir::UnrankedTensorType::get(v19);
      v21 = *(unsigned int *)(a11 + 8);
      if (v21 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
        LODWORD(v21) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_15:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
    goto LABEL_6;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
  v41 = (v40 & ((uint64_t)(v31 | v30) >> 31)) + (v31 | v30);
  if (v41 < v40)
  {
    if (v38)
    {
      v42 = v37 | v36;
      if ((int)(v37 | v36) <= 0)
        goto LABEL_34;
    }
    else
    {
      v42 = 0x8000000000000000;
    }
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
    v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v61, ArgAttrsAttr, (_BYTE *)(v46 + 8 * v47));
    v48 = v61;
    *((_QWORD *)v61 + v41) = v42;
    v49 = v62;
    v50 = mlir::getElementTypeOrSelf(v56[0]);
    v51 = mlir::RankedTensorType::get((uint64_t)v48, v49, v50, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v51);
    v52 = v61;
    v53 = v62;
    v54 = mlir::IntegerType::get((uint64_t)v58, 0x20u, 1u);
    v55 = mlir::RankedTensorType::get((uint64_t)v52, v53, v54, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v55);
    if (v61 != &v63)
      free(v61);
    return 1;
  }
LABEL_34:
  v61 = v70;
  v62 = 0;
  v43 = mlir::ValueRange::dereference_iterator(&v61, 0);
  v44 = mlir::getElementTypeOrSelf(v43);
  return mlir::mps::TopKOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()((uint64_t)v57, v44);
}

uint64_t mlir::mps::TopKOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a1;
  v4 = mlir::UnrankedTensorType::get(a2);
  v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  v6 = *(_QWORD *)a1;
  v7 = mlir::IntegerType::get(**(_QWORD **)(a1 + 8), 0x20u, 1u);
  v8 = mlir::UnrankedTensorType::get(v7);
  v9 = *(unsigned int *)(v6 + 8);
  if (v9 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v9) = v8;
  ++*(_DWORD *)(v6 + 8);
  return 1;
}

uint64_t mlir::mps::TopKOp::verify(uint64_t **this)
{
  const void **v2;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t ***v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t ***v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  BOOL v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const void **v58[4];
  __int16 v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE v70[96];
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v2 = *(const void ***)((*this)[9] + 88);
  v65 = 0;
  v66 = 0;
  v60 = (uint64_t **)&v65;
  v58[0] = v2;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v58);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v60, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<int>(v65, v66);
  if ((SingleInt & 0xFF00000000) == 0)
    return 1;
  v5 = SingleInt;
  if ((int)SingleInt <= 0)
  {
    v58[0] = (const void **)"K must be larger than 0";
    v59 = 259;
    mlir::OpState::emitOpError(this, v58, (uint64_t)&v65);
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    if (v75)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v74;
        v15 = __p;
        if (v74 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v74 = v13;
        operator delete(v15);
      }
      v16 = v71;
      if (v71)
      {
        v17 = v72;
        v18 = v71;
        if (v72 != v71)
        {
          do
          {
            v20 = (void *)*--v17;
            v19 = v20;
            *v17 = 0;
            if (v20)
              operator delete[](v19);
          }
          while (v17 != v16);
          v18 = v71;
        }
        v72 = v16;
        operator delete(v18);
      }
      v25 = v67;
      if (v67 != v70)
        goto LABEL_62;
    }
    return v12;
  }
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v6)
  {
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    v56 = v6;
    v57 = v7;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
      goto LABEL_7;
    return 1;
  }
  v56 = 0;
  v57 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
    return 1;
LABEL_7:
  v63[0] = &v64;
  v63[1] = (void *)0x100000000;
  v8 = *(const void ***)((*this)[9] + 56);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  v10 = v9;
  v65 = 0;
  v66 = 0;
  v60 = (uint64_t **)&v65;
  v58[0] = v8;
  v11 = mlir::Value::getDefiningOp((mlir::Value *)v58);
  if (v11 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v60, v11))
  else
    mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant");
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  if (v22 < 1)
  {
    v24 = 1;
  }
  else
  {
    v23 = *(unsigned int *)v63[0];
    v24 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56) + 8 * v23);
    if (v24 == 0x8000000000000000)
      goto LABEL_60;
  }
  if (v24 >= v5)
  {
LABEL_60:
    v12 = 1;
    goto LABEL_61;
  }
  v58[0] = (const void **)"k is larger than input minor dimension, ";
  v59 = 259;
  mlir::OpState::emitOpError(this, v58, (uint64_t)&v65);
  if (v65)
  {
    LODWORD(v60) = 2;
    v61 = v5;
    v26 = &v60;
    v27 = (char *)v67;
    if (v68 >= v69)
    {
      v48 = v68 + 1;
      if (v67 <= &v60 && (char *)v67 + 24 * v68 > (char *)&v60)
      {
        v53 = (char *)&v60 - (_BYTE *)v67;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v48, 24);
        v27 = (char *)v67;
        v26 = (uint64_t ***)((char *)v67 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v48, 24);
        v26 = &v60;
        v27 = (char *)v67;
      }
    }
    v28 = &v27[24 * v68];
    v29 = *(_OWORD *)v26;
    *((_QWORD *)v28 + 2) = v26[2];
    *(_OWORD *)v28 = v29;
    v30 = ++v68;
    if (v65)
    {
      LODWORD(v60) = 3;
      v61 = (uint64_t)" > ";
      v62 = 3;
      v31 = &v60;
      v32 = (char *)v67;
      if (v30 >= v69)
      {
        v49 = v30 + 1;
        v50 = (char *)v67 + 24 * v30 > (char *)&v60;
        if (v67 <= &v60 && v50)
        {
          v54 = (char *)&v60 - (_BYTE *)v67;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v49, 24);
          v32 = (char *)v67;
          v31 = (uint64_t ***)((char *)v67 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v49, 24);
          v31 = &v60;
          v32 = (char *)v67;
        }
      }
      v33 = &v32[24 * v68];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = v31[2];
      *(_OWORD *)v33 = v34;
      v35 = ++v68;
      if (v65)
      {
        LODWORD(v60) = 2;
        v61 = v24;
        v36 = &v60;
        v37 = (char *)v67;
        if (v35 >= v69)
        {
          v51 = v35 + 1;
          v52 = (char *)v67 + 24 * v35 > (char *)&v60;
          if (v67 <= &v60 && v52)
          {
            v55 = (char *)&v60 - (_BYTE *)v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
            v37 = (char *)v67;
            v36 = (uint64_t ***)((char *)v67 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
            v36 = &v60;
            v37 = (char *)v67;
          }
        }
        v38 = &v37[24 * v68];
        v39 = *(_OWORD *)v36;
        *((_QWORD *)v38 + 2) = v36[2];
        *(_OWORD *)v38 = v39;
        ++v68;
      }
    }
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
  if (v65)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
  if (v75)
  {
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v74;
      v42 = __p;
      if (v74 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v74 = v40;
      operator delete(v42);
    }
    v43 = v71;
    if (v71)
    {
      v44 = v72;
      v45 = v71;
      if (v72 != v71)
      {
        do
        {
          v47 = (void *)*--v44;
          v46 = v47;
          *v44 = 0;
          if (v47)
            operator delete[](v46);
        }
        while (v44 != v43);
        v45 = v71;
      }
      v72 = v43;
      operator delete(v45);
    }
    if (v67 != v70)
      free(v67);
  }
LABEL_61:
  v25 = v63[0];
  if (v63[0] != &v64)
LABEL_62:
    free(v25);
  return v12;
}

uint64_t mlir::mps::`anonymous namespace'::verifyConstantAxis(mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22[4];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  const void **v26[4];
  __int16 v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 9);
  v4 = *(_QWORD *)(v3 + 32 * a2 + 24);
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5)
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  else
    v6 = 0;
  v29[0] = v5;
  v29[1] = v6;
  v38 = v40;
  v39 = 0x600000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
    && mlir::matchConstantWithIntVector<long long>(v4, (uint64_t)&v38)
    && (_DWORD)v39)
  {
    v7 = v38;
    v8 = 8 * v39;
    while (1)
    {
      v28 = *v7;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      v30[0] = v28;
      if (v28 < -v9 || v9 <= v28)
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_13;
    }
    v22[0] = -v9;
    v26[0] = (const void **)(v9 - 1);
    mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(0, 0, "invalid axis ", v30, " is outside of the range [", v22, ", ", (uint64_t *)v26, "]");
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
    v22[0] = (uint64_t)"failed: constant axis ({0}) is not within range for the input tensor rank ({1})";
    v22[1] = 79;
    v22[2] = (uint64_t)v25;
    v22[3] = 2;
    v23[0] = &off_1E0E23E00;
    v23[1] = &v28;
    v24[0] = &off_1E0E23EC0;
    v24[1] = v13;
    v25[0] = v23;
    v25[1] = v24;
    v27 = 263;
    v26[0] = (const void **)v22;
    mlir::Operation::emitOpError((uint64_t *)this, v26, (uint64_t)v30);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v36;
        v16 = __p;
        if (v36 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v36 = v14;
        operator delete(v16);
      }
      v17 = v33;
      if (v33)
      {
        v18 = v34;
        v19 = v33;
        if (v34 != v33)
        {
          do
          {
            v21 = (void *)*--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              operator delete[](v20);
          }
          while (v18 != v17);
          v19 = v33;
        }
        v34 = v17;
        operator delete(v19);
      }
      if (v31 != &v32)
        free(v31);
    }
  }
  else
  {
LABEL_13:
    v11 = 1;
  }
  if (v38 != v40)
    free(v38);
  return v11;
}

uint64_t mlir::InFlightDiagnostic::operator<<<int &>(uint64_t a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a1)
  {
    v3 = a1 + 24;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v14 = 2;
    v15 = v5;
    v6 = *(unsigned int *)(a1 + 32);
    v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      v11 = v6 + 1;
      v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = &v14;
      }
    }
    v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::mps::TopKGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t Context;
  _QWORD *v16;
  uint64_t v17;
  uint64_t ElementTypeOrSelf;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD v51[2];
  void **v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[8];
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  _QWORD v64[3];

  v64[2] = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v56 = a6;
  v57[0] = 0;
  v58 = 0;
  v59 = v14;
  v60 = a9;
  v61 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58)
      v58 = 0;
    mlir::OperationName::OperationName(v57, "mps.top_k_grad", 14, Context);
    v58 = 1;
  }
  v62 = a4;
  v63 = a5;
  if (!a5)
  {
    ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_31:
    v38 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v39 = *(unsigned int *)(a11 + 8);
    if (v39 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v39) = v38;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3)
    goto LABEL_30;
  v53 = v62;
  v54 = 0;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  if (v17)
    v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  else
    v16 = 0;
  v51[0] = v16;
  v51[1] = v17;
  v53 = v62;
  v54 = 1;
  v53 = (void *)mlir::ValueRange::offset_base(&v53, 1);
  v54 = 0;
  v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  if (v20)
    v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  else
    v19 = 0;
  v50[0] = v19;
  v50[1] = v20;
  v53 = v62;
  v54 = 2;
  v53 = (void *)mlir::ValueRange::offset_base(&v53, 2);
  v54 = 0;
  v21 = mlir::ValueRange::dereference_iterator(&v53, 0);
  v53 = 0;
  v54 = 0;
  v52 = &v53;
  v64[0] = v21;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v64);
  if (!DefiningOp
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v52, DefiningOp)
    || (SingleInt = mlir::getSingleIntValue<int>((uint64_t)v53, v54), !v16)
    || !v19
    || (v24 = SingleInt, (SingleInt & 0xFF00000000) == 0)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51), !v25)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50), !v26)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51),
        v28 = v27,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50),
        v28 != v29))
  {
LABEL_30:
    v53 = v62;
    v54 = 0;
    v37 = mlir::ValueRange::dereference_iterator(&v53, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v37);
    goto LABEL_31;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  v31 = (v30 & ((uint64_t)v24 >> 31)) + v24;
  if (v31 < v30)
  {
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v53, ArgAttrsAttr, (_BYTE *)(v33 + 8 * v34));
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    if (v35 >= 1)
    {
      for (i = 0; i < v41; ++i)
      {
        if (v31 != i && *((_QWORD *)v53 + i) == 0x8000000000000000)
        {
          v42 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
          *((_QWORD *)v53 + i) = *(_QWORD *)(v42 + 8 * i);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
      }
    }
    v45 = v53;
    v46 = v54;
    v64[0] = v62;
    v64[1] = 0;
    v47 = mlir::ValueRange::dereference_iterator(v64, 0);
    v48 = mlir::getElementTypeOrSelf(v47);
    v49 = mlir::RankedTensorType::get((uint64_t)v45, v46, v48, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v49);
    if (v53 != &v55)
      free(v53);
    return 1;
  }
  v53 = v62;
  v54 = 0;
  v43 = mlir::ValueRange::dereference_iterator(&v53, 0);
  v44 = mlir::getElementTypeOrSelf(v43);
  return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v44);
}

uint64_t mlir::mps::TopKGradientOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DefiningOp;
  uint64_t v15;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  const void **v25;
  uint64_t v26;
  uint64_t SingleInt;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const void ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t (***v48)(llvm::detail::format_adapter *__hidden);
  const void **v49;
  uint64_t v50;
  uint64_t (****v51)(llvm::detail::format_adapter *__hidden);
  uint64_t v52;
  uint64_t (**v53)(llvm::detail::format_adapter *__hidden);
  uint64_t *v54;
  uint64_t (**v55)(llvm::detail::format_adapter *__hidden);
  uint64_t *v56;
  uint64_t (***v57)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v58)(llvm::detail::format_adapter *__hidden);
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64[4];
  __int16 v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  _QWORD *v77;
  void *__p;
  _QWORD **v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v5 = (*this)[9];
    v68 = v3;
    v69 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v66 = v6;
    v67 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v68))
      goto LABEL_7;
    return 1;
  }
  v68 = 0;
  v69 = 0;
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  v66 = v6;
  v67 = v7;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v68))
    return 1;
LABEL_7:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66))
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
  v9 = v8;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
  if (v9 != v10)
  {
    v49 = (const void **)"failed: input and gradient tensors must have the same rank, but got {0} and {1}";
    v50 = 79;
    v51 = &v57;
    v52 = 2;
    v53 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F80;
    v54 = (uint64_t *)&v68;
    v55 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23F80;
    v56 = (uint64_t *)&v66;
    v57 = &v53;
    v58 = &v55;
    v65 = 263;
    v64[0] = (uint64_t **)&v49;
    mlir::OpState::emitOpError(this, (const void ***)v64, (uint64_t)&v72);
    v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v72);
    if (v72)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v72);
    if (v80)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v79;
        v19 = __p;
        if (v79 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v79 = v17;
        operator delete(v19);
      }
      v20 = v76;
      if (v76)
      {
        v21 = v77;
        v22 = v76;
        if (v77 != v76)
        {
          do
          {
            v24 = (void *)*--v21;
            v23 = v24;
            *v21 = 0;
            if (v24)
              operator delete[](v23);
          }
          while (v21 != v20);
          v22 = v76;
        }
        v77 = v20;
        operator delete(v22);
      }
      v35 = v74;
      if (v74 != &v75)
        goto LABEL_64;
    }
    return v15;
  }
  v70[0] = &v71;
  v70[1] = (void *)0x100000000;
  v11 = *(const void ***)((*this)[9] + 88);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
  v13 = v12;
  v72 = 0;
  v73 = 0;
  v64[0] = (uint64_t **)&v72;
  v49 = v11;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v64, DefiningOp))
  else
    mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant");
  v25 = *(const void ***)((*this)[9] + 120);
  v72 = 0;
  v73 = 0;
  v64[0] = (uint64_t **)&v72;
  v49 = v25;
  v26 = mlir::Value::getDefiningOp((mlir::Value *)&v49);
  if (v26)
  {
    if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v64, v26))
    {
      SingleInt = mlir::getSingleIntValue<int>(v72, v73);
      v63 = SingleInt;
      if ((SingleInt & 0xFF00000000) != 0)
      {
        v28 = SingleInt;
        if ((int)SingleInt <= 0)
        {
          v49 = (const void **)"failed: k must positive";
          LOWORD(v53) = 259;
          v36 = &v49;
LABEL_51:
          mlir::OpState::emitOpError(this, v36, (uint64_t)&v72);
          v34 = &v72;
          goto LABEL_52;
        }
        v29 = 1;
        v62 = 1;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
        if (v30 >= 1)
        {
          v31 = *(unsigned int *)v70[0];
          v29 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68) + 8 * v31);
          v62 = v29;
        }
        if (v29 != 0x8000000000000000 && v29 < v28)
        {
          v49 = (const void **)"failed: k is larger than input minor dimension, ";
          LOWORD(v53) = 259;
          mlir::OpState::emitOpError(this, &v49, (uint64_t)&v72);
          v32 = mlir::InFlightDiagnostic::operator<<<int &>((uint64_t)&v72, (int *)&v63);
          v33 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v32, " > ");
          v34 = (uint64_t *)mlir::InFlightDiagnostic::operator<<<long long &>(v33, &v62);
LABEL_52:
          v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v72);
          goto LABEL_63;
        }
        v37 = 1;
        v61 = 1;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
        if (v38 >= 1)
        {
          v39 = *(unsigned int *)v70[0];
          v37 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66) + 8 * v39);
          v61 = v37;
        }
        if (v37 != 0x8000000000000000 && v37 != (int)v63)
        {
          v49 = (const void **)"failed: input gradient dimension at axis dimension is not equal k: {0} != {1}";
          v50 = 77;
          v51 = &v57;
          v52 = 2;
          v53 = &off_1E0E23E00;
          v54 = &v61;
          v55 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23DA0;
          v56 = &v63;
          v57 = &v53;
          v58 = &v55;
          v65 = 263;
          v64[0] = (uint64_t **)&v49;
LABEL_50:
          v36 = (const void ***)v64;
          goto LABEL_51;
        }
        v60 = 0;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
        if (v40 >= 1)
        {
          v41 = 1;
          while (1)
          {
            if (v41 - 1 != *(_QWORD *)v70[0]
              && *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68)
                           + 8 * (v41 - 1)) != 0x8000000000000000)
            {
              v44 = (v41 - 1);
              if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66) + 8 * v44) != 0x8000000000000000)
              {
                v45 = 8 * v44;
                v46 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68) + v45);
                if (v46 != *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66)
                                      + v45))
                  break;
              }
            }
            v60 = v41;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
            if (v41++ >= v42)
              goto LABEL_62;
          }
          v47 = *(uint64_t **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68) + v45);
          v48 = *(uint64_t (****)(llvm::detail::format_adapter *__hidden))(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66)
                                                                                   + v45);
          v49 = (const void **)"failed: input tensor and input gradient tensor shape do not match along dimension {0}, {1} != {2}";
          v50 = 97;
          v51 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v59;
          v52 = 3;
          v53 = &off_1E0E23E00;
          v54 = &v60;
          v55 = &off_1E0E23EC0;
          v56 = v47;
          v57 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23EC0;
          v58 = v48;
          v59[0] = &v53;
          v59[1] = &v55;
          v59[2] = &v57;
          v65 = 263;
          v64[0] = (uint64_t **)&v49;
          goto LABEL_50;
        }
      }
    }
  }
LABEL_62:
  v15 = 1;
LABEL_63:
  v35 = (uint64_t *)v70[0];
  if (v70[0] != &v71)
LABEL_64:
    free(v35);
  return v15;
}

uint64_t mlir::mps::SliceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t ElementTypeOrSelf;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *ArgAttrsAttr;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t OperandRange;
  uint64_t v56;
  _QWORD v57[2];
  void **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  char v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = a6;
  v64[0] = 0;
  v65 = 0;
  v66 = a9;
  v67 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v63);
    if (v65)
      v65 = 0;
    mlir::OperationName::OperationName(v64, "mps.slice", 9, Context);
    v65 = 1;
  }
  v68 = a4;
  v69 = a5;
  if (!a5)
  {
    v20 = mlir::Float32Type::get(this, a2);
    v17 = mlir::UnrankedTensorType::get(v20);
    v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12))
      goto LABEL_8;
    goto LABEL_12;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3)
    goto LABEL_7;
  v60 = v68;
  v61 = 0;
  v21 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v21 + 8);
  if (v22)
    v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v21 + 8);
  else
    v21 = 0;
  v57[0] = v21;
  v57[1] = v22;
  v60 = v68;
  v61 = 1;
  v60 = (void *)mlir::ValueRange::offset_base(&v60, 1);
  v61 = 0;
  v23 = mlir::ValueRange::dereference_iterator(&v60, 0);
  v60 = 0;
  v61 = 0;
  v58 = &v60;
  v59 = v23;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!DefiningOp)
    goto LABEL_19;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    v26 = SingleInt & 0xFF00000000;
    v27 = SingleInt & 0xFFFFFF00;
    v28 = SingleInt;
  }
  else
  {
LABEL_19:
    v27 = 0;
    v26 = 0;
    v28 = 0;
  }
  v60 = v68;
  v61 = 2;
  v60 = (void *)mlir::ValueRange::offset_base(&v60, 2);
  v61 = 0;
  v29 = mlir::ValueRange::dereference_iterator(&v60, 0);
  v60 = 0;
  v61 = 0;
  v58 = &v60;
  v59 = v29;
  v30 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!v30)
    goto LABEL_23;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, v30))
  {
    v31 = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    v32 = v31 & 0xFFFFFF00;
    v33 = v31;
    v34 = BYTE4(v31);
  }
  else
  {
LABEL_23:
    v32 = 0;
    v34 = 0;
    v33 = 0;
  }
  v60 = v68;
  v61 = 3;
  v60 = (void *)mlir::ValueRange::offset_base(&v60, 3);
  v61 = 0;
  v35 = mlir::ValueRange::dereference_iterator(&v60, 0);
  v60 = 0;
  v61 = 0;
  v58 = &v60;
  v59 = v35;
  v36 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!v36)
    goto LABEL_27;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, v36))
  {
    v37 = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    v38 = v37 & 0xFFFFFF00;
    v39 = v37;
    v40 = (v37 & 0xFF00000000) == 0;
  }
  else
  {
LABEL_27:
    v38 = 0;
    v39 = 0;
    v40 = 1;
  }
  if (!v21 || !v26 || !v34 || v40)
  {
LABEL_7:
    v60 = v68;
    v61 = 0;
    v15 = mlir::ValueRange::dereference_iterator(&v60, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
    v17 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12))
    {
LABEL_8:
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_12:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
    goto LABEL_8;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v21);
  }
  else
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    v42 = (v41 & ((uint64_t)(v28 | v27) >> 31)) + (v28 | v27);
    if (v42 >= v41
      || v38 >> 31
      || (v43 = v39 | v38,
          *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57)
                    + 8 * v42) != 0x8000000000000000)
      && (v44 = v33 | v32,
          v45 = (v33 | v32) << 32,
          v46 = 8 * v42,
          v47 = v43
              + v44
              + (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57) + v46) & (v45 >> 63)),
          v47 > *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57) + v46)))
    {
      v60 = v68;
      v61 = 0;
      v48 = mlir::ValueRange::dereference_iterator(&v60, 0);
      v49 = mlir::getElementTypeOrSelf(v48);
      return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v49);
    }
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    v51 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v60, ArgAttrsAttr, (_BYTE *)(v51 + 8 * v52));
    v53 = v60;
    if (*((_QWORD *)v60 + v42) != 0x8000000000000000)
      *((_QWORD *)v60 + v42) = v43;
    v54 = v61;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
    v56 = mlir::RankedTensorType::get((uint64_t)v53, v54, OperandRange, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
    if (v60 != &v62)
      free(v60);
  }
  return 1;
}

uint64_t mlir::mps::SliceOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t matched;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t (****v37)(llvm::detail::format_adapter *__hidden);
  uint64_t v38;
  uint64_t (**v39)(llvm::detail::format_adapter *__hidden);
  uint64_t *v40;
  uint64_t (**v41)(llvm::detail::format_adapter *__hidden);
  uint64_t *v42;
  uint64_t (***v43)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v44)(llvm::detail::format_adapter *__hidden);
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t **v48[4];
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    v52 = v2;
    v53 = v3;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
      goto LABEL_5;
    return 1;
  }
  v52 = 0;
  v53 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
    return 1;
LABEL_5:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
  v5 = v4;
  v51 = v4;
  v6 = *(const char **)((*this)[9] + 56);
  v54 = 0;
  v55 = 0;
  v48[0] = (uint64_t **)&v54;
  v35 = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v35);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v48, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<int>(v54, v55);
  if ((SingleInt & 0xFF00000000) == 0)
    return 1;
  v9 = (v5 & ((uint64_t)(int)SingleInt >> 31)) + (int)SingleInt;
  v50 = v9;
  if (v9 < 0 || v9 >= v5)
  {
    v35 = "failed: axis value {0} does not fit tensor rank ({1})";
    v36 = 53;
    v37 = &v43;
    v38 = 2;
    v39 = &off_1E0E23E00;
    v40 = &v50;
    v41 = &off_1E0E23E00;
    v42 = &v51;
    v43 = &v39;
    v44 = &v41;
    v49 = 263;
    v48[0] = (uint64_t **)&v35;
    mlir::OpState::emitOpError(this, (const void ***)v48, (uint64_t)&v54);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    if (v62)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v61;
        v18 = __p;
        if (v61 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v61 = v16;
        operator delete(v18);
      }
      v19 = v58;
      if (!v58)
        goto LABEL_52;
      v20 = v59;
      v21 = v58;
      if (v59 == v58)
        goto LABEL_51;
      do
      {
        v23 = (void *)*--v20;
        v22 = v23;
        *v20 = 0;
        if (v23)
          operator delete[](v22);
      }
      while (v20 != v19);
      goto LABEL_50;
    }
  }
  else
  {
    v10 = *(const char **)((*this)[9] + 88);
    v54 = 0;
    v55 = 0;
    v48[0] = (uint64_t **)&v54;
    v35 = v10;
    v11 = mlir::Value::getDefiningOp((mlir::Value *)&v35);
    if (!v11)
      return 1;
    if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v48, v11))
      return 1;
    v12 = mlir::getSingleIntValue<int>(v54, v55);
    if ((v12 & 0xFF00000000) == 0)
      return 1;
    v13 = v12;
    if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                   + 8 * v9) == 0x8000000000000000)
      return 1;
    v24 = (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                     + 8 * v9) & ((uint64_t)v13 >> 31))
        + v13;
    v47 = v24;
    if (v24 >= 0
      && v24 < *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                         + 8 * v9))
    {
      matched = mlir::matchConstantWithIntValue<int>(*(_QWORD *)((*this)[9] + 120));
      if ((matched & 0xFF00000000) != 0)
      {
        v46 = (int)matched;
        if ((matched & 0x80000000) != 0
          || (v26 = v47 + (int)matched,
              v26 > *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                              + 8 * v9)))
        {
          v27 = *(uint64_t **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                            + 8 * v9);
          v35 = "failed: length value {0} does not fit within the dimension size ({1}) with start value ({2})";
          v36 = 92;
          v37 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v45;
          v38 = 3;
          v39 = &off_1E0E23E00;
          v40 = &v46;
          v41 = &off_1E0E23EC0;
          v42 = v27;
          v43 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
          v44 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&v47;
          v45[0] = &v39;
          v45[1] = &v41;
          v45[2] = &v43;
          v49 = 263;
          v48[0] = (uint64_t **)&v35;
          mlir::OpState::emitOpError(this, (const void ***)v48, (uint64_t)&v54);
          v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v54);
          return v14;
        }
      }
      return 1;
    }
    v28 = *(uint64_t **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                      + 8 * v9);
    v35 = "failed: start value {0} does not fit dimension size ({1})";
    v36 = 57;
    v37 = &v43;
    v38 = 2;
    v39 = &off_1E0E23E00;
    v40 = &v47;
    v41 = &off_1E0E23EC0;
    v42 = v28;
    v43 = &v39;
    v44 = &v41;
    v49 = 263;
    v48[0] = (uint64_t **)&v35;
    mlir::OpState::emitOpError(this, (const void ***)v48, (uint64_t)&v54);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    if (v62)
    {
      v29 = (_QWORD **)__p;
      if (__p)
      {
        v30 = v61;
        v31 = __p;
        if (v61 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      v19 = v58;
      if (!v58)
        goto LABEL_52;
      v32 = v59;
      v21 = v58;
      if (v59 == v58)
      {
LABEL_51:
        v59 = v19;
        operator delete(v21);
LABEL_52:
        if (v56 != &v57)
          free(v56);
        return v14;
      }
      do
      {
        v34 = (void *)*--v32;
        v33 = v34;
        *v32 = 0;
        if (v34)
          operator delete[](v33);
      }
      while (v32 != v19);
LABEL_50:
      v21 = v58;
      goto LABEL_51;
    }
  }
  return v14;
}

uint64_t mlir::mps::`anonymous namespace'::verifyStridedSlice(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unint64_t v9;
  void *v10;
  BOOL v11;
  int v12;
  void *v13;
  _BOOL4 v15;
  void *v16;
  _BOOL4 v18;
  void *v19;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  char v42;
  uint64_t v43;
  uint64_t NumElements;
  uint64_t **v45;
  uint64_t v47;
  uint64_t ArgAttrsAttr;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t Attr;
  unsigned int UnsignedIntegerOr;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t Value;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unsigned int v103;
  __int16 v104;
  const char *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  _QWORD v119[2];
  __int16 v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[2];
  __int16 v124;
  uint64_t **v125;
  uint64_t v126;
  _WORD v127[16];
  uint64_t **v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  _QWORD *v135;
  void *__p;
  _QWORD **v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  v11 = v10 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v12 = v11;
  if (!v11)
    v9 = 0;
  v116 = v9;
  v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v15 = v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v18 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v16 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v21 = v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v12)
    v22 = !v15;
  else
    v22 = 1;
  v23 = v22 || !v18;
  if (v23 || !v21)
  {
    v125 = (uint64_t **)"cannot run strided slice a non-tensor type";
    v127[8] = 259;
    mlir::Operation::emitOpError(a1, (const void ***)&v125, (uint64_t)&v128);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v128);
    if (v128)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v128);
    if (v138)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v137;
        v30 = __p;
        if (v137 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v137 = v28;
        operator delete(v30);
      }
      v31 = v134;
      if (v134)
      {
        v32 = v135;
        v33 = v134;
        if (v135 != v134)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = v134;
        }
        v135 = v31;
        operator delete(v33);
      }
      v45 = (uint64_t **)v131;
      if (v131 != &v133)
LABEL_75:
        free(v45);
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v13 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v19 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if (!v42
      {
        return 0;
      }
      v114 = 0;
      v115 = 0;
      v112 = 0;
      v113 = 0;
      v110 = 0;
      v111 = 0;
      v108 = 0;
      v109 = 0;
      v128 = (uint64_t **)&v114;
      if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a5, &v128))
      {
        v125 = (uint64_t **)&v112;
        if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a6, &v125))
        {
          v121 = &v110;
          if ((mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a7, (uint64_t ***)&v121) & 1) != 0)
          {
            v125 = (uint64_t **)v127;
            v126 = 0x400000000;
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v116);
            v107 = v43;
            if (a3)
            {
              v128 = (uint64_t **)&v108;
              if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a3, &v128))
              {
                NumElements = mlir::ElementsAttr::getNumElements(v108, v109);
                v107 = NumElements;
                mlir::ElementsAttr::getValues<llvm::APInt>(&v108, (uint64_t)&v128);
                LOWORD(v121) = (_WORD)v128;
                if ((_BYTE)v128)
                  v122 = v129;
                else
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v129 + 16))(&v122);
                v54 = v130;
                v123[0] = v130;
                LOWORD(v117) = (_WORD)v131;
                if ((_BYTE)v131)
                {
                  v118 = v132;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v132 + 16))(&v118);
                  v54 = v123[0];
                }
                v119[0] = v133;
                if (v54 != v133)
                {
                  do
                  {
                    mlir::detail::ElementsAttrIterator<llvm::APInt>::operator*((uint64_t)&v121, (llvm::APInt *)&v102);
                    if (v103 > 0x40)
                      v64 = *(_QWORD *)v102;
                    else
                      v64 = (uint64_t)((_QWORD)v102 << -(uint64_t)v103) >> -(uint64_t)v103;
                    if (v64 == -1)
                      v65 = 0x8000000000000000;
                    else
                      v65 = v64;
                    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v125, v65);
                    if (v103 >= 0x41 && v102)
                      operator delete[](v102);
                    ++v123[0];
                  }
                  while (v123[0] != v119[0]);
                }
                if (!(_BYTE)v117)
                {
                  v55 = v118;
                  v118 = 0;
                  if (v55)
                    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
                }
                if (!(_BYTE)v121)
                {
                  v56 = v122;
                  v122 = 0;
                  if (v56)
                    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
                }
                mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v128);
                goto LABEL_98;
              }
            }
            else
            {
              if (!a4)
              {
                NumElements = v43;
                goto LABEL_98;
              }
              v121 = (void *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
              v128 = (uint64_t **)mlir::Type::dyn_cast<mlir::ShapedType>((_QWORD **)&v121);
              v129 = v47;
              if (v128 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v128))
              {
                ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v128);
                if (v49)
                {
                  v50 = (uint64_t *)ArgAttrsAttr;
                  v51 = 8 * v49;
                  do
                  {
                    v52 = *v50++;
                    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v125, v52);
                    v51 -= 8;
                  }
                  while (v51);
                }
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v128);
                NumElements = v53;
                v107 = v53;
LABEL_98:
                if (mlir::ElementsAttr::getNumElements(v114, v115) > NumElements
                  || mlir::ElementsAttr::getNumElements(v112, v113) > NumElements
                  || mlir::ElementsAttr::getNumElements(v110, v111) > NumElements)
                {
                  v121 = "Slice specification lengths: begin (";
                  v124 = 259;
                  mlir::Operation::emitOpError(a1, (const void ***)&v121, (uint64_t)&v128);
                  v117 = (void *)mlir::ElementsAttr::getNumElements(v114, v115);
                  v57 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v128, (uint64_t *)&v117);
                  v58 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v57, ") end (");
                  v102 = (void *)mlir::ElementsAttr::getNumElements(v112, v113);
                  v59 = mlir::InFlightDiagnostic::operator<<<long long &>(v58, (uint64_t *)&v102);
                  v60 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v59, ") stride (");
                  v106 = (const char *)mlir::ElementsAttr::getNumElements(v110, v111);
                  v61 = mlir::InFlightDiagnostic::operator<<<long long &>(v60, (uint64_t *)&v106);
                  v62 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v61, ") must be lower or equal to input rank ");
                  v63 = mlir::InFlightDiagnostic::operator<<<long long &>(v62, &v107);
                  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                  goto LABEL_102;
                }
                v121 = v123;
                v122 = 0x400000000;
                mlir::getIntValues<long long>(v110, v111, (uint64_t)&v121, 1);
                if ((_DWORD)v122)
                {
                  v66 = v121;
                  v67 = 8 * v122;
                  while (*v66)
                  {
                    ++v66;
                    v67 -= 8;
                    if (!v67)
                      goto LABEL_119;
                  }
                  v117 = "stride cannot be 0";
                  v120 = 259;
                  mlir::Operation::emitOpError(a1, (const void ***)&v117, (uint64_t)&v128);
                  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v128);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                  goto LABEL_146;
                }
LABEL_119:
                if (!(a3 | a4))
                {
                  v27 = 1;
LABEL_146:
                  if (v121 != v123)
                    free(v121);
LABEL_102:
                  v45 = v125;
                  if (v125 == (uint64_t **)v127)
                    return v27;
                  goto LABEL_75;
                }
                v117 = v119;
                v118 = 0x400000000;
                Attr = mlir::Operation::getAttr((uint64_t)a1, "begin_mask", 0xAuLL);
                v70 = mlir::Operation::getAttr((uint64_t)a1, "end_mask", 8uLL);
                v72 = mlir::Operation::getAttr((uint64_t)a1, "shrink_axis_mask", 0x10uLL);
                {
                  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v116);
                  v76 = v75;
                  if (a4)
                  else
                  if (!a4)
                  v105 = v78;
                  v106 = v77;
                  if (v75 == v118)
                  {
                    if (!(_DWORD)v118)
                    {
LABEL_138:
                      v27 = 1;
                      goto LABEL_144;
                    }
                    v79 = Value;
                    v80 = 0;
                    while (1)
                    {
                      v81 = *((_QWORD *)v117 + v80);
                      v82 = *(_QWORD *)(Value + 8 * v80);
                      v83 = v82 == 0x8000000000000000 || v81 == 0x8000000000000000;
                      if (!v83 && v81 != v82)
                        break;
                      if (v75 == ++v80)
                        goto LABEL_138;
                    }
                    v101 = v80;
                    v104 = 257;
                    mlir::Operation::emitOpError(a1, (const void ***)&v102, (uint64_t)&v128);
                    v91 = mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v128, &v106);
                    v92 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v91, "[");
                    v93 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v92, &v101);
                    v94 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v93, "] = ");
                    v95 = mlir::InFlightDiagnostic::operator<<<long long &>(v94, (uint64_t *)(v79 + 8 * v101));
                    v96 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, " should match dimension size: ");
                    v97 = mlir::InFlightDiagnostic::operator<<<long long &>(v96, (uint64_t *)v117 + v101);
                    v98 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v97, " deduced from ");
                    v99 = mlir::InFlightDiagnostic::append<char const*&>(v98, &v105);
                  }
                  else
                  {
                    v104 = 257;
                    mlir::Operation::emitOpError(a1, (const void ***)&v102, (uint64_t)&v128);
                    v85 = mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v128, &v106);
                    v86 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v85, " rank ");
                    v101 = v76;
                    v87 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v86, &v101);
                    v88 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v87, " is not consistent with rank deduced from ");
                    v89 = mlir::InFlightDiagnostic::append<char const*&>(v88, &v105);
                    v90 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v89, " ");
                    v100 = v118;
                    v99 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v90, &v100);
                  }
                  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v99);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                }
                else
                {
                  v27 = 0;
                }
LABEL_144:
                if (v117 != v119)
                  free(v117);
                goto LABEL_146;
              }
            }
            v27 = 1;
            goto LABEL_102;
          }
        }
      }
    }
    return 1;
  }
  return v27;
}

BOOL mlir::mps::StridedSliceOp::getEndIsSize(mlir::mps::StridedSliceOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 8) != 0;
}

uint64_t mlir::mps::StridedSliceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v28;
  void *v29;
  _BOOL4 v31;
  void *v32;
  _BOOL4 v34;
  void *v35;
  BOOL v37;
  uint64_t ElementTypeOrSelf;
  char v42;
  uint64_t v43;
  uint64_t DefiningOp;
  uint64_t v45;
  uint64_t v46;
  uint64_t Value;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ElementType;
  void *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[8];
  char v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD v76[2];
  unsigned int *v77;
  uint64_t v78;
  _QWORD v79[6];

  v79[4] = *MEMORY[0x1E0C80C00];
  v76[0] = a4;
  v76[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
  }
  v67 = a6;
  v68[0] = 0;
  v69 = 0;
  v70 = v16;
  v71 = v17;
  v72 = a9;
  v73 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69)
      v69 = 0;
    mlir::OperationName::OperationName(v68, "mps.strided_slice", 17, Context);
    v69 = 1;
  }
  v74 = a4;
  v75 = a5;
  if (a5 < 4
    || (v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::StridedSliceOpAdaptor::verify(&v67, v19)))
  {
LABEL_71:
    ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
    goto LABEL_72;
  }
  v63 = v70;
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    v57 = *v77;
    operator delete[](v77);
  }
  else
  {
    v57 = v77;
  }
  v63 = v71;
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    v56 = *v77;
    operator delete[](v77);
  }
  else
  {
    v56 = v77;
  }
  v63 = *((_QWORD *)&v71 + 1);
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    v20 = *v77;
    operator delete[](v77);
  }
  else
  {
    v20 = v77;
  }
  v21 = *((_QWORD *)&v70 + 1);
  v22 = mlir::ValueRange::dereference_iterator(v76, 0);
  v23 = mlir::ValueRange::dereference_iterator(v76, 1);
  v24 = mlir::ValueRange::dereference_iterator(v76, 2);
  v25 = mlir::ValueRange::dereference_iterator(v76, 3);
  v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v28 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v28 = 0;
  }
  v65 = v28;
  v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v31 = v29 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v34 = v32 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v32 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v35 = *(void **)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  v37 = v35 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v35 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (!v28 || !v31 || !v34 || !v37)
  {
    v42 = mlir::emitOptionalError<char const(&)[43]>((uint64_t)a2, a3, "cannot run strided slice a non-tensor type");
    v43 = 0;
    goto LABEL_69;
  }
  if (*(_UNKNOWN **)(*v28 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v32 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v35 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v28);
    goto LABEL_72;
  }
  v77 = (unsigned int *)v79;
  v78 = 0x400000000;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v58 = (uint64_t **)&v63;
  v66 = v23;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (DefiningOp)
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, DefiningOp);
  v58 = (uint64_t **)&v61;
  v66 = v24;
  v45 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (v45)
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, v45);
  v58 = (uint64_t **)&v59;
  v66 = v25;
  v46 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (v46)
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, v46);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
  {
    v49 = (uint64_t)v77;
    v50 = v78;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v65);
    v43 = mlir::RankedTensorType::get(v49, v50, ElementType, 0);
    v42 = 1;
    v52 = v77;
    if (v77 == (unsigned int *)v79)
      goto LABEL_69;
    goto LABEL_68;
  }
  v43 = 0;
  v42 = 0;
  v52 = v77;
  if (v77 != (unsigned int *)v79)
LABEL_68:
    free(v52);
LABEL_69:
  if (v42)
    goto LABEL_73;
  v53 = mlir::ValueRange::dereference_iterator(v76, 0);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v53);
  if (!ElementTypeOrSelf)
    goto LABEL_71;
LABEL_72:
  v43 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_73:
  v54 = *(_DWORD *)(a11 + 8);
  if (v54 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v54 + 1, 8);
    v54 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v54) = v43;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::StridedSliceOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  _QWORD v39[4];
  __int16 v40;
  _QWORD v41[3];
  void *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  void *__p;
  _QWORD **v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = a1[5];
    if (v3)
    {
      v4 = a1[6];
      if (v4)
      {
        v39[0] = a1[3];
        v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32))
        {
          v39[0] = v3;
          v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
          if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32))
          {
            v39[0] = v4;
            v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32))
              return 1;
            v39[0] = "'mps.strided_slice' op attribute 'shrink_axis_mask' failed to satisfy constraint: 32-bit unsigned i"
                     "nteger attribute";
            v40 = 259;
            mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
            v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v41);
            return v5;
          }
          v39[0] = "'mps.strided_slice' op attribute 'end_mask' failed to satisfy constraint: 32-bit unsigned integer attribute";
          v40 = 259;
          mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
          v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
          if (v41[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
          if (v48)
          {
            v32 = (_QWORD **)__p;
            if (__p)
            {
              v33 = v47;
              v34 = __p;
              if (v47 != __p)
              {
                do
                  v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                v34 = __p;
              }
              v47 = v32;
              operator delete(v34);
            }
            v9 = v44;
            if (!v44)
              goto LABEL_80;
            v35 = v45;
            v11 = v44;
            if (v45 == v44)
            {
LABEL_79:
              v45 = v9;
              operator delete(v11);
LABEL_80:
              if (v42 != &v43)
                free(v42);
              return v5;
            }
            do
            {
              v37 = (void *)*--v35;
              v36 = v37;
              *v35 = 0;
              if (v37)
                operator delete[](v36);
            }
            while (v35 != v9);
LABEL_78:
            v11 = v44;
            goto LABEL_79;
          }
        }
        else
        {
          v39[0] = "'mps.strided_slice' op attribute 'begin_mask' failed to satisfy constraint: 32-bit unsigned integer attribute";
          v40 = 259;
          mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
          v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
          if (v41[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
          if (v48)
          {
            v26 = (_QWORD **)__p;
            if (__p)
            {
              v27 = v47;
              v28 = __p;
              if (v47 != __p)
              {
                do
                  v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
                while (v27 != v26);
                v28 = __p;
              }
              v47 = v26;
              operator delete(v28);
            }
            v9 = v44;
            if (!v44)
              goto LABEL_80;
            v29 = v45;
            v11 = v44;
            if (v45 == v44)
              goto LABEL_79;
            do
            {
              v31 = (void *)*--v29;
              v30 = v31;
              *v29 = 0;
              if (v31)
                operator delete[](v30);
            }
            while (v29 != v9);
            goto LABEL_78;
          }
        }
      }
      else
      {
        v39[0] = "'mps.strided_slice' op requires attribute 'shrink_axis_mask'";
        v40 = 259;
        mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
        v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
        if (v41[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
        if (v48)
        {
          v20 = (_QWORD **)__p;
          if (__p)
          {
            v21 = v47;
            v22 = __p;
            if (v47 != __p)
            {
              do
                v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
              while (v21 != v20);
              v22 = __p;
            }
            v47 = v20;
            operator delete(v22);
          }
          v9 = v44;
          if (!v44)
            goto LABEL_80;
          v23 = v45;
          v11 = v44;
          if (v45 == v44)
            goto LABEL_79;
          do
          {
            v25 = (void *)*--v23;
            v24 = v25;
            *v23 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v23 != v9);
          goto LABEL_78;
        }
      }
    }
    else
    {
      v39[0] = "'mps.strided_slice' op requires attribute 'end_mask'";
      v40 = 259;
      mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
      if (v41[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
      if (v48)
      {
        v14 = (_QWORD **)__p;
        if (__p)
        {
          v15 = v47;
          v16 = __p;
          if (v47 != __p)
          {
            do
              v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            v16 = __p;
          }
          v47 = v14;
          operator delete(v16);
        }
        v9 = v44;
        if (!v44)
          goto LABEL_80;
        v17 = v45;
        v11 = v44;
        if (v45 == v44)
          goto LABEL_79;
        do
        {
          v19 = (void *)*--v17;
          v18 = v19;
          *v17 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v17 != v9);
        goto LABEL_78;
      }
    }
  }
  else
  {
    v39[0] = "'mps.strided_slice' op requires attribute 'begin_mask'";
    v40 = 259;
    mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    if (v41[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
    if (v48)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v47;
        v8 = __p;
        if (v47 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v47 = v6;
        operator delete(v8);
      }
      v9 = v44;
      if (!v44)
        goto LABEL_80;
      v10 = v45;
      v11 = v44;
      if (v45 == v44)
        goto LABEL_79;
      do
      {
        v13 = (void *)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          operator delete[](v12);
      }
      while (v10 != v9);
      goto LABEL_78;
    }
  }
  return v5;
}

uint64_t mlir::mps::StridedSliceGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t ElementTypeOrSelf;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  int32x2_t v27;
  int32x2_t v28;
  uint64_t ElementType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[32];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v38[0] = a4;
  v38[1] = a5;
  if (a5 != 5)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v38, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = (_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v16 = 0;
  }
  v34 = v16;
  if (!v16)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot run strided slice grad a non-tensor type");
  v35 = v37;
  v36 = 0x400000000;
  v17 = mlir::ValueRange::dereference_iterator(v38, 1);
  if (mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v35))
  {
    v18 = v36;
    v19 = (char *)v35;
    if (!(_DWORD)v36)
      goto LABEL_28;
    if (v36 < 4)
    {
      v20 = 0;
LABEL_34:
      v32 = v18 - v20;
      v33 = &v19[8 * v20];
      do
      {
        if (*(_QWORD *)v33 == -1)
          *(_QWORD *)v33 = 0x8000000000000000;
        v33 += 8;
        --v32;
      }
      while (v32);
LABEL_28:
      ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v34);
      v23 = mlir::RankedTensorType::get((uint64_t)v19, v18, ElementType, 0);
      goto LABEL_29;
    }
    v20 = v36 & 0xFFFFFFFC;
    v24 = (int64x2_t *)((char *)v35 + 16);
    v25.i64[0] = -1;
    v25.i64[1] = -1;
    v26 = v20;
    while (1)
    {
      v27 = vmovn_s64(vceqq_s64(v24[-1], v25));
      if ((v27.i8[0] & 1) != 0)
      {
        v24[-1].i64[0] = 0x8000000000000000;
        if ((v27.i8[4] & 1) == 0)
        {
LABEL_20:
          v28 = vmovn_s64(vceqq_s64(*v24, v25));
          if ((v28.i8[0] & 1) == 0)
            goto LABEL_21;
          goto LABEL_25;
        }
      }
      else if ((v27.i8[4] & 1) == 0)
      {
        goto LABEL_20;
      }
      v24[-1].i64[1] = 0x8000000000000000;
      v28 = vmovn_s64(vceqq_s64(*v24, v25));
      if ((v28.i8[0] & 1) == 0)
      {
LABEL_21:
        if ((v28.i8[4] & 1) != 0)
          goto LABEL_26;
        goto LABEL_17;
      }
LABEL_25:
      v24->i64[0] = 0x8000000000000000;
      if ((v28.i8[4] & 1) != 0)
LABEL_26:
        v24->i64[1] = 0x8000000000000000;
LABEL_17:
      v24 += 2;
      v26 -= 4;
      if (!v26)
      {
        if (v20 == v18)
          goto LABEL_28;
        goto LABEL_34;
      }
    }
  }
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
  v23 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_29:
  v30 = v23;
  v31 = *(unsigned int *)(a11 + 8);
  if (v31 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v31) = v30;
  ++*(_DWORD *)(a11 + 8);
  if (v35 != v37)
    free(v35);
  return 1;
}

uint64_t mlir::mps::CropOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ElementTypeOrSelf;
  uint64_t v26;
  uint64_t v28;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  uint64_t v45;
  _BYTE *ArgAttrsAttr;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t OperandRange;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  _BYTE v70[8];
  char v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v69 = a6;
  v70[0] = 0;
  v71 = 0;
  v72 = a9;
  v73 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v69);
    if (v71)
      v71 = 0;
    mlir::OperationName::OperationName(v70, "mps.crop", 8, Context);
    v71 = 1;
  }
  v74 = a4;
  v75 = a5;
  if (!a5)
  {
    v21 = mlir::Float32Type::get(this, a2);
    v22 = mlir::UnrankedTensorType::get(v21);
    v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
      goto LABEL_19;
    goto LABEL_16;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3)
    goto LABEL_15;
  v66 = v74;
  v67 = 0;
  v15 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v66, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
  {
    v59 = 0;
    v60 = 0;
LABEL_15:
    v66 = v74;
    v67 = 0;
    v24 = mlir::ValueRange::dereference_iterator(&v66, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24);
    v22 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
    {
LABEL_19:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(a11 + 8);
    }
LABEL_16:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v23) = v22;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  v59 = v15;
  v60 = v16;
  if (!v15)
    goto LABEL_15;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59) & 1) == 0)
  {
    v22 = (uint64_t)v59;
    v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
      goto LABEL_19;
    goto LABEL_16;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
  v18 = v17;
  v66 = v68;
  HIDWORD(v67) = 4;
  if (v17 >= 5)
  {
    LODWORD(v67) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v17, 8);
    v19 = v66;
    v20 = 8 * v18;
LABEL_22:
    memset_pattern16(v19, &unk_1812352C0, v20);
    goto LABEL_23;
  }
  if (v17)
  {
    v20 = 8 * v17;
    v19 = v68;
    goto LABEL_22;
  }
LABEL_23:
  LODWORD(v67) = v18;
  v63 = v74;
  v64 = 1;
  v63 = (void *)mlir::ValueRange::offset_base(&v63, 1);
  v64 = 0;
  v28 = mlir::ValueRange::dereference_iterator(&v63, 0);
  v63 = 0;
  v64 = 0;
  v61 = &v63;
  v62 = v28;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    v31 = SingleInt & 0xFF00000000;
    v32 = SingleInt & 0xFFFFFF00;
    v33 = SingleInt;
  }
  else
  {
    v32 = 0;
    v31 = 0;
    v33 = 0;
  }
  v63 = v74;
  v64 = 2;
  v63 = (void *)mlir::ValueRange::offset_base(&v63, 2);
  v64 = 0;
  v34 = mlir::ValueRange::dereference_iterator(&v63, 0);
  v63 = 0;
  v64 = 0;
  v61 = &v63;
  v62 = v34;
  v35 = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (v35 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, v35))
  {
    v36 = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    v57 = v36;
    v58 = v36 & 0xFFFFFF00;
    v37 = BYTE4(v36);
  }
  else
  {
    v57 = 0;
    v58 = 0;
    v37 = 0;
  }
  v63 = v74;
  v64 = 3;
  v63 = (void *)mlir::ValueRange::offset_base(&v63, 3);
  v64 = 0;
  v38 = mlir::ValueRange::dereference_iterator(&v63, 0);
  v63 = 0;
  v64 = 0;
  v61 = &v63;
  v62 = v38;
  v39 = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (v39 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, v39))
  {
    v40 = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    v41 = v40 & 0xFFFFFF00;
    v42 = v40;
    v43 = BYTE4(v40);
    if (!v31)
    {
LABEL_34:
      v44 = v66;
      goto LABEL_46;
    }
  }
  else
  {
    v41 = 0;
    v43 = 0;
    v42 = 0;
    if (!v31)
      goto LABEL_34;
  }
  v45 = (v18 & ((v33 | v32) << 32 >> 63)) + (int)(v33 | v32);
  if (v45 >= 0 && v18 > v45)
  {
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v63, ArgAttrsAttr, (_BYTE *)(v47 + 8 * v48));
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)&v63);
    if (v63 != &v65)
      free(v63);
    v49 = 0x8000000000000000;
    v44 = v66;
    if (!v37 || !v43)
      goto LABEL_45;
    v50 = *((_QWORD *)v66 + v45);
    if (v50 == 0x8000000000000000)
      goto LABEL_46;
    if ((((_DWORD)v50 - ((v57 | v58) + v41 + v42)) & 0x80000000) == 0)
    {
      v49 = v50 - ((v57 | v58) + v41 + v42);
      if (v50 >= v49)
      {
LABEL_45:
        *((_QWORD *)v66 + v45) = v49;
LABEL_46:
        v51 = v67;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v59);
        v53 = mlir::RankedTensorType::get((uint64_t)v44, v51, OperandRange, 0);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v53);
        v26 = 1;
        v54 = v66;
        if (v66 == v68)
          return v26;
        goto LABEL_49;
      }
    }
  }
  v63 = v74;
  v64 = 0;
  v55 = mlir::ValueRange::dereference_iterator(&v63, 0);
  v56 = mlir::getElementTypeOrSelf(v55);
  v26 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v56);
  v54 = v66;
  if (v66 != v68)
LABEL_49:
    free(v54);
  return v26;
}

uint64_t mlir::mps::CropOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  uint64_t DefiningOp;
  uint64_t SingleInt;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  char v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  char v57;
  uint64_t v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  const char *v66;
  uint64_t v67;
  uint64_t (****v68)(llvm::detail::format_adapter *__hidden);
  uint64_t v69;
  uint64_t (**v70)(llvm::detail::format_adapter *__hidden);
  uint64_t *v71;
  uint64_t (***v72)(llvm::detail::format_adapter *__hidden);
  uint64_t *v73;
  uint64_t (***v74)(llvm::detail::format_adapter *__hidden);
  uint64_t (****v75)(llvm::detail::format_adapter *__hidden);
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79[4];
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  void *__p;
  _QWORD **v93;
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  LOBYTE(v84) = 0;
  v85 = 0;
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = (*this)[9];
  }
  else
  {
    v4 = 0;
  }
  v83[0] = v3;
  v83[1] = v4;
  v5 = *(const char **)(v2 + 56);
  v86 = 0;
  v87 = 0;
  v79[0] = (uint64_t **)&v86;
  v66 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<int>(v86, v87);
    v8 = SingleInt & 0xFFFFFF0000000000;
    v9 = SingleInt & 0xFF00000000;
    v10 = SingleInt & 0xFFFFFF00;
    v11 = SingleInt;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
    v11 = 0;
  }
  v12 = v8 | v11 | v10;
  v82 = v12 | v9;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v83) && v9)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
    v81 = v13;
    if (v10 >> 31)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14 + (int)v12;
    if (v15 < 0 || v15 >= v13)
    {
      v66 = "failed: axis value {0} does not fit tensor rank ({1})";
      v67 = 53;
      v68 = &v74;
      v69 = 2;
      v70 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23DA0;
      v71 = &v82;
      v72 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
      v73 = &v81;
      v74 = &v70;
      v75 = &v72;
      v80 = 263;
      v79[0] = (uint64_t **)&v66;
      mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
      if (v86)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
      if (v94)
      {
        v37 = (_QWORD **)__p;
        if (__p)
        {
          v38 = v93;
          v39 = __p;
          if (v93 != __p)
          {
            do
              v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
            while (v38 != v37);
            v39 = __p;
          }
          v93 = v37;
          operator delete(v39);
        }
        v24 = v90;
        if (!v90)
          goto LABEL_125;
        v40 = v91;
        v26 = v90;
        if (v91 == v90)
          goto LABEL_124;
        do
        {
          v42 = (void *)*--v40;
          v41 = v42;
          *v40 = 0;
          if (v42)
            operator delete[](v41);
        }
        while (v40 != v24);
        goto LABEL_123;
      }
      return v20;
    }
    if (*(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83)
                   + 8 * v15) != 0x8000000000000000)
    {
      v84 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83)
                      + 8 * v15);
      v85 = 1;
    }
  }
  v16 = *(const char **)((*this)[9] + 88);
  v86 = 0;
  v87 = 0;
  v79[0] = (uint64_t **)&v86;
  v66 = v16;
  v17 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (!v17 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, v17))
  {
    v19 = 0;
    v81 = 0;
    goto LABEL_35;
  }
  v18 = mlir::getSingleIntValue<int>(v86, v87);
  v19 = v18;
  v81 = v18;
  if ((v18 & 0xFF00000000) == 0)
  {
LABEL_35:
    v27 = 1;
    goto LABEL_36;
  }
  v78 = (int)v18;
  if ((v18 & 0x80000000) != 0)
  {
    v66 = "failed: amount_before value {0} must be positive";
    v67 = 48;
    v68 = &v72;
    v69 = 1;
    v70 = &off_1E0E23E00;
    v71 = &v78;
    v72 = &v70;
    v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    if (v94)
    {
      v45 = (_QWORD **)__p;
      if (__p)
      {
        v46 = v93;
        v47 = __p;
        if (v93 != __p)
        {
          do
            v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          v47 = __p;
        }
        v93 = v45;
        operator delete(v47);
      }
      v24 = v90;
      if (!v90)
        goto LABEL_125;
      v48 = v91;
      v26 = v90;
      if (v91 == v90)
        goto LABEL_124;
      do
      {
        v50 = (void *)*--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          operator delete[](v49);
      }
      while (v48 != v24);
      goto LABEL_123;
    }
    return v20;
  }
  if (v85 && v84 < (int)v18)
  {
    v66 = "failed: amount_before value {0} does not fit dimension size ({1})";
    v67 = 65;
    v68 = &v74;
    v69 = 2;
    v70 = &off_1E0E23E00;
    v71 = &v78;
    v72 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
    v73 = &v84;
    v74 = &v70;
    v75 = &v72;
    v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    if (v94)
    {
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v93;
        v23 = __p;
        if (v93 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v93 = v21;
        operator delete(v23);
      }
      v24 = v90;
      if (!v90)
        goto LABEL_125;
      v25 = v91;
      v26 = v90;
      if (v91 == v90)
      {
LABEL_124:
        v91 = v24;
        operator delete(v26);
LABEL_125:
        if (v88 != &v89)
          free(v88);
        return v20;
      }
      do
      {
        v36 = (void *)*--v25;
        v35 = v36;
        *v25 = 0;
        if (v36)
          operator delete[](v35);
      }
      while (v25 != v24);
LABEL_123:
      v26 = v90;
      goto LABEL_124;
    }
    return v20;
  }
  v27 = 0;
LABEL_36:
  v28 = *(const char **)((*this)[9] + 120);
  v86 = 0;
  v87 = 0;
  v79[0] = (uint64_t **)&v86;
  v66 = v28;
  v29 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (!v29)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, v29))
    return 1;
  v30 = mlir::getSingleIntValue<int>(v86, v87);
  v78 = v30;
  if ((v30 & 0xFF00000000) == 0)
    return 1;
  v77 = (int)v30;
  if ((v30 & 0x80000000) != 0)
  {
    v66 = "failed: amount_after value {0} must be positive";
    v67 = 47;
    v68 = &v72;
    v69 = 1;
    v70 = &off_1E0E23E00;
    v71 = &v77;
    v72 = &v70;
    v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    if (v94)
    {
      v51 = (_QWORD **)__p;
      if (__p)
      {
        v52 = v93;
        v53 = __p;
        if (v93 != __p)
        {
          do
            v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
          while (v52 != v51);
          v53 = __p;
        }
        v93 = v51;
        operator delete(v53);
      }
      v24 = v90;
      if (!v90)
        goto LABEL_125;
      v54 = v91;
      v26 = v90;
      if (v91 == v90)
        goto LABEL_124;
      do
      {
        v56 = (void *)*--v54;
        v55 = v56;
        *v54 = 0;
        if (v56)
          operator delete[](v55);
      }
      while (v54 != v24);
      goto LABEL_123;
    }
    return v20;
  }
  if (!v85 || v84 >= (int)v30)
  {
    if (v85)
      v57 = v27;
    else
      v57 = 1;
    if ((v57 & 1) == 0)
    {
      v58 = v84 - ((int)v30 + (uint64_t)v19);
      if (v58 < 0 || v84 < v58)
      {
        v66 = "failed: amount_before value {0} and amount_after value {1} do not fit dimension size ({1})";
        v67 = 90;
        v68 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v76;
        v69 = 3;
        v70 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&unk_1E0E23DA0;
        v71 = &v81;
        v72 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&unk_1E0E23DA0;
        v73 = &v78;
        v74 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
        v75 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))&v84;
        v76[0] = &v70;
        v76[1] = &v72;
        v76[2] = &v74;
        v80 = 263;
        v79[0] = (uint64_t **)&v66;
        mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
        v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
        if (v86)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
        if (v94)
        {
          v59 = (_QWORD **)__p;
          if (__p)
          {
            v60 = v93;
            v61 = __p;
            if (v93 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              v61 = __p;
            }
            v93 = v59;
            operator delete(v61);
          }
          v24 = v90;
          if (!v90)
            goto LABEL_125;
          v62 = v91;
          v26 = v90;
          if (v91 == v90)
            goto LABEL_124;
          do
          {
            v64 = (void *)*--v62;
            v63 = v64;
            *v62 = 0;
            if (v64)
              operator delete[](v63);
          }
          while (v62 != v24);
          goto LABEL_123;
        }
        return v20;
      }
    }
    return 1;
  }
  v66 = "failed: amount_after value {0} does not fit dimension size ({1})";
  v67 = 64;
  v68 = &v74;
  v69 = 2;
  v70 = &off_1E0E23E00;
  v71 = &v77;
  v72 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E23E00;
  v73 = &v84;
  v74 = &v70;
  v75 = &v72;
  v80 = 263;
  v79[0] = (uint64_t **)&v66;
  mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
  if (v86)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
  if (v94)
  {
    v31 = (_QWORD **)__p;
    if (__p)
    {
      v32 = v93;
      v33 = __p;
      if (v93 != __p)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = __p;
      }
      v93 = v31;
      operator delete(v33);
    }
    v24 = v90;
    if (!v90)
      goto LABEL_125;
    v34 = v91;
    v26 = v90;
    if (v91 == v90)
      goto LABEL_124;
    do
    {
      v44 = (void *)*--v34;
      v43 = v44;
      *v34 = 0;
      if (v44)
        operator delete[](v43);
    }
    while (v34 != v24);
    goto LABEL_123;
  }
  return v20;
}

BOOL mlir::mps::ReverseOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t DefiningOp;
  mlir::mps::_anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v11;
  _QWORD *v12[2];
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    v16 = v2;
    v17 = v3;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v16))
      return 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v16))
      return 1;
  }
  if (*((_DWORD *)*this + 17) == 1)
    return 1;
  v4 = *(uint64_t **)(*((_QWORD *)*this + 9) + 56);
  if (!v4)
    return 1;
  v14 = 0;
  v15 = 0;
  v13 = (uint64_t **)&v14;
  v11 = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v13, DefiningOp))
    return 1;
  v12[0] = 0;
  v12[1] = 0;
  v11 = (uint64_t *)v12;
  v6 = *this;
  v7 = v14;
  v8 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v11, v12[0]);
  return (_DWORD)v6 != 0;
}

uint64_t mlir::mps::ReverseOp::getAxes(mlir::mps::ReverseOp *this)
{
  if (*(_DWORD *)(*(_QWORD *)this + 68) == 1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56);
}

uint64_t mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(uint64_t a1, uint64_t ***a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a1;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v4);
  if (result)
    return mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a2, result);
  return result;
}

uint64_t mlir::mps::`anonymous namespace'::validateUniqueAxes(mlir::mps::_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t **a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  const void **v34;
  __int16 v35;
  const char *v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD **v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x1E0C80C00];
  v45 = v47;
  v46 = 0x400000000;
  v8 = 1;
  mlir::getIntValues<long long>(a2, a3, (uint64_t)&v45, 1);
  if ((_DWORD)v46)
  {
    v10 = v45;
    v11 = &v45[v46];
    v12 = a5 + 1;
    while (1)
    {
      v13 = *v10;
      v36 = 0;
        break;
      v14 = *v12;
      v15 = v36;
      v16 = a5 + 1;
      v17 = a5 + 1;
      if (*v12)
      {
        v18 = *v12;
        do
        {
          v19 = v18[4];
          if ((uint64_t)v36 >= v19)
          {
            if (v19 >= (uint64_t)v36)
            {
              v34 = (const void **)"axis must be unique";
              v35 = 259;
              mlir::Operation::emitOpError((uint64_t *)a1, &v34, (uint64_t)v37);
              v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
              if (v37[0])
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
              if (v44)
              {
                v25 = (_QWORD **)__p;
                if (__p)
                {
                  v26 = v43;
                  v27 = __p;
                  if (v43 != __p)
                  {
                    do
                      v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
                    while (v26 != v25);
                    v27 = __p;
                  }
                  v43 = v25;
                  operator delete(v27);
                }
                v28 = v40;
                if (v40)
                {
                  v29 = v41;
                  v30 = v40;
                  if (v41 != v40)
                  {
                    do
                    {
                      v32 = (void *)*--v29;
                      v31 = v32;
                      *v29 = 0;
                      if (v32)
                        operator delete[](v31);
                    }
                    while (v29 != v28);
                    v30 = v40;
                  }
                  v41 = v28;
                  operator delete(v30);
                }
                if (v38 != &v39)
                  free(v38);
              }
              goto LABEL_40;
            }
            ++v18;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
        while (1)
        {
          while (1)
          {
            v17 = (uint64_t **)v14;
            v20 = v14[4];
            if ((uint64_t)v36 >= v20)
              break;
            v14 = *v17;
            v16 = v17;
            if (!*v17)
              goto LABEL_15;
          }
          if (v20 >= (uint64_t)v36)
            break;
          v14 = v17[1];
          if (!v14)
          {
            v16 = v17 + 1;
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        v21 = (uint64_t *)operator new(0x28uLL);
        v21[4] = (uint64_t)v15;
        *v21 = 0;
        v21[1] = 0;
        v21[2] = (uint64_t)v17;
        *v16 = v21;
        v22 = (uint64_t *)**a5;
        if (v22)
        {
          *a5 = v22;
          v23 = *v16;
        }
        else
        {
          v23 = v21;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a5[1], v23);
        a5[2] = (uint64_t *)((char *)a5[2] + 1);
      }
      if (++v10 == v11)
      {
        v8 = 1;
        v24 = v45;
        if (v45 != v47)
          goto LABEL_41;
        return v8;
      }
    }
    v8 = 0;
    v24 = v45;
    if (v45 != v47)
      goto LABEL_41;
  }
  else
  {
LABEL_40:
    v24 = v45;
    if (v45 != v47)
LABEL_41:
      free(v24);
  }
  return v8;
}

uint64_t mlir::mps::SplitOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t UInt;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *ArgAttrsAttr;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  size_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t OperandRange;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64x2_t *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int64x2_t *v71;
  unint64_t *v72;
  unint64_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  uint64_t v76;
  int64x2_t v77;
  int64x2_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int64x2_t v84;
  int64x2_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[2];
  _QWORD v94[2];
  _QWORD v95[2];
  unint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  char v103[8];
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *__b;
  uint64_t v113;
  _BYTE v114[48];
  _QWORD *v115;
  uint64_t v116;
  _QWORD v117[8];

  v117[6] = *MEMORY[0x1E0C80C00];
  v110 = a4;
  v111 = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v102 = a6;
  v103[0] = 0;
  v104 = 0;
  v105 = v16;
  v106 = a9;
  v17 = a5;
  v107 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v102);
    if (v104)
      v104 = 0;
    mlir::OperationName::OperationName(v103, "mps.split", 9, Context);
    v104 = 1;
    v17 = v111;
  }
  v108 = a4;
  v109 = a5;
  if (v17 < 2
    || (v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::SplitOpAdaptor::verify((uint64_t)&v102, v19)))
  {
    v26 = mlir::Float32Type::get(this, a2);
    v27 = mlir::UnrankedTensorType::get(v26);
    v28 = *(unsigned int *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      LODWORD(v28) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v27;
    goto LABEL_18;
  }
  v20 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v110, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8)
    || (v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8), !v20))
  {
    v31 = mlir::ValueRange::dereference_iterator(&v110, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v31);
    if (!ElementTypeOrSelf)
      ElementTypeOrSelf = mlir::Float32Type::get(this, v33);
    v34 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v35 = *(_DWORD *)(a11 + 8);
    if (v35 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
      v35 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
LABEL_18:
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v22 = mlir::ValueRange::dereference_iterator(&v110, 1);
  v23 = v111;
  if (v111 == 3)
  {
    v87 = mlir::ValueRange::dereference_iterator(&v110, 2);
    v88 = v105;
    if (v105)
    {
LABEL_14:
      UInt = (unint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v88);
      v25 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    v87 = 0;
    v88 = v105;
    if (v105)
      goto LABEL_14;
  }
  UInt = 0;
  v25 = 0;
LABEL_27:
  v101[0] = v20;
  v101[1] = v21;
  v99 = UInt;
  v100 = v25;
  v115 = v117;
  v116 = 0x600000000;
  LOBYTE(v97) = 0;
  v98 = 0;
  v36 = 0x8000000000000000;
  v96 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v101))
    goto LABEL_51;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
  v38 = v37;
  if (mlir::mps::getAxis((uint64_t)a2, a3, v22, v37, (uint64_t)&v97))
  {
    if (v98)
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
      v41 = v40;
      v42 = 0;
      v36 = ArgAttrsAttr[v97];
      v96 = v36;
      LODWORD(v116) = 0;
      v43 = (8 * v40) >> 3;
      if (v43 > HIDWORD(v116))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v43, 8);
        v42 = v116;
      }
      v44 = 8 * v41;
      if (v41)
      {
        memcpy(&v115[v42], ArgAttrsAttr, 8 * v41);
        v42 = v116;
      }
      v45 = 0;
      LODWORD(v116) = v42 + (v44 >> 3);
      __b = v114;
      v113 = 0x600000000;
      if (v23 != 3)
        goto LABEL_35;
      goto LABEL_52;
    }
    if (v38 < 1)
    {
      v36 = 0x8000000000000000;
    }
    else
    {
      v48 = v116;
      v49 = v38 + 1;
      v36 = 0x8000000000000000;
      do
      {
        if (v48 >= HIDWORD(v116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v48 + 1, 8);
          v48 = v116;
        }
        v115[v48] = 0x8000000000000000;
        v48 = v116 + 1;
        LODWORD(v116) = v116 + 1;
        --v49;
      }
      while (v49 > 1);
    }
LABEL_51:
    v45 = 1;
    __b = v114;
    v113 = 0x600000000;
    if (v23 != 3)
    {
LABEL_35:
      if (!(_DWORD)v25)
      {
        goto LABEL_111;
      }
      if (v36 == 0x8000000000000000)
      {
        if (!UInt)
          goto LABEL_74;
        if (UInt < 7)
        {
          v46 = 0;
          v47 = v114;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v114, UInt, 8);
          v46 = v113;
          v47 = __b;
        }
        if (UInt != v46)
          bzero(&v47[8 * v46], 8 * (UInt - v46));
        LODWORD(v113) = UInt;
        v54 = 8 * UInt;
        v53 = v47;
        goto LABEL_73;
      }
      {
        v89 = "infer split sizes from total size={0} and num_splits={1} failed.";
        v90 = 64;
        v91 = v95;
        v92 = 2;
        v93[0] = &off_1E0E23E00;
        v93[1] = &v96;
        v94[0] = &off_1E0E23E30;
        v94[1] = &v99;
        v95[0] = v93;
        v95[1] = v94;
        v29 = mlir::emitOptionalError<llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<long long &>,llvm::detail::provider_format_adapter<unsigned long long &>>>>((uint64_t)a2, a3, (const void **)&v89);
        goto LABEL_111;
      }
      goto LABEL_74;
    }
LABEL_52:
    v50 = (const char *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v50 + 8))
    {
      v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v50 + 8);
      v89 = v50;
      v90 = v51;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89) & 1) != 0)
      {
LABEL_54:
        if (!mlir::matchConstantWithIntVector<long long>(v87, (uint64_t)&__b))
        {
          if (!(_DWORD)v25)
          {
            UInt = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
            LOBYTE(v100) = 1;
            v99 = UInt;
            if (UInt == 0x8000000000000000)
            {
              goto LABEL_111;
            }
          }
          v52 = v113;
          if (UInt != v113)
          {
            if (UInt >= v113)
            {
              if (UInt > HIDWORD(v113))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v114, UInt, 8);
                v52 = v113;
              }
              if (UInt != v52)
                bzero((char *)__b + 8 * v52, 8 * (UInt - v52));
            }
            LODWORD(v113) = UInt;
          }
          if (UInt)
          {
            v53 = __b;
            v54 = 8 * UInt;
LABEL_73:
            memset_pattern16(v53, &unk_1812352C0, v54);
          }
        }
LABEL_74:
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v101))
        {
          if ((_DWORD)v113)
          {
            v55 = __b;
            v56 = v97;
            do
            {
              v57 = (uint64_t)v115;
              if ((v45 & 1) == 0)
                v115[v56] = *v55;
              v58 = v116;
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v101);
              v60 = mlir::RankedTensorType::get(v57, v58, OperandRange, 0);
              v61 = *(unsigned int *)(a11 + 8);
              if (v61 >= *(unsigned int *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v61 + 1, 8);
                v61 = *(unsigned int *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v61) = v60;
              ++*(_DWORD *)(a11 + 8);
              ++v55;
            }
            while (v55 != (_QWORD *)((char *)__b + 8 * v113));
          }
          goto LABEL_110;
        }
        v62 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v101);
        v63 = mlir::UnrankedTensorType::get(v62);
        v64 = v63;
        v65 = v113;
        if (*(_DWORD *)(a11 + 12) < v113)
        {
          *(_DWORD *)(a11 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65, 8);
          v66 = *(int64x2_t **)a11;
          if (v65 >= 4)
          {
            v67 = (unint64_t *)v66 + (v65 & 0xFFFFFFFC);
            v68 = v65 & 3;
            v74 = vdupq_n_s64(v64);
            v75 = v66 + 1;
            v76 = v65 & 0xFFFFFFFC;
            do
            {
              v75[-1] = v74;
              *v75 = v74;
              v75 += 2;
              v76 -= 4;
            }
            while (v76);
            if ((v65 & 0xFFFFFFFC) == v65)
              goto LABEL_109;
          }
          else
          {
            v67 = *(unint64_t **)a11;
            v68 = v65;
          }
          do
          {
            *v67++ = v64;
            --v68;
          }
          while (v68);
LABEL_109:
          *(_DWORD *)(a11 + 8) = v65;
LABEL_110:
          v29 = 1;
LABEL_111:
          if (__b != v114)
            free(__b);
          goto LABEL_113;
        }
        v69 = *(unsigned int *)(a11 + 8);
        if (v69 >= v113)
          v70 = v113;
        else
          v70 = *(unsigned int *)(a11 + 8);
        if (v70)
        {
          v71 = *(int64x2_t **)a11;
          if (v70 >= 4)
          {
            v72 = (unint64_t *)v71 + (v70 & 0xFFFFFFFC);
            v73 = v70 & 3;
            v77 = vdupq_n_s64(v63);
            v78 = v71 + 1;
            v79 = v70 & 0xFFFFFFFC;
            do
            {
              v78[-1] = v77;
              *v78 = v77;
              v78 += 2;
              v79 -= 4;
            }
            while (v79);
            if (v70 == (v70 & 0xFFFFFFFC))
              goto LABEL_101;
          }
          else
          {
            v72 = *(unint64_t **)a11;
            v73 = v70;
          }
          do
          {
            *v72++ = v63;
            --v73;
          }
          while (v73);
        }
LABEL_101:
        if (v69 >= v65)
          goto LABEL_109;
        v80 = v65 - v69;
        if (v65 == v69)
          goto LABEL_109;
        v81 = *(_QWORD *)a11 + 8 * v69;
        if (v80 >= 4)
        {
          v82 = (unint64_t *)(v81 + 8 * (v80 & 0xFFFFFFFFFFFFFFFCLL));
          v83 = v80 & 3;
          v84 = vdupq_n_s64(v63);
          v85 = (int64x2_t *)(v81 + 16);
          v86 = v80 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v85[-1] = v84;
            *v85 = v84;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          if (v80 == (v80 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_109;
        }
        else
        {
          v82 = (unint64_t *)(*(_QWORD *)a11 + 8 * v69);
          v83 = v80;
        }
        do
        {
          *v82++ = v63;
          --v83;
        }
        while (v83);
        goto LABEL_109;
      }
    }
    else
    {
      v89 = 0;
      v90 = 0;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89) & 1) != 0)
        goto LABEL_54;
    }
    goto LABEL_111;
  }
  v29 = 0;
LABEL_113:
  if (v115 != v117)
    free(v115);
  return v29;
}

uint64_t mlir::mps::SplitOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
    return 1;
  v13[0] = *(_QWORD *)(a1 + 24);
  v15[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)v15, 32))
    return 1;
  v13[0] = "'mps.split' op attribute 'num_splits' failed to satisfy constraint: 32-bit unsigned integer attribute";
  v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)v15);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  if (v22)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
    v8 = v18;
    if (v18)
    {
      v9 = v19;
      v10 = v18;
      if (v19 != v18)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v18;
      }
      v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17)
      free(v16);
  }
  return v3;
}

uint64_t mlir::mps::SplitOp::verify(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *p_p;
  int64_t v17;
  char v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  void **v60;
  _BYTE *v61;
  char *v62;
  __int128 v63;
  _QWORD **v64;
  _QWORD **v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  uint64_t *v76;
  uint64_t *v77;
  _QWORD **v78;
  _QWORD **v79;
  void *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  _QWORD **v84;
  _QWORD **v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  const char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  int64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t **v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int ArgOperands;
  const void **v104[4];
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD v107[2];
  const void ***v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  _QWORD v115[2];
  void *v116;
  uint64_t v117;
  _BYTE v118[48];
  void *v119;
  uint64_t v120;
  char v121;
  void *__p;
  unsigned int v123;
  void *v124;
  unsigned int v125;
  unsigned int v126;
  _BYTE v127[96];
  void *v128;
  _QWORD *v129;
  void *v130;
  _QWORD **v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD v135[8];

  v135[6] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = *this;
  }
  else
  {
    v4 = 0;
  }
  v115[0] = v3;
  v115[1] = v4;
  v5 = *((unsigned int *)v2 + 9);
  v6 = (uint64_t)(v2 - 2);
  if ((_DWORD)v5)
    v7 = v6;
  else
    v7 = 0;
  v8 = 0x8000000000000000;
  v114 = 0x8000000000000000;
  LOBYTE(v112) = 0;
  v113 = 0;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v115);
  if (!ArgOperands)
  {
    v12 = 0;
    ArgAttrsAttr = 0;
    v13 = *this;
    if (*((_DWORD *)*this + 17) != 2)
      goto LABEL_11;
LABEL_16:
    v102 = 0;
    v15 = v135;
    v133 = v135;
    v134 = 0x600000000;
    goto LABEL_18;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v115);
  v8 = v9;
  if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 56), v9, (uint64_t)&v112))
    return 0;
  if (!v113)
    return 1;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v115);
  v12 = v11;
  v114 = ArgAttrsAttr[v112];
  v13 = *this;
  if (*((_DWORD *)*this + 17) == 2)
    goto LABEL_16;
LABEL_11:
  v14 = *(_QWORD *)(v13[9] + 88);
  v15 = v135;
  v133 = v135;
  v134 = 0x600000000;
  if (v14 && mlir::matchConstantWithIntVector<long long>(v14, (uint64_t)&v133))
  {
    if ((_DWORD)v134 != (_DWORD)v5)
    {
      LOWORD(v105[0]) = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (!v132)
        goto LABEL_212;
      v52 = (_QWORD **)v130;
      if (v130)
      {
        v53 = v131;
        v54 = v130;
        if (v131 != v130)
        {
          do
            v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
          while (v53 != v52);
          v54 = v130;
        }
        v131 = v52;
        operator delete(v54);
      }
      v55 = v128;
      if (v128)
      {
        v56 = v129;
        v57 = v128;
        if (v129 != v128)
        {
          do
          {
            v59 = (void *)*--v56;
            v58 = v59;
            *v56 = 0;
            if (v59)
              operator delete[](v58);
          }
          while (v56 != v55);
          v57 = v128;
        }
        v129 = v55;
        operator delete(v57);
      }
      v76 = (uint64_t *)v124;
      v77 = (uint64_t *)v127;
LABEL_210:
      if (v76 != v77)
        free(v76);
      goto LABEL_212;
    }
    v102 = 1;
  }
  else
  {
    v102 = 0;
  }
LABEL_18:
  LOBYTE(v119) = 0;
  v121 = 0;
  v104[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v104[0])
  {
    mlir::IntegerAttr::getValue(v104, (llvm::APInt *)&__p);
    if (v123 >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v17 = *p_p;
    if (v123 >= 0x41 && __p)
      operator delete[](__p);
    v111 = v17 | 0x100000000;
    if (!(_DWORD)v17)
    {
      LOWORD(v105[0]) = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (!v132)
        goto LABEL_208;
      v32 = (_QWORD **)v130;
      if (v130)
      {
        v33 = v131;
        v34 = v130;
        if (v131 != v130)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = v130;
        }
        v131 = v32;
        operator delete(v34);
      }
      v35 = v128;
      if (!v128)
        goto LABEL_206;
      v36 = v129;
      v37 = v128;
      if (v129 == v128)
        goto LABEL_205;
      do
      {
        v39 = (void *)*--v36;
        v38 = v39;
        *v36 = 0;
        if (v39)
          operator delete[](v38);
      }
      while (v36 != v35);
      goto LABEL_204;
    }
    if ((_DWORD)v5 != (_DWORD)v17)
    {
      LOWORD(v105[0]) = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (!v132)
        goto LABEL_208;
      v46 = (_QWORD **)v130;
      if (v130)
      {
        v47 = v131;
        v48 = v130;
        if (v131 != v130)
        {
          do
            v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          v48 = v130;
        }
        v131 = v46;
        operator delete(v48);
      }
      v35 = v128;
      if (!v128)
        goto LABEL_206;
      v49 = v129;
      v37 = v128;
      if (v129 == v128)
        goto LABEL_205;
      do
      {
        v51 = (void *)*--v49;
        v50 = v51;
        *v49 = 0;
        if (v51)
          operator delete[](v50);
      }
      while (v49 != v35);
      goto LABEL_204;
    }
    if (v114 == 0x8000000000000000)
      goto LABEL_34;
    v116 = v118;
    v117 = 0x600000000;
    if (v18)
    {
      std::optional<llvm::SmallVector<long long,6u>>::operator=[abi:nn180100]<llvm::SmallVector<long long,6u>&,void>((uint64_t)&v119, (uint64_t)&v116);
      v19 = v116;
      if (v116 == v118)
        goto LABEL_31;
    }
    else
    {
      if (!BYTE4(v111))
      {
        v92 = std::__throw_bad_optional_access[abi:nn180100]();
LABEL_222:
        v94 = (char *)((char *)&v116 - v61);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v92, v127, v93, 24);
        v61 = v124;
        v60 = (void **)&v94[(_QWORD)v124];
LABEL_220:
        v15 = v97;
LABEL_141:
        v62 = &v61[24 * v125];
        v63 = *(_OWORD *)v60;
        *((_QWORD *)v62 + 2) = v60[2];
        *(_OWORD *)v62 = v63;
        ++v125;
LABEL_142:
        v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        if (!v132)
          goto LABEL_208;
        v64 = (_QWORD **)v130;
        if (v130)
        {
          v65 = v131;
          v66 = v130;
          if (v131 != v130)
          {
            do
              v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            v66 = v130;
          }
          v131 = v64;
          operator delete(v66);
        }
        v35 = v128;
        if (!v128)
          goto LABEL_206;
        v67 = v129;
        v37 = v128;
        if (v129 == v128)
        {
LABEL_205:
          v129 = v35;
          operator delete(v37);
LABEL_206:
          if (v124 != v127)
            free(v124);
          goto LABEL_208;
        }
        do
        {
          v69 = (void *)*--v67;
          v68 = v69;
          *v67 = 0;
          if (v69)
            operator delete[](v68);
        }
        while (v67 != v35);
LABEL_204:
        v37 = v128;
        goto LABEL_205;
      }
      v104[0] = (const void **)"infer split sizes from total size={0} and num_splits={1} failed.";
      v104[1] = (const void **)64;
      v104[2] = (const void **)v107;
      v104[3] = (const void **)2;
      v105[0] = &off_1E0E23E00;
      v105[1] = &v114;
      v106[0] = &unk_1E0E23DD0;
      v106[1] = &v111;
      v107[0] = v105;
      v107[1] = v106;
      v110 = 263;
      v108 = v104;
      mlir::OpState::emitOpError(this, (const void ***)&v108, (uint64_t)&__p);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
      v19 = v116;
      if (v116 == v118)
        goto LABEL_31;
    }
    free(v19);
LABEL_31:
    if (!v18)
    {
LABEL_208:
      if (!v121)
        goto LABEL_212;
LABEL_209:
      v76 = (uint64_t *)v119;
      v77 = &v120;
      goto LABEL_210;
    }
    goto LABEL_34;
  }
  v111 = 0;
LABEL_34:
  v98 = this;
  if (!(_DWORD)v5)
  {
    v20 = 0;
LABEL_94:
    v17 = 1;
    if (v114 == 0x8000000000000000 || v20 == v114)
      goto LABEL_208;
    v104[0] = (const void **)"sum of result dimension lengths along split axis must equal input dimension length along split axis";
    LOWORD(v105[0]) = 259;
    mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    if (!v132)
      goto LABEL_208;
    v40 = (_QWORD **)v130;
    if (v130)
    {
      v41 = v131;
      v42 = v130;
      if (v131 != v130)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = v130;
      }
      v131 = v40;
      operator delete(v42);
    }
    v35 = v128;
    if (!v128)
      goto LABEL_206;
    v43 = v129;
    v37 = v128;
    if (v129 == v128)
      goto LABEL_205;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v35);
    goto LABEL_204;
  }
  v97 = v135;
  v20 = 0;
  v21 = 0;
  v96 = 0;
  v22 = v112;
  v100 = v12 - (v112 + 1);
  v101 = v112 + 1;
  v99 = &ArgAttrsAttr[v112 + 1];
  v95 = 0;
  do
  {
    while (1)
    {
      v23 = (const void **)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v21) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v23)
        break;
      v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v23 + 8);
      v108 = (const void ***)v23;
      v109 = v24;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v108))
        goto LABEL_41;
LABEL_36:
      v20 = 0x8000000000000000;
      if (v5 == ++v21)
        goto LABEL_90;
    }
    v108 = 0;
    v109 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v108))
      goto LABEL_36;
LABEL_41:
    if (v8 != 0x8000000000000000)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v108);
      if (v25 != v8)
      {
        v104[0] = (const void **)"invalid rank for result, expected rank ";
        LOWORD(v105[0]) = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        v15 = v135;
        if (!__p)
          goto LABEL_142;
        LODWORD(v116) = 2;
        v117 = v8;
        v60 = &v116;
        v61 = v124;
        if (v125 < v126)
          goto LABEL_141;
        v92 = (uint64_t)&v124;
        v93 = v125 + 1;
        if (v124 > &v116 || (char *)v124 + 24 * v125 <= (char *)&v116)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, v127, v93, 24);
          v60 = &v116;
          v61 = v124;
          goto LABEL_220;
        }
        goto LABEL_222;
      }
    }
    v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v108);
    if (!ArgOperands)
      goto LABEL_53;
    v28 = (_QWORD *)v26;
    v29 = v27;
    v30 = *(_QWORD *)(v26 + 8 * v22);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v115)
      && (!mlir::verifyCompatibleShape(v28, v22, ArgAttrsAttr, v22)
       || !mlir::verifyCompatibleShape(&v28[v101], v29 - v101, v99, v100)))
    {
      v104[0] = (const void **)"result shape must match input shape along non-axis dimensions";
      LOWORD(v105[0]) = 259;
      mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      v15 = v135;
      if (!v132)
        goto LABEL_208;
      v70 = (_QWORD **)v130;
      if (v130)
      {
        v71 = v131;
        v72 = v130;
        if (v131 != v130)
        {
          do
            v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
          while (v71 != v70);
          v72 = v130;
        }
        v131 = v70;
        operator delete(v72);
      }
      v35 = v128;
      if (!v128)
        goto LABEL_206;
      v73 = v129;
      v37 = v128;
      if (v129 == v128)
        goto LABEL_205;
      do
      {
        v75 = (void *)*--v73;
        v74 = v75;
        *v73 = 0;
        if (v75)
          operator delete[](v74);
      }
      while (v73 != v35);
      goto LABEL_204;
    }
    if (v102)
    {
      if (v30 == 0x8000000000000000)
        goto LABEL_53;
      if (v30 != v133[v21])
      {
        LOWORD(v105[0]) = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        v15 = v135;
        if (!v132)
          goto LABEL_208;
        v78 = (_QWORD **)v130;
        if (v130)
        {
          v79 = v131;
          v80 = v130;
          if (v131 != v130)
          {
            do
              v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
            while (v79 != v78);
            v80 = v130;
          }
          v131 = v78;
          operator delete(v80);
        }
        v35 = v128;
        if (!v128)
          goto LABEL_206;
        v81 = v129;
        v37 = v128;
        if (v129 == v128)
          goto LABEL_205;
        do
        {
          v83 = (void *)*--v81;
          v82 = v83;
          *v81 = 0;
          if (v83)
            operator delete[](v82);
        }
        while (v81 != v35);
        goto LABEL_204;
      }
    }
    else
    {
      if (!BYTE4(v111))
        goto LABEL_54;
      if (v30 == 0x8000000000000000)
      {
LABEL_53:
        v30 = 0x8000000000000000;
        goto LABEL_54;
      }
      if (!v121)
      {
        if (v21 < v5 - 1)
        {
          if (v96)
          {
            if (v30 != v95)
            {
              v91 = "Dim length along axis in the results (except the last one) must be same";
              goto LABEL_215;
            }
          }
          else
          {
            v96 = 1;
          }
          v95 = v30;
          goto LABEL_54;
        }
        if (!v96)
        {
          v96 = 0;
          goto LABEL_54;
        }
        if (v30 <= v95)
          goto LABEL_54;
        v91 = "Dim length along axis in the last result tensor must be <= that in the first (N - 1) tensors. N: number of results";
LABEL_215:
        v104[0] = (const void **)v91;
        LOWORD(v105[0]) = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
        v15 = v135;
        if (v121)
          goto LABEL_209;
        goto LABEL_212;
      }
      if (v30 != *((_QWORD *)v119 + v21))
      {
        v104[0] = (const void **)"inferred dimension size along axis must be compatible with result shape at axis";
        LOWORD(v105[0]) = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        v15 = v135;
        if (!v132)
          goto LABEL_208;
        v84 = (_QWORD **)v130;
        if (v130)
        {
          v85 = v131;
          v86 = v130;
          if (v131 != v130)
          {
            do
              v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
            while (v85 != v84);
            v86 = v130;
          }
          v131 = v84;
          operator delete(v86);
        }
        v35 = v128;
        if (!v128)
          goto LABEL_206;
        v87 = v129;
        v37 = v128;
        if (v129 == v128)
          goto LABEL_205;
        do
        {
          v89 = (void *)*--v87;
          v88 = v89;
          *v87 = 0;
          if (v89)
            operator delete[](v88);
        }
        while (v87 != v35);
        goto LABEL_204;
      }
    }
LABEL_54:
    if (v30 == 0x8000000000000000 || v20 == 0x8000000000000000)
      v20 = 0x8000000000000000;
    else
      v20 += v30;
    ++v21;
  }
  while (v5 != v21);
LABEL_90:
  v15 = v135;
  if (v20 != 0x8000000000000000)
    goto LABEL_94;
  v17 = 1;
  if (v121)
    goto LABEL_209;
LABEL_212:
  if (v133 != v15)
    free(v133);
  return v17;
}

uint64_t mlir::mps::SplitOp::getSplitSizes(mlir::mps::SplitOp *this)
{
  if (*(_DWORD *)(*(_QWORD *)this + 68) == 2)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 88);
}

uint64_t mlir::mps::`anonymous namespace'::inferSplitSizes(uint64_t a1, int64_t a2, uint64_t a3)
{
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *__src;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  v6 = (a1 + a2 - 1) / a2;
  v7 = a1 / v6;
  v8 = a1 / v6;
  __src = v23;
  v22 = 6;
  if ((unint64_t)(a1 / v6) < 7)
  {
    v9 = v23;
    if (v8)
    {
      v23[0] = (a1 + a2 - 1) / a2;
      v9 = v23;
      if (v7 != 1)
      {
        v23[1] = (a1 + a2 - 1) / a2;
        v9 = v23;
        if (v7 != 2)
        {
          v23[2] = (a1 + a2 - 1) / a2;
          v9 = v23;
          if (v7 != 3)
          {
            v23[3] = (a1 + a2 - 1) / a2;
            v9 = v23;
            if (v7 != 4)
            {
              v23[4] = (a1 + a2 - 1) / a2;
              v9 = v23;
              if (v7 != 5)
              {
                v23[5] = (a1 + a2 - 1) / a2;
                v9 = v23;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v21 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, v8, 8);
    v9 = __src;
    v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = v7 & 3;
    v12 = vdupq_n_s64(v6);
    v13 = (int64x2_t *)((char *)__src + 16);
    v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        v9[v10++] = v6;
        --v11;
      }
      while (v11);
    }
  }
  v21 = v8;
  v15 = a1 - v7 * v6;
  if (v15)
  {
    if (v22 <= v8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, v7 + 1, 8);
      LODWORD(v8) = v21;
      v9 = __src;
    }
    v9[v8] = v15;
    LODWORD(v8) = ++v21;
  }
  if (v8 == a2)
  {
    if (&__src == (void **)a3)
      goto LABEL_34;
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a3, __src, 8 * a2);
      goto LABEL_33;
    }
    if (*(_DWORD *)(a3 + 12) >= v8)
    {
      if ((_DWORD)v16)
      {
        memmove(*(void **)a3, __src, 8 * v16);
        goto LABEL_31;
      }
    }
    else
    {
      *(_DWORD *)(a3 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), a2, 8);
    }
    v16 = 0;
LABEL_31:
    if (v16 != v21)
      memcpy((void *)(*(_QWORD *)a3 + 8 * v16), (char *)__src + 8 * v16, 8 * v21 - 8 * v16);
LABEL_33:
    *(_DWORD *)(a3 + 8) = v8;
LABEL_34:
    v17 = 1;
    v18 = __src;
    if (__src == v23)
      return v17;
    goto LABEL_24;
  }
  v17 = 0;
  v18 = __src;
  if (__src != v23)
LABEL_24:
    free(v18);
  return v17;
}

uint64_t std::optional<llvm::SmallVector<long long,6u>>::operator=[abi:nn180100]<llvm::SmallVector<long long,6u>&,void>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;

  if (*(_BYTE *)(a1 + 64))
  {
    if (a1 != a2)
    {
      v4 = *(unsigned int *)(a2 + 8);
      v5 = *(unsigned int *)(a1 + 8);
      if (v5 < v4)
      {
        if (*(_DWORD *)(a1 + 12) < v4)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
          v5 = 0;
          v6 = *(unsigned int *)(a2 + 8);
          if (!*(_DWORD *)(a2 + 8))
            goto LABEL_18;
          goto LABEL_17;
        }
        if (!(_DWORD)v5)
        {
          v5 = 0;
          v6 = *(unsigned int *)(a2 + 8);
          if (!*(_DWORD *)(a2 + 8))
            goto LABEL_18;
          goto LABEL_17;
        }
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
LABEL_17:
          memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_18:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
      if (!(_DWORD)v4)
        goto LABEL_18;
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      *(_DWORD *)(a1 + 8) = v4;
    }
    return a1;
  }
  v7 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (a1 != a2)
  {
    v8 = *(_DWORD *)(a2 + 8);
    if (v8)
    {
      if (v8 < 7)
      {
        v9 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), *(unsigned int *)(a2 + 8), 8);
        v9 = *(_DWORD *)(a2 + 8);
        if (!v9)
        {
LABEL_21:
          *(_DWORD *)(a1 + 8) = v8;
          goto LABEL_22;
        }
        v7 = *(void **)a1;
      }
      memcpy(v7, *(const void **)a2, 8 * v9);
      goto LABEL_21;
    }
  }
LABEL_22:
  *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

uint64_t mlir::mps::SingleGateRNNOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  mlir::MLIRContext *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t *v26;
  mlir::MLIRContext *v27;
  uint64_t v28;
  uint64_t v30;
  _BYTE v31[8];
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v16 = *a7;
    v39 = a7[1];
  }
  else
  {
    v16 = 0uLL;
    v39 = 0u;
  }
  v30 = a6;
  v31[0] = 0;
  v32 = 0;
  v33 = v16;
  v34 = v39;
  v35 = a9;
  v36 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32)
      v32 = 0;
    mlir::OperationName::OperationName(v31, "mps.singlegate_rnn", 18, Context);
    v32 = 1;
  }
  v37 = a4;
  v38 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::SingleGateRNNOpAdaptor::verify((uint64_t)&v30, v18))
  {
    v22 = mlir::Float32Type::get(this, v19);
    v23 = mlir::UnrankedTensorType::get(v22);
    v24 = *(unsigned int *)(a11 + 8);
    v25 = (_DWORD *)(a11 + 8);
    if (v24 < *(_DWORD *)(a11 + 12))
    {
LABEL_14:
      v26 = *(uint64_t **)a11;
LABEL_22:
      v26[v24] = v23;
      ++*v25;
      return 1;
    }
LABEL_18:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a11 + 8);
    goto LABEL_14;
  }
  *(_QWORD *)&v39 = a4;
  *((_QWORD *)&v39 + 1) = a5;
  if (a5)
  {
    v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
    ++*(_DWORD *)(a11 + 8);
  }
  else if (!mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands"))
  {
    v28 = mlir::Float32Type::get(this, v27);
    v23 = mlir::UnrankedTensorType::get(v28);
    v24 = *(unsigned int *)(a11 + 8);
    v25 = (_DWORD *)(a11 + 8);
    if (v24 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a11 + 8);
    }
    v26 = *(uint64_t **)a11;
    goto LABEL_22;
  }
  if (*((_QWORD *)&v33 + 1))
  {
    v26 = *(uint64_t **)a11;
    v23 = **(_QWORD **)a11;
    v25 = (_DWORD *)(a11 + 8);
    v24 = *(unsigned int *)(a11 + 8);
    if (v24 < *(_DWORD *)(a11 + 12))
      goto LABEL_22;
    goto LABEL_18;
  }
  return 1;
}

uint64_t mlir::mps::SingleGateRNNOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
    return 1;
  v12 = "'mps.singlegate_rnn' op requires attribute 'activation'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    v3 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v4 = (uint64_t)(*this + 10);
  else
    v4 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * *(unsigned int *)(v4 + 16) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8))
  {
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v7 = (uint64_t)(*this + 10);
  else
    v7 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9]
                                        + 32 * (*(_DWORD *)(v7 + 20) + *(_DWORD *)(v7 + 16))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = *this;
  v12 = *((unsigned int *)*this + 11);
  v13 = (v12 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v14 = &(*this)[2 * v13 + 8];
  else
    v14 = 0;
  v15 = *((_DWORD *)v14 + 7);
  v16 = v12 & 0x800000;
  if ((v12 & 0x800000) != 0)
  {
    v17 = v11[9];
    if (!v15)
    {
LABEL_27:
      v20 = 0;
      v19 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    v17 = 0;
    if (!v15)
      goto LABEL_27;
  }
  v18 = (*((_DWORD *)v14 + 5) + *((_DWORD *)v14 + 4) + *((_DWORD *)v14 + 6));
  if (!*(_QWORD *)(v17 + 32 * v18 + 24))
    goto LABEL_27;
  v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11[9] + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v11 = *this;
  v12 = *((unsigned int *)*this + 11);
  v13 = (v12 >> 23) & 1;
  v16 = v12 & 0x800000;
LABEL_28:
  v21 = &v11[2 * v13 + 8];
  if (!BYTE3(v12))
    v21 = 0;
  v22 = *((_DWORD *)v21 + 8);
  if (v16)
  {
    v23 = v11[9];
    if (!v22)
    {
LABEL_38:
      v26 = 0;
      v25 = 0;
    }
  }
  else
  {
    v23 = 0;
    if (!v22)
      goto LABEL_38;
  }
  v24 = (*((_DWORD *)v21 + 5) + *((_DWORD *)v21 + 4) + *((_DWORD *)v21 + 6) + *((_DWORD *)v21 + 7));
  if (!*(_QWORD *)(v23 + 32 * v24 + 24))
    goto LABEL_38;
  v25 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11[9] + 32 * v24 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v11 = *this;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getRecurrentWeight(mlir::mps::SingleGateRNNGradientOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 16) + 24);
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getTrainingState(mlir::mps::SingleGateRNNGradientOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                   + 32 * (*(_DWORD *)(v1 + 20) + *(_DWORD *)(v1 + 16))
                   + 24);
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getInputState(mlir::mps::SingleGateRNNGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[7];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[6] + v2[5] + v2[4]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[6] + v2[5] + v2[4]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getMask(mlir::mps::SingleGateRNNGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[8];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[7] + v2[6] + v2[5] + v2[4]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[7] + v2[6] + v2[5] + v2[4]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::`anonymous namespace'::verifySingleGateRNN(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  BOOL v12;
  _QWORD *ArgAttrsAttr;
  const char *v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t *v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  unint64_t *v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  unint64_t *v68;
  char *v69;
  char *v70;
  __int128 v71;
  _QWORD **v72;
  _QWORD **v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t ElementTypeOrSelf;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  const void **v123[4];
  __int16 v124;
  _QWORD v125[2];
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD *v128[2];
  unint64_t v129;
  const char *v130;
  uint64_t v131;
  _QWORD v132[3];
  void *v133;
  unsigned int v134;
  unsigned int v135;
  _BYTE v136[96];
  void *v137;
  _QWORD *v138;
  void *__p;
  _QWORD **v140;
  char v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v128[0] = a2;
  v128[1] = a3;
  v127[0] = a4;
  v127[1] = a5;
  v126[0] = a6;
  v126[1] = a7;
  v125[0] = a11;
  v125[1] = a12;
  if (!a2)
    return 1;
  v12 = *(_UNKNOWN **)(*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id || a4 == 0;
  if (v12 || *(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return 1;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v128);
  v16 = v15;
  v17 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v127);
  if (v16 != (const char *)3)
  {
    v123[0] = (const void **)"Invalid input tensor rank: ";
    v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    if (v132[0])
    {
      LODWORD(v129) = 5;
      v130 = v16;
      v23 = &v129;
      v24 = (char *)v133;
      if (v134 >= v135)
      {
        v101 = v134 + 1;
        if (v133 <= &v129 && (char *)v133 + 24 * v134 > (char *)&v129)
        {
          v113 = (char *)&v129 - (_BYTE *)v133;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v101, 24);
          v24 = (char *)v133;
          v23 = (unint64_t *)((char *)v133 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v101, 24);
          v23 = &v129;
          v24 = (char *)v133;
        }
      }
      v25 = &v24[24 * v134];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = v23[2];
      *(_OWORD *)v25 = v26;
      v27 = ++v134;
      if (v132[0])
      {
        LODWORD(v129) = 3;
        v130 = ", should be 3.";
        v131 = 14;
        v28 = &v129;
        v29 = (char *)v133;
        if (v27 >= v135)
        {
          v102 = v27 + 1;
          v103 = (char *)v133 + 24 * v27 > (char *)&v129;
          if (v133 <= &v129 && v103)
          {
            v114 = (char *)&v129 - (_BYTE *)v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v102, 24);
            v29 = (char *)v133;
            v28 = (unint64_t *)((char *)v133 + v114);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v102, 24);
            v28 = &v129;
            v29 = (char *)v133;
          }
        }
        v30 = &v29[24 * v134];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = v28[2];
        *(_OWORD *)v30 = v31;
        ++v134;
      }
    }
    v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v132);
    if (v132[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v132);
    if (!v141)
      return v22;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v140;
      v34 = __p;
      if (v140 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v140 = v32;
      operator delete(v34);
    }
    v35 = v137;
    if (v137)
    {
      v36 = v138;
      v37 = v137;
      if (v138 != v137)
      {
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        v37 = v137;
      }
      v138 = v35;
      operator delete(v37);
    }
    v80 = v133;
    if (v133 == v136)
      return v22;
LABEL_80:
    free(v80);
    return v22;
  }
  v122 = v18;
  if (v18 < 2)
  {
    v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    v19 = (uint64_t *)&v122;
LABEL_10:
    v20 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v132, v19);
    v21 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v20, ", should be 2 or greater.");
    goto LABEL_11;
  }
  v40 = 0;
  v41 = (const char *)ArgAttrsAttr[2];
  do
  {
    if (v40 < v18 - 2)
      v42 = 1;
    else
      v42 = ArgAttrsAttr[2];
    v43 = *(_QWORD *)(v17 + 8 * v40);
    if (v42 != 0x8000000000000000 && v43 != 0x8000000000000000 && v43 != v42)
    {
      v124 = 259;
      mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
      if (v132[0])
      {
        LODWORD(v129) = 3;
        v130 = "square matrix of size [";
        v131 = 23;
        v48 = &v129;
        v49 = (char *)v133;
        if (v134 >= v135)
        {
          v104 = v134 + 1;
          if (v133 <= &v129 && (char *)v133 + 24 * v134 > (char *)&v129)
          {
            v115 = (char *)&v129 - (_BYTE *)v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v104, 24);
            v49 = (char *)v133;
            v48 = (unint64_t *)((char *)v133 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v104, 24);
            v48 = &v129;
            v49 = (char *)v133;
          }
        }
        v50 = &v49[24 * v134];
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = v48[2];
        *(_OWORD *)v50 = v51;
        v52 = ++v134;
        if (v132[0])
        {
          LODWORD(v129) = 2;
          v130 = v41;
          v53 = &v129;
          v54 = (char *)v133;
          if (v52 >= v135)
          {
            v105 = v52 + 1;
            v106 = (char *)v133 + 24 * v52 > (char *)&v129;
            if (v133 <= &v129 && v106)
            {
              v116 = (char *)&v129 - (_BYTE *)v133;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v105, 24);
              v54 = (char *)v133;
              v53 = (unint64_t *)((char *)v133 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v105, 24);
              v53 = &v129;
              v54 = (char *)v133;
            }
          }
          v55 = &v54[24 * v134];
          v56 = *(_OWORD *)v53;
          *((_QWORD *)v55 + 2) = v53[2];
          *(_OWORD *)v55 = v56;
          v57 = ++v134;
          if (v132[0])
          {
            LODWORD(v129) = 3;
            v130 = ", ";
            v131 = 2;
            v58 = &v129;
            v59 = (char *)v133;
            if (v57 >= v135)
            {
              v107 = v57 + 1;
              v108 = (char *)v133 + 24 * v57 > (char *)&v129;
              if (v133 <= &v129 && v108)
              {
                v117 = (char *)&v129 - (_BYTE *)v133;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v107, 24);
                v59 = (char *)v133;
                v58 = (unint64_t *)((char *)v133 + v117);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v107, 24);
                v58 = &v129;
                v59 = (char *)v133;
              }
            }
            v60 = &v59[24 * v134];
            v61 = *(_OWORD *)v58;
            *((_QWORD *)v60 + 2) = v58[2];
            *(_OWORD *)v60 = v61;
            v62 = ++v134;
            if (v132[0])
            {
              LODWORD(v129) = 2;
              v130 = v41;
              v63 = &v129;
              v64 = (char *)v133;
              if (v62 >= v135)
              {
                v109 = v62 + 1;
                v110 = (char *)v133 + 24 * v62 > (char *)&v129;
                if (v133 <= &v129 && v110)
                {
                  v118 = (char *)&v129 - (_BYTE *)v133;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v109, 24);
                  v64 = (char *)v133;
                  v63 = (unint64_t *)((char *)v133 + v118);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v109, 24);
                  v63 = &v129;
                  v64 = (char *)v133;
                }
              }
              v65 = &v64[24 * v134];
              v66 = *(_OWORD *)v63;
              *((_QWORD *)v65 + 2) = v63[2];
              *(_OWORD *)v65 = v66;
              v67 = ++v134;
              if (v132[0])
              {
                LODWORD(v129) = 3;
                v130 = "].";
                v131 = 2;
                v68 = &v129;
                v69 = (char *)v133;
                if (v67 >= v135)
                {
                  v111 = v67 + 1;
                  v112 = (char *)v133 + 24 * v67 > (char *)&v129;
                  if (v133 <= &v129 && v112)
                  {
                    v119 = (char *)&v129 - (_BYTE *)v133;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v111, 24);
                    v69 = (char *)v133;
                    v68 = (unint64_t *)((char *)v133 + v119);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v111, 24);
                    v68 = &v129;
                    v69 = (char *)v133;
                  }
                }
                v70 = &v69[24 * v134];
                v71 = *(_OWORD *)v68;
                *((_QWORD *)v70 + 2) = v68[2];
                *(_OWORD *)v70 = v71;
                ++v134;
              }
            }
          }
        }
      }
      v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v132);
      if (v132[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v132);
      if (!v141)
        return v22;
      v72 = (_QWORD **)__p;
      if (__p)
      {
        v73 = v140;
        v74 = __p;
        if (v140 != __p)
        {
          do
            v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
          while (v73 != v72);
          v74 = __p;
        }
        v140 = v72;
        operator delete(v74);
      }
      v75 = v137;
      if (v137)
      {
        v76 = v138;
        v77 = v137;
        if (v138 != v137)
        {
          do
          {
            v79 = (void *)*--v76;
            v78 = v79;
            *v76 = 0;
            if (v79)
              operator delete[](v78);
          }
          while (v76 != v75);
          v77 = v137;
        }
        v138 = v75;
        operator delete(v77);
      }
      v80 = v133;
      if (v133 == v136)
        return v22;
      goto LABEL_80;
    }
    ++v40;
  }
  while (v18 != v40);
  if (!v126[0]
    || *(_UNKNOWN **)(*(_QWORD *)v126[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_92:
    if (a9)
    {
      if (*(_UNKNOWN **)(*a9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v91 = v128[0];
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v128[0]);
        if (!mlir::OpTrait::util::getBroadcastedType(v91, a9, ElementTypeOrSelf))
        {
          goto LABEL_111;
        }
      }
    }
    if (v125[0]
      && *(_UNKNOWN **)(*(_QWORD *)v125[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v93 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v125);
      if (v94 == 3 && (*v93 == 0x8000000000000000 || *ArgAttrsAttr == 0x8000000000000000 || *ArgAttrsAttr == *v93))
      {
        v95 = v93[1];
        if (v95 == 0x8000000000000000 || (v96 = ArgAttrsAttr[1], v96 == 0x8000000000000000) || v96 == v95)
        {
          v97 = v93[2];
          v22 = 1;
          if (v97 == 0x8000000000000000)
            return v22;
          v98 = ArgAttrsAttr[2];
          if (v98 == 0x8000000000000000 || v98 == v97)
            return v22;
        }
      }
LABEL_111:
      v123[0] = (const void **)v99;
      v124 = 259;
      mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
      v21 = v132;
      goto LABEL_11;
    }
    return 1;
  }
  v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v126);
  v129 = v47;
  if (v47 <= 1)
  {
    v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    v19 = (uint64_t *)&v129;
    goto LABEL_10;
  }
  v81 = v46;
  v82 = 0;
  while (1)
  {
    v83 = v82 >= v47 - 2 ? ArgAttrsAttr[v82 + 3 - v47] : 1;
    v120 = v83;
    if (v83 != 0x8000000000000000)
    {
      v84 = *(_QWORD *)(v46 + 8 * v82);
      if (v84 != 0x8000000000000000 && v84 != v83)
        break;
    }
    if (v47 == ++v82)
      goto LABEL_92;
  }
  v121 = v82;
  v124 = 259;
  mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
  v86 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v132, (uint64_t *)&v121);
  v87 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v86, "] = ");
  v88 = mlir::InFlightDiagnostic::operator<<<long long &>(v87, (uint64_t *)(v81 + 8 * v121));
  v89 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v88, ", expected ");
  v90 = mlir::InFlightDiagnostic::operator<<<long long &>(v89, &v120);
  v21 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v90, ".");
LABEL_11:
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v132);
  return v22;
}

uint64_t mlir::mps::SingleGateRNNOp::verify(mlir::mps::SingleGateRNNOp *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v11)
  {
    v12 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    v9 = *(_QWORD *)this;
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)this + 44);
    v10 = *(_QWORD *)(*(_QWORD *)this + 72);
    v14 = v13 & 0x800000;
  }
  else
  {
    v12 = 0;
    LODWORD(v13) = *(_DWORD *)(v9 + 44);
    v14 = 0x800000;
  }
  v15 = v9 + 80;
  if (!BYTE3(v13))
    v15 = 0;
  v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32 * *(unsigned int *)(v15 + 16) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v16)
  {
    v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    v9 = *(_QWORD *)this;
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)this + 44);
    v14 = v13 & 0x800000;
  }
  else
  {
    v17 = 0;
  }
  v18 = (v13 >> 23) & 1;
  v19 = (_DWORD *)(v9 + 16 * v18 + 64);
  if (!BYTE3(v13))
    v19 = 0;
  v20 = v19[6];
  if (v14)
  {
    v21 = *(_QWORD *)(v9 + 72);
    if (!v20)
      goto LABEL_18;
  }
  else
  {
    v21 = 0;
    if (!v20)
      goto LABEL_18;
  }
  v22 = (v19[5] + v19[4]);
  if (*(_QWORD *)(v21 + 32 * v22 + 24))
  {
    v23 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * v22 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23)
    {
      v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
      v9 = *(_QWORD *)this;
      v13 = *(unsigned int *)(*(_QWORD *)this + 44);
      v18 = (v13 >> 23) & 1;
      v14 = v13 & 0x800000;
    }
    else
    {
      v24 = 0;
      v14 = 1;
    }
    goto LABEL_19;
  }
LABEL_18:
  v24 = 0;
  v23 = 0;
LABEL_19:
  v25 = v9 + 16 * v18 + 64;
  if (BYTE3(v13))
    v26 = (_DWORD *)v25;
  else
    v26 = 0;
  v27 = v26[7];
  if (v14)
  {
    v28 = *(_QWORD *)(v9 + 72);
    if (!v27)
    {
LABEL_29:
      v31 = 0;
      v30 = 0;
    }
  }
  else
  {
    v28 = 0;
    if (!v27)
      goto LABEL_29;
  }
  v29 = (v26[5] + v26[4] + v26[6]);
  if (!*(_QWORD *)(v28 + 32 * v29 + 24))
    goto LABEL_29;
  v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * v29 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30)
  {
    v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
    v9 = *(_QWORD *)this;
  }
  else
  {
    v31 = 0;
  }
}

uint64_t mlir::mps::SingleGateRNNOp::getInputState(mlir::mps::SingleGateRNNOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[6];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[5] + v2[4]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[5] + v2[4]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  mlir::MLIRContext *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE v30[8];
  char v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v40 = a7[1];
    v41 = *((_DWORD *)a7 + 8);
  }
  else
  {
    v41 = 0;
    v16 = 0uLL;
    v40 = 0u;
  }
  v29 = a6;
  v30[0] = 0;
  v31 = 0;
  v32 = v16;
  v33 = v40;
  v34 = v41;
  v35 = a9;
  v36 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(v30, "mps.singlegate_rnn_gradient", 27, Context);
    v31 = 1;
  }
  v37 = a4;
  v38 = a5;
  v18 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::SingleGateRNNGradientOpAdaptor::verify((uint64_t)&v29, v18))
    goto LABEL_21;
  *(_QWORD *)&v40 = a4;
  *((_QWORD *)&v40 + 1) = a5;
  if (!a5)
  {
    if (!mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands"))
      goto LABEL_21;
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  *(_QWORD *)&v40 = a4;
  *((_QWORD *)&v40 + 1) = a5;
  if (a5 < 2)
  {
LABEL_17:
    if (mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands"))
      goto LABEL_18;
LABEL_21:
    v26 = mlir::Float32Type::get(this, v19);
    v25 = mlir::UnrankedTensorType::get(v26);
    goto LABEL_22;
  }
  v22 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v40, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(unsigned int *)(a11 + 8);
  if (v23 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v23) = v22;
  ++*(_DWORD *)(a11 + 8);
LABEL_18:
  if (!*((_QWORD *)&v32 + 1))
    return 1;
  *(_QWORD *)&v40 = 0;
  v24 = mlir::ValueRange::dereference_iterator(v39, 0);
  v25 = v40;
LABEL_22:
  v27 = *(unsigned int *)(a11 + 8);
  if (v27 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v27) = v25;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SingleGateRNNGradientOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
    return 1;
  v12 = "'mps.singlegate_rnn_gradient' op requires attribute 'activation'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::`anonymous namespace'::inferRNNHiddenStateType(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  void *v4;
  uint64_t v6;
  uint64_t Value;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ElementType;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(*(_QWORD *)a3 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = a3;
  }
  else
  {
    v6 = 0;
  }
  v19 = v6;
  if (!v6)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "RNN non-tensor input type");
  if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a4 = v6;
  }
  else
  {
    v20 = v22;
    v21 = 0x400000000;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
    v9 = v21;
    v11 = v10 - 1;
    if (v10 != 1)
    {
      v16 = (uint64_t *)(Value + 8);
      do
      {
        v18 = *v16++;
        v17 = v18;
        if (v9 >= HIDWORD(v21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v9 + 1, 8);
          v9 = v21;
        }
        *((_QWORD *)v20 + v9) = v17;
        v9 = v21 + 1;
        LODWORD(v21) = v21 + 1;
        --v11;
      }
      while (v11);
    }
    v12 = v20;
    v13 = v9;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v19);
    *a4 = mlir::RankedTensorType::get((uint64_t)v12, v13, ElementType, 0);
    if (v20 != v22)
      free(v20);
  }
  return 1;
}

uint64_t mlir::mps::LSTMOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    v2 = 0;
    v37 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v3 = (uint64_t)(*this + 10);
  else
    v3 = 0;
  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * *(unsigned int *)(v3 + 56) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    v36 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  }
  else
  {
    v4 = 0;
    v36 = 0;
  }
  v5 = *this;
  v6 = *((unsigned int *)*this + 11);
  v7 = (v6 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v8 = &(*this)[2 * v7 + 8];
  else
    v8 = 0;
  v9 = *((_DWORD *)v8 + 16);
  v10 = v6 & 0x800000;
  if ((v6 & 0x800000) != 0)
  {
    v11 = v5[9];
    if (!v9)
    {
LABEL_21:
      v14 = 0;
      v13 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v11 = 0;
    if (!v9)
      goto LABEL_21;
  }
  v12 = (*((_DWORD *)v8 + 15) + *((_DWORD *)v8 + 14));
  if (!*(_QWORD *)(v11 + 32 * v12 + 24))
    goto LABEL_21;
  v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[9] + 32 * v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
  {
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v5 = *this;
  v6 = *((unsigned int *)*this + 11);
  v7 = (v6 >> 23) & 1;
  v10 = v6 & 0x800000;
LABEL_22:
  v15 = &v5[2 * v7 + 8];
  if (!BYTE3(v6))
    v15 = 0;
  v16 = *((_DWORD *)v15 + 17);
  if (v10)
  {
    v17 = v5[9];
    if (!v16)
    {
LABEL_32:
      v20 = 0;
      v19 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    v17 = 0;
    if (!v16)
      goto LABEL_32;
  }
  v18 = (*((_DWORD *)v15 + 15) + *((_DWORD *)v15 + 14) + *((_DWORD *)v15 + 16));
  if (!*(_QWORD *)(v17 + 32 * v18 + 24))
    goto LABEL_32;
  v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[9] + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v5 = *this;
  v6 = *((unsigned int *)*this + 11);
  v7 = (v6 >> 23) & 1;
  v10 = v6 & 0x800000;
LABEL_33:
  v21 = &v5[2 * v7 + 8];
  if (!BYTE3(v6))
    v21 = 0;
  v22 = *((_DWORD *)v21 + 18);
  if (v10)
  {
    v23 = v5[9];
    if (!v22)
    {
LABEL_43:
      v26 = 0;
      v25 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v23 = 0;
    if (!v22)
      goto LABEL_43;
  }
  v24 = (*((_DWORD *)v21 + 15) + *((_DWORD *)v21 + 14) + *((_DWORD *)v21 + 16) + *((_DWORD *)v21 + 17));
  if (!*(_QWORD *)(v23 + 32 * v24 + 24))
    goto LABEL_43;
  v25 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[9] + 32 * v24 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v5 = *this;
  v6 = *((unsigned int *)*this + 11);
  v7 = (v6 >> 23) & 1;
  v10 = v6 & 0x800000;
LABEL_44:
  v27 = &v5[2 * v7 + 8];
  if (!BYTE3(v6))
    v27 = 0;
  v28 = *((_DWORD *)v27 + 19);
  if (v10)
  {
    v29 = v5[9];
    if (!v28)
    {
LABEL_54:
      v32 = 0;
      v31 = 0;
      v33 = v37;
      v34 = v36;
               0);
    }
  }
  else
  {
    v29 = 0;
    if (!v28)
      goto LABEL_54;
  }
  v30 = (*((_DWORD *)v27 + 15)
                     + *((_DWORD *)v27 + 14)
                     + *((_DWORD *)v27 + 16)
                     + *((_DWORD *)v27 + 17)
                     + *((_DWORD *)v27 + 18));
  if (!*(_QWORD *)(v29 + 32 * v30 + 24))
    goto LABEL_54;
  v31 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[9] + 32 * v30 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v33 = v37;
  v34 = v36;
  v5 = *this;
           0);
}

uint64_t mlir::mps::LSTMOp::getRecurrentWeight(mlir::mps::LSTMOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 56) + 24);
}

uint64_t mlir::mps::LSTMOp::getInputState(mlir::mps::LSTMOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[16];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[15] + v2[14]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[15] + v2[14]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getInputCell(mlir::mps::LSTMOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[17];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[16] + v2[15] + v2[14]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[16] + v2[15] + v2[14]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getMask(mlir::mps::LSTMOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[18];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getPeephole(mlir::mps::LSTMOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::`anonymous namespace'::verifyLSTM(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;
  uint64_t *ArgAttrsAttr;
  const char *v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  void *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  __int128 v86;
  _QWORD **v87;
  _QWORD **v88;
  void *v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v110;
  _QWORD *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t OperandRange;
  _QWORD *v117;
  uint64_t ElementTypeOrSelf;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  unint64_t v155;
  unint64_t v156;
  BOOL v157;
  unint64_t v158;
  BOOL v159;
  unint64_t v160;
  BOOL v161;
  unint64_t v162;
  BOOL v163;
  int64_t v164;
  int64_t v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  int64_t v169;
  int64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  const void **v174[4];
  __int16 v175;
  _QWORD v176[2];
  _QWORD v177[2];
  _QWORD v178[2];
  _QWORD v179[2];
  _QWORD v180[2];
  _QWORD v181[2];
  _QWORD v182[2];
  _QWORD v183[2];
  unint64_t v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  unsigned int v191;
  unsigned int v192;
  _BYTE v193[96];
  void *v194;
  _QWORD *v195;
  void *__p;
  _QWORD **v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v183[0] = a3;
  v183[1] = a4;
  v182[0] = a5;
  v182[1] = a6;
  v181[0] = a7;
  v181[1] = a8;
  v180[0] = a9;
  v180[1] = a10;
  v179[0] = a13;
  v179[1] = a14;
  v178[0] = a15;
  v178[1] = a16;
  v177[0] = a17;
  v177[1] = a18;
  v176[0] = a19;
  v176[1] = a20;
  if (!a3)
    return 1;
  v21 = 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !a5
    || *(_UNKNOWN **)(*(_QWORD *)a5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return v21;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v183);
  v25 = v24;
  v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
  if (v25 != (const char *)3)
  {
    v174[0] = (const void **)"Invalid input tensor rank: ";
    v175 = 259;
    mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
    if (v187)
    {
      LODWORD(v184) = 5;
      v185 = v25;
      v31 = (uint64_t *)&v184;
      v32 = (char *)v190;
      if (v191 >= v192)
      {
        v152 = v191 + 1;
        if (v190 <= &v184 && (char *)v190 + 24 * v191 > (char *)&v184)
        {
          v164 = (char *)&v184 - (_BYTE *)v190;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v152, 24);
          v32 = (char *)v190;
          v31 = (uint64_t *)((char *)v190 + v164);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v152, 24);
          v31 = (uint64_t *)&v184;
          v32 = (char *)v190;
        }
      }
      v33 = &v32[24 * v191];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = v31[2];
      *(_OWORD *)v33 = v34;
      v35 = ++v191;
      if (v187)
      {
        LODWORD(v184) = 3;
        v185 = ", should be 3.";
        v186 = 14;
        v36 = (uint64_t *)&v184;
        v37 = (char *)v190;
        if (v35 >= v192)
        {
          v153 = v35 + 1;
          v154 = (char *)v190 + 24 * v35 > (char *)&v184;
          if (v190 <= &v184 && v154)
          {
            v165 = (char *)&v184 - (_BYTE *)v190;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v153, 24);
            v37 = (char *)v190;
            v36 = (uint64_t *)((char *)v190 + v165);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v153, 24);
            v36 = (uint64_t *)&v184;
            v37 = (char *)v190;
          }
        }
        v38 = &v37[24 * v191];
        v39 = *(_OWORD *)v36;
        *((_QWORD *)v38 + 2) = v36[2];
        *(_OWORD *)v38 = v39;
        ++v191;
      }
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v187);
    if (v187)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
    if (!v198)
      return v21;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v197;
      v42 = __p;
      if (v197 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v197 = v40;
      operator delete(v42);
    }
    v43 = v194;
    if (v194)
    {
      v44 = v195;
      v45 = v194;
      if (v195 != v194)
      {
        do
        {
          v47 = (void *)*--v44;
          v46 = v47;
          *v44 = 0;
          if (v47)
            operator delete[](v46);
        }
        while (v44 != v43);
        v45 = v194;
      }
      v195 = v43;
      operator delete(v45);
    }
    v62 = v190;
    if (v190 == v193)
      return v21;
LABEL_59:
    free(v62);
    return v21;
  }
  v173 = v27;
  if (v27 <= 1)
  {
    v175 = 259;
    mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
    v28 = (uint64_t *)&v173;
    goto LABEL_8;
  }
  v48 = ArgAttrsAttr[2];
  v49 = v48;
  if ((a2 & 1) == 0)
  {
    v49 = 0x8000000000000000;
    if (v48 != 0x8000000000000000)
    {
      v50 = v48 + 3;
      if (v48 >= 0)
        v50 = ArgAttrsAttr[2];
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) != v48)
      {
        v174[0] = (const void **)"Invalid input last dimension size: ";
        v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        v95 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v187, ArgAttrsAttr + 2);
        v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, ", should be divisible by four.");
        goto LABEL_9;
      }
      v49 = v50 >> 2;
    }
  }
  v51 = 0;
  v52 = v27 - 2;
  do
  {
    if (v51 < v52)
      v53 = 1;
    else
      v53 = v49;
    v54 = 4 * v53;
    if (v53 == 0x8000000000000000)
      v54 = 0x8000000000000000;
    if (v52 == v51)
      v53 = v54;
    v55 = *(_QWORD *)(v26 + 8 * v51);
    if (v53 != 0x8000000000000000 && v55 != 0x8000000000000000 && v55 != v53)
    {
      v175 = 259;
      mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
      if (v187)
      {
        LODWORD(v184) = 3;
        v185 = "matrix of size [";
        v186 = 16;
        v63 = (uint64_t *)&v184;
        v64 = (char *)v190;
        if (v191 >= v192)
        {
          v155 = v191 + 1;
          if (v190 <= &v184 && (char *)v190 + 24 * v191 > (char *)&v184)
          {
            v166 = (char *)&v184 - (_BYTE *)v190;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v155, 24);
            v64 = (char *)v190;
            v63 = (uint64_t *)((char *)v190 + v166);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v155, 24);
            v63 = (uint64_t *)&v184;
            v64 = (char *)v190;
          }
        }
        v65 = &v64[24 * v191];
        v66 = *(_OWORD *)v63;
        *((_QWORD *)v65 + 2) = v63[2];
        *(_OWORD *)v65 = v66;
        v67 = ++v191;
        if (v187)
        {
          LODWORD(v184) = 2;
          v185 = (const char *)(4 * v49);
          v68 = (uint64_t *)&v184;
          v69 = (char *)v190;
          if (v67 >= v192)
          {
            v156 = v67 + 1;
            v157 = (char *)v190 + 24 * v67 > (char *)&v184;
            if (v190 <= &v184 && v157)
            {
              v167 = (char *)&v184 - (_BYTE *)v190;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v156, 24);
              v69 = (char *)v190;
              v68 = (uint64_t *)((char *)v190 + v167);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v156, 24);
              v68 = (uint64_t *)&v184;
              v69 = (char *)v190;
            }
          }
          v70 = &v69[24 * v191];
          v71 = *(_OWORD *)v68;
          *((_QWORD *)v70 + 2) = v68[2];
          *(_OWORD *)v70 = v71;
          v72 = ++v191;
          if (v187)
          {
            LODWORD(v184) = 3;
            v185 = ", ";
            v186 = 2;
            v73 = (uint64_t *)&v184;
            v74 = (char *)v190;
            if (v72 >= v192)
            {
              v158 = v72 + 1;
              v159 = (char *)v190 + 24 * v72 > (char *)&v184;
              if (v190 <= &v184 && v159)
              {
                v168 = (char *)&v184 - (_BYTE *)v190;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v158, 24);
                v74 = (char *)v190;
                v73 = (uint64_t *)((char *)v190 + v168);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v158, 24);
                v73 = (uint64_t *)&v184;
                v74 = (char *)v190;
              }
            }
            v75 = &v74[24 * v191];
            v76 = *(_OWORD *)v73;
            *((_QWORD *)v75 + 2) = v73[2];
            *(_OWORD *)v75 = v76;
            v77 = ++v191;
            if (v187)
            {
              LODWORD(v184) = 2;
              v185 = (const char *)v49;
              v78 = (uint64_t *)&v184;
              v79 = (char *)v190;
              if (v77 >= v192)
              {
                v160 = v77 + 1;
                v161 = (char *)v190 + 24 * v77 > (char *)&v184;
                if (v190 <= &v184 && v161)
                {
                  v169 = (char *)&v184 - (_BYTE *)v190;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v160, 24);
                  v79 = (char *)v190;
                  v78 = (uint64_t *)((char *)v190 + v169);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v160, 24);
                  v78 = (uint64_t *)&v184;
                  v79 = (char *)v190;
                }
              }
              v80 = &v79[24 * v191];
              v81 = *(_OWORD *)v78;
              *((_QWORD *)v80 + 2) = v78[2];
              *(_OWORD *)v80 = v81;
              v82 = ++v191;
              if (v187)
              {
                LODWORD(v184) = 3;
                v185 = "].";
                v186 = 2;
                v83 = (uint64_t *)&v184;
                v84 = (char *)v190;
                if (v82 >= v192)
                {
                  v162 = v82 + 1;
                  v163 = (char *)v190 + 24 * v82 > (char *)&v184;
                  if (v190 <= &v184 && v163)
                  {
                    v170 = (char *)&v184 - (_BYTE *)v190;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v162, 24);
                    v84 = (char *)v190;
                    v83 = (uint64_t *)((char *)v190 + v170);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v162, 24);
                    v83 = (uint64_t *)&v184;
                    v84 = (char *)v190;
                  }
                }
                v85 = &v84[24 * v191];
                v86 = *(_OWORD *)v83;
                *((_QWORD *)v85 + 2) = v83[2];
                *(_OWORD *)v85 = v86;
                ++v191;
              }
            }
          }
        }
      }
      v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v187);
      if (v187)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
      if (!v198)
        return v21;
      v87 = (_QWORD **)__p;
      if (__p)
      {
        v88 = v197;
        v89 = __p;
        if (v197 != __p)
        {
          do
            v88 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v88 - 1);
          while (v88 != v87);
          v89 = __p;
        }
        v197 = v87;
        operator delete(v89);
      }
      v90 = v194;
      if (v194)
      {
        v91 = v195;
        v92 = v194;
        if (v195 != v194)
        {
          do
          {
            v94 = (void *)*--v91;
            v93 = v94;
            *v91 = 0;
            if (v94)
              operator delete[](v93);
          }
          while (v91 != v90);
          v92 = v194;
        }
        v195 = v90;
        operator delete(v92);
      }
      v62 = v190;
      if (v190 == v193)
        return v21;
      goto LABEL_59;
    }
    ++v51;
  }
  while (v27 != v51);
  if (v181[0]
    && *(_UNKNOWN **)(*(_QWORD *)v181[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v181);
    v184 = v59;
    v60 = v59 - 1;
    if (v59 <= 1)
    {
      goto LABEL_112;
    }
    v96 = (uint64_t *)v58;
    v97 = 0;
    while (2)
    {
      if (v97 >= v59 - 2)
      {
        v98 = ArgAttrsAttr[v97 + 3 - v59];
        v171 = v98;
        if (v60 != v97 || (a2 & 1) != 0 || v98 == 0x8000000000000000)
          goto LABEL_99;
      }
      else
      {
        v171 = 1;
        v98 = 1;
        if (v60 != v97 || (a2 & 1) != 0)
          goto LABEL_99;
      }
      v98 /= 4;
      v171 = v98;
LABEL_99:
      v99 = *(_QWORD *)(v58 + 8 * v97);
      if (v98 != 0x8000000000000000 && v99 != 0x8000000000000000 && v99 != v98)
      {
        v172 = v97;
        goto LABEL_204;
      }
      if (v59 == ++v97)
        break;
      continue;
    }
  }
  if (!v180[0]
    || *(_UNKNOWN **)(*(_QWORD *)v180[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_131:
    if (a11 && *(_UNKNOWN **)(*a11 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if ((a2 & 1) != 0)
      {
        v110 = (_QWORD *)v183[0];
        v111 = (_QWORD *)v183[0];
      }
      else
      {
        v187 = &v189;
        v188 = 0x400000000;
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, *ArgAttrsAttr);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, ArgAttrsAttr[1]);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, ArgAttrsAttr[2]);
        v113 = v188;
        v114 = v188 - 1;
        v115 = v187;
        if (*((_QWORD *)v187 + v114) != 0x8000000000000000)
          *((uint64_t *)v187 + v114) /= 4;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v183);
        v117 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v115, v113, OperandRange, 0);
        v111 = v117;
        if (v117)
          mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v117 + 8);
        if (v187 != &v189)
          free(v187);
        v110 = (_QWORD *)v183[0];
      }
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v110);
      if (!mlir::OpTrait::util::getBroadcastedType(v111, a11, ElementTypeOrSelf))
      {
        goto LABEL_203;
      }
    }
    if (v176[0]
      && *(_UNKNOWN **)(*(_QWORD *)v176[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v119 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v176);
      if (v120 != 3 || *v119 != 0x8000000000000000 && *ArgAttrsAttr != 0x8000000000000000 && *ArgAttrsAttr != *v119)
        goto LABEL_157;
      v121 = v119[1];
      if (v121 != 0x8000000000000000)
      {
        v122 = ArgAttrsAttr[1];
        if (v122 != 0x8000000000000000 && v122 != v121)
          goto LABEL_157;
      }
      v123 = ArgAttrsAttr[2];
      if (v123 != 0x8000000000000000)
        v123 *= 4;
      v124 = v119[2];
      if (v124 != 0x8000000000000000 && v123 != 0x8000000000000000 && v123 != v124)
      {
LABEL_157:
LABEL_203:
        v174[0] = (const void **)v125;
        v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        v30 = (uint64_t)&v187;
        goto LABEL_9;
      }
    }
    if (v178[0]
      && *(_UNKNOWN **)(*(_QWORD *)v178[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if ((v126 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v178), v127 != 3)
        || *v126 != 0x8000000000000000 && *ArgAttrsAttr != 0x8000000000000000 && *ArgAttrsAttr != *v126
        || (v128 = v126[1], v128 != 0x8000000000000000)
        && (v129 = ArgAttrsAttr[1], v129 != 0x8000000000000000)
        && v129 != v128
        || (v130 = v126[2], v130 != 0x8000000000000000)
        && (v131 = ArgAttrsAttr[2], v131 != 0x8000000000000000)
        && v131 != v130)
      {
        goto LABEL_203;
      }
    }
    if (v179[0]
      && *(_UNKNOWN **)(*(_QWORD *)v179[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v132 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v179);
      if (v133 != 1)
      {
        v149 = v133;
        v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        v184 = v149;
        v150 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v187, (uint64_t *)&v184);
        v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v150, ", should be 1.");
        goto LABEL_9;
      }
      v134 = v49 == 0x8000000000000000 ? 0x8000000000000000 : 4 * v49;
      v184 = v134;
      if (v134 != 0x8000000000000000 && *v132 != 0x8000000000000000 && *v132 != v134)
      {
        v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        v135 = (uint64_t)&v187;
        v136 = (uint64_t *)&v184;
        goto LABEL_205;
      }
    }
    if (v177[0]
      && *(_UNKNOWN **)(*(_QWORD *)v177[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v137 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v177);
      v184 = v138;
      if ((v138 & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        v151 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v187, (uint64_t *)&v184);
        v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v151, ", should be 2 or 3.");
        goto LABEL_9;
      }
      v96 = v137;
      v139 = 0;
      v140 = &ArgAttrsAttr[-v138 + 3];
      while (1)
      {
        if (v139 >= v138 - 2)
          v141 = v140[v139];
        else
          v141 = 1;
        v171 = v141;
        if (!v139 && v138 == 3)
        {
          v141 = *v137;
          if (*v137 != 1)
            v141 = *v140;
          v171 = v141;
        }
        if (v141 != 0x8000000000000000)
        {
          v142 = v137[v139];
          if (v142 != 0x8000000000000000 && v142 != v141)
            break;
        }
        if (v138 == ++v139)
          return 1;
      }
      v172 = v139;
LABEL_204:
      v174[0] = (const void **)v112;
      v175 = 259;
      mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
      v145 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v187, (uint64_t *)&v172);
      v146 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v145, "] = ");
      v147 = mlir::InFlightDiagnostic::operator<<<long long &>(v146, &v96[v172]);
      v135 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v147, ", expected ");
      v136 = &v171;
LABEL_205:
      v148 = mlir::InFlightDiagnostic::operator<<<long long &>(v135, v136);
      v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v148, ".");
      goto LABEL_9;
    }
    return 1;
  }
  v102 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v180);
  v184 = v103;
  v104 = v103 - 1;
  if (v103 > 1)
  {
    v96 = (uint64_t *)v102;
    v105 = 0;
    while (1)
    {
      if (v105 >= v103 - 2)
      {
        v106 = ArgAttrsAttr[v105 + 3 - v103];
        v171 = v106;
        if (v104 != v105 || (a2 & 1) != 0 || v106 == 0x8000000000000000)
          goto LABEL_122;
      }
      else
      {
        v171 = 1;
        v106 = 1;
        if (v104 != v105 || (a2 & 1) != 0)
          goto LABEL_122;
      }
      v106 /= 4;
      v171 = v106;
LABEL_122:
      v107 = *(_QWORD *)(v102 + 8 * v105);
      if (v106 != 0x8000000000000000 && v107 != 0x8000000000000000 && v107 != v106)
      {
        v172 = v105;
        goto LABEL_204;
      }
      if (v103 == ++v105)
        goto LABEL_131;
    }
  }
LABEL_112:
  v174[0] = (const void **)v61;
  v175 = 259;
  mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
  v28 = (uint64_t *)&v184;
LABEL_8:
  v29 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v187, v28);
  v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v29, ", should be 2 or greater.");
LABEL_9:
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v30);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v187);
  return v21;
}

uint64_t mlir::mps::LSTMGradientOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    v2 = 0;
    v55 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v3 = (uint64_t)(*this + 10);
  else
    v3 = 0;
  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * *(unsigned int *)(v3 + 48) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  }
  else
  {
    v4 = 0;
    v54 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v5 = (uint64_t)(*this + 10);
  else
    v5 = 0;
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9]
                                        + 32 * (*(_DWORD *)(v5 + 52) + *(_DWORD *)(v5 + 48))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8))
  {
    v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  }
  else
  {
    v6 = 0;
    v53 = 0;
  }
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v7 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v7 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9]
                                        + 32
                                        * (*((_DWORD *)v7 + 13)
                                                       + *((_DWORD *)v7 + 12)
                                                       + *((_DWORD *)v7 + 14))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    v8 = 0;
    v52 = 0;
  }
  v9 = *this;
  v10 = *((unsigned int *)*this + 11);
  v11 = (v10 >> 23) & 1;
  v12 = &(*this)[2 * v11 + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v12 = 0;
  v13 = *((_DWORD *)v12 + 12);
  v14 = *((_DWORD *)v12 + 13);
  v15 = *((_DWORD *)v12 + 14);
  v16 = *((_DWORD *)v12 + 15);
  v17 = *((_DWORD *)v12 + 16);
  v18 = v10 & 0x800000;
  if ((v10 & 0x800000) != 0)
  {
    v19 = v9[9];
    if (!v17)
    {
LABEL_32:
      v51 = 0;
      v21 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    v19 = 0;
    if (!v17)
      goto LABEL_32;
  }
  v20 = (v14 + v13 + v15 + v16);
  if (!*(_QWORD *)(v19 + 32 * v20 + 24))
    goto LABEL_32;
  v21 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[9] + 32 * v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
  }
  else
  {
    v21 = 0;
    v51 = 0;
  }
  v9 = *this;
  v10 = *((unsigned int *)*this + 11);
  v11 = (v10 >> 23) & 1;
  v18 = v10 & 0x800000;
LABEL_33:
  v22 = &v9[2 * v11 + 8];
  if (!BYTE3(v10))
    v22 = 0;
  v23 = *((_DWORD *)v22 + 17);
  if (v18)
  {
    v24 = v9[9];
    if (!v23)
    {
LABEL_43:
      v50 = 0;
      v26 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v24 = 0;
    if (!v23)
      goto LABEL_43;
  }
  v25 = (*((_DWORD *)v22 + 13)
                     + *((_DWORD *)v22 + 12)
                     + *((_DWORD *)v22 + 14)
                     + *((_DWORD *)v22 + 15)
                     + *((_DWORD *)v22 + 16));
  if (!*(_QWORD *)(v24 + 32 * v25 + 24))
    goto LABEL_43;
  v26 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[9] + 32 * v25 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
  {
    v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
  }
  else
  {
    v26 = 0;
    v50 = 0;
  }
  v9 = *this;
  v10 = *((unsigned int *)*this + 11);
  v11 = (v10 >> 23) & 1;
  v18 = v10 & 0x800000;
LABEL_44:
  v27 = &v9[2 * v11 + 8];
  if (!BYTE3(v10))
    v27 = 0;
  v28 = *((_DWORD *)v27 + 18);
  if (v18)
  {
    v29 = v9[9];
    v56 = (uint64_t)v21;
    v57 = (uint64_t)v4;
    if (!v28)
    {
LABEL_54:
      v32 = 0;
      v31 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    v29 = 0;
    v56 = (uint64_t)v21;
    v57 = (uint64_t)v4;
    if (!v28)
      goto LABEL_54;
  }
  v30 = (*((_DWORD *)v27 + 13)
                     + *((_DWORD *)v27 + 12)
                     + *((_DWORD *)v27 + 14)
                     + *((_DWORD *)v27 + 15)
                     + *((_DWORD *)v27 + 16)
                     + *((_DWORD *)v27 + 17));
  if (!*(_QWORD *)(v29 + 32 * v30 + 24))
    goto LABEL_54;
  v31 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[9] + 32 * v30 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v9 = *this;
  v10 = *((unsigned int *)*this + 11);
  v11 = (v10 >> 23) & 1;
  v18 = v10 & 0x800000;
LABEL_55:
  v33 = &v9[2 * v11 + 8];
  if (!BYTE3(v10))
    v33 = 0;
  v34 = *((_DWORD *)v33 + 19);
  if (v18)
  {
    v35 = v9[9];
    if (!v34)
    {
LABEL_65:
      v38 = 0;
      v37 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    v35 = 0;
    if (!v34)
      goto LABEL_65;
  }
  v36 = (*((_DWORD *)v33 + 13)
                     + *((_DWORD *)v33 + 12)
                     + *((_DWORD *)v33 + 14)
                     + *((_DWORD *)v33 + 15)
                     + *((_DWORD *)v33 + 16)
                     + *((_DWORD *)v33 + 17)
                     + *((_DWORD *)v33 + 18));
  if (!*(_QWORD *)(v35 + 32 * v36 + 24))
    goto LABEL_65;
  v37 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[9] + 32 * v36 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8))
  {
    v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v9 = *this;
  v10 = *((unsigned int *)*this + 11);
  v11 = (v10 >> 23) & 1;
  v18 = v10 & 0x800000;
LABEL_66:
  v39 = &v9[2 * v11 + 8];
  if (!BYTE3(v10))
    v39 = 0;
  v40 = *((_DWORD *)v39 + 21);
  if (v18)
  {
    v41 = v9[9];
    if (!v40)
    {
LABEL_76:
      v44 = 0;
      v43 = 0;
      v46 = v54;
      v45 = v55;
      v48 = v52;
      v47 = v53;
               v47);
    }
  }
  else
  {
    v41 = 0;
    if (!v40)
      goto LABEL_76;
  }
  v42 = (*((_DWORD *)v39 + 13)
                     + *((_DWORD *)v39 + 12)
                     + *((_DWORD *)v39 + 14)
                     + *((_DWORD *)v39 + 15)
                     + *((_DWORD *)v39 + 16)
                     + *((_DWORD *)v39 + 17)
                     + *((_DWORD *)v39 + 18)
                     + *((_DWORD *)v39 + 19)
                     + *((_DWORD *)v39 + 20));
  if (!*(_QWORD *)(v41 + 32 * v42 + 24))
    goto LABEL_76;
  v43 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9[9] + 32 * v42 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v43 + 8))
  {
    v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v43 + 8);
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  v46 = v54;
  v45 = v55;
  v48 = v52;
  v47 = v53;
  v9 = *this;
           v47);
}

uint64_t mlir::mps::LSTMGradientOp::getRecurrentWeight(mlir::mps::LSTMGradientOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * *(unsigned int *)(v1 + 48) + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getTrainingState(mlir::mps::LSTMGradientOp *this)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)this + 47))
    v1 = *(_QWORD *)this + 80;
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                   + 32 * (*(_DWORD *)(v1 + 52) + *(_DWORD *)(v1 + 48))
                   + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getOutputCellFwd(mlir::mps::LSTMGradientOp *this)
{
  _DWORD *v1;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = (_DWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  else
    v1 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v1[14] + v1[13] + v1[12]) + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getInputState(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[16];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getInputCell(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[17];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getMask(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[18];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getPeephole(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getCellGradient(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4
                       + 32
                       * (v2[20] + v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12])
                       + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4
                       + 32
                       * (v2[20] + v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12])
                       + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t Context;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Value;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ElementType;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[7];
  uint64_t v43;
  _BYTE v44[8];
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];

  v55[2] = *MEMORY[0x1E0C80C00];
  v55[0] = a4;
  v55[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
    *(_OWORD *)v42 = *(__int128 *)((char *)a7 + 56);
    *(_OWORD *)((char *)&v42[1] + 4) = *(__int128 *)((char *)a7 + 68);
  }
  else
  {
    v19 = 0;
    v16 = 0uLL;
    memset(v42, 0, 28);
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v43 = a6;
  v44[0] = 0;
  v45 = 0;
  v46 = v16;
  v47 = v17;
  v48 = v18;
  v49 = v19;
  v50[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)((char *)&v42[1] + 4);
  v51 = a9;
  v52 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v43);
    if (v45)
      v45 = 0;
    mlir::OperationName::OperationName(v44, "mps.lstm", 8, Context);
    v45 = 1;
  }
  v53 = a4;
  v54 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v21 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v55, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
    v22 = *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       && *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    v23 = *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       && *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
        ? 0
        : v21;
    v41 = v23;
    if (v22)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
    if (*(_UNKNOWN **)(*(_QWORD *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
LABEL_28:
      v38 = *(unsigned int *)(a11 + 8);
      if (v38 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
        LODWORD(v38) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v38) = v21;
      v39 = *(_DWORD *)(a11 + 12);
      v40 = (*(_DWORD *)(a11 + 8) + 1);
      *(_DWORD *)(a11 + 8) = v40;
      if (v40 >= v39)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
        LODWORD(v40) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v40) = v21;
      v27 = (*(_DWORD *)(a11 + 8) + 1);
      *(_DWORD *)(a11 + 8) = v27;
      if (!*((_QWORD *)&v48 + 1))
        return 1;
      v26 = v41;
      if (v27 >= *(_DWORD *)(a11 + 12))
        goto LABEL_34;
      goto LABEL_16;
    }
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    v42[0] = &v42[2];
    v42[1] = (void *)0x400000000;
    if (v29)
    {
      v30 = (uint64_t *)Value;
      LODWORD(v31) = 0;
      v32 = 8 * v29;
      do
      {
        v33 = *v30;
        if (v31 >= HIDWORD(v42[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, &v42[2], v31 + 1, 8);
          LODWORD(v31) = v42[1];
        }
        *((_QWORD *)v42[0] + v31) = v33;
        v31 = ++LODWORD(v42[1]);
        ++v30;
        v32 -= 8;
      }
      while (v32);
      v34 = (void **)v42[0];
      v35 = v31 - 1;
      v36 = *((_QWORD *)v42[0] + v31 - 1);
      if (v36 == 0x8000000000000000)
        goto LABEL_26;
    }
    else
    {
      v31 = 0;
      v34 = &v42[2];
      v35 = -1;
      v36 = (uint64_t)v42[1];
    }
    v34[v35] = (void *)(v36 / 4);
LABEL_26:
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v41);
    v21 = mlir::RankedTensorType::get((uint64_t)v34, v31, ElementType, 0);
    if (v42[0] != &v42[2])
      free(v42[0]);
    goto LABEL_28;
  }
  v25 = mlir::Float32Type::get(this, a2);
  v26 = mlir::UnrankedTensorType::get(v25);
  v27 = *(unsigned int *)(a11 + 8);
  if (v27 >= *(_DWORD *)(a11 + 12))
  {
LABEL_34:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a11 + 8);
  }
LABEL_16:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v27) = v26;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::mps::LSTMOp::downgradeToVersion(uint64_t **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  int v6;
  int v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v18[4];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  const void **v22;
  __int16 v23;
  _QWORD v24[2];
  int v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v24[0] = &unk_1E0E4B858;
  v24[1] = 0x100000001;
  v25 = 0;
  if (HIBYTE(*((_DWORD *)v4 + 11)))
    v5 = (unint64_t)&v4[2 * (((unint64_t)*((unsigned int *)v4 + 11) >> 23) & 1) + 8];
  else
    v5 = 0;
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 8);
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 && (v7 != 1 || *(_DWORD *)(a2 + 12)) || v6 != 3)
  {
    v16 = *((unsigned int *)v4 + 9);
    v17 = v4 - 2;
    if (!(_DWORD)v16)
      v17 = 0;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v16;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v18[0] = "failed to downgrade: requested target version is {0}, but IOFZ gate layout is only supported from version {1}";
    v18[1] = 109;
    v18[2] = v21;
    v18[3] = 2;
    v19[0] = &unk_1E0E23F50;
    v19[1] = a2;
    v20[0] = &unk_1E0E23FE0;
    v20[1] = v24;
    v21[0] = v19;
    v21[1] = v20;
    v23 = 263;
    v22 = (const void **)v18;
    mlir::OpState::emitOpError(a1, &v22, (uint64_t)v26);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v32;
        v10 = __p;
        if (v32 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v32 = v8;
        operator delete(v10);
      }
      v11 = v29;
      if (v29)
      {
        v12 = v30;
        v13 = v29;
        if (v30 != v29)
        {
          do
          {
            v15 = (void *)*--v12;
            v14 = v15;
            *v12 = 0;
            if (v15)
              operator delete[](v14);
          }
          while (v12 != v11);
          v13 = v29;
        }
        v30 = v11;
        operator delete(v13);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
}

uint64_t mlir::mps::LSTMOp::getGateLayout(mlir::mps::LSTMOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(unsigned int *)(*(_QWORD *)(v1 + 16) + 8);
}

uint64_t mlir::mps::LSTMGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t Value;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ElementType;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t Context;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55[8];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int32x4_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  int32x4_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v13 = a10;
  v69 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v65 = a4;
  *((_QWORD *)&v65 + 1) = a5;
  if (!a5)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v16 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v65, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v16)
  {
    v53 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  }
  v17 = *(_QWORD *)(*(_QWORD *)v16 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(_QWORD *)(*(_QWORD *)v16 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (*(_QWORD *)(*(_QWORD *)v16 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && *(_QWORD *)(*(_QWORD *)v16 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v18 = 0;
  }
  else
  {
    v18 = v16;
  }
  v53 = v18;
  if (v17)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  if (*(_UNKNOWN **)(*(_QWORD *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_21;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
  *(_QWORD *)&v54 = v55;
  *((_QWORD *)&v54 + 1) = 0x400000000;
  if (v20)
  {
    v21 = (uint64_t *)Value;
    v22 = 0;
    v23 = 8 * v20;
    do
    {
      v24 = *v21;
      if (v22 >= HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v55, v22 + 1, 8);
        v22 = DWORD2(v54);
      }
      *(_QWORD *)(v54 + 8 * v22) = v24;
      v22 = ++DWORD2(v54);
      ++v21;
      v23 -= 8;
    }
    while (v23);
    v26 = (char *)v54;
    v13 = a10;
    v27 = v22;
    v28 = v22 - 1;
    v29 = *(_QWORD *)(v54 + 8 * v28);
    if (v29 == 0x8000000000000000)
      goto LABEL_19;
  }
  else
  {
    v26 = v55;
    v27 = 0;
    v28 = -1;
    v29 = *((_QWORD *)&v54 + 1);
  }
  *(_QWORD *)&v26[8 * v28] = 4 * v29;
LABEL_19:
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v53);
  v16 = mlir::RankedTensorType::get((uint64_t)v26, v27, ElementType, 0);
  if ((char *)v54 != v55)
    free((void *)v54);
LABEL_21:
  v31 = *(unsigned int *)(a11 + 8);
  if (v31 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v31) = v16;
  ++*(_DWORD *)(a11 + 8);
  v54 = v65;
  if (*((_QWORD *)&v65 + 1) < 2uLL)
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands"))
      return 0;
  }
  else
  {
    v32 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v54, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
    ++*(_DWORD *)(a11 + 8);
  }
  v52 = 0;
    return 0;
  v34 = v52;
  v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
  v36 = *(_DWORD *)(a11 + 12);
  v37 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v37;
  if (v37 >= v36)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v34;
    if (a7)
      goto LABEL_33;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v34;
    ++*(_DWORD *)(a11 + 8);
    if (a7)
    {
LABEL_33:
      v38 = *a7;
      v39 = a7[1];
      v40 = a7[2];
      v41 = a7[4];
      v66 = (int32x4_t)a7[3];
      v67 = v41;
      v68 = *((_QWORD *)a7 + 10);
      goto LABEL_38;
    }
  }
  v68 = 0;
  v38 = 0uLL;
  v66 = 0u;
  v67 = 0u;
  v39 = 0uLL;
  v40 = 0uLL;
LABEL_38:
  *(_QWORD *)&v54 = a6;
  BYTE8(v54) = 0;
  v55[0] = 0;
  v56 = v38;
  v57 = v39;
  v58 = v40;
  v42 = v65;
  v59 = v66;
  v60 = v67;
  v61 = v68;
  v62 = a9;
  v63 = v13;
  if (a6)
  {
    v51 = v65;
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v54);
    if (v55[0])
      v55[0] = 0;
    mlir::OperationName::OperationName((char *)&v54 + 8, "mps.lstm_gradient", 17, Context);
    v55[0] = 1;
    v42 = v51;
  }
  v64 = v42;
  v44 = vaddvq_s32(v59) + v60;
  v45 = HIDWORD(v60);
  v66.i64[0] = v42;
  v46 = v44 + DWORD1(v60) + DWORD2(v60);
  v66.i64[1] = v46;
  if (v46)
  {
    v47 = mlir::ValueRange::offset_base(&v66, (v44 + DWORD1(v60) + DWORD2(v60)));
    if (v66.i64[1] == v45 + v46)
      return 1;
LABEL_46:
    v66 = (int32x4_t)v47;
    v48 = mlir::ValueRange::dereference_iterator(&v66, 0);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
      v50 = *(unsigned int *)(a11 + 8);
      if (v50 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
        LODWORD(v50) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
      ++*(_DWORD *)(a11 + 8);
    }
    return 1;
  }
  v47 = v42;
  if (HIDWORD(v60))
    goto LABEL_46;
  return 1;
}

uint64_t mlir::mps::GRUOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v4 = (uint64_t)(*this + 10);
  else
    v4 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * *(unsigned int *)(v4 + 56) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8))
  {
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = *this;
  v9 = *((unsigned int *)*this + 11);
  v10 = (v9 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v11 = &(*this)[2 * v10 + 8];
  else
    v11 = 0;
  v12 = *((_DWORD *)v11 + 16);
  v13 = v9 & 0x800000;
  if ((v9 & 0x800000) != 0)
  {
    v14 = v8[9];
    if (!v12)
    {
LABEL_21:
      v17 = 0;
      v16 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v14 = 0;
    if (!v12)
      goto LABEL_21;
  }
  v15 = (*((_DWORD *)v11 + 15) + *((_DWORD *)v11 + 14));
  if (!*(_QWORD *)(v14 + 32 * v15 + 24))
    goto LABEL_21;
  v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[9] + 32 * v15 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v8 = *this;
  v9 = *((unsigned int *)*this + 11);
  v10 = (v9 >> 23) & 1;
  v13 = v9 & 0x800000;
LABEL_22:
  v18 = &v8[2 * v10 + 8];
  if (!BYTE3(v9))
    v18 = 0;
  v19 = *((_DWORD *)v18 + 17);
  if (v13)
  {
    v20 = v8[9];
    if (!v19)
    {
LABEL_32:
      v23 = 0;
      v22 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    v20 = 0;
    if (!v19)
      goto LABEL_32;
  }
  v21 = (*((_DWORD *)v18 + 15) + *((_DWORD *)v18 + 14) + *((_DWORD *)v18 + 16));
  if (!*(_QWORD *)(v20 + 32 * v21 + 24))
    goto LABEL_32;
  v22 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[9] + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
  {
    v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v8 = *this;
  v9 = *((unsigned int *)*this + 11);
  v10 = (v9 >> 23) & 1;
  v13 = v9 & 0x800000;
LABEL_33:
  v24 = &v8[2 * v10 + 8];
  if (!BYTE3(v9))
    v24 = 0;
  v25 = *((_DWORD *)v24 + 18);
  if (v13)
  {
    v26 = v8[9];
    if (v25)
      goto LABEL_37;
LABEL_43:
    v28 = 0;
    goto LABEL_44;
  }
  v26 = 0;
  if (!v25)
    goto LABEL_43;
LABEL_37:
  v27 = (*((_DWORD *)v24 + 15) + *((_DWORD *)v24 + 14) + *((_DWORD *)v24 + 16) + *((_DWORD *)v24 + 17));
  v28 = *(_QWORD *)(v26 + 32 * v27 + 24);
  if (v28)
  {
    v29 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8[9] + 32 * v27 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8))
    {
      v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8);
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    v8 = *this;
    v9 = *((unsigned int *)*this + 11);
    v10 = (v9 >> 23) & 1;
    goto LABEL_45;
  }
LABEL_44:
  v29 = 0;
LABEL_45:
  v30 = (uint64_t)&v8[2 * v10 + 8];
  if (!BYTE3(v9))
    v30 = 0;
}

uint64_t mlir::mps::`anonymous namespace'::verifyGRU(uint64_t *a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t ArgAttrsAttr;
  const char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  __int128 v80;
  _QWORD **v81;
  _QWORD **v82;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t OperandRange;
  _QWORD *v99;
  uint64_t ElementTypeOrSelf;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  const char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  unint64_t v124;
  unint64_t v125;
  BOOL v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  BOOL v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  int64_t v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  const void **v143[4];
  __int16 v144;
  _QWORD v145[2];
  _QWORD v146[2];
  _QWORD v147[2];
  _QWORD v148[2];
  _QWORD v149[2];
  unint64_t v150;
  const char *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  _BYTE v158[96];
  void *v159;
  _QWORD *v160;
  void *__p;
  _QWORD **v162;
  char v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v149[0] = a4;
  v149[1] = a5;
  v148[0] = a6;
  v148[1] = a7;
  v147[0] = a9;
  v147[1] = a10;
  v146[0] = a13;
  v146[1] = a14;
  v145[0] = a15;
  v145[1] = a16;
  if (!a4)
    return 1;
  v16 = 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !a6
    || *(_UNKNOWN **)(*(_QWORD *)a6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return v16;
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v149);
  v22 = v21;
  v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v148);
  if (v22 != (const char *)3)
  {
    v143[0] = (const void **)"Invalid input tensor rank: ";
    v144 = 259;
    mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
    if (v153)
    {
      LODWORD(v150) = 5;
      v151 = v22;
      v28 = (uint64_t *)&v150;
      v29 = (char *)v156;
      if (v157 >= HIDWORD(v157))
      {
        v121 = v157 + 1;
        if (v156 <= &v150 && (char *)v156 + 24 * v157 > (char *)&v150)
        {
          v133 = (char *)&v150 - (_BYTE *)v156;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v121, 24);
          v29 = (char *)v156;
          v28 = (uint64_t *)((char *)v156 + v133);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v121, 24);
          v28 = (uint64_t *)&v150;
          v29 = (char *)v156;
        }
      }
      v30 = &v29[24 * v157];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = v28[2];
      *(_OWORD *)v30 = v31;
      v32 = (v157 + 1);
      LODWORD(v157) = v157 + 1;
      if (v153)
      {
        LODWORD(v150) = 3;
        v151 = ", should be 3.";
        v152 = 14;
        v33 = (uint64_t *)&v150;
        v34 = (char *)v156;
        if (v32 >= HIDWORD(v157))
        {
          v122 = v32 + 1;
          v123 = (char *)v156 + 24 * v32 > (char *)&v150;
          if (v156 <= &v150 && v123)
          {
            v134 = (char *)&v150 - (_BYTE *)v156;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v122, 24);
            v34 = (char *)v156;
            v33 = (uint64_t *)((char *)v156 + v134);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v122, 24);
            v33 = (uint64_t *)&v150;
            v34 = (char *)v156;
          }
        }
        v35 = &v34[24 * v157];
        v36 = *(_OWORD *)v33;
        *((_QWORD *)v35 + 2) = v33[2];
        *(_OWORD *)v35 = v36;
        LODWORD(v157) = v157 + 1;
      }
    }
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v153);
    if (v153)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v153);
    if (!v163)
      return v16;
    v37 = (_QWORD **)__p;
    if (__p)
    {
      v38 = v162;
      v39 = __p;
      if (v162 != __p)
      {
        do
          v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        v39 = __p;
      }
      v162 = v37;
      operator delete(v39);
    }
    v40 = v159;
    if (v159)
    {
      v41 = v160;
      v42 = v159;
      if (v160 != v159)
      {
        do
        {
          v44 = (void *)*--v41;
          v43 = v44;
          *v41 = 0;
          if (v44)
            operator delete[](v43);
        }
        while (v41 != v40);
        v42 = v159;
      }
      v160 = v40;
      operator delete(v42);
    }
    v56 = v156;
    if (v156 == v158)
      return v16;
LABEL_54:
    free(v56);
    return v16;
  }
  v142 = v24;
  if (v24 <= 1)
  {
    v144 = 259;
    mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
    v25 = (uint64_t *)&v142;
    goto LABEL_8;
  }
  v45 = *(_QWORD *)(ArgAttrsAttr + 16);
  v46 = v45;
  if ((a2 & 1) == 0)
  {
    v46 = 0x8000000000000000;
    if (v45 != 0x8000000000000000)
    {
      v46 = v45 / 3;
      if (3 * (v45 / 3) != v45)
      {
        v143[0] = (const void **)"Invalid input last dimension size: ";
        v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        v89 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v153, (uint64_t *)(ArgAttrsAttr + 16));
        v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v89, ", should be divisible by three.");
        goto LABEL_9;
      }
    }
  }
  v47 = 0;
  v48 = v24 - 2;
  do
  {
    if (v47 < v48)
      v49 = 1;
    else
      v49 = v46;
    if (v48 == v47)
      v49 *= 3;
    v50 = *(_QWORD *)(v23 + 8 * v47);
    if (v49 != 0x8000000000000000 && v50 != 0x8000000000000000 && v50 != v49)
    {
      v144 = 259;
      mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
      if (v153)
      {
        LODWORD(v150) = 3;
        v151 = "matrix of size [";
        v152 = 16;
        v57 = (uint64_t *)&v150;
        v58 = (char *)v156;
        if (v157 >= HIDWORD(v157))
        {
          v124 = v157 + 1;
          if (v156 <= &v150 && (char *)v156 + 24 * v157 > (char *)&v150)
          {
            v135 = (char *)&v150 - (_BYTE *)v156;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v124, 24);
            v58 = (char *)v156;
            v57 = (uint64_t *)((char *)v156 + v135);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v124, 24);
            v57 = (uint64_t *)&v150;
            v58 = (char *)v156;
          }
        }
        v59 = &v58[24 * v157];
        v60 = *(_OWORD *)v57;
        *((_QWORD *)v59 + 2) = v57[2];
        *(_OWORD *)v59 = v60;
        v61 = (v157 + 1);
        LODWORD(v157) = v157 + 1;
        if (v153)
        {
          LODWORD(v150) = 2;
          v151 = (const char *)(3 * v46);
          v62 = (uint64_t *)&v150;
          v63 = (char *)v156;
          if (v61 >= HIDWORD(v157))
          {
            v125 = v61 + 1;
            v126 = (char *)v156 + 24 * v61 > (char *)&v150;
            if (v156 <= &v150 && v126)
            {
              v136 = (char *)&v150 - (_BYTE *)v156;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v125, 24);
              v63 = (char *)v156;
              v62 = (uint64_t *)((char *)v156 + v136);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v125, 24);
              v62 = (uint64_t *)&v150;
              v63 = (char *)v156;
            }
          }
          v64 = &v63[24 * v157];
          v65 = *(_OWORD *)v62;
          *((_QWORD *)v64 + 2) = v62[2];
          *(_OWORD *)v64 = v65;
          v66 = (v157 + 1);
          LODWORD(v157) = v157 + 1;
          if (v153)
          {
            LODWORD(v150) = 3;
            v151 = ", ";
            v152 = 2;
            v67 = (uint64_t *)&v150;
            v68 = (char *)v156;
            if (v66 >= HIDWORD(v157))
            {
              v127 = v66 + 1;
              v128 = (char *)v156 + 24 * v66 > (char *)&v150;
              if (v156 <= &v150 && v128)
              {
                v137 = (char *)&v150 - (_BYTE *)v156;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v127, 24);
                v68 = (char *)v156;
                v67 = (uint64_t *)((char *)v156 + v137);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v127, 24);
                v67 = (uint64_t *)&v150;
                v68 = (char *)v156;
              }
            }
            v69 = &v68[24 * v157];
            v70 = *(_OWORD *)v67;
            *((_QWORD *)v69 + 2) = v67[2];
            *(_OWORD *)v69 = v70;
            v71 = (v157 + 1);
            LODWORD(v157) = v157 + 1;
            if (v153)
            {
              LODWORD(v150) = 2;
              v151 = (const char *)v46;
              v72 = (uint64_t *)&v150;
              v73 = (char *)v156;
              if (v71 >= HIDWORD(v157))
              {
                v129 = v71 + 1;
                v130 = (char *)v156 + 24 * v71 > (char *)&v150;
                if (v156 <= &v150 && v130)
                {
                  v138 = (char *)&v150 - (_BYTE *)v156;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v129, 24);
                  v73 = (char *)v156;
                  v72 = (uint64_t *)((char *)v156 + v138);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v129, 24);
                  v72 = (uint64_t *)&v150;
                  v73 = (char *)v156;
                }
              }
              v74 = &v73[24 * v157];
              v75 = *(_OWORD *)v72;
              *((_QWORD *)v74 + 2) = v72[2];
              *(_OWORD *)v74 = v75;
              v76 = (v157 + 1);
              LODWORD(v157) = v157 + 1;
              if (v153)
              {
                LODWORD(v150) = 3;
                v151 = "].";
                v152 = 2;
                v77 = (uint64_t *)&v150;
                v78 = (char *)v156;
                if (v76 >= HIDWORD(v157))
                {
                  v131 = v76 + 1;
                  v132 = (char *)v156 + 24 * v76 > (char *)&v150;
                  if (v156 <= &v150 && v132)
                  {
                    v139 = (char *)&v150 - (_BYTE *)v156;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v131, 24);
                    v78 = (char *)v156;
                    v77 = (uint64_t *)((char *)v156 + v139);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v131, 24);
                    v77 = (uint64_t *)&v150;
                    v78 = (char *)v156;
                  }
                }
                v79 = &v78[24 * v157];
                v80 = *(_OWORD *)v77;
                *((_QWORD *)v79 + 2) = v77[2];
                *(_OWORD *)v79 = v80;
                LODWORD(v157) = v157 + 1;
              }
            }
          }
        }
      }
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v153);
      if (v153)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v153);
      if (!v163)
        return v16;
      v81 = (_QWORD **)__p;
      if (__p)
      {
        v82 = v162;
        v83 = __p;
        if (v162 != __p)
        {
          do
            v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
          while (v82 != v81);
          v83 = __p;
        }
        v162 = v81;
        operator delete(v83);
      }
      v84 = v159;
      if (v159)
      {
        v85 = v160;
        v86 = v159;
        if (v160 != v159)
        {
          do
          {
            v88 = (void *)*--v85;
            v87 = v88;
            *v85 = 0;
            if (v88)
              operator delete[](v87);
          }
          while (v85 != v84);
          v86 = v159;
        }
        v160 = v84;
        operator delete(v86);
      }
      v56 = v156;
      if (v156 == v158)
        return v16;
      goto LABEL_54;
    }
    ++v47;
  }
  while (v24 != v47);
  if (!v147[0]
    || *(_UNKNOWN **)(*(_QWORD *)v147[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_103:
    if (a11 && *(_UNKNOWN **)(*a11 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if ((a2 & 1) != 0)
      {
        v96 = (_QWORD *)v149[0];
        v97 = (_QWORD *)v149[0];
      }
      else
      {
        v153 = &v155;
        v154 = 0x400000000;
        v155 = *(_QWORD *)ArgAttrsAttr;
        LODWORD(v154) = 1;
        v156 = *(void **)(ArgAttrsAttr + 8);
        LODWORD(v154) = 2;
        v157 = *(_QWORD *)(ArgAttrsAttr + 16);
        LODWORD(v154) = 3;
        if (v157 != 0x8000000000000000)
          *((_QWORD *)v153 + v154 - 1) = v157 / 3;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v149);
        v99 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v155, 3, OperandRange, 0);
        v97 = v99;
        if (v99)
          mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v99 + 8);
        if (v153 != &v155)
          free(v153);
        v96 = (_QWORD *)v149[0];
      }
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v96);
      if (!mlir::OpTrait::util::getBroadcastedType(v97, a11, ElementTypeOrSelf))
      {
        goto LABEL_145;
      }
    }
    if (v146[0]
      && *(_UNKNOWN **)(*(_QWORD *)v146[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v101 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v146);
      if (v102 != 3)
        goto LABEL_131;
      v103 = 3;
      if (a3)
        v103 = 4;
      if (*v101 != 0x8000000000000000
        && *(_QWORD *)ArgAttrsAttr != 0x8000000000000000
        && *(_QWORD *)ArgAttrsAttr != *v101)
      {
        goto LABEL_131;
      }
      v104 = v101[1];
      if (v104 != 0x8000000000000000)
      {
        v105 = *(_QWORD *)(ArgAttrsAttr + 8);
        if (v105 != 0x8000000000000000 && v105 != v104)
          goto LABEL_131;
      }
      v106 = *(_QWORD *)(ArgAttrsAttr + 16);
      v107 = v106 * v103;
      if (v106 == 0x8000000000000000)
        v107 = 0x8000000000000000;
      v108 = v101[2];
      if (v108 != 0x8000000000000000 && v107 != 0x8000000000000000 && v107 != v108)
      {
LABEL_131:
LABEL_145:
        v143[0] = (const void **)v109;
        v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        v27 = (uint64_t)&v153;
        goto LABEL_9;
      }
    }
    if (v145[0] && (a3 & 1) == 0)
    {
      goto LABEL_145;
    }
    if (v145[0]
      && *(_UNKNOWN **)(*(_QWORD *)v145[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v110 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v145);
      if (v111 != 1)
      {
        v119 = v111;
        v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        v150 = v119;
        v120 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v153, (uint64_t *)&v150);
        v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v120, ", should be 1.");
        goto LABEL_9;
      }
      v150 = v46;
      if (v46 != 0x8000000000000000 && *v110 != 0x8000000000000000 && *v110 != v46)
      {
        v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        v116 = (uint64_t)&v153;
        v117 = (uint64_t *)&v150;
LABEL_146:
        v118 = mlir::InFlightDiagnostic::operator<<<long long &>(v116, v117);
        v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v118, ".");
        goto LABEL_9;
      }
    }
    return 1;
  }
  v53 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v147);
  v150 = v54;
  v55 = v54 - 1;
  if (v54 > 1)
  {
    v90 = v53;
    v91 = 0;
    while (1)
    {
      if (v91 >= v54 - 2)
      {
        v92 = *(_QWORD *)(ArgAttrsAttr - 8 * v54 + 24 + 8 * v91);
        v140 = v92;
        if (v55 != v91 || (a2 & 1) != 0 || v92 == 0x8000000000000000)
          goto LABEL_94;
      }
      else
      {
        v140 = 1;
        v92 = 1;
        if (v55 != v91 || (a2 & 1) != 0)
          goto LABEL_94;
      }
      v92 /= 3;
      v140 = v92;
LABEL_94:
      v93 = *(_QWORD *)(v53 + 8 * v91);
      if (v92 != 0x8000000000000000 && v93 != 0x8000000000000000 && v93 != v92)
      {
        v141 = v91;
        v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        v113 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v153, (uint64_t *)&v141);
        v114 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v113, "] = ");
        v115 = mlir::InFlightDiagnostic::operator<<<long long &>(v114, (uint64_t *)(v90 + 8 * v141));
        v116 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v115, ", expected ");
        v117 = &v140;
        goto LABEL_146;
      }
      if (v54 == ++v91)
        goto LABEL_103;
    }
  }
  v144 = 259;
  mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
  v25 = (uint64_t *)&v150;
LABEL_8:
  v26 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)&v153, v25);
  v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v26, ", should be 2 or greater.");
LABEL_9:
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v27);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v153);
  return v16;
}

BOOL mlir::mps::GRUOp::getResetAfter(mlir::mps::GRUOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 24) != 0;
}

uint64_t mlir::mps::GRUGradientOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *ArgAttrsAttr;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void **v69;
  __int16 v70;
  _QWORD v71[2];
  _QWORD *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  _QWORD v77[3];
  void *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD **v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  if (v3)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  else
    v2 = 0;
  v72 = v2;
  v73 = v3;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v4 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v4 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9]
                                        + 32
                                        * (*((_DWORD *)v4 + 13)
                                                       + *((_DWORD *)v4 + 12)
                                                       + *((_DWORD *)v4 + 14))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  if (v6)
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  else
    v5 = 0;
  v71[0] = v5;
  v71[1] = v6;
  if (*((_BYTE *)*this + 47))
    v7 = (uint64_t)(*this + 10);
  else
    v7 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * *(unsigned int *)(v7 + 48) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (*((_BYTE *)*this + 47))
    v10 = (uint64_t)(*this + 10);
  else
    v10 = 0;
  v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9]
                                         + 32 * (*(_DWORD *)(v10 + 52) + *(_DWORD *)(v10 + 48))
                                         + 24)
                             + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8))
  {
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = *this;
  v15 = *((unsigned int *)*this + 11);
  v16 = (v15 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v17 = &(*this)[2 * v16 + 8];
  else
    v17 = 0;
  v18 = *((_DWORD *)v17 + 16);
  v19 = v15 & 0x800000;
  if ((v15 & 0x800000) != 0)
  {
    v20 = v14[9];
    if (!v18)
    {
LABEL_33:
      v67 = 0;
      v22 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    v20 = 0;
    if (!v18)
      goto LABEL_33;
  }
  v21 = (*((_DWORD *)v17 + 13) + *((_DWORD *)v17 + 12) + *((_DWORD *)v17 + 14) + *((_DWORD *)v17 + 15));
  if (!*(_QWORD *)(v20 + 32 * v21 + 24))
    goto LABEL_33;
  v22 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14[9] + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
  {
    v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  }
  else
  {
    v22 = 0;
    v67 = 0;
  }
  v14 = *this;
  v15 = *((unsigned int *)*this + 11);
  v16 = (v15 >> 23) & 1;
  v19 = v15 & 0x800000;
LABEL_34:
  v23 = &v14[2 * v16 + 8];
  if (!BYTE3(v15))
    v23 = 0;
  v24 = *((_DWORD *)v23 + 17);
  if (v19)
  {
    v25 = v14[9];
    v68 = v13;
    if (!v24)
    {
LABEL_44:
      v28 = 0;
      v27 = 0;
      goto LABEL_45;
    }
  }
  else
  {
    v25 = 0;
    v68 = v13;
    if (!v24)
      goto LABEL_44;
  }
  v26 = (*((_DWORD *)v23 + 13)
                     + *((_DWORD *)v23 + 12)
                     + *((_DWORD *)v23 + 14)
                     + *((_DWORD *)v23 + 15)
                     + *((_DWORD *)v23 + 16));
  if (!*(_QWORD *)(v25 + 32 * v26 + 24))
    goto LABEL_44;
  v27 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14[9] + 32 * v26 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8))
  {
    v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v14 = *this;
  v15 = *((unsigned int *)*this + 11);
  v16 = (v15 >> 23) & 1;
  v19 = v15 & 0x800000;
LABEL_45:
  v29 = &v14[2 * v16 + 8];
  if (!BYTE3(v15))
    v29 = 0;
  v30 = *((_DWORD *)v29 + 18);
  if (v19)
  {
    v31 = v14[9];
    if (!v30)
      goto LABEL_56;
  }
  else
  {
    v31 = 0;
    if (!v30)
      goto LABEL_56;
  }
  v32 = (*((_DWORD *)v29 + 13)
                     + *((_DWORD *)v29 + 12)
                     + *((_DWORD *)v29 + 14)
                     + *((_DWORD *)v29 + 15)
                     + *((_DWORD *)v29 + 16)
                     + *((_DWORD *)v29 + 17));
  if (*(_QWORD *)(v31 + 32 * v32 + 24))
  {
    v33 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14[9] + 32 * v32 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v33 + 8))
    {
      v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v33 + 8);
      if (!v2)
        goto LABEL_76;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      if (!v2)
        goto LABEL_76;
    }
    goto LABEL_57;
  }
LABEL_56:
  v34 = 0;
  v33 = 0;
  if (!v2)
  {
LABEL_76:
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v49 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    else
      v49 = 0;
  }
LABEL_57:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v72)
    || !v71[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v71))
  {
    goto LABEL_76;
  }
  v66 = v9;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v72);
  v37 = v36;
  v38 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v71);
  v40 = v37 == v39;
  if (v37 && v37 == v39)
  {
    v41 = v37 - 1;
    do
    {
      v43 = *ArgAttrsAttr++;
      v42 = v43;
      v45 = *v38++;
      v44 = v45;
      v40 = v42 == 0x8000000000000000 || v42 == v44 || v44 == 0x8000000000000000;
      v48 = v41-- != 0;
    }
    while (v48 && v40);
  }
  v9 = v66;
  if (v40)
    goto LABEL_76;
  v70 = 259;
  mlir::OpState::emitOpError(this, &v69, (uint64_t)v77);
  if (v77[0])
  {
    v74 = 3;
    v76 = 28;
    v52 = &v74;
    v53 = (char *)v78;
    if (v79 >= v80)
    {
      v64 = v79 + 1;
      if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
      {
        v65 = (char *)&v74 - (_BYTE *)v78;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
        v53 = (char *)v78;
        v52 = (int *)((char *)v78 + v65);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
        v52 = &v74;
        v53 = (char *)v78;
      }
    }
    v54 = &v53[24 * v79];
    v55 = *(_OWORD *)v52;
    *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
    *(_OWORD *)v54 = v55;
    ++v79;
  }
  v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v77);
  if (v77[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
  if (v86)
  {
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v85;
      v58 = __p;
      if (v85 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v85 = v56;
      operator delete(v58);
    }
    v59 = v82;
    if (v82)
    {
      v60 = v83;
      v61 = v82;
      if (v83 != v82)
      {
        do
        {
          v63 = (void *)*--v60;
          v62 = v63;
          *v60 = 0;
          if (v63)
            operator delete[](v62);
        }
        while (v60 != v59);
        v61 = v82;
      }
      v83 = v59;
      operator delete(v61);
    }
    if (v78 != v81)
      free(v78);
  }
  return v50;
}

uint64_t mlir::mps::GRUOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t Context;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *Value;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ElementType;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47[2];
  _DWORD v48[8];
  uint64_t v49;
  char v50[8];
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];

  v62[2] = *MEMORY[0x1E0C80C00];
  v62[0] = a4;
  v62[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
    *(_OWORD *)v47 = *(__int128 *)((char *)a7 + 56);
    v48[0] = *((_DWORD *)a7 + 18);
  }
  else
  {
    v19 = 0;
    v48[0] = 0;
    v16 = 0uLL;
    *(_OWORD *)v47 = 0u;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v49 = a6;
  v50[0] = 0;
  v51 = 0;
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = v19;
  v56 = *(_OWORD *)v47;
  v57 = v48[0];
  v58 = a9;
  v59 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v49);
    if (v51)
      v51 = 0;
    mlir::OperationName::OperationName(v50, "mps.gru", 7, Context);
    v51 = 1;
  }
  v60 = a4;
  v61 = a5;
  if (!a5)
  {
    v25 = mlir::Float32Type::get(this, a2);
    v26 = mlir::UnrankedTensorType::get(v25);
    v27 = *(unsigned int *)(a11 + 8);
    if (v27 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
      LODWORD(v27) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v27) = v26;
    goto LABEL_38;
  }
  mlir::UnknownLoc::get(this, a2);
  v21 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v62, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v21)
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
  v22 = *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v23 = *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(_QWORD *)(*(_QWORD *)v21 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      ? 0
      : v21;
  v46 = v23;
  if (v22)
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
  v28 = v21;
  if (*(_UNKNOWN **)(*(_QWORD *)v21 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
    v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
    v32 = (_BYTE *)(v30 + 8 * v31);
    v47[0] = v48;
    v47[1] = (void *)0x400000000;
    v33 = v32 - Value;
    if ((unint64_t)(v32 - Value) < 0x21)
    {
      v34 = 0;
      v35 = v48;
      if (v32 == Value)
      {
LABEL_24:
        v36 = v34 + ((unint64_t)v33 >> 3);
        LODWORD(v47[1]) = v36;
        v37 = v36 - 1;
        v38 = *(_QWORD *)&v35[2 * v36 - 2];
        if (v38 != 0x8000000000000000)
          *(_QWORD *)&v35[2 * v37] = v38 / 3;
        ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v46);
        v28 = mlir::RankedTensorType::get((uint64_t)v35, v36, ElementType, 0);
        v40 = v47[0];
        if (v38 != 0x8000000000000000)
        {
          v41 = 3;
          if (*((_QWORD *)&v53 + 1))
            v41 = 4;
          *((_QWORD *)v47[0] + v37) *= v41;
        }
        v42 = LODWORD(v47[1]);
        v43 = mlir::TensorType::getElementType((mlir::TensorType *)&v46);
        v21 = mlir::RankedTensorType::get((uint64_t)v40, v42, v43, 0);
        if (v47[0] != v48)
          free(v47[0]);
        goto LABEL_32;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v48, v33 >> 3, 8);
      v34 = (int)v47[1];
      v35 = v47[0];
      if (v32 == Value)
        goto LABEL_24;
    }
    memcpy(&v35[2 * v34], Value, v32 - Value);
    v34 = (int)v47[1];
    v35 = v47[0];
    goto LABEL_24;
  }
LABEL_32:
  v44 = *(unsigned int *)(a11 + 8);
  if (v44 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v28;
  v45 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v45;
  if (!*((_QWORD *)&v54 + 1))
    return 1;
  if (v45 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v45 + 1, 8);
    LODWORD(v45) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v45) = v21;
LABEL_38:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::GRUGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  _BYTE *Value;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t ElementType;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t Context;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[28];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  uint64_t v62;

  v14 = a9;
  v13 = a10;
  v62 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v60 = a4;
  *((_QWORD *)&v60 + 1) = a5;
  if (!a5)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v17)
  {
    v50 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  }
  v18 = *(_QWORD *)(*(_QWORD *)v17 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(_QWORD *)(*(_QWORD *)v17 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (*(_QWORD *)(*(_QWORD *)v17 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && *(_QWORD *)(*(_QWORD *)v17 + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v19 = 0;
  }
  else
  {
    v19 = v17;
  }
  v50 = v19;
  if (v18)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  if (*(_UNKNOWN **)(*(_QWORD *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_20;
  Value = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
  v21 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
  v23 = (_BYTE *)(v21 + 8 * v22);
  *(_QWORD *)&v51 = v52;
  *((_QWORD *)&v51 + 1) = 0x400000000;
  v24 = v23 - Value;
  if ((unint64_t)(v23 - Value) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v52, v24 >> 3, 8);
    v25 = DWORD2(v51);
    v26 = (char *)v51;
    if (v23 == Value)
      goto LABEL_16;
    goto LABEL_15;
  }
  v25 = 0;
  v26 = v52;
  if (v23 != Value)
  {
LABEL_15:
    memcpy(&v26[8 * v25], Value, v23 - Value);
    v25 = DWORD2(v51);
    v26 = (char *)v51;
  }
LABEL_16:
  v14 = a9;
  v13 = a10;
  v28 = v25 + ((unint64_t)v24 >> 3);
  DWORD2(v51) = v28;
  v29 = *(_QWORD *)&v26[8 * v28 - 8];
  if (v29 != 0x8000000000000000)
    *(_QWORD *)&v26[8 * v28 - 8] = 3 * v29;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v50);
  v17 = mlir::RankedTensorType::get((uint64_t)v26, v28, ElementType, 0);
  if ((char *)v51 != v52)
    free((void *)v51);
LABEL_20:
  v31 = *(unsigned int *)(a11 + 8);
  if (v31 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v31) = v17;
  ++*(_DWORD *)(a11 + 8);
  v51 = v60;
  if (*((_QWORD *)&v60 + 1) < 2uLL)
  {
    if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands"))
      return 0;
  }
  else
  {
    v32 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v51, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
    ++*(_DWORD *)(a11 + 8);
  }
  v49 = 0;
    return 0;
  v34 = v49;
  v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
  ++*(_DWORD *)(a11 + 8);
  if (a7)
  {
    v36 = *a7;
    v37 = a7[1];
    v38 = a7[2];
    v61[0] = a7[3];
    *(_OWORD *)((char *)v61 + 12) = *(__int128 *)((char *)a7 + 60);
  }
  else
  {
    v36 = 0uLL;
    memset(v61, 0, 28);
    v37 = 0uLL;
    v38 = 0uLL;
  }
  v39 = v60;
  *(_QWORD *)&v51 = a6;
  BYTE8(v51) = 0;
  v52[0] = 0;
  v53 = v36;
  v54 = v37;
  v55 = v38;
  *(_OWORD *)v56 = v61[0];
  *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v61 + 12);
  v57 = v14;
  v58 = v13;
  if (a6)
  {
    v48 = v60;
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v51);
    if (v52[0])
      v52[0] = 0;
    mlir::OperationName::OperationName((char *)&v51 + 8, "mps.gru_gradient", 16, Context);
    v52[0] = 1;
    v39 = v48;
  }
  v59 = v39;
  v41 = vaddvq_s32(*(int32x4_t *)v56) + *(_DWORD *)&v56[16];
  v42 = *(_DWORD *)&v56[24];
  *(_QWORD *)&v61[0] = v39;
  v43 = v41 + *(_DWORD *)&v56[20];
  *((_QWORD *)&v61[0] + 1) = (v41 + *(_DWORD *)&v56[20]);
  if (v41 + *(_DWORD *)&v56[20])
  {
    v44 = mlir::ValueRange::offset_base(v61, (v41 + *(_DWORD *)&v56[20]));
    if (*((_QWORD *)&v61[0] + 1) == v42 + v43)
      return 1;
LABEL_42:
    v61[0] = v44;
    v45 = mlir::ValueRange::dereference_iterator(v61, 0);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
      v47 = *(unsigned int *)(a11 + 8);
      if (v47 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v47 + 1, 8);
        LODWORD(v47) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v47) = v46;
      ++*(_DWORD *)(a11 + 8);
    }
    return 1;
  }
  v44 = v39;
  if (*(_DWORD *)&v56[24])
    goto LABEL_42;
  return 1;
}

uint64_t mlir::mps::ConcatOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, char *a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t ElementTypeOrSelf;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  void *v30;
  int v31;
  unint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t Value;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  unint64_t v55;
  char v56;
  void *v57;
  unsigned int v58;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75[8];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84[2];
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _BYTE v89[32];
  char *v90;
  unint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v82 = a4;
  v83 = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v74 = a6;
  v75[0] = 0;
  v76 = 0;
  v77 = v16;
  v78 = a9;
  v17 = a5;
  v79 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76)
      v76 = 0;
    mlir::OperationName::OperationName(v75, "mps.concat", 10, Context);
    v76 = 1;
    v17 = v83;
  }
  v80 = a4;
  v81 = a5;
  if (v17 <= 1)
  {
    v19 = mlir::Float32Type::get(this, a2);
    v20 = mlir::UnrankedTensorType::get(v19);
    goto LABEL_75;
  }
  mlir::UnknownLoc::get(this, a2);
  if (v83 < 2)
    v21 = v82;
  else
    v21 = (char *)mlir::ValueRange::offset_base(&v82, v83 - 1);
  v87 = v21;
  v88 = 0;
  v68 = mlir::ValueRange::dereference_iterator(&v87, 0);
  v90 = v82;
  v91 = v83 - 1;
  v22 = mlir::ValueRange::dereference_iterator(&v90, 0);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  v24 = ElementTypeOrSelf;
  LOBYTE(v72) = 0;
  v73 = 0;
  v86 = 0;
  v87 = v89;
  v88 = 0x400000000;
  v25 = v90;
  v26 = v91;
  v85 = v90;
  if (!v91)
  {
LABEL_68:
    v20 = mlir::UnrankedTensorType::get(v24);
    v56 = 1;
    v57 = v87;
    if (v87 != v89)
LABEL_73:
      free(v57);
    goto LABEL_74;
  }
  v64 = ElementTypeOrSelf;
  v66 = (uint64_t)a2;
  v67 = a3;
  v65 = 0;
  v27 = 0;
  v69 = 0;
  v28 = 0;
  v29 = 0;
  v30 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v31 = 1;
  while (1)
  {
    v33 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v85, v27) + 8) & 0xFFFFFFFFFFFFFFF8;
    v34 = *(void **)(*(_QWORD *)v33 + 136);
    if (v34 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id && v34 != v30)
      v33 = 0;
    v71 = v33;
    if (!v33)
    {
      v53 = "cannot concat a non-tensor type";
LABEL_71:
      v56 = mlir::emitOptionalError<char const(&)[39]>(v66, v67, v53);
      goto LABEL_72;
    }
    if (v28)
      goto LABEL_43;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v71))
      break;
    v28 = 0;
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v71))
      goto LABEL_15;
LABEL_44:
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    v70 = 1;
    if (v43)
      v44 = (uint64_t *)Value;
    else
      v44 = &v70;
    if (v43 <= 1)
      v45 = 1;
    else
      v45 = v43;
    if (v45 != v29)
    {
      v53 = "all inputs must have equal rank";
      goto LABEL_71;
    }
    v46 = v30;
    v47 = 0;
    v48 = v87;
    do
    {
      v84[0] = v48[v47];
      v84[1] = v44[v47];
      v49 = mlir::mps::mergeDynamicDims(v84, 2);
      v48 = v87;
      *(_QWORD *)&v87[8 * v47++] = v49;
    }
    while (v29 != v47);
    v30 = v46;
LABEL_15:
    if (v31)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v71))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
        if (v50 < 1)
        {
          v52 = 1;
LABEL_61:
          v69 += v52;
          goto LABEL_16;
        }
        v51 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
        v52 = *(_QWORD *)(v51 + 8 * v72);
        if (v52 != 0x8000000000000000)
          goto LABEL_61;
      }
      v69 = 0;
      v31 = 0;
    }
LABEL_16:
    v27 = ++v86;
    if (v85 == v25 && v27 == v26)
    {
      v24 = v64;
      if (!v28)
        goto LABEL_68;
      v54 = v87;
      if (v65)
      {
        v55 = 0x8000000000000000;
        if (v31)
          v55 = v69;
        *(_QWORD *)&v87[8 * v72] = v55;
      }
      goto LABEL_91;
    }
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  if (v36 <= 1)
    v29 = 1;
  else
    v29 = v36;
  if (!mlir::mps::getAxis(v66, v67, v68, v29, (uint64_t)&v72))
  {
    v56 = 0;
LABEL_72:
    v20 = 0;
    v57 = v87;
    if (v87 == v89)
      goto LABEL_74;
    goto LABEL_73;
  }
  if (v73)
  {
    v37 = v88;
    if (v29 != v88)
    {
      if (v29 >= v88)
      {
        if (v29 > HIDWORD(v88))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v29, 8);
          v37 = v88;
        }
        if (v29 != v37)
          bzero(&v87[8 * v37], 8 * (v29 - v37));
      }
      LODWORD(v88) = v29;
    }
    v38 = (_BYTE *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    v41 = (_BYTE *)(v39 + 8 * v40);
    if (v41 != v38)
      memmove(v87, v38, v41 - v38);
    v65 = 1;
    v28 = 1;
LABEL_43:
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v71))
      goto LABEL_15;
    goto LABEL_44;
  }
  if (v29 > HIDWORD(v88))
  {
    LODWORD(v88) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v29, 8);
    v60 = v87;
    v61 = v29;
    v54 = v87;
    goto LABEL_89;
  }
  v54 = v87;
  v62 = v88;
  if (v88 >= v29)
    v63 = v29;
  else
    v63 = v88;
  if (v63)
    memset_pattern16(v87, &unk_1812352C0, 8 * v63);
  v61 = v29 - v62;
  if (v29 > v62)
  {
    v60 = &v54[8 * v62];
LABEL_89:
    memset_pattern16(v60, &unk_1812352C0, 8 * v61);
  }
  LODWORD(v88) = v29;
  v24 = v64;
LABEL_91:
  v20 = mlir::RankedTensorType::get((uint64_t)v54, v88, v24, 0);
  v56 = 1;
  v57 = v87;
  if (v87 != v89)
    goto LABEL_73;
LABEL_74:
  if (!v56)
    return 0;
LABEL_75:
  v58 = *(_DWORD *)(a11 + 8);
  if (v58 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v58 + 1, 8);
    v58 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v58) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ConcatOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *ArgAttrsAttr;
  uint64_t ElementTypeOrSelf;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  int *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v58;
  void *v59;
  int *v60;
  char *v61;
  char *v62;
  __int128 v63;
  _QWORD **v64;
  _QWORD **v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  const void **v77[4];
  __int16 v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  const char *v89;
  uint64_t v90;
  const void **v91[3];
  void *v92;
  unsigned int v93;
  unsigned int v94;
  _BYTE v95[96];
  void *v96;
  _QWORD *v97;
  void *v98;
  _QWORD **v99;
  char v100;
  _QWORD v101[3];
  void *v102;
  uint64_t v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  _QWORD **v107;
  char v108;
  _QWORD v109[3];
  void *v110;
  uint64_t v111;
  void *v112;
  _QWORD *v113;
  void *__p;
  _QWORD **v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  v3 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v86 = v3;
    v87 = v4;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86))
      return 1;
  }
  else
  {
    v86 = 0;
    v87 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86))
      return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  v6 = v5;
  LOBYTE(v84) = 0;
  v85 = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(_QWORD *)((*this)[9] + 32 * (*((_DWORD *)*this + 17) - 1) + 24), v5, (uint64_t)&v84))return 0;
  if (!v85)
    return 1;
  v7 = v84;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v86);
  LOBYTE(v82) = 0;
  v83 = 0;
  v10 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v13 = 0;
    v12 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  v11 = *((_DWORD *)v10 + 17);
  v12 = (v11 - 1);
  if (v11 == 1)
    return 1;
  v13 = v10[9];
LABEL_13:
  v14 = 0;
  v15 = ~v7;
  v16 = v7 + 1;
  v76 = v6 + v15;
  v75 = &ArgAttrsAttr[v16];
  v74 = v16;
  while (1)
  {
    v17 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32 * v14 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v17)
    {
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      v80 = v17;
      v81 = v18;
      if (mlir::getElementTypeOrSelf(v17) == ElementTypeOrSelf)
        goto LABEL_38;
    }
    else
    {
      v80 = 0;
      v81 = 0;
      if (mlir::getElementTypeOrSelf(0) == ElementTypeOrSelf)
        goto LABEL_38;
    }
    v91[0] = (const void **)"element type of operand and result differ";
    LOWORD(v93) = 259;
    mlir::OpState::emitOpError(this, v91, (uint64_t)v109);
    if (v109[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v109);
    if (v116)
    {
      v19 = (_QWORD **)__p;
      if (__p)
      {
        v20 = v115;
        v21 = __p;
        if (v115 != __p)
        {
          do
            v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          v21 = __p;
        }
        v115 = v19;
        operator delete(v21);
      }
      v22 = v112;
      if (v112)
      {
        v23 = v113;
        v24 = v112;
        if (v113 != v112)
        {
          do
          {
            v26 = (void *)*--v23;
            v25 = v26;
            *v23 = 0;
            if (v26)
              operator delete[](v25);
          }
          while (v23 != v22);
          v24 = v112;
        }
        v113 = v22;
        operator delete(v24);
      }
      if (v110 != &v111)
        free(v110);
    }
LABEL_38:
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v80) & 1) == 0)
      goto LABEL_15;
    v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
    v79 = 1;
    if (v28)
      v29 = (uint64_t *)v27;
    else
      v29 = &v79;
    if (v28 <= 1)
      v30 = 1;
    else
      v30 = v28;
    if (v30 != v6)
    {
      v91[0] = (const void **)"all inputs must have equal rank";
      LOWORD(v93) = 259;
      mlir::OpState::emitOpError(this, v91, (uint64_t)v101);
      if (v101[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v101);
      if (v108)
      {
        v31 = (_QWORD **)v106;
        if (v106)
        {
          v32 = v107;
          v33 = v106;
          if (v107 != v106)
          {
            do
              v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            v33 = v106;
          }
          v107 = v31;
          operator delete(v33);
        }
        v34 = v104;
        if (v104)
        {
          v35 = ElementTypeOrSelf;
          v36 = v12;
          v37 = v13;
          v38 = v6;
          v39 = ArgAttrsAttr;
          v40 = v105;
          v41 = v104;
          if (v105 != v104)
          {
            do
            {
              v43 = (void *)*--v40;
              v42 = v43;
              *v40 = 0;
              if (v43)
                operator delete[](v42);
            }
            while (v40 != v34);
            v41 = v104;
          }
          v105 = v34;
          operator delete(v41);
          ArgAttrsAttr = v39;
          v6 = v38;
          v13 = v37;
          v12 = v36;
          ElementTypeOrSelf = v35;
          v16 = v74;
        }
        if (v102 != &v103)
          free(v102);
      }
    }
    v44 = v84;
    if (!mlir::verifyCompatibleShape(ArgAttrsAttr, v84, v29, v84)
      || !mlir::verifyCompatibleShape(v75, v76, &v29[v16], v76))
    {
      break;
    }
    if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8])
    {
      v45 = &v29[v44];
      if (v83)
      {
        if (!mlir::verifyCompatibleShape(v45, 1, &v82, 1))
        {
          v77[0] = (const void **)"all input shapes must match along axis ";
          v78 = 259;
          mlir::OpState::emitOpError(this, v77, (uint64_t)v91);
          if (v91[0])
          {
            v88 = 3;
            v89 = "dimension when interleaving";
            v90 = 27;
            v46 = &v88;
            v47 = (char *)v92;
            if (v93 >= v94)
            {
              v71 = v93 + 1;
              if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
              {
                v73 = (char *)&v88 - (_BYTE *)v92;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v71, 24);
                v47 = (char *)v92;
                v46 = (int *)((char *)v92 + v73);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v71, 24);
                v46 = &v88;
                v47 = (char *)v92;
              }
            }
            v48 = &v47[24 * v93];
            v49 = *(_OWORD *)v46;
            *((_QWORD *)v48 + 2) = *((_QWORD *)v46 + 2);
            *(_OWORD *)v48 = v49;
            ++v93;
          }
          v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v91);
          if (v91[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
          if (v100)
          {
            v51 = (_QWORD **)v98;
            if (v98)
            {
              v52 = v99;
              v53 = v98;
              if (v99 != v98)
              {
                do
                  v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                while (v52 != v51);
                v53 = v98;
              }
              v99 = v51;
              operator delete(v53);
            }
            v54 = v96;
            if (!v96)
              goto LABEL_108;
            v55 = v97;
            v56 = v96;
            if (v97 == v96)
              goto LABEL_107;
            do
            {
              v59 = (void *)*--v55;
              v58 = v59;
              *v55 = 0;
              if (v59)
                operator delete[](v58);
            }
            while (v55 != v54);
            goto LABEL_106;
          }
          return v50;
        }
      }
      else
      {
        v82 = *v45;
        v83 = 1;
      }
    }
LABEL_15:
    if (++v14 == v12)
      return 1;
  }
  v77[0] = (const void **)"invalid input tensor shapes, all input shapes must ";
  v78 = 259;
  mlir::OpState::emitOpError(this, v77, (uint64_t)v91);
  if (v91[0])
  {
    v88 = 3;
    v89 = "match except at axis";
    v90 = 20;
    v60 = &v88;
    v61 = (char *)v92;
    if (v93 >= v94)
    {
      v70 = v93 + 1;
      if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
      {
        v72 = (char *)&v88 - (_BYTE *)v92;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v70, 24);
        v61 = (char *)v92;
        v60 = (int *)((char *)v92 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v70, 24);
        v60 = &v88;
        v61 = (char *)v92;
      }
    }
    v62 = &v61[24 * v93];
    v63 = *(_OWORD *)v60;
    *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
    *(_OWORD *)v62 = v63;
    ++v93;
  }
  v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v91);
  if (v91[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
  if (v100)
  {
    v64 = (_QWORD **)v98;
    if (v98)
    {
      v65 = v99;
      v66 = v98;
      if (v99 != v98)
      {
        do
          v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
        while (v65 != v64);
        v66 = v98;
      }
      v99 = v64;
      operator delete(v66);
    }
    v54 = v96;
    if (!v96)
      goto LABEL_108;
    v67 = v97;
    v56 = v96;
    if (v97 == v96)
    {
LABEL_107:
      v97 = v54;
      operator delete(v56);
LABEL_108:
      if (v92 != v95)
        free(v92);
      return v50;
    }
    do
    {
      v69 = (void *)*--v67;
      v68 = v69;
      *v67 = 0;
      if (v69)
        operator delete[](v68);
    }
    while (v67 != v54);
LABEL_106:
    v56 = v96;
    goto LABEL_107;
  }
  return v50;
}

uint64_t mlir::mps::ConcatOp::getAxis(mlir::mps::ConcatOp *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                   + 32 * (*(_DWORD *)(*(_QWORD *)this + 68) - 1)
                   + 24);
}

uint64_t mlir::mps::ConcatOp::getValues(mlir::mps::ConcatOp *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72);
  else
    return 0;
}

uint64_t mlir::mps::ReshapeOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t Context;
  _QWORD *v15;
  uint64_t v16;
  uint64_t DefiningOp;
  uint64_t v18;
  uint64_t ElementTypeOrSelf;
  uint64_t v20;
  unsigned int v21;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v13 = *a7;
    v26 = a6;
    v27[0] = 0;
    v28 = 0;
    v29 = v13;
    v30 = a9;
    v31 = a10;
    if (!a6)
      goto LABEL_8;
  }
  else
  {
    v26 = a6;
    v27[0] = 0;
    v28 = 0;
    v29 = 0;
    v30 = a9;
    v31 = a10;
    if (!a6)
      goto LABEL_8;
  }
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
  if (v28)
    v28 = 0;
  mlir::OperationName::OperationName(v27, "mps.reshape", 11, Context);
  v28 = 1;
LABEL_8:
  v32 = a4;
  v33 = a5;
  v34 = a4;
  v35 = 0;
  v15 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v34, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
  {
    v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
    v24 = 0;
    v25 = 0;
    if (v15)
    {
      v34 = v32;
      v35 = 1;
      v34 = mlir::ValueRange::offset_base(&v34, 1);
      v35 = 0;
      v23 = (uint64_t **)&v24;
      v34 = mlir::ValueRange::dereference_iterator(&v34, 0);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v34);
      if (DefiningOp)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v23, DefiningOp))
        {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    v15 = 0;
    v24 = 0;
    v25 = 0;
  }
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
  v18 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_16:
  v20 = v18;
  v21 = *(_DWORD *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    v21 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

_QWORD *mlir::mps::`anonymous namespace'::inferReshapeReturnType(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *ArgAttrsAttr;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t NumElements;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD **v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  int64x2_t *v45;
  int64x2_t v46;
  uint64_t v47;
  int32x2_t v48;
  int32x2_t v49;
  uint64_t ElementTypeOrSelf;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD **v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[2];
  void *v69;
  uint64_t v70;
  _BYTE v71[48];
  void *v72;
  uint64_t v73;
  _QWORD v74[7];

  v6 = a2;
  v7 = a1;
  v74[6] = *MEMORY[0x1E0C80C00];
  v66 = a1;
  v67 = a2;
  v72 = v74;
  v73 = 0x600000000;
  v8 = 1;
  mlir::getIntValues<long long>(a3, a4, (uint64_t)&v72, 1);
  v69 = v71;
  v70 = 0x600000000;
  if ((_DWORD)v73)
  {
    v9 = 0;
    v10 = (char *)v72;
    v11 = (char *)v72 + 8 * v73;
    v8 = 1;
    do
    {
      while (1)
      {
        v13 = *(_QWORD *)v10;
        if (*(_QWORD *)v10 == -1 || v13 == 0x8000000000000000)
          break;
        if (v13)
          v17 = 1;
        else
          v17 = a5 == 0;
        if (!v17)
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66))
          {
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
            if (v9 < v18)
              *(_QWORD *)v10 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66)
                                         + 8 * v9);
          }
        }
        v12 = *(_QWORD *)v10;
        v10 += 8;
        v8 *= v12;
        ++v9;
        if (v10 == v11)
          goto LABEL_20;
      }
      v15 = (char *)v72;
      v16 = v70;
      if (v70 >= (unint64_t)HIDWORD(v70))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
        v16 = v70;
      }
      *((_QWORD *)v69 + v16) = &v15[8 * v9];
      LODWORD(v70) = v70 + 1;
      ++v9;
      v10 += 8;
    }
    while (v10 != v11);
LABEL_20:
    v7 = v66;
    v6 = v67;
  }
  v68[0] = v7;
  v68[1] = v6;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
  {
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
    if (v20)
    {
      v21 = 8 * v20;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v21 -= 8;
        if (!v21)
          goto LABEL_26;
      }
LABEL_34:
      v29 = v70;
      if (!(_DWORD)v70)
        goto LABEL_43;
      v30 = (char *)v69;
      v31 = (v70 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v31)
      {
        v32 = v31 + 1;
        v33 = (v31 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v34 = (char *)v69 + 8 * v33;
        v35 = (_QWORD **)((char *)v69 + 8);
        v36 = v33;
        do
        {
          v37 = *v35;
          **(v35 - 1) = 0;
          *v37 = 0;
          v35 += 2;
          v36 -= 2;
        }
        while (v36);
        if (v32 == v33)
          goto LABEL_43;
      }
      else
      {
        v34 = (char *)v69;
      }
      v38 = &v30[8 * v29];
      do
      {
        v39 = *(_QWORD **)v34;
        v34 += 8;
        *v39 = 0;
      }
      while (v34 != v38);
      goto LABEL_43;
    }
  }
LABEL_26:
  if (!v8)
    goto LABEL_34;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66))
    goto LABEL_43;
  v22 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
  if (v23)
  {
    v24 = 8 * v23;
    while (*v22 != 0x8000000000000000)
    {
      ++v22;
      v24 -= 8;
      if (!v24)
        goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    v25 = v70;
    v26 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
    NumElements = mlir::ShapedType::getNumElements(v26, v27);
    if (v25 == 1)
    {
      **(_QWORD **)v69 = NumElements / v8;
      goto LABEL_43;
    }
    if (NumElements == v8)
    {
      v55 = v70;
      if ((_DWORD)v70)
      {
        v56 = (char *)v69;
        v57 = (v70 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v57)
        {
          v58 = v57 + 1;
          v59 = (v57 + 1) & 0x3FFFFFFFFFFFFFFELL;
          v60 = (char *)v69 + 8 * v59;
          v61 = (_QWORD **)((char *)v69 + 8);
          v62 = v59;
          do
          {
            v63 = *v61;
            **(v61 - 1) = 1;
            *v63 = 1;
            v61 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v58 == v59)
            goto LABEL_43;
        }
        else
        {
          v60 = (char *)v69;
        }
        v64 = &v56[8 * v55];
        do
        {
          v65 = *(_QWORD **)v60;
          v60 += 8;
          *v65 = 1;
        }
        while (v60 != v64);
      }
    }
  }
LABEL_43:
  v40 = (char *)v72;
  v41 = v73;
  if (!(_DWORD)v73)
    goto LABEL_57;
  v42 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v43 = (char *)v72;
  if (v42 >= 3)
  {
    v44 = v42 + 1;
    v43 = (char *)v72 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = (int64x2_t *)((char *)v72 + 16);
    v46.i64[0] = -1;
    v46.i64[1] = -1;
    v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v48 = vmovn_s64(vceqq_s64(v45[-1], v46));
      if ((v48.i8[0] & 1) != 0)
      {
        v45[-1].i64[0] = 0x8000000000000000;
        if ((v48.i8[4] & 1) == 0)
        {
LABEL_49:
          v49 = vmovn_s64(vceqq_s64(*v45, v46));
          if ((v49.i8[0] & 1) == 0)
            goto LABEL_50;
          goto LABEL_54;
        }
      }
      else if ((v48.i8[4] & 1) == 0)
      {
        goto LABEL_49;
      }
      v45[-1].i64[1] = 0x8000000000000000;
      v49 = vmovn_s64(vceqq_s64(*v45, v46));
      if ((v49.i8[0] & 1) == 0)
      {
LABEL_50:
        if ((v49.i8[4] & 1) != 0)
          goto LABEL_55;
        goto LABEL_46;
      }
LABEL_54:
      v45->i64[0] = 0x8000000000000000;
      if ((v49.i8[4] & 1) != 0)
LABEL_55:
        v45->i64[1] = 0x8000000000000000;
LABEL_46:
      v45 += 2;
      v47 -= 4;
      if (!v47)
      {
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
        goto LABEL_65;
      }
    }
  }
  do
  {
LABEL_65:
    if (*(_QWORD *)v43 == -1)
      *(_QWORD *)v43 = 0x8000000000000000;
    v43 += 8;
  }
  while (v43 != &v40[8 * v41]);
LABEL_57:
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v66);
  v51 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
  v52 = v51;
  if (v51)
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v51 + 8);
    v53 = v69;
    if (v69 == v71)
      goto LABEL_60;
    goto LABEL_59;
  }
  v53 = v69;
  if (v69 != v71)
LABEL_59:
    free(v53);
LABEL_60:
  if (v72 != v74)
    free(v72);
  return v52;
}

uint64_t mlir::mps::ReshapeOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t DefiningOp;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  int64x2_t v33;
  int64x2_t v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t NumElements;
  uint64_t *v51;
  uint64_t v52;
  void *v54;
  void *v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  const void **v62[4];
  __int16 v63;
  _QWORD v64[2];
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t **v76;
  uint64_t v77;
  _QWORD v78[5];

  v78[4] = *MEMORY[0x1E0C80C00];
  v66 = 0;
  v67 = 0;
  v2 = *(_QWORD *)((*this)[9] + 56);
  v76 = (uint64_t **)&v66;
  v68[0] = v2;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v68);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v76, DefiningOp))
    return 1;
  v4 = *this;
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5)
  {
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    v4 = *this;
  }
  else
  {
    v6 = 0;
  }
  v8 = *((_DWORD *)v4 + 11);
  v65[0] = v5;
  v65[1] = v6;
  v64[1] = v9;
  v76 = (uint64_t **)v78;
  v77 = 0x400000000;
  mlir::getIntValues<long long>(v66, v67, (uint64_t)&v76, 1);
  if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65)
    && (_DWORD)v77)
  {
    v10 = 0;
    v11 = v76;
    v12 = 8 * v77;
    while (1)
    {
      if (!v11[v10])
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
        if (v13 <= v10)
          break;
      }
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_25;
    }
    v62[0] = (const void **)"zero_is_copy semantics is invalid: shape operand contains a zero value outside the input rank.";
    v63 = 259;
    mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    if (!v75)
      goto LABEL_66;
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v74;
      v16 = __p;
      if (v74 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v74 = v14;
      operator delete(v16);
    }
    v17 = v71;
    if (!v71)
      goto LABEL_88;
    v18 = v72;
    v19 = v71;
    if (v72 == v71)
    {
LABEL_87:
      v72 = v17;
      operator delete(v19);
LABEL_88:
      if (v69 != &v70)
        free(v69);
      goto LABEL_66;
    }
    do
    {
      v29 = (void *)*--v18;
      v28 = v29;
      *v18 = 0;
      if (v29)
        operator delete[](v28);
    }
    while (v18 != v17);
LABEL_86:
    v19 = v71;
    goto LABEL_87;
  }
LABEL_25:
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65))
  {
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v21)
    {
      v22 = 8 * v21;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v22 -= 8;
        if (!v22)
          goto LABEL_30;
      }
      goto LABEL_54;
    }
LABEL_30:
    v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
    if (!v24)
      goto LABEL_54;
    v25 = (v24 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v25 >= 3)
    {
      v30 = v25 + 1;
      v31 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v27 = (uint64_t *)(v23 + 8 * v31);
      v32 = (int64x2_t *)(v23 + 16);
      v33 = 0uLL;
      v34 = vdupq_n_s64(0x8000000000000000);
      v35 = v31;
      v36 = 0uLL;
      do
      {
        v33 = vsubq_s64(v33, vceqq_s64(v32[-1], v34));
        v36 = vsubq_s64(v36, vceqq_s64(*v32, v34));
        v32 += 2;
        v35 -= 4;
      }
      while (v35);
      v26 = vaddvq_s64(vaddq_s64(v36, v33));
      if (v30 == v31)
        goto LABEL_42;
    }
    else
    {
      v26 = 0;
      v27 = (uint64_t *)v23;
    }
    do
    {
      v37 = *v27++;
      if (v37 == 0x8000000000000000)
        ++v26;
    }
    while (v27 != (uint64_t *)(v23 + 8 * v24));
LABEL_42:
    if (v26 >= 2)
    {
      v62[0] = (const void **)"the result shape can not be resolved";
      v63 = 259;
      mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      if (!v75)
        goto LABEL_66;
      v38 = (_QWORD **)__p;
      if (__p)
      {
        v39 = v74;
        v40 = __p;
        if (v74 != __p)
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p;
        }
        v74 = v38;
        operator delete(v40);
      }
      v17 = v71;
      if (!v71)
        goto LABEL_88;
      v41 = v72;
      v19 = v71;
      if (v72 == v71)
        goto LABEL_87;
      do
      {
        v55 = (void *)*--v41;
        v54 = v55;
        *v41 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v41 != v17);
      goto LABEL_86;
    }
  }
LABEL_54:
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v64))
  {
    v42 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
    if (v43)
    {
      v44 = 8 * v43;
      while (*v42 != 0x8000000000000000)
      {
        ++v42;
        v44 -= 8;
        if (!v44)
          goto LABEL_59;
      }
    }
    else
    {
LABEL_59:
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65))
      {
        v45 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
        if (v46)
        {
          v47 = 8 * v46;
          while (*v45 != 0x8000000000000000)
          {
            ++v45;
            v47 -= 8;
            if (!v47)
              goto LABEL_64;
          }
        }
        else
        {
LABEL_64:
          v48 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
          NumElements = mlir::ShapedType::getNumElements(v48, v49);
          v51 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
          if (NumElements != mlir::ShapedType::getNumElements(v51, v52))
          {
            v62[0] = (const void **)"the result shape is not compatible with the input shape";
            v63 = 259;
            mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
            v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
            if (v68[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
            if (!v75)
              goto LABEL_66;
            v56 = (_QWORD **)__p;
            if (__p)
            {
              v57 = v74;
              v58 = __p;
              if (v74 != __p)
              {
                do
                  v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
                while (v57 != v56);
                v58 = __p;
              }
              v74 = v56;
              operator delete(v58);
            }
            v17 = v71;
            if (!v71)
              goto LABEL_88;
            v59 = v72;
            v19 = v71;
            if (v72 == v71)
              goto LABEL_87;
            do
            {
              v61 = (void *)*--v59;
              v60 = v61;
              *v59 = 0;
              if (v61)
                operator delete[](v60);
            }
            while (v59 != v17);
            goto LABEL_86;
          }
        }
      }
    }
  }
  v7 = 1;
LABEL_66:
  if (v76 != v78)
    free(v76);
  return v7;
}

uint64_t mlir::mps::DepthToSpace2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t **v23;
  void *v24;
  _QWORD *v26;
  void *v27;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  unsigned __int8 v30;
  int v31;
  uint64_t ElementTypeOrSelf;
  unsigned int v33;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  void *Value;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ElementType;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *__p;
  unsigned int v58;
  void **v59;
  uint64_t v60;
  _BYTE v61[8];
  char v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[6];

  v71[4] = *MEMORY[0x1E0C80C00];
  v68[0] = a4;
  v68[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v60 = a6;
  v61[0] = 0;
  v62 = 0;
  v63 = v16;
  v64 = a9;
  v65 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62)
      v62 = 0;
    mlir::OperationName::OperationName(v61, "mps.depth_to_space_2d", 21, Context);
    v62 = 1;
  }
  v66 = a4;
  v67 = a5;
  if (a5 < 4
    || (v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DepthToSpace2DOpAdaptor::verify((uint64_t)&v60, v18)))
  {
    ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_22:
    v19 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v20 = (void *)mlir::ValueRange::dereference_iterator(v68, 1);
  v21 = (void *)mlir::ValueRange::dereference_iterator(v68, 2);
  v22 = mlir::ValueRange::dereference_iterator(v68, 3);
  v23 = (uint64_t **)v63;
  v24 = *(void **)(*(_QWORD *)v19 + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v26 = (_QWORD *)v19;
  }
  else
  {
    v26 = 0;
  }
  v56 = v26;
  if (!v26)
  {
    v35 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Cannot use on a non-tensor input type");
    v19 = 0;
    goto LABEL_27;
  }
  if (*(_UNKNOWN **)(*v26 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_23;
  v27 = (void *)v22;
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v20;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    v54 = SingleInt;
    v55 = SingleInt & 0xFFFFFFFFFFFFFF00;
    v31 = v30;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v31 = 0;
  }
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v21;
  v36 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v36 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v36))
  {
    v37 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    v38 = v37 & 0xFFFFFFFFFFFFFF00;
    v39 = v37;
    v41 = v40;
  }
  else
  {
    v38 = 0;
    v41 = 0;
    v39 = 0;
  }
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v27;
  v42 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v42
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v42)
    || (v43 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70), !v31)
    || !v41
    || !v44)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v26);
    goto LABEL_22;
  }
  v45 = v43;
  v46 = (char *)(v39 | v38);
  v69 = v71;
  v70 = 0x400000000;
  Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  v49 = v48;
  v59 = (void **)v23;
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  if (v58 > 0x40)
  {
    v50 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v50) = (_DWORD)__p;
  }
  {
    v51 = (uint64_t)v69;
    v52 = v70;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v56);
    v19 = mlir::RankedTensorType::get(v51, v52, ElementType, 0);
    v35 = 1;
  }
  else
  {
    v19 = 0;
    v35 = 0;
  }
  if (v69 != v71)
    free(v69);
LABEL_27:
  if (!v35)
    return 0;
LABEL_23:
  v33 = *(_DWORD *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    v33 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthToSpace2DOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v19[0] = *(_QWORD *)(a1 + 24);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32))
      return 1;
    v19[0] = "'mps.depth_to_space_2d' op attribute 'block_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = (void *)*--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          operator delete[](v16);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.depth_to_space_2d' op requires attribute 'block_size'";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::SpaceToDepth2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t **v23;
  void *v24;
  _QWORD *v26;
  void *v27;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  unsigned __int8 v30;
  int v31;
  uint64_t ElementTypeOrSelf;
  unsigned int v33;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  void *Value;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ElementType;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *__p;
  unsigned int v58;
  void **v59;
  uint64_t v60;
  _BYTE v61[8];
  char v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[2];
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[6];

  v71[4] = *MEMORY[0x1E0C80C00];
  v68[0] = a4;
  v68[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v60 = a6;
  v61[0] = 0;
  v62 = 0;
  v63 = v16;
  v64 = a9;
  v65 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62)
      v62 = 0;
    mlir::OperationName::OperationName(v61, "mps.space_to_depth_2d", 21, Context);
    v62 = 1;
  }
  v66 = a4;
  v67 = a5;
  if (a5 < 4
    || (v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::SpaceToDepth2DOpAdaptor::verify((uint64_t)&v60, v18)))
  {
    ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_22:
    v19 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v20 = (void *)mlir::ValueRange::dereference_iterator(v68, 1);
  v21 = (void *)mlir::ValueRange::dereference_iterator(v68, 2);
  v22 = mlir::ValueRange::dereference_iterator(v68, 3);
  v23 = (uint64_t **)v63;
  v24 = *(void **)(*(_QWORD *)v19 + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v26 = (_QWORD *)v19;
  }
  else
  {
    v26 = 0;
  }
  v56 = v26;
  if (!v26)
  {
    v35 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Cannot use on a non-tensor input type");
    v19 = 0;
    goto LABEL_27;
  }
  if (*(_UNKNOWN **)(*v26 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_23;
  v27 = (void *)v22;
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v20;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    v54 = SingleInt;
    v55 = SingleInt & 0xFFFFFFFFFFFFFF00;
    v31 = v30;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v31 = 0;
  }
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v21;
  v36 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v36 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v36))
  {
    v37 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    v38 = v37 & 0xFFFFFFFFFFFFFF00;
    v39 = v37;
    v41 = v40;
  }
  else
  {
    v38 = 0;
    v41 = 0;
    v39 = 0;
  }
  v69 = 0;
  v70 = 0;
  v59 = (void **)&v69;
  __p = v27;
  v42 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v42
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v42)
    || (v43 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70), !v31)
    || !v41
    || !v44)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v26);
    goto LABEL_22;
  }
  v45 = v43;
  v46 = (char *)(v39 | v38);
  v69 = v71;
  v70 = 0x400000000;
  Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  v49 = v48;
  v59 = (void **)v23;
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  if (v58 > 0x40)
  {
    v50 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v50) = (_DWORD)__p;
  }
  {
    v51 = (uint64_t)v69;
    v52 = v70;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v56);
    v19 = mlir::RankedTensorType::get(v51, v52, ElementType, 0);
    v35 = 1;
  }
  else
  {
    v19 = 0;
    v35 = 0;
  }
  if (v69 != v71)
    free(v69);
LABEL_27:
  if (!v35)
    return 0;
LABEL_23:
  v33 = *(_DWORD *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    v33 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SpaceToDepth2DOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v19[0] = *(_QWORD *)(a1 + 24);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32))
      return 1;
    v19[0] = "'mps.space_to_depth_2d' op attribute 'block_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = (void *)*--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          operator delete[](v16);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.space_to_depth_2d' op requires attribute 'block_size'";
    v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::DepthToSpace2DOp::verify(mlir::mps::DepthToSpace2DOp *this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  const void **v4;
  const void **v5;
  const void **v6;
  void *v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Value;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void ***v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  void ***v47;
  char *v48;
  char *v49;
  __int128 v50;
  void ***v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  void ***v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  void ***v61;
  char *v62;
  char *v63;
  __int128 v64;
  _QWORD **v65;
  _QWORD **v66;
  void *v67;
  _QWORD *v68;
  void ***v69;
  char *v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  void ***v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  void ***v79;
  char *v80;
  char *v81;
  __int128 v82;
  _QWORD **v83;
  _QWORD **v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void ***v91;
  char *v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  void ***v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  void ***v101;
  char *v102;
  char *v103;
  __int128 v104;
  _QWORD **v105;
  _QWORD **v106;
  void *v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  void ***v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  void ***v116;
  char *v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  void ***v121;
  char *v122;
  char *v123;
  __int128 v124;
  _QWORD **v125;
  _QWORD **v126;
  void *v127;
  _QWORD *v128;
  void *v129;
  void *v130;
  void ***v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  void ***v136;
  char *v137;
  char *v138;
  __int128 v139;
  _QWORD **v140;
  _QWORD **v141;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  void ***v146;
  char *v147;
  char *v148;
  __int128 v149;
  uint64_t v150;
  void ***v151;
  char *v152;
  char *v153;
  __int128 v154;
  void ***v155;
  char *v156;
  char *v157;
  __int128 v158;
  uint64_t v159;
  void ***v160;
  char *v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  void ***v165;
  char *v166;
  char *v167;
  __int128 v168;
  _QWORD **v169;
  _QWORD **v170;
  void *v171;
  _QWORD *v172;
  void *v173;
  void *v174;
  void ***v175;
  char *v176;
  char *v177;
  __int128 v178;
  uint64_t v179;
  void ***v180;
  char *v181;
  char *v182;
  __int128 v183;
  void ***v184;
  char *v185;
  char *v186;
  __int128 v187;
  uint64_t v188;
  void ***v189;
  char *v190;
  char *v191;
  __int128 v192;
  uint64_t v193;
  void ***v194;
  char *v195;
  char *v196;
  __int128 v197;
  _QWORD **v198;
  _QWORD **v199;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  int64_t v204;
  void ***v205;
  char *v206;
  char *v207;
  __int128 v208;
  uint64_t v209;
  void ***v210;
  char *v211;
  char *v212;
  __int128 v213;
  uint64_t v214;
  void ***v215;
  char *v216;
  char *v217;
  __int128 v218;
  uint64_t v219;
  void ***v220;
  char *v221;
  char *v222;
  __int128 v223;
  uint64_t v224;
  void ***v225;
  char *v226;
  char *v227;
  __int128 v228;
  _QWORD **v229;
  _QWORD **v230;
  void *v231;
  _QWORD *v232;
  void *v233;
  void *v234;
  unint64_t v236;
  unint64_t v237;
  BOOL v238;
  unint64_t v239;
  unint64_t v240;
  BOOL v241;
  unint64_t v242;
  BOOL v243;
  unint64_t v244;
  unint64_t v245;
  BOOL v246;
  unint64_t v247;
  BOOL v248;
  unint64_t v249;
  BOOL v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  BOOL v254;
  unint64_t v255;
  BOOL v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  BOOL v260;
  unint64_t v261;
  unint64_t v262;
  BOOL v263;
  unint64_t v264;
  unint64_t v265;
  BOOL v266;
  unint64_t v267;
  BOOL v268;
  unint64_t v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  BOOL v274;
  unint64_t v275;
  BOOL v276;
  unint64_t v277;
  BOOL v278;
  unint64_t v279;
  BOOL v280;
  unint64_t v281;
  BOOL v282;
  unint64_t v283;
  BOOL v284;
  unint64_t v285;
  BOOL v286;
  int64_t v287;
  int64_t v288;
  int64_t v289;
  int64_t v290;
  int64_t v291;
  int64_t v292;
  int64_t v293;
  int64_t v294;
  int64_t v295;
  int64_t v296;
  int64_t v297;
  int64_t v298;
  int64_t v299;
  int64_t v300;
  int64_t v301;
  int64_t v302;
  int64_t v303;
  int64_t v304;
  int64_t v305;
  int64_t v306;
  int64_t v307;
  int64_t v308;
  int64_t v309;
  int64_t v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  int64_t v314;
  int64_t v315;
  int64_t v316;
  int64_t v317;
  const void **v318[4];
  __int16 v319;
  unint64_t v320;
  uint64_t *v321;
  void **v322;
  unint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  void *v327;
  unsigned int v328;
  unsigned int v329;
  _BYTE v330[96];
  void *v331;
  _QWORD *v332;
  void *__p;
  _QWORD **v334;
  char v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  v321 = (uint64_t *)v1;
  v2 = *(_QWORD **)(v1 + 72);
  v3 = *(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = (const void **)v2[7];
  v5 = (const void **)v2[11];
  v6 = (const void **)v2[15];
  v7 = *(void **)(*(_QWORD *)v3 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v320 = v3;
  if (!v3)
  {
    v318[0] = (const void **)"Cannot use on a non-tensor input type";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v334;
        v13 = __p;
        if (v334 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v334 = v11;
        operator delete(v13);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v15 = v332;
      v16 = v331;
      if (v332 == v331)
        goto LABEL_234;
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return 1;
  v318[0] = *(const void ***)(v1 + 80);
  mlir::IntegerAttr::getValue(v318, (llvm::APInt *)&v325);
  if (v326 > 0x40)
  {
    v9 = *(unsigned int *)v325;
    operator delete[](v325);
  }
  else
  {
    v9 = v325;
  }
  v325 = 0;
  v326 = 0;
  v322 = &v325;
  v318[0] = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
    v21 = SingleInt & 0xFFFFFFFFFFFFFF00;
    v22 = SingleInt;
    v24 = v23;
  }
  else
  {
    v21 = 0;
    v24 = 0;
    v22 = 0;
  }
  v325 = 0;
  v326 = 0;
  v322 = &v325;
  v318[0] = v5;
  v25 = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (v25 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, v25))
  {
    v26 = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
    v27 = v26 & 0xFFFFFFFFFFFFFF00;
    v28 = v26;
    v30 = v29;
  }
  else
  {
    v27 = 0;
    v30 = 0;
    v28 = 0;
  }
  v325 = 0;
  v326 = 0;
  v322 = &v325;
  v318[0] = v6;
  v31 = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (!v31 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, v31))
    return 1;
  v32 = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
  v10 = 1;
  if (!v24 || !v30 || !v33)
    return v10;
  v34 = v32;
  v35 = v22 | v21;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v320);
  v38 = (const char *)v37;
  v39 = (v37 & (v35 >> 63)) + v35;
  if (v39 < 0 || v37 <= v39)
  {
    v318[0] = (const void **)"invalid width_axis (";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      v323 = v35;
      v69 = &v322;
      v70 = (char *)v327;
      if (v328 >= v329)
      {
        v236 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          v287 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v236, 24);
          v70 = (char *)v327;
          v69 = (void ***)((char *)v327 + v287);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v236, 24);
          v69 = &v322;
          v70 = (char *)v327;
        }
      }
      v71 = &v70[24 * v328];
      v72 = *(_OWORD *)v69;
      *((_QWORD *)v71 + 2) = v69[2];
      *(_OWORD *)v71 = v72;
      v73 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        v323 = (unint64_t)") for shape of rank ";
        v324 = 20;
        v74 = &v322;
        v75 = (char *)v327;
        if (v73 >= v329)
        {
          v237 = v73 + 1;
          v238 = (char *)v327 + 24 * v73 > (char *)&v322;
          if (v327 <= &v322 && v238)
          {
            v288 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v237, 24);
            v75 = (char *)v327;
            v74 = (void ***)((char *)v327 + v288);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v237, 24);
            v74 = &v322;
            v75 = (char *)v327;
          }
        }
        v76 = &v75[24 * v328];
        v77 = *(_OWORD *)v74;
        *((_QWORD *)v76 + 2) = v74[2];
        *(_OWORD *)v76 = v77;
        v78 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          v323 = (unint64_t)v38;
          v79 = &v322;
          v80 = (char *)v327;
          if (v78 >= v329)
          {
            v240 = v78 + 1;
            v241 = (char *)v327 + 24 * v78 > (char *)&v322;
            if (v327 <= &v322 && v241)
            {
              v290 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v240, 24);
              v80 = (char *)v327;
              v79 = (void ***)((char *)v327 + v290);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v240, 24);
              v79 = &v322;
              v80 = (char *)v327;
            }
          }
          v81 = &v80[24 * v328];
          v82 = *(_OWORD *)v79;
          *((_QWORD *)v81 + 2) = v79[2];
          *(_OWORD *)v81 = v82;
          ++v328;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v83 = (_QWORD **)__p;
      if (__p)
      {
        v84 = v334;
        v85 = __p;
        if (v334 != __p)
        {
          do
            v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
          while (v84 != v83);
          v85 = __p;
        }
        v334 = v83;
        operator delete(v85);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v86 = v332;
      v16 = v331;
      if (v332 == v331)
        goto LABEL_234;
      do
      {
        v88 = (void *)*--v86;
        v87 = v88;
        *v86 = 0;
        if (v88)
          operator delete[](v87);
      }
      while (v86 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  v40 = (v37 & ((uint64_t)(v28 | v27) >> 63)) + (v28 | v27);
  if (v40 < 0 || v37 <= v40)
  {
    v318[0] = (const void **)"invalid height_axis (";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      v323 = v28 | v27;
      v91 = &v322;
      v92 = (char *)v327;
      if (v328 >= v329)
      {
        v239 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          v289 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v239, 24);
          v92 = (char *)v327;
          v91 = (void ***)((char *)v327 + v289);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v239, 24);
          v91 = &v322;
          v92 = (char *)v327;
        }
      }
      v93 = &v92[24 * v328];
      v94 = *(_OWORD *)v91;
      *((_QWORD *)v93 + 2) = v91[2];
      *(_OWORD *)v93 = v94;
      v95 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        v323 = (unint64_t)") for shape of rank ";
        v324 = 20;
        v96 = &v322;
        v97 = (char *)v327;
        if (v95 >= v329)
        {
          v242 = v95 + 1;
          v243 = (char *)v327 + 24 * v95 > (char *)&v322;
          if (v327 <= &v322 && v243)
          {
            v291 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v242, 24);
            v97 = (char *)v327;
            v96 = (void ***)((char *)v327 + v291);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v242, 24);
            v96 = &v322;
            v97 = (char *)v327;
          }
        }
        v98 = &v97[24 * v328];
        v99 = *(_OWORD *)v96;
        *((_QWORD *)v98 + 2) = v96[2];
        *(_OWORD *)v98 = v99;
        v100 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          v323 = (unint64_t)v38;
          v101 = &v322;
          v102 = (char *)v327;
          if (v100 >= v329)
          {
            v245 = v100 + 1;
            v246 = (char *)v327 + 24 * v100 > (char *)&v322;
            if (v327 <= &v322 && v246)
            {
              v293 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v245, 24);
              v102 = (char *)v327;
              v101 = (void ***)((char *)v327 + v293);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v245, 24);
              v101 = &v322;
              v102 = (char *)v327;
            }
          }
          v103 = &v102[24 * v328];
          v104 = *(_OWORD *)v101;
          *((_QWORD *)v103 + 2) = v101[2];
          *(_OWORD *)v103 = v104;
          ++v328;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v105 = (_QWORD **)__p;
      if (__p)
      {
        v106 = v334;
        v107 = __p;
        if (v334 != __p)
        {
          do
            v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
          while (v106 != v105);
          v107 = __p;
        }
        v334 = v105;
        operator delete(v107);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v108 = v332;
      v16 = v331;
      if (v332 == v331)
        goto LABEL_234;
      do
      {
        v110 = (void *)*--v108;
        v109 = v110;
        *v108 = 0;
        if (v110)
          operator delete[](v109);
      }
      while (v108 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  v41 = (v37 & (v34 >> 63)) + v34;
  if (v41 < 0 || v37 <= v41)
  {
    v318[0] = (const void **)"invalid depth_axis (";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      v323 = v34;
      v111 = &v322;
      v112 = (char *)v327;
      if (v328 >= v329)
      {
        v244 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          v292 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v244, 24);
          v112 = (char *)v327;
          v111 = (void ***)((char *)v327 + v292);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v244, 24);
          v111 = &v322;
          v112 = (char *)v327;
        }
      }
      v113 = &v112[24 * v328];
      v114 = *(_OWORD *)v111;
      *((_QWORD *)v113 + 2) = v111[2];
      *(_OWORD *)v113 = v114;
      v115 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        v323 = (unint64_t)") for shape of rank ";
        v324 = 20;
        v116 = &v322;
        v117 = (char *)v327;
        if (v115 >= v329)
        {
          v247 = v115 + 1;
          v248 = (char *)v327 + 24 * v115 > (char *)&v322;
          if (v327 <= &v322 && v248)
          {
            v294 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v247, 24);
            v117 = (char *)v327;
            v116 = (void ***)((char *)v327 + v294);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v247, 24);
            v116 = &v322;
            v117 = (char *)v327;
          }
        }
        v118 = &v117[24 * v328];
        v119 = *(_OWORD *)v116;
        *((_QWORD *)v118 + 2) = v116[2];
        *(_OWORD *)v118 = v119;
        v120 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          v323 = (unint64_t)v38;
          v121 = &v322;
          v122 = (char *)v327;
          if (v120 >= v329)
          {
            v249 = v120 + 1;
            v250 = (char *)v327 + 24 * v120 > (char *)&v322;
            if (v327 <= &v322 && v250)
            {
              v295 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v249, 24);
              v122 = (char *)v327;
              v121 = (void ***)((char *)v327 + v295);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v249, 24);
              v121 = &v322;
              v122 = (char *)v327;
            }
          }
          v123 = &v122[24 * v328];
          v124 = *(_OWORD *)v121;
          *((_QWORD *)v123 + 2) = v121[2];
          *(_OWORD *)v123 = v124;
          ++v328;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v125 = (_QWORD **)__p;
      if (__p)
      {
        v126 = v334;
        v127 = __p;
        if (v334 != __p)
        {
          do
            v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
          while (v126 != v125);
          v127 = __p;
        }
        v334 = v125;
        operator delete(v127);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v128 = v332;
      v16 = v331;
      if (v332 == v331)
        goto LABEL_234;
      do
      {
        v130 = (void *)*--v128;
        v129 = v130;
        *v128 = 0;
        if (v130)
          operator delete[](v129);
      }
      while (v128 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (!v9)
  {
    v318[0] = (const void **)"invalid block_size (";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      v323 = 0;
      v131 = &v322;
      v132 = (char *)v327;
      if (v328 >= v329)
      {
        v251 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          v296 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v251, 24);
          v132 = (char *)v327;
          v131 = (void ***)((char *)v327 + v296);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v251, 24);
          v131 = &v322;
          v132 = (char *)v327;
        }
      }
      v133 = &v132[24 * v328];
      v134 = *(_OWORD *)v131;
      *((_QWORD *)v133 + 2) = v131[2];
      *(_OWORD *)v133 = v134;
      v135 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        v323 = (unint64_t)")";
        v324 = 1;
        v136 = &v322;
        v137 = (char *)v327;
        if (v135 >= v329)
        {
          v253 = v135 + 1;
          v254 = (char *)v327 + 24 * v135 > (char *)&v322;
          if (v327 <= &v322 && v254)
          {
            v298 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v253, 24);
            v137 = (char *)v327;
            v136 = (void ***)((char *)v327 + v298);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v253, 24);
            v136 = &v322;
            v137 = (char *)v327;
          }
        }
        v138 = &v137[24 * v328];
        v139 = *(_OWORD *)v136;
        *((_QWORD *)v138 + 2) = v136[2];
        *(_OWORD *)v138 = v139;
        ++v328;
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v140 = (_QWORD **)__p;
      if (__p)
      {
        v141 = v334;
        v142 = __p;
        if (v334 != __p)
        {
          do
            v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          v142 = __p;
        }
        v334 = v140;
        operator delete(v142);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v143 = v332;
      v16 = v331;
      if (v332 == v331)
        goto LABEL_234;
      do
      {
        v145 = (void *)*--v143;
        v144 = v145;
        *v143 = 0;
        if (v145)
          operator delete[](v144);
      }
      while (v143 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (v41 == v40)
  {
    v318[0] = (const void **)"Invalid degenerate axes: depth_axis (";
    v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      v323 = v34;
      v42 = &v322;
      v43 = (char *)v327;
      if (v328 >= v329)
      {
        v252 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          v297 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v252, 24);
          v43 = (char *)v327;
          v42 = (void ***)((char *)v327 + v297);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v252, 24);
          v42 = &v322;
          v43 = (char *)v327;
        }
      }
      v44 = &v43[24 * v328];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = v42[2];
      *(_OWORD *)v44 = v45;
      v46 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        v323 = (unint64_t)") height_axis (";
        v324 = 15;
        v47 = &v322;
        v48 = (char *)v327;
        if (v46 >= v329)
        {
          v255 = v46 + 1;
          v256 = (char *)v327 + 24 * v46 > (char *)&v322;
          if (v327 <= &v322 && v256)
          {
            v299 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v255, 24);
            v48 = (char *)v327;
            v47 = (void ***)((char *)v327 + v299);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v255, 24);
            v47 = &v322;
            v48 = (char *)v327;
          }
        }
        v49 = &v48[24 * v328];
        v50 = *(_OWORD *)v47;
        *((_QWORD *)v49 + 2) = v47[2];
        *(_OWORD *)v49 = v50;
        ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          v323 = v28 | v27;
          v51 = &v322;
          v52 = (char *)v327;
          if (v328 >= v329)
          {
            v258 = v328 + 1;
            if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
            {
              v301 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v258, 24);
              v52 = (char *)v327;
              v51 = (void ***)((char *)v327 + v301);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v258, 24);
              v51 = &v322;
              v52 = (char *)v327;
            }
          }
          v53 = &v52[24 * v328];
          v54 = *(_OWORD *)v51;
          *((_QWORD *)v53 + 2) = v51[2];
          *(_OWORD *)v53 = v54;
          v55 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 3;
            v323 = (unint64_t)") for shape of rank ";
            v324 = 20;
            v56 = &v322;
            v57 = (char *)v327;
            if (v55 >= v329)
            {
              v262 = v55 + 1;
              v263 = (char *)v327 + 24 * v55 > (char *)&v322;
              if (v327 <= &v322 && v263)
              {
                v304 = (char *)&v322 - (_BYTE *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v262, 24);
                v57 = (char *)v327;
                v56 = (void ***)((char *)v327 + v304);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v262, 24);
                v56 = &v322;
                v57 = (char *)v327;
              }
            }
            v58 = &v57[24 * v328];
            v59 = *(_OWORD *)v56;
            *((_QWORD *)v58 + 2) = v56[2];
            *(_OWORD *)v58 = v59;
            v60 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 2;
              v323 = (unint64_t)v38;
              v61 = &v322;
              v62 = (char *)v327;
              if (v60 >= v329)
              {
                v267 = v60 + 1;
                v268 = (char *)v327 + 24 * v60 > (char *)&v322;
                if (v327 <= &v322 && v268)
                {
                  v307 = (char *)&v322 - (_BYTE *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v267, 24);
                  v62 = (char *)v327;
                  v61 = (void ***)((char *)v327 + v307);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v267, 24);
                  v61 = &v322;
                  v62 = (char *)v327;
                }
              }
              v63 = &v62[24 * v328];
              v64 = *(_OWORD *)v61;
              *((_QWORD *)v63 + 2) = v61[2];
              *(_OWORD *)v63 = v64;
              ++v328;
            }
          }
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    if (v335)
    {
      v65 = (_QWORD **)__p;
      if (__p)
      {
        v66 = v334;
        v67 = __p;
        if (v334 != __p)
        {
          do
            v66 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v66 - 1);
          while (v66 != v65);
          v67 = __p;
        }
        v334 = v65;
        operator delete(v67);
      }
      v14 = v331;
      if (!v331)
        goto LABEL_235;
      v68 = v332;
      v16 = v331;
      if (v332 == v331)
      {
LABEL_234:
        v332 = v14;
        operator delete(v16);
LABEL_235:
        if (v327 != v330)
          free(v327);
        return v10;
      }
      do
      {
        v90 = (void *)*--v68;
        v89 = v90;
        *v68 = 0;
        if (v90)
          operator delete[](v89);
      }
      while (v68 != v14);
LABEL_233:
      v16 = v331;
      goto LABEL_234;
    }
    return v10;
  }
  if (v41 != v39)
  {
    if (v39 == v40)
    {
      v318[0] = (const void **)"Invalid degenerate axes: width_axis (";
      v319 = 259;
      mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
      if (v325)
      {
        LODWORD(v322) = 2;
        v323 = v35;
        v175 = &v322;
        v176 = (char *)v327;
        if (v328 >= v329)
        {
          v261 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            v303 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v261, 24);
            v176 = (char *)v327;
            v175 = (void ***)((char *)v327 + v303);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v261, 24);
            v175 = &v322;
            v176 = (char *)v327;
          }
        }
        v177 = &v176[24 * v328];
        v178 = *(_OWORD *)v175;
        *((_QWORD *)v177 + 2) = v175[2];
        *(_OWORD *)v177 = v178;
        v179 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          v323 = (unint64_t)") height_axis (";
          v324 = 15;
          v180 = &v322;
          v181 = (char *)v327;
          if (v179 >= v329)
          {
            v265 = v179 + 1;
            v266 = (char *)v327 + 24 * v179 > (char *)&v322;
            if (v327 <= &v322 && v266)
            {
              v306 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v265, 24);
              v181 = (char *)v327;
              v180 = (void ***)((char *)v327 + v306);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v265, 24);
              v180 = &v322;
              v181 = (char *)v327;
            }
          }
          v182 = &v181[24 * v328];
          v183 = *(_OWORD *)v180;
          *((_QWORD *)v182 + 2) = v180[2];
          *(_OWORD *)v182 = v183;
          ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            v323 = v28 | v27;
            v184 = &v322;
            v185 = (char *)v327;
            if (v328 >= v329)
            {
              v271 = v328 + 1;
              if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
              {
                v309 = (char *)&v322 - (_BYTE *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v271, 24);
                v185 = (char *)v327;
                v184 = (void ***)((char *)v327 + v309);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v271, 24);
                v184 = &v322;
                v185 = (char *)v327;
              }
            }
            v186 = &v185[24 * v328];
            v187 = *(_OWORD *)v184;
            *((_QWORD *)v186 + 2) = v184[2];
            *(_OWORD *)v186 = v187;
            v188 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 3;
              v323 = (unint64_t)") for shape of rank ";
              v324 = 20;
              v189 = &v322;
              v190 = (char *)v327;
              if (v188 >= v329)
              {
                v275 = v188 + 1;
                v276 = (char *)v327 + 24 * v188 > (char *)&v322;
                if (v327 <= &v322 && v276)
                {
                  v312 = (char *)&v322 - (_BYTE *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v275, 24);
                  v190 = (char *)v327;
                  v189 = (void ***)((char *)v327 + v312);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v275, 24);
                  v189 = &v322;
                  v190 = (char *)v327;
                }
              }
              v191 = &v190[24 * v328];
              v192 = *(_OWORD *)v189;
              *((_QWORD *)v191 + 2) = v189[2];
              *(_OWORD *)v191 = v192;
              v193 = ++v328;
              if (v325)
              {
                LODWORD(v322) = 2;
                v323 = (unint64_t)v38;
                v194 = &v322;
                v195 = (char *)v327;
                if (v193 >= v329)
                {
                  v279 = v193 + 1;
                  v280 = (char *)v327 + 24 * v193 > (char *)&v322;
                  if (v327 <= &v322 && v280)
                  {
                    v314 = (char *)&v322 - (_BYTE *)v327;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v279, 24);
                    v195 = (char *)v327;
                    v194 = (void ***)((char *)v327 + v314);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v279, 24);
                    v194 = &v322;
                    v195 = (char *)v327;
                  }
                }
                v196 = &v195[24 * v328];
                v197 = *(_OWORD *)v194;
                *((_QWORD *)v196 + 2) = v194[2];
                *(_OWORD *)v196 = v197;
                ++v328;
              }
            }
          }
        }
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
      if (v325)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
      if (v335)
      {
        v198 = (_QWORD **)__p;
        if (__p)
        {
          v199 = v334;
          v200 = __p;
          if (v334 != __p)
          {
            do
              v199 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v199 - 1);
            while (v199 != v198);
            v200 = __p;
          }
          v334 = v198;
          operator delete(v200);
        }
        v14 = v331;
        if (!v331)
          goto LABEL_235;
        v201 = v332;
        v16 = v331;
        if (v332 == v331)
          goto LABEL_234;
        do
        {
          v203 = (void *)*--v201;
          v202 = v203;
          *v201 = 0;
          if (v203)
            operator delete[](v202);
        }
        while (v201 != v14);
        goto LABEL_233;
      }
      return v10;
    }
    v204 = *(_QWORD *)(Value + 8 * v41);
    if (v204 != 0x8000000000000000 && v204 % (uint64_t)(v9 * (unint64_t)v9))
    {
      v318[0] = (const void **)"block_size (";
      v319 = 259;
      mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
      if (v325)
      {
        LODWORD(v322) = 2;
        v323 = v9;
        v205 = &v322;
        v206 = (char *)v327;
        if (v328 >= v329)
        {
          v272 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            v310 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v272, 24);
            v206 = (char *)v327;
            v205 = (void ***)((char *)v327 + v310);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v272, 24);
            v205 = &v322;
            v206 = (char *)v327;
          }
        }
        v207 = &v206[24 * v328];
        v208 = *(_OWORD *)v205;
        *((_QWORD *)v207 + 2) = v205[2];
        *(_OWORD *)v207 = v208;
        v209 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          v323 = (unint64_t)") squared (";
          v324 = 11;
          v210 = &v322;
          v211 = (char *)v327;
          if (v209 >= v329)
          {
            v277 = v209 + 1;
            v278 = (char *)v327 + 24 * v209 > (char *)&v322;
            if (v327 <= &v322 && v278)
            {
              v313 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v277, 24);
              v211 = (char *)v327;
              v210 = (void ***)((char *)v327 + v313);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v277, 24);
              v210 = &v322;
              v211 = (char *)v327;
            }
          }
          v212 = &v211[24 * v328];
          v213 = *(_OWORD *)v210;
          *((_QWORD *)v212 + 2) = v210[2];
          *(_OWORD *)v212 = v213;
          v214 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            v323 = v9 * (unint64_t)v9;
            v215 = &v322;
            v216 = (char *)v327;
            if (v214 >= v329)
            {
              v281 = v214 + 1;
              v282 = (char *)v327 + 24 * v214 > (char *)&v322;
              if (v327 <= &v322 && v282)
              {
                v315 = (char *)&v322 - (_BYTE *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v281, 24);
                v216 = (char *)v327;
                v215 = (void ***)((char *)v327 + v315);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v281, 24);
                v215 = &v322;
                v216 = (char *)v327;
              }
            }
            v217 = &v216[24 * v328];
            v218 = *(_OWORD *)v215;
            *((_QWORD *)v217 + 2) = v215[2];
            *(_OWORD *)v217 = v218;
            v219 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 3;
              v323 = (unint64_t)") must be multiple of depth ";
              v324 = 28;
              v220 = &v322;
              v221 = (char *)v327;
              if (v219 >= v329)
              {
                v283 = v219 + 1;
                v284 = (char *)v327 + 24 * v219 > (char *)&v322;
                if (v327 <= &v322 && v284)
                {
                  v316 = (char *)&v322 - (_BYTE *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v283, 24);
                  v221 = (char *)v327;
                  v220 = (void ***)((char *)v327 + v316);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v283, 24);
                  v220 = &v322;
                  v221 = (char *)v327;
                }
              }
              v222 = &v221[24 * v328];
              v223 = *(_OWORD *)v220;
              *((_QWORD *)v222 + 2) = v220[2];
              *(_OWORD *)v222 = v223;
              v224 = ++v328;
              if (v325)
              {
                LODWORD(v322) = 2;
                v323 = v204;
                v225 = &v322;
                v226 = (char *)v327;
                if (v224 >= v329)
                {
                  v285 = v224 + 1;
                  v286 = (char *)v327 + 24 * v224 > (char *)&v322;
                  if (v327 <= &v322 && v286)
                  {
                    v317 = (char *)&v322 - (_BYTE *)v327;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v285, 24);
                    v226 = (char *)v327;
                    v225 = (void ***)((char *)v327 + v317);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v285, 24);
                    v225 = &v322;
                    v226 = (char *)v327;
                  }
                }
                v227 = &v226[24 * v328];
                v228 = *(_OWORD *)v225;
                *((_QWORD *)v227 + 2) = v225[2];
                *(_OWORD *)v227 = v228;
                ++v328;
              }
            }
          }
        }
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
      if (v325)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
      if (v335)
      {
        v229 = (_QWORD **)__p;
        if (__p)
        {
          v230 = v334;
          v231 = __p;
          if (v334 != __p)
          {
            do
              v230 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v230 - 1);
            while (v230 != v229);
            v231 = __p;
          }
          v334 = v229;
          operator delete(v231);
        }
        v14 = v331;
        if (!v331)
          goto LABEL_235;
        v232 = v332;
        v16 = v331;
        if (v332 == v331)
          goto LABEL_234;
        do
        {
          v234 = (void *)*--v232;
          v233 = v234;
          *v232 = 0;
          if (v234)
            operator delete[](v233);
        }
        while (v232 != v14);
        goto LABEL_233;
      }
      return v10;
    }
    return 1;
  }
  v318[0] = (const void **)"Invalid degenerate axes: depth_axis (";
  v319 = 259;
  mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
  if (v325)
  {
    LODWORD(v322) = 2;
    v323 = v34;
    v146 = &v322;
    v147 = (char *)v327;
    if (v328 >= v329)
    {
      v257 = v328 + 1;
      if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
      {
        v300 = (char *)&v322 - (_BYTE *)v327;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v257, 24);
        v147 = (char *)v327;
        v146 = (void ***)((char *)v327 + v300);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v257, 24);
        v146 = &v322;
        v147 = (char *)v327;
      }
    }
    v148 = &v147[24 * v328];
    v149 = *(_OWORD *)v146;
    *((_QWORD *)v148 + 2) = v146[2];
    *(_OWORD *)v148 = v149;
    v150 = ++v328;
    if (v325)
    {
      LODWORD(v322) = 3;
      v323 = (unint64_t)") width_axis (";
      v324 = 14;
      v151 = &v322;
      v152 = (char *)v327;
      if (v150 >= v329)
      {
        v259 = v150 + 1;
        v260 = (char *)v327 + 24 * v150 > (char *)&v322;
        if (v327 <= &v322 && v260)
        {
          v302 = (char *)&v322 - (_BYTE *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v259, 24);
          v152 = (char *)v327;
          v151 = (void ***)((char *)v327 + v302);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v259, 24);
          v151 = &v322;
          v152 = (char *)v327;
        }
      }
      v153 = &v152[24 * v328];
      v154 = *(_OWORD *)v151;
      *((_QWORD *)v153 + 2) = v151[2];
      *(_OWORD *)v153 = v154;
      ++v328;
      if (v325)
      {
        LODWORD(v322) = 2;
        v323 = v35;
        v155 = &v322;
        v156 = (char *)v327;
        if (v328 >= v329)
        {
          v264 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            v305 = (char *)&v322 - (_BYTE *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v264, 24);
            v156 = (char *)v327;
            v155 = (void ***)((char *)v327 + v305);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v264, 24);
            v155 = &v322;
            v156 = (char *)v327;
          }
        }
        v157 = &v156[24 * v328];
        v158 = *(_OWORD *)v155;
        *((_QWORD *)v157 + 2) = v155[2];
        *(_OWORD *)v157 = v158;
        v159 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          v323 = (unint64_t)") for shape of rank ";
          v324 = 20;
          v160 = &v322;
          v161 = (char *)v327;
          if (v159 >= v329)
          {
            v269 = v159 + 1;
            v270 = (char *)v327 + 24 * v159 > (char *)&v322;
            if (v327 <= &v322 && v270)
            {
              v308 = (char *)&v322 - (_BYTE *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v269, 24);
              v161 = (char *)v327;
              v160 = (void ***)((char *)v327 + v308);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v269, 24);
              v160 = &v322;
              v161 = (char *)v327;
            }
          }
          v162 = &v161[24 * v328];
          v163 = *(_OWORD *)v160;
          *((_QWORD *)v162 + 2) = v160[2];
          *(_OWORD *)v162 = v163;
          v164 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            v323 = (unint64_t)v38;
            v165 = &v322;
            v166 = (char *)v327;
            if (v164 >= v329)
            {
              v273 = v164 + 1;
              v274 = (char *)v327 + 24 * v164 > (char *)&v322;
              if (v327 <= &v322 && v274)
              {
                v311 = (char *)&v322 - (_BYTE *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v273, 24);
                v166 = (char *)v327;
                v165 = (void ***)((char *)v327 + v311);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v273, 24);
                v165 = &v322;
                v166 = (char *)v327;
              }
            }
            v167 = &v166[24 * v328];
            v168 = *(_OWORD *)v165;
            *((_QWORD *)v167 + 2) = v165[2];
            *(_OWORD *)v167 = v168;
            ++v328;
          }
        }
      }
    }
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
  if (v325)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
  if (v335)
  {
    v169 = (_QWORD **)__p;
    if (__p)
    {
      v170 = v334;
      v171 = __p;
      if (v334 != __p)
      {
        do
          v170 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v170 - 1);
        while (v170 != v169);
        v171 = __p;
      }
      v334 = v169;
      operator delete(v171);
    }
    v14 = v331;
    if (!v331)
      goto LABEL_235;
    v172 = v332;
    v16 = v331;
    if (v332 == v331)
      goto LABEL_234;
    do
    {
      v174 = (void *)*--v172;
      v173 = v174;
      *v172 = 0;
      if (v174)
        operator delete[](v173);
    }
    while (v172 != v14);
    goto LABEL_233;
  }
  return v10;
}

uint64_t mlir::mps::SpaceToDepth2DOp::verify(mlir::mps::SpaceToDepth2DOp *this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  const void **v4;
  const void **v5;
  const void **v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Value;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void ***v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  void ***v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  void ***v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  void ***v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  void ***v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  void ***v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  void ***v75;
  char *v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  void ***v80;
  char *v81;
  char *v82;
  __int128 v83;
  _QWORD **v84;
  _QWORD **v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void ***v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  void ***v97;
  char *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  void ***v102;
  char *v103;
  char *v104;
  __int128 v105;
  _QWORD **v106;
  _QWORD **v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  void ***v112;
  char *v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  void ***v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  void ***v122;
  char *v123;
  char *v124;
  __int128 v125;
  _QWORD **v126;
  _QWORD **v127;
  void *v128;
  _QWORD *v129;
  void *v130;
  void *v131;
  void ***v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t v136;
  void ***v137;
  char *v138;
  char *v139;
  __int128 v140;
  _QWORD **v141;
  _QWORD **v142;
  void *v143;
  _QWORD *v144;
  void *v145;
  void *v146;
  void ***v147;
  char *v148;
  char *v149;
  __int128 v150;
  uint64_t v151;
  void ***v152;
  char *v153;
  char *v154;
  __int128 v155;
  void ***v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  void ***v161;
  char *v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  void ***v166;
  char *v167;
  char *v168;
  __int128 v169;
  _QWORD **v170;
  _QWORD **v171;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  void ***v176;
  char *v177;
  char *v178;
  __int128 v179;
  uint64_t v180;
  void ***v181;
  char *v182;
  char *v183;
  __int128 v184;
  uint64_t v185;
  void ***v186;
  char *v187;
  char *v188;
  __int128 v189;
  uint64_t v190;
  void ***v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  void ***v196;
  char *v197;
  char *v198;
  __int128 v199;
  _QWORD **v200;
  _QWORD **v201;
  void *v202;
  _QWORD *v203;
  void *v204;
  void *v205;
  const char *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  void ***v210;
  char *v211;
  char *v212;
  __int128 v213;
  uint64_t v214;
  void ***v215;
  char *v216;
  char *v217;
  __int128 v218;
  uint64_t v219;
  void ***v220;
  char *v221;
  char *v222;
  __int128 v223;
  _QWORD **v224;
  _QWORD **v225;
  void *v226;
  _QWORD *v227;
  void *v228;
  void *v229;
  void ***v230;
  char *v231;
  char *v232;
  __int128 v233;
  uint64_t v234;
  void ***v235;
  char *v236;
  char *v237;
  __int128 v238;
  uint64_t v239;
  void ***v240;
  char *v241;
  char *v242;
  __int128 v243;
  _QWORD **v244;
  _QWORD **v245;
  void *v246;
  _QWORD *v247;
  void *v248;
  void *v249;
  unint64_t v251;
  unint64_t v252;
  BOOL v253;
  unint64_t v254;
  unint64_t v255;
  BOOL v256;
  unint64_t v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  BOOL v261;
  unint64_t v262;
  BOOL v263;
  unint64_t v264;
  BOOL v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  BOOL v269;
  unint64_t v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  BOOL v274;
  unint64_t v275;
  BOOL v276;
  unint64_t v277;
  unint64_t v278;
  BOOL v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  unint64_t v283;
  BOOL v284;
  unint64_t v285;
  unint64_t v286;
  BOOL v287;
  unint64_t v288;
  BOOL v289;
  unint64_t v290;
  BOOL v291;
  unint64_t v292;
  BOOL v293;
  unint64_t v294;
  unint64_t v295;
  BOOL v296;
  unint64_t v297;
  BOOL v298;
  unint64_t v299;
  BOOL v300;
  unint64_t v301;
  BOOL v302;
  unint64_t v303;
  BOOL v304;
  int64_t v305;
  int64_t v306;
  int64_t v307;
  int64_t v308;
  int64_t v309;
  int64_t v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  int64_t v314;
  int64_t v315;
  int64_t v316;
  int64_t v317;
  int64_t v318;
  int64_t v319;
  int64_t v320;
  int64_t v321;
  int64_t v322;
  int64_t v323;
  int64_t v324;
  int64_t v325;
  int64_t v326;
  int64_t v327;
  int64_t v328;
  int64_t v329;
  int64_t v330;
  int64_t v331;
  int64_t v332;
  int64_t v333;
  int64_t v334;
  int64_t v335;
  int64_t v336;
  const void **v337[4];
  __int16 v338;
  unint64_t v339;
  uint64_t *v340;
  void **v341;
  const char *v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  void *v346;
  unsigned int v347;
  unsigned int v348;
  _BYTE v349[96];
  void *v350;
  _QWORD *v351;
  void *__p;
  _QWORD **v353;
  char v354;
  uint64_t v355;

  v355 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  v340 = (uint64_t *)v1;
  v2 = *(_QWORD **)(v1 + 72);
  v3 = *(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = (const void **)v2[7];
  v5 = (const void **)v2[11];
  v6 = (const void **)v2[15];
  v7 = *(void **)(*(_QWORD *)v3 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v339 = v3;
  if (!v3)
  {
    v337[0] = (const void **)"Cannot use on a non-tensor input type";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v353;
        v13 = __p;
        if (v353 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v353 = v11;
        operator delete(v13);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v15 = v351;
      v16 = v350;
      if (v351 == v350)
        goto LABEL_258;
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return 1;
  v337[0] = *(const void ***)(v1 + 80);
  mlir::IntegerAttr::getValue(v337, (llvm::APInt *)&v344);
  if (v345 > 0x40)
  {
    v9 = *(unsigned int *)v344;
    operator delete[](v344);
  }
  else
  {
    v9 = v344;
  }
  v344 = 0;
  v345 = 0;
  v341 = &v344;
  v337[0] = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
    v21 = SingleInt & 0xFFFFFFFFFFFFFF00;
    v22 = SingleInt;
    v24 = v23;
  }
  else
  {
    v21 = 0;
    v24 = 0;
    v22 = 0;
  }
  v344 = 0;
  v345 = 0;
  v341 = &v344;
  v337[0] = v5;
  v25 = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (v25 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, v25))
  {
    v26 = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
    v27 = v26 & 0xFFFFFFFFFFFFFF00;
    v28 = v26;
    v30 = v29;
  }
  else
  {
    v27 = 0;
    v30 = 0;
    v28 = 0;
  }
  v344 = 0;
  v345 = 0;
  v341 = &v344;
  v337[0] = v6;
  v31 = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (!v31 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, v31))
    return 1;
  v32 = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
  v10 = 1;
  if (!v24 || !v30 || !v33)
    return v10;
  v34 = v32;
  v35 = v22 | v21;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v339);
  v38 = (const char *)v37;
  v39 = (v37 & (v35 >> 63)) + v35;
  if (v39 < 0 || v37 <= v39)
  {
    v337[0] = (const void **)"invalid width_axis (";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v35;
      v70 = &v341;
      v71 = (char *)v346;
      if (v347 >= v348)
      {
        v251 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          v305 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v251, 24);
          v71 = (char *)v346;
          v70 = (void ***)((char *)v346 + v305);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v251, 24);
          v70 = &v341;
          v71 = (char *)v346;
        }
      }
      v72 = &v71[24 * v347];
      v73 = *(_OWORD *)v70;
      *((_QWORD *)v72 + 2) = v70[2];
      *(_OWORD *)v72 = v73;
      v74 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        v343 = 20;
        v75 = &v341;
        v76 = (char *)v346;
        if (v74 >= v348)
        {
          v252 = v74 + 1;
          v253 = (char *)v346 + 24 * v74 > (char *)&v341;
          if (v346 <= &v341 && v253)
          {
            v306 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v252, 24);
            v76 = (char *)v346;
            v75 = (void ***)((char *)v346 + v306);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v252, 24);
            v75 = &v341;
            v76 = (char *)v346;
          }
        }
        v77 = &v76[24 * v347];
        v78 = *(_OWORD *)v75;
        *((_QWORD *)v77 + 2) = v75[2];
        *(_OWORD *)v77 = v78;
        v79 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          v80 = &v341;
          v81 = (char *)v346;
          if (v79 >= v348)
          {
            v255 = v79 + 1;
            v256 = (char *)v346 + 24 * v79 > (char *)&v341;
            if (v346 <= &v341 && v256)
            {
              v308 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v255, 24);
              v81 = (char *)v346;
              v80 = (void ***)((char *)v346 + v308);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v255, 24);
              v80 = &v341;
              v81 = (char *)v346;
            }
          }
          v82 = &v81[24 * v347];
          v83 = *(_OWORD *)v80;
          *((_QWORD *)v82 + 2) = v80[2];
          *(_OWORD *)v82 = v83;
          ++v347;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v84 = (_QWORD **)__p;
      if (__p)
      {
        v85 = v353;
        v86 = __p;
        if (v353 != __p)
        {
          do
            v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
          while (v85 != v84);
          v86 = __p;
        }
        v353 = v84;
        operator delete(v86);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v87 = v351;
      v16 = v350;
      if (v351 == v350)
        goto LABEL_258;
      do
      {
        v89 = (void *)*--v87;
        v88 = v89;
        *v87 = 0;
        if (v89)
          operator delete[](v88);
      }
      while (v87 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  v40 = (v37 & ((uint64_t)(v28 | v27) >> 63)) + (v28 | v27);
  if (v40 < 0 || v37 <= v40)
  {
    v337[0] = (const void **)"invalid height_axis (";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)(v28 | v27);
      v92 = &v341;
      v93 = (char *)v346;
      if (v347 >= v348)
      {
        v254 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          v307 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v254, 24);
          v93 = (char *)v346;
          v92 = (void ***)((char *)v346 + v307);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v254, 24);
          v92 = &v341;
          v93 = (char *)v346;
        }
      }
      v94 = &v93[24 * v347];
      v95 = *(_OWORD *)v92;
      *((_QWORD *)v94 + 2) = v92[2];
      *(_OWORD *)v94 = v95;
      v96 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        v343 = 20;
        v97 = &v341;
        v98 = (char *)v346;
        if (v96 >= v348)
        {
          v257 = v96 + 1;
          v258 = (char *)v346 + 24 * v96 > (char *)&v341;
          if (v346 <= &v341 && v258)
          {
            v309 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v257, 24);
            v98 = (char *)v346;
            v97 = (void ***)((char *)v346 + v309);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v257, 24);
            v97 = &v341;
            v98 = (char *)v346;
          }
        }
        v99 = &v98[24 * v347];
        v100 = *(_OWORD *)v97;
        *((_QWORD *)v99 + 2) = v97[2];
        *(_OWORD *)v99 = v100;
        v101 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          v102 = &v341;
          v103 = (char *)v346;
          if (v101 >= v348)
          {
            v260 = v101 + 1;
            v261 = (char *)v346 + 24 * v101 > (char *)&v341;
            if (v346 <= &v341 && v261)
            {
              v311 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v260, 24);
              v103 = (char *)v346;
              v102 = (void ***)((char *)v346 + v311);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v260, 24);
              v102 = &v341;
              v103 = (char *)v346;
            }
          }
          v104 = &v103[24 * v347];
          v105 = *(_OWORD *)v102;
          *((_QWORD *)v104 + 2) = v102[2];
          *(_OWORD *)v104 = v105;
          ++v347;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v106 = (_QWORD **)__p;
      if (__p)
      {
        v107 = v353;
        v108 = __p;
        if (v353 != __p)
        {
          do
            v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
          while (v107 != v106);
          v108 = __p;
        }
        v353 = v106;
        operator delete(v108);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v109 = v351;
      v16 = v350;
      if (v351 == v350)
        goto LABEL_258;
      do
      {
        v111 = (void *)*--v109;
        v110 = v111;
        *v109 = 0;
        if (v111)
          operator delete[](v110);
      }
      while (v109 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  v41 = (v37 & (v34 >> 63)) + v34;
  if (v41 < 0 || v37 <= v41)
  {
    v337[0] = (const void **)"invalid depth_axis (";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v34;
      v112 = &v341;
      v113 = (char *)v346;
      if (v347 >= v348)
      {
        v259 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          v310 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v259, 24);
          v113 = (char *)v346;
          v112 = (void ***)((char *)v346 + v310);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v259, 24);
          v112 = &v341;
          v113 = (char *)v346;
        }
      }
      v114 = &v113[24 * v347];
      v115 = *(_OWORD *)v112;
      *((_QWORD *)v114 + 2) = v112[2];
      *(_OWORD *)v114 = v115;
      v116 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        v343 = 20;
        v117 = &v341;
        v118 = (char *)v346;
        if (v116 >= v348)
        {
          v262 = v116 + 1;
          v263 = (char *)v346 + 24 * v116 > (char *)&v341;
          if (v346 <= &v341 && v263)
          {
            v312 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v262, 24);
            v118 = (char *)v346;
            v117 = (void ***)((char *)v346 + v312);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v262, 24);
            v117 = &v341;
            v118 = (char *)v346;
          }
        }
        v119 = &v118[24 * v347];
        v120 = *(_OWORD *)v117;
        *((_QWORD *)v119 + 2) = v117[2];
        *(_OWORD *)v119 = v120;
        v121 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          v122 = &v341;
          v123 = (char *)v346;
          if (v121 >= v348)
          {
            v264 = v121 + 1;
            v265 = (char *)v346 + 24 * v121 > (char *)&v341;
            if (v346 <= &v341 && v265)
            {
              v313 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v264, 24);
              v123 = (char *)v346;
              v122 = (void ***)((char *)v346 + v313);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v264, 24);
              v122 = &v341;
              v123 = (char *)v346;
            }
          }
          v124 = &v123[24 * v347];
          v125 = *(_OWORD *)v122;
          *((_QWORD *)v124 + 2) = v122[2];
          *(_OWORD *)v124 = v125;
          ++v347;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v126 = (_QWORD **)__p;
      if (__p)
      {
        v127 = v353;
        v128 = __p;
        if (v353 != __p)
        {
          do
            v127 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v127 - 1);
          while (v127 != v126);
          v128 = __p;
        }
        v353 = v126;
        operator delete(v128);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v129 = v351;
      v16 = v350;
      if (v351 == v350)
        goto LABEL_258;
      do
      {
        v131 = (void *)*--v129;
        v130 = v131;
        *v129 = 0;
        if (v131)
          operator delete[](v130);
      }
      while (v129 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (!v9)
  {
    v337[0] = (const void **)"invalid block_size (";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = 0;
      v132 = &v341;
      v133 = (char *)v346;
      if (v347 >= v348)
      {
        v266 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          v314 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v266, 24);
          v133 = (char *)v346;
          v132 = (void ***)((char *)v346 + v314);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v266, 24);
          v132 = &v341;
          v133 = (char *)v346;
        }
      }
      v134 = &v133[24 * v347];
      v135 = *(_OWORD *)v132;
      *((_QWORD *)v134 + 2) = v132[2];
      *(_OWORD *)v134 = v135;
      v136 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ")";
        v343 = 1;
        v137 = &v341;
        v138 = (char *)v346;
        if (v136 >= v348)
        {
          v268 = v136 + 1;
          v269 = (char *)v346 + 24 * v136 > (char *)&v341;
          if (v346 <= &v341 && v269)
          {
            v316 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v268, 24);
            v138 = (char *)v346;
            v137 = (void ***)((char *)v346 + v316);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v268, 24);
            v137 = &v341;
            v138 = (char *)v346;
          }
        }
        v139 = &v138[24 * v347];
        v140 = *(_OWORD *)v137;
        *((_QWORD *)v139 + 2) = v137[2];
        *(_OWORD *)v139 = v140;
        ++v347;
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v141 = (_QWORD **)__p;
      if (__p)
      {
        v142 = v353;
        v143 = __p;
        if (v353 != __p)
        {
          do
            v142 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v142 - 1);
          while (v142 != v141);
          v143 = __p;
        }
        v353 = v141;
        operator delete(v143);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v144 = v351;
      v16 = v350;
      if (v351 == v350)
        goto LABEL_258;
      do
      {
        v146 = (void *)*--v144;
        v145 = v146;
        *v144 = 0;
        if (v146)
          operator delete[](v145);
      }
      while (v144 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (v41 == v40)
  {
    v337[0] = (const void **)"Invalid degenerate axes: depth_axis (";
    v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v34;
      v42 = &v341;
      v43 = (char *)v346;
      if (v347 >= v348)
      {
        v267 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          v315 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v267, 24);
          v43 = (char *)v346;
          v42 = (void ***)((char *)v346 + v315);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v267, 24);
          v42 = &v341;
          v43 = (char *)v346;
        }
      }
      v44 = &v43[24 * v347];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = v42[2];
      *(_OWORD *)v44 = v45;
      v46 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") height_axis (";
        v343 = 15;
        v47 = &v341;
        v48 = (char *)v346;
        if (v46 >= v348)
        {
          v270 = v46 + 1;
          v271 = (char *)v346 + 24 * v46 > (char *)&v341;
          if (v346 <= &v341 && v271)
          {
            v317 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v270, 24);
            v48 = (char *)v346;
            v47 = (void ***)((char *)v346 + v317);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v270, 24);
            v47 = &v341;
            v48 = (char *)v346;
          }
        }
        v49 = &v48[24 * v347];
        v50 = *(_OWORD *)v47;
        *((_QWORD *)v49 + 2) = v47[2];
        *(_OWORD *)v49 = v50;
        v51 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = (const char *)(v28 | v27);
          v52 = &v341;
          v53 = (char *)v346;
          if (v51 >= v348)
          {
            v273 = v51 + 1;
            v274 = (char *)v346 + 24 * v51 > (char *)&v341;
            if (v346 <= &v341 && v274)
            {
              v319 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v273, 24);
              v53 = (char *)v346;
              v52 = (void ***)((char *)v346 + v319);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v273, 24);
              v52 = &v341;
              v53 = (char *)v346;
            }
          }
          v54 = &v53[24 * v347];
          v55 = *(_OWORD *)v52;
          *((_QWORD *)v54 + 2) = v52[2];
          *(_OWORD *)v54 = v55;
          v56 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 3;
            v342 = ") for shape of rank ";
            v343 = 20;
            v57 = &v341;
            v58 = (char *)v346;
            if (v56 >= v348)
            {
              v278 = v56 + 1;
              v279 = (char *)v346 + 24 * v56 > (char *)&v341;
              if (v346 <= &v341 && v279)
              {
                v322 = (char *)&v341 - (_BYTE *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v278, 24);
                v58 = (char *)v346;
                v57 = (void ***)((char *)v346 + v322);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v278, 24);
                v57 = &v341;
                v58 = (char *)v346;
              }
            }
            v59 = &v58[24 * v347];
            v60 = *(_OWORD *)v57;
            *((_QWORD *)v59 + 2) = v57[2];
            *(_OWORD *)v59 = v60;
            v61 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 2;
              v342 = v38;
              v62 = &v341;
              v63 = (char *)v346;
              if (v61 >= v348)
              {
                v283 = v61 + 1;
                v284 = (char *)v346 + 24 * v61 > (char *)&v341;
                if (v346 <= &v341 && v284)
                {
                  v325 = (char *)&v341 - (_BYTE *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v283, 24);
                  v63 = (char *)v346;
                  v62 = (void ***)((char *)v346 + v325);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v283, 24);
                  v62 = &v341;
                  v63 = (char *)v346;
                }
              }
              v64 = &v63[24 * v347];
              v65 = *(_OWORD *)v62;
              *((_QWORD *)v64 + 2) = v62[2];
              *(_OWORD *)v64 = v65;
              ++v347;
            }
          }
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    if (v354)
    {
      v66 = (_QWORD **)__p;
      if (__p)
      {
        v67 = v353;
        v68 = __p;
        if (v353 != __p)
        {
          do
            v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
          while (v67 != v66);
          v68 = __p;
        }
        v353 = v66;
        operator delete(v68);
      }
      v14 = v350;
      if (!v350)
        goto LABEL_259;
      v69 = v351;
      v16 = v350;
      if (v351 == v350)
      {
LABEL_258:
        v351 = v14;
        operator delete(v16);
LABEL_259:
        if (v346 != v349)
          free(v346);
        return v10;
      }
      do
      {
        v91 = (void *)*--v69;
        v90 = v91;
        *v69 = 0;
        if (v91)
          operator delete[](v90);
      }
      while (v69 != v14);
LABEL_257:
      v16 = v350;
      goto LABEL_258;
    }
    return v10;
  }
  if (v41 != v39)
  {
    if (v39 == v40)
    {
      v337[0] = (const void **)"Invalid degenerate axes: width_axis (";
      v338 = 259;
      mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
      if (v344)
      {
        LODWORD(v341) = 2;
        v342 = (const char *)v35;
        v176 = &v341;
        v177 = (char *)v346;
        if (v347 >= v348)
        {
          v277 = v347 + 1;
          if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
          {
            v321 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v277, 24);
            v177 = (char *)v346;
            v176 = (void ***)((char *)v346 + v321);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v277, 24);
            v176 = &v341;
            v177 = (char *)v346;
          }
        }
        v178 = &v177[24 * v347];
        v179 = *(_OWORD *)v176;
        *((_QWORD *)v178 + 2) = v176[2];
        *(_OWORD *)v178 = v179;
        v180 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 3;
          v342 = ") height_axis (";
          v343 = 15;
          v181 = &v341;
          v182 = (char *)v346;
          if (v180 >= v348)
          {
            v281 = v180 + 1;
            v282 = (char *)v346 + 24 * v180 > (char *)&v341;
            if (v346 <= &v341 && v282)
            {
              v324 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v281, 24);
              v182 = (char *)v346;
              v181 = (void ***)((char *)v346 + v324);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v281, 24);
              v181 = &v341;
              v182 = (char *)v346;
            }
          }
          v183 = &v182[24 * v347];
          v184 = *(_OWORD *)v181;
          *((_QWORD *)v183 + 2) = v181[2];
          *(_OWORD *)v183 = v184;
          v185 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = (const char *)(v28 | v27);
            v186 = &v341;
            v187 = (char *)v346;
            if (v185 >= v348)
            {
              v288 = v185 + 1;
              v289 = (char *)v346 + 24 * v185 > (char *)&v341;
              if (v346 <= &v341 && v289)
              {
                v328 = (char *)&v341 - (_BYTE *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v288, 24);
                v187 = (char *)v346;
                v186 = (void ***)((char *)v346 + v328);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v288, 24);
                v186 = &v341;
                v187 = (char *)v346;
              }
            }
            v188 = &v187[24 * v347];
            v189 = *(_OWORD *)v186;
            *((_QWORD *)v188 + 2) = v186[2];
            *(_OWORD *)v188 = v189;
            v190 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 3;
              v342 = ") for shape of rank ";
              v343 = 20;
              v191 = &v341;
              v192 = (char *)v346;
              if (v190 >= v348)
              {
                v295 = v190 + 1;
                v296 = (char *)v346 + 24 * v190 > (char *)&v341;
                if (v346 <= &v341 && v296)
                {
                  v332 = (char *)&v341 - (_BYTE *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v295, 24);
                  v192 = (char *)v346;
                  v191 = (void ***)((char *)v346 + v332);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v295, 24);
                  v191 = &v341;
                  v192 = (char *)v346;
                }
              }
              v193 = &v192[24 * v347];
              v194 = *(_OWORD *)v191;
              *((_QWORD *)v193 + 2) = v191[2];
              *(_OWORD *)v193 = v194;
              v195 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 2;
                v342 = v38;
                v196 = &v341;
                v197 = (char *)v346;
                if (v195 >= v348)
                {
                  v301 = v195 + 1;
                  v302 = (char *)v346 + 24 * v195 > (char *)&v341;
                  if (v346 <= &v341 && v302)
                  {
                    v335 = (char *)&v341 - (_BYTE *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v301, 24);
                    v197 = (char *)v346;
                    v196 = (void ***)((char *)v346 + v335);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v301, 24);
                    v196 = &v341;
                    v197 = (char *)v346;
                  }
                }
                v198 = &v197[24 * v347];
                v199 = *(_OWORD *)v196;
                *((_QWORD *)v198 + 2) = v196[2];
                *(_OWORD *)v198 = v199;
                ++v347;
              }
            }
          }
        }
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
      if (v344)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
      if (v354)
      {
        v200 = (_QWORD **)__p;
        if (__p)
        {
          v201 = v353;
          v202 = __p;
          if (v353 != __p)
          {
            do
              v201 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v201 - 1);
            while (v201 != v200);
            v202 = __p;
          }
          v353 = v200;
          operator delete(v202);
        }
        v14 = v350;
        if (!v350)
          goto LABEL_259;
        v203 = v351;
        v16 = v350;
        if (v351 == v350)
          goto LABEL_258;
        do
        {
          v205 = (void *)*--v203;
          v204 = v205;
          *v203 = 0;
          if (v205)
            operator delete[](v204);
        }
        while (v203 != v14);
        goto LABEL_257;
      }
      return v10;
    }
    v206 = *(const char **)(Value + 8 * v39);
    v207 = *(const char **)(Value + 8 * v40);
    v208 = 0x8000000000000000;
    v209 = 0x8000000000000000;
    if (v206 == (const char *)0x8000000000000000)
    {
      if (v207 == (const char *)0x8000000000000000)
        goto LABEL_208;
    }
    else
    {
      v209 = (uint64_t)v206 / v9;
      if (v207 == (const char *)0x8000000000000000)
      {
LABEL_208:
        if (v206 == (const char *)0x8000000000000000)
        {
LABEL_234:
          v10 = 1;
          if (v207 != (const char *)0x8000000000000000 && (const char *)(v208 * v9) != v207)
          {
            v337[0] = (const void **)"block_size (";
            v338 = 259;
            mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
            if (v344)
            {
              LODWORD(v341) = 2;
              v342 = (const char *)v9;
              v230 = &v341;
              v231 = (char *)v346;
              if (v347 >= v348)
              {
                v294 = v347 + 1;
                if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
                {
                  v331 = (char *)&v341 - (_BYTE *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v294, 24);
                  v231 = (char *)v346;
                  v230 = (void ***)((char *)v346 + v331);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v294, 24);
                  v230 = &v341;
                  v231 = (char *)v346;
                }
              }
              v232 = &v231[24 * v347];
              v233 = *(_OWORD *)v230;
              *((_QWORD *)v232 + 2) = v230[2];
              *(_OWORD *)v232 = v233;
              v234 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 3;
                v342 = ") must be multiple of height ";
                v343 = 29;
                v235 = &v341;
                v236 = (char *)v346;
                if (v234 >= v348)
                {
                  v299 = v234 + 1;
                  v300 = (char *)v346 + 24 * v234 > (char *)&v341;
                  if (v346 <= &v341 && v300)
                  {
                    v334 = (char *)&v341 - (_BYTE *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v299, 24);
                    v236 = (char *)v346;
                    v235 = (void ***)((char *)v346 + v334);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v299, 24);
                    v235 = &v341;
                    v236 = (char *)v346;
                  }
                }
                v237 = &v236[24 * v347];
                v238 = *(_OWORD *)v235;
                *((_QWORD *)v237 + 2) = v235[2];
                *(_OWORD *)v237 = v238;
                v239 = ++v347;
                if (v344)
                {
                  LODWORD(v341) = 2;
                  v342 = v207;
                  v240 = &v341;
                  v241 = (char *)v346;
                  if (v239 >= v348)
                  {
                    v303 = v239 + 1;
                    v304 = (char *)v346 + 24 * v239 > (char *)&v341;
                    if (v346 <= &v341 && v304)
                    {
                      v336 = (char *)&v341 - (_BYTE *)v346;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v303, 24);
                      v241 = (char *)v346;
                      v240 = (void ***)((char *)v346 + v336);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v303, 24);
                      v240 = &v341;
                      v241 = (char *)v346;
                    }
                  }
                  v242 = &v241[24 * v347];
                  v243 = *(_OWORD *)v240;
                  *((_QWORD *)v242 + 2) = v240[2];
                  *(_OWORD *)v242 = v243;
                  ++v347;
                }
              }
            }
            v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
            if (v344)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
            if (v354)
            {
              v244 = (_QWORD **)__p;
              if (__p)
              {
                v245 = v353;
                v246 = __p;
                if (v353 != __p)
                {
                  do
                    v245 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v245 - 1);
                  while (v245 != v244);
                  v246 = __p;
                }
                v353 = v244;
                operator delete(v246);
              }
              v14 = v350;
              if (!v350)
                goto LABEL_259;
              v247 = v351;
              v16 = v350;
              if (v351 == v350)
                goto LABEL_258;
              do
              {
                v249 = (void *)*--v247;
                v248 = v249;
                *v247 = 0;
                if (v249)
                  operator delete[](v248);
              }
              while (v247 != v14);
              goto LABEL_257;
            }
          }
          return v10;
        }
LABEL_212:
        if ((const char *)(v209 * v9) != v206)
        {
          v337[0] = (const void **)"block_size (";
          v338 = 259;
          mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = (const char *)v9;
            v210 = &v341;
            v211 = (char *)v346;
            if (v347 >= v348)
            {
              v285 = v347 + 1;
              if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
              {
                v326 = (char *)&v341 - (_BYTE *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v285, 24);
                v211 = (char *)v346;
                v210 = (void ***)((char *)v346 + v326);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v285, 24);
                v210 = &v341;
                v211 = (char *)v346;
              }
            }
            v212 = &v211[24 * v347];
            v213 = *(_OWORD *)v210;
            *((_QWORD *)v212 + 2) = v210[2];
            *(_OWORD *)v212 = v213;
            v214 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 3;
              v342 = ") must be multiple of width ";
              v343 = 28;
              v215 = &v341;
              v216 = (char *)v346;
              if (v214 >= v348)
              {
                v290 = v214 + 1;
                v291 = (char *)v346 + 24 * v214 > (char *)&v341;
                if (v346 <= &v341 && v291)
                {
                  v329 = (char *)&v341 - (_BYTE *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v290, 24);
                  v216 = (char *)v346;
                  v215 = (void ***)((char *)v346 + v329);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v290, 24);
                  v215 = &v341;
                  v216 = (char *)v346;
                }
              }
              v217 = &v216[24 * v347];
              v218 = *(_OWORD *)v215;
              *((_QWORD *)v217 + 2) = v215[2];
              *(_OWORD *)v217 = v218;
              v219 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 2;
                v342 = v206;
                v220 = &v341;
                v221 = (char *)v346;
                if (v219 >= v348)
                {
                  v297 = v219 + 1;
                  v298 = (char *)v346 + 24 * v219 > (char *)&v341;
                  if (v346 <= &v341 && v298)
                  {
                    v333 = (char *)&v341 - (_BYTE *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v297, 24);
                    v221 = (char *)v346;
                    v220 = (void ***)((char *)v346 + v333);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v297, 24);
                    v220 = &v341;
                    v221 = (char *)v346;
                  }
                }
                v222 = &v221[24 * v347];
                v223 = *(_OWORD *)v220;
                *((_QWORD *)v222 + 2) = v220[2];
                *(_OWORD *)v222 = v223;
                ++v347;
              }
            }
          }
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
          if (v344)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
          if (v354)
          {
            v224 = (_QWORD **)__p;
            if (__p)
            {
              v225 = v353;
              v226 = __p;
              if (v353 != __p)
              {
                do
                  v225 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v225 - 1);
                while (v225 != v224);
                v226 = __p;
              }
              v353 = v224;
              operator delete(v226);
            }
            v14 = v350;
            if (!v350)
              goto LABEL_259;
            v227 = v351;
            v16 = v350;
            if (v351 == v350)
              goto LABEL_258;
            do
            {
              v229 = (void *)*--v227;
              v228 = v229;
              *v227 = 0;
              if (v229)
                operator delete[](v228);
            }
            while (v227 != v14);
            goto LABEL_257;
          }
          return v10;
        }
        goto LABEL_234;
      }
    }
    v208 = (uint64_t)v207 / v9;
    if (v206 == (const char *)0x8000000000000000)
      goto LABEL_234;
    goto LABEL_212;
  }
  v337[0] = (const void **)"Invalid degenerate axes: depth_axis (";
  v338 = 259;
  mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
  if (v344)
  {
    LODWORD(v341) = 2;
    v342 = (const char *)v34;
    v147 = &v341;
    v148 = (char *)v346;
    if (v347 >= v348)
    {
      v272 = v347 + 1;
      if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
      {
        v318 = (char *)&v341 - (_BYTE *)v346;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v272, 24);
        v148 = (char *)v346;
        v147 = (void ***)((char *)v346 + v318);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v272, 24);
        v147 = &v341;
        v148 = (char *)v346;
      }
    }
    v149 = &v148[24 * v347];
    v150 = *(_OWORD *)v147;
    *((_QWORD *)v149 + 2) = v147[2];
    *(_OWORD *)v149 = v150;
    v151 = ++v347;
    if (v344)
    {
      LODWORD(v341) = 3;
      v342 = ") width_axis (";
      v343 = 14;
      v152 = &v341;
      v153 = (char *)v346;
      if (v151 >= v348)
      {
        v275 = v151 + 1;
        v276 = (char *)v346 + 24 * v151 > (char *)&v341;
        if (v346 <= &v341 && v276)
        {
          v320 = (char *)&v341 - (_BYTE *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v275, 24);
          v153 = (char *)v346;
          v152 = (void ***)((char *)v346 + v320);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v275, 24);
          v152 = &v341;
          v153 = (char *)v346;
        }
      }
      v154 = &v153[24 * v347];
      v155 = *(_OWORD *)v152;
      *((_QWORD *)v154 + 2) = v152[2];
      *(_OWORD *)v154 = v155;
      ++v347;
      if (v344)
      {
        LODWORD(v341) = 2;
        v342 = (const char *)v35;
        v156 = &v341;
        v157 = (char *)v346;
        if (v347 >= v348)
        {
          v280 = v347 + 1;
          if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
          {
            v323 = (char *)&v341 - (_BYTE *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v280, 24);
            v157 = (char *)v346;
            v156 = (void ***)((char *)v346 + v323);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v280, 24);
            v156 = &v341;
            v157 = (char *)v346;
          }
        }
        v158 = &v157[24 * v347];
        v159 = *(_OWORD *)v156;
        *((_QWORD *)v158 + 2) = v156[2];
        *(_OWORD *)v158 = v159;
        v160 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 3;
          v342 = ") for shape of rank ";
          v343 = 20;
          v161 = &v341;
          v162 = (char *)v346;
          if (v160 >= v348)
          {
            v286 = v160 + 1;
            v287 = (char *)v346 + 24 * v160 > (char *)&v341;
            if (v346 <= &v341 && v287)
            {
              v327 = (char *)&v341 - (_BYTE *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v286, 24);
              v162 = (char *)v346;
              v161 = (void ***)((char *)v346 + v327);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v286, 24);
              v161 = &v341;
              v162 = (char *)v346;
            }
          }
          v163 = &v162[24 * v347];
          v164 = *(_OWORD *)v161;
          *((_QWORD *)v163 + 2) = v161[2];
          *(_OWORD *)v163 = v164;
          v165 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = v38;
            v166 = &v341;
            v167 = (char *)v346;
            if (v165 >= v348)
            {
              v292 = v165 + 1;
              v293 = (char *)v346 + 24 * v165 > (char *)&v341;
              if (v346 <= &v341 && v293)
              {
                v330 = (char *)&v341 - (_BYTE *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v292, 24);
                v167 = (char *)v346;
                v166 = (void ***)((char *)v346 + v330);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v292, 24);
                v166 = &v341;
                v167 = (char *)v346;
              }
            }
            v168 = &v167[24 * v347];
            v169 = *(_OWORD *)v166;
            *((_QWORD *)v168 + 2) = v166[2];
            *(_OWORD *)v168 = v169;
            ++v347;
          }
        }
      }
    }
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
  if (v344)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
  if (v354)
  {
    v170 = (_QWORD **)__p;
    if (__p)
    {
      v171 = v353;
      v172 = __p;
      if (v353 != __p)
      {
        do
          v171 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v171 - 1);
        while (v171 != v170);
        v172 = __p;
      }
      v353 = v170;
      operator delete(v172);
    }
    v14 = v350;
    if (!v350)
      goto LABEL_259;
    v173 = v351;
    v16 = v350;
    if (v351 == v350)
      goto LABEL_258;
    do
    {
      v175 = (void *)*--v173;
      v174 = v175;
      *v173 = 0;
      if (v175)
        operator delete[](v174);
    }
    while (v173 != v14);
    goto LABEL_257;
  }
  return v10;
}

uint64_t mlir::mps::BatchToSpaceOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a4;
  v21[1] = a5;
  if (a5 <= 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v20 = 0;
  v14 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v15 = mlir::ValueRange::dereference_iterator(v21, 1);
  v16 = mlir::ValueRange::dereference_iterator(v21, 2);
  v17 = mlir::ValueRange::dereference_iterator(v21, 3);
  v18 = v20;
  v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = v18;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::inferBatchToSpaceReturnType(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  void *v8;
  _QWORD *v10;
  void *v13;
  unint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  char v24;
  uint64_t v25;
  char *Value;
  int64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t ElementType;
  uint64_t v31;
  uint64_t v32;
  uint64_t ElementTypeOrSelf;
  unint64_t v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[48];
  void *v41[2];
  _BYTE v42[48];
  void *v43[2];
  _QWORD v44[7];

  v44[6] = *MEMORY[0x1E0C80C00];
  v8 = *(void **)(*a3 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v10 = a3;
  }
  else
  {
    v10 = 0;
  }
  v35 = v10;
  if (!v10)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "Cannot use on a non-tensor input type");
  if (*(_UNKNOWN **)(*v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a8 = (uint64_t)v10;
  }
  else
  {
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v15 = *(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v15 = 0;
    }
    v34 = v15;
    if (v15
      && (!mlir::TensorType::hasRank((mlir::TensorType *)&v34)
       || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34), v19 < 2)))
    {
      v43[0] = v44;
      v43[1] = (void *)0x600000000;
      v41[0] = v42;
      v41[1] = (void *)0x600000000;
      v38 = 0;
      v39 = 0;
      v36 = &v38;
      v37 = a5;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v37);
      if (DefiningOp
        && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v36, DefiningOp)
        && (SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v38, v39), v24)
        && (v25 = SingleInt, mlir::matchConstantWithIntVector<long long>(a4, (uint64_t)v43))
        && mlir::matchConstantWithIntVector<long long>(a6, (uint64_t)v41))
      {
        v38 = v40;
        v39 = 0x600000000;
        Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
        {
          v28 = v38;
          v29 = v39;
          ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v35);
          v31 = mlir::RankedTensorType::get((uint64_t)v28, v29, ElementType, 0);
        }
        else
        {
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
          v31 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        }
        *a8 = v31;
        if (v38 != v40)
          free(v38);
      }
      else
      {
        v32 = mlir::getElementTypeOrSelf(v10);
        *a8 = mlir::UnrankedTensorType::get(v32);
      }
      if (v41[0] != v42)
        free(v41[0]);
      if (v43[0] != v44)
        free(v43[0]);
    }
    else
    {
      v20 = mlir::getElementTypeOrSelf(v10);
      *a8 = mlir::UnrankedTensorType::get(v20);
    }
  }
  return 1;
}

uint64_t mlir::mps::SpaceToBatchOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a4;
  v21[1] = a5;
  if (a5 <= 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v20 = 0;
  v14 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v15 = mlir::ValueRange::dereference_iterator(v21, 1);
  v16 = mlir::ValueRange::dereference_iterator(v21, 2);
  v17 = mlir::ValueRange::dereference_iterator(v21, 3);
  v18 = v20;
  v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = v18;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::BatchToSpaceOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t **v5;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t Value;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  int *v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  uint64_t **v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  int *v81;
  char *v82;
  char *v83;
  __int128 v84;
  _QWORD **v85;
  _QWORD **v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  const char *v91;
  const char *v92;
  int *v93;
  char *v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  int *v98;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  int *v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  int *v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  int *v113;
  char *v114;
  char *v115;
  __int128 v116;
  uint64_t v117;
  int *v118;
  char *v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  int *v123;
  char *v124;
  char *v125;
  __int128 v126;
  _QWORD **v127;
  _QWORD **v128;
  void *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  int *v133;
  char *v134;
  char *v135;
  __int128 v136;
  uint64_t v137;
  int *v138;
  char *v139;
  char *v140;
  __int128 v141;
  _QWORD **v142;
  _QWORD **v143;
  void *v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  void *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  BOOL v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  unint64_t v160;
  unint64_t v161;
  BOOL v162;
  unint64_t v163;
  BOOL v164;
  unint64_t v165;
  BOOL v166;
  unint64_t v167;
  BOOL v168;
  unint64_t v169;
  BOOL v170;
  unint64_t v171;
  BOOL v172;
  unint64_t v173;
  BOOL v174;
  unint64_t v175;
  BOOL v176;
  int64_t v177;
  int64_t v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  int64_t v182;
  int64_t v183;
  int64_t v184;
  int64_t v185;
  int64_t v186;
  int64_t v187;
  int64_t v188;
  int64_t v189;
  int64_t v190;
  int64_t v191;
  int64_t v192;
  int64_t v193;
  uint64_t *v194;
  _QWORD *v195[2];
  uint64_t v196;
  const void **v197[4];
  __int16 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  mlir::mps::_anonymous_namespace_ *v204;
  int v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209[2];
  void *v210;
  unsigned int v211;
  unsigned int v212;
  _BYTE v213[96];
  void *v214;
  _QWORD *v215;
  void *__p;
  _QWORD **v217;
  char v218;
  uint64_t **v219;
  uint64_t v220;
  _BYTE v221[48];
  uint64_t **v222;
  uint64_t v223;
  _QWORD v224[7];

  v224[6] = *MEMORY[0x1E0C80C00];
  v204 = *this;
  v1 = *((_QWORD *)v204 + 9);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(void **)(*(_QWORD *)v2 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v2 = 0;
  }
  v202 = 0;
  v203 = v2;
  v200 = 0;
  v201 = 0;
  v199 = 0;
  v5 = *(uint64_t ***)(v1 + 88);
  v208 = 0;
  v209[0] = 0;
  v219 = (uint64_t **)&v208;
  v222 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v222);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v219, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<long long>(v208, v209[0]);
  if (!v8)
    return 1;
  v9 = SingleInt;
  v10 = *(_QWORD *)(*((_QWORD *)v204 + 9) + 56);
  v222 = (uint64_t **)&v201;
  v208 = v10;
  v11 = mlir::Value::getDefiningOp((mlir::Value *)&v208);
  if (!v11)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v222, v11))
    return 1;
  v12 = *(_QWORD *)(*((_QWORD *)v204 + 9) + 120);
  v219 = (uint64_t **)&v199;
  v208 = v12;
  v13 = mlir::Value::getDefiningOp((mlir::Value *)&v208);
  if (!v13 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v219, v13))
    return 1;
  v222 = (uint64_t **)v224;
  v223 = 0x600000000;
  v219 = (uint64_t **)v221;
  v220 = 0x600000000;
  mlir::getIntValues<long long>(v201, v202, (uint64_t)&v222, 1);
  mlir::getIntValues<long long>(v199, v200, (uint64_t)&v219, 1);
  if ((_DWORD)v223 != (_DWORD)v220)
  {
    v198 = 259;
    mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
    if (v208)
    {
      mlir::Diagnostic::operator<<((uint64_t)v209, *(_QWORD *)(*((_QWORD *)v204 + 9) + 56));
      if (v208)
      {
        v205 = 3;
        v207 = 43;
        v46 = &v205;
        v47 = (char *)v210;
        if (v211 >= v212)
        {
          v150 = v211 + 1;
          if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
          {
            v177 = (char *)&v205 - (_BYTE *)v210;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v150, 24);
            v47 = (char *)v210;
            v46 = (int *)((char *)v210 + v177);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v150, 24);
            v46 = &v205;
            v47 = (char *)v210;
          }
        }
        v48 = &v47[24 * v211];
        v49 = *(_OWORD *)v46;
        *((_QWORD *)v48 + 2) = *((_QWORD *)v46 + 2);
        *(_OWORD *)v48 = v49;
        ++v211;
        if (v208)
          mlir::Diagnostic::operator<<((uint64_t)v209, *(_QWORD *)(*((_QWORD *)v204 + 9) + 120));
      }
    }
    v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
    if (v208)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
    if (v218)
    {
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v217;
        v52 = __p;
        if (v217 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v217 = v50;
        operator delete(v52);
      }
      v42 = v214;
      if (!v214)
        goto LABEL_141;
      v53 = v215;
      v44 = v214;
      if (v215 == v214)
        goto LABEL_140;
      do
      {
        v55 = (void *)*--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          operator delete[](v54);
      }
      while (v53 != v42);
      goto LABEL_139;
    }
    goto LABEL_143;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v203 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v203);
    v15 = v14;
    v196 = 0;
    {
      v195[0] = 0;
      v195[1] = 0;
      v194 = (uint64_t *)v195;
      {
        if (!v195[0])
          goto LABEL_27;
        v17 = v196;
        v18 = v195;
        v19 = v195[0];
        do
        {
          v20 = v19;
          v21 = v18;
          v22 = v19[4];
          if (v22 >= v196)
            v18 = (_QWORD **)v19;
          else
            ++v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
        if (v18 == v195)
          goto LABEL_27;
        if (v22 < v196)
          v20 = v21;
        if (v196 < v20[4])
        {
LABEL_27:
          std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v194, v195[0]);
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v203);
          if ((_DWORD)v223)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            v27 = 1;
            do
            {
              v28 = (uint64_t)v219[(_QWORD)v25];
              if (v28 <= 0)
              {
                v91 = (char *)v222[(_QWORD)v25] + ((unint64_t)v15 & ((uint64_t)v222[(_QWORD)v25] >> 63));
                v92 = *(const char **)(Value + 8 * (_QWORD)v91);
                v198 = 259;
                mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
                if (v208)
                {
                  v205 = 5;
                  v206 = v25;
                  v93 = &v205;
                  v94 = (char *)v210;
                  if (v211 >= v212)
                  {
                    v151 = v211 + 1;
                    if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                    {
                      v178 = (char *)&v205 - (_BYTE *)v210;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v151, 24);
                      v94 = (char *)v210;
                      v93 = (int *)((char *)v210 + v178);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v151, 24);
                      v93 = &v205;
                      v94 = (char *)v210;
                    }
                  }
                  v95 = &v94[24 * v211];
                  v96 = *(_OWORD *)v93;
                  *((_QWORD *)v95 + 2) = *((_QWORD *)v93 + 2);
                  *(_OWORD *)v95 = v96;
                  v97 = ++v211;
                  if (v208)
                  {
                    v205 = 3;
                    v206 = "] = ";
                    v207 = 4;
                    v98 = &v205;
                    v99 = (char *)v210;
                    if (v97 >= v212)
                    {
                      v153 = v97 + 1;
                      if (v210 <= &v205 && (char *)v210 + 24 * v97 > (char *)&v205)
                      {
                        v180 = (char *)&v205 - (_BYTE *)v210;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v153, 24);
                        v99 = (char *)v210;
                        v98 = (int *)((char *)v210 + v180);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v153, 24);
                        v98 = &v205;
                        v99 = (char *)v210;
                      }
                    }
                    v100 = &v99[24 * v211];
                    v101 = *(_OWORD *)v98;
                    *((_QWORD *)v100 + 2) = *((_QWORD *)v98 + 2);
                    *(_OWORD *)v100 = v101;
                    v102 = ++v211;
                    if (v208)
                    {
                      v205 = 2;
                      v206 = (const char *)v28;
                      v103 = &v205;
                      v104 = (char *)v210;
                      if (v102 >= v212)
                      {
                        v157 = v102 + 1;
                        if (v210 <= &v205 && (char *)v210 + 24 * v102 > (char *)&v205)
                        {
                          v183 = (char *)&v205 - (_BYTE *)v210;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v157, 24);
                          v104 = (char *)v210;
                          v103 = (int *)((char *)v210 + v183);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v157, 24);
                          v103 = &v205;
                          v104 = (char *)v210;
                        }
                      }
                      v105 = &v104[24 * v211];
                      v106 = *(_OWORD *)v103;
                      *((_QWORD *)v105 + 2) = *((_QWORD *)v103 + 2);
                      *(_OWORD *)v105 = v106;
                      v107 = ++v211;
                      if (v208)
                      {
                        v205 = 3;
                        v206 = " for input size[";
                        v207 = 16;
                        v108 = &v205;
                        v109 = (char *)v210;
                        if (v107 >= v212)
                        {
                          v161 = v107 + 1;
                          v162 = (char *)v210 + 24 * v107 > (char *)&v205;
                          if (v210 <= &v205 && v162)
                          {
                            v186 = (char *)&v205 - (_BYTE *)v210;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v161, 24);
                            v109 = (char *)v210;
                            v108 = (int *)((char *)v210 + v186);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v161, 24);
                            v108 = &v205;
                            v109 = (char *)v210;
                          }
                        }
                        v110 = &v109[24 * v211];
                        v111 = *(_OWORD *)v108;
                        *((_QWORD *)v110 + 2) = *((_QWORD *)v108 + 2);
                        *(_OWORD *)v110 = v111;
                        v112 = ++v211;
                        if (v208)
                        {
                          v205 = 2;
                          v206 = v91;
                          v113 = &v205;
                          v114 = (char *)v210;
                          if (v112 >= v212)
                          {
                            v167 = v112 + 1;
                            v168 = (char *)v210 + 24 * v112 > (char *)&v205;
                            if (v210 <= &v205 && v168)
                            {
                              v189 = (char *)&v205 - (_BYTE *)v210;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v167, 24);
                              v114 = (char *)v210;
                              v113 = (int *)((char *)v210 + v189);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v167, 24);
                              v113 = &v205;
                              v114 = (char *)v210;
                            }
                          }
                          v115 = &v114[24 * v211];
                          v116 = *(_OWORD *)v113;
                          *((_QWORD *)v115 + 2) = *((_QWORD *)v113 + 2);
                          *(_OWORD *)v115 = v116;
                          v117 = ++v211;
                          if (v208)
                          {
                            v205 = 3;
                            v206 = "] = ";
                            v207 = 4;
                            v118 = &v205;
                            v119 = (char *)v210;
                            if (v117 >= v212)
                            {
                              v171 = v117 + 1;
                              v172 = (char *)v210 + 24 * v117 > (char *)&v205;
                              if (v210 <= &v205 && v172)
                              {
                                v191 = (char *)&v205 - (_BYTE *)v210;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v171, 24);
                                v119 = (char *)v210;
                                v118 = (int *)((char *)v210 + v191);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v171, 24);
                                v118 = &v205;
                                v119 = (char *)v210;
                              }
                            }
                            v120 = &v119[24 * v211];
                            v121 = *(_OWORD *)v118;
                            *((_QWORD *)v120 + 2) = *((_QWORD *)v118 + 2);
                            *(_OWORD *)v120 = v121;
                            v122 = ++v211;
                            if (v208)
                            {
                              v205 = 2;
                              v206 = v92;
                              v123 = &v205;
                              v124 = (char *)v210;
                              if (v122 >= v212)
                              {
                                v175 = v122 + 1;
                                v176 = (char *)v210 + 24 * v122 > (char *)&v205;
                                if (v210 <= &v205 && v176)
                                {
                                  v193 = (char *)&v205 - (_BYTE *)v210;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v175, 24);
                                  v124 = (char *)v210;
                                  v123 = (int *)((char *)v210 + v193);
                                }
                                else
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v175, 24);
                                  v123 = &v205;
                                  v124 = (char *)v210;
                                }
                              }
                              v125 = &v124[24 * v211];
                              v126 = *(_OWORD *)v123;
                              *((_QWORD *)v125 + 2) = *((_QWORD *)v123 + 2);
                              *(_OWORD *)v125 = v126;
                              ++v211;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
                if (v208)
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
                if (!v218)
                  goto LABEL_143;
                v127 = (_QWORD **)__p;
                if (__p)
                {
                  v128 = v217;
                  v129 = __p;
                  if (v217 != __p)
                  {
                    do
                      v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
                    while (v128 != v127);
                    v129 = __p;
                  }
                  v217 = v127;
                  operator delete(v129);
                }
                v42 = v214;
                if (!v214)
                  goto LABEL_141;
                v130 = v215;
                v44 = v214;
                if (v215 == v214)
                  goto LABEL_140;
                do
                {
                  v132 = (void *)*--v130;
                  v131 = v132;
                  *v130 = 0;
                  if (v132)
                    operator delete[](v131);
                }
                while (v130 != v42);
                goto LABEL_139;
              }
              if (v28 != 1)
                v24 = (const char *)++v26;
              v27 *= v28;
              ++v25;
            }
            while ((const char *)v223 != v25);
            if (v26 < 4 || !*((_QWORD *)v204 + 2 * (((unint64_t)*((unsigned int *)v204 + 11) >> 23) & 1) + 8))
              goto LABEL_81;
            v198 = 259;
            mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
            if (v208)
            {
              v205 = 3;
              v206 = "axes - got:  ";
              v207 = 13;
              v29 = &v205;
              v30 = (char *)v210;
              if (v211 >= v212)
              {
                v160 = v211 + 1;
                if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                {
                  v185 = (char *)&v205 - (_BYTE *)v210;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v160, 24);
                  v30 = (char *)v210;
                  v29 = (int *)((char *)v210 + v185);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v160, 24);
                  v29 = &v205;
                  v30 = (char *)v210;
                }
              }
              v31 = &v30[24 * v211];
              v32 = *(_OWORD *)v29;
              *((_QWORD *)v31 + 2) = *((_QWORD *)v29 + 2);
              *(_OWORD *)v31 = v32;
              v33 = ++v211;
              if (v208)
              {
                v205 = 2;
                v206 = v24;
                v34 = &v205;
                v35 = (char *)v210;
                if (v33 >= v212)
                {
                  v165 = v33 + 1;
                  v166 = (char *)v210 + 24 * v33 > (char *)&v205;
                  if (v210 <= &v205 && v166)
                  {
                    v188 = (char *)&v205 - (_BYTE *)v210;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v165, 24);
                    v35 = (char *)v210;
                    v34 = (int *)((char *)v210 + v188);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v165, 24);
                    v34 = &v205;
                    v35 = (char *)v210;
                  }
                }
                v36 = &v35[24 * v211];
                v37 = *(_OWORD *)v34;
                *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
                *(_OWORD *)v36 = v37;
                ++v211;
              }
            }
            v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
            if (v208)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
            if (!v218)
              goto LABEL_143;
            v39 = (_QWORD **)__p;
            if (__p)
            {
              v40 = v217;
              v41 = __p;
              if (v217 != __p)
              {
                do
                  v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
                while (v40 != v39);
                v41 = __p;
              }
              v217 = v39;
              operator delete(v41);
            }
            v42 = v214;
            if (!v214)
              goto LABEL_141;
            v43 = v215;
            v44 = v214;
            if (v215 == v214)
              goto LABEL_140;
            do
            {
              v58 = (void *)*--v43;
              v57 = v58;
              *v43 = 0;
              if (v58)
                operator delete[](v57);
            }
            while (v43 != v42);
            goto LABEL_139;
          }
          v27 = 1;
LABEL_81:
          v59 = v196;
          v60 = *(_QWORD *)(Value + 8 * v196);
          if (v60 != 0x8000000000000000 && v60 % v27)
          {
            v198 = 259;
            mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
            if (v208)
            {
              v205 = 2;
              v206 = (const char *)v27;
              v61 = &v205;
              v62 = (char *)v210;
              if (v211 >= v212)
              {
                v154 = v211 + 1;
                if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                {
                  v181 = (char *)&v205 - (_BYTE *)v210;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v154, 24);
                  v62 = (char *)v210;
                  v61 = (int *)((char *)v210 + v181);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v154, 24);
                  v61 = &v205;
                  v62 = (char *)v210;
                }
              }
              v63 = &v62[24 * v211];
              v64 = *(_OWORD *)v61;
              *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
              *(_OWORD *)v63 = v64;
              v65 = ++v211;
              if (v208)
              {
                v205 = 3;
                v206 = " for input[";
                v207 = 11;
                v66 = &v205;
                v67 = (char *)v210;
                if (v65 >= v212)
                {
                  v158 = v65 + 1;
                  v159 = (char *)v210 + 24 * v65 > (char *)&v205;
                  if (v210 <= &v205 && v159)
                  {
                    v184 = (char *)&v205 - (_BYTE *)v210;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v158, 24);
                    v67 = (char *)v210;
                    v66 = (int *)((char *)v210 + v184);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v158, 24);
                    v66 = &v205;
                    v67 = (char *)v210;
                  }
                }
                v68 = &v67[24 * v211];
                v69 = *(_OWORD *)v66;
                *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
                *(_OWORD *)v68 = v69;
                v70 = ++v211;
                if (v208)
                {
                  v205 = 2;
                  v206 = (const char *)v59;
                  v71 = &v205;
                  v72 = (char *)v210;
                  if (v70 >= v212)
                  {
                    v163 = v70 + 1;
                    v164 = (char *)v210 + 24 * v70 > (char *)&v205;
                    if (v210 <= &v205 && v164)
                    {
                      v187 = (char *)&v205 - (_BYTE *)v210;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v163, 24);
                      v72 = (char *)v210;
                      v71 = (int *)((char *)v210 + v187);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v163, 24);
                      v71 = &v205;
                      v72 = (char *)v210;
                    }
                  }
                  v73 = &v72[24 * v211];
                  v74 = *(_OWORD *)v71;
                  *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
                  *(_OWORD *)v73 = v74;
                  v75 = ++v211;
                  if (v208)
                  {
                    v205 = 3;
                    v206 = "] = ";
                    v207 = 4;
                    v76 = &v205;
                    v77 = (char *)v210;
                    if (v75 >= v212)
                    {
                      v169 = v75 + 1;
                      v170 = (char *)v210 + 24 * v75 > (char *)&v205;
                      if (v210 <= &v205 && v170)
                      {
                        v190 = (char *)&v205 - (_BYTE *)v210;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v169, 24);
                        v77 = (char *)v210;
                        v76 = (int *)((char *)v210 + v190);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v169, 24);
                        v76 = &v205;
                        v77 = (char *)v210;
                      }
                    }
                    v78 = &v77[24 * v211];
                    v79 = *(_OWORD *)v76;
                    *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
                    *(_OWORD *)v78 = v79;
                    v80 = ++v211;
                    if (v208)
                    {
                      v205 = 2;
                      v206 = (const char *)v60;
                      v81 = &v205;
                      v82 = (char *)v210;
                      if (v80 >= v212)
                      {
                        v173 = v80 + 1;
                        v174 = (char *)v210 + 24 * v80 > (char *)&v205;
                        if (v210 <= &v205 && v174)
                        {
                          v192 = (char *)&v205 - (_BYTE *)v210;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v173, 24);
                          v82 = (char *)v210;
                          v81 = (int *)((char *)v210 + v192);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v173, 24);
                          v81 = &v205;
                          v82 = (char *)v210;
                        }
                      }
                      v83 = &v82[24 * v211];
                      v84 = *(_OWORD *)v81;
                      *((_QWORD *)v83 + 2) = *((_QWORD *)v81 + 2);
                      *(_OWORD *)v83 = v84;
                      ++v211;
                    }
                  }
                }
              }
            }
            v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
            if (v208)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
            if (v218)
            {
              v85 = (_QWORD **)__p;
              if (__p)
              {
                v86 = v217;
                v87 = __p;
                if (v217 != __p)
                {
                  do
                    v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
                  while (v86 != v85);
                  v87 = __p;
                }
                v217 = v85;
                operator delete(v87);
              }
              v42 = v214;
              if (!v214)
                goto LABEL_141;
              v88 = v215;
              v44 = v214;
              if (v215 == v214)
              {
LABEL_140:
                v215 = v42;
                operator delete(v44);
LABEL_141:
                if (v210 != v213)
                  free(v210);
                goto LABEL_143;
              }
              do
              {
                v90 = (void *)*--v88;
                v89 = v90;
                *v88 = 0;
                if (v90)
                  operator delete[](v89);
              }
              while (v88 != v42);
LABEL_139:
              v44 = v214;
              goto LABEL_140;
            }
LABEL_143:
            v56 = v219;
            if (v219 == (uint64_t **)v221)
              goto LABEL_145;
            goto LABEL_144;
          }
          goto LABEL_105;
        }
        v198 = 259;
        mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
        if (v208)
        {
          v205 = 2;
          v206 = (const char *)v17;
          v133 = &v205;
          v134 = (char *)v210;
          if (v211 >= v212)
          {
            v152 = v211 + 1;
            if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
            {
              v179 = (char *)&v205 - (_BYTE *)v210;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v152, 24);
              v134 = (char *)v210;
              v133 = (int *)((char *)v210 + v179);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v152, 24);
              v133 = &v205;
              v134 = (char *)v210;
            }
          }
          v135 = &v134[24 * v211];
          v136 = *(_OWORD *)v133;
          *((_QWORD *)v135 + 2) = *((_QWORD *)v133 + 2);
          *(_OWORD *)v135 = v136;
          v137 = ++v211;
          if (v208)
          {
            v205 = 3;
            v207 = 36;
            v138 = &v205;
            v139 = (char *)v210;
            if (v137 >= v212)
            {
              v155 = v137 + 1;
              v156 = (char *)v210 + 24 * v137 > (char *)&v205;
              if (v210 <= &v205 && v156)
              {
                v182 = (char *)&v205 - (_BYTE *)v210;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v155, 24);
                v139 = (char *)v210;
                v138 = (int *)((char *)v210 + v182);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v155, 24);
                v138 = &v205;
                v139 = (char *)v210;
              }
            }
            v140 = &v139[24 * v211];
            v141 = *(_OWORD *)v138;
            *((_QWORD *)v140 + 2) = *((_QWORD *)v138 + 2);
            *(_OWORD *)v140 = v141;
            ++v211;
            if (v208)
              mlir::Diagnostic::operator<<((uint64_t)v209, *(_QWORD *)(*((_QWORD *)v204 + 9) + 56));
          }
        }
        v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
        if (v208)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
        if (v218)
        {
          v142 = (_QWORD **)__p;
          if (__p)
          {
            v143 = v217;
            v144 = __p;
            if (v217 != __p)
            {
              do
                v143 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v143 - 1);
              while (v143 != v142);
              v144 = __p;
            }
            v217 = v142;
            operator delete(v144);
          }
          v145 = v214;
          if (v214)
          {
            v146 = v215;
            v147 = v214;
            if (v215 != v214)
            {
              do
              {
                v149 = (void *)*--v146;
                v148 = v149;
                *v146 = 0;
                if (v149)
                  operator delete[](v148);
              }
              while (v146 != v145);
              v147 = v214;
            }
            v215 = v145;
            operator delete(v147);
          }
          if (v210 != v213)
            free(v210);
        }
      }
      else
      {
        v38 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v194, v195[0]);
      v56 = v219;
      if (v219 == (uint64_t **)v221)
        goto LABEL_145;
    }
    else
    {
      v38 = 0;
      v56 = v219;
      if (v219 == (uint64_t **)v221)
        goto LABEL_145;
    }
LABEL_144:
    free(v56);
    goto LABEL_145;
  }
LABEL_105:
  v38 = 1;
  v56 = v219;
  if (v219 != (uint64_t **)v221)
    goto LABEL_144;
LABEL_145:
  if (v222 != v224)
    free(v222);
  return v38;
}

uint64_t mlir::mps::SpaceToBatchOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t **v5;
  uint64_t DefiningOp;
  unint64_t SingleInt;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t *v16;
  const char *v17;
  _QWORD **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t Value;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  int *v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  int *v72;
  char *v73;
  char *v74;
  __int128 v75;
  _QWORD **v76;
  _QWORD **v77;
  void *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  int *v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  int *v89;
  char *v90;
  char *v91;
  __int128 v92;
  _QWORD **v93;
  _QWORD **v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  int *v99;
  char *v100;
  char *v101;
  __int128 v102;
  uint64_t v103;
  int *v104;
  char *v105;
  char *v106;
  __int128 v107;
  _QWORD **v108;
  _QWORD **v109;
  void *v110;
  _QWORD *v111;
  _QWORD *v112;
  void *v113;
  void *v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  BOOL v124;
  unint64_t v125;
  BOOL v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  unint64_t v130;
  BOOL v131;
  unint64_t v132;
  BOOL v133;
  unint64_t v134;
  BOOL v135;
  int64_t v136;
  int64_t v137;
  int64_t v138;
  int64_t v139;
  int64_t v140;
  int64_t v141;
  int64_t v142;
  int64_t v143;
  int64_t v144;
  int64_t v145;
  int64_t v146;
  int64_t v147;
  uint64_t *v148;
  _QWORD *v149[2];
  const char *v150;
  const void **v151[4];
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  mlir::mps::_anonymous_namespace_ *v158;
  int v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163[2];
  void *v164;
  unsigned int v165;
  unsigned int v166;
  _BYTE v167[96];
  void *v168;
  _QWORD *v169;
  void *__p;
  _QWORD **v171;
  char v172;
  uint64_t **v173;
  uint64_t v174;
  _BYTE v175[48];
  uint64_t **v176;
  uint64_t v177;
  _QWORD v178[7];

  v178[6] = *MEMORY[0x1E0C80C00];
  v158 = *this;
  v1 = *((_QWORD *)v158 + 9);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(void **)(*(_QWORD *)v2 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v2 = 0;
  }
  v156 = 0;
  v157 = v2;
  v154 = 0;
  v155 = 0;
  v153 = 0;
  v5 = *(uint64_t ***)(v1 + 88);
  v162 = 0;
  v163[0] = 0;
  v173 = (uint64_t **)&v162;
  v176 = v5;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v176);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v173, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<long long>(v162, v163[0]);
  if (!v8)
    return 1;
  v9 = SingleInt;
  v10 = *(_QWORD *)(*((_QWORD *)v158 + 9) + 56);
  v176 = (uint64_t **)&v155;
  v162 = v10;
  v11 = mlir::Value::getDefiningOp((mlir::Value *)&v162);
  if (!v11)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v176, v11))
    return 1;
  v12 = *(_QWORD *)(*((_QWORD *)v158 + 9) + 120);
  v173 = (uint64_t **)&v153;
  v162 = v12;
  v13 = mlir::Value::getDefiningOp((mlir::Value *)&v162);
  if (!v13 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v173, v13))
    return 1;
  v176 = (uint64_t **)v178;
  v177 = 0x600000000;
  v173 = (uint64_t **)v175;
  v174 = 0x600000000;
  mlir::getIntValues<long long>(v155, v156, (uint64_t)&v176, 1);
  mlir::getIntValues<long long>(v153, v154, (uint64_t)&v173, 1);
  if ((_DWORD)v177 != (_DWORD)v174)
  {
    v152 = 259;
    mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
    if (v162)
    {
      mlir::Diagnostic::operator<<((uint64_t)v163, *(_QWORD *)(*((_QWORD *)v158 + 9) + 56));
      if (v162)
      {
        v159 = 3;
        v161 = 43;
        v72 = &v159;
        v73 = (char *)v164;
        if (v165 >= v166)
        {
          v116 = v165 + 1;
          if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
          {
            v136 = (char *)&v159 - (_BYTE *)v164;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v116, 24);
            v73 = (char *)v164;
            v72 = (int *)((char *)v164 + v136);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v116, 24);
            v72 = &v159;
            v73 = (char *)v164;
          }
        }
        v74 = &v73[24 * v165];
        v75 = *(_OWORD *)v72;
        *((_QWORD *)v74 + 2) = *((_QWORD *)v72 + 2);
        *(_OWORD *)v74 = v75;
        ++v165;
        if (v162)
          mlir::Diagnostic::operator<<((uint64_t)v163, *(_QWORD *)(*((_QWORD *)v158 + 9) + 120));
      }
    }
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
    if (v162)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
    if (!v172)
      goto LABEL_114;
    v76 = (_QWORD **)__p;
    if (__p)
    {
      v77 = v171;
      v78 = __p;
      if (v171 != __p)
      {
        do
          v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
        while (v77 != v76);
        v78 = __p;
      }
      v171 = v76;
      operator delete(v78);
    }
    v69 = v168;
    if (!v168)
      goto LABEL_112;
    v79 = v169;
    v71 = v168;
    if (v169 == v168)
    {
LABEL_111:
      v169 = v69;
      operator delete(v71);
LABEL_112:
      if (v164 != v167)
        free(v164);
      goto LABEL_114;
    }
    do
    {
      v81 = (void *)*--v79;
      v80 = v81;
      *v79 = 0;
      if (v81)
        operator delete[](v80);
    }
    while (v79 != v69);
LABEL_110:
    v71 = v168;
    goto LABEL_111;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v157 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_106;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v157);
  v15 = v14;
  v150 = 0;
  {
    v149[0] = 0;
    v149[1] = 0;
    v148 = (uint64_t *)v149;
    {
      if (!v149[0])
        goto LABEL_27;
      v17 = v150;
      v18 = v149;
      v19 = v149[0];
      do
      {
        v20 = v19;
        v21 = v18;
        v22 = v19[4];
        if (v22 >= (uint64_t)v150)
          v18 = (_QWORD **)v19;
        else
          ++v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
      if (v18 == v149)
        goto LABEL_27;
      if (v22 < (uint64_t)v150)
        v20 = v21;
      if ((uint64_t)v150 < v20[4])
      {
LABEL_27:
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v148, v149[0]);
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v157);
        if ((_DWORD)v177)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v29 = (uint64_t)v173[(_QWORD)v25];
            v30 = (char *)v176[(_QWORD)v25] + ((unint64_t)v15 & ((uint64_t)v176[(_QWORD)v25] >> 63));
            v31 = *(_QWORD *)(Value + 8 * (_QWORD)v30);
            if (v29 < 1 || v31 != 0x8000000000000000 && v31 % v29)
            {
              v152 = 259;
              mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
              if (v162)
              {
                v159 = 5;
                v160 = v25;
                v32 = &v159;
                v33 = (char *)v164;
                if (v165 >= v166)
                {
                  v117 = v165 + 1;
                  if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
                  {
                    v137 = (char *)&v159 - (_BYTE *)v164;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v117, 24);
                    v33 = (char *)v164;
                    v32 = (int *)((char *)v164 + v137);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v117, 24);
                    v32 = &v159;
                    v33 = (char *)v164;
                  }
                }
                v34 = &v33[24 * v165];
                v35 = *(_OWORD *)v32;
                *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
                *(_OWORD *)v34 = v35;
                v36 = ++v165;
                if (v162)
                {
                  v159 = 3;
                  v160 = "] = ";
                  v161 = 4;
                  v37 = &v159;
                  v38 = (char *)v164;
                  if (v36 >= v166)
                  {
                    v119 = v36 + 1;
                    v120 = (char *)v164 + 24 * v36 > (char *)&v159;
                    if (v164 <= &v159 && v120)
                    {
                      v139 = (char *)&v159 - (_BYTE *)v164;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v119, 24);
                      v38 = (char *)v164;
                      v37 = (int *)((char *)v164 + v139);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v119, 24);
                      v37 = &v159;
                      v38 = (char *)v164;
                    }
                  }
                  v39 = &v38[24 * v165];
                  v40 = *(_OWORD *)v37;
                  *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
                  *(_OWORD *)v39 = v40;
                  v41 = ++v165;
                  if (v162)
                  {
                    v159 = 2;
                    v160 = (const char *)v29;
                    v42 = &v159;
                    v43 = (char *)v164;
                    if (v41 >= v166)
                    {
                      v123 = v41 + 1;
                      v124 = (char *)v164 + 24 * v41 > (char *)&v159;
                      if (v164 <= &v159 && v124)
                      {
                        v141 = (char *)&v159 - (_BYTE *)v164;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v123, 24);
                        v43 = (char *)v164;
                        v42 = (int *)((char *)v164 + v141);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v123, 24);
                        v42 = &v159;
                        v43 = (char *)v164;
                      }
                    }
                    v44 = &v43[24 * v165];
                    v45 = *(_OWORD *)v42;
                    *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
                    *(_OWORD *)v44 = v45;
                    v46 = ++v165;
                    if (v162)
                    {
                      v159 = 3;
                      v160 = " for input size[";
                      v161 = 16;
                      v47 = &v159;
                      v48 = (char *)v164;
                      if (v46 >= v166)
                      {
                        v125 = v46 + 1;
                        v126 = (char *)v164 + 24 * v46 > (char *)&v159;
                        if (v164 <= &v159 && v126)
                        {
                          v142 = (char *)&v159 - (_BYTE *)v164;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v125, 24);
                          v48 = (char *)v164;
                          v47 = (int *)((char *)v164 + v142);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v125, 24);
                          v47 = &v159;
                          v48 = (char *)v164;
                        }
                      }
                      v49 = &v48[24 * v165];
                      v50 = *(_OWORD *)v47;
                      *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
                      *(_OWORD *)v49 = v50;
                      v51 = ++v165;
                      if (v162)
                      {
                        v159 = 2;
                        v160 = v30;
                        v52 = &v159;
                        v53 = (char *)v164;
                        if (v51 >= v166)
                        {
                          v128 = v51 + 1;
                          v129 = (char *)v164 + 24 * v51 > (char *)&v159;
                          if (v164 <= &v159 && v129)
                          {
                            v144 = (char *)&v159 - (_BYTE *)v164;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v128, 24);
                            v53 = (char *)v164;
                            v52 = (int *)((char *)v164 + v144);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v128, 24);
                            v52 = &v159;
                            v53 = (char *)v164;
                          }
                        }
                        v54 = &v53[24 * v165];
                        v55 = *(_OWORD *)v52;
                        *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
                        *(_OWORD *)v54 = v55;
                        v56 = ++v165;
                        if (v162)
                        {
                          v159 = 3;
                          v160 = "] = ";
                          v161 = 4;
                          v57 = &v159;
                          v58 = (char *)v164;
                          if (v56 >= v166)
                          {
                            v132 = v56 + 1;
                            v133 = (char *)v164 + 24 * v56 > (char *)&v159;
                            if (v164 <= &v159 && v133)
                            {
                              v146 = (char *)&v159 - (_BYTE *)v164;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v132, 24);
                              v58 = (char *)v164;
                              v57 = (int *)((char *)v164 + v146);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v132, 24);
                              v57 = &v159;
                              v58 = (char *)v164;
                            }
                          }
                          v59 = &v58[24 * v165];
                          v60 = *(_OWORD *)v57;
                          *((_QWORD *)v59 + 2) = *((_QWORD *)v57 + 2);
                          *(_OWORD *)v59 = v60;
                          v61 = ++v165;
                          if (v162)
                          {
                            v159 = 2;
                            v160 = (const char *)v31;
                            v62 = &v159;
                            v63 = (char *)v164;
                            if (v61 >= v166)
                            {
                              v134 = v61 + 1;
                              v135 = (char *)v164 + 24 * v61 > (char *)&v159;
                              if (v164 <= &v159 && v135)
                              {
                                v147 = (char *)&v159 - (_BYTE *)v164;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v134, 24);
                                v63 = (char *)v164;
                                v62 = (int *)((char *)v164 + v147);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v134, 24);
                                v62 = &v159;
                                v63 = (char *)v164;
                              }
                            }
                            v64 = &v63[24 * v165];
                            v65 = *(_OWORD *)v62;
                            *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
                            *(_OWORD *)v64 = v65;
                            ++v165;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
              if (v162)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
              if (!v172)
                goto LABEL_114;
              v66 = (_QWORD **)__p;
              if (__p)
              {
                v67 = v171;
                v68 = __p;
                if (v171 != __p)
                {
                  do
                    v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
                  while (v67 != v66);
                  v68 = __p;
                }
                v171 = v66;
                operator delete(v68);
              }
              v69 = v168;
              if (!v168)
                goto LABEL_112;
              v70 = v169;
              v71 = v168;
              if (v169 == v168)
                goto LABEL_111;
              do
              {
                v83 = (void *)*--v70;
                v82 = v83;
                *v70 = 0;
                if (v83)
                  operator delete[](v82);
              }
              while (v70 != v69);
              goto LABEL_110;
            }
            if ((unint64_t)v29 > 1)
              v24 = (const char *)++v26;
            ++v25;
          }
          while ((const char *)v177 != v25);
          if (v26 < 4 || !*((_QWORD *)v158 + 2 * (((unint64_t)*((unsigned int *)v158 + 11) >> 23) & 1) + 8))
            goto LABEL_106;
          v152 = 259;
          mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
          if (v162)
          {
            v159 = 3;
            v160 = "axes - got:  ";
            v161 = 13;
            v84 = &v159;
            v85 = (char *)v164;
            if (v165 >= v166)
            {
              v127 = v165 + 1;
              if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
              {
                v143 = (char *)&v159 - (_BYTE *)v164;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v127, 24);
                v85 = (char *)v164;
                v84 = (int *)((char *)v164 + v143);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v127, 24);
                v84 = &v159;
                v85 = (char *)v164;
              }
            }
            v86 = &v85[24 * v165];
            v87 = *(_OWORD *)v84;
            *((_QWORD *)v86 + 2) = *((_QWORD *)v84 + 2);
            *(_OWORD *)v86 = v87;
            v88 = ++v165;
            if (v162)
            {
              v159 = 2;
              v160 = v24;
              v89 = &v159;
              v90 = (char *)v164;
              if (v88 >= v166)
              {
                v130 = v88 + 1;
                v131 = (char *)v164 + 24 * v88 > (char *)&v159;
                if (v164 <= &v159 && v131)
                {
                  v145 = (char *)&v159 - (_BYTE *)v164;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v130, 24);
                  v90 = (char *)v164;
                  v89 = (int *)((char *)v164 + v145);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v130, 24);
                  v89 = &v159;
                  v90 = (char *)v164;
                }
              }
              v91 = &v90[24 * v165];
              v92 = *(_OWORD *)v89;
              *((_QWORD *)v91 + 2) = *((_QWORD *)v89 + 2);
              *(_OWORD *)v91 = v92;
              ++v165;
            }
          }
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
          if (v162)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
          if (!v172)
            goto LABEL_114;
          v93 = (_QWORD **)__p;
          if (__p)
          {
            v94 = v171;
            v95 = __p;
            if (v171 != __p)
            {
              do
                v94 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v94 - 1);
              while (v94 != v93);
              v95 = __p;
            }
            v171 = v93;
            operator delete(v95);
          }
          v69 = v168;
          if (!v168)
            goto LABEL_112;
          v96 = v169;
          v71 = v168;
          if (v169 == v168)
            goto LABEL_111;
          do
          {
            v98 = (void *)*--v96;
            v97 = v98;
            *v96 = 0;
            if (v98)
              operator delete[](v97);
          }
          while (v96 != v69);
          goto LABEL_110;
        }
LABEL_106:
        v27 = 1;
        goto LABEL_114;
      }
      v152 = 259;
      mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
      if (v162)
      {
        v159 = 2;
        v160 = v17;
        v99 = &v159;
        v100 = (char *)v164;
        if (v165 >= v166)
        {
          v118 = v165 + 1;
          if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
          {
            v138 = (char *)&v159 - (_BYTE *)v164;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v118, 24);
            v100 = (char *)v164;
            v99 = (int *)((char *)v164 + v138);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v118, 24);
            v99 = &v159;
            v100 = (char *)v164;
          }
        }
        v101 = &v100[24 * v165];
        v102 = *(_OWORD *)v99;
        *((_QWORD *)v101 + 2) = *((_QWORD *)v99 + 2);
        *(_OWORD *)v101 = v102;
        v103 = ++v165;
        if (v162)
        {
          v159 = 3;
          v161 = 36;
          v104 = &v159;
          v105 = (char *)v164;
          if (v103 >= v166)
          {
            v121 = v103 + 1;
            v122 = (char *)v164 + 24 * v103 > (char *)&v159;
            if (v164 <= &v159 && v122)
            {
              v140 = (char *)&v159 - (_BYTE *)v164;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v121, 24);
              v105 = (char *)v164;
              v104 = (int *)((char *)v164 + v140);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v121, 24);
              v104 = &v159;
              v105 = (char *)v164;
            }
          }
          v106 = &v105[24 * v165];
          v107 = *(_OWORD *)v104;
          *((_QWORD *)v106 + 2) = *((_QWORD *)v104 + 2);
          *(_OWORD *)v106 = v107;
          ++v165;
          if (v162)
            mlir::Diagnostic::operator<<((uint64_t)v163, *(_QWORD *)(*((_QWORD *)v158 + 9) + 56));
        }
      }
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
      if (v162)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
      if (v172)
      {
        v108 = (_QWORD **)__p;
        if (__p)
        {
          v109 = v171;
          v110 = __p;
          if (v171 != __p)
          {
            do
              v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
            while (v109 != v108);
            v110 = __p;
          }
          v171 = v108;
          operator delete(v110);
        }
        v111 = v168;
        if (v168)
        {
          v112 = v169;
          v113 = v168;
          if (v169 != v168)
          {
            do
            {
              v115 = (void *)*--v112;
              v114 = v115;
              *v112 = 0;
              if (v115)
                operator delete[](v114);
            }
            while (v112 != v111);
            v113 = v168;
          }
          v169 = v111;
          operator delete(v113);
        }
        if (v164 != v167)
          free(v164);
      }
    }
    else
    {
      v27 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v148, v149[0]);
  }
  else
  {
    v27 = 0;
  }
LABEL_114:
  if (v173 != (uint64_t **)v175)
    free(v173);
  if (v176 != v178)
    free(v176);
  return v27;
}

uint64_t mlir::mps::GetCoordOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v14;
  uint64_t Context;
  uint64_t v16;
  uint64_t Value;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  char v26[8];
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v33 = v35;
  v34 = 0x400000000;
  if (a7)
    v14 = (_QWORD *)*a7;
  else
    v14 = 0;
  v25 = a6;
  v26[0] = 0;
  v27 = 0;
  v28 = v14;
  v29 = a9;
  v30 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v25);
    if (v27)
      v27 = 0;
    mlir::OperationName::OperationName(v26, "mps.get_coordinates", 19, Context);
    v27 = 1;
  }
  v31 = a4;
  v32 = a5;
  v36 = a4;
  v37 = 0;
  v16 = mlir::ValueRange::dereference_iterator(&v36, 0);
  v36 = v28;
  if (v28)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
    v18 = (_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18)
      v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    else
      v19 = 0;
    v36 = v18;
    v37 = v19;
    v22 = *(void **)(*(_QWORD *)Value + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
      || Value != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36))
    {
      v23 = mlir::IntegerType::get(a1, 0x20u, 1u);
      v20 = mlir::UnrankedTensorType::get(v23);
      v21 = *(unsigned int *)(a11 + 8);
      if (v21 < *(_DWORD *)(a11 + 12))
        goto LABEL_30;
      goto LABEL_34;
    }
  }
  else
  {
    Value = mlir::IntegerType::get(a1, 0x20u, 1u);
  }
  if (mlir::matchConstantWithIntVector<long long>(v16, (uint64_t)&v33))
  {
    v20 = mlir::RankedTensorType::get((uint64_t)v33, v34, Value, 0);
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 < *(_DWORD *)(a11 + 12))
      goto LABEL_30;
  }
  else
  {
    v20 = mlir::UnrankedTensorType::get(Value);
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 < *(_DWORD *)(a11 + 12))
      goto LABEL_30;
  }
LABEL_34:
  llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
  LODWORD(v21) = *(_DWORD *)(a11 + 8);
LABEL_30:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  if (v33 != v35)
    free(v33);
  return 1;
}

uint64_t mlir::mps::GetCoordOp::verify(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t Value;
  void *v7;
  uint64_t ***v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t ***v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  _QWORD *ArgAttrsAttr;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t NumElements;
  const void **v46;
  uint64_t DefiningOp;
  int64_t SingleInt;
  char v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t ***v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t ***v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t ***v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD **v68;
  _QWORD **v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  const void **v87[4];
  __int16 v88;
  _QWORD v89[2];
  uint64_t **v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE v98[96];
  void *v99;
  _QWORD *v100;
  void *__p;
  _QWORD **v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = *this;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_DWORD *)v2 + 11);
  v89[0] = v3;
  v89[1] = v4;
  v93 = v2[2 * ((v5 >> 23) & 1) + 8];
  if (v93)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v93);
    v7 = *(void **)(*(_QWORD *)Value + 136);
    if (v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v88 = 257;
      mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
      if (v93)
      {
        LODWORD(v90) = 3;
        v91 = "Optional return type cannot be a float type.";
        v92 = 44;
        v19 = &v90;
        v20 = (char *)v95;
        if (v96 >= v97)
        {
          v75 = v96 + 1;
          if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
          {
            v82 = (char *)&v90 - (_BYTE *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
            v20 = (char *)v95;
            v19 = (uint64_t ***)((char *)v95 + v82);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
            v19 = &v90;
            v20 = (char *)v95;
          }
        }
        v21 = &v20[24 * v96];
        v22 = *(_OWORD *)v19;
        *((_QWORD *)v21 + 2) = v19[2];
        *(_OWORD *)v21 = v22;
        ++v96;
      }
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
      if (v93)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
      if (v103)
      {
        v24 = (_QWORD **)__p;
        if (__p)
        {
          v25 = v102;
          v26 = __p;
          if (v102 != __p)
          {
            do
              v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            v26 = __p;
          }
          v102 = v24;
          operator delete(v26);
        }
        v27 = v99;
        if (!v99)
          goto LABEL_109;
        v28 = v100;
        v29 = v99;
        if (v100 == v99)
          goto LABEL_108;
        do
        {
          v31 = (void *)*--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v28 != v27);
        goto LABEL_107;
      }
      return v23;
    }
    if (Value != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v89))
    {
      v88 = 257;
      mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
      if (v93)
      {
        LODWORD(v90) = 3;
        v91 = "Mismatch of optional return type and operand element type.";
        v92 = 58;
        v32 = &v90;
        v33 = (char *)v95;
        if (v96 >= v97)
        {
          v79 = v96 + 1;
          if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
          {
            v85 = (char *)&v90 - (_BYTE *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
            v33 = (char *)v95;
            v32 = (uint64_t ***)((char *)v95 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
            v32 = &v90;
            v33 = (char *)v95;
          }
        }
        v34 = &v33[24 * v96];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = v32[2];
        *(_OWORD *)v34 = v35;
        ++v96;
      }
      v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
      if (v93)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
      if (v103)
      {
        v36 = (_QWORD **)__p;
        if (__p)
        {
          v37 = v102;
          v38 = __p;
          if (v102 != __p)
          {
            do
              v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            v38 = __p;
          }
          v102 = v36;
          operator delete(v38);
        }
        v27 = v99;
        if (!v99)
          goto LABEL_109;
        v39 = v100;
        v29 = v99;
        if (v100 == v99)
        {
LABEL_108:
          v100 = v27;
          operator delete(v29);
LABEL_109:
          if (v95 != v98)
            free(v95);
          return v23;
        }
        do
        {
          v53 = (void *)*--v39;
          v52 = v53;
          *v39 = 0;
          if (v53)
            operator delete[](v52);
        }
        while (v39 != v27);
LABEL_107:
        v29 = v99;
        goto LABEL_108;
      }
      return v23;
    }
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
    return 1;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v41)
  {
    v42 = 8 * v41;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v42 -= 8;
      if (!v42)
        goto LABEL_77;
    }
    return 1;
  }
LABEL_77:
  v43 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  NumElements = mlir::ShapedType::getNumElements(v43, v44);
  v46 = *(const void ***)((*this)[9] + 56);
  v93 = 0;
  v94 = 0;
  v90 = (uint64_t **)&v93;
  v87[0] = v46;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v87);
  if (!DefiningOp)
    return 1;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v90, DefiningOp))
    return 1;
  SingleInt = mlir::getSingleIntValue<long long>(v93, v94);
  if (!v49)
    return 1;
  v50 = (const char *)SingleInt;
  v51 = (NumElements & (SingleInt >> 63)) + SingleInt;
  if (v51 >= 0 && NumElements > v51)
    return 1;
  v88 = 257;
  mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
  if (v93)
  {
    LODWORD(v90) = 3;
    v91 = "invalid axis: ";
    v92 = 14;
    v54 = &v90;
    v55 = (char *)v95;
    if (v96 >= v97)
    {
      v76 = v96 + 1;
      if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
      {
        v83 = (char *)&v90 - (_BYTE *)v95;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
        v55 = (char *)v95;
        v54 = (uint64_t ***)((char *)v95 + v83);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
        v54 = &v90;
        v55 = (char *)v95;
      }
    }
    v56 = &v55[24 * v96];
    v57 = *(_OWORD *)v54;
    *((_QWORD *)v56 + 2) = v54[2];
    *(_OWORD *)v56 = v57;
    v58 = ++v96;
    if (v93)
    {
      LODWORD(v90) = 2;
      v91 = v50;
      v59 = &v90;
      v60 = (char *)v95;
      if (v58 >= v97)
      {
        v77 = v58 + 1;
        v78 = (char *)v95 + 24 * v58 > (char *)&v90;
        if (v95 <= &v90 && v78)
        {
          v84 = (char *)&v90 - (_BYTE *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v77, 24);
          v60 = (char *)v95;
          v59 = (uint64_t ***)((char *)v95 + v84);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v77, 24);
          v59 = &v90;
          v60 = (char *)v95;
        }
      }
      v61 = &v60[24 * v96];
      v62 = *(_OWORD *)v59;
      *((_QWORD *)v61 + 2) = v59[2];
      *(_OWORD *)v61 = v62;
      v63 = ++v96;
      if (v93)
      {
        LODWORD(v90) = 3;
        v91 = ".";
        v92 = 1;
        v64 = &v90;
        v65 = (char *)v95;
        if (v63 >= v97)
        {
          v80 = v63 + 1;
          v81 = (char *)v95 + 24 * v63 > (char *)&v90;
          if (v95 <= &v90 && v81)
          {
            v86 = (char *)&v90 - (_BYTE *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v80, 24);
            v65 = (char *)v95;
            v64 = (uint64_t ***)((char *)v95 + v86);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v80, 24);
            v64 = &v90;
            v65 = (char *)v95;
          }
        }
        v66 = &v65[24 * v96];
        v67 = *(_OWORD *)v64;
        *((_QWORD *)v66 + 2) = v64[2];
        *(_OWORD *)v66 = v67;
        ++v96;
      }
    }
  }
  v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  if (v103)
  {
    v68 = (_QWORD **)__p;
    if (__p)
    {
      v69 = v102;
      v70 = __p;
      if (v102 != __p)
      {
        do
          v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        v70 = __p;
      }
      v102 = v68;
      operator delete(v70);
    }
    v27 = v99;
    if (!v99)
      goto LABEL_109;
    v71 = v100;
    v29 = v99;
    if (v100 == v99)
      goto LABEL_108;
    do
    {
      v73 = (void *)*--v71;
      v72 = v73;
      *v71 = 0;
      if (v73)
        operator delete[](v72);
    }
    while (v71 != v27);
    goto LABEL_107;
  }
  return v23;
}

uint64_t mlir::mps::GetCoordOp::getResultType(mlir::mps::GetCoordOp *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (v2)
    return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
  else
    return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  char **v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &mlir::mps::LSTMGradientOp::getAttributeNames(void)::attrNames;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::mps::LSTMGradientOp::getAttributeNames(void)::attrNames;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = &mlir::mps::LSTMGradientOp::getAttributeNames(void)::attrNames;
      }
    }
    a1[33] = v5[384];
    return a1[32];
  }
  return result;
}

void mlir::mps::GetCoordOp::downgradeToVersion(uint64_t **a1@<X0>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  int v7;
  unsigned int v8;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD v19[4];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  const void **v23;
  __int16 v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v26[0] = &unk_1E0E4B858;
  v26[1] = 0x200000001;
  v27 = 1;
  v7 = a2[2];
  if (v7 && (v7 != 1 || (v8 = a2[3], v8 >= 2) && (v8 != 2 || a2[4]))
    || (v25 = v6[2 * (((unint64_t)*((unsigned int *)v6 + 11) >> 23) & 1) + 8]) == 0
    || (v28[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25),
        mlir::Type::isSignedInteger((mlir::Type *)v28, 32)))
  {
    v17 = *((unsigned int *)v6 + 9);
    v18 = v6 - 2;
    if (!(_DWORD)v17)
      v18 = 0;
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v17;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v19[0] = "failed to downgrade: requested target version is {0}, but return type other than si32 is only supported from version {1}";
    v19[1] = 120;
    v19[2] = v22;
    v19[3] = 2;
    v20[0] = &unk_1E0E23F50;
    v20[1] = a2;
    v21[0] = &unk_1E0E23FE0;
    v21[1] = v26;
    v22[0] = v20;
    v22[1] = v21;
    v24 = 263;
    v23 = (const void **)v19;
    mlir::OpState::emitOpError(a1, &v23, (uint64_t)v28);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v28[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v28);
    if (v35)
    {
      v9 = (_QWORD **)__p;
      if (__p)
      {
        v10 = v34;
        v11 = __p;
        if (v34 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v34 = v9;
        operator delete(v11);
      }
      v12 = v31;
      if (v31)
      {
        v13 = v32;
        v14 = v31;
        if (v32 != v31)
        {
          do
          {
            v16 = (void *)*--v13;
            v15 = v16;
            *v13 = 0;
            if (v16)
              operator delete[](v15);
          }
          while (v13 != v12);
          v14 = v31;
        }
        v32 = v12;
        operator delete(v14);
      }
      if (v29 != &v30)
        free(v29);
    }
  }
}

uint64_t mlir::mps::RandomUniformOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t Context;
  uint64_t v15;
  uint64_t Value;
  uint64_t TensorType;
  uint64_t v18;
  uint64_t v20;
  char v21[8];
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v13 = *a7;
    v20 = a6;
    v21[0] = 0;
    v22 = 0;
    v23 = v13;
    v24 = a9;
    v25 = a10;
    if (!a6)
      goto LABEL_8;
  }
  else
  {
    v20 = a6;
    v21[0] = 0;
    v22 = 0;
    v23 = 0;
    v24 = a9;
    v25 = a10;
    if (!a6)
      goto LABEL_8;
  }
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v20);
  if (v22)
    v22 = 0;
  mlir::OperationName::OperationName(v21, "mps.random_uniform", 18, Context);
  v22 = 1;
LABEL_8:
  v26 = a4;
  v27 = a5;
  v28 = a4;
  v29 = 1;
  v28 = mlir::ValueRange::offset_base(&v28, 1);
  v29 = 0;
  v15 = mlir::ValueRange::dereference_iterator(&v28, 0);
  v28 = v23;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28);
  TensorType = mlir::mps::getTensorType(v15, Value);
  v18 = *(unsigned int *)(a11 + 8);
  if (v18 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v18) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::getTensorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  _QWORD *Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t NumElements;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v18;
  void *__b;
  int v20;
  int v21;
  _BYTE v22[32];
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a1, (uint64_t)&v23))
  {
    v4 = mlir::RankedTensorType::get((uint64_t)v23, v24, a2, 0);
LABEL_17:
    v16 = v4;
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(void **)(*(_QWORD *)v5 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = 0;
  }
  v18 = v5;
  if (!v5 || !mlir::TensorType::hasRank((mlir::TensorType *)&v18))
  {
LABEL_16:
    v4 = mlir::UnrankedTensorType::get(a2);
    goto LABEL_17;
  }
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  if (v9)
  {
    v10 = 8 * v9;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v10 -= 8;
      if (!v10)
        goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_14:
  v11 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  NumElements = mlir::ShapedType::getNumElements(v11, v12);
  v14 = NumElements;
  __b = v22;
  v21 = 4;
  if (NumElements < 5)
  {
    if (NumElements)
      memset_pattern16(v22, &unk_1812352C0, 8 * NumElements);
    v15 = v22;
  }
  else
  {
    v20 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v22, NumElements, 8);
    v15 = __b;
    memset_pattern16(__b, &unk_1812352C0, 8 * v14);
  }
  v20 = v14;
  v16 = mlir::RankedTensorType::get((uint64_t)v15, v14, a2, 0);
  if (__b != v22)
    free(__b);
LABEL_18:
  if (v23 != v25)
    free(v23);
  return v16;
}

uint64_t mlir::mps::RandomNormalOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v13;
  __int128 v14;
  uint64_t Context;
  uint64_t v16;
  uint64_t Value;
  uint64_t TensorType;
  uint64_t v19;
  uint64_t v21;
  char v22[8];
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v13 = *a7;
    v14 = a7[1];
  }
  else
  {
    v13 = 0uLL;
    v14 = 0uLL;
  }
  v21 = a6;
  v22[0] = 0;
  v23 = 0;
  v24 = v13;
  v25 = v14;
  v26 = a9;
  v27 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v21);
    if (v23)
      v23 = 0;
    mlir::OperationName::OperationName(v22, "mps.random_normal", 17, Context);
    v23 = 1;
  }
  v28 = a4;
  v29 = a5;
  v30 = a4;
  v31 = 1;
  v30 = mlir::ValueRange::offset_base(&v30, 1);
  v31 = 0;
  v16 = mlir::ValueRange::dereference_iterator(&v30, 0);
  v30 = *((_QWORD *)&v24 + 1);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v30);
  TensorType = mlir::mps::getTensorType(v16, Value);
  v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t Value;
  uint64_t TensorType;
  uint64_t v20;
  uint64_t v22;
  char v23[8];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v13 = *a7;
    v14 = a7[1];
    v15 = a7[2];
  }
  else
  {
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
  }
  v22 = a6;
  v23[0] = 0;
  v24 = 0;
  v25 = v13;
  v26 = v14;
  v27 = v15;
  v28 = a9;
  v29 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v22);
    if (v24)
      v24 = 0;
    mlir::OperationName::OperationName(v23, "mps.random_truncated_normal", 27, Context);
    v24 = 1;
  }
  v30 = a4;
  v31 = a5;
  v32 = a4;
  v33 = 1;
  v32 = mlir::ValueRange::offset_base(&v32, 1);
  v33 = 0;
  v17 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v32 = *((_QWORD *)&v26 + 1);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  TensorType = mlir::mps::getTensorType(v17, Value);
  v20 = *(unsigned int *)(a11 + 8);
  if (v20 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v20) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PadOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  uint64_t DefiningOp;
  uint64_t **v22;
  uint64_t v23;
  uint64_t ArgAttrsAttr;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t ElementTypeOrSelf;
  unsigned int v42;
  void *v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OperandRange;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56[2];
  void *__p[2];
  __int128 v58;
  uint64_t v59;
  char v60[8];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[6];

  v71[4] = *MEMORY[0x1E0C80C00];
  v67 = a4;
  v68 = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v59 = a6;
  v60[0] = 0;
  v61 = 0;
  v62 = v16;
  v63 = a9;
  v17 = a5;
  v64 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(v60, "mps.pad", 7, Context);
    v61 = 1;
    v17 = v68;
  }
  v65 = a4;
  v66 = a5;
  if (v17 >= 3)
  {
    v19 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::PadOpAdaptor::verify((uint64_t)&v59, v19))
    {
      v20 = mlir::ValueRange::dereference_iterator(&v67, 0);
      *(_OWORD *)__p = 0u;
      v58 = 0u;
      *(_OWORD *)v56 = 0u;
      v50 = 0;
      v51 = 0;
      v52 = (uint64_t **)&v50;
      v69 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v67, 1);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v69);
      if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
      {
        ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
        v22 = (uint64_t **)mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        goto LABEL_33;
      }
      v22 = (uint64_t **)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v67, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v22 + 1)))
      {
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v22 + 1));
        v52 = v22;
        v53 = v23;
        if (v22)
        {
          if ((_UNKNOWN *)(*v22)[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            goto LABEL_33;
          v69 = v71;
          v70 = 0x400000000;
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
          v25 = v56[0];
          v26 = v56[1];
          v27 = (char *)v56[1] - (char *)v56[0];
          v28 = ((char *)v56[1] - (char *)v56[0]) >> 3;
          v29 = __p[1];
          v54 = (char *)v28;
          v55 = v30;
          if (v30 == (char *)v28)
          {
            v31 = ArgAttrsAttr;
            v32 = v70;
            if (v28 != v70)
            {
              if (v28 >= v70)
              {
                if (v28 > HIDWORD(v70))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, ((char *)v56[1] - (char *)v56[0]) >> 3, 8);
                  v32 = v70;
                }
                if (v28 != v32)
                  bzero(&v69[v32], 8 * (v28 - v32));
              }
              LODWORD(v70) = v27 >> 3;
            }
            if (v26 != v25)
            {
              v33 = 0;
              v34 = v69;
              do
              {
                v39 = *(_QWORD *)(v31 + 8 * v33);
                v40 = 0x8000000000000000;
                if (v39 != 0x8000000000000000)
                  v40 = v25[v33] + v39 + v29[v33];
                v34[v33++] = v40;
              }
              while (v28 > v33);
            }
          }
          else if (!mlir::emitOptionalError<char const(&)[16],unsigned long &,char const(&)[29],unsigned long &,char const(&)[2]>((uint64_t)a2, a3, "paddings rank (", &v54, ") doesn't match input rank (", &v55, ")"))
          {
            v22 = 0;
            v45 = 0;
            v49 = v69;
            if (v69 == v71)
            {
LABEL_45:
              if (!v45)
              {
LABEL_46:
                v38 = 0;
                v43 = __p[1];
                if (!__p[1])
                {
LABEL_37:
                  if (v56[0])
                  {
                    v56[1] = v56[0];
                    operator delete(v56[0]);
                  }
                  return v38;
                }
LABEL_36:
                *(_QWORD *)&v58 = v43;
                operator delete(v43);
                goto LABEL_37;
              }
LABEL_33:
              v42 = *(_DWORD *)(a11 + 8);
              if (v42 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v42 + 1, 8);
                v42 = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v42) = v22;
              ++*(_DWORD *)(a11 + 8);
              v38 = 1;
              v43 = __p[1];
              if (!__p[1])
                goto LABEL_37;
              goto LABEL_36;
            }
LABEL_44:
            free(v49);
            goto LABEL_45;
          }
          v46 = (uint64_t)v69;
          v47 = v70;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
          v22 = (uint64_t **)mlir::RankedTensorType::get(v46, v47, OperandRange, 0);
          v45 = 1;
          v49 = v69;
          if (v69 == v71)
            goto LABEL_45;
          goto LABEL_44;
        }
      }
      else
      {
        v22 = 0;
        v52 = 0;
        v53 = 0;
      }
      v45 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot pad a non-shaped type");
      goto LABEL_45;
    }
  }
  v35 = mlir::Float32Type::get(this, a2);
  v36 = mlir::UnrankedTensorType::get(v35);
  v37 = *(unsigned int *)(a11 + 8);
  if (v37 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    LODWORD(v37) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v36;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PadOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
    return 1;
  v12 = "'mps.pad' op requires attribute 'paddingMode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::`anonymous namespace'::getPaddingValues(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t ArgAttrsAttr;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *ArgOperands;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  v25 = a4;
  v26 = a5;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v25);
  v28 = v8;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (v10 == 2)
  {
    v11 = (unint64_t *)ArgAttrsAttr;
    if (*(_QWORD *)(ArgAttrsAttr + 8) == 2)
    {
      ArgOperands = v29;
      v28 = 0x800000000;
      mlir::getIntValues<long long>(v25, v26, (uint64_t)&ArgOperands, 1);
      v12 = *v11;
      v13 = *a3;
      v14 = (a3[1] - *a3) >> 3;
      if ((uint64_t)v12 <= 0)
      {
        if (v12 <= v14)
        {
          if (v12 < v14)
            a3[1] = v13 + 8 * v12;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)a3, v12 - v14);
        }
        v23 = a3[3];
        v24 = (a3[4] - v23) >> 3;
        if (v12 <= v24)
        {
          if (v12 < v24)
            a3[4] = v23 + 8 * v12;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)(a3 + 3), v12 - v24);
        }
        v18 = ArgOperands;
        if (ArgOperands == v29)
          return 1;
      }
      else
      {
        if (v12 <= v14)
        {
          if (v12 < v14)
            a3[1] = v13 + 8 * v12;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)a3, v12 - v14);
          v13 = *a3;
        }
        v16 = 0;
        v17 = 0;
        v18 = ArgOperands;
        do
        {
          *(_QWORD *)(v13 + 8 * v17++) = v18[v16];
          v16 += 2;
        }
        while ((uint64_t)v12 > v17);
        v19 = a3[3];
        v20 = (a3[4] - v19) >> 3;
        if (v12 <= v20)
        {
          if (v12 < v20)
            a3[4] = v19 + 8 * v12;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)(a3 + 3), v12 - v20);
          v18 = ArgOperands;
          v19 = a3[3];
        }
        v21 = 0;
        v22 = 1;
        do
        {
          *(_QWORD *)(v19 + 8 * v21++) = v18[v22];
          v22 += 2;
        }
        while ((uint64_t)v12 > v21);
        if (v18 == v29)
          return 1;
      }
      free(v18);
      return 1;
    }
  }
  return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid shape for paddings tensor");
}

uint64_t mlir::mps::PadOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DefiningOp;
  int v6;
  uint64_t v8;
  uint64_t ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  BOOL v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  const void **v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  const char *v73;
  uint64_t v74;
  _QWORD v75[3];
  void *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE v79[96];
  void *v80;
  _QWORD *v81;
  void *__p;
  _QWORD **v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    v70 = 0;
    v71 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70))
      goto LABEL_5;
    return 1;
  }
  v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  v70 = v2;
  v71 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70))
    return 1;
LABEL_5:
  v68 = 0;
  v69 = 0;
  v4 = *(_QWORD *)((*this)[9] + 56);
  *(_QWORD *)&v85 = &v68;
  v75[0] = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v75);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v85, DefiningOp))
    return 1;
  v6 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
  if (!v6 || v6 == 3)
    return 1;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  v12 = v11;
  v86 = 0u;
  v87 = 0u;
  v85 = 0u;
  {
    if (v12 < 1)
    {
LABEL_28:
      v8 = 1;
    }
    else
    {
      v14 = 0;
      if (v6 == 1)
        v15 = -1;
      else
        v15 = 0;
      while (1)
      {
        v16 = *(_QWORD *)(v85 + 8 * (_QWORD)v14) <= *(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)v14)
            ? *(const char **)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)v14)
            : *(const char **)(v85 + 8 * (_QWORD)v14);
        v17 = *(_QWORD *)(ArgAttrsAttr + 8 * (_QWORD)v14);
        v18 = (const char *)(v17 + v15);
        if (v17 != 0x8000000000000000 && (uint64_t)v16 > (uint64_t)v18)
          break;
        if ((const char *)v12 == ++v14)
          goto LABEL_28;
      }
      v66 = (const void **)"padding values too large at axis ";
      v67 = 259;
      mlir::OpState::emitOpError(this, &v66, (uint64_t)v75);
      if (v75[0])
      {
        v72 = 2;
        v73 = v14;
        v20 = &v72;
        v21 = (char *)v76;
        if (v77 >= v78)
        {
          v52 = v77 + 1;
          if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
          {
            v61 = (char *)&v72 - (_BYTE *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v52, 24);
            v21 = (char *)v76;
            v20 = (int *)((char *)v76 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v52, 24);
            v20 = &v72;
            v21 = (char *)v76;
          }
        }
        v22 = &v21[24 * v77];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        v24 = ++v77;
        if (v75[0])
        {
          v72 = 3;
          v73 = ", max padding is ";
          v74 = 17;
          v25 = &v72;
          v26 = (char *)v76;
          if (v24 >= v78)
          {
            v53 = v24 + 1;
            v54 = (char *)v76 + 24 * v24 > (char *)&v72;
            if (v76 <= &v72 && v54)
            {
              v62 = (char *)&v72 - (_BYTE *)v76;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v53, 24);
              v26 = (char *)v76;
              v25 = (int *)((char *)v76 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v53, 24);
              v25 = &v72;
              v26 = (char *)v76;
            }
          }
          v27 = &v26[24 * v77];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v27 = v28;
          v29 = ++v77;
          if (v75[0])
          {
            v72 = 2;
            v73 = v18;
            v30 = &v72;
            v31 = (char *)v76;
            if (v29 >= v78)
            {
              v55 = v29 + 1;
              v56 = (char *)v76 + 24 * v29 > (char *)&v72;
              if (v76 <= &v72 && v56)
              {
                v63 = (char *)&v72 - (_BYTE *)v76;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v55, 24);
                v31 = (char *)v76;
                v30 = (int *)((char *)v76 + v63);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v55, 24);
                v30 = &v72;
                v31 = (char *)v76;
              }
            }
            v32 = &v31[24 * v77];
            v33 = *(_OWORD *)v30;
            *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
            *(_OWORD *)v32 = v33;
            v34 = ++v77;
            if (v75[0])
            {
              v72 = 3;
              v73 = ", got ";
              v74 = 6;
              v35 = &v72;
              v36 = (char *)v76;
              if (v34 >= v78)
              {
                v57 = v34 + 1;
                v58 = (char *)v76 + 24 * v34 > (char *)&v72;
                if (v76 <= &v72 && v58)
                {
                  v64 = (char *)&v72 - (_BYTE *)v76;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v57, 24);
                  v36 = (char *)v76;
                  v35 = (int *)((char *)v76 + v64);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v57, 24);
                  v35 = &v72;
                  v36 = (char *)v76;
                }
              }
              v37 = &v36[24 * v77];
              v38 = *(_OWORD *)v35;
              *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
              *(_OWORD *)v37 = v38;
              v39 = ++v77;
              if (v75[0])
              {
                v72 = 2;
                v73 = v16;
                v40 = &v72;
                v41 = (char *)v76;
                if (v39 >= v78)
                {
                  v59 = v39 + 1;
                  v60 = (char *)v76 + 24 * v39 > (char *)&v72;
                  if (v76 <= &v72 && v60)
                  {
                    v65 = (char *)&v72 - (_BYTE *)v76;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v59, 24);
                    v41 = (char *)v76;
                    v40 = (int *)((char *)v76 + v65);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v59, 24);
                    v40 = &v72;
                    v41 = (char *)v76;
                  }
                }
                v42 = &v41[24 * v77];
                v43 = *(_OWORD *)v40;
                *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
                *(_OWORD *)v42 = v43;
                ++v77;
              }
            }
          }
        }
      }
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
      if (v75[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
      if (v84)
      {
        v44 = (_QWORD **)__p;
        if (__p)
        {
          v45 = v83;
          v46 = __p;
          if (v83 != __p)
          {
            do
              v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
            while (v45 != v44);
            v46 = __p;
          }
          v83 = v44;
          operator delete(v46);
        }
        v47 = v80;
        if (v80)
        {
          v48 = v81;
          v49 = v80;
          if (v81 != v80)
          {
            do
            {
              v51 = (void *)*--v48;
              v50 = v51;
              *v48 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v48 != v47);
            v49 = v80;
          }
          v81 = v47;
          operator delete(v49);
        }
        if (v76 != v79)
          free(v76);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  if (*((_QWORD *)&v86 + 1))
  {
    *(_QWORD *)&v87 = *((_QWORD *)&v86 + 1);
    operator delete(*((void **)&v86 + 1));
  }
  if ((_QWORD)v85)
  {
    *((_QWORD *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  return v8;
}

uint64_t mlir::mps::PadGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t DefiningOp;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t ArgAttrsAttr;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t ElementTypeOrSelf;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OperandRange;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  void *v52[2];
  void *__p[2];
  __int128 v54;
  _QWORD v55[2];
  char *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  v55[0] = a4;
  v55[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v55, 0);
  v14 = mlir::ValueRange::dereference_iterator(v55, 1);
  *(_OWORD *)__p = 0u;
  v54 = 0u;
  *(_OWORD *)v52 = 0u;
  v42 = 0;
  v43 = 0;
  v46 = (uint64_t **)&v42;
  v56 = (char *)mlir::ValueRange::dereference_iterator(v55, 2);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v56);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v46, DefiningOp))
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
    v17 = (uint64_t **)mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_24;
  }
    goto LABEL_52;
  v16 = *(_QWORD *)(v13 + 8);
  v17 = (uint64_t **)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v17 + 1)))
  {
    v17 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_32;
  }
  v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v17 + 1));
  v46 = v17;
  v47 = v18;
  if (!v17)
  {
LABEL_32:
    v35 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot calculate the pad gradient a non-shaped type");
    goto LABEL_51;
  }
  v19 = v16 & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v19 + 8))
  {
    v44 = 0;
    v45 = 0;
    goto LABEL_39;
  }
  v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v19 + 8);
  v44 = v19;
  v45 = v20;
  if (!v19)
  {
LABEL_39:
    v35 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot calculate the pad gradient a non-shaped type");
    v17 = 0;
    goto LABEL_51;
  }
  if ((_UNKNOWN *)(*v17)[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v35 = 1;
    goto LABEL_51;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v35 = 1;
    v17 = (uint64_t **)v19;
    goto LABEL_51;
  }
  v56 = (char *)v58;
  v57 = 0x400000000;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
  v23 = v22;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
  v50 = ((char *)v52[1] - (char *)v52[0]) >> 3;
  v51 = (char *)v23;
  v49 = (uint64_t)(v54 - (unint64_t)__p[1]) >> 3;
  if (v23 == v50)
  {
    if (v23 == (uint64_t)(v54 - (unint64_t)__p[1]) >> 3)
    {
      v24 = v57;
      if (v23 != v57)
      {
        if (v23 >= v57)
        {
          if (v23 > HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v23, 8);
            v24 = v57;
          }
          if (v23 != v24)
            bzero(&v56[8 * v24], 8 * (v23 - v24));
        }
        LODWORD(v57) = v23;
        LODWORD(v24) = v23;
      }
      if (!v23)
        goto LABEL_46;
      v25 = 0;
      v26 = v56;
      v27 = 1;
      v28 = v52[0];
      v29 = __p[1];
      while (1)
      {
        while (1)
        {
          v36 = *(_QWORD *)(ArgAttrsAttr + 8 * v25);
          if (v36 != 0x8000000000000000)
            break;
          v26[v25] = 0x8000000000000000;
          v25 = v27++;
          if (v23 <= v25)
            goto LABEL_46;
        }
        v48 = (char *)(v29[v25] + v28[v25]);
        v37 = v36 < (uint64_t)v48;
        v38 = v36 - (_QWORD)v48;
        if (v37)
          break;
        v26[v25] = v38;
        v25 = v27++;
        if (v23 <= v25)
          goto LABEL_46;
      }
      if (!mlir::emitOptionalError<char const(&)[21],long long const&,char const(&)[37],long long const&,char const(&)[2]>(a2, a3, "gradient dimension (", (char **)(ArgAttrsAttr + 8 * v25), ")is smaller than the total padding (", &v48, ")"))goto LABEL_48;
LABEL_45:
      LODWORD(v24) = v57;
LABEL_46:
      v39 = (uint64_t)v56;
      v40 = v24;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v44);
      v17 = (uint64_t **)mlir::RankedTensorType::get(v39, v40, OperandRange, 0);
      v35 = 1;
      goto LABEL_49;
    }
    if (mlir::emitOptionalError<char const(&)[18],unsigned long &,char const(&)[3],unsigned long &>(a2, a3, "pad rank mismatch", &v51, ", ", (char **)&v49))goto LABEL_45;
  }
  else if (mlir::emitOptionalError<char const(&)[18],unsigned long &,char const(&)[3],unsigned long &>(a2, a3, "pad rank mismatch", &v51, ", ", (char **)&v50))
  {
    goto LABEL_45;
  }
LABEL_48:
  v17 = 0;
  v35 = 0;
LABEL_49:
  if (v56 != (char *)v58)
    free(v56);
LABEL_51:
  if (!v35)
  {
LABEL_52:
    v33 = 0;
    v34 = __p[1];
    if (!__p[1])
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_24:
  v32 = *(_DWORD *)(a11 + 8);
  if (v32 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
    v32 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v32) = v17;
  ++*(_DWORD *)(a11 + 8);
  v33 = 1;
  v34 = __p[1];
  if (!__p[1])
    goto LABEL_28;
LABEL_27:
  *(_QWORD *)&v54 = v34;
  operator delete(v34);
LABEL_28:
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  return v33;
}

uint64_t mlir::mps::SampleGridOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  const void **v6;
  void *v7;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const void **v29[4];
  __int16 v30;
  _QWORD v31[3];
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  void *__p;
  _QWORD **v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v6 = (const void **)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v7 = (void *)*((_QWORD *)*v6 + 17);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  if (v3)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (HIBYTE(*((_DWORD *)v1 + 11)))
      v19 = v1 + 10;
    else
      v19 = 0;
    v20 = *(_DWORD *)(v19[1] + 8);
    v21 = v1[3];
    v31[0] = v3;
    v29[0] = v6;
    if (mlir::TensorType::hasRank((mlir::TensorType *)v31)
      && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v31), v22 != 4))
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "input rank should be 4"))
        return 0;
    }
    else if (v20 >= 2)
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "unsupported layout"))
        return 0;
    }
    else
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)v29))
        goto LABEL_40;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
      if (v24 == 4)
      {
        v25 = *(_QWORD *)(Value + 24);
        if (v25 == 0x8000000000000000 || v25 == 2)
        {
LABEL_40:
          if (mlir::TensorType::hasRank((mlir::TensorType *)v31) && mlir::TensorType::hasRank((mlir::TensorType *)v29))
          {
            v26 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v31);
            v27 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
            if (v27 != 0x8000000000000000
              && *v26 != 0x8000000000000000
              && *v26 != v27
              && !mlir::emitOptionalError<char const(&)[39]>(v21, 1, "batch dimensions of input and coordinates do not match"))
            {
              return 0;
            }
          }
          return 1;
        }
        if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "coordinates should have 2 channels"))
          return 0;
      }
      else if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "coordinates rank should be 4"))
      {
        return 0;
      }
    }
    return 1;
  }
  v29[0] = (const void **)"cannot sample a non-tensor type";
  v30 = 259;
  mlir::OpState::emitOpError(this, v29, (uint64_t)v31);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  if (v31[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
  if (v38)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v37;
      v13 = __p;
      if (v37 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v37 = v11;
      operator delete(v13);
    }
    v14 = v34;
    if (v34)
    {
      v15 = v35;
      v16 = v34;
      if (v35 != v34)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v34;
      }
      v35 = v14;
      operator delete(v16);
    }
    if (v32 != &v33)
      free(v32);
  }
  return v10;
}

uint64_t mlir::mps::SampleGridOp::getLayout(mlir::mps::SampleGridOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(unsigned int *)(*(_QWORD *)(v1 + 8) + 8);
}

uint64_t mlir::mps::SampleGridOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t Context;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t Value;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ElementType;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE v55[8];
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD v65[2];
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[5];

  v68[4] = *MEMORY[0x1E0C80C00];
  v65[0] = a4;
  v65[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v19 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v54 = a6;
  v55[0] = 0;
  v56 = 0;
  v57 = v16;
  v58 = v17;
  v59 = v18;
  v60 = v19;
  v61 = a9;
  v62 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v54);
    if (v56)
      v56 = 0;
    mlir::OperationName::OperationName(v55, "mps.sample_grid", 15, Context);
    v56 = 1;
  }
  v63 = a4;
  v64 = a5;
  if (a5 >= 3
    && (v21 = mlir::UnknownLoc::get(this, a2), mlir::mps::SampleGridOpAdaptor::verify(&v54, v21)))
  {
    v22 = mlir::ValueRange::dereference_iterator(v65, 0);
    v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v23 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v23 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v25 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v25 = 0;
    }
    v26 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v65, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(void **)(*(_QWORD *)v26 + 136);
    if (v27 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v27 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v26 = 0;
    }
    if (v25)
      v29 = v26 == 0;
    else
      v29 = 1;
    if (v29)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot sample a non-tensor type");
    v34 = *(int *)(*((_QWORD *)&v57 + 1) + 8);
    v52 = v26;
    v53 = v25;
    v34 *= 8;
    v35 = *(_QWORD *)((char *)qword_18125C360 + v34);
    v36 = *(_QWORD *)((char *)qword_18125C398 + v34);
    v37 = *(_QWORD *)((char *)qword_18125C3D0 + v34);
    v38 = *(_QWORD *)((char *)qword_18125C408 + v34);
    v66 = v68;
    memset_pattern16(v68, &unk_1812352C0, 0x20uLL);
    v67 = 0x400000004;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v53))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
      if (v40 >= 4)
      {
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        v66[v35] = *(_QWORD *)(Value + 8 * v35);
        v42 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        v66[v38] = *(_QWORD *)(v42 + 8 * v38);
      }
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v52))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
      v43 = (uint64_t)v66;
      if (v44 >= 4)
      {
        if (v66[v35] == 0x8000000000000000)
        {
          v45 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
          v66[v35] = *v45;
        }
        v46 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        v66[v36] = *(_QWORD *)(v46 + 8);
        v47 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        v43 = (uint64_t)v66;
        v66[v37] = *(_QWORD *)(v47 + 16);
      }
    }
    else
    {
      v43 = (uint64_t)v66;
    }
    v48 = v67;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v53);
    v50 = mlir::RankedTensorType::get(v43, v48, ElementType, 0);
    if (v66 != v68)
      free(v66);
    v51 = *(unsigned int *)(a11 + 8);
    if (v51 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v51 + 1, 8);
      LODWORD(v51) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v51) = v50;
  }
  else
  {
    v31 = mlir::Float32Type::get(this, a2);
    v32 = mlir::UnrankedTensorType::get(v31);
    v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
  }
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SampleGridOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1[4])
  {
    if (a1[7])
    {
      if (a1[9])
        return 1;
      v24[0] = "'mps.sample_grid' op requires attribute 'sampling_mode'";
      v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
      v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
      if (v26[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      if (v33)
      {
        v17 = (_QWORD **)__p;
        if (__p)
        {
          v18 = v32;
          v19 = __p;
          if (v32 != __p)
          {
            do
              v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
            while (v18 != v17);
            v19 = __p;
          }
          v32 = v17;
          operator delete(v19);
        }
        v6 = v29;
        if (!v29)
          goto LABEL_49;
        v20 = v30;
        v8 = v29;
        if (v30 == v29)
        {
LABEL_48:
          v30 = v6;
          operator delete(v8);
LABEL_49:
          if (v27 != &v28)
            free(v27);
          return v2;
        }
        do
        {
          v22 = (void *)*--v20;
          v21 = v22;
          *v20 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v20 != v6);
LABEL_47:
        v8 = v29;
        goto LABEL_48;
      }
    }
    else
    {
      v24[0] = "'mps.sample_grid' op requires attribute 'padding_mode'";
      v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
      v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
      if (v26[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      if (v33)
      {
        v11 = (_QWORD **)__p;
        if (__p)
        {
          v12 = v32;
          v13 = __p;
          if (v32 != __p)
          {
            do
              v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
            while (v12 != v11);
            v13 = __p;
          }
          v32 = v11;
          operator delete(v13);
        }
        v6 = v29;
        if (!v29)
          goto LABEL_49;
        v14 = v30;
        v8 = v29;
        if (v30 == v29)
          goto LABEL_48;
        do
        {
          v16 = (void *)*--v14;
          v15 = v16;
          *v14 = 0;
          if (v16)
            operator delete[](v15);
        }
        while (v14 != v6);
        goto LABEL_47;
      }
    }
  }
  else
  {
    v24[0] = "'mps.sample_grid' op requires attribute 'layout'";
    v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v3 = (_QWORD **)__p;
      if (__p)
      {
        v4 = v32;
        v5 = __p;
        if (v32 != __p)
        {
          do
            v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
          while (v4 != v3);
          v5 = __p;
        }
        v32 = v3;
        operator delete(v5);
      }
      v6 = v29;
      if (!v29)
        goto LABEL_49;
      v7 = v30;
      v8 = v29;
      if (v30 == v29)
        goto LABEL_48;
      do
      {
        v10 = (void *)*--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          operator delete[](v9);
      }
      while (v7 != v6);
      goto LABEL_47;
    }
  }
  return v2;
}

uint64_t mlir::mps::CostVolumeOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t ArgAttrsAttr;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  _QWORD **v65;
  _QWORD **v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  _QWORD **v73;
  _QWORD **v74;
  void *v75;
  _QWORD *v76;
  void *v77;
  void *v78;
  _QWORD **v79;
  _QWORD **v80;
  void *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  _QWORD **v85;
  _QWORD **v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  const void **v92[4];
  __int16 v93;
  _QWORD v94[2];
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  void *__p;
  unsigned int v100;
  void *v101;
  uint64_t v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  _QWORD **v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v2 = (_QWORD *)(*this)[9];
    v97 = v3;
    v98 = v4;
    v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
      goto LABEL_3;
LABEL_6:
    v95 = v5;
    v96 = 0;
    v8 = (_QWORD *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  v97 = 0;
  v98 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v7 = (*this)[9];
  v95 = v5;
  v96 = v6;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
  {
LABEL_4:
    v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    goto LABEL_8;
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  v94[0] = v8;
  v94[1] = v9;
  v10 = operator new(0x20uLL);
  memset_pattern16(v10, &unk_1812352C0, 0x20uLL);
  ArgAttrsAttr = (uint64_t)v10;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v97))
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v97);
    v12 = (uint64_t)v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v95))
    {
LABEL_10:
      v13 = v10;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94))
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v12 = (uint64_t)v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v95))
      goto LABEL_10;
  }
  v12 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v95);
  v13 = v10;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94))
LABEL_11:
    v13 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
LABEL_12:
  v14 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v14 = 0;
  v92[0] = *(const void ***)(v14 + 40);
  mlir::IntegerAttr::getValue(v92, (llvm::APInt *)&__p);
  if (v100 > 0x40)
  {
    v15 = *(void **)__p;
    operator delete[](__p);
  }
  else
  {
    v15 = __p;
  }
  v16 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v16 = 0;
  v92[0] = *(const void ***)(v16 + 48);
  mlir::IntegerAttr::getValue(v92, (llvm::APInt *)&__p);
  if (v100 > 0x40)
  {
    v17 = *(void **)__p;
    operator delete[](__p);
    if (!v15)
      goto LABEL_53;
  }
  else
  {
    v17 = __p;
    if (!v15)
    {
LABEL_53:
      v92[0] = (const void **)"window_height and window_width should be positive";
      v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v107)
      {
        v43 = (_QWORD **)v105;
        if (v105)
        {
          v44 = v106;
          v45 = v105;
          if (v106 != v105)
          {
            do
              v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
            while (v44 != v43);
            v45 = v105;
          }
          v106 = v43;
          operator delete(v45);
        }
        v40 = v103;
        if (!v103)
          goto LABEL_176;
        v46 = v104;
        v42 = v103;
        if (v104 == v103)
        {
LABEL_175:
          v104 = v40;
          operator delete(v42);
LABEL_176:
          if (v101 != &v102)
            free(v101);
          goto LABEL_178;
        }
        do
        {
          v48 = (void *)*--v46;
          v47 = v48;
          *v46 = 0;
          if (v48)
            operator delete[](v47);
        }
        while (v46 != v40);
LABEL_174:
        v42 = v103;
        goto LABEL_175;
      }
      goto LABEL_178;
    }
  }
  if (!v17)
    goto LABEL_53;
  v18 = ((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1;
  v19 = (void **)&(*this)[2 * v18 + 8];
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v20 = (uint64_t)&(*this)[2 * v18 + 8];
  else
    v20 = 0;
  v21 = *(int *)(*(_QWORD *)(v20 + 8) + 8);
  v22 = qword_18125C3D0[v21];
  v23 = qword_18125C398[v21];
  v24 = qword_18125C360[v21];
  v25 = *(_QWORD *)(v12 + 8 * v24);
  v26 = 8 * qword_18125C408[v21];
  v27 = *(_QWORD *)(v12 + v26);
  v28 = *(_QWORD *)(ArgAttrsAttr + v26);
  v29 = *(_QWORD *)(ArgAttrsAttr + 8 * v23);
  v30 = *(_QWORD *)(ArgAttrsAttr + 8 * v22);
  v32 = v13[2];
  v31 = v13[3];
  v33 = v13[1];
  if (v25 != 0x8000000000000000)
  {
    v51 = *(_QWORD *)(ArgAttrsAttr + 8 * v24);
    if (v51 != 0x8000000000000000 && v25 != v51)
    {
      v92[0] = (const void **)"Batch size in input and ref should be the same";
      v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v107)
      {
        v59 = (_QWORD **)v105;
        if (v105)
        {
          v60 = v106;
          v61 = v105;
          if (v106 != v105)
          {
            do
              v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            v61 = v105;
          }
          v106 = v59;
          operator delete(v61);
        }
        v40 = v103;
        if (!v103)
          goto LABEL_176;
        v62 = v104;
        v42 = v103;
        if (v104 == v103)
          goto LABEL_175;
        do
        {
          v64 = (void *)*--v62;
          v63 = v64;
          *v62 = 0;
          if (v64)
            operator delete[](v63);
        }
        while (v62 != v40);
        goto LABEL_174;
      }
      goto LABEL_178;
    }
    if (*v13 != 0x8000000000000000 && v25 != *v13)
    {
      v92[0] = (const void **)"Batch size in input and coordinates should be the same";
      v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v107)
      {
        v53 = (_QWORD **)v105;
        if (v105)
        {
          v54 = v106;
          v55 = v105;
          if (v106 != v105)
          {
            do
              v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
            while (v54 != v53);
            v55 = v105;
          }
          v106 = v53;
          operator delete(v55);
        }
        v40 = v103;
        if (!v103)
          goto LABEL_176;
        v56 = v104;
        v42 = v103;
        if (v104 == v103)
          goto LABEL_175;
        do
        {
          v58 = (void *)*--v56;
          v57 = v58;
          *v56 = 0;
          if (v58)
            operator delete[](v57);
        }
        while (v56 != v40);
        goto LABEL_174;
      }
      goto LABEL_178;
    }
  }
  if (v27 == 0x8000000000000000 || v28 == 0x8000000000000000 || v27 == v28)
  {
    if (v31 != 0x8000000000000000)
    {
      if (v31 == 1)
      {
        __p = *v19;
        if (!__p)
        {
          v92[0] = (const void **)"BoolAttr coord_is_x_only should be specified when C2 = 1";
          v93 = 259;
          mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
          v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
          if (__p)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
          if (v107)
          {
            v85 = (_QWORD **)v105;
            if (v105)
            {
              v86 = v106;
              v87 = v105;
              if (v106 != v105)
              {
                do
                  v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
                while (v86 != v85);
                v87 = v105;
              }
              v106 = v85;
              operator delete(v87);
            }
            v40 = v103;
            if (!v103)
              goto LABEL_176;
            v88 = v104;
            v42 = v103;
            if (v104 == v103)
              goto LABEL_175;
            do
            {
              v90 = (void *)*--v88;
              v89 = v90;
              *v88 = 0;
              if (v90)
                operator delete[](v89);
            }
            while (v88 != v40);
            goto LABEL_174;
          }
          goto LABEL_178;
        }
        mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
      }
      else if (v31 != 2)
      {
        v92[0] = (const void **)"Channel size in coordinates should be 1 or 2";
        v93 = 259;
        mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
        v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        if (v107)
        {
          v37 = (_QWORD **)v105;
          if (v105)
          {
            v38 = v106;
            v39 = v105;
            if (v106 != v105)
            {
              do
                v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
              while (v38 != v37);
              v39 = v105;
            }
            v106 = v37;
            operator delete(v39);
          }
          v40 = v103;
          if (!v103)
            goto LABEL_176;
          v41 = v104;
          v42 = v103;
          if (v104 == v103)
            goto LABEL_175;
          do
          {
            v50 = (void *)*--v41;
            v49 = v50;
            *v41 = 0;
            if (v50)
              operator delete[](v49);
          }
          while (v41 != v40);
          goto LABEL_174;
        }
        goto LABEL_178;
      }
    }
    if (v29 == 0x8000000000000000 || v33 == 0x8000000000000000 || v29 == v33)
    {
      v36 = 1;
      if (v30 != 0x8000000000000000 && v32 != 0x8000000000000000 && v30 != v32)
      {
        v92[0] = (const void **)"W in ref and coordinates should be the same";
        v93 = 259;
        mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
        v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        if (v107)
        {
          v73 = (_QWORD **)v105;
          if (v105)
          {
            v74 = v106;
            v75 = v105;
            if (v106 != v105)
            {
              do
                v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
              while (v74 != v73);
              v75 = v105;
            }
            v106 = v73;
            operator delete(v75);
          }
          v40 = v103;
          if (!v103)
            goto LABEL_176;
          v76 = v104;
          v42 = v103;
          if (v104 == v103)
            goto LABEL_175;
          do
          {
            v78 = (void *)*--v76;
            v77 = v78;
            *v76 = 0;
            if (v78)
              operator delete[](v77);
          }
          while (v76 != v40);
          goto LABEL_174;
        }
      }
    }
    else
    {
      v92[0] = (const void **)"H in ref and coordinates should be the same";
      v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      if (v107)
      {
        v79 = (_QWORD **)v105;
        if (v105)
        {
          v80 = v106;
          v81 = v105;
          if (v106 != v105)
          {
            do
              v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            v81 = v105;
          }
          v106 = v79;
          operator delete(v81);
        }
        v40 = v103;
        if (!v103)
          goto LABEL_176;
        v82 = v104;
        v42 = v103;
        if (v104 == v103)
          goto LABEL_175;
        do
        {
          v84 = (void *)*--v82;
          v83 = v84;
          *v82 = 0;
          if (v84)
            operator delete[](v83);
        }
        while (v82 != v40);
        goto LABEL_174;
      }
    }
    goto LABEL_178;
  }
  v92[0] = (const void **)"Channel size in input and ref should be the same";
  v93 = 259;
  mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
  v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v107)
  {
    v65 = (_QWORD **)v105;
    if (v105)
    {
      v66 = v106;
      v67 = v105;
      if (v106 != v105)
      {
        do
          v66 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v66 - 1);
        while (v66 != v65);
        v67 = v105;
      }
      v106 = v65;
      operator delete(v67);
    }
    v40 = v103;
    if (!v103)
      goto LABEL_176;
    v68 = v104;
    v42 = v103;
    if (v104 == v103)
      goto LABEL_175;
    do
    {
      v70 = (void *)*--v68;
      v69 = v70;
      *v68 = 0;
      if (v70)
        operator delete[](v69);
    }
    while (v68 != v40);
    goto LABEL_174;
  }
LABEL_178:
  operator delete(v10);
  return v36;
}

void *mlir::mps::CostVolumeOp::getWindowHeight(mlir::mps::CostVolumeOp *this)
{
  unint64_t v1;
  uint64_t v3;
  void *__p;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v6 = *(_QWORD *)(v1 + 40);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40)
    return __p;
  v3 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v3;
}

void *mlir::mps::CostVolumeOp::getWindowWidth(mlir::mps::CostVolumeOp *this)
{
  unint64_t v1;
  uint64_t v3;
  void *__p;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v6 = *(_QWORD *)(v1 + 48);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40)
    return __p;
  v3 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::mps::CostVolumeOp::getCoordIsXOnly(mlir::mps::CostVolumeOp *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (v2)
    return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v2) | 0x100u;
  else
    return 0;
}

uint64_t mlir::mps::CostVolumeOp::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  mlir::MLIRContext *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t Context;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t UInt;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  mlir::CallableOpInterface *p_Value;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t ArgAttrsAttr;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  unint64_t Value;
  unint64_t v64;
  unint64_t v65[2];
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  char v70[8];
  char v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _BYTE v82[32];
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v80 = v82;
  memset_pattern16(v82, &unk_1812352C0, 0x20uLL);
  v81 = 0x400000004;
  if (a7)
  {
    v17 = *a7;
    v18 = *(_OWORD *)(a7 + 1);
    v19 = *(_OWORD *)(a7 + 3);
    v20 = *(_OWORD *)(a7 + 5);
  }
  else
  {
    v17 = 0;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v69 = a6;
  v70[0] = 0;
  v71 = 0;
  v72 = v17;
  v73 = v18;
  v74 = v19;
  v75 = v20;
  v76 = a9;
  v77 = a10;
  if (!a6)
  {
    v22 = v18;
    v78 = a4;
    v79 = a5;
    if ((_QWORD)v18)
      goto LABEL_8;
LABEL_11:
    v24 = 0;
    v27 = 1;
    v26 = 3;
    v25 = 2;
    v28 = v75;
    if (!(_QWORD)v75)
      goto LABEL_18;
    goto LABEL_12;
  }
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v69);
  if (v71)
    v71 = 0;
  mlir::OperationName::OperationName(v70, "mps.cost_volume", 15, Context);
  v71 = 1;
  v22 = v73;
  v78 = a4;
  v79 = a5;
  if (!(_QWORD)v73)
    goto LABEL_11;
LABEL_8:
  v23 = 8 * *(int *)(v22 + 8);
  v24 = *(_QWORD *)((char *)&unk_18125C360 + v23);
  v25 = *(_QWORD *)((char *)&unk_18125C398 + v23);
  v26 = *(_QWORD *)((char *)&unk_18125C3D0 + v23);
  v27 = *(_QWORD *)((char *)&unk_18125C408 + v23);
  v28 = v75;
  if (!(_QWORD)v75)
    goto LABEL_18;
LABEL_12:
  v29 = *(void **)(*(_QWORD *)v28 + 136);
  if (v29 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v28 = 0;
  v83 = v28;
  if (v29 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || (Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83),
        !mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
  {
LABEL_18:
    UInt = 1;
    v31 = a11;
    v32 = *((_QWORD *)&v75 + 1);
    if (!*((_QWORD *)&v75 + 1))
      goto LABEL_25;
    goto LABEL_19;
  }
  UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v83);
  v31 = a11;
  v32 = *((_QWORD *)&v75 + 1);
  if (!*((_QWORD *)&v75 + 1))
    goto LABEL_25;
LABEL_19:
  v33 = *(void **)(*(_QWORD *)v32 + 136);
  if (v33 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v32 = 0;
  v83 = v32;
  if (v33 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || (Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83),
        !mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
  {
LABEL_25:
    v80[v27] = UInt;
    if (a5 != 3)
      goto LABEL_29;
LABEL_26:
    v35 = mlir::UnknownLoc::get(a1, v16);
    if (!mlir::mps::CostVolumeOpAdaptor::verify(&v69, v35))
      goto LABEL_29;
    v83 = v78;
    v84 = 1;
    v83 = mlir::ValueRange::offset_base(&v83, 1);
    v84 = 0;
    Value = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v83 = v78;
    v84 = 0;
    v64 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ValueRange::ValueRange(v65, (uint64_t)&Value, 2uLL);
    v83 = v78;
    v84 = 0;
    v37 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
    if (v38)
      v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
    else
      v37 = 0;
    Value = (unint64_t)v37;
    v64 = v38;
    v83 = v78;
    v84 = 1;
    v83 = mlir::ValueRange::offset_base(&v83, 1);
    v84 = 0;
    v47 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
    if (v48)
      v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
    else
      v47 = 0;
    v62[0] = v47;
    v62[1] = v48;
    v83 = v78;
    v84 = 2;
    v83 = mlir::ValueRange::offset_base(&v83, 2);
    v84 = 0;
    v49 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v49 + 8))
    {
      v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v49 + 8);
      v83 = (unint64_t)v49;
      v84 = v50;
      if (!Value)
        goto LABEL_53;
    }
    else
    {
      v83 = 0;
      v84 = 0;
      if (!Value)
        goto LABEL_53;
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
      && *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value)
                   + 8 * v24) != 0x8000000000000000)
    {
      v52 = v24;
      p_Value = (mlir::CallableOpInterface *)&Value;
      goto LABEL_62;
    }
LABEL_53:
    if (!v47
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v62)
      || *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v62)
                   + 8 * v24) == 0x8000000000000000)
    {
      if (!v83
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
        || *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) == 0x8000000000000000)
      {
LABEL_64:
        if (!Value
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
          || (v54 = &Value,
              v55 = v25,
              *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value) + 8 * v25) == 0x8000000000000000))
        {
          if (!v83
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
            || (v54 = &v83,
                *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) + 8) == 0x8000000000000000))
          {
LABEL_72:
            if (!Value
              || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
              || (v57 = &Value,
                  v58 = v26,
                  *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value) + 8 * v26) == 0x8000000000000000))
            {
              if (!v83
                || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
                || (v57 = &v83,
                    *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) + 16) == 0x8000000000000000))
              {
LABEL_80:
                v60 = mlir::RankedTensorType::get((uint64_t)v80, v81, v36, 0);
                v61 = *(unsigned int *)(v31 + 8);
                if (v61 >= *(_DWORD *)(v31 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v31 + 16), v61 + 1, 8);
                  LODWORD(v61) = *(_DWORD *)(v31 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v31 + 8 * v61) = v60;
                ++*(_DWORD *)(v31 + 8);
                v45 = v80;
                if (v80 != (_QWORD *)v82)
                  goto LABEL_41;
                return 1;
              }
              v58 = 2;
            }
            ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
            v80[v26] = *(_QWORD *)(ArgAttrsAttr + 8 * v58);
            goto LABEL_80;
          }
          v55 = 1;
        }
        v56 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
        v80[v25] = *(_QWORD *)(v56 + 8 * v55);
        goto LABEL_72;
      }
      v51 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83);
LABEL_63:
      v80[v24] = *v51;
      goto LABEL_64;
    }
    v52 = v24;
    p_Value = (mlir::CallableOpInterface *)v62;
LABEL_62:
    v51 = (_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(p_Value) + 8 * v52);
    goto LABEL_63;
  }
  v34 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v83);
  v80[v27] = (_QWORD)v34 * UInt;
  if (a5 == 3)
    goto LABEL_26;
LABEL_29:
  v66 = v68;
  v67 = 0x400000000;
  v39 = v81;
  if (!(_DWORD)v81)
    goto LABEL_36;
  if (v81 < 5)
  {
    v41 = v68;
    v40 = v81;
    goto LABEL_34;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v81, 8);
  v40 = v81;
  if ((_DWORD)v81)
  {
    v41 = v66;
LABEL_34:
    memcpy(v41, v80, 8 * v40);
  }
  LODWORD(v67) = v39;
LABEL_36:
  v42 = mlir::Float32Type::get(a1, v16);
  v43 = mlir::RankedTensorType::get((uint64_t)v66, v67, v42, 0);
  v44 = *(unsigned int *)(v31 + 8);
  if (v44 >= *(_DWORD *)(v31 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v31 + 16), v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(v31 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v31 + 8 * v44) = v43;
  ++*(_DWORD *)(v31 + 8);
  if (v66 != v68)
    free(v66);
  v45 = v80;
  if (v80 != (_QWORD *)v82)
LABEL_41:
    free(v45);
  return 1;
}

void *mlir::mps::`anonymous namespace'::getUnsignedIntegerOr(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t Value;
  uint64_t v8;

  if (a1
    && ((v3 = *(void **)(*(_QWORD *)a1 + 136),
         v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id,
         v3 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      ? (v5 = 0)
      : (v5 = a1),
        (v8 = v5, v4)
     && (Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v8),
         mlir::Type::isUnsignedInteger((mlir::Type *)&Value))))
  {
    return mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v8);
  }
  else
  {
    return (void *)a2;
  }
}

uint64_t mlir::mps::CostVolumeOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[3];
  void *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *__p;
  _QWORD **v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v4 = a1[9];
  if (a1[8]
    && (v27[0] = a1[8],
        v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
        !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 64)))
  {
    v27[0] = "'mps.cost_volume' op attribute 'window_height' failed to satisfy constraint: 64-bit unsigned integer attribute";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v35;
        v8 = __p;
        if (v35 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v35 = v6;
        operator delete(v8);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v10 = v33;
      v11 = v32;
      if (v33 == v32)
        goto LABEL_51;
      do
      {
        v13 = (void *)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          operator delete[](v12);
      }
      while (v10 != v9);
      goto LABEL_50;
    }
  }
  else if (v4
         && (v27[0] = v4,
             v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
             !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 64)))
  {
    v27[0] = "'mps.cost_volume' op attribute 'window_width' failed to satisfy constraint: 64-bit unsigned integer attribute";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v35;
        v16 = __p;
        if (v35 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v35 = v14;
        operator delete(v16);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v17 = v33;
      v11 = v32;
      if (v33 == v32)
        goto LABEL_51;
      do
      {
        v19 = (void *)*--v17;
        v18 = v19;
        *v17 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v17 != v9);
      goto LABEL_50;
    }
  }
  else
  {
    if (!v3 || *(_DWORD *)(v3 + 8) < 2u)
      return 1;
    v27[0] = "'mps.cost_volume' op attribute 'data_layout' failed to satisfy constraint: valid TensorDataLayout is NHWC or NCHW";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v20 = (_QWORD **)__p;
      if (__p)
      {
        v21 = v35;
        v22 = __p;
        if (v35 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v35 = v20;
        operator delete(v22);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v23 = v33;
      v11 = v32;
      if (v33 == v32)
      {
LABEL_51:
        v33 = v9;
        operator delete(v11);
LABEL_52:
        if (v30 != &v31)
          free(v30);
        return v5;
      }
      do
      {
        v25 = (void *)*--v23;
        v24 = v25;
        *v23 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v23 != v9);
LABEL_50:
      v11 = v32;
      goto LABEL_51;
    }
  }
  return v5;
}

uint64_t mlir::mps::`anonymous namespace'::inferMixedPrecisionResultElementType(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t ElementTypeOrSelf;
  mlir::Float32Type *v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  mlir::Float32Type *Context;
  mlir::MLIRContext *v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t Value;

  if (!a2)
  {
LABEL_11:
    v16 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, 0);
    return mlir::getElementTypeOrSelf(v16);
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  for (i = 0; i != a2; ++i)
  {
    v8 = (_QWORD *)mlir::TypeRange::dereference_iterator(a1, i);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
    Value = ElementTypeOrSelf;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v17 = ElementTypeOrSelf;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
      v6 = 1;
    }
    v4 |= mlir::Type::isBF16((mlir::Type *)&Value);
    v5 |= mlir::Type::isF32((mlir::Type *)&Value);
  }
  if ((v6 & 1) == 0)
  {
    if ((v4 & v5 & 1) != 0)
    {
      Value = mlir::TypeRange::dereference_iterator(a1, 0);
      Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&Value);
      return mlir::Float32Type::get(Context, v14);
    }
    goto LABEL_11;
  }
  Value = mlir::TypeRange::dereference_iterator(a1, 0);
  v10 = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&Value);
  if ((v5 & 1) != 0)
    v12 = mlir::Float32Type::get(v10, v11);
  else
    v12 = mlir::Float16Type::get(v10, v11);
  return mlir::ComplexType::get(v12);
}

uint64_t mlir::mps::SampleGridDataGradientOp::verify(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  const void **v6;
  void *v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *Value;
  uint64_t v31;
  char v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  const void **v45[4];
  __int16 v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  void *__p;
  _QWORD **v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (_QWORD *)(*this)[9];
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3[3] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = (const void **)(*(_QWORD *)(v3[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(v3[7] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v9 = *(_QWORD *)(v3[7] + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = 0;
  }
  v10 = v3[11];
  v11 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  v14 = v12 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && v12 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v6)
    v15 = v9 == 0;
  else
    v15 = 1;
  if (!v15 && v11 != 0 && !v14)
  {
    v48 = &v50;
    v49 = 0x400000000;
    v27 = v2[3];
    v18 = 1;
    if (!mlir::matchConstantWithIntVector<long long>(v10, (uint64_t)&v48))
      goto LABEL_93;
    if ((_DWORD)v49 != 4)
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v27, 1, "unexpected output shape passed"))
        goto LABEL_92;
      v28 = v48;
      v29 = (*this)[3];
      v45[0] = v6;
      v47 = v9;
      if ((_DWORD)v49 != 4)
      {
        v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "outputShape must have 4 values");
        goto LABEL_91;
      }
LABEL_52:
      if (mlir::TensorType::hasRank((mlir::TensorType *)v45))
      {
        Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v45);
        if (v31 != 4)
        {
          v34 = "incoming gradient rank should be 4";
          goto LABEL_67;
        }
        if (*v28 != 0x8000000000000000 && *Value != 0x8000000000000000 && *Value != *v28)
        {
          v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "batch dimensions of the incoming gradient do not match the outputShape");
          goto LABEL_91;
        }
        v35 = v28[3];
        if (v35 != 0x8000000000000000)
        {
          v36 = Value[3];
          if (v36 != 0x8000000000000000 && v36 != v35)
          {
            v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "the number of channels of the incoming gradient does not match the outputShape");
            goto LABEL_91;
          }
        }
      }
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v47))
        goto LABEL_81;
      v37 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47);
      if (v38 != 4)
      {
        v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "coordinates rank should be 4");
LABEL_91:
        if (!v32)
        {
          v18 = 0;
          v33 = v48;
          if (v48 == &v50)
            return v18;
          goto LABEL_94;
        }
        goto LABEL_92;
      }
      v39 = v37[3];
      if (v39 == 0x8000000000000000 || v39 == 2)
      {
        if (*v28 != 0x8000000000000000 && *v37 != 0x8000000000000000 && *v37 != *v28)
        {
          v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "batch dimensions of the coordinates donot match the outputShape");
          goto LABEL_91;
        }
LABEL_81:
        if (mlir::TensorType::hasRank((mlir::TensorType *)v45) && mlir::TensorType::hasRank((mlir::TensorType *)&v47))
        {
          if ((v40 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v45),
                v41 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47),
                *v40 != 0x8000000000000000)
            && *v40 != *v41
            || (v42 = v40[1], v42 != 0x8000000000000000) && v42 != v41[1]
            || (v43 = v40[2], v43 != 0x8000000000000000) && v43 != v41[2])
          {
            v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "dimensions of incoming gradient and coordinates do not match");
            goto LABEL_91;
          }
        }
LABEL_92:
        v18 = 1;
LABEL_93:
        v33 = v48;
        if (v48 == &v50)
          return v18;
LABEL_94:
        free(v33);
        return v18;
      }
      v34 = "coordinates should have 2 channels";
LABEL_67:
      v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, v34);
      goto LABEL_91;
    }
    v28 = v48;
    if (*(_QWORD *)v48 == -1)
    {
      *(_QWORD *)v48 = 0x8000000000000000;
      if (v28[1] != -1)
      {
LABEL_47:
        if (v28[2] != -1)
          goto LABEL_48;
        goto LABEL_64;
      }
    }
    else if (*((_QWORD *)v48 + 1) != -1)
    {
      goto LABEL_47;
    }
    v28[1] = 0x8000000000000000;
    if (v28[2] != -1)
    {
LABEL_48:
      if (v28[3] != -1)
      {
LABEL_49:
        v29 = (*this)[3];
        v45[0] = v6;
        v47 = v9;
        goto LABEL_52;
      }
LABEL_65:
      v28[3] = 0x8000000000000000;
      goto LABEL_49;
    }
LABEL_64:
    v28[2] = 0x8000000000000000;
    if (v28[3] != -1)
      goto LABEL_49;
    goto LABEL_65;
  }
  v45[0] = (const void **)"cannot sample a non-tensor type";
  v46 = 259;
  mlir::OpState::emitOpError(this, v45, (uint64_t)&v48);
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
  if (v48)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  if (v57)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v56;
      v21 = __p;
      if (v56 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v56 = v19;
      operator delete(v21);
    }
    v22 = v53;
    if (v53)
    {
      v23 = v54;
      v24 = v53;
      if (v54 != v53)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v53;
      }
      v54 = v22;
      operator delete(v24);
    }
    v33 = v51;
    if (v51 != &v52)
      goto LABEL_94;
  }
  return v18;
}

uint64_t mlir::mps::SampleGridDataGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _BOOL4 v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v25;
  uint64_t ElementType;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *Value;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  void *v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  v37[0] = a4;
  v37[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v37, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v37, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(void **)(*(_QWORD *)v17 + 136);
  v20 = v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v21 = mlir::ValueRange::dereference_iterator(v37, 2);
  if (v16)
    v22 = v17 == 0;
  else
    v22 = 1;
  if (v22 || v20)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot sample a non-tensor type");
  v36 = v16;
  v38 = v40;
  v39 = 0x400000000;
  if (!mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)&v38))
    goto LABEL_31;
  if ((_DWORD)v39 != 4)
  {
    if (mlir::emitOptionalError<char const(&)[39]>(a2, a3, "unexpected output shape passed"))
      goto LABEL_37;
LABEL_31:
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
    v27 = mlir::UnrankedTensorType::get(ElementType);
    v28 = v38;
    if (v38 == v40)
      goto LABEL_47;
    goto LABEL_46;
  }
  v25 = v38;
  if (*(_QWORD *)v38 == -1)
  {
    *(_QWORD *)v38 = 0x8000000000000000;
    if (v25[1] != -1)
    {
LABEL_27:
      if (v25[2] != -1)
        goto LABEL_28;
      goto LABEL_35;
    }
  }
  else if (*((_QWORD *)v38 + 1) != -1)
  {
    goto LABEL_27;
  }
  v25[1] = 0x8000000000000000;
  if (v25[2] != -1)
  {
LABEL_28:
    if (v25[3] == -1)
      goto LABEL_36;
    goto LABEL_37;
  }
LABEL_35:
  v25[2] = 0x8000000000000000;
  if (v25[3] == -1)
LABEL_36:
    v25[3] = 0x8000000000000000;
LABEL_37:
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v36))
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
    if (v29 == 4)
    {
      if (*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36) != 0x8000000000000000
        && *(_QWORD *)v38 == 0x8000000000000000)
      {
        Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
        *(_QWORD *)v38 = *Value;
      }
      if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36) + 24) != 0x8000000000000000
        && *((_QWORD *)v38 + 3) == 0x8000000000000000)
      {
        v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
        *((_QWORD *)v38 + 3) = *(_QWORD *)(v31 + 24);
      }
    }
  }
  v32 = v38;
  v33 = v39;
  v34 = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
  v27 = mlir::RankedTensorType::get((uint64_t)v32, v33, v34, 0);
  v28 = v38;
  if (v38 == v40)
    goto LABEL_47;
LABEL_46:
  free(v28);
LABEL_47:
  v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v27;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::LocalConvolutionOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 hasRank;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  const void **v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *Value;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v44;
  BOOL v45;
  const char *v47;
  const void **v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  const void **v52[2];
  _BYTE v53[16];
  __int16 v54;
  _QWORD v55[3];
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v51 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  v50 = v6;
  if (v3)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v51);
    if (!hasRank || !mlir::TensorType::hasRank((mlir::TensorType *)&v50))
      return 1;
    v20 = *(int *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
    if (v20 >= 6 || ((0x33u >> v20) & 1) == 0)
    {
      v52[0] = (const void **)"unsupported data layout";
      v54 = 259;
      mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      if (!v62)
        return v10;
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v61;
        v23 = __p;
        if (v61 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v61 = v21;
        operator delete(v23);
      }
      v14 = v58;
      if (!v58)
        goto LABEL_51;
      v24 = v59;
      v16 = v58;
      if (v59 == v58)
        goto LABEL_50;
      do
      {
        v26 = (void *)*--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v24 != v14);
      goto LABEL_49;
    }
    v29 = v20;
    v30 = qword_18125C440[v29];
    v31 = *(_QWORD *)((char *)&unk_18125C330 + v29 * 8);
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    v34 = v33;
    v35 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    if (v36 == v30)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
      if (v37 == v30)
      {
        v52[0] = (const void **)v53;
        v52[1] = (const void **)0x400000000;
        v38 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v38 = 0;
        v39 = *(_QWORD **)(v38 + 16);
        if (v39)
          v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v39 + 8);
        else
          v40 = 0;
        mlir::getIntValues<long long>((uint64_t)v39, v40, (uint64_t)v52, 1);
        v42 = v35[v31];
        if (v42 == 0x8000000000000000 || (uint64_t)v52[0][1] * (uint64_t)*v52[0] == v42)
        {
          if (!v34)
          {
LABEL_82:
            v10 = 1;
LABEL_83:
            v27 = v52[0];
            if ((_BYTE *)v52[0] == v53)
              return v10;
            goto LABEL_52;
          }
          while (1)
          {
            if (v31)
            {
              v44 = *v35;
              v45 = *Value == 0x8000000000000000 || *Value == v44;
              if (!v45 && v44 != 0x8000000000000000)
                break;
            }
            --v31;
            ++Value;
            ++v35;
            if (!--v34)
              goto LABEL_82;
          }
          v47 = "weight shape does not match input shape";
        }
        else
        {
          v47 = "weight channel count doesn't match kernel size";
        }
        v48 = (const void **)v47;
        v49 = 259;
        mlir::OpState::emitOpError(this, &v48, (uint64_t)v55);
        v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v55);
        goto LABEL_83;
      }
      v41 = "weight rank does not match data_layout";
    }
    else
    {
      v41 = "input rank does not match data_layout";
    }
    v52[0] = (const void **)v41;
    v54 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v55);
    return v10;
  }
  v52[0] = (const void **)"cannot convolve a non-tensor type";
  v54 = 259;
  mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
  if (v55[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
  if (!v62)
    return v10;
  v11 = (_QWORD **)__p;
  if (__p)
  {
    v12 = v61;
    v13 = __p;
    if (v61 != __p)
    {
      do
        v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
      while (v12 != v11);
      v13 = __p;
    }
    v61 = v11;
    operator delete(v13);
  }
  v14 = v58;
  if (v58)
  {
    v15 = v59;
    v16 = v58;
    if (v59 == v58)
      goto LABEL_50;
    do
    {
      v18 = (void *)*--v15;
      v17 = v18;
      *v15 = 0;
      if (v18)
        operator delete[](v17);
    }
    while (v15 != v14);
LABEL_49:
    v16 = v58;
LABEL_50:
    v59 = v14;
    operator delete(v16);
  }
LABEL_51:
  v27 = (const void **)v56;
  if (v56 != &v57)
LABEL_52:
    free(v27);
  return v10;
}

uint64_t mlir::mps::`anonymous namespace'::inferMixedPrecisionResultTypeFromZerothOperand(mlir::Float32Type *a1, mlir::MLIRContext *a2, int64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  mlir::MLIRContext *v23;
  uint64_t v24;
  char v25;
  unint64_t v26[2];
  void *v27;
  uint64_t v28;
  _BYTE v29[16];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v30[0] = a2;
  v30[1] = a3;
  if (a3 > 0)
  {
    v27 = v29;
    v28 = 0x200000000;
    if ((unint64_t)a3 >= 3)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, a3, 8);
    v7 = 0;
    v23 = a2;
    v24 = 0;
    do
    {
      v8 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v23, v7) + 8);
      v9 = v28;
      if (v28 >= (unint64_t)HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
        v9 = v28;
      }
      *((_QWORD *)v27 + v9) = v8 & 0xFFFFFFFFFFFFFFF8;
      v10 = (v28 + 1);
      LODWORD(v28) = v28 + 1;
      v7 = ++v24;
    }
    while (v23 != a2 || v7 != a3);
    mlir::ValueRange::ValueRange(v26, (uint64_t)v27, v10);
    v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v30, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(void **)(*(_QWORD *)v13 + 136);
    if (v14 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v14 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v13 = 0;
    }
    v22 = v13;
    if (v13)
    {
      LOBYTE(v23) = 0;
      v25 = 0;
      v16 = mlir::TensorType::cloneWith((uint64_t)&v22, (uint64_t)&v23, v12);
      v17 = *(_DWORD *)(a4 + 8);
      if (v17 < *(_DWORD *)(a4 + 12))
        goto LABEL_19;
    }
    else
    {
      v16 = mlir::UnrankedTensorType::get(v12);
      v17 = *(_DWORD *)(a4 + 8);
      if (v17 < *(_DWORD *)(a4 + 12))
        goto LABEL_19;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v17 + 1, 8);
    v17 = *(_DWORD *)(a4 + 8);
LABEL_19:
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = v16;
    ++*(_DWORD *)(a4 + 8);
    if (v27 != v29)
      free(v27);
    return 1;
  }
  v18 = mlir::Float32Type::get(a1, a2);
  v19 = mlir::UnrankedTensorType::get(v18);
  v20 = *(unsigned int *)(a4 + 8);
  if (v20 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v20) = v19;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v8;
  void *v9;
  BOOL v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  const void **v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  _QWORD *Value;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  BOOL v48;
  const char *v50;
  const void **v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  const void **v55[2];
  _BYTE v56[16];
  __int16 v57;
  _QWORD v58[3];
  void *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD **v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *((_DWORD *)*this + 11);
  v4 = (*this)[9];
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(void **)(*(_QWORD *)v5 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = 0;
  }
  v54 = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void **)(*(_QWORD *)v8 + 136);
  if (v9 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v8 = 0;
  }
  v53 = v8;
  if (v5)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v22 = v2[10];
    v21 = v2 + 10;
    v23 = *(int *)(v22 + 8);
    if (v23 >= 6 || ((0x33u >> v23) & 1) == 0)
    {
      v55[0] = (const void **)"unsupported data layout";
      v57 = 259;
      mlir::OpState::emitOpError(this, v55, (uint64_t)v58);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
      if (v58[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
      if (!v65)
        return v12;
      v24 = (_QWORD **)__p;
      if (__p)
      {
        v25 = v64;
        v26 = __p;
        if (v64 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v64 = v24;
        operator delete(v26);
      }
      v16 = v61;
      if (!v61)
        goto LABEL_48;
      v27 = v62;
      v18 = v61;
      if (v62 == v61)
        goto LABEL_47;
      do
      {
        v29 = (void *)*--v27;
        v28 = v29;
        *v27 = 0;
        if (v29)
          operator delete[](v28);
      }
      while (v27 != v16);
      goto LABEL_46;
    }
    v32 = v23;
    v33 = qword_18125C440[v32];
    v34 = *(_QWORD *)((char *)&unk_18125C330 + v32 * 8);
    v55[0] = (const void **)v56;
    v55[1] = (const void **)0x400000000;
    if (!HIBYTE(v3))
      v21 = 0;
    v35 = (_QWORD *)v21[2];
    if (v35)
      v36 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v35 + 8);
    else
      v36 = 0;
    v12 = 1;
    mlir::getIntValues<long long>((uint64_t)v35, v36, (uint64_t)v55, 1);
    v37 = (uint64_t)*v55[0];
    v38 = v55[0][1];
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v54) && mlir::TensorType::hasRank((mlir::TensorType *)&v53))
    {
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      v41 = v40;
      v42 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      if (v43 == v33)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        if (v44 == v33)
        {
          v45 = v42[v34];
          if (v45 == 0x8000000000000000 || (_QWORD)v38 * v37 == v45)
          {
            if (!v41)
              goto LABEL_80;
            while (1)
            {
              if (v34)
              {
                v47 = *v42;
                v48 = *Value == 0x8000000000000000 || *Value == v47;
                if (!v48 && v47 != 0x8000000000000000)
                  break;
              }
              --v34;
              ++Value;
              ++v42;
              if (!--v41)
                goto LABEL_80;
            }
            v50 = "weight shape does not match gradient shape";
          }
          else
          {
            v50 = "weight channel count doesn't match kernel size";
          }
        }
        else
        {
          v50 = "weight rank does not match data_layout";
        }
      }
      else
      {
        v50 = "gradient rank does not match data_layout";
      }
      v51 = (const void **)v50;
      v52 = 259;
      mlir::OpState::emitOpError(this, &v51, (uint64_t)v58);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v58);
    }
LABEL_80:
    v30 = v55[0];
    if ((_BYTE *)v55[0] == v56)
      return v12;
    goto LABEL_49;
  }
  v55[0] = (const void **)"cannot convolve a non-tensor type";
  v57 = 259;
  mlir::OpState::emitOpError(this, v55, (uint64_t)v58);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
  if (v58[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  if (!v65)
    return v12;
  v13 = (_QWORD **)__p;
  if (__p)
  {
    v14 = v64;
    v15 = __p;
    if (v64 != __p)
    {
      do
        v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
      while (v14 != v13);
      v15 = __p;
    }
    v64 = v13;
    operator delete(v15);
  }
  v16 = v61;
  if (v61)
  {
    v17 = v62;
    v18 = v61;
    if (v62 == v61)
      goto LABEL_47;
    do
    {
      v20 = (void *)*--v17;
      v19 = v20;
      *v17 = 0;
      if (v20)
        operator delete[](v19);
    }
    while (v17 != v16);
LABEL_46:
    v18 = v61;
LABEL_47:
    v62 = v16;
    operator delete(v18);
  }
LABEL_48:
  v30 = (const void **)v59;
  if (v59 != &v60)
LABEL_49:
    free(v30);
  return v12;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 hasRank;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *Value;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  const char *v41;
  const void **v42[4];
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v46[3];
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v45 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  v44 = v6;
  if (v3)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v45);
    if (!hasRank || !mlir::TensorType::hasRank((mlir::TensorType *)&v44))
      return 1;
    v20 = *(int *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
    if (v20 >= 6 || ((0x33u >> v20) & 1) == 0)
    {
      v42[0] = (const void **)"unsupported data layout";
      v43 = 259;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      if (v53)
      {
        v21 = (_QWORD **)__p;
        if (__p)
        {
          v22 = v52;
          v23 = __p;
          if (v52 != __p)
          {
            do
              v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            v23 = __p;
          }
          v52 = v21;
          operator delete(v23);
        }
        v14 = v49;
        if (!v49)
          goto LABEL_50;
        v24 = v50;
        v16 = v49;
        if (v50 == v49)
        {
LABEL_49:
          v50 = v14;
          operator delete(v16);
LABEL_50:
          if (v47 != &v48)
            free(v47);
          return v10;
        }
        do
        {
          v26 = (void *)*--v24;
          v25 = v26;
          *v24 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v24 != v14);
LABEL_48:
        v16 = v49;
        goto LABEL_49;
      }
      return v10;
    }
    v27 = qword_18125C440[v20];
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
    if (v28 == v27)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
      if (v29 == v27)
      {
        Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
        v32 = v31;
        v33 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
        if (v32)
        {
          v10 = 1;
          while (1)
          {
            v35 = *Value++;
            v34 = v35;
            v37 = *v33++;
            v36 = v37;
            v38 = v34 == 0x8000000000000000 || v34 == v36;
            if (!v38 && v36 != 0x8000000000000000)
              break;
            if (!--v32)
              return v10;
          }
          v41 = "gradient shape does not match input shape";
          goto LABEL_70;
        }
        return 1;
      }
      v41 = "gradient rank does not match data_layout";
    }
    else
    {
      v41 = "input rank does not match data_layout";
    }
LABEL_70:
    v42[0] = (const void **)v41;
    v43 = 259;
    mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v46);
    return v10;
  }
  v42[0] = (const void **)"cannot convolve a non-tensor type";
  v43 = 259;
  mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
  if (v46[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
  if (v53)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v52;
      v13 = __p;
      if (v52 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v52 = v11;
      operator delete(v13);
    }
    v14 = v49;
    if (!v49)
      goto LABEL_50;
    v15 = v50;
    v16 = v49;
    if (v50 == v49)
      goto LABEL_49;
    do
    {
      v18 = (void *)*--v15;
      v17 = v18;
      *v15 = 0;
      if (v18)
        operator delete[](v17);
    }
    while (v15 != v14);
    goto LABEL_48;
  }
  return v10;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Value;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65[2];
  _BYTE v66[32];
  uint64_t v67;
  char v68[8];
  char v69;
  __int128 v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  _BYTE v80[32];
  unint64_t v81[4];

  v81[2] = *MEMORY[0x1E0C80C00];
  v76 = a4;
  v77 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = (_QWORD *)*((_QWORD *)a7 + 2);
  }
  else
  {
    v17 = 0;
    v16 = 0uLL;
  }
  v67 = a6;
  v68[0] = 0;
  v69 = 0;
  v70 = v16;
  v71 = v17;
  v72 = a9;
  v18 = a5;
  v73 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69)
      v69 = 0;
    mlir::OperationName::OperationName(v68, "mps.local_convolution_weight_gradient", 37, Context);
    v69 = 1;
    v18 = v77;
  }
  v74 = a4;
  v75 = a5;
  if (v18 < 2
    || (v20 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::LocalConvolutionWeightGradientOpAdaptor::verify(&v67, v20)))
  {
    v31 = mlir::Float32Type::get(this, a2);
    v32 = mlir::UnrankedTensorType::get(v31);
    v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v21 = mlir::ValueRange::dereference_iterator(&v76, 0);
  v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v24 = (_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v24 = 0;
  }
  v25 = mlir::ValueRange::dereference_iterator(&v76, 1);
  v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v28 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v28 = 0;
  }
  if (v28)
    v29 = v24 == 0;
  else
    v29 = 1;
  if (v29)
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot convolve a non-tensor type");
  v35 = v70;
  v36 = (uint64_t)v71;
  v65[0] = v66;
  v65[1] = (void *)0x400000000;
  if (v71)
    v37 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v71 + 8);
  else
    v37 = 0;
  mlir::getIntValues<long long>(v36, v37, (uint64_t)v65, 1);
  v61 = *((_QWORD *)v65[0] + 1);
  v62 = *(_QWORD *)v65[0];
  v38 = *(int *)(v35 + 8);
  v63 = v28;
  v64 = v24;
  v39 = qword_18125C360[v38];
  v40 = qword_18125C398[v38];
  v41 = qword_18125C3D0[v38];
  v60 = qword_18125C408[v38];
  v78 = v24;
  v79 = v28;
  mlir::ValueRange::ValueRange(v81, (uint64_t)&v78, 2uLL);
  if (v38 < 6 && ((0x33u >> v38) & 1) != 0)
  {
    v47 = v42;
    v48 = qword_18125C440[v38];
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v63) && !mlir::TensorType::hasRank((mlir::TensorType *)&v64))
    {
      v44 = mlir::UnrankedTensorType::get(v47);
      v45 = *(unsigned int *)(a11 + 8);
      if (v45 < *(_DWORD *)(a11 + 12))
        goto LABEL_40;
      goto LABEL_58;
    }
    v78 = v80;
    HIDWORD(v79) = 4;
    memset_pattern16(v80, &unk_1812352C0, 8 * v48);
    LODWORD(v79) = v48;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v63))
    {
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
      if (v50 != v48)
      {
        v59 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input rank doesn't match data layout");
        goto LABEL_61;
      }
      v51 = v78;
      v78[v39] = *(_QWORD *)(Value + 8 * v39);
      v51[v40] = *(_QWORD *)(Value + 8 * v40);
      v51[v41] = *(_QWORD *)(Value + 8 * v41);
    }
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v64))
    {
      v56 = v78;
      goto LABEL_56;
    }
    v52 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v64);
    if (v53 == v48)
    {
      v54 = v52;
      v55 = *(_QWORD *)(v52 + 8 * v39);
      v56 = v78;
      if (v55 == 0x8000000000000000)
      {
        v57 = *(_QWORD *)(v54 + 8 * v40);
        if (v57 == 0x8000000000000000)
          goto LABEL_53;
      }
      else
      {
        v78[v39] = v55;
        v57 = *(_QWORD *)(v54 + 8 * v40);
        if (v57 == 0x8000000000000000)
        {
LABEL_53:
          v58 = *(_QWORD *)(v54 + 8 * v41);
          if (v58 != 0x8000000000000000)
            goto LABEL_66;
          goto LABEL_56;
        }
      }
      v56[v40] = v57;
      v58 = *(_QWORD *)(v54 + 8 * v41);
      if (v58 != 0x8000000000000000)
LABEL_66:
        v56[v41] = v58;
LABEL_56:
      v56[v60] = v61 * v62;
      v44 = mlir::RankedTensorType::get((uint64_t)v56, v79, v47, 0);
      v43 = 1;
      goto LABEL_62;
    }
    v59 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "gradient rank doesn't match data layout");
LABEL_61:
    v43 = v59;
    v44 = 0;
LABEL_62:
    if (v78 != (_QWORD *)v80)
      free(v78);
    goto LABEL_38;
  }
  v43 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid tensorDataLayout");
  v44 = 0;
LABEL_38:
  if (v43)
  {
    v45 = *(unsigned int *)(a11 + 8);
    if (v45 < *(_DWORD *)(a11 + 12))
      goto LABEL_40;
LABEL_58:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v45 + 1, 8);
    LODWORD(v45) = *(_DWORD *)(a11 + 8);
LABEL_40:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v45) = v44;
    ++*(_DWORD *)(a11 + 8);
    v30 = 1;
    v46 = v65[0];
    if (v65[0] == v66)
      return v30;
    goto LABEL_43;
  }
  v30 = 0;
  v46 = v65[0];
  if (v65[0] != v66)
LABEL_43:
    free(v46);
  return v30;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *Type;
  _QWORD *v7;
  _QWORD *ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD **v44;
  _QWORD **v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  const char *v51;
  uint64_t Value;
  uint64_t v53;
  uint64_t OperandRange;
  const char *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  void *__p;
  _QWORD **v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
        v55 = v4;
        v56 = v5;
        Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
        v7 = Type;
        if (Type)
          Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
        v59 = v7;
        v60 = Type;
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
        v58 = 2;
        if (v9 == 1
          && *ArgAttrsAttr == v58
          && (v51 = v4,
              Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51),
              v53 = v10,
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
          v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
          v55 = v3;
          v56 = v11;
          v12 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
          v13 = v12;
          if (v12)
            v12 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
          v59 = v13;
          v60 = v12;
          v14 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
          v58 = 2;
          if (v15 == 1 && *v14 == v58)
          {
            v51 = v3;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
            v53 = v16;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
              return 1;
          }
          v55 = "'mps.local_convolution_weight_gradient' op attribute 'dilation_rates' failed to satisfy constraint: ui64"
                " elements attribute of shape {2}";
          v57 = 259;
          mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
          v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
          if (v59)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
          if (v67)
          {
            v44 = (_QWORD **)__p;
            if (__p)
            {
              v45 = v66;
              v46 = __p;
              if (v66 != __p)
              {
                do
                  v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
                while (v45 != v44);
                v46 = __p;
              }
              v66 = v44;
              operator delete(v46);
            }
            v21 = v63;
            if (!v63)
              goto LABEL_87;
            v47 = v64;
            v23 = v63;
            if (v64 == v63)
            {
LABEL_86:
              v64 = v21;
              operator delete(v23);
LABEL_87:
              if (v61 != &v62)
                free(v61);
              return v17;
            }
            do
            {
              v49 = (void *)*--v47;
              v48 = v49;
              *v47 = 0;
              if (v49)
                operator delete[](v48);
            }
            while (v47 != v21);
LABEL_85:
            v23 = v63;
            goto LABEL_86;
          }
        }
        else
        {
          v55 = "'mps.local_convolution_weight_gradient' op attribute 'kernel_sizes' failed to satisfy constraint: ui64 e"
                "lements attribute of shape {2}";
          v57 = 259;
          mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
          v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
          if (v59)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
          if (v67)
          {
            v32 = (_QWORD **)__p;
            if (__p)
            {
              v33 = v66;
              v34 = __p;
              if (v66 != __p)
              {
                do
                  v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                v34 = __p;
              }
              v66 = v32;
              operator delete(v34);
            }
            v21 = v63;
            if (!v63)
              goto LABEL_87;
            v35 = v64;
            v23 = v63;
            if (v64 == v63)
              goto LABEL_86;
            do
            {
              v37 = (void *)*--v35;
              v36 = v37;
              *v35 = 0;
              if (v37)
                operator delete[](v36);
            }
            while (v35 != v21);
            goto LABEL_85;
          }
        }
      }
      else
      {
        v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'kernel_sizes'";
        v57 = 259;
        mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
        v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
        if (v59)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
        if (v67)
        {
          v38 = (_QWORD **)__p;
          if (__p)
          {
            v39 = v66;
            v40 = __p;
            if (v66 != __p)
            {
              do
                v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
              while (v39 != v38);
              v40 = __p;
            }
            v66 = v38;
            operator delete(v40);
          }
          v21 = v63;
          if (!v63)
            goto LABEL_87;
          v41 = v64;
          v23 = v63;
          if (v64 == v63)
            goto LABEL_86;
          do
          {
            v43 = (void *)*--v41;
            v42 = v43;
            *v41 = 0;
            if (v43)
              operator delete[](v42);
          }
          while (v41 != v21);
          goto LABEL_85;
        }
      }
    }
    else
    {
      v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'dilation_rates'";
      v57 = 259;
      mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
      if (v59)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
      if (v67)
      {
        v26 = (_QWORD **)__p;
        if (__p)
        {
          v27 = v66;
          v28 = __p;
          if (v66 != __p)
          {
            do
              v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            v28 = __p;
          }
          v66 = v26;
          operator delete(v28);
        }
        v21 = v63;
        if (!v63)
          goto LABEL_87;
        v29 = v64;
        v23 = v63;
        if (v64 == v63)
          goto LABEL_86;
        do
        {
          v31 = (void *)*--v29;
          v30 = v31;
          *v29 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v29 != v21);
        goto LABEL_85;
      }
    }
  }
  else
  {
    v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'data_layout'";
    v57 = 259;
    mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
    if (v59)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
    if (v67)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v66;
        v20 = __p;
        if (v66 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v66 = v18;
        operator delete(v20);
      }
      v21 = v63;
      if (!v63)
        goto LABEL_87;
      v22 = v64;
      v23 = v63;
      if (v64 == v63)
        goto LABEL_86;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
      goto LABEL_85;
    }
  }
  return v17;
}

uint64_t mlir::mps::`anonymous namespace'::verifyTileOp(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char **ArgAttrsAttr;
  uint64_t v14;
  const char **v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  const char *v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  int *v43;
  char *v44;
  char *v45;
  __int128 v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *v54;
  const char *v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  int *v61;
  char *v62;
  char *v63;
  __int128 v64;
  const char *v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD **v70;
  _QWORD **v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  const char *v76;
  const void ***v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  const void ***v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  const char *v87;
  const void ***v88;
  char *v89;
  char *v90;
  __int128 v91;
  _QWORD **v92;
  _QWORD **v93;
  void *v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  BOOL v107;
  unint64_t v108;
  BOOL v109;
  unint64_t v110;
  BOOL v111;
  int64_t v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  const void **v121;
  const char *v122;
  uint64_t v123;
  __int16 v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  const char *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  _BYTE v136[16];
  __int16 v137;
  _QWORD v138[3];
  void *v139;
  unsigned int v140;
  unsigned int v141;
  _BYTE v142[96];
  void *v143;
  _QWORD *v144;
  void *__p;
  _QWORD **v146;
  char v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    v129 = v7;
    v130 = v8;
    v9 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v129 = 0;
    v130 = 0;
    v9 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
LABEL_3:
      v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      v127 = v9;
      v128 = v10;
      if (a4)
        goto LABEL_4;
LABEL_9:
      v125 = 0;
      v126 = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127))
        goto LABEL_16;
      goto LABEL_12;
    }
  }
  v127 = v9;
  v128 = 0;
  if (!a4)
    goto LABEL_9;
LABEL_4:
  v11 = (_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v11)
  {
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    v125 = v11;
    v126 = v12;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127))
      goto LABEL_16;
  }
  else
  {
    v125 = 0;
    v126 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127))
      goto LABEL_16;
  }
LABEL_12:
  ArgAttrsAttr = (const char **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
  if (v14 != 1)
  {
    v137 = 259;
    mlir::Operation::emitOpError(a1, (const void ***)&v134, (uint64_t)v138);
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    if (!v147)
      return v21;
    v24 = (_QWORD **)__p;
    if (__p)
    {
      v25 = v146;
      v26 = __p;
      if (v146 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v146 = v24;
      operator delete(v26);
    }
    v27 = v143;
    if (v143)
    {
      v28 = v144;
      v29 = v143;
      if (v144 == v143)
        goto LABEL_112;
      do
      {
        v31 = (void *)*--v28;
        v30 = v31;
        *v28 = 0;
        if (v31)
          operator delete[](v30);
      }
      while (v28 != v27);
LABEL_111:
      v29 = v143;
LABEL_112:
      v144 = v27;
      operator delete(v29);
    }
LABEL_113:
    v22 = v139;
    if (v139 == v142)
      return v21;
    goto LABEL_27;
  }
  v15 = ArgAttrsAttr;
  if (*ArgAttrsAttr != (const char *)0x8000000000000000)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v129))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
      if (v16 != *v15)
      {
        v137 = 259;
        mlir::Operation::emitOpError(a1, (const void ***)&v134, (uint64_t)v138);
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
        if (v138[0])
        {
          LODWORD(v121) = 2;
          v122 = v76;
          v77 = &v121;
          v78 = (char *)v139;
          if (v140 >= v141)
          {
            v105 = v140 + 1;
            if (v139 <= &v121 && (char *)v139 + 24 * v140 > (char *)&v121)
            {
              v117 = (char *)&v121 - (_BYTE *)v139;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v105, 24);
              v78 = (char *)v139;
              v77 = (const void ***)((char *)v139 + v117);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v105, 24);
              v77 = &v121;
              v78 = (char *)v139;
            }
          }
          v79 = &v78[24 * v140];
          v80 = *(_OWORD *)v77;
          *((_QWORD *)v79 + 2) = v77[2];
          *(_OWORD *)v79 = v80;
          v81 = ++v140;
          if (v138[0])
          {
            LODWORD(v121) = 3;
            v123 = 35;
            v82 = &v121;
            v83 = (char *)v139;
            if (v81 >= v141)
            {
              v108 = v81 + 1;
              v109 = (char *)v139 + 24 * v81 > (char *)&v121;
              if (v139 <= &v121 && v109)
              {
                v119 = (char *)&v121 - (_BYTE *)v139;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v108, 24);
                v83 = (char *)v139;
                v82 = (const void ***)((char *)v139 + v119);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v108, 24);
                v82 = &v121;
                v83 = (char *)v139;
              }
            }
            v84 = &v83[24 * v140];
            v85 = *(_OWORD *)v82;
            *((_QWORD *)v84 + 2) = v82[2];
            *(_OWORD *)v84 = v85;
            v86 = ++v140;
            if (v138[0])
            {
              v87 = *v15;
              LODWORD(v121) = 2;
              v122 = v87;
              v88 = &v121;
              v89 = (char *)v139;
              if (v86 >= v141)
              {
                v110 = v86 + 1;
                v111 = (char *)v139 + 24 * v86 > (char *)&v121;
                if (v139 <= &v121 && v111)
                {
                  v120 = (char *)&v121 - (_BYTE *)v139;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v110, 24);
                  v89 = (char *)v139;
                  v88 = (const void ***)((char *)v139 + v120);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v110, 24);
                  v88 = &v121;
                  v89 = (char *)v139;
                }
              }
              v90 = &v89[24 * v140];
              v91 = *(_OWORD *)v88;
              *((_QWORD *)v90 + 2) = v88[2];
              *(_OWORD *)v90 = v91;
              ++v140;
            }
          }
        }
        v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
        if (v138[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
        if (!v147)
          return v21;
        v92 = (_QWORD **)__p;
        if (__p)
        {
          v93 = v146;
          v94 = __p;
          if (v146 != __p)
          {
            do
              v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
            while (v93 != v92);
            v94 = __p;
          }
          v146 = v92;
          operator delete(v94);
        }
        v27 = v143;
        if (v143)
        {
          v95 = v144;
          v29 = v143;
          if (v144 == v143)
            goto LABEL_112;
          do
          {
            v97 = (void *)*--v95;
            v96 = v97;
            *v95 = 0;
            if (v97)
              operator delete[](v96);
          }
          while (v95 != v27);
          goto LABEL_111;
        }
        goto LABEL_113;
      }
    }
  }
LABEL_16:
  v134 = v136;
  v135 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a3, (uint64_t)&v134) && (_DWORD)v135)
  {
    v17 = 0;
    while ((*((_QWORD *)v134 + (_QWORD)v17) & 0x8000000000000000) == 0)
    {
      if ((const char *)v135 == ++v17)
        goto LABEL_21;
    }
    v124 = 259;
    mlir::Operation::emitOpError(a1, &v121, (uint64_t)v138);
    if (v138[0])
    {
      v32 = (const char *)*((_QWORD *)v134 + (_QWORD)v17);
      v131 = 2;
      v132 = v32;
      v33 = &v131;
      v34 = (char *)v139;
      if (v140 >= v141)
      {
        v98 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          v112 = (char *)&v131 - (_BYTE *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v98, 24);
          v34 = (char *)v139;
          v33 = (int *)((char *)v139 + v112);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v98, 24);
          v33 = &v131;
          v34 = (char *)v139;
        }
      }
      v35 = &v34[24 * v140];
      v36 = *(_OWORD *)v33;
      *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
      *(_OWORD *)v35 = v36;
      v37 = ++v140;
      if (v138[0])
      {
        v131 = 3;
        v132 = " at index ";
        v133 = 10;
        v38 = &v131;
        v39 = (char *)v139;
        if (v37 >= v141)
        {
          v99 = v37 + 1;
          v100 = (char *)v139 + 24 * v37 > (char *)&v131;
          if (v139 <= &v131 && v100)
          {
            v113 = (char *)&v131 - (_BYTE *)v139;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v99, 24);
            v39 = (char *)v139;
            v38 = (int *)((char *)v139 + v113);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v99, 24);
            v38 = &v131;
            v39 = (char *)v139;
          }
        }
        v40 = &v39[24 * v140];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)v40 = v41;
        v42 = ++v140;
        if (v138[0])
        {
          v131 = 5;
          v132 = v17;
          v43 = &v131;
          v44 = (char *)v139;
          if (v42 >= v141)
          {
            v101 = v42 + 1;
            v102 = (char *)v139 + 24 * v42 > (char *)&v131;
            if (v139 <= &v131 && v102)
            {
              v114 = (char *)&v131 - (_BYTE *)v139;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v101, 24);
              v44 = (char *)v139;
              v43 = (int *)((char *)v139 + v114);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v101, 24);
              v43 = &v131;
              v44 = (char *)v139;
            }
          }
          v45 = &v44[24 * v140];
          v46 = *(_OWORD *)v43;
          *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
          *(_OWORD *)v45 = v46;
          ++v140;
        }
      }
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    if (v147)
    {
      v47 = (_QWORD **)__p;
      if (__p)
      {
        v48 = v146;
        v49 = __p;
        if (v146 != __p)
        {
          do
            v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          v49 = __p;
        }
        v146 = v47;
        operator delete(v49);
      }
      v50 = v143;
      if (!v143)
        goto LABEL_88;
      v51 = v144;
      v52 = v143;
      if (v144 == v143)
        goto LABEL_87;
      do
      {
        v54 = (void *)*--v51;
        v53 = v54;
        *v51 = 0;
        if (v54)
          operator delete[](v53);
      }
      while (v51 != v50);
      goto LABEL_86;
    }
  }
  else
  {
LABEL_21:
    if (!v125
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v125)
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v129)
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125),
          v19 = v18,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129),
          v19 == v20))
    {
      v21 = 1;
      goto LABEL_26;
    }
    v124 = 259;
    mlir::Operation::emitOpError(a1, &v121, (uint64_t)v138);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
    if (v138[0])
    {
      v131 = 2;
      v132 = v55;
      v56 = &v131;
      v57 = (char *)v139;
      if (v140 >= v141)
      {
        v103 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          v115 = (char *)&v131 - (_BYTE *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v103, 24);
          v57 = (char *)v139;
          v56 = (int *)((char *)v139 + v115);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v103, 24);
          v56 = &v131;
          v57 = (char *)v139;
        }
      }
      v58 = &v57[24 * v140];
      v59 = *(_OWORD *)v56;
      *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
      *(_OWORD *)v58 = v59;
      v60 = ++v140;
      if (v138[0])
      {
        v131 = 3;
        v133 = 26;
        v61 = &v131;
        v62 = (char *)v139;
        if (v60 >= v141)
        {
          v106 = v60 + 1;
          v107 = (char *)v139 + 24 * v60 > (char *)&v131;
          if (v139 <= &v131 && v107)
          {
            v118 = (char *)&v131 - (_BYTE *)v139;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v106, 24);
            v62 = (char *)v139;
            v61 = (int *)((char *)v139 + v118);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v106, 24);
            v61 = &v131;
            v62 = (char *)v139;
          }
        }
        v63 = &v62[24 * v140];
        v64 = *(_OWORD *)v61;
        *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
        *(_OWORD *)v63 = v64;
        ++v140;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125);
    if (v138[0])
    {
      v131 = 2;
      v132 = v65;
      v66 = &v131;
      v67 = (char *)v139;
      if (v140 >= v141)
      {
        v104 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          v116 = (char *)&v131 - (_BYTE *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v104, 24);
          v67 = (char *)v139;
          v66 = (int *)((char *)v139 + v116);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v104, 24);
          v66 = &v131;
          v67 = (char *)v139;
        }
      }
      v68 = &v67[24 * v140];
      v69 = *(_OWORD *)v66;
      *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
      *(_OWORD *)v68 = v69;
      ++v140;
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    if (v147)
    {
      v70 = (_QWORD **)__p;
      if (__p)
      {
        v71 = v146;
        v72 = __p;
        if (v146 != __p)
        {
          do
            v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
          while (v71 != v70);
          v72 = __p;
        }
        v146 = v70;
        operator delete(v72);
      }
      v50 = v143;
      if (!v143)
        goto LABEL_88;
      v73 = v144;
      v52 = v143;
      if (v144 == v143)
      {
LABEL_87:
        v144 = v50;
        operator delete(v52);
LABEL_88:
        if (v139 != v142)
          free(v139);
        goto LABEL_26;
      }
      do
      {
        v75 = (void *)*--v73;
        v74 = v75;
        *v73 = 0;
        if (v75)
          operator delete[](v74);
      }
      while (v73 != v50);
LABEL_86:
      v52 = v143;
      goto LABEL_87;
    }
  }
LABEL_26:
  v22 = v134;
  if (v134 != v136)
LABEL_27:
    free(v22);
  return v21;
}

uint64_t mlir::mps::TileOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t ArgAttrsAttr;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ElementTypeOrSelf;
  uint64_t v29;
  uint64_t v30;
  uint64_t OperandRange;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[32];
  void *v40;
  uint64_t v41;
  _QWORD v42[5];

  v42[4] = *MEMORY[0x1E0C80C00];
  v36[0] = a4;
  v36[1] = a5;
  v11 = mlir::ValueRange::dereference_iterator(v36, 0);
  v12 = mlir::ValueRange::dereference_iterator(v36, 1);
  v13 = (_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
  {
    v34 = 0;
    v35 = 0;
LABEL_19:
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v13);
    v29 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_25;
  }
  v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  v34 = v13;
  v35 = v14;
  if (!v13 || *(_UNKNOWN **)(*v13 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_19;
  v40 = v42;
  v41 = 0x400000000;
  if (!mlir::matchConstantWithIntVector<long long>(v12, (uint64_t)&v40) && (_DWORD)v41)
    LODWORD(v41) = 0;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v34);
  v37 = v39;
  v38 = 0x400000000;
  if (v16)
  {
    v17 = ArgAttrsAttr;
    v18 = v16;
    if (v16 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v16, 8);
      v19 = v38;
      v21 = v37;
      v20 = v38;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = v39;
    }
    memset_pattern16(&v21[8 * v19], &unk_1812352C0, 8 * v18);
    v22 = v20 + v18;
    LODWORD(v38) = v20 + v18;
    if (v18 == v41)
    {
      v23 = 0;
      v24 = v40;
      do
      {
        v26 = *(_QWORD *)(v17 + 8 * v23);
        v25 = 0x8000000000000000;
        if (v26 != 0x8000000000000000)
        {
          v27 = v24[v23];
          if (v27 < 0)
            v25 = 0x8000000000000000;
          else
            v25 = (v27 * v26) & ~((v27 * v26) >> 63);
        }
        *(_QWORD *)&v21[8 * v23++] = v25;
      }
      while (v18 != v23);
    }
  }
  else
  {
    v22 = 0;
    v21 = v39;
  }
  v30 = v22;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  v29 = mlir::RankedTensorType::get((uint64_t)v21, v30, OperandRange, 0);
  if (v37 != v39)
    free(v37);
  if (v40 != v42)
    free(v40);
LABEL_25:
  v32 = *(unsigned int *)(a11 + 8);
  if (v32 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v32) = v29;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::inferReturnTypesForGradient(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t ElementTypeOrSelf;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a1 + 8))
  {
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a1 + 8);
    v13 = a1;
    v14 = v6;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
    if (a1 && *(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v13);
      v10 = mlir::RankedTensorType::get(ArgAttrsAttr, v9, ElementTypeOrSelf, 0);
      v11 = *(unsigned int *)(a3 + 8);
      if (v11 >= *(_DWORD *)(a3 + 12))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
  }
  v10 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  v11 = *(unsigned int *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12))
  {
LABEL_10:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_9:
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t mlir::mps::CastOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t Value;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v36[0] = a4;
  v36[1] = a5;
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v28 = a6;
  v29[0] = 0;
  v30 = 0;
  v31 = v14;
  v32 = a9;
  v33 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v28);
    if (v30)
      v30 = 0;
    mlir::OperationName::OperationName(v29, "mps.cast", 8, Context);
    v30 = 1;
  }
  v34 = a4;
  v35 = a5;
  if (a5)
  {
    v16 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::CastOpAdaptor::verify((uint64_t)&v28, v16))
    {
      v37 = v34;
      v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
        v26 = v17;
        v27 = v18;
        if (v17)
        {
          *(_QWORD *)&v37 = v31;
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
          LOBYTE(v37) = 0;
          v38 = 0;
          v20 = mlir::ShapedType::cloneWith((uint64_t *)&v26, &v37, Value);
          v21 = *(_DWORD *)(a11 + 8);
          if (v21 < *(_DWORD *)(a11 + 12))
          {
LABEL_13:
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
            goto LABEL_17;
          }
LABEL_20:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
          v21 = *(_DWORD *)(a11 + 8);
          goto LABEL_13;
        }
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
      v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v21 = *(_DWORD *)(a11 + 8);
      if (v21 < *(_DWORD *)(a11 + 12))
        goto LABEL_13;
      goto LABEL_20;
    }
  }
  v22 = mlir::Float32Type::get(this, a2);
  v23 = mlir::UnrankedTensorType::get(v22);
  v24 = *(unsigned int *)(a11 + 8);
  if (v24 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v24) = v23;
LABEL_17:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::CastOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v14[0] = *(_QWORD *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    v12 = "'mps.cast' op requires attribute 'resultElementType'";
    v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v20;
        v6 = __p;
        if (v20 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v20 = v4;
        operator delete(v6);
      }
      v7 = v17;
      if (v17)
      {
        v8 = v18;
        v9 = v17;
        if (v18 != v17)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v17;
        }
        v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::detail::CastOpGenericAdaptorBase::getResultElementType(mlir::mps::detail::CastOpGenericAdaptorBase *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
}

uint64_t mlir::mps::ReinterpretCastOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *Value;
  _BYTE *ArgAttrsAttr;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t ElementBitWidth;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39[2];
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  char v44[8];
  char v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];

  v51[2] = *MEMORY[0x1E0C80C00];
  v51[0] = a4;
  v51[1] = a5;
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v43 = a6;
  v44[0] = 0;
  v45 = 0;
  v46 = v14;
  v47 = a9;
  v48 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v43);
    if (v45)
      v45 = 0;
    mlir::OperationName::OperationName(v44, "mps.reinterpret_cast", 20, Context);
    v45 = 1;
  }
  v49 = a4;
  v50 = a5;
  if (!a5
    || (v16 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::ReinterpretCastOpAdaptor::verify((uint64_t)&v43, v16)))
  {
    v19 = mlir::Float32Type::get(this, a2);
    v20 = mlir::UnrankedTensorType::get(v19);
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a11 + 8);
    }
LABEL_13:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
  if (v18)
    v18 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
  else
    v17 = 0;
  v39[0] = v17;
  v39[1] = v18;
  v40 = v46;
  Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (!v17 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39) & 1) == 0)
  {
    v20 = mlir::UnrankedTensorType::get((uint64_t)Value);
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
      goto LABEL_22;
    goto LABEL_13;
  }
  ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v25 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v27 = (_BYTE *)(v25 + 8 * v26);
  v40 = v42;
  v41 = 0x400000000;
  v28 = v27 - ArgAttrsAttr;
  if ((unint64_t)(v27 - ArgAttrsAttr) < 0x21)
  {
    v29 = 0;
    if (v27 == ArgAttrsAttr)
      goto LABEL_25;
    goto LABEL_24;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v28 >> 3, 8);
  v29 = v41;
  if (v27 != ArgAttrsAttr)
  {
LABEL_24:
    memcpy((char *)v40 + 8 * v29, ArgAttrsAttr, v27 - ArgAttrsAttr);
    v29 = v41;
  }
LABEL_25:
  LODWORD(v41) = v29 + ((unint64_t)v28 >> 3);
  v32 = v40;
  v33 = v41;
  v34 = (char *)v40 + 8 * v41;
  v35 = *((_QWORD *)v34 - 1);
  if (v35 != 0x8000000000000000)
  {
    if (ElementBitWidth > v31)
    {
      v36 = ElementBitWidth / v31 * v35;
LABEL_30:
      *((_QWORD *)v34 - 1) = v36;
      goto LABEL_31;
    }
    if (ElementBitWidth < v31)
    {
      v36 = v35 / (v31 / ElementBitWidth);
      goto LABEL_30;
    }
  }
LABEL_31:
  v37 = mlir::RankedTensorType::get((uint64_t)v32, v33, (uint64_t)Value, 0);
  v38 = *(unsigned int *)(a11 + 8);
  if (v38 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v38) = v37;
  ++*(_DWORD *)(a11 + 8);
  if (v40 != v42)
    free(v40);
  return 1;
}

uint64_t mlir::mps::ReinterpretCastOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v14[0] = *(_QWORD *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    v12 = "'mps.reinterpret_cast' op requires attribute 'result_element_type'";
    v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v20;
        v6 = __p;
        if (v20 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v20 = v4;
        operator delete(v6);
      }
      v7 = v17;
      if (v17)
      {
        v8 = v18;
        v9 = v17;
        if (v18 != v17)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v17;
        }
        v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::`anonymous namespace'::getElementBitWidth(_QWORD *a1)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;

  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v2 = ElementTypeOrSelf;
  else
    v2 = 0;
  v5 = v2;
  if (!v2)
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
}

uint64_t mlir::mps::ReinterpretCastOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *OperandRange;
  unint64_t ElementBitWidth;
  _QWORD *Value;
  unint64_t v7;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  const void **v28;
  __int16 v29;
  _QWORD v30[2];
  int v31;
  unint64_t v32;
  _QWORD v33[3];
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[96];
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  else
    v3 = 0;
  v30[0] = v2;
  v30[1] = v3;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
    return 1;
  v33[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v33);
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  if (ElementBitWidth >= v7)
    return 1;
  v10 = *(_QWORD *)(ArgAttrsAttr + 8 * v9 - 8);
  if (v10 == 0x8000000000000000)
    return 1;
  v11 = v7 / ElementBitWidth;
  if (!(v10 % v11))
    return 1;
  v28 = (const void **)"innermost dimension needs to be divisible by ";
  v29 = 259;
  mlir::OpState::emitOpError(this, &v28, (uint64_t)v33);
  if (v33[0])
  {
    v31 = 5;
    v32 = v11;
    v12 = &v31;
    v13 = (char *)v34;
    if (v35 >= v36)
    {
      v26 = v35 + 1;
      if (v34 <= &v31 && (char *)v34 + 24 * v35 > (char *)&v31)
      {
        v27 = (char *)&v31 - (_BYTE *)v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
        v13 = (char *)v34;
        v12 = (int *)((char *)v34 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
        v12 = &v31;
        v13 = (char *)v34;
      }
    }
    v14 = &v13[24 * v35];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    ++v35;
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
  if (v33[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
  if (v42)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v41;
      v19 = __p;
      if (v41 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v41 = v17;
      operator delete(v19);
    }
    v20 = v38;
    if (v38)
    {
      v21 = v39;
      v22 = v38;
      if (v39 != v38)
      {
        do
        {
          v25 = (void *)*--v21;
          v24 = v25;
          *v21 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v21 != v20);
        v22 = v38;
      }
      v39 = v20;
      operator delete(v22);
    }
    if (v34 != v37)
      free(v34);
  }
  return v16;
}

uint64_t mlir::mps::ShapeOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v25[0] = a4;
  v25[1] = a5;
  if (a5 != 1)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
  {
    v22 = 0;
    v23 = 0;
    goto LABEL_8;
  }
  v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  v22 = v13;
  v23 = v14;
  if (!v13)
  {
LABEL_8:
    v24 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a2, a3, "unexpected type ", (uint64_t *)&v24);
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22))
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
  else
    v15 = 0x8000000000000000;
  v21 = v15;
  v24 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v18 = mlir::IntegerType::get(Context, 0x20u, 1u);
  v19 = mlir::RankedTensorType::get((uint64_t)&v21, 1, v18, 0);
  v20 = *(unsigned int *)(a11 + 8);
  if (v20 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v20) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::emitOptionalError<char const(&)[17],mlir::Type>(uint64_t a1, char a2, char *a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD **v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v16);
  if (v16)
    mlir::Diagnostic::append<char const(&)[5],mlir::Type>((uint64_t)&v17, a3, a4);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  if (v24)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
    v10 = v20;
    if (v20)
    {
      v11 = v21;
      v12 = v20;
      if (v21 != v20)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v20;
      }
      v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v6;
}

uint64_t mlir::mps::RankOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = a4;
  v18[1] = a5;
  if (a5 != 1)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v16 = 1;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v12 = mlir::IntegerType::get(Context, 0x20u, 1u);
  v13 = mlir::RankedTensorType::get((uint64_t)&v16, 1, v12, 0);
  v14 = *(unsigned int *)(a11 + 8);
  if (v14 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v14) = v13;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DimensionSizeOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  const void *ArgAttrsAttr;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t Context;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[48];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v32[0] = a4;
  v32[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v11 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v32, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  if (v12)
    v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  else
    v11 = 0;
  v27[0] = v11;
  v27[1] = v12;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v27);
  v16 = v14;
  v29 = v31;
  v30 = 0x600000000;
  v17 = 8 * v14;
  if ((unint64_t)(8 * v14) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, (8 * v14) >> 3, 8);
    v18 = v30;
    if (!v16)
      goto LABEL_11;
    goto LABEL_10;
  }
  v18 = 0;
  if (v14)
  {
LABEL_10:
    memcpy((char *)v29 + 8 * v18, ArgAttrsAttr, v17);
    v18 = v30;
  }
LABEL_11:
  v19 = v18 + (v17 >> 3);
  LODWORD(v30) = v19;
  if (!v19)
  {
    if (HIDWORD(v30))
    {
      v20 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, 1uLL, 8);
      v20 = v30;
    }
    *((_QWORD *)v29 + v20) = 1;
    v19 = v30 + 1;
    LODWORD(v30) = v30 + 1;
  }
  v21 = v29;
  v22 = v19;
  v28 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v24 = mlir::IntegerType::get(Context, 0x20u, 1u);
  v25 = mlir::RankedTensorType::get((uint64_t)v21, v22, v24, 0);
  v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
  ++*(_DWORD *)(a11 + 8);
  if (v29 != v31)
    free(v29);
  return 1;
}

uint64_t mlir::mps::DynamicShapeCastOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Context;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t ElementTypeOrSelf;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OperandRange;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  void *__b;
  uint64_t v56;
  _BYTE v57[48];
  void *v58;
  uint64_t v59;
  _BYTE v60[48];
  uint64_t v61;
  _BYTE v62[8];
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v14 = mlir::Float32Type::get(a1, a2);
    v15 = mlir::UnrankedTensorType::get(v14);
    v16 = *(unsigned int *)(a11 + 8);
    if (v16 >= *(_DWORD *)(a11 + 12))
    {
LABEL_30:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a11 + 8);
    }
LABEL_6:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v16) = v15;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a7)
  {
    v13 = *a7;
    v61 = a6;
    v62[0] = 0;
    v63 = 0;
    v64 = v13;
    v65 = a9;
    v66 = a10;
    if (!a6)
      goto LABEL_13;
  }
  else
  {
    v61 = a6;
    v62[0] = 0;
    v63 = 0;
    v64 = 0;
    v65 = a9;
    v66 = a10;
    if (!a6)
      goto LABEL_13;
  }
  Context = mlir::Attribute::getContext((mlir::Attribute *)&v61);
  if (v63)
    v63 = 0;
  mlir::OperationName::OperationName(v62, "mps.dynamic_shape_cast", 22, Context);
  v63 = 1;
LABEL_13:
  v67 = a4;
  v68 = a5;
  v58 = a4;
  v59 = 0;
  v20 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v58, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8))
  {
    v51 = 0;
    v52 = 0;
LABEL_29:
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(0);
    v15 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v16 = *(unsigned int *)(a11 + 8);
    if (v16 >= *(_DWORD *)(a11 + 12))
      goto LABEL_30;
    goto LABEL_6;
  }
  v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  v51 = v20;
  v52 = v21;
  if (!v20)
    goto LABEL_29;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51) || v64)
  {
    v38 = mlir::getElementTypeOrSelf(v51);
    v15 = mlir::UnrankedTensorType::get(v38);
    v16 = *(unsigned int *)(a11 + 8);
    if (v16 < *(_DWORD *)(a11 + 12))
      goto LABEL_6;
    goto LABEL_30;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  if (!v22)
  {
    v39 = v68;
    v58 = v67;
    v59 = 1;
    v40 = (void *)mlir::ValueRange::offset_base(&v58, 1);
    if (v39 != v59)
    {
      v58 = v40;
      v59 = 0;
      if (mlir::ValueRange::dereference_iterator(&v58, 0))
      {
        v41 = mlir::getElementTypeOrSelf(v51);
        return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v41);
      }
    }
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, (uint64_t)v51);
    return 1;
  }
  v58 = v60;
  v59 = 0x600000000;
  v23 = v68;
  __b = v67;
  v56 = 1;
  v24 = (void *)mlir::ValueRange::offset_base(&__b, 1);
  if (v23 == v56)
  {
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v58))
      goto LABEL_20;
LABEL_37:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    v44 = v43;
    __b = v57;
    HIDWORD(v56) = 6;
    if (v43 < 7)
    {
      if (v43)
        memset_pattern16(v57, &unk_1812352C0, 8 * v43);
      v45 = v57;
    }
    else
    {
      LODWORD(v56) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v57, v43, 8);
      v45 = __b;
      memset_pattern16(__b, &unk_1812352C0, 8 * v44);
    }
    LODWORD(v56) = v44;
    *(_QWORD *)&v53 = v45;
    *((_QWORD *)&v53 + 1) = v44;
    v54 = 1;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
    v49 = mlir::ShapedType::cloneWith((uint64_t *)&v51, &v53, OperandRange);
    v50 = *(unsigned int *)(a11 + 8);
    if (v50 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
      LODWORD(v50) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
    ++*(_DWORD *)(a11 + 8);
    if (__b != v57)
      free(__b);
    v17 = 1;
    goto LABEL_50;
  }
  __b = v24;
  v56 = 0;
  v42 = mlir::ValueRange::dereference_iterator(&__b, 0);
  if (!mlir::matchConstantWithIntVector<long long>(v42, (uint64_t)&v58))
    goto LABEL_37;
LABEL_20:
  __b = v57;
  v56 = 0x600000000;
  v25 = (uint64_t *)v58;
  v26 = v59;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  {
    ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    v29 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    llvm::SmallVector<long long,6u>::SmallVector<long long const*,void>(&v53, ArgAttrsAttr, (_BYTE *)(v29 + 8 * v30));
    v31 = v53;
    if ((_DWORD)v56)
    {
      v32 = (uint64_t *)__b;
      v33 = 8 * v56;
      do
      {
        v34 = *v32++;
        *(_QWORD *)(v31 + 8 * v34) = 0x8000000000000000;
        v33 -= 8;
      }
      while (v33);
    }
    v35 = mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v51, v31, DWORD2(v53));
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v35);
    if ((char *)v53 != &v54)
      free((void *)v53);
    v17 = 1;
    v36 = __b;
    if (__b == v57)
      goto LABEL_50;
  }
  else
  {
    v53 = (unint64_t)v67;
    v46 = mlir::ValueRange::dereference_iterator(&v53, 0);
    v47 = mlir::getElementTypeOrSelf(v46);
    v17 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v47);
    v36 = __b;
    if (__b == v57)
      goto LABEL_50;
  }
  free(v36);
LABEL_50:
  if (v58 != v60)
    free(v58);
  return v17;
}

uint64_t mlir::mps::`anonymous namespace'::getPositiveAxes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char ***v16;
  uint64_t v17;
  unint64_t PositiveAxis;
  char v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  const char **v23;
  char *v24;
  char *v25;
  __int128 v26;
  const char **v27;
  uint64_t v28;
  char *v29;
  const char **v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  const char **v36;
  char *v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD **v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v54;
  int64_t v55;
  void *v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  __int16 v60;
  _QWORD v61[3];
  void *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE v65[96];
  void *v66;
  _QWORD *v67;
  void *__p;
  _QWORD **v69;
  char v70;
  const char **v71;
  uint64_t v72;
  _QWORD v73[8];

  v73[6] = *MEMORY[0x1E0C80C00];
  v71 = (const char **)v73;
  v72 = 0x600000000;
  if (a2)
  {
    v56 = (void *)(a4 + 16);
    v13 = 8 * a2;
    do
    {
      v17 = *a1;
      if (v19)
      {
        v14 = PositiveAxis;
        v15 = *(unsigned int *)(a4 + 8);
        if (v15 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v56, v15 + 1, 8);
          v15 = *(unsigned int *)(a4 + 8);
        }
        v16 = (const char ***)a4;
      }
      else
      {
        v15 = v72;
        v16 = &v71;
        if (v72 >= (unint64_t)HIDWORD(v72))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v72 + 1, 8);
          v15 = v72;
        }
        v14 = v17;
      }
      (*v16)[v15] = (const char *)v14;
      ++*((_DWORD *)v16 + 2);
      ++a1;
      v13 -= 8;
    }
    while (v13);
    if ((_DWORD)v72)
    {
      if (a6)
      {
        v57 = "invalid axes: ";
        v60 = 259;
        mlir::emitError(a5, (uint64_t)&v57, (uint64_t)v61);
        v20 = v72;
        if ((_DWORD)v72)
        {
          v21 = v71;
          if (v61[0])
          {
            v22 = *v71;
            LODWORD(v57) = 2;
            v58 = v22;
            v23 = &v57;
            v24 = (char *)v62;
            if (v63 >= v64)
            {
              v54 = v63 + 1;
              if (v62 <= &v57 && (char *)v62 + 24 * v63 > (char *)&v57)
              {
                v55 = (char *)&v57 - (_BYTE *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v54, 24);
                v24 = (char *)v62;
                v23 = (const char **)((char *)v62 + v55);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v54, 24);
                v23 = &v57;
                v24 = (char *)v62;
              }
            }
            v25 = &v24[24 * v63];
            v26 = *(_OWORD *)v23;
            *((_QWORD *)v25 + 2) = v23[2];
            *(_OWORD *)v25 = v26;
            ++v63;
          }
          if ((_DWORD)v20 != 1 && v61[0])
          {
            v27 = v21 + 1;
            v28 = 8 * v20 - 16;
LABEL_21:
            LODWORD(v57) = 3;
            v58 = ", ";
            v59 = 2;
            v29 = (char *)v62;
            if (v63 >= v64)
            {
              v39 = v63 + 1;
              if (v62 <= &v57 && (char *)v62 + 24 * v63 > (char *)&v57)
              {
                v42 = (char *)&v57 - (_BYTE *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v39, 24);
                v29 = (char *)v62;
                v30 = (const char **)((char *)v62 + v42);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v39, 24);
                v30 = &v57;
                v29 = (char *)v62;
              }
            }
            else
            {
              v30 = &v57;
            }
            v31 = &v29[24 * v63];
            v32 = *(_OWORD *)v30;
            *((_QWORD *)v31 + 2) = v30[2];
            *(_OWORD *)v31 = v32;
            v33 = ++v63;
            if (v61[0])
            {
              v34 = *v27;
              LODWORD(v57) = 2;
              v58 = v34;
              v35 = (char *)v62;
              if (v33 >= v64)
              {
                v40 = v33 + 1;
                v41 = (char *)v62 + 24 * v33 > (char *)&v57;
                if (v62 <= &v57 && v41)
                {
                  v43 = (char *)&v57 - (_BYTE *)v62;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v40, 24);
                  v35 = (char *)v62;
                  v36 = (const char **)((char *)v62 + v43);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v40, 24);
                  v36 = &v57;
                  v35 = (char *)v62;
                }
              }
              else
              {
                v36 = &v57;
              }
              v37 = &v35[24 * v63];
              v38 = *(_OWORD *)v36;
              *((_QWORD *)v37 + 2) = v36[2];
              *(_OWORD *)v37 = v38;
              ++v63;
            }
            while (v28)
            {
              ++v27;
              v28 -= 8;
              if (v61[0])
                goto LABEL_21;
            }
          }
        }
        v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
        if (v61[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
        if (v70)
        {
          v45 = (_QWORD **)__p;
          if (__p)
          {
            v46 = v69;
            v47 = __p;
            if (v69 != __p)
            {
              do
                v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
              while (v46 != v45);
              v47 = __p;
            }
            v69 = v45;
            operator delete(v47);
          }
          v48 = v66;
          if (v66)
          {
            v49 = v67;
            v50 = v66;
            if (v67 != v66)
            {
              do
              {
                v52 = (void *)*--v49;
                v51 = v52;
                *v49 = 0;
                if (v52)
                  operator delete[](v51);
              }
              while (v49 != v48);
              v50 = v66;
            }
            v67 = v48;
            operator delete(v50);
          }
          if (v62 != v65)
            free(v62);
        }
      }
      else
      {
        v44 = 0;
      }
    }
    else
    {
      v44 = 1;
    }
  }
  else
  {
    v44 = 1;
  }
  if (v71 != v73)
    free(v71);
  return v44;
}

uint64_t mlir::mps::DynamicShapeCastOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  const void **v19;
  __int16 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD **v29;
  char v30;
  void *v31[2];
  _BYTE v32[48];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    v21 = 0;
    v22 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v21))
      goto LABEL_5;
    return 1;
  }
  v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  v21 = v2;
  v22 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v21))
    return 1;
LABEL_5:
  v4 = *this;
  if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8])
    return 1;
  v33 = v35;
  v34 = 0x600000000;
  if (*((_DWORD *)v4 + 17) == 1)
  {
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v33))
      goto LABEL_10;
LABEL_17:
    v5 = 1;
    v10 = v33;
    if (v33 == v35)
      return v5;
LABEL_18:
    free(v10);
    return v5;
  }
  if (!mlir::matchConstantWithIntVector<long long>(*(_QWORD *)(v4[9] + 56), (uint64_t)&v33))
    goto LABEL_17;
LABEL_10:
  v31[0] = v32;
  v31[1] = (void *)0x600000000;
  v7 = v33;
  v8 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
  {
    v5 = 1;
  }
  else
  {
    v19 = (const void **)"failed: could not extract valid positive axes values for the op";
    v20 = 259;
    mlir::OpState::emitOpError(this, &v19, (uint64_t)v23);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    if (v30)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v29;
        v13 = __p;
        if (v29 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v29 = v11;
        operator delete(v13);
      }
      v14 = v26;
      if (v26)
      {
        v15 = v27;
        v16 = v26;
        if (v27 != v26)
        {
          do
          {
            v18 = (void *)*--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              operator delete[](v17);
          }
          while (v15 != v14);
          v16 = v26;
        }
        v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25)
        free(v24);
    }
  }
  if (v31[0] != v32)
    free(v31[0]);
  v10 = v33;
  if (v33 != v35)
    goto LABEL_18;
  return v5;
}

uint64_t mlir::mps::BroadcastToOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t ArgAttrsAttr;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ElementTypeOrSelf;
  _QWORD *v34[2];
  void *v35;
  uint64_t v36;
  _BYTE v37[48];
  void *v38;
  uint64_t v39;
  _BYTE v40[48];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v41[0] = a4;
  v41[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v11 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  if (v12)
    v12 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  else
    v11 = 0;
  v34[0] = v11;
  v34[1] = v12;
  v14 = mlir::ValueRange::dereference_iterator(v41, 1);
  v38 = v40;
  v39 = 0x600000000;
  if (v11
    && (v15 = v14, mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v34))
    && mlir::matchConstantWithIntVector<long long>(v15, (uint64_t)&v38))
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v34);
    v35 = v37;
    v36 = 0x600000000;
    if (v17 <= v39)
      v18 = v39;
    else
      v18 = v17;
    if (v18)
    {
      v19 = ArgAttrsAttr;
      v20 = v17;
      if (v18 < 7)
      {
        v21 = 0;
        v22 = v37;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v18, 8);
        v21 = v36;
        v22 = v35;
      }
      if (v18 != v21)
        bzero(&v22[8 * v21], 8 * (v18 - v21));
      LODWORD(v36) = v18;
      if ((_DWORD)v18)
      {
        v27 = 0;
        v18 = v18;
        v28 = (char *)v38 + 8 * v39 - 8;
        v29 = v39 - 1;
        while (1)
        {
          if ((uint64_t)(v20 - 1 + v27) < 0)
          {
            v30 = 1;
            if (((v29 + v27) & 0x8000000000000000) == 0)
            {
LABEL_32:
              v31 = *(_QWORD *)&v28[8 * v27];
              if (v31 == 0x8000000000000000)
                v32 = v30;
              else
                v32 = *(_QWORD *)&v28[8 * v27];
              if (v31 != 1)
                v30 = v32;
            }
          }
          else
          {
            v30 = *(_QWORD *)(v19 + 8 * v20 - 8 + 8 * v27);
            if (((v29 + v27) & 0x8000000000000000) == 0)
              goto LABEL_32;
          }
          *(_QWORD *)&v22[8 * v18 - 8 + 8 * v27--] = v30;
          if (-(uint64_t)v18 == v27)
            goto LABEL_39;
        }
      }
      v18 = 0;
    }
    else
    {
      v22 = v37;
    }
LABEL_39:
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v34[0]);
    v25 = mlir::RankedTensorType::get((uint64_t)v22, v18, ElementTypeOrSelf, 0);
    if (v35 != v37)
      free(v35);
  }
  else
  {
    v23 = mlir::ValueRange::dereference_iterator(v41, 0);
    v24 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8));
    v25 = mlir::UnrankedTensorType::get(v24);
  }
  v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
  ++*(_DWORD *)(a11 + 8);
  if (v38 != v40)
    free(v38);
  return 1;
}

uint64_t mlir::mps::BroadcastGradientArgsOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ArgAttrsAttr;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52[3];
  _QWORD v53[3];

  v53[2] = *MEMORY[0x1E0C80C00];
  v53[0] = a4;
  v53[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v12 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  if (v13)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  else
    v12 = 0;
  v50 = v12;
  v51 = v13;
  v15 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v53, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
  {
    v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
    v48 = v15;
    v49 = v16;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
    {
LABEL_31:
      v52[0] = (char *)0x8000000000000000;
      v43 = mlir::IntegerType::get(a1, 0x20u, 1u);
      v44 = mlir::RankedTensorType::get((uint64_t)v52, 1, v43, 0);
      v45 = 0;
      v46 = *(unsigned int *)(a11 + 8);
      if (v46 < *(_DWORD *)(a11 + 12))
        goto LABEL_32;
LABEL_36:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v44;
      if (!v45)
        return 1;
      goto LABEL_33;
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
      goto LABEL_31;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v48))
    goto LABEL_31;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  if (v18)
  {
    v19 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19 >= 3)
    {
      v22 = v19 + 1;
      v23 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v21 = (uint64_t *)(ArgAttrsAttr + 8 * v23);
      v24 = (int64x2_t *)(ArgAttrsAttr + 16);
      v25 = 0uLL;
      v26 = vdupq_n_s64(0x8000000000000000);
      v27 = v23;
      v28 = 0uLL;
      do
      {
        v25 = vsubq_s64(v25, vceqq_s64(v24[-1], v26));
        v28 = vsubq_s64(v28, vceqq_s64(*v24, v26));
        v24 += 2;
        v27 -= 4;
      }
      while (v27);
      v20 = vaddvq_s64(vaddq_s64(v28, v25));
      if (v22 == v23)
        goto LABEL_20;
    }
    else
    {
      v20 = 0;
      v21 = (uint64_t *)ArgAttrsAttr;
    }
    do
    {
      v29 = *v21++;
      if (v29 == 0x8000000000000000)
        ++v20;
    }
    while (v21 != (uint64_t *)(ArgAttrsAttr + 8 * v18));
LABEL_20:
    if (v20)
      goto LABEL_31;
  }
  v30 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v48);
  if (!v31)
    goto LABEL_35;
  v32 = (v31 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v32 >= 3)
  {
    v35 = v32 + 1;
    v36 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v34 = (uint64_t *)(v30 + 8 * v36);
    v37 = (int64x2_t *)(v30 + 16);
    v38 = 0uLL;
    v39 = vdupq_n_s64(0x8000000000000000);
    v40 = v36;
    v41 = 0uLL;
    do
    {
      v38 = vsubq_s64(v38, vceqq_s64(v37[-1], v39));
      v41 = vsubq_s64(v41, vceqq_s64(*v37, v39));
      v37 += 2;
      v40 -= 4;
    }
    while (v40);
    v33 = vaddvq_s64(vaddq_s64(v41, v38));
    if (v35 == v36)
      goto LABEL_30;
  }
  else
  {
    v33 = 0;
    v34 = (uint64_t *)v30;
  }
  do
  {
    v42 = *v34++;
    if (v42 == 0x8000000000000000)
      ++v33;
  }
  while (v34 != (uint64_t *)(v30 + 8 * v31));
LABEL_30:
  if (v33)
    goto LABEL_31;
LABEL_35:
  mlir::mps::getBroadcastGradientArgs((uint64_t)v50, v51, (uint64_t)v48, v49, v52);
  v45 = v52[0];
  v52[0] = (char *)((v52[1] - v52[0]) >> 3);
  v47 = mlir::IntegerType::get(a1, 0x20u, 1u);
  v44 = mlir::RankedTensorType::get((uint64_t)v52, 1, v47, 0);
  v46 = *(unsigned int *)(a11 + 8);
  if (v46 >= *(_DWORD *)(a11 + 12))
    goto LABEL_36;
LABEL_32:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v46) = v44;
  ++*(_DWORD *)(a11 + 8);
  if (v45)
LABEL_33:
    operator delete(v45);
  return 1;
}

uint64_t mlir::mps::ExpandDimsOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t ElementTypeOrSelf;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char **v28;
  char **v29;
  char *v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *ArgAttrsAttr;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t OperandRange;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[32];
  void *v60;
  uint64_t v61;
  _BYTE v62[32];
  _QWORD v63[4];

  v63[2] = *MEMORY[0x1E0C80C00];
  v63[0] = a4;
  v63[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v63, 0) + 8);
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8))
  {
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8);
    v55 = v14;
    v56 = v15;
    if (v14)
    {
      v16 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        goto LABEL_58;
      v60 = v62;
      v61 = 0x400000000;
      v17 = mlir::ValueRange::dereference_iterator(v63, 1);
      if (mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v60))
      {
        v50 = v13 & 0xFFFFFFFFFFFFFFF8;
        v18 = v61;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
        v57 = v59;
        v58 = 0x400000000;
        v20 = v19 + v18;
        if (v19 + v18)
        {
          if ((unint64_t)v20 < 5)
          {
            v21 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v20, 8);
            v21 = v58;
          }
          if (v20 != v21)
            bzero((char *)v57 + 8 * v21, 8 * (v20 - v21));
          LODWORD(v58) = v20;
        }
        v53 = 0;
        v54 = 0;
        v52 = &v53;
        if ((_DWORD)v61)
        {
          v28 = (char **)v60;
          v29 = (char **)((char *)v60 + 8 * v61);
          while (1)
          {
            v51 = (uint64_t)*v28;
            v30 = (char *)((v20 & (v51 >> 63)) + v51);
            if ((uint64_t)v30 < 0 || (uint64_t)v30 >= v20)
              break;
            v31 = v53;
            v32 = &v53;
            v33 = &v53;
            if (v53)
            {
              v34 = v53;
              do
              {
                v35 = v34[4];
                if ((uint64_t)v30 >= v35)
                {
                  if (v35 >= (uint64_t)v30)
                  {
                    v46 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "axis must be unique");
                    goto LABEL_51;
                  }
                  ++v34;
                }
                v34 = (uint64_t *)*v34;
              }
              while (v34);
              while (1)
              {
                while (1)
                {
                  v33 = (uint64_t **)v31;
                  v36 = v31[4];
                  if ((uint64_t)v30 >= v36)
                    break;
                  v31 = *v33;
                  v32 = v33;
                  if (!*v33)
                    goto LABEL_35;
                }
                if (v36 >= (uint64_t)v30)
                  break;
                v31 = v33[1];
                if (!v31)
                {
                  v32 = v33 + 1;
                  goto LABEL_35;
                }
              }
            }
            else
            {
LABEL_35:
              v37 = (uint64_t *)operator new(0x28uLL);
              v37[4] = (uint64_t)v30;
              *v37 = 0;
              v37[1] = 0;
              v37[2] = (uint64_t)v33;
              *v32 = v37;
              if (*v52)
              {
                v52 = (uint64_t **)*v52;
                v38 = *v32;
              }
              else
              {
                v38 = v37;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v53, v38);
              ++v54;
            }
            if (++v28 == v29)
              goto LABEL_40;
          }
          v46 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(a2, a3, "invalid axis: ", (char **)&v51, ", axis ", "must be in range -|rank| <= axis < |rank|");
LABEL_51:
          v23 = v46;
          v27 = 1;
          v16 = (_QWORD *)v50;
        }
        else
        {
LABEL_40:
          v39 = v52;
          ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
          if (v20 >= 1)
          {
            v41 = 0;
            v42 = v57;
            do
            {
              if (v39 == &v53 || v39[4] != v41)
              {
                v43 = *ArgAttrsAttr++;
                v42[(_QWORD)v41] = v43;
              }
              else
              {
                v42[(_QWORD)v41] = 1;
                v44 = v39[1];
                if (v44)
                {
                  do
                  {
                    v39 = (uint64_t **)v44;
                    v44 = (uint64_t *)*v44;
                  }
                  while (v44);
                }
                else
                {
                  do
                  {
                    v45 = (uint64_t *)v39;
                    v39 = (uint64_t **)v39[2];
                  }
                  while (*v39 != v45);
                }
              }
              v41 = (uint64_t *)((char *)v41 + 1);
            }
            while (v41 != (uint64_t *)v20);
          }
          v47 = v57;
          v23 = v58;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
          v16 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v47, v23, OperandRange, 0);
          v27 = 0;
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v52, v53);
        if (v57 != v59)
          free(v57);
      }
      else
      {
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
        v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        v26 = *(unsigned int *)(a11 + 8);
        if (v26 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
          LODWORD(v26) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
        ++*(_DWORD *)(a11 + 8);
        v27 = 1;
        v23 = 1;
      }
      if (v60 != v62)
        free(v60);
      if (!v27)
      {
LABEL_58:
        v49 = *(unsigned int *)(a11 + 8);
        if (v49 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v49 + 1, 8);
          LODWORD(v49) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v49) = v16;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
      return v23;
    }
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot exapnd_dims a non-shaped type");
}

uint64_t mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(uint64_t a1, char a2, char *a3, char **a4, char *a5, const char *a6)
{
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20)
    mlir::Diagnostic::append<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>((uint64_t)&v21, a3, a4, a5, a6);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  if (v28)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v27;
      v13 = __p;
      if (v27 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v27 = v11;
      operator delete(v13);
    }
    v14 = v24;
    if (v24)
    {
      v15 = v25;
      v16 = v24;
      if (v25 != v24)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v24;
      }
      v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v10;
}

BOOL mlir::mps::ExpandDimsOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t DefiningOp;
  mlir::mps::_anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NumElements;
  _BOOL8 v12;
  uint64_t *v14;
  _QWORD *v15[2];
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    v19 = v2;
    v20 = v3;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19))
      return 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19))
      return 1;
  }
  v17 = 0;
  v18 = 0;
  v4 = *(uint64_t **)(*((_QWORD *)*this + 9) + 56);
  v16 = (uint64_t **)&v17;
  v14 = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v14);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v16, DefiningOp))
  {
    v15[0] = 0;
    v15[1] = 0;
    v14 = (uint64_t *)v15;
    v6 = *this;
    v7 = v17;
    v8 = v18;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    v10 = v9;
    NumElements = mlir::ElementsAttr::getNumElements(v17, v18);
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v14, v15[0]);
    return v12;
  }
  return 1;
}

uint64_t mlir::mps::SqueezeOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t i, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *ArgAttrsAttr;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char **v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  char *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v36;
  char *v37;
  int v38;
  unsigned int v39;
  char **v40;
  char *v41;
  char **v42;
  char **v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t OperandRange;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t NumElements;
  unint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t ElementTypeOrSelf;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char **v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm *v93;
  unsigned int v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[32];
  void *__b;
  uint64_t v99;
  _BYTE v100[32];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v101 = a4;
  v102 = a5;
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v101, 0) + 8);
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v101, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8))
  {
    v90 = 0;
    v91 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a2, i, "cannot squeeze a non-shaped type");
  }
  v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8);
  v90 = v14;
  v91 = v15;
  if (!v14)
    return mlir::emitOptionalError<char const(&)[39]>(a2, i, "cannot squeeze a non-shaped type");
  v16 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if (*(_UNKNOWN **)(*(_QWORD *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_66;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
  __b = v100;
  v99 = 0x400000000;
  if (v102 != 2)
  {
    v47 = v17;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90))
    {
      v48 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
      if (!v49)
      {
LABEL_54:
        if (v47)
        {
          v51 = 8 * v47;
          do
          {
            i = *ArgAttrsAttr;
            if (*ArgAttrsAttr != 1)
            {
              v52 = v99;
              if (v99 >= (unint64_t)HIDWORD(v99))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v100, v99 + 1, 8);
                v52 = v99;
              }
              *((_QWORD *)__b + v52) = i;
              LODWORD(v99) = v99 + 1;
            }
            ++ArgAttrsAttr;
            v51 -= 8;
          }
          while (v51);
        }
        goto LABEL_108;
      }
      v50 = 8 * v49;
      while (*v48 != 0x8000000000000000)
      {
        ++v48;
        v50 -= 8;
        if (!v50)
          goto LABEL_54;
      }
    }
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
    v54 = mlir::UnrankedTensorType::get(OperandRange);
    v55 = *(unsigned int *)(a11 + 8);
    if (v55 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
      LODWORD(v55) = *(_DWORD *)(a11 + 8);
    }
    v56 = 0;
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v54;
    ++*(_DWORD *)(a11 + 8);
    i = 1;
    v57 = __b;
    if (__b != v100)
      goto LABEL_64;
    goto LABEL_65;
  }
  v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v101, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    v88 = 0;
    v89 = 0;
LABEL_71:
    i = mlir::emitOptionalError<char const(&)[39]>(a2, i, "axes must be a shaped type");
    v56 = 0;
    v57 = __b;
    if (__b == v100)
      goto LABEL_65;
    goto LABEL_64;
  }
  v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  v88 = v19;
  v89 = v20;
  if (!v19)
    goto LABEL_71;
  v95 = v97;
  v96 = 0x400000000;
  v21 = mlir::ValueRange::dereference_iterator(&v101, 1);
  if (!mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)&v95))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v88))
    {
      v60 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
      if (!v61)
      {
LABEL_78:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
        v64 = v63;
        v65 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v88);
        NumElements = mlir::ShapedType::getNumElements(v65, v66);
        v68 = v64 - NumElements;
        if (v64 - NumElements < 0)
        {
          i = mlir::emitOptionalError<char const(&)[30],char const(&)[27]>(a2, i, "number of squeezed axes must ", "be less than rank of input");
          goto LABEL_84;
        }
        v69 = NumElements;
        LODWORD(v99) = 0;
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__b, v68);
        if (v64 != v69)
          memset_pattern16(__b, &unk_1812352C0, 8 * v68);
        goto LABEL_102;
      }
      v62 = 8 * v61;
      while (*v60 != 0x8000000000000000)
      {
        ++v60;
        v62 -= 8;
        if (!v62)
          goto LABEL_78;
      }
    }
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
    v72 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v72);
    v70 = 0;
    i = 1;
    goto LABEL_103;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
  v23 = v22;
  v92 = 1;
  memset_pattern16(&v93, &unk_1812362E0, 0x20uLL);
  if (!(_DWORD)v96)
  {
LABEL_86:
    LODWORD(v99) = 0;
    if (v23 >= 1)
    {
      v73 = 0;
      for (i = 0; i != v23; ++i)
      {
        if ((v92 & 1) != 0)
        {
          v74 = &v93;
          v75 = 3;
          v76 = (37 * i) & 3;
          v77 = (uint64_t)*(&v93 + v76);
          if (i != v77)
            goto LABEL_93;
        }
        else
        {
          if (!v94)
            goto LABEL_97;
          v74 = v93;
          v75 = v94 - 1;
          v76 = (v94 - 1) & (37 * i);
          v77 = *((_QWORD *)v93 + v76);
          if (i != v77)
          {
LABEL_93:
            v78 = 1;
            while (v77 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v79 = v76 + v78++;
              v76 = v79 & v75;
              v77 = v74[v76];
              if (i == v77)
                goto LABEL_89;
            }
LABEL_97:
            v80 = *ArgAttrsAttr;
            if (v73 >= HIDWORD(v99))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v100, v73 + 1, 8);
              v73 = v99;
            }
            *((_QWORD *)__b + v73) = v80;
            v73 = v99 + 1;
            LODWORD(v99) = v99 + 1;
          }
        }
LABEL_89:
        ++ArgAttrsAttr;
      }
    }
    if ((v92 & 1) == 0)
      llvm::deallocate_buffer(v93, (void *)(8 * v94));
LABEL_102:
    v70 = 1;
    goto LABEL_103;
  }
  v24 = (char **)v95;
  v25 = (char **)((char *)v95 + 8 * v96);
  while (1)
  {
    v87 = (uint64_t)*v24;
    v26 = (v23 & (v87 >> 63)) + v87;
    v86 = (char *)v26;
    if (v26 < 0 || v23 <= v26)
      break;
    if ((v92 & 1) != 0)
    {
      v27 = 4;
      v28 = &v93;
    }
    else
    {
      v27 = v94;
      if (!v94)
        goto LABEL_21;
      v28 = v93;
    }
    v29 = v27 - 1;
    v30 = v29 & (37 * v26);
    v31 = (char *)v28[v30];
    if ((char *)v26 == v31)
    {
LABEL_81:
      v84 = mlir::emitOptionalError<char const(&)[39]>(a2, i, "axis must be unique");
      goto LABEL_82;
    }
    v32 = 1;
    while (v31 != (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      v33 = v30 + v32++;
      v30 = v33 & v29;
      v31 = (char *)v28[v30];
      if ((char *)v26 == v31)
        goto LABEL_81;
    }
LABEL_21:
    v34 = ArgAttrsAttr[v26];
    if (v34 != 0x8000000000000000 && v34 != 1)
    {
      v84 = mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(a2, i, "squeezed axis must have length 1, ", "input.shape[", &v86, "] == ", (char **)&ArgAttrsAttr[v26]);
      goto LABEL_82;
    }
    if ((v92 & 1) != 0)
    {
      v36 = 4;
      v37 = (char *)&v93;
    }
    else
    {
      v36 = v94;
      if (!v94)
      {
        v85 = v25;
        v42 = 0;
LABEL_34:
        llvm::DenseMapBase<llvm::SmallDenseMap<long long,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::InsertIntoBucket<long long const&,llvm::detail::DenseSetEmpty&>((uint64_t)&v92, v42, &v86);
        v25 = v85;
        goto LABEL_31;
      }
      v37 = (char *)v93;
    }
    v38 = v36 - 1;
    v39 = v38 & (37 * v26);
    v40 = (char **)&v37[8 * v39];
    v41 = *v40;
    if ((char *)v26 != *v40)
    {
      v43 = 0;
      v44 = 1;
      v85 = v25;
      while (v41 != (char *)0x7FFFFFFFFFFFFFFFLL)
      {
        if (v43)
          v45 = 0;
        else
          v45 = v41 == (char *)0x8000000000000000;
        if (v45)
          v43 = v40;
        v46 = v39 + v44++;
        v39 = v46 & v38;
        v40 = (char **)&v37[8 * v39];
        v41 = *v40;
        v25 = v85;
        if ((char *)v26 == *v40)
          goto LABEL_31;
      }
      if (v43)
        v42 = v43;
      else
        v42 = v40;
      goto LABEL_34;
    }
LABEL_31:
    if (++v24 == v25)
      goto LABEL_86;
  }
  v84 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(a2, i, "invalid axis: ", (char **)&v87, ", axis must be in range ", "-|rank| <= axis < |rank|");
LABEL_82:
  i = v84;
  if ((v92 & 1) == 0)
    llvm::deallocate_buffer(v93, (void *)(8 * v94));
LABEL_84:
  v70 = 0;
LABEL_103:
  if (v95 != v97)
    free(v95);
  if ((v70 & 1) == 0)
  {
    v56 = 0;
    v57 = __b;
    if (__b == v100)
      goto LABEL_65;
LABEL_64:
    free(v57);
    goto LABEL_65;
  }
LABEL_108:
  v81 = __b;
  v82 = v99;
  v83 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
  v16 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v81, v82, v83, 0);
  v56 = 1;
  v57 = __b;
  if (__b != v100)
    goto LABEL_64;
LABEL_65:
  if (v56)
  {
LABEL_66:
    v58 = *(unsigned int *)(a11 + 8);
    if (v58 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v58 + 1, 8);
      LODWORD(v58) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v58) = v16;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  return i;
}

uint64_t mlir::emitOptionalError<char const(&)[30],char const(&)[27]>(uint64_t a1, char a2, char *a3, const char *a4)
{
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD **v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v16);
  if (v16)
    mlir::Diagnostic::append<char const(&)[45],char const(&)[25]>((uint64_t)&v17, a3, a4);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  if (v24)
  {
    v7 = (_QWORD **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
          v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
    v10 = v20;
    if (v20)
    {
      v11 = v21;
      v12 = v20;
      if (v21 != v20)
      {
        do
        {
          v14 = (void *)*--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            operator delete[](v13);
        }
        while (v11 != v10);
        v12 = v20;
      }
      v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v6;
}

uint64_t mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(uint64_t a1, char a2, char *a3, char *a4, char **a5, char *a6, char **a7)
{
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD **v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22)
    mlir::Diagnostic::append<char const(&)[39],char const(&)[29],long long &,char const(&)[4],long long>((uint64_t)&v23, a3, a4, a5, a6, a7);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  if (v30)
  {
    v13 = (_QWORD **)__p;
    if (__p)
    {
      v14 = v29;
      v15 = __p;
      if (v29 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v29 = v13;
      operator delete(v15);
    }
    v16 = v26;
    if (v26)
    {
      v17 = v27;
      v18 = v26;
      if (v27 != v26)
      {
        do
        {
          v20 = (void *)*--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            operator delete[](v19);
        }
        while (v17 != v16);
        v18 = v26;
      }
      v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25)
      free(v24);
  }
  return v12;
}

uint64_t mlir::mps::SqueezeOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DefiningOp;
  const char *v6;
  const char *v7;
  uint64_t ArgAttrsAttr;
  uint64_t *v9;
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t **v48[4];
  __int16 v49;
  uint64_t *v50;
  _QWORD *v51[2];
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    v54 = v2;
    v55 = v3;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
      goto LABEL_5;
    return 1;
  }
  v54 = 0;
  v55 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
    return 1;
LABEL_5:
  if (*((_DWORD *)*this + 17) == 1)
    return 1;
  v4 = *(_QWORD *)((*this)[9] + 56);
  if (!v4)
    return 1;
  v52 = 0;
  v53 = 0;
  v48[0] = (uint64_t **)&v52;
  v59[0] = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v59);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v48, DefiningOp))
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
  v7 = v6;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
  v51[0] = 0;
  v51[1] = 0;
  v50 = (uint64_t *)v51;
  {
    v9 = v50;
    if (v50 == (uint64_t *)v51)
    {
LABEL_26:
      v10 = 1;
    }
    else
    {
      while (1)
      {
        v12 = (const char *)v9[4];
        v13 = *(_QWORD *)(ArgAttrsAttr + 8 * (_QWORD)v12);
        v14 = v13 == 0x8000000000000000 || v13 == 1;
        if (!v14)
          break;
        v15 = (uint64_t *)v9[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (uint64_t *)v9[2];
            v14 = *v16 == (_QWORD)v9;
            v9 = v16;
          }
          while (!v14);
        }
        v9 = v16;
        if (v16 == (uint64_t *)v51)
          goto LABEL_26;
      }
      v48[0] = (uint64_t **)"squeezed axis must have length 1, input.shape[";
      v49 = 259;
      mlir::OpState::emitOpError(this, (const void ***)v48, (uint64_t)v59);
      if (v59[0])
      {
        v56 = 2;
        v57 = v12;
        v17 = &v56;
        v18 = (char *)v60;
        if (v61 >= v62)
        {
          v40 = v61 + 1;
          if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
          {
            v45 = (char *)&v56 - (_BYTE *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v40, 24);
            v18 = (char *)v60;
            v17 = (int *)((char *)v60 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v40, 24);
            v17 = &v56;
            v18 = (char *)v60;
          }
        }
        v19 = &v18[24 * v61];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        v21 = ++v61;
        if (v59[0])
        {
          v56 = 3;
          v57 = "] == ";
          v58 = 5;
          v22 = &v56;
          v23 = (char *)v60;
          if (v21 >= v62)
          {
            v41 = v21 + 1;
            v42 = (char *)v60 + 24 * v21 > (char *)&v56;
            if (v60 <= &v56 && v42)
            {
              v46 = (char *)&v56 - (_BYTE *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v41, 24);
              v23 = (char *)v60;
              v22 = (int *)((char *)v60 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v41, 24);
              v22 = &v56;
              v23 = (char *)v60;
            }
          }
          v24 = &v23[24 * v61];
          v25 = *(_OWORD *)v22;
          *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
          *(_OWORD *)v24 = v25;
          v26 = ++v61;
          if (v59[0])
          {
            v27 = *(const char **)(ArgAttrsAttr + 8 * (_QWORD)v12);
            v56 = 2;
            v57 = v27;
            v28 = &v56;
            v29 = (char *)v60;
            if (v26 >= v62)
            {
              v43 = v26 + 1;
              v44 = (char *)v60 + 24 * v26 > (char *)&v56;
              if (v60 <= &v56 && v44)
              {
                v47 = (char *)&v56 - (_BYTE *)v60;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
                v29 = (char *)v60;
                v28 = (int *)((char *)v60 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
                v28 = &v56;
                v29 = (char *)v60;
              }
            }
            v30 = &v29[24 * v61];
            v31 = *(_OWORD *)v28;
            *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
            *(_OWORD *)v30 = v31;
            ++v61;
          }
        }
      }
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      if (v68)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v67;
          v34 = __p;
          if (v67 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v67 = v32;
          operator delete(v34);
        }
        v35 = v64;
        if (v64)
        {
          v36 = v65;
          v37 = v64;
          if (v65 != v64)
          {
            do
            {
              v39 = (void *)*--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                operator delete[](v38);
            }
            while (v36 != v35);
            v37 = v64;
          }
          v65 = v35;
          operator delete(v37);
        }
        if (v60 != v63)
          free(v60);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v50, v51[0]);
  return v10;
}

uint64_t mlir::mps::Flatten2DOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  void *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t Value;
  char *v19;
  uint64_t v20;
  uint64_t DefiningOp;
  int64_t SingleInt;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t ElementType;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43[2];
  char *v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[3];

  v53[2] = *MEMORY[0x1E0C80C00];
  v53[0] = a4;
  v53[1] = a5;
  if (a5 != 2)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = mlir::ValueRange::dereference_iterator(v53, 0);
  v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v16 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v16 = 0;
  }
  v42 = v16;
  if (v16)
  {
    v50 = v52;
    v51 = 0x200000002;
    v17 = mlir::ValueRange::dereference_iterator(v53, 1);
    v45 = v16;
    v52[0] = 0x8000000000000000;
    v52[1] = 0x8000000000000000;
    if (*(_UNKNOWN **)(*(_QWORD *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
      v20 = (uint64_t)v19;
      v44 = v19;
      v47 = 0;
      v48 = 0;
      v46 = (uint64_t **)&v47;
      v49 = v17;
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49);
      if (DefiningOp)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v46, DefiningOp))
        {
          SingleInt = mlir::getSingleIntValue<long long>(v47, v48);
          v43[0] = (char *)SingleInt;
          v43[1] = v23;
          if ((_BYTE)v23)
          {
            if (v20 <= 1)
              v24 = 1;
            else
              v24 = v20;
            v25 = (v24 & (SingleInt >> 63)) + SingleInt;
            v26 = 2;
            if (v20 > 2)
              v26 = v20;
            if ((v25 & 0x8000000000000000) != 0 || v26 < v25)
            {
              if (!mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[21],long long &>(a2, a3, "invalid axis (", v43, ") for shape of rank ", &v44))
              {
                v34 = 0;
LABEL_39:
                if (v50 != v52)
                  free(v50);
                return v34;
              }
            }
            else
            {
              v27 = v50;
              *(int64x2_t *)v50 = vdupq_n_s64(1uLL);
              if (v25)
              {
                v28 = 1;
                v29 = (uint64_t *)Value;
                v30 = v25;
                while (1)
                {
                  v32 = *v29++;
                  v31 = v32;
                  if (v32 == 0x8000000000000000)
                    break;
                  v28 *= v31;
                  *v27 = v28;
                  if (!--v30)
                    goto LABEL_30;
                }
                *v27 = 0x8000000000000000;
              }
LABEL_30:
              if ((uint64_t)v25 < v20)
              {
                v35 = 1;
                while (1)
                {
                  v36 = *(_QWORD *)(Value + 8 * v25);
                  if (v36 == 0x8000000000000000)
                    break;
                  v35 *= v36;
                  v27[1] = v35;
                  if ((uint64_t)++v25 >= v20)
                    goto LABEL_36;
                }
                v27[1] = 0x8000000000000000;
              }
            }
          }
        }
      }
    }
LABEL_36:
    v37 = v50;
    v38 = v51;
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v42);
    v40 = mlir::RankedTensorType::get((uint64_t)v37, v38, ElementType, 0);
    v41 = *(unsigned int *)(a11 + 8);
    if (v41 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v41) = v40;
    ++*(_DWORD *)(a11 + 8);
    v34 = 1;
    goto LABEL_39;
  }
  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot Flatten2D a non-tensor input type.");
}

uint64_t mlir::mps::ReductionAndOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_and", 17, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionArgMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ElementTypeOrSelf;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t ElementType;
  unint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Value;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61[8];
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[48];
  void *__b;
  uint64_t v72;
  _BYTE v73[48];
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v60 = a6;
  v61[0] = 0;
  v62 = 0;
  v63 = v16;
  v64 = a9;
  v65 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62)
      v62 = 0;
    mlir::OperationName::OperationName(v61, "mps.reduction_argmax", 20, Context);
    v62 = 1;
  }
  v66 = a4;
  v67 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v63;
    v19 = v66;
    v20 = v67;
    ElementTypeOrSelf = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    v74 = v19;
    v75 = v20;
    v22 = mlir::ValueRange::dereference_iterator(&v74, 0);
    v23 = 0;
    if (v75 >= 2)
      v23 = mlir::ValueRange::dereference_iterator(&v74, 1);
    v24 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
    v25 = *(void **)(*v24 + 136);
    if (v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v24 = 0;
    }
    v59 = v24;
    if (!v24)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = ElementTypeOrSelf;
    if (ElementTypeOrSelf)
    {
      if (v23)
        goto LABEL_19;
    }
    else
    {
      ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v59);
      if (v23)
      {
LABEL_19:
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
        {
          v28 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          v29 = *(void **)(*(_QWORD *)v28 + 136);
          if (v29 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
            && v29 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          {
            v28 = 0;
          }
          v58 = v28;
          if (!v28)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
          {
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            if (v31 >= 2)
              return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
          __b = v73;
          v72 = 0x600000000;
          if (mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&__b))
          {
            v68 = v70;
            v69 = 0x600000000;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
            {
              v43 = v68;
              v44 = v69;
              if (!ElementTypeOrSelf)
                ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
              v45 = mlir::RankedTensorType::get((uint64_t)v43, v44, ElementTypeOrSelf, 0);
              v46 = *(unsigned int *)(a11 + 8);
              if (v46 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
                LODWORD(v46) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v46) = v45;
              ++*(_DWORD *)(a11 + 8);
              v32 = 1;
            }
            else
            {
              v32 = 0;
            }
            if (v68 != v70)
              free(v68);
            goto LABEL_80;
          }
          if (!mlir::TensorType::hasRank((mlir::TensorType *)&v58))
            goto LABEL_62;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          if (!v47)
            goto LABEL_72;
          if (v47 == 1)
          {
            v48 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58) == 1;
            if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
            {
              v49 = v59;
LABEL_66:
              v50 = *(unsigned int *)(a11 + 8);
              if (v50 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
                LODWORD(v50) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
              ++*(_DWORD *)(a11 + 8);
              goto LABEL_79;
            }
          }
          else
          {
LABEL_62:
            v48 = 0;
          }
          if (!v18 && !v48)
          {
            v49 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
            goto LABEL_66;
          }
LABEL_72:
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
          v52 = (__PAIR128__(v51, v18) - 1) >> 64;
          if (v51 == (v18 == 0))
          {
            v54 = 0;
          }
          else
          {
            if (v52 >> 61)
              abort();
            v53 = 8 * v52;
            v54 = (char *)operator new(8 * v52);
            memset_pattern16(v54, &unk_1812352C0, v53);
            v52 = (unint64_t)&v54[v53];
          }
          v55 = mlir::RankedTensorType::get((uint64_t)v54, (uint64_t)(v52 - (_QWORD)v54) >> 3, ElementType, 0);
          v56 = v55;
          v57 = *(unsigned int *)(a11 + 8);
          if (v57 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v57 + 1, 8);
            *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v56;
            if (!v54)
              goto LABEL_79;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v57) = v55;
            ++*(_DWORD *)(a11 + 8);
            if (!v54)
            {
LABEL_79:
              v32 = 1;
LABEL_80:
              if (__b != v73)
                free(__b);
              return v32;
            }
          }
          operator delete(v54);
          goto LABEL_79;
        }
LABEL_36:
        v33 = ElementType;
        goto LABEL_37;
      }
    }
    if (!v18)
    {
      v37 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
      goto LABEL_38;
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      v35 = v34;
      __b = v73;
      HIDWORD(v72) = 4;
      if (v34 < 5)
      {
        if (v34)
          memset_pattern16(v73, &unk_181233190, 8 * v34);
        v36 = v73;
      }
      else
      {
        LODWORD(v72) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v73, v34, 8);
        v36 = __b;
        memset_pattern16(__b, &unk_181233190, 8 * v35);
      }
      LODWORD(v72) = v35;
      v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, ElementType, 0);
      if (__b != v73)
        free(__b);
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  v33 = mlir::Float32Type::get(this, a2);
LABEL_37:
  v37 = mlir::UnrankedTensorType::get(v33);
LABEL_38:
  v38 = v37;
LABEL_39:
  v39 = *(unsigned int *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionArgMinOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ElementTypeOrSelf;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t ElementType;
  unint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Value;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61[8];
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[48];
  void *__b;
  uint64_t v72;
  _BYTE v73[48];
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v60 = a6;
  v61[0] = 0;
  v62 = 0;
  v63 = v16;
  v64 = a9;
  v65 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62)
      v62 = 0;
    mlir::OperationName::OperationName(v61, "mps.reduction_argmin", 20, Context);
    v62 = 1;
  }
  v66 = a4;
  v67 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v63;
    v19 = v66;
    v20 = v67;
    ElementTypeOrSelf = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    v74 = v19;
    v75 = v20;
    v22 = mlir::ValueRange::dereference_iterator(&v74, 0);
    v23 = 0;
    if (v75 >= 2)
      v23 = mlir::ValueRange::dereference_iterator(&v74, 1);
    v24 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
    v25 = *(void **)(*v24 + 136);
    if (v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v24 = 0;
    }
    v59 = v24;
    if (!v24)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = ElementTypeOrSelf;
    if (ElementTypeOrSelf)
    {
      if (v23)
        goto LABEL_19;
    }
    else
    {
      ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v59);
      if (v23)
      {
LABEL_19:
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
        {
          v28 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          v29 = *(void **)(*(_QWORD *)v28 + 136);
          if (v29 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
            && v29 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          {
            v28 = 0;
          }
          v58 = v28;
          if (!v28)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
          {
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            if (v31 >= 2)
              return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
          __b = v73;
          v72 = 0x600000000;
          if (mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&__b))
          {
            v68 = v70;
            v69 = 0x600000000;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
            {
              v43 = v68;
              v44 = v69;
              if (!ElementTypeOrSelf)
                ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
              v45 = mlir::RankedTensorType::get((uint64_t)v43, v44, ElementTypeOrSelf, 0);
              v46 = *(unsigned int *)(a11 + 8);
              if (v46 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
                LODWORD(v46) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v46) = v45;
              ++*(_DWORD *)(a11 + 8);
              v32 = 1;
            }
            else
            {
              v32 = 0;
            }
            if (v68 != v70)
              free(v68);
            goto LABEL_80;
          }
          if (!mlir::TensorType::hasRank((mlir::TensorType *)&v58))
            goto LABEL_62;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          if (!v47)
            goto LABEL_72;
          if (v47 == 1)
          {
            v48 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58) == 1;
            if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
            {
              v49 = v59;
LABEL_66:
              v50 = *(unsigned int *)(a11 + 8);
              if (v50 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
                LODWORD(v50) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v49;
              ++*(_DWORD *)(a11 + 8);
              goto LABEL_79;
            }
          }
          else
          {
LABEL_62:
            v48 = 0;
          }
          if (!v18 && !v48)
          {
            v49 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
            goto LABEL_66;
          }
LABEL_72:
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
          v52 = (__PAIR128__(v51, v18) - 1) >> 64;
          if (v51 == (v18 == 0))
          {
            v54 = 0;
          }
          else
          {
            if (v52 >> 61)
              abort();
            v53 = 8 * v52;
            v54 = (char *)operator new(8 * v52);
            memset_pattern16(v54, &unk_1812352C0, v53);
            v52 = (unint64_t)&v54[v53];
          }
          v55 = mlir::RankedTensorType::get((uint64_t)v54, (uint64_t)(v52 - (_QWORD)v54) >> 3, ElementType, 0);
          v56 = v55;
          v57 = *(unsigned int *)(a11 + 8);
          if (v57 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v57 + 1, 8);
            *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v56;
            if (!v54)
              goto LABEL_79;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v57) = v55;
            ++*(_DWORD *)(a11 + 8);
            if (!v54)
            {
LABEL_79:
              v32 = 1;
LABEL_80:
              if (__b != v73)
                free(__b);
              return v32;
            }
          }
          operator delete(v54);
          goto LABEL_79;
        }
LABEL_36:
        v33 = ElementType;
        goto LABEL_37;
      }
    }
    if (!v18)
    {
      v37 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
      goto LABEL_38;
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      v35 = v34;
      __b = v73;
      HIDWORD(v72) = 4;
      if (v34 < 5)
      {
        if (v34)
          memset_pattern16(v73, &unk_181233190, 8 * v34);
        v36 = v73;
      }
      else
      {
        LODWORD(v72) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v73, v34, 8);
        v36 = __b;
        memset_pattern16(__b, &unk_181233190, 8 * v35);
      }
      LODWORD(v72) = v35;
      v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, ElementType, 0);
      if (__b != v73)
        free(__b);
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  v33 = mlir::Float32Type::get(this, a2);
LABEL_37:
  v37 = mlir::UnrankedTensorType::get(v33);
LABEL_38:
  v38 = v37;
LABEL_39:
  v39 = *(unsigned int *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionLogSumExpOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_logsumexp", 23, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_max", 17, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMeanOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_mean", 18, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMinOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0uLL;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_min", 17, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionOrOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_or", 16, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionSumOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_sum", 17, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionVarianceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_variance", 22, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionProdOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v16;
  uint64_t Context;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t ElementType;
  unint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59[8];
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[48];
  void *__b;
  uint64_t v69;
  _BYTE v70[48];
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v58 = a6;
  v59[0] = 0;
  v60 = 0;
  v61 = v16;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60)
      v60 = 0;
    mlir::OperationName::OperationName(v59, "mps.reduction_prod", 18, Context);
    v60 = 1;
  }
  *(_QWORD *)&v64 = a4;
  *((_QWORD *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    v18 = v61;
    v71 = v64;
    v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    v20 = 0;
    if (*((_QWORD *)&v71 + 1) >= 2uLL)
      v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v21 = 0;
    }
    v57 = v21;
    if (!v21)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        v25 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        v26 = *(void **)(*(_QWORD *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v25 = 0;
        }
        v56 = v25;
        if (!v25)
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2)
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
        }
        __b = v70;
        v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          v65 = v67;
          v66 = 0x600000000;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            v40 = v65;
            v41 = v66;
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            v29 = 1;
          }
          else
          {
            v29 = 0;
          }
          if (v65 != v67)
            free(v65);
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
          goto LABEL_58;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45)
          goto LABEL_68;
        if (v45 == 1)
        {
          v46 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            v47 = v57;
LABEL_62:
            v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          v46 = 0;
        }
        if (!v18 && !v46)
        {
          v47 = (_QWORD *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          v52 = 0;
        }
        else
        {
          if (v50 >> 61)
            abort();
          v51 = 8 * v50;
          v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1812352C0, v51);
          v50 = (unint64_t)&v52[v51];
        }
        v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (_QWORD)v52) >> 3, ElementType, 0);
        v54 = v53;
        v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(_QWORD *)(*(_QWORD *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52)
            goto LABEL_75;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            v29 = 1;
LABEL_76:
            if (__b != v70)
              free(__b);
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31)
            memset_pattern16(v70, &unk_181233190, 8 * v31);
          v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          v33 = __b;
          memset_pattern16(__b, &unk_181233190, 8 * v32);
        }
        LODWORD(v69) = v32;
        v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70)
          free(__b);
        goto LABEL_37;
      }
    }
    v30 = ElementType;
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  v35 = v34;
LABEL_37:
  v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SortOp::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t ElementTypeOrSelf;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v41[0] = a4;
  v41[1] = a5;
  if (a5)
  {
    v12 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8))
    {
      v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
      v39 = v12;
      v40 = v13;
      if (v12 && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39) & 1) != 0)
      {
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
        v22 = v21;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39);
        v24 = mlir::RankedTensorType::get(ArgAttrsAttr, v22, ElementTypeOrSelf, 0);
        v25 = *(unsigned int *)(a11 + 8);
        if (v25 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
          LODWORD(v25) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
        ++*(_DWORD *)(a11 + 8);
        v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
        v28 = v27;
        v29 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
        v30 = mlir::RankedTensorType::get(v26, v28, v29, 0);
LABEL_18:
        v36 = v30;
        v37 = *(_DWORD *)(a11 + 8);
        if (v37 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
          v37 = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v36;
        goto LABEL_21;
      }
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v31 = mlir::ValueRange::dereference_iterator(v41, 0);
    v32 = mlir::getElementTypeOrSelf(v31);
    v33 = mlir::UnrankedTensorType::get(v32);
    v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    v35 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    v30 = mlir::UnrankedTensorType::get(v35);
    goto LABEL_18;
  }
  v14 = mlir::Float32Type::get(this, a2);
  v15 = mlir::UnrankedTensorType::get(v14);
  v16 = *(unsigned int *)(a11 + 8);
  if (v16 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v16) = v15;
  ++*(_DWORD *)(a11 + 8);
  v17 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
  v18 = mlir::UnrankedTensorType::get(v17);
  v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = v18;
LABEL_21:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::NormalizationOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  void *v19;
  _OWORD *v20;
  uint64_t v21;
  _QWORD *BroadcastedOperandsType;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v29[2];
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  void *v33;
  uint64_t v34;
  _QWORD v35[6];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v36[0] = a4;
  v36[1] = a5;
  if (a5 != 5)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 3) + 8) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v36, 4) + 8) & 0xFFFFFFFFFFFFFFF8;
  v33 = v35;
  v35[0] = v13;
  v35[1] = v14;
  v35[2] = v15;
  v35[3] = v16;
  v35[4] = v17;
  v34 = 0x600000005;
  v30 = v32;
  v31 = 0x300000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, 5uLL, 16);
  v18 = v31;
  v19 = v30;
  v20 = (char *)v30 + 16 * v31;
  v20[2] = xmmword_1E0E557D8;
  v20[3] = *(_OWORD *)&off_1E0E557E8;
  *v20 = xmmword_1E0E557B8;
  v20[1] = *(_OWORD *)&off_1E0E557C8;
  v20[4] = xmmword_1E0E557F8;
  v21 = (v18 + 5);
  LODWORD(v31) = v18 + 5;
  mlir::ValueRange::ValueRange(v29, (uint64_t)v33, v34);
  if (v23)
  {
    v24 = BroadcastedOperandsType;
    v25 = *(unsigned int *)(a11 + 8);
    if (v25 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
    ++*(_DWORD *)(a11 + 8);
    v26 = 1;
    v27 = v30;
    if (v30 == v32)
      goto LABEL_7;
  }
  else
  {
    v26 = 0;
    v27 = v30;
    if (v30 == v32)
      goto LABEL_7;
  }
  free(v27);
LABEL_7:
  if (v33 != v35)
    free(v33);
  return v26;
}

_QWORD *mlir::mps::`anonymous namespace'::getBroadcastedOperandsType(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t BroadcastedType;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v18;
  _QWORD *v19;

  v11 = (_QWORD *)mlir::TypeRange::dereference_iterator(a5, 0);
  v19 = v11;
  if (a6 >= 2)
  {
    v12 = 1;
    v13 = (_QWORD *)mlir::TypeRange::dereference_iterator(a5, 1);
    BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v11, v13, 0);
    if (BroadcastedType)
    {
      v15 = 2;
      while (1)
      {
        v11 = (_QWORD *)BroadcastedType;
        if (a6 == v15)
          break;
        v16 = (_QWORD *)mlir::TypeRange::dereference_iterator(a5, v15);
        BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v11, v16, 0);
        ++v15;
        if (!BroadcastedType)
        {
          v12 = v15 - 1;
          goto LABEL_8;
        }
      }
      v19 = (_QWORD *)BroadcastedType;
    }
    else
    {
      v11 = v19;
LABEL_8:
      v19 = v11;
      v18 = mlir::TypeRange::dereference_iterator(a5, v12);
      mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(a1, a2, "output type ", (uint64_t *)&v19, " and ", a3 + 16 * v12, " type ", (uint64_t *)&v18, " are not broadcast compatible");
      return 0;
    }
  }
  return v11;
}

uint64_t mlir::mps::NormalizationOp::verify(uint64_t **this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  void *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  unint64_t v48[2];
  void *v49;
  uint64_t v50;
  _BYTE v51[16];
  __int16 v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  _QWORD v58[12];
  void *v59;
  _QWORD *v60;
  void *__p;
  _QWORD **v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8)
    && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8), v2))
  {
    v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8)
      && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8), v3))
    {
      v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8)
        && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8), v4))
      {
        v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8)
          && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8), v5))
        {
          v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8))
          {
            mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
            if (v6)
            {
              v53 = &v55;
              v55 = v2;
              v56 = v3;
              v57 = v4;
              v58[0] = v5;
              v58[1] = v6;
              v54 = 0x600000005;
              v49 = v51;
              v50 = 0x300000000;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, 5uLL, 16);
              v7 = v50;
              v8 = v49;
              v9 = (char *)v49 + 16 * v50;
              v9[2] = xmmword_1E0E557D8;
              v9[3] = *(_OWORD *)&off_1E0E557E8;
              *v9 = xmmword_1E0E557B8;
              v9[1] = *(_OWORD *)&off_1E0E557C8;
              v9[4] = xmmword_1E0E557F8;
              v10 = (v7 + 5);
              LODWORD(v50) = v7 + 5;
              v11 = (*this)[3];
              mlir::ValueRange::ValueRange(v48, (uint64_t)v53, v54);
              v13 = v12;
              if (v49 != v51)
                free(v49);
              v14 = v53;
              if (v53 == &v55)
                return v13;
LABEL_88:
              free(v14);
              return v13;
            }
          }
          v49 = "invalid type for beta.";
          v52 = 259;
          mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
          v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          if (v53)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
          if (v63)
          {
            v41 = (_QWORD **)__p;
            if (__p)
            {
              v42 = v62;
              v43 = __p;
              if (v62 != __p)
              {
                do
                  v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
                while (v42 != v41);
                v43 = __p;
              }
              v62 = v41;
              operator delete(v43);
            }
            v18 = v59;
            if (v59)
            {
              v44 = v60;
              v20 = v59;
              if (v60 == v59)
                goto LABEL_86;
              do
              {
                v46 = (void *)*--v44;
                v45 = v46;
                *v44 = 0;
                if (v46)
                  operator delete[](v45);
              }
              while (v44 != v18);
              goto LABEL_85;
            }
            goto LABEL_87;
          }
        }
        else
        {
          v49 = "invalid type for gamma.";
          v52 = 259;
          mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
          v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          if (v53)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
          if (v63)
          {
            v35 = (_QWORD **)__p;
            if (__p)
            {
              v36 = v62;
              v37 = __p;
              if (v62 != __p)
              {
                do
                  v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
                while (v36 != v35);
                v37 = __p;
              }
              v62 = v35;
              operator delete(v37);
            }
            v18 = v59;
            if (v59)
            {
              v38 = v60;
              v20 = v59;
              if (v60 == v59)
                goto LABEL_86;
              do
              {
                v40 = (void *)*--v38;
                v39 = v40;
                *v38 = 0;
                if (v40)
                  operator delete[](v39);
              }
              while (v38 != v18);
              goto LABEL_85;
            }
            goto LABEL_87;
          }
        }
      }
      else
      {
        v49 = "invalid type for variance.";
        v52 = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
        if (v53)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
        if (v63)
        {
          v29 = (_QWORD **)__p;
          if (__p)
          {
            v30 = v62;
            v31 = __p;
            if (v62 != __p)
            {
              do
                v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
              while (v30 != v29);
              v31 = __p;
            }
            v62 = v29;
            operator delete(v31);
          }
          v18 = v59;
          if (v59)
          {
            v32 = v60;
            v20 = v59;
            if (v60 == v59)
              goto LABEL_86;
            do
            {
              v34 = (void *)*--v32;
              v33 = v34;
              *v32 = 0;
              if (v34)
                operator delete[](v33);
            }
            while (v32 != v18);
            goto LABEL_85;
          }
          goto LABEL_87;
        }
      }
    }
    else
    {
      v49 = "invalid type for mean.";
      v52 = 259;
      mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
      if (v53)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
      if (v63)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v62;
          v25 = __p;
          if (v62 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v62 = v23;
          operator delete(v25);
        }
        v18 = v59;
        if (v59)
        {
          v26 = v60;
          v20 = v59;
          if (v60 == v59)
            goto LABEL_86;
          do
          {
            v28 = (void *)*--v26;
            v27 = v28;
            *v26 = 0;
            if (v28)
              operator delete[](v27);
          }
          while (v26 != v18);
          goto LABEL_85;
        }
        goto LABEL_87;
      }
    }
  }
  else
  {
    v49 = "invalid type for input.";
    v52 = 259;
    mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if (v53)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    if (v63)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v62;
        v17 = __p;
        if (v62 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v62 = v15;
        operator delete(v17);
      }
      v18 = v59;
      if (v59)
      {
        v19 = v60;
        v20 = v59;
        if (v60 == v59)
          goto LABEL_86;
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
LABEL_85:
        v20 = v59;
LABEL_86:
        v60 = v18;
        operator delete(v20);
      }
LABEL_87:
      v14 = v56;
      if (v56 == v58)
        return v13;
      goto LABEL_88;
    }
  }
  return v13;
}

uint64_t mlir::mps::InstanceNormOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char PositiveAxes;
  const void **v36;
  const void ***v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  const void **v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  void *v48[2];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v41 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  v40 = v6;
  if (v3)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v42 = (const void **)"input and axes type must be a tensor type";
    LOWORD(v45[0]) = 259;
    mlir::OpState::emitOpError(this, &v42, (uint64_t)v48);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
    if (v48[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
    if (!v56)
      return v10;
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v55;
      v13 = __p;
      if (v55 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v55 = v11;
      operator delete(v13);
    }
    v14 = v52;
    if (!v52)
      goto LABEL_60;
    v15 = v53;
    v16 = v52;
    if (v53 == v52)
      goto LABEL_59;
    do
    {
      v18 = (void *)*--v15;
      v17 = v18;
      *v15 = 0;
      if (v18)
        operator delete[](v17);
    }
    while (v15 != v14);
    goto LABEL_58;
  }
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v40))
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
    if (v20 >= 2)
    {
      v42 = (const void **)"axes tensor must have rank 0 or 1";
      LOWORD(v45[0]) = 259;
      mlir::OpState::emitOpError(this, &v42, (uint64_t)v48);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
      if (v48[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
      if (!v56)
        return v10;
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v55;
        v23 = __p;
        if (v55 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v55 = v21;
        operator delete(v23);
      }
      v14 = v52;
      if (!v52)
        goto LABEL_60;
      v24 = v53;
      v16 = v52;
      if (v53 == v52)
      {
LABEL_59:
        v53 = v14;
        operator delete(v16);
LABEL_60:
        v36 = (const void **)v50;
        if (v50 != &v51)
        {
LABEL_61:
          free(v36);
          return v10;
        }
        return v10;
      }
      do
      {
        v26 = (void *)*--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v24 != v14);
LABEL_58:
      v16 = v52;
      goto LABEL_59;
    }
  }
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v40)
    || !mlir::TensorType::hasRank((mlir::TensorType *)&v41)
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40), v27 < 1)
    || (v28 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40),
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41),
        v28 <= v29))
  {
    v42 = (const void **)v44;
    v43 = 0x400000000;
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v41)
      || !mlir::matchConstantWithIntVector<long long>(*(_QWORD *)((*this)[9] + 56), (uint64_t)&v42))
    {
      goto LABEL_56;
    }
    v48[0] = &v49;
    v48[1] = (void *)0x600000000;
    v32 = (uint64_t *)v42;
    v33 = v43;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    if (v48[0] != &v49)
      free(v48[0]);
    if (!PositiveAxes)
    {
      v10 = 0;
      v36 = v42;
      if (v42 == v44)
        return v10;
    }
    else
    {
LABEL_56:
      v10 = 1;
      v36 = v42;
      if (v42 == v44)
        return v10;
    }
    goto LABEL_61;
  }
  v30 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
  v42 = (const void **)"axes tensor shape {0} is incompatible with input rank of {1}";
  v43 = 60;
  v44[0] = v47;
  v44[1] = 2;
  v45[0] = &off_1E0E23EC0;
  v45[1] = v30;
  v46[0] = &off_1E0E23EC0;
  v46[1] = v31;
  v47[0] = v45;
  v47[1] = v46;
  v39 = 263;
  v38 = &v42;
  mlir::OpState::emitOpError(this, (const void ***)&v38, (uint64_t)v48);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v48);
  return v10;
}

uint64_t mlir::mps::inferConv2DParams(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  void *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v117;
  uint64_t v118;
  _BYTE v119[64];
  void *v120;
  uint64_t v121;
  _BYTE v122[32];
  _QWORD *v123;
  uint64_t v124;
  _QWORD v125[6];

  v125[4] = *MEMORY[0x1E0C80C00];
  v123 = v125;
  v124 = 0x400000000;
  v120 = v122;
  v121 = 0x400000000;
  v117 = v119;
  v118 = 0x800000000;
  if (a5)
    mlir::getIntValues<long long>(a5, a6, (uint64_t)&v123, 1);
  if (a7)
    mlir::getIntValues<long long>(a7, a8, (uint64_t)&v120, 1);
  if (a9)
    mlir::getIntValues<long long>(a9, a10, (uint64_t)&v117, 1);
  if (!(_DWORD)v121)
  {
LABEL_11:
    v22 = a15;
    v23 = (uint64_t)a13;
    if (a11 != 1)
    {
      if (a11)
      {
        v32 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, "Unsupported dataLayout");
        v33 = v117;
        if (v117 == v119)
          goto LABEL_145;
        goto LABEL_144;
      }
      v24 = a13[2];
      if ((_DWORD)v24 == 4)
      {
        v25 = *(unsigned int *)(a14 + 8);
        v26 = v25 > 2;
        if ((_DWORD)v25 == 2)
          goto LABEL_15;
LABEL_45:
        if (v26)
        {
          *(_DWORD *)(a14 + 8) = 2;
          v27 = *(unsigned int *)(v22 + 8);
          v28 = v27 > 2;
          if ((_DWORD)v27 != 2)
            goto LABEL_59;
        }
        else
        {
          v110 = v23;
          v48 = v25;
          v49 = v25;
          if (*(_DWORD *)(a14 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a14, (void *)(a14 + 16), 2uLL, 8);
            v48 = *(unsigned int *)(a14 + 8);
            v49 = *(_DWORD *)(a14 + 8);
          }
          memset_pattern16((void *)(*(_QWORD *)a14 + 8 * v48), &unk_181233190, 16 - 8 * v25);
          v23 = v110;
          *(_DWORD *)(a14 + 8) = v49 - v25 + 2;
          v27 = *(unsigned int *)(v22 + 8);
          v28 = v27 > 2;
          if ((_DWORD)v27 != 2)
            goto LABEL_59;
        }
LABEL_16:
        if (*(_DWORD *)(a12 + 12) <= 3u)
          goto LABEL_17;
LABEL_72:
        if (!a4)
          goto LABEL_77;
        goto LABEL_73;
      }
      if (v24 <= 4)
      {
        v42 = a13[2];
        v43 = a13[2];
        if (a13[3] <= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a13, a13 + 4, 4uLL, 8);
          v23 = (uint64_t)a13;
          v42 = a13[2];
          v43 = a13[2];
        }
        v44 = v23;
        bzero((void *)(*(_QWORD *)v23 + 8 * v42), 32 - 8 * v24);
        v23 = v44;
        v22 = a15;
        *(_DWORD *)(v23 + 8) = v43 - v24 + 4;
        v25 = *(unsigned int *)(a14 + 8);
        v26 = v25 > 2;
        if ((_DWORD)v25 != 2)
          goto LABEL_45;
      }
      else
      {
        a13[2] = 4;
        v25 = *(unsigned int *)(a14 + 8);
        v26 = v25 > 2;
        if ((_DWORD)v25 != 2)
          goto LABEL_45;
      }
LABEL_15:
      v27 = *(unsigned int *)(v22 + 8);
      v28 = v27 > 2;
      if ((_DWORD)v27 == 2)
        goto LABEL_16;
LABEL_59:
      if (v28)
      {
        *(_DWORD *)(v22 + 8) = 2;
        if (*(_DWORD *)(a12 + 12) > 3u)
          goto LABEL_72;
      }
      else
      {
        v112 = v23;
        v53 = v27;
        v54 = v27;
        if (*(_DWORD *)(v22 + 12) <= 1u)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(v22 + 16), 2uLL, 8);
          v53 = *(unsigned int *)(v22 + 8);
          v54 = *(_DWORD *)(v22 + 8);
        }
        memset_pattern16((void *)(*(_QWORD *)v22 + 8 * v53), &unk_181233190, 16 - 8 * v27);
        v23 = v112;
        *(_DWORD *)(v22 + 8) = v54 - v27 + 2;
        if (*(_DWORD *)(a12 + 12) > 3u)
          goto LABEL_72;
      }
LABEL_17:
      v29 = v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a12, (void *)(a12 + 16), 4uLL, 8);
      v23 = v29;
      if (!a4)
        goto LABEL_77;
LABEL_73:
      v55 = (void *)(a12 + 16);
      v56 = *(_DWORD *)(a12 + 8);
      v57 = 8 * a4;
      do
      {
        v58 = *a3;
        if (v56 >= *(_DWORD *)(a12 + 12))
        {
          v109 = v22;
          v113 = v23;
          v59 = v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a12, v55, v56 + 1, 8);
          v55 = v59;
          v23 = v113;
          v22 = v109;
          v56 = *(_DWORD *)(a12 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a12 + 8 * v56) = v58;
        v56 = *(_DWORD *)(a12 + 8) + 1;
        *(_DWORD *)(a12 + 8) = v56;
        ++a3;
        v57 -= 8;
      }
      while (v57);
LABEL_77:
      if (a5 && (_DWORD)v124)
      {
        v60 = 0;
        v61 = v123;
        v62 = *(_QWORD **)a14;
        v63 = *(_QWORD *)a14 + 8;
        v64 = 8 * v124;
        while (2)
        {
          v66 = v61[v60];
          v65 = v62;
          switch((int)v60)
          {
            case 0:
              if (v66 == 1)
                goto LABEL_82;
              v30 = "stride != 1 not supported for dim 3 of NCHW";
              goto LABEL_20;
            case 1:
              if (v66 == 1)
                goto LABEL_82;
              v30 = "stride != 1 not supported for dim 2 of NCHW";
              goto LABEL_20;
            case 2:
              goto LABEL_81;
            case 3:
              v65 = (_QWORD *)v63;
LABEL_81:
              *v65 = v66;
LABEL_82:
              ++v60;
              v64 -= 8;
              if (v64)
                continue;
              goto LABEL_88;
            default:
              v30 = "stride attr num dimensions should be <= 4";
              goto LABEL_20;
          }
        }
      }
LABEL_88:
      if (a7 && (_DWORD)v121)
      {
        v67 = 0;
        v68 = v120;
        v69 = *(_QWORD **)v22;
        v70 = *(_QWORD *)v22 + 8;
        v71 = 8 * v121;
        while (2)
        {
          v73 = v68[v67];
          v72 = v69;
          switch((int)v67)
          {
            case 0:
              if (v73 != 1)
                goto LABEL_153;
              goto LABEL_93;
            case 1:
              if (v73 == 1)
                goto LABEL_93;
              v30 = "dilationRate != 1 not supported for dim 2";
              goto LABEL_20;
            case 2:
              goto LABEL_92;
            case 3:
              v72 = (_QWORD *)v70;
LABEL_92:
              *v72 = v73;
LABEL_93:
              ++v67;
              v71 -= 8;
              if (v71)
                continue;
              goto LABEL_99;
            default:
              goto LABEL_152;
          }
        }
      }
LABEL_99:
      if (a9 && (_DWORD)v118)
      {
        v74 = 0;
        v75 = v117;
        v76 = *(_QWORD **)v23;
        v77 = *(_QWORD *)v23 + 24;
        v78 = *(_QWORD *)v23 + 16;
        v79 = *(_QWORD *)v23 + 8;
        v80 = 8 * v118;
        do
        {
          v81 = v76;
          switch((int)v74)
          {
            case 4:
              goto LABEL_103;
            case 5:
              v81 = (_QWORD *)v79;
              goto LABEL_103;
            case 6:
              v81 = (_QWORD *)v78;
              goto LABEL_103;
            case 7:
              v81 = (_QWORD *)v77;
LABEL_103:
              *v81 = *(_QWORD *)&v75[8 * v74];
              break;
            default:
              break;
          }
          ++v74;
          v80 -= 8;
        }
        while (v80);
        goto LABEL_150;
      }
      goto LABEL_143;
    }
    v34 = *(_DWORD *)(a12 + 8);
    if (v34 == 4)
    {
      v35 = a13[2];
      v36 = v35 > 4;
      if ((_DWORD)v35 == 4)
        goto LABEL_25;
    }
    else
    {
      if (v34 <= 4)
      {
        if (*(_DWORD *)(a12 + 12) > 3u
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a12, (void *)(a12 + 16), 4uLL, 8),
              v23 = (uint64_t)a13,
              v34 = *(_DWORD *)(a12 + 8),
              v34 != 4))
        {
          v41 = v23;
          bzero((void *)(*(_QWORD *)a12 + 8 * v34), 32 - 8 * v34);
          v23 = v41;
        }
      }
      *(_DWORD *)(a12 + 8) = 4;
      v35 = *(unsigned int *)(v23 + 8);
      v36 = v35 > 4;
      if ((_DWORD)v35 == 4)
      {
LABEL_25:
        v37 = *(unsigned int *)(a14 + 8);
        v38 = v37 > 2;
        if ((_DWORD)v37 == 2)
          goto LABEL_26;
LABEL_52:
        if (v38)
        {
          *(_DWORD *)(a14 + 8) = 2;
          v39 = *(unsigned int *)(v22 + 8);
          v40 = v39 > 2;
          if ((_DWORD)v39 == 2)
            goto LABEL_112;
        }
        else
        {
          v111 = v23;
          v50 = v37;
          v51 = v37;
          if (*(_DWORD *)(a14 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a14, (void *)(a14 + 16), 2uLL, 8);
            v50 = *(unsigned int *)(a14 + 8);
            v51 = *(_DWORD *)(a14 + 8);
          }
          memset_pattern16((void *)(*(_QWORD *)a14 + 8 * v50), &unk_181233190, 16 - 8 * v37);
          v23 = v111;
          *(_DWORD *)(a14 + 8) = v51 - v37 + 2;
          v39 = *(unsigned int *)(v22 + 8);
          v40 = v39 > 2;
          if ((_DWORD)v39 == 2)
          {
LABEL_112:
            v84 = *(uint64_t **)a12;
            *v84 = *a3;
            v84[1] = a3[3];
            v84[2] = a3[1];
            v84[3] = a3[2];
            if (a5 && (_DWORD)v124)
            {
              v85 = 0;
              v86 = v123;
              v87 = *(_QWORD **)a14;
              v88 = *(_QWORD *)a14 + 8;
              v89 = 8 * v124;
              while (1)
              {
                v91 = v86[v85];
                v90 = v87;
                switch((int)v85)
                {
                  case 0:
                    if (v91 == 1)
                      goto LABEL_117;
                    v30 = "stride != 1 not supported for dim 3";
                    goto LABEL_20;
                  case 1:
                    goto LABEL_116;
                  case 2:
                    v90 = (_QWORD *)v88;
LABEL_116:
                    *v90 = v91;
                    goto LABEL_117;
                  case 3:
                    if (v91 != 1)
                    {
                      v30 = "stride != 1 not supported for dim 0";
                      goto LABEL_20;
                    }
LABEL_117:
                    ++v85;
                    v89 -= 8;
                    if (!v89)
                      goto LABEL_123;
                    break;
                  default:
                    v31 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, "stride num dimensions should be <= 4");
                    goto LABEL_21;
                }
              }
            }
LABEL_123:
            if (a7 && (_DWORD)v121)
            {
              v92 = 0;
              v93 = v120;
              v94 = *(_QWORD **)v22;
              v95 = *(_QWORD *)v22 + 8;
              v96 = 8 * v121;
              while (1)
              {
                v98 = v93[v92];
                v97 = v94;
                switch((int)v92)
                {
                  case 0:
                    if (v98 == 1)
                      goto LABEL_128;
LABEL_153:
                    v30 = "dilationRate != 1 not supported for dim 3";
                    goto LABEL_20;
                  case 1:
                    goto LABEL_127;
                  case 2:
                    v97 = (_QWORD *)v95;
LABEL_127:
                    *v97 = v98;
                    goto LABEL_128;
                  case 3:
                    if (v98 != 1)
                    {
                      v30 = "dilationRate != 1 not supported for dim 0";
                      goto LABEL_20;
                    }
LABEL_128:
                    ++v92;
                    v96 -= 8;
                    if (!v96)
                      goto LABEL_134;
                    break;
                  default:
LABEL_152:
                    v31 = mlir::emitOptionalError<char const(&)[43]>(a1, a2, "dilationRate num dimensions should be <= 4");
                    goto LABEL_21;
                }
              }
            }
LABEL_134:
            if (a9 && (_DWORD)v118)
            {
              v99 = 0;
              v100 = v117;
              v101 = *(_QWORD **)v23;
              v102 = *(_QWORD *)v23 + 24;
              v103 = *(_QWORD *)v23 + 16;
              v104 = *(_QWORD *)v23 + 8;
              v105 = 8 * v118;
              do
              {
                v106 = v101;
                switch((int)v99)
                {
                  case 2:
                    goto LABEL_138;
                  case 3:
                    v106 = (_QWORD *)v104;
                    goto LABEL_138;
                  case 4:
                    v106 = (_QWORD *)v103;
                    goto LABEL_138;
                  case 5:
                    v106 = (_QWORD *)v102;
LABEL_138:
                    *v106 = *(_QWORD *)&v100[8 * v99];
                    break;
                  default:
                    break;
                }
                ++v99;
                v105 -= 8;
              }
              while (v105);
LABEL_150:
              v32 = 1;
              v33 = v117;
              if (v117 == v119)
                goto LABEL_145;
LABEL_144:
              free(v33);
              goto LABEL_145;
            }
LABEL_143:
            v32 = 1;
            v33 = v117;
            if (v117 == v119)
              goto LABEL_145;
            goto LABEL_144;
          }
        }
LABEL_66:
        if (v40)
        {
          v52 = 2;
        }
        else
        {
          v114 = v23;
          v82 = v39;
          v83 = v39;
          if (*(_DWORD *)(v22 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(v22 + 16), 2uLL, 8);
            v82 = *(unsigned int *)(v22 + 8);
            v83 = *(_DWORD *)(v22 + 8);
          }
          memset_pattern16((void *)(*(_QWORD *)v22 + 8 * v82), &unk_181233190, 16 - 8 * v39);
          v52 = v83 - v39 + 2;
          v23 = v114;
        }
        *(_DWORD *)(v22 + 8) = v52;
        goto LABEL_112;
      }
    }
    if (v36)
    {
      *(_DWORD *)(v23 + 8) = 4;
      v37 = *(unsigned int *)(a14 + 8);
      v38 = v37 > 2;
      if ((_DWORD)v37 != 2)
        goto LABEL_52;
    }
    else
    {
      v45 = v35;
      v46 = v35;
      if (*(_DWORD *)(v23 + 12) <= 3u)
      {
        v108 = v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v23, (void *)(v23 + 16), 4uLL, 8);
        v23 = v108;
        v45 = *(unsigned int *)(v108 + 8);
        v46 = *(_DWORD *)(v108 + 8);
      }
      v47 = v23;
      bzero((void *)(*(_QWORD *)v23 + 8 * v45), 32 - 8 * v35);
      v23 = v47;
      v22 = a15;
      *(_DWORD *)(v23 + 8) = v46 - v35 + 4;
      v37 = *(unsigned int *)(a14 + 8);
      v38 = v37 > 2;
      if ((_DWORD)v37 != 2)
        goto LABEL_52;
    }
LABEL_26:
    v39 = *(unsigned int *)(v22 + 8);
    v40 = v39 > 2;
    if ((_DWORD)v39 == 2)
      goto LABEL_112;
    goto LABEL_66;
  }
  v20 = (uint64_t *)v120;
  v21 = 8 * v121;
  while (*v20 > 0)
  {
    ++v20;
    v21 -= 8;
    if (!v21)
      goto LABEL_11;
  }
  v30 = "dilationRate must be > 0 for all dimensions";
LABEL_20:
  v31 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, v30);
LABEL_21:
  v32 = v31;
  v33 = v117;
  if (v117 != v119)
    goto LABEL_144;
LABEL_145:
  if (v120 != v122)
    free(v120);
  if (v123 != v125)
    free(v123);
  return v32;
}

uint64_t mlir::mps::Conv2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t Context;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *ArgAttrsAttr;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t ElementTypeOrSelf;
  uint64_t v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  int v58;
  int v59;
  void *v60;
  uint64_t v61;
  void *__p[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73[2];
  _BYTE v74[16];
  void *v75[2];
  _BYTE v76[16];
  void *v77[2];
  _BYTE v78[32];
  void *v79[2];
  _BYTE v80[32];
  uint64_t v81;
  char v82[8];
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v92 = a4;
  v93 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v19 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v81 = a6;
  v82[0] = 0;
  v83 = 0;
  v84 = v16;
  v85 = v17;
  v86 = v18;
  v87 = v19;
  v88 = a9;
  v20 = a5;
  v89 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v81);
    if (v83)
      v83 = 0;
    mlir::OperationName::OperationName(v82, "mps.conv_2d", 11, Context);
    v83 = 1;
    v20 = v93;
  }
  v90 = a4;
  v91 = a5;
  if (v20 >= 2
    && (v22 = mlir::UnknownLoc::get(this, a2), mlir::mps::Conv2DOpAdaptor::verify(&v81, v22)))
  {
    v24 = (_QWORD *)*((_QWORD *)&v84 + 1);
    v23 = (_QWORD *)v85;
    v25 = (_QWORD *)*((_QWORD *)&v86 + 1);
    v79[0] = *((void **)&v85 + 1);
    mlir::IntegerAttr::getValue(v79, (llvm::APInt *)__p);
    if (LODWORD(__p[1]) > 0x40)
    {
      v60 = *(void **)__p[0];
      operator delete[](__p[0]);
    }
    else
    {
      v60 = __p[0];
    }
    v29 = *(_DWORD *)(v84 + 8);
    v58 = *(_DWORD *)(v87 + 8);
    v59 = *(_DWORD *)(v86 + 8);
    v30 = mlir::ValueRange::dereference_iterator(&v92, 0);
    v57 = mlir::ValueRange::dereference_iterator(&v92, 1);
    v31 = (_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
    {
      v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
      v71 = v31;
      v72 = v32;
      if (v31 && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71) & 1) != 0)
      {
        ArgAttrsAttr = operator new(0x20uLL);
        v34 = ArgAttrsAttr;
        *ArgAttrsAttr = 0u;
        ArgAttrsAttr[1] = 0u;
        if (v71)
        {
          ArgAttrsAttr = (_OWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
          if (v35 != 4)
          {
            v36 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DOp input should be rank 4");
LABEL_50:
            operator delete(v34);
            return v36;
          }
        }
        v55 = (uint64_t *)ArgAttrsAttr;
        v79[0] = v80;
        v79[1] = (void *)0x400000000;
        v77[0] = v78;
        v77[1] = (void *)0x400000000;
        v75[0] = v76;
        v75[1] = (void *)0x200000000;
        v73[0] = v74;
        v73[1] = (void *)0x200000000;
        if (v25)
        {
          v54 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8);
          v56 = v34;
          if (v24)
            goto LABEL_33;
        }
        else
        {
          v54 = 0;
          v56 = v34;
          if (v24)
          {
LABEL_33:
            v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8);
            if (v23)
            {
LABEL_34:
              v43 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v23 + 8);
              goto LABEL_38;
            }
LABEL_37:
            v43 = 0;
            if (!mlir::mps::inferConv2DParams((uint64_t)a2, a3, v55, 4, (uint64_t)v25, v54, (uint64_t)v24, v42, (uint64_t)v23, v43, v29, (uint64_t)v79, (unsigned int *)v77, (uint64_t)v75, (uint64_t)v73))goto LABEL_41;
LABEL_38:
            v44 = *((_QWORD *)v77[0] + 3);
            v45 = *(_QWORD *)v77[0];
            v46 = *((_QWORD *)v77[0] + 1);
            v48 = *(_QWORD *)v75[0];
            v47 = *((_QWORD *)v75[0] + 1);
            v50 = *(_QWORD *)v73[0];
            v49 = *((_QWORD *)v73[0] + 1);
            v70 = 0;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            *(_OWORD *)__p = 0u;
            v63 = 0u;
            mlir::mps::buildConv2DDescriptor(v30, v57, (uint64_t)v60, v47, v48, v49, v50, (uint64_t)__p, v44, v45, v46, v59, v29, v58, 0, 0, 0, 0);
            v61 = 0;
            v51 = (void *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v92, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
            v52 = mlir::ValueRange::dereference_iterator(&v92, 1);
            {
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)a11, v61);
              v36 = 1;
            }
            else
            {
LABEL_41:
              ElementTypeOrSelf = mlir::getElementTypeOrSelf(v30);
            }
            v34 = v56;
            if (v73[0] != v74)
              free(v73[0]);
            if (v75[0] != v76)
              free(v75[0]);
            if (v77[0] != v78)
              free(v77[0]);
            if (v79[0] != v80)
              free(v79[0]);
            goto LABEL_50;
          }
        }
        v42 = 0;
        if (v23)
          goto LABEL_34;
        goto LABEL_37;
      }
    }
    else
    {
      v71 = 0;
      v72 = 0;
    }
    v37 = mlir::getElementTypeOrSelf(v30);
    if (!v37)
      v37 = mlir::Float32Type::get(this, v38);
    v39 = mlir::UnrankedTensorType::get(v37);
    v40 = a11[2];
    if (v40 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v40 + 1, 8);
      v40 = a11[2];
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v40) = v39;
  }
  else
  {
    v26 = mlir::Float32Type::get(this, a2);
    v27 = mlir::UnrankedTensorType::get(v26);
    v28 = a11[2];
    if (v28 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v28 + 1, 8);
      LODWORD(v28) = a11[2];
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v27;
  }
  ++a11[2];
  return 1;
}

uint64_t mlir::mps::Conv2DOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  uint64_t Value;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                v62 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                  v62 = v5;
                  v63 = v6;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v8 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v8;
                  v68 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (v60 = v5,
                        *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((_QWORD *)&v66 + 1) = v11,
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                    v62 = v3;
                    v63 = v12;
                    v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    v14 = v13;
                    if (v13)
                      v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    Value = (uint64_t)v14;
                    v68 = v13;
                    v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (v60 = v3,
                          *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((_QWORD *)&v66 + 1) = v17,
                          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                      v62 = v4;
                      v63 = v18;
                      v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      v20 = v19;
                      if (v19)
                        v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      Value = (uint64_t)v20;
                      v68 = v19;
                      v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v66 = xmmword_181240890;
                      if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                      {
                        v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                          return 1;
                      }
                      v59 = "'mps.conv_2d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements at"
                            "tribute of shape {4, 2}";
                    }
                    else
                    {
                      v59 = "'mps.conv_2d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attr"
                            "ibute of shape {4}";
                    }
                  }
                  else
                  {
                    v59 = "'mps.conv_2d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
                  }
                }
                else
                {
                  v59 = "'mps.conv_2d' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
                }
              }
              else
              {
                v59 = "'mps.conv_2d' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v59 = "'mps.conv_2d' op requires attribute 'strides'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          v62 = "'mps.conv_2d' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_99:
            v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          v62 = "'mps.conv_2d' op requires attribute 'groups'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_100;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        v62 = "'mps.conv_2d' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_101;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_100;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      v62 = "'mps.conv_2d' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_101;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_100;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    v62 = "'mps.conv_2d' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_101;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_100;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

uint64_t mlir::mps::`anonymous namespace'::inferConv2DReturnType(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *ArgAttrsAttr;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  unint64_t v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v22 = a4;
  mlir::ValueRange::ValueRange(v24, (uint64_t)&v21, 2uLL);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a3 + 8))
  {
    v19 = 0;
    v20 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped inputType");
  }
  v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a3 + 8);
  v19 = a3;
  v20 = v13;
  if (!a3)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped inputType");
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a4 + 8))
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped weightsType");
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a4 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a6 = mlir::UnrankedTensorType::get(v12);
    return 1;
  }
  else
  {
    v21 = v23;
    v22 = 0x400000000;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    {
      *a6 = mlir::RankedTensorType::get((uint64_t)v21, v22, v12, 0);
      v16 = 1;
      v17 = v21;
      if (v21 == v23)
        return v16;
      goto LABEL_14;
    }
    v16 = 0;
    v17 = v21;
    if (v21 != v23)
LABEL_14:
      free(v17);
  }
  return v16;
}

uint64_t mlir::mps::Conv2DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t Context;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int32x2_t v45;
  int32x2_t v46;
  _BYTE *v47;
  uint64_t ArgAttrsAttr;
  uint64_t v49;
  char v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t UInt;
  int v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD v69[2];
  uint64_t v70;
  __int128 v71;
  _QWORD v72[2];
  __int128 v73;
  uint64_t v74;
  char v75[8];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87[2];
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[32];
  void *v92;
  uint64_t v93;
  _BYTE v94[40];
  void *v95[2];
  _BYTE v96[16];
  void *v97[2];
  _BYTE v98[16];
  void *v99[2];
  _BYTE v100[32];
  void *v101[2];
  _BYTE v102[32];
  _OWORD *v103;
  uint64_t v104;
  _OWORD v105[2];
  uint64_t *v106;
  uint64_t v107;
  _BYTE v108[32];
  unint64_t v109[4];

  v109[2] = *MEMORY[0x1E0C80C00];
  v85 = a4;
  v86 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v19 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v74 = a6;
  v75[0] = 0;
  v76 = 0;
  v77 = v16;
  v78 = v17;
  v79 = v18;
  v80 = v19;
  v81 = a9;
  v20 = a5;
  v82 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76)
      v76 = 0;
    mlir::OperationName::OperationName(v75, "mps.conv_2d_data_gradient", 25, Context);
    v76 = 1;
    v20 = v86;
  }
  v83 = a4;
  v84 = a5;
  if (v20 < 2
    || (v22 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv2DDataGradientOpAdaptor::verify(&v74, v22)))
  {
    v32 = mlir::Float32Type::get(this, a2);
LABEL_28:
    v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_29;
  }
  v23 = mlir::ValueRange::dereference_iterator(&v85, 0);
  v24 = mlir::ValueRange::dereference_iterator(&v85, 1);
  v25 = 0;
  if (v86 == 3)
    v25 = mlir::ValueRange::dereference_iterator(&v85, 2);
  v26 = v77;
  v27 = v78;
  v68 = (_QWORD *)*((_QWORD *)&v77 + 1);
  v66 = v80;
  v67 = v79;
  v28 = (_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v28)
  {
    v29 = 0;
    v30 = (_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v30)
      goto LABEL_14;
LABEL_17:
    v31 = 0;
    goto LABEL_18;
  }
  v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
  v30 = (_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_17;
LABEL_14:
  v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
LABEL_18:
  *(_QWORD *)&v73 = v28;
  *((_QWORD *)&v73 + 1) = v29;
  v72[0] = v30;
  v72[1] = v31;
  v71 = v73;
  v92 = v28;
  v93 = (uint64_t)v30;
  mlir::ValueRange::ValueRange(v109, (uint64_t)&v92, 2uLL);
  if (!v28
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)
    || !v72[0]
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72) & 1) == 0)
  {
    v32 = v33;
    goto LABEL_28;
  }
  v106 = (uint64_t *)v108;
  v107 = 0x400000000;
  if (!v25)
  {
    v70 = *((_QWORD *)&v27 + 1);
    v47 = v105;
    v103 = v105;
    memset(v105, 0, sizeof(v105));
    v104 = 0x400000004;
    if ((_QWORD)v71)
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
      if (v49 != 4)
      {
        v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DDataGradientOp input should be rank 4");
        v42 = 0;
LABEL_99:
        v55 = v103;
        goto LABEL_100;
      }
      v64 = (uint64_t *)ArgAttrsAttr;
    }
    else
    {
      v64 = (uint64_t *)v105;
    }
    v101[0] = v102;
    v101[1] = (void *)0x400000000;
    v99[0] = v100;
    v99[1] = (void *)0x400000000;
    v97[0] = v98;
    v97[1] = (void *)0x200000000;
    v95[0] = v96;
    v95[1] = (void *)0x200000000;
    if (v26)
      v51 = *(_DWORD *)(v26 + 8);
    else
      v51 = 1;
    v65 = v51;
    if (*((_QWORD *)&v67 + 1))
    {
      v56 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v67 + 1) + 8);
    }
    else
    {
      *((_QWORD *)&v67 + 1) = 0;
      v56 = 0;
    }
    if (v68)
    {
      v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v68 + 8);
    }
    else
    {
      v68 = 0;
      v57 = 0;
    }
    if ((_QWORD)v27)
      v58 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v27 + 8);
    else
      v58 = 0;
    if (mlir::mps::inferConv2DParams((uint64_t)a2, a3, v64, 4, *((uint64_t *)&v67 + 1), v56, (uint64_t)v68, v57, v27, v58, v65, (uint64_t)v101, (unsigned int *)v99, (uint64_t)v97, (uint64_t)v95))
    {
      if (v70)
        UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v70);
      else
        UInt = 1;
      if (v66)
        v60 = *(_DWORD *)(v66 + 8);
      else
        v60 = 3;
      if ((_QWORD)v67)
        v61 = *(_DWORD *)(v67 + 8);
      else
        v61 = 2;
      v69[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
      v69[1] = v62;
      if (v62 == 4)
      {
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)&v92, (uint64_t)v69, v60);
        v89 = v91;
        v90 = 0x400000000;
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)v87, (uint64_t)&v92);
        if (v87[0] != &v88)
          free(v87[0]);
        if (v63)
        {
          v42 = mlir::RankedTensorType::get((uint64_t)v89, v90, v33, 0);
          v50 = 1;
        }
        else
        {
          v42 = 0;
          v50 = 0;
        }
        v47 = v105;
        if (v89 != v91)
          free(v89);
        if (v92 != v94)
          free(v92);
      }
      else
      {
        v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2dGradient weights should be rank 4");
        v42 = 0;
        v47 = v105;
      }
    }
    else
    {
      v42 = 0;
      v50 = 0;
    }
    if (v95[0] != v96)
      free(v95[0]);
    if (v97[0] != v98)
      free(v97[0]);
    if (v99[0] != v100)
      free(v99[0]);
    if (v101[0] != v102)
      free(v101[0]);
    goto LABEL_99;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v25, (uint64_t)&v106))
  {
    v42 = mlir::UnrankedTensorType::get(v33);
    v50 = 1;
    goto LABEL_102;
  }
  v34 = v107;
  if (!(_DWORD)v107)
    goto LABEL_50;
  v35 = v106;
  v36 = (v107 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v37 = v106;
  if (v36 >= 3)
  {
    v38 = v36 + 1;
    v37 = &v106[v38 & 0x3FFFFFFFFFFFFFFCLL];
    v39 = (int64x2_t *)(v106 + 2);
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if ((v45.i8[0] & 1) != 0)
      {
        v39[-1].i64[0] = 0x8000000000000000;
        if ((v45.i8[4] & 1) == 0)
          goto LABEL_35;
      }
      else if ((v45.i8[4] & 1) == 0)
      {
LABEL_35:
        v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if ((v46.i8[0] & 1) != 0)
          goto LABEL_36;
        goto LABEL_40;
      }
      v39[-1].i64[1] = 0x8000000000000000;
      v46 = vmovn_s64(vceqq_s64(*v39, v40));
      if ((v46.i8[0] & 1) != 0)
      {
LABEL_36:
        v39->i64[0] = 0x8000000000000000;
        if ((v46.i8[4] & 1) != 0)
          goto LABEL_41;
        goto LABEL_32;
      }
LABEL_40:
      if ((v46.i8[4] & 1) != 0)
LABEL_41:
        v39->i64[1] = 0x8000000000000000;
LABEL_32:
      v39 += 2;
      v41 -= 4;
      if (!v41)
      {
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
        break;
      }
    }
  }
  v54 = &v35[v34];
  do
  {
    if (*v37 == -1)
      *v37 = 0x8000000000000000;
    ++v37;
  }
  while (v37 != v54);
LABEL_50:
  v52 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  v47 = v94;
  v92 = v94;
  v93 = 0x400000000;
  {
    v42 = mlir::RankedTensorType::get((uint64_t)v92, v93, v33, 0);
    v50 = 1;
  }
  else
  {
    v42 = 0;
    v50 = 0;
  }
  v55 = v92;
LABEL_100:
  if (v55 != v47)
    free(v55);
LABEL_102:
  if (v106 != (uint64_t *)v108)
    free(v106);
  if (!v50)
    return 0;
LABEL_29:
  v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    v43 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv2DDataGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  uint64_t Value;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                v62 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                  v62 = v5;
                  v63 = v6;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v8 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v8;
                  v68 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (v60 = v5,
                        *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((_QWORD *)&v66 + 1) = v11,
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                    v62 = v3;
                    v63 = v12;
                    v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    v14 = v13;
                    if (v13)
                      v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    Value = (uint64_t)v14;
                    v68 = v13;
                    v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (v60 = v3,
                          *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((_QWORD *)&v66 + 1) = v17,
                          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                      v62 = v4;
                      v63 = v18;
                      v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      v20 = v19;
                      if (v19)
                        v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      Value = (uint64_t)v20;
                      v68 = v19;
                      v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v66 = xmmword_181240890;
                      if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                      {
                        v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                          return 1;
                      }
                      v59 = "'mps.conv_2d_data_gradient' op attribute 'explicit_padding' failed to satisfy constraint: ui"
                            "64 elements attribute of shape {4, 2}";
                    }
                    else
                    {
                      v59 = "'mps.conv_2d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: ui64"
                            " elements attribute of shape {4}";
                    }
                  }
                  else
                  {
                    v59 = "'mps.conv_2d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 elements"
                          " attribute of shape {4}";
                  }
                }
                else
                {
                  v59 = "'mps.conv_2d_data_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned "
                        "integer attribute";
                }
              }
              else
              {
                v59 = "'mps.conv_2d_data_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v59 = "'mps.conv_2d_data_gradient' op requires attribute 'strides'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          v62 = "'mps.conv_2d_data_gradient' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_99:
            v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          v62 = "'mps.conv_2d_data_gradient' op requires attribute 'groups'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_100;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        v62 = "'mps.conv_2d_data_gradient' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_101;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_100;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      v62 = "'mps.conv_2d_data_gradient' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_101;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_100;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    v62 = "'mps.conv_2d_data_gradient' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_101;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_100;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

uint64_t mlir::mps::Conv2DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t Context;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int32x2_t v45;
  int32x2_t v46;
  _BYTE *v47;
  uint64_t ArgAttrsAttr;
  uint64_t v49;
  char v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t UInt;
  int v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD v69[2];
  uint64_t v70;
  __int128 v71;
  _QWORD v72[2];
  __int128 v73;
  uint64_t v74;
  char v75[8];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87[2];
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[32];
  void *v92;
  uint64_t v93;
  _BYTE v94[40];
  void *v95[2];
  _BYTE v96[16];
  void *v97[2];
  _BYTE v98[16];
  void *v99[2];
  _BYTE v100[32];
  void *v101[2];
  _BYTE v102[32];
  _OWORD *v103;
  uint64_t v104;
  _OWORD v105[2];
  uint64_t *v106;
  uint64_t v107;
  _BYTE v108[32];
  unint64_t v109[4];

  v109[2] = *MEMORY[0x1E0C80C00];
  v85 = a4;
  v86 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v19 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v74 = a6;
  v75[0] = 0;
  v76 = 0;
  v77 = v16;
  v78 = v17;
  v79 = v18;
  v80 = v19;
  v81 = a9;
  v20 = a5;
  v82 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76)
      v76 = 0;
    mlir::OperationName::OperationName(v75, "mps.conv_2d_weights_gradient", 28, Context);
    v76 = 1;
    v20 = v86;
  }
  v83 = a4;
  v84 = a5;
  if (v20 < 3
    || (v22 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv2DWeightsGradientOpAdaptor::verify(&v74, v22)))
  {
    v32 = mlir::Float32Type::get(this, a2);
LABEL_26:
    v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_27;
  }
  v23 = mlir::ValueRange::dereference_iterator(&v85, 0);
  v24 = mlir::ValueRange::dereference_iterator(&v85, 1);
  v25 = mlir::ValueRange::dereference_iterator(&v85, 2);
  v26 = v77;
  v27 = v78;
  v68 = (_QWORD *)*((_QWORD *)&v77 + 1);
  v66 = v80;
  v67 = v79;
  v28 = (_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v28)
  {
    v29 = 0;
    v30 = (_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v30)
      goto LABEL_12;
LABEL_15:
    v31 = 0;
    goto LABEL_16;
  }
  v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
  v30 = (_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30)
    goto LABEL_15;
LABEL_12:
  v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
LABEL_16:
  *(_QWORD *)&v73 = v28;
  *((_QWORD *)&v73 + 1) = v29;
  v72[0] = v30;
  v72[1] = v31;
  v71 = v73;
  v92 = v28;
  v93 = (uint64_t)v30;
  mlir::ValueRange::ValueRange(v109, (uint64_t)&v92, 2uLL);
  if (!v28
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)
    || !v72[0]
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72) & 1) == 0)
  {
    v32 = v33;
    goto LABEL_26;
  }
  v106 = (uint64_t *)v108;
  v107 = 0x400000000;
  if (!v25)
  {
    v70 = *((_QWORD *)&v27 + 1);
    v47 = v105;
    v103 = v105;
    memset(v105, 0, sizeof(v105));
    v104 = 0x400000004;
    if ((_QWORD)v71)
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
      if (v49 != 4)
      {
        v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DDataGradientOp input should be rank 4");
        v42 = 0;
LABEL_97:
        v55 = v103;
        goto LABEL_98;
      }
      v64 = (uint64_t *)ArgAttrsAttr;
    }
    else
    {
      v64 = (uint64_t *)v105;
    }
    v101[0] = v102;
    v101[1] = (void *)0x400000000;
    v99[0] = v100;
    v99[1] = (void *)0x400000000;
    v97[0] = v98;
    v97[1] = (void *)0x200000000;
    v95[0] = v96;
    v95[1] = (void *)0x200000000;
    if (v26)
      v51 = *(_DWORD *)(v26 + 8);
    else
      v51 = 1;
    v65 = v51;
    if (*((_QWORD *)&v67 + 1))
    {
      v56 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v67 + 1) + 8);
    }
    else
    {
      *((_QWORD *)&v67 + 1) = 0;
      v56 = 0;
    }
    if (v68)
    {
      v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v68 + 8);
    }
    else
    {
      v68 = 0;
      v57 = 0;
    }
    if ((_QWORD)v27)
      v58 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v27 + 8);
    else
      v58 = 0;
    if (mlir::mps::inferConv2DParams((uint64_t)a2, a3, v64, 4, *((uint64_t *)&v67 + 1), v56, (uint64_t)v68, v57, v27, v58, v65, (uint64_t)v101, (unsigned int *)v99, (uint64_t)v97, (uint64_t)v95))
    {
      if (v70)
        UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v70);
      else
        UInt = 1;
      if (v66)
        v60 = *(_DWORD *)(v66 + 8);
      else
        v60 = 3;
      if ((_QWORD)v67)
        v61 = *(_DWORD *)(v67 + 8);
      else
        v61 = 2;
      v69[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
      v69[1] = v62;
      if (v62 == 4)
      {
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)&v92, (uint64_t)v69, v60);
        v89 = v91;
        v90 = 0x400000000;
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)v87, (uint64_t)&v92);
        if (v87[0] != &v88)
          free(v87[0]);
        if (v63)
        {
          v42 = mlir::RankedTensorType::get((uint64_t)v89, v90, v33, 0);
          v50 = 1;
        }
        else
        {
          v42 = 0;
          v50 = 0;
        }
        v47 = v105;
        if (v89 != v91)
          free(v89);
        if (v92 != v94)
          free(v92);
      }
      else
      {
        v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2dGradient weights should be rank 4");
        v42 = 0;
        v47 = v105;
      }
    }
    else
    {
      v42 = 0;
      v50 = 0;
    }
    if (v95[0] != v96)
      free(v95[0]);
    if (v97[0] != v98)
      free(v97[0]);
    if (v99[0] != v100)
      free(v99[0]);
    if (v101[0] != v102)
      free(v101[0]);
    goto LABEL_97;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v25, (uint64_t)&v106))
  {
    v42 = mlir::UnrankedTensorType::get(v33);
    v50 = 1;
    goto LABEL_100;
  }
  v34 = v107;
  if (!(_DWORD)v107)
    goto LABEL_48;
  v35 = v106;
  v36 = (v107 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v37 = v106;
  if (v36 >= 3)
  {
    v38 = v36 + 1;
    v37 = &v106[v38 & 0x3FFFFFFFFFFFFFFCLL];
    v39 = (int64x2_t *)(v106 + 2);
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if ((v45.i8[0] & 1) != 0)
      {
        v39[-1].i64[0] = 0x8000000000000000;
        if ((v45.i8[4] & 1) == 0)
          goto LABEL_33;
      }
      else if ((v45.i8[4] & 1) == 0)
      {
LABEL_33:
        v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if ((v46.i8[0] & 1) != 0)
          goto LABEL_34;
        goto LABEL_38;
      }
      v39[-1].i64[1] = 0x8000000000000000;
      v46 = vmovn_s64(vceqq_s64(*v39, v40));
      if ((v46.i8[0] & 1) != 0)
      {
LABEL_34:
        v39->i64[0] = 0x8000000000000000;
        if ((v46.i8[4] & 1) != 0)
          goto LABEL_39;
        goto LABEL_30;
      }
LABEL_38:
      if ((v46.i8[4] & 1) != 0)
LABEL_39:
        v39->i64[1] = 0x8000000000000000;
LABEL_30:
      v39 += 2;
      v41 -= 4;
      if (!v41)
      {
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_48;
        break;
      }
    }
  }
  v54 = &v35[v34];
  do
  {
    if (*v37 == -1)
      *v37 = 0x8000000000000000;
    ++v37;
  }
  while (v37 != v54);
LABEL_48:
  v52 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  v47 = v94;
  v92 = v94;
  v93 = 0x400000000;
  {
    v42 = mlir::RankedTensorType::get((uint64_t)v92, v93, v33, 0);
    v50 = 1;
  }
  else
  {
    v42 = 0;
    v50 = 0;
  }
  v55 = v92;
LABEL_98:
  if (v55 != v47)
    free(v55);
LABEL_100:
  if (v106 != (uint64_t *)v108)
    free(v106);
  if (!v50)
    return 0;
LABEL_27:
  v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    v43 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv2DWeightsGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  uint64_t Value;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                v62 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                  v62 = v5;
                  v63 = v6;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v8 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v8;
                  v68 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (v60 = v5,
                        *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((_QWORD *)&v66 + 1) = v11,
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                    v62 = v3;
                    v63 = v12;
                    v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    v14 = v13;
                    if (v13)
                      v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    Value = (uint64_t)v14;
                    v68 = v13;
                    v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (v60 = v3,
                          *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((_QWORD *)&v66 + 1) = v17,
                          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                      v62 = v4;
                      v63 = v18;
                      v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      v20 = v19;
                      if (v19)
                        v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      Value = (uint64_t)v20;
                      v68 = v19;
                      v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v66 = xmmword_181240890;
                      if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                      {
                        v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                          return 1;
                      }
                      v59 = "'mps.conv_2d_weights_gradient' op attribute 'explicit_padding' failed to satisfy constraint:"
                            " ui64 elements attribute of shape {4, 2}";
                    }
                    else
                    {
                      v59 = "'mps.conv_2d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constraint: u"
                            "i64 elements attribute of shape {4}";
                    }
                  }
                  else
                  {
                    v59 = "'mps.conv_2d_weights_gradient' op attribute 'strides' failed to satisfy constraint: ui64 eleme"
                          "nts attribute of shape {4}";
                  }
                }
                else
                {
                  v59 = "'mps.conv_2d_weights_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsign"
                        "ed integer attribute";
                }
              }
              else
              {
                v59 = "'mps.conv_2d_weights_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v59 = "'mps.conv_2d_weights_gradient' op requires attribute 'strides'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_99:
            v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'groups'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_101;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_100;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_101;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_100;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_101;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_100;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_101;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_100;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

void mlir::mps::getSpatialPaddingValues(_QWORD *a1@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a3 + 2;
  if (a2 == 7)
  {
    v6 = a1[8];
    v5 = a1[9];
    v7 = a1[6];
    v8 = a1[7];
    v9 = a1[4];
    v10 = a1[5];
  }
  else
  {
    v6 = a1[6];
    v5 = a1[7];
    v7 = a1[4];
    v8 = a1[5];
    v9 = a1[2];
    v10 = a1[3];
  }
  *a3 = v4;
  a3[1] = 0x500000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v4, 6uLL, 8);
  v11 = (_QWORD *)(*a3 + 8 * *((unsigned int *)a3 + 2));
  *v11 = v6;
  v11[1] = v5;
  v11[2] = v7;
  v11[3] = v8;
  v11[4] = v9;
  v11[5] = v10;
  *((_DWORD *)a3 + 2) += 6;
}

uint64_t mlir::mps::getSpatialValues(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))((char *)sub_18090969C + 4 * byte_181247BE8[a3 - 7]))();
}

int8x16_t sub_18090969C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int8x16_t v4;
  int8x16_t result;

  v3 = a1 + 8 * a2;
  v4 = *(int8x16_t *)(v3 - 24);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = 3;
  result = vextq_s8(v4, v4, 8uLL);
  *(int8x16_t *)(a3 + 24) = result;
  return result;
}

void mlir::mps::computeSpatialPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  __asm { BR              X9 }
}

void sub_180909728(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v15;
  uint64_t v16;
  uint64_t *i;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v15 = (unint64_t *)(v7 + 16);
  *(_QWORD *)v7 = v7 + 16;
  *(_DWORD *)(v7 + 12) = 6;
  if (v8 < 7)
  {
    if (!v8)
      goto LABEL_5;
  }
  else
  {
    *(_DWORD *)(v7 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v8, 8);
    v15 = *(unint64_t **)v7;
  }
  bzero(v15, 8 * v8);
LABEL_5:
  *(_DWORD *)(v7 + 8) = v8;
  if (a2)
  {
    v16 = 8 * a2;
    for (i = a1; *i; ++i)
    {
      v16 -= 8;
      if (!v16)
      {
        v18 = v15 + 1;
        do
        {
          v20 = *a3++;
          v19 = v20;
          v21 = *a7++;
          v22 = (v19 - 1) * v21;
          v24 = *a1++;
          v23 = v24;
          v26 = *a5++;
          v25 = v26;
          v27 = v23 % v26;
          if (!v27)
            v27 = v25;
          v28 = (v22 - v27 + 1) & ~((v22 - v27 + 1) >> 63);
          v29 = v28 >> 1;
          v30 = v28 - (v28 >> 1);
          *(v18 - 1) = v29;
          *v18 = v30;
          if (v9 == 4)
          {
            *(v18 - 1) = v30;
            *v18 = v29;
          }
          v18 += 2;
          --a2;
        }
        while (a2);
        return;
      }
    }
  }
}

void mlir::mps::computeConvResultSpatialShape(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X4>, _QWORD *a5@<X6>, _QWORD *a6@<X8>, uint64_t a7)
{
  unint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v7 = a2;
  *a6 = a6 + 2;
  a6[1] = 0x300000000;
  if (!a2)
    return;
  if (a2 < 4)
  {
    v13 = 0;
    v14 = a7;
    v15 = a2;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a6, a6 + 2, a2, 8);
  v13 = *((unsigned int *)a6 + 2);
  v14 = a7;
  v15 = v7 - v13;
  if (v7 != v13)
LABEL_6:
    bzero((void *)(*a6 + 8 * v13), 8 * v15);
  *((_DWORD *)a6 + 2) = v7;
  v16 = (uint64_t *)*a6;
  v17 = (_QWORD *)(v14 + 8);
  do
  {
    v19 = *a3++;
    v18 = v19;
    v21 = *a1++;
    v20 = v21;
    v22 = v21 == 0x8000000000000000 || v18 == 0x8000000000000000;
    v23 = 0x8000000000000000;
    if (!v22)
      v23 = (*(v17 - 1) + v20 + *v17 + *a4 + ~(*a5 * (v18 - 1))) / *a4;
    *v16++ = v23;
    v17 += 2;
    ++a5;
    ++a4;
    --v7;
  }
  while (v7);
}

void mlir::mps::convertNCDHWShapeToLayout(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  if (a3 != 7)
  {
    v9 = a1[4];
    v10 = a1[1];
    v11 = *((_OWORD *)a1 + 1);
    *(_QWORD *)(a4 + 16) = *a1;
    *(_QWORD *)a4 = a4 + 16;
    *(_OWORD *)(a4 + 24) = v11;
    *(_QWORD *)(a4 + 40) = v9;
    *(_QWORD *)(a4 + 48) = v10;
    *(_QWORD *)(a4 + 8) = 0x500000005;
    return;
  }
  v7 = 8 * a2;
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 0x500000000;
  if ((unint64_t)(8 * a2) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), (8 * a2) >> 3, 8);
    v8 = *(_DWORD *)(a4 + 8);
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = 0;
  if (a2)
  {
LABEL_7:
    memcpy((void *)(*(_QWORD *)a4 + 8 * v8), a1, v7);
    v8 = *(_DWORD *)(a4 + 8);
  }
LABEL_8:
  *(_DWORD *)(a4 + 8) = v8 + (v7 >> 3);
}

_QWORD *llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t mlir::mps::Conv3DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ArgAttrsAttr;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[2];
  void *v60[2];
  uint64_t v61;
  void *v62[2];
  _QWORD v63[5];
  void *v64;
  uint64_t v65;
  void *v66;
  unsigned int v67;
  _BYTE v68[48];
  void *v69;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[80];
  void *v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[40];
  void *v81;
  unsigned int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _BYTE v86[40];
  void *v87;
  unsigned int v88;
  uint64_t v89;
  void *v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93[2];
  uint64_t v94;
  char v95[8];
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v105 = a4;
  v106 = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = a7[2];
    v17 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v17 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  v94 = a6;
  v95[0] = 0;
  v96 = 0;
  v97 = v14;
  v98 = v15;
  v99 = v16;
  v100 = v17;
  v101 = a9;
  v18 = a5;
  v102 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v94);
    if (v96)
      v96 = 0;
    mlir::OperationName::OperationName(v95, "mps.conv_3d", 11, Context);
    v96 = 1;
    v18 = v106;
  }
  v103 = a4;
  v104 = a5;
  if (v18 < 2
    || (v20 = mlir::UnknownLoc::get(this, a2), !mlir::mps::Conv3DOpAdaptor::verify(&v94, v20)))
  {
    v27 = mlir::Float32Type::get(this, a2);
    v28 = mlir::UnrankedTensorType::get(v27);
    v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
    {
LABEL_28:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
      LODWORD(v29) = *(_DWORD *)(a11 + 8);
    }
LABEL_13:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v29) = v28;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v21 = mlir::ValueRange::dereference_iterator(&v105, 0);
  v22 = mlir::ValueRange::dereference_iterator(&v105, 1);
  v23 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  v72 = (void *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  v73 = v23;
  mlir::ValueRange::ValueRange(v93, (uint64_t)&v72, 2uLL);
  v25 = (_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26)
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  else
    v25 = 0;
  v59[0] = v25;
  v59[1] = v26;
  v31 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    v57 = v31;
    v58 = v32;
    if (!v59[0])
      goto LABEL_27;
  }
  else
  {
    v57 = 0;
    v58 = 0;
    if (!v59[0])
      goto LABEL_27;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v59)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59), v33 < 5)
    || !v57
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v57)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57), v34 != 5))
  {
LABEL_27:
    v28 = mlir::UnrankedTensorType::get(v24);
    v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
      goto LABEL_28;
    goto LABEL_13;
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  mlir::mps::getSpatialValues(ArgAttrsAttr, v36, *(_DWORD *)(v97 + 8));
  v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57);
  mlir::mps::getSpatialValues(v37, v38, *(_DWORD *)(v100 + 8));
  v84 = v86;
  v85 = 0x500000000;
  v39 = *((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
    v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v99 + 1) + 8);
  else
    v40 = 0;
  mlir::getIntValues<long long>(v39, v40, (uint64_t)&v84, 1);
  mlir::mps::getSpatialValues((uint64_t)v84, v85, *(_DWORD *)(v97 + 8));
  v78 = v80;
  v79 = 0x500000000;
  v41 = *((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
    v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v97 + 1) + 8);
  else
    v42 = 0;
  mlir::getIntValues<long long>(v41, v42, (uint64_t)&v78, 1);
  mlir::mps::getSpatialValues((uint64_t)v78, v79, *(_DWORD *)(v97 + 8));
  v72 = v74;
  v73 = 0xA00000000;
  v43 = v98;
  if ((_QWORD)v98)
    v44 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v98 + 8);
  else
    v44 = 0;
  mlir::getIntValues<long long>(v43, v44, (uint64_t)&v72, 1);
  mlir::mps::getSpatialPaddingValues(v72, *(_DWORD *)(v97 + 8), &v69);
  mlir::mps::computeSpatialPaddings((uint64_t)v90, v91, (uint64_t)v87, v88, (uint64_t)v81, v82, (uint64_t)v75, v76, (uint64_t)v69, v70, *(_DWORD *)(v99 + 8));
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v69, (uint64_t)&v66);
  if (v66 != v68)
    free(v66);
  mlir::mps::computeConvResultSpatialShape((uint64_t *)v90, v91, (uint64_t *)v87, v81, v75, &v64, (uint64_t)v69);
  v45 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  v47 = *(void **)(v45 + 8 * v46 - 40);
  v48 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57);
  v50 = -5;
  if (*(_DWORD *)(v100 + 8) == 10)
    v50 = -1;
  v51 = *(void **)(v48 + 8 * (v50 + v49));
  v62[0] = v47;
  v62[1] = v51;
  v63[0] = *((_QWORD *)v64 + 2);
  v63[1] = *((_QWORD *)v64 + 1);
  v63[2] = *(_QWORD *)v64;
  llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v66, v62, 5);
  mlir::mps::convertNCDHWShapeToLayout(v66, v67, *(_DWORD *)(v97 + 8), (uint64_t)v62);
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)v62);
  if (v62[0] != v63)
    free(v62[0]);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  if (v52 >= 6)
  {
    llvm::SmallVector<long long,5u>::SmallVector(v62, (uint64_t)&v66);
    v53 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
    v54 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
    llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(v60, v53, (_BYTE *)(v54 + 8 * v55 - 40));
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)v60);
    if (v60[0] != &v61)
      free(v60[0]);
    llvm::SmallVectorImpl<long long>::append((uint64_t)&v66, (uint64_t)v62);
    if (v62[0] != v63)
      free(v62[0]);
  }
  v56 = mlir::RankedTensorType::get((uint64_t)v66, v67, v24, 0);
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
  if (v66 != v68)
    free(v66);
  if (v64 != &v65)
    free(v64);
  if (v69 != &v71)
    free(v69);
  if (v72 != v74)
    free(v72);
  if (v75 != &v77)
    free(v75);
  if (v78 != v80)
    free(v78);
  if (v81 != &v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  if (v87 != &v89)
    free(v87);
  if (v90 != &v92)
    free(v90);
  return 1;
}

uint64_t mlir::mps::Conv3DOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *OperandRange;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  _QWORD v68[2];
  __int128 v69;
  uint64_t Value;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD **v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = a1[3];
  if (v3)
  {
    v4 = (const char *)a1[4];
    if (v4)
    {
      v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v6 = (const char *)a1[8];
            if (v6)
            {
              v7 = a1[9];
              if (v7)
              {
                v65 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
                  v65 = v6;
                  v66 = v8;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  v10 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v10;
                  v71 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (v62 = v6,
                        *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((_QWORD *)&v69 + 1) = v13,
                        v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                    v65 = v4;
                    v66 = v14;
                    v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    v16 = v15;
                    if (v15)
                      v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    Value = (uint64_t)v16;
                    v71 = v15;
                    v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (v62 = v4,
                          *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((_QWORD *)&v69 + 1) = v19,
                          v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                      v65 = v5;
                      v66 = v20;
                      v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      v22 = v21;
                      if (v21)
                        v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      Value = (uint64_t)v22;
                      v71 = v21;
                      v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v69 = xmmword_181233130;
                      if (v24 == 2
                        && (*v23 == (_QWORD)v69 ? (v25 = v23[1] == *((_QWORD *)&v69 + 1)) : (v25 = 0),
                            v25
                         && (v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          v61 = "'mps.conv_3d' op attribute 'data_layout' failed to satisfy constraint: valid TensorDataL"
                                "ayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2)
                            return 1;
                          v61 = "'mps.conv_3d' op attribute 'weights_layout' failed to satisfy constraint: valid TensorDa"
                                "taLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        v61 = "'mps.conv_3d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements "
                              "attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      v61 = "'mps.conv_3d' op attribute 'dilation_rates' failed to satisfy constraint: positive ui64 elem"
                            "ents attribute of shape {5}";
                    }
                  }
                  else
                  {
                    v61 = "'mps.conv_3d' op attribute 'strides' failed to satisfy constraint: positive ui64 elements attr"
                          "ibute of shape {5}";
                  }
                }
                else
                {
                  v61 = "'mps.conv_3d' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
                }
              }
              else
              {
                v61 = "'mps.conv_3d' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v61 = "'mps.conv_3d' op requires attribute 'strides'";
            }
            v65 = v61;
            v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          v65 = "'mps.conv_3d' op requires attribute 'padding_style'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v54 = (_QWORD **)__p;
            if (__p)
            {
              v55 = v77;
              v56 = __p;
              if (v77 != __p)
              {
                do
                  v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                v56 = __p;
              }
              v77 = v54;
              operator delete(v56);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v57 = v75;
            v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73)
                free(v72);
              return v27;
            }
            do
            {
              v59 = (void *)*--v57;
              v58 = v59;
              *v57 = 0;
              if (v59)
                operator delete[](v58);
            }
            while (v57 != v31);
LABEL_103:
            v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          v65 = "'mps.conv_3d' op requires attribute 'groups'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v48 = (_QWORD **)__p;
            if (__p)
            {
              v49 = v77;
              v50 = __p;
              if (v77 != __p)
              {
                do
                  v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                v50 = __p;
              }
              v77 = v48;
              operator delete(v50);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v51 = v75;
            v33 = v74;
            if (v75 == v74)
              goto LABEL_104;
            do
            {
              v53 = (void *)*--v51;
              v52 = v53;
              *v51 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        v65 = "'mps.conv_3d' op requires attribute 'explicit_padding'";
        v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v78)
        {
          v42 = (_QWORD **)__p;
          if (__p)
          {
            v43 = v77;
            v44 = __p;
            if (v77 != __p)
            {
              do
                v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              v44 = __p;
            }
            v77 = v42;
            operator delete(v44);
          }
          v31 = v74;
          if (!v74)
            goto LABEL_105;
          v45 = v75;
          v33 = v74;
          if (v75 == v74)
            goto LABEL_104;
          do
          {
            v47 = (void *)*--v45;
            v46 = v47;
            *v45 = 0;
            if (v47)
              operator delete[](v46);
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      v65 = "'mps.conv_3d' op requires attribute 'dilation_rates'";
      v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v78)
      {
        v36 = (_QWORD **)__p;
        if (__p)
        {
          v37 = v77;
          v38 = __p;
          if (v77 != __p)
          {
            do
              v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            v38 = __p;
          }
          v77 = v36;
          operator delete(v38);
        }
        v31 = v74;
        if (!v74)
          goto LABEL_105;
        v39 = v75;
        v33 = v74;
        if (v75 == v74)
          goto LABEL_104;
        do
        {
          v41 = (void *)*--v39;
          v40 = v41;
          *v39 = 0;
          if (v41)
            operator delete[](v40);
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    v65 = "'mps.conv_3d' op requires attribute 'data_layout'";
    v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v78)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v77;
        v30 = __p;
        if (v77 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v77 = v28;
        operator delete(v30);
      }
      v31 = v74;
      if (!v74)
        goto LABEL_105;
      v32 = v75;
      v33 = v74;
      if (v75 == v74)
        goto LABEL_104;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

_QWORD *llvm::SmallVector<long long,5u>::SmallVector(_QWORD *a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  unsigned int v6;

  v3 = a1 + 2;
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (a1 != (_QWORD *)a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      if (v5 < 6)
      {
        v6 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5, 8);
        v6 = *(_DWORD *)(a2 + 8);
        if (!v6)
        {
LABEL_8:
          *((_DWORD *)a1 + 2) = v5;
          return a1;
        }
        v3 = (void *)*a1;
      }
      memcpy(v3, *(const void **)a2, 8 * v6);
      goto LABEL_8;
    }
  }
  return a1;
}

void llvm::SmallVectorImpl<long long>::append(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(const void **)a2;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 + v4 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + v4, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  if ((_DWORD)v4)
  {
    memcpy((void *)(*(_QWORD *)a1 + 8 * v5), v3, 8 * v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v5 + v4;
}

uint64_t mlir::mps::verifyConvolutionInputChannels(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const void **v23;
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  if (a3 && a6)
  {
    v9 = -4;
    if (a4 != 7)
      v9 = -1;
    v10 = *(_QWORD *)(a2 + 8 * (v9 + a3));
    if (v10 != 0x8000000000000000)
    {
      v11 = 8;
      if (a7 == 10)
        v11 = 24;
      v12 = *(_QWORD *)(a5 + v11);
      if (v12 != 0x8000000000000000 && v12 * a8 != v10)
      {
        v23 = (const void **)"failed: inputChannels must be equal to groups * inputWeightChannels";
        v24 = 259;
        mlir::Operation::emitOpError(a1, &v23, (uint64_t)v25);
        v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
        if (v25[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
        if (v32)
        {
          v14 = (_QWORD **)__p;
          if (__p)
          {
            v15 = v31;
            v16 = __p;
            if (v31 != __p)
            {
              do
                v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              v16 = __p;
            }
            v31 = v14;
            operator delete(v16);
          }
          v17 = v28;
          if (v28)
          {
            v18 = v29;
            v19 = v28;
            if (v29 != v28)
            {
              do
              {
                v21 = (void *)*--v18;
                v20 = v21;
                *v18 = 0;
                if (v21)
                  operator delete[](v20);
              }
              while (v18 != v17);
              v19 = v28;
            }
            v29 = v17;
            operator delete(v19);
          }
          if (v26 != &v27)
            free(v26);
        }
      }
    }
  }
  return v8;
}

uint64_t mlir::mps::verifyConvolutionOutputChannels(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  const void **v28[4];
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  if (!a3)
    return v8;
  if (!a6)
    return v8;
  v9 = *(_QWORD *)(a5 + 32 * (a7 == 10));
  if (v9 == 0x8000000000000000)
    return v8;
  v10 = -4;
  if (a4 != 7)
    v10 = -1;
  v11 = *(_QWORD *)(a2 + 8 * (v10 + a3));
  if (v11 == 0x8000000000000000 || v9 == v11)
  {
    if (v9 % a8)
    {
      v28[0] = (const void **)"failed: weights output channels needs to be divisible by groups";
      v29 = 259;
      mlir::Operation::emitOpError(a1, v28, (uint64_t)v30);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
      if (v30[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
      if (v37)
      {
        v13 = (_QWORD **)__p;
        if (__p)
        {
          v14 = v36;
          v15 = __p;
          if (v36 != __p)
          {
            do
              v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            v15 = __p;
          }
          v36 = v13;
          operator delete(v15);
        }
        v16 = v33;
        if (!v33)
          goto LABEL_42;
        v17 = v34;
        v18 = v33;
        if (v34 == v33)
          goto LABEL_41;
        do
        {
          v20 = (void *)*--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            operator delete[](v19);
        }
        while (v17 != v16);
        goto LABEL_40;
      }
    }
  }
  else
  {
    v28[0] = (const void **)"failed: weights output channels are inconsistent with those of the operands or result";
    v29 = 259;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)v30);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v21 = (_QWORD **)__p;
      if (__p)
      {
        v22 = v36;
        v23 = __p;
        if (v36 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v36 = v21;
        operator delete(v23);
      }
      v16 = v33;
      if (!v33)
        goto LABEL_42;
      v24 = v34;
      v18 = v33;
      if (v34 == v33)
      {
LABEL_41:
        v34 = v16;
        operator delete(v18);
LABEL_42:
        if (v31 != &v32)
          free(v31);
        return v8;
      }
      do
      {
        v26 = (void *)*--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
          operator delete[](v25);
      }
      while (v24 != v16);
LABEL_40:
      v18 = v33;
      goto LABEL_41;
    }
  }
  return v8;
}

uint64_t mlir::mps::Conv3DOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  const void **v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  const void **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  const void **v44;
  const void **v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t ArgAttrsAttr;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD v81[2];
  _QWORD v82[2];
  const void **v83[4];
  __int16 v84;
  uint64_t v85;
  const void **v86[2];
  _WORD v87[24];
  const void **v88[2];
  _WORD v89[24];
  void *v90;
  unsigned int v91;
  void *v92;
  _BYTE v93[96];
  void *v94;
  _QWORD *v95;
  void *__p;
  _QWORD **v97;
  char v98;
  void *v99[2];
  _QWORD v100[8];

  v100[6] = *MEMORY[0x1E0C80C00];
  v99[0] = v100;
  v99[1] = (void *)0x600000000;
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v99, 1);
  v5 = *((unsigned int *)*this + 11);
  v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  else
    v7 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 8);
  if (v8 == 3)
    goto LABEL_21;
  if (v8)
    goto LABEL_35;
  v9 = *(_QWORD *)v99[0];
  if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 7)
  {
    if (!v9 && !*((_QWORD *)v99[0] + 1) && !*((_QWORD *)v99[0] + 2))
    {
      v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v88[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    v89[8] = 259;
    mlir::OpState::emitOpError(this, v88, (uint64_t)&v90);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (v98)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v97;
        v14 = __p;
        if (v97 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v97 = v12;
        operator delete(v14);
      }
      v15 = v94;
      if (v94)
      {
        v16 = v95;
        v17 = v94;
        if (v95 != v94)
        {
          do
          {
            v19 = (void *)*--v16;
            v18 = v19;
            *v16 = 0;
            if (v19)
              operator delete[](v18);
          }
          while (v16 != v15);
          v17 = v94;
        }
        v95 = v15;
        operator delete(v17);
      }
      v22 = (const void **)v92;
      if (v92 != v93)
        goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v9 || *((_QWORD *)v99[0] + 1) || *((_QWORD *)v99[0] + 8))
    goto LABEL_21;
  v10 = 9;
LABEL_20:
  if (*((_QWORD *)v99[0] + v10))
    goto LABEL_21;
LABEL_35:
  v88[0] = (const void **)v89;
  v88[1] = (const void **)0x600000000;
  v20 = *(_QWORD **)(v7 + 40);
  if (v20)
    v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  else
    v21 = 0;
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v88, 1);
  if (*v88[0] == (const void *)1)
  {
    v24 = *((unsigned int *)*this + 11);
    v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    v27 = *(_QWORD *)(v25 + 64);
    v26 = v25 + 64;
    v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7)
      v28 = 1;
    if (v88[0][v28] == (const void *)1)
    {
      v86[0] = (const void **)v87;
      v86[1] = (const void **)0x600000000;
      if (BYTE3(v24))
        v29 = v26;
      else
        v29 = 0;
      v30 = *(_QWORD **)(v29 + 8);
      if (v30)
        v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      else
        v31 = 0;
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v86, 1);
      if (*v86[0] != (const void *)1)
        goto LABEL_81;
      v41 = *this;
      v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7)
        v42 = 1;
      if (v86[0][v42] == (const void *)1)
      {
        v43 = v41[9];
        v44 = (const void **)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v44)
        {
          v45 = (const void **)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v44 + 8);
          v41 = *this;
          v43 = (*this)[9];
        }
        else
        {
          v45 = 0;
        }
        v83[0] = v44;
        v83[1] = v45;
        v54 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v54)
        {
          v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v54 + 8);
          v41 = *this;
        }
        else
        {
          v55 = 0;
        }
        v82[0] = v54;
        v82[1] = v55;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
        v78 = v57;
        v79 = ArgAttrsAttr;
        v58 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
        v59 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v82);
        v61 = v60;
        v62 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v62 = 0;
        v63 = *(_DWORD *)(*(_QWORD *)(v62 + 48) + 8);
        v81[0] = *(_QWORD *)(v62 + 24);
        mlir::IntegerAttr::getValue(v81, (llvm::APInt *)&v90);
        if (v91 > 0x40)
        {
          v64 = *(void **)v90;
          operator delete[](v90);
        }
        else
        {
          v64 = v90;
        }
        if (mlir::mps::verifyConvolutionInputChannels(v41, v79, v78, v58, v59, v61, v63, (uint64_t)v64))
        {
          if (*((_DWORD *)*this + 9))
            v65 = (uint64_t)(*this - 2);
          else
            v65 = 0;
          v66 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (v66)
            v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v66 + 8);
          else
            v67 = 0;
          v81[0] = v66;
          v81[1] = v67;
          v80 = *this;
          v68 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v81);
          v70 = v69;
          v71 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
          v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v82);
          v74 = v73;
          v75 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          if (!HIBYTE(*((_DWORD *)*this + 11)))
            v75 = 0;
          v76 = *(_DWORD *)(*(_QWORD *)(v75 + 48) + 8);
          v85 = *(_QWORD *)(v75 + 24);
          mlir::IntegerAttr::getValue(&v85, (llvm::APInt *)&v90);
          if (v91 > 0x40)
          {
            v77 = *(void **)v90;
            operator delete[](v90);
          }
          else
          {
            v77 = v90;
          }
          v11 = mlir::mps::verifyConvolutionOutputChannels(v80, v68, v70, v71, v72, v74, v76, (unint64_t)v77);
        }
        else
        {
          v11 = 0;
        }
      }
      else
      {
LABEL_81:
        v83[0] = (const void **)"failed: dilation values incompatible with given tensor layout.";
        v84 = 259;
        mlir::OpState::emitOpError(this, v83, (uint64_t)&v90);
        v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
        if (v90)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
        if (v98)
        {
          v46 = (_QWORD **)__p;
          if (__p)
          {
            v47 = v97;
            v48 = __p;
            if (v97 != __p)
            {
              do
                v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              v48 = __p;
            }
            v97 = v46;
            operator delete(v48);
          }
          v49 = v94;
          if (v94)
          {
            v50 = v95;
            v51 = v94;
            if (v95 != v94)
            {
              do
              {
                v53 = (void *)*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                  operator delete[](v52);
              }
              while (v50 != v49);
              v51 = v94;
            }
            v95 = v49;
            operator delete(v51);
          }
          if (v92 != v93)
            free(v92);
        }
      }
      v40 = v86[0];
      if ((_WORD *)v86[0] == v87)
        goto LABEL_72;
LABEL_71:
      free(v40);
      goto LABEL_72;
    }
  }
  v86[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v87[8] = 259;
  mlir::OpState::emitOpError(this, v86, (uint64_t)&v90);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  if (v98)
  {
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v97;
      v34 = __p;
      if (v97 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v97 = v32;
      operator delete(v34);
    }
    v35 = v94;
    if (v94)
    {
      v36 = v95;
      v37 = v94;
      if (v95 != v94)
      {
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        v37 = v94;
      }
      v95 = v35;
      operator delete(v37);
    }
    v40 = (const void **)v92;
    if (v92 != v93)
      goto LABEL_71;
  }
LABEL_72:
  v22 = v88[0];
  if ((_WORD *)v88[0] != v89)
LABEL_40:
    free(v22);
LABEL_41:
  if (v99[0] != v100)
    free(v99[0]);
  return v11;
}

uint64_t mlir::mps::Conv3DOp::getPaddingStyle(mlir::mps::Conv3DOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(unsigned int *)(*(_QWORD *)(v1 + 32) + 8);
}

uint64_t mlir::mps::Conv3DOp::getStrides(mlir::mps::Conv3DOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 40);
}

uint64_t mlir::mps::Conv3DOp::getWeightsLayout(mlir::mps::Conv3DOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(unsigned int *)(*(_QWORD *)(v1 + 48) + 8);
}

void *mlir::mps::Conv3DOp::getGroups(mlir::mps::Conv3DOp *this)
{
  unint64_t v1;
  uint64_t v3;
  void *__p;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40)
    return __p;
  v3 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::mps::get5DElementsAttrFrom3DSpatialValues(mlir::Builder *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IntegerType;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v5 = a2[1];
  v4 = a2[2];
  v6 = *a2;
  if (a4 == 7)
    v7 = 1;
  else
    v7 = a2[2];
  if (a4 != 7)
  {
    v4 = a2[1];
    v5 = *a2;
    v6 = 1;
  }
  v17[0] = 1;
  v17[1] = v7;
  v17[2] = v4;
  v17[3] = v5;
  v17[4] = v6;
  v16 = 0x500000005;
  v14 = 5;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v9 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v14, 1, IntegerType, 0);
  v10 = v9;
  if (v9)
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  else
    v11 = 0;
  v12 = mlir::DenseElementsAttr::getFromRawBuffer(v10, v11, v15, 8 * v16, 8, 1, 0);
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t mlir::mps::get5DElementsAttrFrom3DPaddingValues(mlir::Builder *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t IntegerType;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[6];

  v23[5] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v7 = a2[4];
  v6 = a2[5];
  v9 = a2[2];
  v8 = a2[3];
  v11 = *a2;
  v10 = a2[1];
  v22 = 0x500000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, 0xAuLL, 8);
  v12 = v22;
  v13 = (char *)v21 + 8 * v22;
  if (a4 == 7)
  {
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    *((_QWORD *)v13 + 4) = v7;
    *((_QWORD *)v13 + 5) = v6;
    *((_QWORD *)v13 + 6) = v9;
    *((_QWORD *)v13 + 7) = v8;
    *((_QWORD *)v13 + 8) = v11;
    *((_QWORD *)v13 + 9) = v10;
  }
  else
  {
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v7;
    *((_QWORD *)v13 + 3) = v6;
    *((_QWORD *)v13 + 4) = v9;
    *((_QWORD *)v13 + 5) = v8;
    *((_QWORD *)v13 + 6) = v11;
    *((_QWORD *)v13 + 7) = v10;
    *((_QWORD *)v13 + 8) = 0;
    *((_QWORD *)v13 + 9) = 0;
  }
  LODWORD(v22) = v12 + 10;
  v20 = xmmword_181233130;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v15 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v20, 2, IntegerType, 0);
  v16 = v15;
  if (v15)
    v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  else
    v17 = 0;
  v18 = mlir::DenseElementsAttr::getFromRawBuffer(v16, v17, v21, 8 * v22, 8, 1, 0);
  if (v21 != v23)
    free(v21);
  return v18;
}

void mlir::mps::computeConv3DTransposeResultSpatialShape(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X4>, _QWORD *a5@<X6>, _QWORD *a6@<X8>, uint64_t a7)
{
  unint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v7 = a2;
  *a6 = a6 + 2;
  a6[1] = 0x300000000;
  if (!a2)
    return;
  if (a2 < 4)
  {
    v13 = 0;
    v14 = a7;
    v15 = a2;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a6, a6 + 2, a2, 8);
  v13 = *((unsigned int *)a6 + 2);
  v14 = a7;
  v15 = v7 - v13;
  if (v7 != v13)
LABEL_6:
    bzero((void *)(*a6 + 8 * v13), 8 * v15);
  *((_DWORD *)a6 + 2) = v7;
  v16 = (uint64_t *)*a6;
  v17 = (_QWORD *)(v14 + 8);
  do
  {
    v19 = *a3++;
    v18 = v19;
    v21 = *a1++;
    v20 = v21;
    v22 = v21 == 0x8000000000000000 || v18 == 0x8000000000000000;
    v23 = 0x8000000000000000;
    if (!v22)
      v23 = *a4 * (v20 - 1) + *a5 * (v18 - 1) - (*(v17 - 1) + *v17) + 1;
    *v16++ = v23;
    v17 += 2;
    ++a5;
    ++a4;
    --v7;
  }
  while (v7);
}

uint64_t mlir::mps::Conv3DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  uint64_t v33;
  int32x2_t v34;
  int32x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ArgAttrsAttr;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *Groups;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[2];
  void *v74[2];
  uint64_t v75;
  void *__src[2];
  _QWORD v77[5];
  void *v78[2];
  _BYTE v79[48];
  void *v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[80];
  void *v86;
  unsigned int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[40];
  void *v92;
  unsigned int v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[40];
  void *v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  unsigned int v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[40];
  unint64_t v107[2];
  uint64_t v108;
  char v109[8];
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v119 = a4;
  v120 = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = a7[2];
    v17 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v17 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  v108 = a6;
  v109[0] = 0;
  v110 = 0;
  v111 = v14;
  v112 = v15;
  v113 = v16;
  v114 = v17;
  v115 = a9;
  v18 = a5;
  v116 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v108);
    if (v110)
      v110 = 0;
    mlir::OperationName::OperationName(v109, "mps.conv_3d_data_gradient", 25, Context);
    v110 = 1;
    v18 = v120;
  }
  v117 = a4;
  v118 = a5;
  if (v18 >= 2)
  {
    v20 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::Conv3DDataGradientOpAdaptor::verify(&v108, v20))
    {
      v21 = mlir::ValueRange::dereference_iterator(&v119, 0);
      v22 = mlir::ValueRange::dereference_iterator(&v119, 1);
      v23 = 0;
      if (v120 >= 3)
        v23 = mlir::ValueRange::dereference_iterator(&v119, 2);
      v24 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
      v83 = (void *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
      v84 = v24;
      mlir::ValueRange::ValueRange(v107, (uint64_t)&v83, 2uLL);
      v104 = v106;
      v105 = 0x500000000;
      if (v23 && mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&v104))
      {
        v26 = (char *)v104;
        v27 = v105;
        if (!(_DWORD)v105)
          goto LABEL_50;
        v28 = (v105 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v29 = (char *)v104;
        if (v28 >= 3)
        {
          v30 = v28 + 1;
          v29 = (char *)v104 + 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = (int64x2_t *)((char *)v104 + 16);
          v32.i64[0] = -1;
          v32.i64[1] = -1;
          v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          while (1)
          {
            v34 = vmovn_s64(vceqq_s64(v31[-1], v32));
            if ((v34.i8[0] & 1) != 0)
            {
              v31[-1].i64[0] = 0x8000000000000000;
              if ((v34.i8[4] & 1) == 0)
              {
LABEL_20:
                v35 = vmovn_s64(vceqq_s64(*v31, v32));
                if ((v35.i8[0] & 1) == 0)
                  goto LABEL_21;
                goto LABEL_25;
              }
            }
            else if ((v34.i8[4] & 1) == 0)
            {
              goto LABEL_20;
            }
            v31[-1].i64[1] = 0x8000000000000000;
            v35 = vmovn_s64(vceqq_s64(*v31, v32));
            if ((v35.i8[0] & 1) == 0)
            {
LABEL_21:
              if ((v35.i8[4] & 1) != 0)
                goto LABEL_26;
              goto LABEL_17;
            }
LABEL_25:
            v31->i64[0] = 0x8000000000000000;
            if ((v35.i8[4] & 1) != 0)
LABEL_26:
              v31->i64[1] = 0x8000000000000000;
LABEL_17:
            v31 += 2;
            v33 -= 4;
            if (!v33)
            {
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_50;
              goto LABEL_54;
            }
          }
        }
        do
        {
LABEL_54:
          if (*(_QWORD *)v29 == -1)
            *(_QWORD *)v29 = 0x8000000000000000;
          v29 += 8;
        }
        while (v29 != &v26[8 * v27]);
LABEL_50:
        v51 = mlir::RankedTensorType::get((uint64_t)v26, v27, v25, 0);
        v52 = *(unsigned int *)(a11 + 8);
        if (v52 < *(_DWORD *)(a11 + 12))
          goto LABEL_45;
        goto LABEL_51;
      }
      v39 = (_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
      v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      if (v40)
        v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      else
        v39 = 0;
      v73[0] = v39;
      v73[1] = v40;
      v41 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8))
      {
        v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8);
        v71 = v41;
        v72 = v42;
        if (!v73[0])
          goto LABEL_44;
      }
      else
      {
        v71 = 0;
        v72 = 0;
        if (!v73[0])
          goto LABEL_44;
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v73))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
        if (v43 >= 5)
        {
          if (v71)
          {
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
            {
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
              if (v44 == 5)
              {
                ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                mlir::mps::getSpatialValues(ArgAttrsAttr, v46, *(_DWORD *)(v111 + 8));
                v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
                mlir::mps::getSpatialValues(v47, v48, *(_DWORD *)(v114 + 8));
                v95 = v97;
                v96 = 0x500000000;
                v49 = *((_QWORD *)&v113 + 1);
                if (*((_QWORD *)&v113 + 1))
                  v50 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v113 + 1) + 8);
                else
                  v50 = 0;
                mlir::getIntValues<long long>(v49, v50, (uint64_t)&v95, 1);
                mlir::mps::getSpatialValues((uint64_t)v95, v96, *(_DWORD *)(v111 + 8));
                v89 = v91;
                v90 = 0x500000000;
                v54 = *((_QWORD *)&v111 + 1);
                if (*((_QWORD *)&v111 + 1))
                  v55 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v111 + 1) + 8);
                else
                  v55 = 0;
                mlir::getIntValues<long long>(v54, v55, (uint64_t)&v89, 1);
                mlir::mps::getSpatialValues((uint64_t)v89, v90, *(_DWORD *)(v111 + 8));
                v83 = v85;
                v84 = 0xA00000000;
                v56 = v112;
                if ((_QWORD)v112)
                  v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v112 + 8);
                else
                  v57 = 0;
                mlir::getIntValues<long long>(v56, v57, (uint64_t)&v83, 1);
                mlir::mps::getSpatialPaddingValues(v83, *(_DWORD *)(v111 + 8), &v80);
                mlir::mps::computeSpatialPaddings((uint64_t)v101, v102, (uint64_t)v98, v99, (uint64_t)v92, v93, (uint64_t)v86, v87, (uint64_t)v80, v81, *(_DWORD *)(v113 + 8));
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v80, (uint64_t)v78);
                if (v78[0] != v79)
                  free(v78[0]);
                v78[0] = v79;
                v78[1] = (void *)0x500000000;
                mlir::mps::computeConv3DTransposeResultSpatialShape((uint64_t *)v101, v102, (uint64_t *)v98, v92, v86, __src, (uint64_t)v80);
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v78, (uint64_t)__src);
                if (__src[0] != v77)
                  free(__src[0]);
                v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                v60 = *(void **)(v58 + 8 * v59 - 40);
                v61 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
                v63 = -4;
                if (*(_DWORD *)(v114 + 8) == 10)
                  v63 = -2;
                v64 = *(_QWORD *)(v61 + 8 * (v63 + v62));
                Groups = mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::getGroups((mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase *)&v108);
                __src[0] = v60;
                __src[1] = (void *)((_QWORD)Groups * v64);
                v77[0] = *((_QWORD *)v78[0] + 2);
                v77[1] = *((_QWORD *)v78[0] + 1);
                v77[2] = *(_QWORD *)v78[0];
                llvm::SmallVector<long long,4u>::operator=((uint64_t)&v104, __src, 5);
                mlir::mps::convertNCDHWShapeToLayout(v104, v105, *(_DWORD *)(v111 + 8), (uint64_t)__src);
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v104, (uint64_t)__src);
                if (__src[0] != v77)
                  free(__src[0]);
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                if (v66 >= 6)
                {
                  llvm::SmallVector<long long,5u>::SmallVector(__src, (uint64_t)&v104);
                  v67 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                  v68 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                  llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(v74, v67, (_BYTE *)(v68 + 8 * v69 - 40));
                  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v104, (uint64_t)v74);
                  if (v74[0] != &v75)
                    free(v74[0]);
                  llvm::SmallVectorImpl<long long>::append((uint64_t)&v104, (uint64_t)__src);
                  if (__src[0] != v77)
                    free(__src[0]);
                }
                v70 = mlir::RankedTensorType::get((uint64_t)v104, v105, v25, 0);
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v70);
                if (v78[0] != v79)
                  free(v78[0]);
                if (v80 != &v82)
                  free(v80);
                if (v83 != v85)
                  free(v83);
                if (v86 != &v88)
                  free(v86);
                if (v89 != v91)
                  free(v89);
                if (v92 != &v94)
                  free(v92);
                if (v95 != v97)
                  free(v95);
                if (v98 != &v100)
                  free(v98);
                if (v101 != &v103)
                  free(v101);
                goto LABEL_46;
              }
            }
          }
        }
      }
LABEL_44:
      v51 = mlir::UnrankedTensorType::get(v25);
      v52 = *(unsigned int *)(a11 + 8);
      if (v52 < *(_DWORD *)(a11 + 12))
      {
LABEL_45:
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v52) = v51;
        ++*(_DWORD *)(a11 + 8);
LABEL_46:
        if (v104 != v106)
          free(v104);
        return 1;
      }
LABEL_51:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v52 + 1, 8);
      LODWORD(v52) = *(_DWORD *)(a11 + 8);
      goto LABEL_45;
    }
  }
  v36 = mlir::Float32Type::get(this, a2);
  v37 = mlir::UnrankedTensorType::get(v36);
  v38 = *(unsigned int *)(a11 + 8);
  if (v38 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v38) = v37;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv3DDataGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *OperandRange;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  _QWORD v68[2];
  __int128 v69;
  uint64_t Value;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD **v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = a1[3];
  if (v3)
  {
    v4 = (const char *)a1[4];
    if (v4)
    {
      v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v6 = (const char *)a1[8];
            if (v6)
            {
              v7 = a1[9];
              if (v7)
              {
                v65 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
                  v65 = v6;
                  v66 = v8;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  v10 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v10;
                  v71 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (v62 = v6,
                        *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((_QWORD *)&v69 + 1) = v13,
                        v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                    v65 = v4;
                    v66 = v14;
                    v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    v16 = v15;
                    if (v15)
                      v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    Value = (uint64_t)v16;
                    v71 = v15;
                    v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (v62 = v4,
                          *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((_QWORD *)&v69 + 1) = v19,
                          v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                      v65 = v5;
                      v66 = v20;
                      v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      v22 = v21;
                      if (v21)
                        v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      Value = (uint64_t)v22;
                      v71 = v21;
                      v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v69 = xmmword_181233130;
                      if (v24 == 2
                        && (*v23 == (_QWORD)v69 ? (v25 = v23[1] == *((_QWORD *)&v69 + 1)) : (v25 = 0),
                            v25
                         && (v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          v61 = "'mps.conv_3d_data_gradient' op attribute 'data_layout' failed to satisfy constraint: val"
                                "id TensorDataLayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2)
                            return 1;
                          v61 = "'mps.conv_3d_data_gradient' op attribute 'weights_layout' failed to satisfy constraint: "
                                "valid TensorDataLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        v61 = "'mps.conv_3d_data_gradient' op attribute 'explicit_padding' failed to satisfy constraint: "
                              "ui64 elements attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      v61 = "'mps.conv_3d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: posi"
                            "tive ui64 elements attribute of shape {5}";
                    }
                  }
                  else
                  {
                    v61 = "'mps.conv_3d_data_gradient' op attribute 'strides' failed to satisfy constraint: positive ui64"
                          " elements attribute of shape {5}";
                  }
                }
                else
                {
                  v61 = "'mps.conv_3d_data_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned "
                        "integer attribute";
                }
              }
              else
              {
                v61 = "'mps.conv_3d_data_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v61 = "'mps.conv_3d_data_gradient' op requires attribute 'strides'";
            }
            v65 = v61;
            v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          v65 = "'mps.conv_3d_data_gradient' op requires attribute 'padding_style'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v54 = (_QWORD **)__p;
            if (__p)
            {
              v55 = v77;
              v56 = __p;
              if (v77 != __p)
              {
                do
                  v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                v56 = __p;
              }
              v77 = v54;
              operator delete(v56);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v57 = v75;
            v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73)
                free(v72);
              return v27;
            }
            do
            {
              v59 = (void *)*--v57;
              v58 = v59;
              *v57 = 0;
              if (v59)
                operator delete[](v58);
            }
            while (v57 != v31);
LABEL_103:
            v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          v65 = "'mps.conv_3d_data_gradient' op requires attribute 'groups'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v48 = (_QWORD **)__p;
            if (__p)
            {
              v49 = v77;
              v50 = __p;
              if (v77 != __p)
              {
                do
                  v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                v50 = __p;
              }
              v77 = v48;
              operator delete(v50);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v51 = v75;
            v33 = v74;
            if (v75 == v74)
              goto LABEL_104;
            do
            {
              v53 = (void *)*--v51;
              v52 = v53;
              *v51 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        v65 = "'mps.conv_3d_data_gradient' op requires attribute 'explicit_padding'";
        v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v78)
        {
          v42 = (_QWORD **)__p;
          if (__p)
          {
            v43 = v77;
            v44 = __p;
            if (v77 != __p)
            {
              do
                v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              v44 = __p;
            }
            v77 = v42;
            operator delete(v44);
          }
          v31 = v74;
          if (!v74)
            goto LABEL_105;
          v45 = v75;
          v33 = v74;
          if (v75 == v74)
            goto LABEL_104;
          do
          {
            v47 = (void *)*--v45;
            v46 = v47;
            *v45 = 0;
            if (v47)
              operator delete[](v46);
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      v65 = "'mps.conv_3d_data_gradient' op requires attribute 'dilation_rates'";
      v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v78)
      {
        v36 = (_QWORD **)__p;
        if (__p)
        {
          v37 = v77;
          v38 = __p;
          if (v77 != __p)
          {
            do
              v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            v38 = __p;
          }
          v77 = v36;
          operator delete(v38);
        }
        v31 = v74;
        if (!v74)
          goto LABEL_105;
        v39 = v75;
        v33 = v74;
        if (v75 == v74)
          goto LABEL_104;
        do
        {
          v41 = (void *)*--v39;
          v40 = v41;
          *v39 = 0;
          if (v41)
            operator delete[](v40);
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    v65 = "'mps.conv_3d_data_gradient' op requires attribute 'data_layout'";
    v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v78)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v77;
        v30 = __p;
        if (v77 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v77 = v28;
        operator delete(v30);
      }
      v31 = v74;
      if (!v74)
        goto LABEL_105;
      v32 = v75;
      v33 = v74;
      if (v75 == v74)
        goto LABEL_104;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

void *mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::getGroups(mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase *this)
{
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *((_QWORD *)this + 6);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v2 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::verifyConvolutionBatches(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD **v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  const void **v28[4];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  const void ***v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  if (!a3 || !a5)
    return v5;
  if (a3 == a5)
  {
    v6 = a3 - 4;
    if (a3 != 4)
    {
      while (1)
      {
        v8 = *a2++;
        v7 = v8;
        v35 = v8;
        v10 = *a4++;
        v9 = v10;
        v34 = v10;
        v11 = v35 == 0x8000000000000000 || v9 == 0x8000000000000000;
        if (!v11 && v7 != v9)
          break;
        if (!--v6)
          return 1;
      }
      v28[0] = (const void **)"failed: input batch {0} differs from output batch {1}";
      v28[1] = (const void **)53;
      v28[2] = (const void **)v31;
      v28[3] = (const void **)2;
      v29[0] = &off_1E0E23E00;
      v29[1] = &v35;
      v30[0] = &off_1E0E23E00;
      v30[1] = &v34;
      v31[0] = v29;
      v31[1] = v30;
      v33 = 263;
      v32 = v28;
      mlir::Operation::emitOpError(a1, (const void ***)&v32, (uint64_t)v36);
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
      if (v36[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
      if (v43)
      {
        v21 = (_QWORD **)__p;
        if (__p)
        {
          v22 = v42;
          v23 = __p;
          if (v42 != __p)
          {
            do
              v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            v23 = __p;
          }
          v42 = v21;
          operator delete(v23);
        }
        v16 = v39;
        if (!v39)
          goto LABEL_45;
        v24 = v40;
        v18 = v39;
        if (v40 == v39)
        {
LABEL_44:
          v40 = v16;
          operator delete(v18);
LABEL_45:
          if (v37 != &v38)
            free(v37);
          return v5;
        }
        do
        {
          v26 = (void *)*--v24;
          v25 = v26;
          *v24 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v24 != v16);
LABEL_43:
        v18 = v39;
        goto LABEL_44;
      }
    }
  }
  else
  {
    v28[0] = (const void **)"failed: number of batches are inconsistent between input and output";
    LOWORD(v29[0]) = 259;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)v36);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    if (v43)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v42;
        v15 = __p;
        if (v42 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v42 = v13;
        operator delete(v15);
      }
      v16 = v39;
      if (!v39)
        goto LABEL_45;
      v17 = v40;
      v18 = v39;
      if (v40 == v39)
        goto LABEL_44;
      do
      {
        v20 = (void *)*--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          operator delete[](v19);
      }
      while (v17 != v16);
      goto LABEL_43;
    }
  }
  return v5;
}

uint64_t mlir::mps::Conv3DDataGradientOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  const void **v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  const void **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _BYTE *ArgAttrsAttr;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  int v67;
  uint64_t DefiningOp;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  void *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD v97[2];
  _QWORD v98[2];
  _QWORD v99[2];
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _WORD v103[12];
  const void **v104[2];
  _WORD v105[24];
  const void **v106[2];
  _WORD v107[24];
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _BYTE v112[96];
  void *v113;
  _QWORD *v114;
  void *__p;
  _QWORD **v116;
  char v117;
  void *v118[2];
  _QWORD v119[8];

  v119[6] = *MEMORY[0x1E0C80C00];
  v118[0] = v119;
  v118[1] = (void *)0x600000000;
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v118, 1);
  v5 = *((unsigned int *)*this + 11);
  v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  else
    v7 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 8);
  if (v8 == 3)
    goto LABEL_21;
  if (v8)
    goto LABEL_35;
  v9 = *(_QWORD *)v118[0];
  if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 7)
  {
    if (!v9 && !*((_QWORD *)v118[0] + 1) && !*((_QWORD *)v118[0] + 2))
    {
      v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v106[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    v107[8] = 259;
    mlir::OpState::emitOpError(this, v106, (uint64_t)&v108);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
    if (v108)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
    if (v117)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v116;
        v14 = __p;
        if (v116 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v116 = v12;
        operator delete(v14);
      }
      v15 = v113;
      if (v113)
      {
        v16 = v114;
        v17 = v113;
        if (v114 != v113)
        {
          do
          {
            v19 = (void *)*--v16;
            v18 = v19;
            *v16 = 0;
            if (v19)
              operator delete[](v18);
          }
          while (v16 != v15);
          v17 = v113;
        }
        v114 = v15;
        operator delete(v17);
      }
      v22 = (const void **)v111;
      if (v111 != v112)
        goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v9 || *((_QWORD *)v118[0] + 1) || *((_QWORD *)v118[0] + 8))
    goto LABEL_21;
  v10 = 9;
LABEL_20:
  if (*((_QWORD *)v118[0] + v10))
    goto LABEL_21;
LABEL_35:
  v106[0] = (const void **)v107;
  v106[1] = (const void **)0x600000000;
  v20 = *(_QWORD **)(v7 + 40);
  if (v20)
    v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  else
    v21 = 0;
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v106, 1);
  if (*v106[0] == (const void *)1)
  {
    v24 = *((unsigned int *)*this + 11);
    v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    v27 = *(_QWORD *)(v25 + 64);
    v26 = v25 + 64;
    v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7)
      v28 = 1;
    if (v106[0][v28] == (const void *)1)
    {
      v104[0] = (const void **)v105;
      v104[1] = (const void **)0x600000000;
      if (BYTE3(v24))
        v29 = v26;
      else
        v29 = 0;
      v30 = *(_QWORD **)(v29 + 8);
      if (v30)
        v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      else
        v31 = 0;
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v104, 1);
      if (*v104[0] != (const void *)1)
        goto LABEL_81;
      v41 = *this;
      v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7)
        v42 = 1;
      if (v104[0][v42] == (const void *)1)
      {
        v43 = v41[9];
        v44 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v44)
        {
          v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v44 + 8);
          v41 = *this;
          v43 = (*this)[9];
        }
        else
        {
          v45 = 0;
        }
        v99[0] = v44;
        v99[1] = v45;
        v55 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v55)
        {
          v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v55 + 8);
          v41 = *this;
        }
        else
        {
          v56 = 0;
        }
        v98[0] = v55;
        v98[1] = v56;
        v57 = *((_DWORD *)v41 + 9);
        v58 = v41 - 2;
        if (v57)
          v59 = (uint64_t)v58;
        else
          v59 = 0;
        v60 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v59, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v60)
          v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v60 + 8);
        else
          v61 = 0;
        v97[0] = v60;
        v97[1] = v61;
        ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
        v63 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
        v65 = (_BYTE *)(v63 + 8 * v64);
        v108 = &v110;
        v109 = 0x500000000;
        v66 = v65 - ArgAttrsAttr;
        if ((unint64_t)(v65 - ArgAttrsAttr) < 0x29)
        {
          v67 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, &v110, v66 >> 3, 8);
          v67 = v109;
        }
        if (v65 != ArgAttrsAttr)
        {
          memcpy(&v108[v67], ArgAttrsAttr, v65 - ArgAttrsAttr);
          v67 = v109;
        }
        LODWORD(v109) = v67 + ((unint64_t)v66 >> 3);
        if (*((_DWORD *)*this + 17) != 2)
        {
          if (*(_QWORD *)((*this)[9] + 88))
          {
            v100 = *(_QWORD *)((*this)[9] + 88);
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v100);
            if (DefiningOp)
            {
              v69 = DefiningOp;
              if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
              {
                v101 = v103;
                v102 = 0x100000000;
                mlir::Operation::fold(v69, 0, 0, (uint64_t)&v101);
                v70 = (_QWORD *)(*(_QWORD *)v101 & 0xFFFFFFFFFFFFFFF8);
                v71 = mlir::DenseIntElementsAttr::classof((uint64_t)v70) & (v70 != 0);
                if (!v71)
                  v70 = 0;
                if (v101 != v103)
                  free(v101);
                if ((v71 & 1) != 0)
                {
                  LODWORD(v109) = 0;
                  if (v70)
                    v72 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v70 + 8);
                  else
                    v72 = 0;
                  mlir::getIntValues<long long>((uint64_t)v70, v72, (uint64_t)&v108, 1);
                }
              }
            }
          }
        }
        v73 = *this;
        v95 = v108;
        v74 = v109;
        v75 = *(_DWORD *)(v73[2 * (((unint64_t)*((unsigned int *)v73 + 11) >> 23) & 1) + 8] + 8);
        v76 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
        v78 = v77;
        v79 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v79 = 0;
        v80 = *(_DWORD *)(*(_QWORD *)(v79 + 48) + 8);
        v100 = *(_QWORD *)(v79 + 24);
        mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v101);
        if (v102 > 0x40)
        {
          v81 = *(void **)v101;
          operator delete[](v101);
        }
        else
        {
          v81 = v101;
        }
        if (!mlir::mps::verifyConvolutionInputChannels(v73, (uint64_t)v95, v74, v75, v76, v78, v80, (uint64_t)v81))goto LABEL_142;
        v96 = *this;
        v82 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
        v84 = v83;
        v85 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
        v86 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
        v88 = v87;
        v89 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v89 = 0;
        v90 = *(_DWORD *)(*(_QWORD *)(v89 + 48) + 8);
        v100 = *(_QWORD *)(v89 + 24);
        mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v101);
        if (v102 > 0x40)
        {
          v91 = *(void **)v101;
          operator delete[](v101);
        }
        else
        {
          v91 = v101;
        }
        if (mlir::mps::verifyConvolutionOutputChannels(v96, v82, v84, v85, v86, v88, v90, (unint64_t)v91))
        {
          v92 = *this;
          v93 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
          v11 = mlir::mps::verifyConvolutionBatches(v92, v93, v94, v108, v109);
        }
        else
        {
LABEL_142:
          v11 = 0;
        }
        v54 = v108;
        if (v108 == &v110)
          goto LABEL_99;
      }
      else
      {
LABEL_81:
        v101 = "failed: dilation values incompatible with given tensor layout.";
        v103[8] = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v101, (uint64_t)&v108);
        v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
        if (v108)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
        if (!v117)
          goto LABEL_99;
        v46 = (_QWORD **)__p;
        if (__p)
        {
          v47 = v116;
          v48 = __p;
          if (v116 != __p)
          {
            do
              v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            v48 = __p;
          }
          v116 = v46;
          operator delete(v48);
        }
        v49 = v113;
        if (v113)
        {
          v50 = v114;
          v51 = v113;
          if (v114 != v113)
          {
            do
            {
              v53 = (void *)*--v50;
              v52 = v53;
              *v50 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v50 != v49);
            v51 = v113;
          }
          v114 = v49;
          operator delete(v51);
        }
        v54 = (uint64_t *)v111;
        if (v111 == v112)
        {
LABEL_99:
          v40 = v104[0];
          if ((_WORD *)v104[0] == v105)
            goto LABEL_72;
LABEL_71:
          free(v40);
          goto LABEL_72;
        }
      }
      free(v54);
      goto LABEL_99;
    }
  }
  v104[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v105[8] = 259;
  mlir::OpState::emitOpError(this, v104, (uint64_t)&v108);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
  if (v108)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
  if (v117)
  {
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v116;
      v34 = __p;
      if (v116 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v116 = v32;
      operator delete(v34);
    }
    v35 = v113;
    if (v113)
    {
      v36 = v114;
      v37 = v113;
      if (v114 != v113)
      {
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        v37 = v113;
      }
      v114 = v35;
      operator delete(v37);
    }
    v40 = (const void **)v111;
    if (v111 != v112)
      goto LABEL_71;
  }
LABEL_72:
  v22 = v106[0];
  if ((_WORD *)v106[0] != v107)
LABEL_40:
    free(v22);
LABEL_41:
  if (v118[0] != v119)
    free(v118[0]);
  return v11;
}

uint64_t mlir::mps::Conv3DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  uint64_t DefiningOp;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  int64x2_t *v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  _BYTE v47[40];
  unint64_t v48[2];
  uint64_t v49;
  char v50[8];
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  _QWORD v60[3];

  v60[2] = *MEMORY[0x1E0C80C00];
  v60[0] = a4;
  v60[1] = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = a7[2];
    v17 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v17 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  v49 = a6;
  v50[0] = 0;
  v51 = 0;
  v52 = v14;
  v53 = v15;
  v54 = v16;
  v55 = v17;
  v56 = a9;
  v57 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v49);
    if (v51)
      v51 = 0;
    mlir::OperationName::OperationName(v50, "mps.conv_3d_weights_gradient", 28, Context);
    v51 = 1;
  }
  v58 = a4;
  v59 = a5;
  if (a5 < 3
    || (v19 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv3DWeightsGradientOpAdaptor::verify(&v49, v19)))
  {
    v36 = mlir::Float32Type::get(this, a2);
    v37 = mlir::UnrankedTensorType::get(v36);
    v38 = *(unsigned int *)(a11 + 8);
    if (v38 >= *(_DWORD *)(a11 + 12))
    {
LABEL_35:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
      LODWORD(v38) = *(_DWORD *)(a11 + 8);
    }
LABEL_22:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v38) = v37;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v45 = (void *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v46 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v60, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v48, (uint64_t)&v45, 2uLL);
  v45 = v58;
  v46 = 2;
  v45 = (void *)mlir::ValueRange::offset_base(&v45, 2);
  v46 = 0;
  v44 = mlir::ValueRange::dereference_iterator(&v45, 0);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v44);
  if (!DefiningOp)
    goto LABEL_34;
  v22 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_34;
  v45 = v47;
  v46 = 0x100000000;
  mlir::Operation::fold(v22, 0, 0, (uint64_t)&v45);
  v23 = *(_QWORD *)v45;
  v24 = mlir::DenseIntElementsAttr::classof(*(_QWORD *)v45 & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if (v25)
    v26 = v24;
  else
    v26 = 0;
  if (v45 != v47)
    free(v45);
  if ((v26 & 1) == 0)
  {
LABEL_34:
    v37 = mlir::UnrankedTensorType::get(v20);
    v38 = *(unsigned int *)(a11 + 8);
    if (v38 >= *(_DWORD *)(a11 + 12))
      goto LABEL_35;
    goto LABEL_22;
  }
  v45 = v47;
  v46 = 0x500000000;
  v27 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8);
  mlir::getIntValues<long long>((uint64_t)v25, v27, (uint64_t)&v45, 1);
  v28 = (char *)v45;
  v29 = v46;
  if (!(_DWORD)v46)
    goto LABEL_37;
  v30 = (v46 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v31 = (char *)v45;
  if (v30 >= 3)
  {
    v32 = v30 + 1;
    v31 = (char *)v45 + 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = (int64x2_t *)((char *)v45 + 16);
    v34.i64[0] = -1;
    v34.i64[1] = -1;
    v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v40 = vmovn_s64(vceqq_s64(v33[-1], v34));
      if ((v40.i8[0] & 1) != 0)
      {
        v33[-1].i64[0] = 0x8000000000000000;
        if ((v40.i8[4] & 1) == 0)
        {
LABEL_27:
          v41 = vmovn_s64(vceqq_s64(*v33, v34));
          if ((v41.i8[0] & 1) == 0)
            goto LABEL_28;
          goto LABEL_32;
        }
      }
      else if ((v40.i8[4] & 1) == 0)
      {
        goto LABEL_27;
      }
      v33[-1].i64[1] = 0x8000000000000000;
      v41 = vmovn_s64(vceqq_s64(*v33, v34));
      if ((v41.i8[0] & 1) == 0)
      {
LABEL_28:
        if ((v41.i8[4] & 1) != 0)
          goto LABEL_33;
        goto LABEL_24;
      }
LABEL_32:
      v33->i64[0] = 0x8000000000000000;
      if ((v41.i8[4] & 1) != 0)
LABEL_33:
        v33->i64[1] = 0x8000000000000000;
LABEL_24:
      v33 += 2;
      v35 -= 4;
      if (!v35)
      {
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_37;
        goto LABEL_43;
      }
    }
  }
  do
  {
LABEL_43:
    if (*(_QWORD *)v31 == -1)
      *(_QWORD *)v31 = 0x8000000000000000;
    v31 += 8;
  }
  while (v31 != &v28[8 * v29]);
LABEL_37:
  v42 = mlir::RankedTensorType::get((uint64_t)v28, v29, v20, 0);
  v43 = *(unsigned int *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    LODWORD(v43) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  if (v45 != v47)
    free(v45);
  return 1;
}

uint64_t mlir::mps::Conv3DWeightsGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  const char *v61;
  const char *v62;
  uint64_t v63;
  const char *OperandRange;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  _QWORD v68[2];
  __int128 v69;
  uint64_t Value;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD **v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = a1[3];
  if (v3)
  {
    v4 = (const char *)a1[4];
    if (v4)
    {
      v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            v6 = (const char *)a1[8];
            if (v6)
            {
              v7 = a1[9];
              if (v7)
              {
                v65 = (const char *)a1[6];
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
                  v65 = v6;
                  v66 = v8;
                  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  v10 = Type;
                  if (Type)
                    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  Value = (uint64_t)v10;
                  v71 = Type;
                  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (v62 = v6,
                        *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((_QWORD *)&v69 + 1) = v13,
                        v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                    v65 = v4;
                    v66 = v14;
                    v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    v16 = v15;
                    if (v15)
                      v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    Value = (uint64_t)v16;
                    v71 = v15;
                    v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (v62 = v4,
                          *(_QWORD *)&v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((_QWORD *)&v69 + 1) = v19,
                          v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                      v65 = v5;
                      v66 = v20;
                      v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      v22 = v21;
                      if (v21)
                        v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      Value = (uint64_t)v22;
                      v71 = v21;
                      v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      v69 = xmmword_181233130;
                      if (v24 == 2
                        && (*v23 == (_QWORD)v69 ? (v25 = v23[1] == *((_QWORD *)&v69 + 1)) : (v25 = 0),
                            v25
                         && (v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          v61 = "'mps.conv_3d_weights_gradient' op attribute 'data_layout' failed to satisfy constraint: "
                                "valid TensorDataLayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2)
                            return 1;
                          v61 = "'mps.conv_3d_weights_gradient' op attribute 'weights_layout' failed to satisfy constrain"
                                "t: valid TensorDataLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        v61 = "'mps.conv_3d_weights_gradient' op attribute 'explicit_padding' failed to satisfy constrain"
                              "t: ui64 elements attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      v61 = "'mps.conv_3d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constraint: p"
                            "ositive ui64 elements attribute of shape {5}";
                    }
                  }
                  else
                  {
                    v61 = "'mps.conv_3d_weights_gradient' op attribute 'strides' failed to satisfy constraint: positive u"
                          "i64 elements attribute of shape {5}";
                  }
                }
                else
                {
                  v61 = "'mps.conv_3d_weights_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsign"
                        "ed integer attribute";
                }
              }
              else
              {
                v61 = "'mps.conv_3d_weights_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              v61 = "'mps.conv_3d_weights_gradient' op requires attribute 'strides'";
            }
            v65 = v61;
            v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'padding_style'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v54 = (_QWORD **)__p;
            if (__p)
            {
              v55 = v77;
              v56 = __p;
              if (v77 != __p)
              {
                do
                  v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                v56 = __p;
              }
              v77 = v54;
              operator delete(v56);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v57 = v75;
            v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73)
                free(v72);
              return v27;
            }
            do
            {
              v59 = (void *)*--v57;
              v58 = v59;
              *v57 = 0;
              if (v59)
                operator delete[](v58);
            }
            while (v57 != v31);
LABEL_103:
            v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'groups'";
          v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v78)
          {
            v48 = (_QWORD **)__p;
            if (__p)
            {
              v49 = v77;
              v50 = __p;
              if (v77 != __p)
              {
                do
                  v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                v50 = __p;
              }
              v77 = v48;
              operator delete(v50);
            }
            v31 = v74;
            if (!v74)
              goto LABEL_105;
            v51 = v75;
            v33 = v74;
            if (v75 == v74)
              goto LABEL_104;
            do
            {
              v53 = (void *)*--v51;
              v52 = v53;
              *v51 = 0;
              if (v53)
                operator delete[](v52);
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'explicit_padding'";
        v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v78)
        {
          v42 = (_QWORD **)__p;
          if (__p)
          {
            v43 = v77;
            v44 = __p;
            if (v77 != __p)
            {
              do
                v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              v44 = __p;
            }
            v77 = v42;
            operator delete(v44);
          }
          v31 = v74;
          if (!v74)
            goto LABEL_105;
          v45 = v75;
          v33 = v74;
          if (v75 == v74)
            goto LABEL_104;
          do
          {
            v47 = (void *)*--v45;
            v46 = v47;
            *v45 = 0;
            if (v47)
              operator delete[](v46);
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'dilation_rates'";
      v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v78)
      {
        v36 = (_QWORD **)__p;
        if (__p)
        {
          v37 = v77;
          v38 = __p;
          if (v77 != __p)
          {
            do
              v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            v38 = __p;
          }
          v77 = v36;
          operator delete(v38);
        }
        v31 = v74;
        if (!v74)
          goto LABEL_105;
        v39 = v75;
        v33 = v74;
        if (v75 == v74)
          goto LABEL_104;
        do
        {
          v41 = (void *)*--v39;
          v40 = v41;
          *v39 = 0;
          if (v41)
            operator delete[](v40);
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'data_layout'";
    v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v78)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v77;
        v30 = __p;
        if (v77 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v77 = v28;
        operator delete(v30);
      }
      v31 = v74;
      if (!v74)
        goto LABEL_105;
      v32 = v75;
      v33 = v74;
      if (v75 == v74)
        goto LABEL_104;
      do
      {
        v35 = (void *)*--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          operator delete[](v34);
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

uint64_t mlir::mps::Conv3DWeightsGradientOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  const void **v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  const void **v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _BYTE *ArgAttrsAttr;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  uint64_t DefiningOp;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  void *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD v103[2];
  _QWORD v104[2];
  _QWORD v105[2];
  uint64_t v106;
  void *v107;
  uint64_t v108;
  _WORD v109[12];
  const void **v110[2];
  _WORD v111[24];
  const void **v112[2];
  _WORD v113[24];
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  _BYTE v118[96];
  void *v119;
  _QWORD *v120;
  void *__p;
  _QWORD **v122;
  char v123;
  void *v124[2];
  _QWORD v125[8];

  v125[6] = *MEMORY[0x1E0C80C00];
  v124[0] = v125;
  v124[1] = (void *)0x600000000;
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v124, 1);
  v5 = *((unsigned int *)*this + 11);
  v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  else
    v7 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 8);
  if (v8 == 3)
    goto LABEL_21;
  if (v8)
    goto LABEL_35;
  v9 = *(_QWORD *)v124[0];
  if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 7)
  {
    if (!v9 && !*((_QWORD *)v124[0] + 1) && !*((_QWORD *)v124[0] + 2))
    {
      v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v112[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    v113[8] = 259;
    mlir::OpState::emitOpError(this, v112, (uint64_t)&v114);
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
    if (v114)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
    if (v123)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v122;
        v14 = __p;
        if (v122 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v122 = v12;
        operator delete(v14);
      }
      v15 = v119;
      if (v119)
      {
        v16 = v120;
        v17 = v119;
        if (v120 != v119)
        {
          do
          {
            v19 = (void *)*--v16;
            v18 = v19;
            *v16 = 0;
            if (v19)
              operator delete[](v18);
          }
          while (v16 != v15);
          v17 = v119;
        }
        v120 = v15;
        operator delete(v17);
      }
      v22 = (const void **)v117;
      if (v117 != v118)
        goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v9 || *((_QWORD *)v124[0] + 1) || *((_QWORD *)v124[0] + 8))
    goto LABEL_21;
  v10 = 9;
LABEL_20:
  if (*((_QWORD *)v124[0] + v10))
    goto LABEL_21;
LABEL_35:
  v112[0] = (const void **)v113;
  v112[1] = (const void **)0x600000000;
  v20 = *(_QWORD **)(v7 + 40);
  if (v20)
    v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  else
    v21 = 0;
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v112, 1);
  if (*v112[0] == (const void *)1)
  {
    v24 = *((unsigned int *)*this + 11);
    v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    v27 = *(_QWORD *)(v25 + 64);
    v26 = v25 + 64;
    v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7)
      v28 = 1;
    if (v112[0][v28] == (const void *)1)
    {
      v110[0] = (const void **)v111;
      v110[1] = (const void **)0x600000000;
      if (BYTE3(v24))
        v29 = v26;
      else
        v29 = 0;
      v30 = *(_QWORD **)(v29 + 8);
      if (v30)
        v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      else
        v31 = 0;
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v110, 1);
      if (*v110[0] != (const void *)1)
        goto LABEL_84;
      v41 = *this;
      v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7)
        v42 = 1;
      if (v110[0][v42] == (const void *)1)
      {
        v43 = *((_DWORD *)v41 + 9);
        v44 = v41 - 2;
        if (v43)
          v45 = (uint64_t)v44;
        else
          v45 = 0;
        v46 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v46)
          v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
        else
          v47 = 0;
        v105[0] = v46;
        v105[1] = v47;
        ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v105);
        v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v105);
        v60 = (_BYTE *)(v58 + 8 * v59);
        v114 = &v116;
        v115 = 0x500000000;
        v61 = v60 - ArgAttrsAttr;
        if ((unint64_t)(v60 - ArgAttrsAttr) < 0x29)
        {
          v62 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, &v116, v61 >> 3, 8);
          v62 = v115;
        }
        if (v60 != ArgAttrsAttr)
        {
          memcpy(&v114[v62], ArgAttrsAttr, v60 - ArgAttrsAttr);
          v62 = v115;
        }
        LODWORD(v115) = v62 + ((unint64_t)v61 >> 3);
        v104[0] = *(_QWORD *)((*this)[9] + 88);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v104);
        if (DefiningOp)
        {
          v64 = DefiningOp;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
          {
            v107 = v109;
            v108 = 0x100000000;
            mlir::Operation::fold(v64, 0, 0, (uint64_t)&v107);
            v65 = (_QWORD *)(*(_QWORD *)v107 & 0xFFFFFFFFFFFFFFF8);
            v66 = mlir::DenseIntElementsAttr::classof((uint64_t)v65) & (v65 != 0);
            if (!v66)
              v65 = 0;
            if (v107 != v109)
              free(v107);
            if ((v66 & 1) != 0)
            {
              LODWORD(v115) = 0;
              if (v65)
                v67 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v65 + 8);
              else
                v67 = 0;
              mlir::getIntValues<long long>((uint64_t)v65, v67, (uint64_t)&v114, 1);
            }
          }
        }
        v68 = *this;
        v69 = (*this)[9];
        v70 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v70)
        {
          v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v70 + 8);
          v68 = *this;
          v69 = (*this)[9];
        }
        else
        {
          v71 = 0;
        }
        v104[0] = v70;
        v104[1] = v71;
        v72 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v72)
        {
          v73 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v72 + 8);
          v68 = *this;
        }
        else
        {
          v73 = 0;
        }
        v103[0] = v72;
        v103[1] = v73;
        v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
        v101 = v75;
        v76 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)];
        v78 = *(_QWORD *)(v76 + 64);
        v77 = v76 + 64;
        v79 = *(_DWORD *)(v78 + 8);
        v80 = (uint64_t)v114;
        v81 = v115;
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v77 = 0;
        v82 = *(_DWORD *)(*(_QWORD *)(v77 + 48) + 8);
        v106 = *(_QWORD *)(v77 + 24);
        mlir::IntegerAttr::getValue(&v106, (llvm::APInt *)&v107);
        if (v108 > 0x40)
        {
          v83 = *(void **)v107;
          operator delete[](v107);
        }
        else
        {
          v83 = v107;
        }
        if (!mlir::mps::verifyConvolutionOutputChannels(v68, v74, v101, v79, v80, v81, v82, (unint64_t)v83))goto LABEL_140;
        v102 = *this;
        v84 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v103);
        v86 = v85;
        v87 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)];
        v89 = *(_QWORD *)(v87 + 64);
        v88 = v87 + 64;
        v90 = *(_DWORD *)(v89 + 8);
        v91 = (uint64_t)v114;
        v92 = v115;
        if (!HIBYTE(*((_DWORD *)*this + 11)))
          v88 = 0;
        v93 = *(_DWORD *)(*(_QWORD *)(v88 + 48) + 8);
        v106 = *(_QWORD *)(v88 + 24);
        mlir::IntegerAttr::getValue(&v106, (llvm::APInt *)&v107);
        if (v108 > 0x40)
        {
          v94 = *(void **)v107;
          operator delete[](v107);
        }
        else
        {
          v94 = v107;
        }
        if (mlir::mps::verifyConvolutionInputChannels(v102, v84, v86, v90, v91, v92, v93, (uint64_t)v94))
        {
          v95 = *this;
          v96 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v103);
          v98 = v97;
          v99 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
          v11 = mlir::mps::verifyConvolutionBatches(v95, v96, v98, v99, v100);
        }
        else
        {
LABEL_140:
          v11 = 0;
        }
        v56 = v114;
        if (v114 == &v116)
          goto LABEL_102;
      }
      else
      {
LABEL_84:
        v107 = "failed: dilation values incompatible with given tensor layout.";
        v109[8] = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v114);
        v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
        if (v114)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
        if (!v123)
          goto LABEL_102;
        v48 = (_QWORD **)__p;
        if (__p)
        {
          v49 = v122;
          v50 = __p;
          if (v122 != __p)
          {
            do
              v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
            while (v49 != v48);
            v50 = __p;
          }
          v122 = v48;
          operator delete(v50);
        }
        v51 = v119;
        if (v119)
        {
          v52 = v120;
          v53 = v119;
          if (v120 != v119)
          {
            do
            {
              v55 = (void *)*--v52;
              v54 = v55;
              *v52 = 0;
              if (v55)
                operator delete[](v54);
            }
            while (v52 != v51);
            v53 = v119;
          }
          v120 = v51;
          operator delete(v53);
        }
        v56 = v117;
        if (v117 == v118)
        {
LABEL_102:
          v40 = v110[0];
          if ((_WORD *)v110[0] == v111)
            goto LABEL_72;
LABEL_71:
          free(v40);
          goto LABEL_72;
        }
      }
      free(v56);
      goto LABEL_102;
    }
  }
  v110[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v111[8] = 259;
  mlir::OpState::emitOpError(this, v110, (uint64_t)&v114);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
  if (v114)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
  if (v123)
  {
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v122;
      v34 = __p;
      if (v122 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v122 = v32;
      operator delete(v34);
    }
    v35 = v119;
    if (v119)
    {
      v36 = v120;
      v37 = v119;
      if (v120 != v119)
      {
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        v37 = v119;
      }
      v120 = v35;
      operator delete(v37);
    }
    v40 = (const void **)v117;
    if (v117 != v118)
      goto LABEL_71;
  }
LABEL_72:
  v22 = v112[0];
  if ((_WORD *)v112[0] != v113)
LABEL_40:
    free(v22);
LABEL_41:
  if (v124[0] != v125)
    free(v124[0]);
  return v11;
}

uint64_t mlir::mps::DepthwiseConv2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t Context;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  _OWORD v67[8];
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[32];
  void *v73;
  uint64_t v74;
  _BYTE v75[32];
  void *v76;
  uint64_t v77;
  _BYTE v78[32];
  uint64_t v79;
  char v80[8];
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v89 = a4;
  v90 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v79 = a6;
  v80[0] = 0;
  v81 = 0;
  v82 = v16;
  v83 = v17;
  v84 = v18;
  v19 = a5;
  v85 = a9;
  v86 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v79);
    if (v81)
      v81 = 0;
    mlir::OperationName::OperationName(v80, "mps.depthwise_conv_2d", 21, Context);
    v81 = 1;
    v19 = v90;
  }
  v87 = a4;
  v88 = a5;
  if (v19 < 2
    || (v21 = mlir::UnknownLoc::get(this, a2), !mlir::mps::DepthwiseConv2DOpAdaptor::verify(&v79, v21)))
  {
    v32 = mlir::Float32Type::get(this, a2);
    v33 = mlir::UnrankedTensorType::get(v32);
    v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v22 = v83;
  v23 = v82;
  v24 = v84;
  v25 = mlir::ValueRange::dereference_iterator(&v89, 0);
  v26 = mlir::ValueRange::dereference_iterator(&v89, 1);
  v27 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v27 = 0;
  v69 = v27;
  if (v27)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69);
    if (v28 != 4)
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "DepthwiseConv2DOp input should be rank 4");
  }
  v76 = v78;
  v77 = 0x400000000;
  v73 = v75;
  v74 = 0x400000000;
  v70 = v72;
  v71 = 0x400000000;
  if ((_QWORD)v24)
  {
    v29 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v24 + 8);
    mlir::getIntValues<long long>(v24, v29, (uint64_t)&v76, 1);
    if (*((_QWORD *)&v23 + 1))
      goto LABEL_16;
LABEL_24:
    mlir::getIntValues<long long>(*((uint64_t *)&v23 + 1), 0, (uint64_t)&v73, 1);
    if ((_QWORD)v22)
      goto LABEL_17;
LABEL_25:
    v31 = 0;
    goto LABEL_26;
  }
  mlir::getIntValues<long long>(0, 0, (uint64_t)&v76, 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_24;
LABEL_16:
  v30 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v23 + 1) + 8);
  mlir::getIntValues<long long>(*((uint64_t *)&v23 + 1), v30, (uint64_t)&v73, 1);
  if (!(_QWORD)v22)
    goto LABEL_25;
LABEL_17:
  v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v22 + 8);
LABEL_26:
  mlir::getIntValues<long long>(v22, v31, (uint64_t)&v70, 1);
  v37 = *(_DWORD *)(v23 + 8);
  if (v37 != 1)
  {
    if (v37)
    {
      v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Unsupported dataLayout");
      goto LABEL_92;
    }
    if ((_DWORD)v77)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 8 * v77;
      while (2)
      {
        v42 = *((_QWORD *)v76 + v38);
        switch((int)v38)
        {
          case 0:
            v43 = v42 == 1;
            v42 = v39;
            if (v43)
              goto LABEL_31;
            v65 = "stride != 1 not supported for dim 3 of NCHW";
            goto LABEL_91;
          case 1:
            v43 = v42 == 1;
            v42 = v39;
            if (v43)
              goto LABEL_31;
            v65 = "stride != 1 not supported for dim 2 of NCHW";
            goto LABEL_91;
          case 2:
            goto LABEL_31;
          case 3:
            v40 = *((_QWORD *)v76 + v38);
            v42 = v39;
LABEL_31:
            ++v38;
            v39 = v42;
            v41 -= 8;
            if (v41)
              continue;
            goto LABEL_48;
          default:
            v65 = "stride attr num dimensions should be <= 4";
            goto LABEL_91;
        }
      }
    }
    v40 = 0;
    v42 = 0;
LABEL_48:
    if ((_DWORD)v74)
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 8 * v74;
      while (2)
      {
        v52 = *((_QWORD *)v73 + v48);
        switch((int)v48)
        {
          case 0:
            v43 = v52 == 1;
            v52 = v49;
            if (!v43)
              goto LABEL_88;
            goto LABEL_51;
          case 1:
            v43 = v52 == 1;
            v52 = v49;
            if (v43)
              goto LABEL_51;
            v65 = "dilationRate != 1 not supported for dim 2";
            goto LABEL_91;
          case 2:
            goto LABEL_51;
          case 3:
            v50 = *((_QWORD *)v73 + v48);
            v52 = v49;
LABEL_51:
            ++v48;
            v49 = v52;
            v51 -= 8;
            if (v51)
              continue;
            goto LABEL_68;
          default:
            goto LABEL_87;
        }
      }
    }
    v50 = 0;
    v52 = 0;
LABEL_68:
    if ((_DWORD)v71)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 8 * v71;
      do
      {
        switch((int)v56)
        {
          case 4:
            v58 = *((_QWORD *)v70 + v56);
            break;
          case 5:
            v59 = *((_QWORD *)v70 + v56);
            break;
          case 7:
            v57 = *((_QWORD *)v70 + v56);
            break;
          default:
            break;
        }
        ++v56;
        v60 -= 8;
      }
      while (v60);
      goto LABEL_84;
    }
LABEL_83:
    v59 = 0;
    v58 = 0;
    v57 = 0;
LABEL_84:
    v68 = 0;
    memset(v67, 0, sizeof(v67));
    mlir::mps::buildConv2DDescriptor(v25, v26, 1, v40, v42, v50, v52, (uint64_t)v67, v57, v58, v59, *(_DWORD *)(*((_QWORD *)&v22 + 1) + 8), v37, *(_DWORD *)(*((_QWORD *)&v24 + 1) + 8), 0, 0, 0, 1);
    v66 = 0;
    v63 = (void *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v89, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v64 = mlir::ValueRange::dereference_iterator(&v89, 1);
    {
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v66);
      v35 = 1;
    }
    else
    {
      v35 = 0;
    }
    goto LABEL_93;
  }
  if ((_DWORD)v77)
  {
    v44 = 0;
    v45 = 0;
    v40 = 0;
    v46 = 8 * v77;
    while (2)
    {
      v42 = *((_QWORD *)v76 + v44);
      switch((int)v44)
      {
        case 0:
          v43 = v42 == 1;
          v42 = v45;
          if (v43)
            goto LABEL_40;
          v65 = "stride != 1 not supported for dim 3";
          goto LABEL_91;
        case 1:
          goto LABEL_40;
        case 2:
          v40 = *((_QWORD *)v76 + v44);
          v42 = v45;
          goto LABEL_40;
        case 3:
          v43 = v42 == 1;
          v42 = v45;
          if (!v43)
          {
            v65 = "stride != 1 not supported for dim 0";
            goto LABEL_91;
          }
LABEL_40:
          ++v44;
          v45 = v42;
          v46 -= 8;
          if (v46)
            continue;
          goto LABEL_58;
        default:
          v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "stride num dimensions should be <= 4");
          goto LABEL_92;
      }
    }
  }
  v40 = 0;
  v42 = 0;
LABEL_58:
  if (!(_DWORD)v74)
  {
    v50 = 0;
    v52 = 0;
LABEL_76:
    if ((_DWORD)v71)
    {
      v61 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v62 = 8 * v71;
      do
      {
        switch((int)v61)
        {
          case 2:
            v58 = *((_QWORD *)v70 + v61);
            break;
          case 3:
            v59 = *((_QWORD *)v70 + v61);
            break;
          case 5:
            v57 = *((_QWORD *)v70 + v61);
            break;
          default:
            break;
        }
        ++v61;
        v62 -= 8;
      }
      while (v62);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v55 = 8 * v74;
  while (2)
  {
    v52 = *((_QWORD *)v73 + v53);
    switch((int)v53)
    {
      case 0:
        v43 = v52 == 1;
        v52 = v54;
        if (v43)
          goto LABEL_61;
LABEL_88:
        v65 = "dilationRate != 1 not supported for dim 3";
        goto LABEL_91;
      case 1:
        goto LABEL_61;
      case 2:
        v50 = *((_QWORD *)v73 + v53);
        v52 = v54;
        goto LABEL_61;
      case 3:
        v43 = v52 == 1;
        v52 = v54;
        if (v43)
        {
LABEL_61:
          ++v53;
          v54 = v52;
          v55 -= 8;
          if (!v55)
            goto LABEL_76;
          continue;
        }
        v65 = "dilationRate != 1 not supported for dim 0";
LABEL_91:
        v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, v65);
LABEL_92:
        v35 = v47;
LABEL_93:
        if (v70 != v72)
          free(v70);
        if (v73 != v75)
          free(v73);
        if (v76 != v78)
          free(v76);
        return v35;
      default:
LABEL_87:
        v47 = mlir::emitOptionalError<char const(&)[43]>((uint64_t)a2, a3, "dilationRate num dimensions should be <= 4");
        goto LABEL_92;
    }
  }
}

uint64_t mlir::mps::DepthwiseConv2DOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
              v62 = v5;
              v63 = v6;
              Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              v8 = Type;
              if (Type)
                Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              v67 = v8;
              v68 = Type;
              ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (v60 = v5,
                    *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((_QWORD *)&v66 + 1) = v11,
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                v62 = v3;
                v63 = v12;
                v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                v14 = v13;
                if (v13)
                  v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                v67 = v14;
                v68 = v13;
                v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (v60 = v3,
                      *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((_QWORD *)&v66 + 1) = v17,
                      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                  v62 = v4;
                  v63 = v18;
                  v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v20 = v19;
                  if (v19)
                    v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  v67 = v20;
                  v68 = v19;
                  v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  v66 = xmmword_181240890;
                  if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                  {
                    v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                      return 1;
                  }
                  v59 = "'mps.depthwise_conv_2d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 eleme"
                        "nts attribute of shape {4, 2}";
                }
                else
                {
                  v59 = "'mps.depthwise_conv_2d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 element"
                        "s attribute of shape {4}";
                }
              }
              else
              {
                v59 = "'mps.depthwise_conv_2d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
              }
            }
            else
            {
              v59 = "'mps.depthwise_conv_2d' op requires attribute 'weights_layout'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          v62 = "'mps.depthwise_conv_2d' op requires attribute 'strides'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_97:
            v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          v62 = "'mps.depthwise_conv_2d' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_98;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        v62 = "'mps.depthwise_conv_2d' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_99;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_98;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      v62 = "'mps.depthwise_conv_2d' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_99;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_98;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    v62 = "'mps.depthwise_conv_2d' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_99;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_98;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv2DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v29 = a6;
  v30[0] = 0;
  v31 = 0;
  v32 = v16;
  v33 = v17;
  v34 = v18;
  v35 = a9;
  v36 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(v30, "mps.depthwise_conv_2d_data_gradient", 35, Context);
    v31 = 1;
  }
  v37 = a4;
  v38 = a5;
  if (a5 >= 3
    && (v20 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DepthwiseConv2DDataGradientOpAdaptor::verify(&v29, v20)))
  {
    v21 = mlir::ValueRange::dereference_iterator(v39, 0);
    v22 = mlir::ValueRange::dereference_iterator(v39, 1);
    v23 = mlir::ValueRange::dereference_iterator(v39, 2);
    v28 = 0;
    v24 = v28;
  }
  else
  {
    v25 = mlir::Float32Type::get(this, a2);
    v24 = mlir::UnrankedTensorType::get(v25);
  }
  v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv2DDataGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
              v62 = v5;
              v63 = v6;
              Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              v8 = Type;
              if (Type)
                Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              v67 = v8;
              v68 = Type;
              ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (v60 = v5,
                    *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((_QWORD *)&v66 + 1) = v11,
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                v62 = v3;
                v63 = v12;
                v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                v14 = v13;
                if (v13)
                  v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                v67 = v14;
                v68 = v13;
                v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (v60 = v3,
                      *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((_QWORD *)&v66 + 1) = v17,
                      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                  v62 = v4;
                  v63 = v18;
                  v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v20 = v19;
                  if (v19)
                    v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  v67 = v20;
                  v68 = v19;
                  v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  v66 = xmmword_181240890;
                  if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                  {
                    v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                      return 1;
                  }
                  v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'explicit_padding' failed to satisfy constrai"
                        "nt: ui64 elements attribute of shape {4, 2}";
                }
                else
                {
                  v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint"
                        ": ui64 elements attribute of shape {4}";
                }
              }
              else
              {
                v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 el"
                      "ements attribute of shape {4}";
              }
            }
            else
            {
              v59 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'weights_layout'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'strides'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_97:
            v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_98;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_99;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_98;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_99;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_98;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_99;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_98;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::`anonymous namespace'::inferDepthwiseConv2DDataGradReturnType(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t Value;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void *__src;
  uint64_t v34;
  _BYTE v35[32];
  unint64_t v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  __src = a3;
  v34 = a4;
  mlir::ValueRange::ValueRange(v36, (uint64_t)&__src, 2uLL);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a3 + 8))
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped inputType");
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a3 + 8);
  if (!a3)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped inputType");
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a4 + 8))
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped weightsType");
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)a4 + 8);
  if (!a4)
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped weightsType");
  if (*(_UNKNOWN **)(*(_QWORD *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a6 = mlir::UnrankedTensorType::get(v12);
    return 1;
  }
  __src = v35;
  v34 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a5, (uint64_t)&__src))
  {
    if ((_DWORD)v34 == 4)
    {
      v13 = __src;
      if (*(_QWORD *)__src == -1)
      {
        *(_QWORD *)__src = 0x8000000000000000;
        if (v13[1] != -1)
        {
LABEL_11:
          if (v13[2] != -1)
            goto LABEL_12;
          goto LABEL_42;
        }
      }
      else if (*((_QWORD *)__src + 1) != -1)
      {
        goto LABEL_11;
      }
      v13[1] = 0x8000000000000000;
      if (v13[2] != -1)
      {
LABEL_12:
        if (v13[3] != -1)
        {
LABEL_13:
          v30 = v32;
          v31 = 0x400000000;
          v14 = 4;
          goto LABEL_14;
        }
LABEL_43:
        v13[3] = 0x8000000000000000;
        goto LABEL_13;
      }
LABEL_42:
      v13[2] = 0x8000000000000000;
      if (v13[3] != -1)
        goto LABEL_13;
      goto LABEL_43;
    }
    if (mlir::emitOptionalError<char const(&)[39]>(a1, a2, "unexpected output shape passed"))
    {
      v14 = v34;
      v30 = v32;
      v31 = 0x400000000;
      if (!(_DWORD)v34)
      {
LABEL_17:
        v26 = a3;
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
        v27 = 0x400000000;
        v25 = v31;
        v26 = &v28;
        if ((_DWORD)v31 == 4)
        {
          v18 = (uint64_t *)Value;
          v19 = &v28;
          v28 = 0u;
          v29 = 0u;
          v28 = *(_OWORD *)v30;
          v29 = *((_OWORD *)v30 + 1);
          LODWORD(v27) = 4;
          if (*(_QWORD *)v30 == 0x8000000000000000)
          {
            v20 = *v18;
            if (v20 >= 1)
              *(_QWORD *)&v28 = v20;
          }
          v21 = 4;
        }
        else
        {
          if (!mlir::emitOptionalError<char const(&)[19],unsigned long &,char const(&)[11]>(a1, a2, "conv2D input rank ", (char **)&v25, "must be 4 "))
          {
            v22 = 0;
            v23 = v26;
            if (v26 == &v28)
            {
LABEL_35:
              if (v30 != v32)
                free(v30);
              goto LABEL_37;
            }
LABEL_34:
            free(v23);
            goto LABEL_35;
          }
          v19 = (__int128 *)v26;
          v21 = v27;
        }
        *a6 = mlir::RankedTensorType::get((uint64_t)v19, v21, v12, 0);
        v22 = 1;
        v23 = v26;
        if (v26 == &v28)
          goto LABEL_35;
        goto LABEL_34;
      }
      if (v34 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v34, 8);
        v16 = v34;
        if (!(_DWORD)v34)
          goto LABEL_16;
        v15 = v30;
LABEL_15:
        memcpy(v15, __src, 8 * v16);
LABEL_16:
        LODWORD(v31) = v14;
        goto LABEL_17;
      }
LABEL_14:
      v15 = v32;
      v16 = v14;
      goto LABEL_15;
    }
  }
  *a6 = mlir::UnrankedTensorType::get(v12);
  v22 = 1;
LABEL_37:
  if (__src != v35)
    free(__src);
  return v22;
}

uint64_t mlir::mps::DepthwiseConv2DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  v29 = a6;
  v30[0] = 0;
  v31 = 0;
  v32 = v16;
  v33 = v17;
  v34 = v18;
  v35 = a9;
  v36 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(v30, "mps.depthwise_conv_2d_weights_gradient", 38, Context);
    v31 = 1;
  }
  v37 = a4;
  v38 = a5;
  if (a5 >= 3
    && (v20 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DepthwiseConv2DWeightsGradientOpAdaptor::verify(&v29, v20)))
  {
    v21 = mlir::ValueRange::dereference_iterator(v39, 0);
    v22 = mlir::ValueRange::dereference_iterator(v39, 1);
    v23 = mlir::ValueRange::dereference_iterator(v39, 2);
    v28 = 0;
    v24 = v28;
  }
  else
  {
    v25 = mlir::Float32Type::get(this, a2);
    v24 = mlir::UnrankedTensorType::get(v25);
  }
  v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv2DWeightsGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  const char *v59;
  const char *v60;
  uint64_t OperandRange;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  _QWORD v65[2];
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD **v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
              v62 = v5;
              v63 = v6;
              Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              v8 = Type;
              if (Type)
                Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              v67 = v8;
              v68 = Type;
              ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (v60 = v5,
                    *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((_QWORD *)&v66 + 1) = v11,
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
                v62 = v3;
                v63 = v12;
                v13 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                v14 = v13;
                if (v13)
                  v13 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                v67 = v14;
                v68 = v13;
                v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (v60 = v3,
                      *(_QWORD *)&v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((_QWORD *)&v66 + 1) = v17,
                      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                  v62 = v4;
                  v63 = v18;
                  v19 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  v20 = v19;
                  if (v19)
                    v19 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  v67 = v20;
                  v68 = v19;
                  v21 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  v66 = xmmword_181240890;
                  if (v22 == 2 && *v21 == (_QWORD)v66 && v21[1] == *((_QWORD *)&v66 + 1))
                  {
                    v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
                      return 1;
                  }
                  v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'explicit_padding' failed to satisfy const"
                        "raint: ui64 elements attribute of shape {4, 2}";
                }
                else
                {
                  v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constra"
                        "int: ui64 elements attribute of shape {4}";
                }
              }
              else
              {
                v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'strides' failed to satisfy constraint: ui64"
                      " elements attribute of shape {4}";
              }
            }
            else
            {
              v59 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'weights_layout'";
            }
            v62 = v59;
            v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'strides'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v74;
              v54 = __p;
              if (v74 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v74 = v52;
              operator delete(v54);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v55 = v72;
            v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70)
                free(v69);
              return v25;
            }
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v29);
LABEL_97:
            v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'padding_style'";
          v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          if (v75)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v74;
              v48 = __p;
              if (v74 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v74 = v46;
              operator delete(v48);
            }
            v29 = v71;
            if (!v71)
              goto LABEL_99;
            v49 = v72;
            v31 = v71;
            if (v72 == v71)
              goto LABEL_98;
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'explicit_padding'";
        v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        if (v75)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v74;
            v42 = __p;
            if (v74 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v74 = v40;
            operator delete(v42);
          }
          v29 = v71;
          if (!v71)
            goto LABEL_99;
          v43 = v72;
          v31 = v71;
          if (v72 == v71)
            goto LABEL_98;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'dilation_rates'";
      v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      if (v75)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v74;
          v36 = __p;
          if (v74 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v74 = v34;
          operator delete(v36);
        }
        v29 = v71;
        if (!v71)
          goto LABEL_99;
        v37 = v72;
        v31 = v71;
        if (v72 == v71)
          goto LABEL_98;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'data_layout'";
    v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    if (v75)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v74;
        v28 = __p;
        if (v74 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v74 = v26;
        operator delete(v28);
      }
      v29 = v71;
      if (!v71)
        goto LABEL_99;
      v30 = v72;
      v31 = v71;
      if (v72 == v71)
        goto LABEL_98;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DOp::verify(mlir::mps::DepthwiseConv3DOp *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t NumElements;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  char *v21;
  __int128 v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  unint64_t *v74;
  char *v75;
  __int128 v76;
  _QWORD **v77;
  _QWORD **v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  const char *v94;
  const void ***v95;
  char *v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  const void ***v100;
  char *v101;
  char *v102;
  __int128 v103;
  _QWORD **v104;
  _QWORD **v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  const char *v113;
  const void ***v114;
  char *v115;
  char *v116;
  __int128 v117;
  uint64_t v118;
  const void ***v119;
  char *v120;
  char *v121;
  __int128 v122;
  _QWORD **v123;
  _QWORD **v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  const void ***v134;
  char *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  const void ***v139;
  char *v140;
  char *v141;
  __int128 v142;
  uint64_t v143;
  const void ***v144;
  char *v145;
  char *v146;
  __int128 v147;
  uint64_t v148;
  const void ***v149;
  char *v150;
  char *v151;
  __int128 v152;
  _QWORD **v153;
  _QWORD **v154;
  void *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  const char *v165;
  const void ***v166;
  char *v167;
  char *v168;
  __int128 v169;
  uint64_t v170;
  const void ***v171;
  char *v172;
  char *v173;
  __int128 v174;
  uint64_t v175;
  const void ***v176;
  char *v177;
  char *v178;
  __int128 v179;
  uint64_t v180;
  const void ***v181;
  char *v182;
  char *v183;
  __int128 v184;
  _QWORD **v185;
  _QWORD **v186;
  void *v187;
  _QWORD *v188;
  void *v189;
  void *v190;
  const void ***v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  const void ***v196;
  char *v197;
  char *v198;
  __int128 v199;
  uint64_t v200;
  const void ***v201;
  char *v202;
  char *v203;
  __int128 v204;
  _QWORD **v205;
  _QWORD **v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  uint64_t v211;
  const void ***v212;
  char *v213;
  char *v214;
  __int128 v215;
  uint64_t v216;
  const void ***v217;
  char *v218;
  char *v219;
  __int128 v220;
  uint64_t v221;
  const void ***v222;
  char *v223;
  char *v224;
  __int128 v225;
  uint64_t v226;
  const void ***v227;
  char *v228;
  char *v229;
  __int128 v230;
  _QWORD **v231;
  _QWORD **v232;
  void *v233;
  _QWORD *v234;
  void *v235;
  void *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  BOOL v243;
  unint64_t v244;
  BOOL v245;
  unint64_t v246;
  BOOL v247;
  unint64_t v248;
  BOOL v249;
  unint64_t v250;
  BOOL v251;
  unint64_t v252;
  BOOL v253;
  unint64_t v254;
  BOOL v255;
  unint64_t v256;
  unint64_t v257;
  BOOL v258;
  unint64_t v259;
  BOOL v260;
  unint64_t v261;
  BOOL v262;
  unint64_t v263;
  BOOL v264;
  unint64_t v265;
  BOOL v266;
  unint64_t v267;
  BOOL v268;
  int64_t v269;
  int64_t v270;
  int64_t v271;
  int64_t v272;
  int64_t v273;
  int64_t v274;
  int64_t v275;
  int64_t v276;
  int64_t v277;
  int64_t v278;
  int64_t v279;
  int64_t v280;
  int64_t v281;
  int64_t v282;
  int64_t v283;
  int64_t v284;
  int64_t v285;
  int64_t v286;
  int64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  const void **v294;
  const char *v295;
  uint64_t v296;
  __int16 v297;
  unint64_t v298;
  void *v299;
  unsigned int v300;
  const void **v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  unint64_t v308;
  const char *v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  _BYTE v313[16];
  __int16 v314;
  void *v315;
  unsigned int v316;
  void *v317;
  unsigned int v318;
  unsigned int v319;
  _BYTE v320[96];
  void *v321;
  _QWORD *v322;
  void *__p;
  _QWORD **v324;
  char v325;
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*(_QWORD *)this + 47);
  v3 = *(_QWORD *)(*(_QWORD *)this + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 56);
  v307 = *(uint64_t **)this;
  v6 = v307 + 10;
  if (!v2)
    v6 = 0;
  v7 = v6[4];
  v9 = v6[1];
  v8 = v6[2];
  v305 = v9;
  v306 = v7;
  v304 = v8;
  if (v7 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306) == 3)
  {
    v288 = v4;
    v291 = v5;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v306, 0);
    v1 = v306;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v1, NumElements);
    while (1)
    {
      v11 = v294 == v301 && v295 == v302;
      if (v11 && v296 == v303)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
      if (v300 > 0x40)
      {
        v12 = *(_QWORD *)v299;
        if (*(uint64_t *)v299 > 0)
        {
LABEL_18:
          if (v300 < 0x41)
            goto LABEL_48;
LABEL_46:
          if (v299)
            operator delete[](v299);
          goto LABEL_48;
        }
      }
      else
      {
        v12 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
        if (v12 > 0)
          goto LABEL_18;
      }
      v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v300 > 0x40)
      {
        v13 = *(_QWORD *)v299;
        if (!v315)
          goto LABEL_27;
      }
      else
      {
        v13 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
        if (!v315)
          goto LABEL_27;
      }
      LODWORD(v308) = 2;
      v309 = (const char *)v13;
      v14 = (char *)v317;
      if (v318 >= v319)
      {
        v31 = v318 + 1;
        if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
        {
          v34 = (char *)&v308 - (_BYTE *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v31, 24);
          v14 = (char *)v317;
          v15 = (unint64_t *)((char *)v317 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v31, 24);
          v15 = &v308;
          v14 = (char *)v317;
        }
      }
      else
      {
        v15 = &v308;
      }
      v16 = &v14[24 * v318];
      v17 = *(_OWORD *)v15;
      *((_QWORD *)v16 + 2) = v15[2];
      *(_OWORD *)v16 = v17;
      v18 = ++v318;
      if (v315)
      {
        LODWORD(v308) = 3;
        v309 = ", all values should be positive.";
        v310 = 32;
        v19 = (char *)v317;
        if (v18 >= v319)
        {
          v32 = v18 + 1;
          v33 = (char *)v317 + 24 * v18 > (char *)&v308;
          if (v317 <= &v308 && v33)
          {
            v35 = (char *)&v308 - (_BYTE *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v32, 24);
            v19 = (char *)v317;
            v20 = (unint64_t *)((char *)v317 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v32, 24);
            v20 = &v308;
            v19 = (char *)v317;
          }
        }
        else
        {
          v20 = &v308;
        }
        v21 = &v19[24 * v318];
        v22 = *(_OWORD *)v20;
        *((_QWORD *)v21 + 2) = v20[2];
        *(_OWORD *)v21 = v22;
        ++v318;
      }
LABEL_27:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      if (v325)
      {
        v23 = (_QWORD **)__p;
        if (__p)
        {
          v24 = v324;
          v25 = __p;
          if (v324 != __p)
          {
            do
              v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            v25 = __p;
          }
          v324 = v23;
          operator delete(v25);
        }
        v26 = v321;
        if (v321)
        {
          v27 = v322;
          v28 = v321;
          if (v322 != v321)
          {
            do
            {
              v30 = (void *)*--v27;
              v29 = v30;
              *v27 = 0;
              if (v30)
                operator delete[](v29);
            }
            while (v27 != v26);
            v28 = v321;
          }
          v322 = v26;
          operator delete(v28);
        }
        if (v317 != v320)
          free(v317);
      }
      if (v300 >= 0x41)
        goto LABEL_46;
LABEL_48:
      if (v12 < 1)
        return v1;
      ++v296;
    }
    v4 = v288;
    v5 = v291;
    if (!v305)
      goto LABEL_116;
LABEL_59:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v305) == 3)
    {
      v289 = v4;
      v292 = v5;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v305, 0);
      v36 = v305;
      v37 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v305);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v36, v37);
      while (1)
      {
        v38 = v294 == v301 && v295 == v302;
        if (v38 && v296 == v303)
        {
          v4 = v289;
          v5 = v292;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
        if (v300 > 0x40)
        {
          v39 = *(_QWORD *)v299;
          if (*(uint64_t *)v299 > 0)
          {
LABEL_73:
            if (v300 < 0x41)
              goto LABEL_103;
LABEL_101:
            if (v299)
              operator delete[](v299);
            goto LABEL_103;
          }
        }
        else
        {
          v39 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
          if (v39 > 0)
            goto LABEL_73;
        }
        v314 = 259;
        mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
        if (v300 > 0x40)
        {
          v40 = *(_QWORD *)v299;
          if (!v315)
            goto LABEL_82;
        }
        else
        {
          v40 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
          if (!v315)
            goto LABEL_82;
        }
        LODWORD(v308) = 2;
        v309 = (const char *)v40;
        v41 = (char *)v317;
        if (v318 >= v319)
        {
          v58 = v318 + 1;
          if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
          {
            v61 = (char *)&v308 - (_BYTE *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v58, 24);
            v41 = (char *)v317;
            v42 = (unint64_t *)((char *)v317 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v58, 24);
            v42 = &v308;
            v41 = (char *)v317;
          }
        }
        else
        {
          v42 = &v308;
        }
        v43 = &v41[24 * v318];
        v44 = *(_OWORD *)v42;
        *((_QWORD *)v43 + 2) = v42[2];
        *(_OWORD *)v43 = v44;
        v45 = ++v318;
        if (v315)
        {
          LODWORD(v308) = 3;
          v309 = ", all values should be positive.";
          v310 = 32;
          v46 = (char *)v317;
          if (v45 >= v319)
          {
            v59 = v45 + 1;
            v60 = (char *)v317 + 24 * v45 > (char *)&v308;
            if (v317 <= &v308 && v60)
            {
              v62 = (char *)&v308 - (_BYTE *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v59, 24);
              v46 = (char *)v317;
              v47 = (unint64_t *)((char *)v317 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v59, 24);
              v47 = &v308;
              v46 = (char *)v317;
            }
          }
          else
          {
            v47 = &v308;
          }
          v48 = &v46[24 * v318];
          v49 = *(_OWORD *)v47;
          *((_QWORD *)v48 + 2) = v47[2];
          *(_OWORD *)v48 = v49;
          ++v318;
        }
LABEL_82:
        v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
        if (v315)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
        if (v325)
        {
          v50 = (_QWORD **)__p;
          if (__p)
          {
            v51 = v324;
            v52 = __p;
            if (v324 != __p)
            {
              do
                v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
              while (v51 != v50);
              v52 = __p;
            }
            v324 = v50;
            operator delete(v52);
          }
          v53 = v321;
          if (v321)
          {
            v54 = v322;
            v55 = v321;
            if (v322 != v321)
            {
              do
              {
                v57 = (void *)*--v54;
                v56 = v57;
                *v54 = 0;
                if (v57)
                  operator delete[](v56);
              }
              while (v54 != v53);
              v55 = v321;
            }
            v322 = v53;
            operator delete(v55);
          }
          if (v317 != v320)
            free(v317);
        }
        if (v300 >= 0x41)
          goto LABEL_101;
LABEL_103:
        if (v39 < 1)
          return v1;
        ++v296;
      }
    }
  }
  else if (v305)
  {
    goto LABEL_59;
  }
LABEL_116:
  if (v304 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v304) == 6)
  {
    v290 = v4;
    v293 = v5;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v304, 0);
    v63 = v304;
    v64 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v304);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v63, v64);
    while (1)
    {
      v65 = v294 == v301 && v295 == v302;
      if (v65 && v296 == v303)
      {
        v4 = v290;
        v5 = v293;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
      if (v300 > 0x40)
      {
        v66 = *(_QWORD *)v299;
        if ((*(_QWORD *)v299 & 0x8000000000000000) == 0)
        {
LABEL_131:
          if (v300 < 0x41)
            goto LABEL_161;
LABEL_159:
          if (v299)
            operator delete[](v299);
          goto LABEL_161;
        }
      }
      else
      {
        v66 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
        if ((v66 & 0x8000000000000000) == 0)
          goto LABEL_131;
      }
      v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v300 > 0x40)
      {
        v67 = *(_QWORD *)v299;
        if (!v315)
          goto LABEL_140;
      }
      else
      {
        v67 = (uint64_t)((_QWORD)v299 << -(char)v300) >> -(char)v300;
        if (!v315)
          goto LABEL_140;
      }
      LODWORD(v308) = 2;
      v309 = (const char *)v67;
      v68 = (char *)v317;
      if (v318 >= v319)
      {
        v85 = v318 + 1;
        if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
        {
          v88 = (char *)&v308 - (_BYTE *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v85, 24);
          v68 = (char *)v317;
          v69 = (unint64_t *)((char *)v317 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v85, 24);
          v69 = &v308;
          v68 = (char *)v317;
        }
      }
      else
      {
        v69 = &v308;
      }
      v70 = &v68[24 * v318];
      v71 = *(_OWORD *)v69;
      *((_QWORD *)v70 + 2) = v69[2];
      *(_OWORD *)v70 = v71;
      v72 = ++v318;
      if (v315)
      {
        LODWORD(v308) = 3;
        v309 = ", all values should be non-negative.";
        v310 = 36;
        v73 = (char *)v317;
        if (v72 >= v319)
        {
          v86 = v72 + 1;
          v87 = (char *)v317 + 24 * v72 > (char *)&v308;
          if (v317 <= &v308 && v87)
          {
            v89 = (char *)&v308 - (_BYTE *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v86, 24);
            v73 = (char *)v317;
            v74 = (unint64_t *)((char *)v317 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v86, 24);
            v74 = &v308;
            v73 = (char *)v317;
          }
        }
        else
        {
          v74 = &v308;
        }
        v75 = &v73[24 * v318];
        v76 = *(_OWORD *)v74;
        *((_QWORD *)v75 + 2) = v74[2];
        *(_OWORD *)v75 = v76;
        ++v318;
      }
LABEL_140:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      if (v325)
      {
        v77 = (_QWORD **)__p;
        if (__p)
        {
          v78 = v324;
          v79 = __p;
          if (v324 != __p)
          {
            do
              v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
            while (v78 != v77);
            v79 = __p;
          }
          v324 = v77;
          operator delete(v79);
        }
        v80 = v321;
        if (v321)
        {
          v81 = v322;
          v82 = v321;
          if (v322 != v321)
          {
            do
            {
              v84 = (void *)*--v81;
              v83 = v84;
              *v81 = 0;
              if (v84)
                operator delete[](v83);
            }
            while (v81 != v80);
            v82 = v321;
          }
          v322 = v80;
          operator delete(v82);
        }
        if (v317 != v320)
          free(v317);
      }
      if (v300 >= 0x41)
        goto LABEL_159;
LABEL_161:
      if (v66 < 0)
        return v1;
      ++v296;
    }
  }
  v311 = (void *)v307[2 * (((unint64_t)*((unsigned int *)v307 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v311, (llvm::APInt *)&v315);
  if (v316 > 0x40)
  {
    v90 = *(_QWORD *)v315;
    operator delete[](v315);
    if (!v4)
    {
LABEL_197:
      v308 = 0;
      goto LABEL_198;
    }
  }
  else
  {
    v90 = (uint64_t)((_QWORD)v315 << -(uint64_t)v316) >> -(uint64_t)v316;
    if (!v4)
      goto LABEL_197;
  }
  v91 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v91)
    goto LABEL_197;
  v92 = *(void **)(*(_QWORD *)v91 + 136);
  if (v92 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v91 = 0;
  v308 = v91;
  if (v92 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
    v94 = (const char *)v93;
    if (v93 <= 3)
    {
      v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v315)
      {
        LODWORD(v294) = 2;
        v295 = v94;
        v95 = &v294;
        v96 = (char *)v317;
        if (v318 >= v319)
        {
          v239 = v318 + 1;
          if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
          {
            v271 = (char *)&v294 - (_BYTE *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v239, 24);
            v96 = (char *)v317;
            v95 = (const void ***)((char *)v317 + v271);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v239, 24);
            v95 = &v294;
            v96 = (char *)v317;
          }
        }
        v97 = &v96[24 * v318];
        v98 = *(_OWORD *)v95;
        *((_QWORD *)v97 + 2) = v95[2];
        *(_OWORD *)v97 = v98;
        v99 = ++v318;
        if (v315)
        {
          LODWORD(v294) = 3;
          v295 = ".";
          v296 = 1;
          v100 = &v294;
          v101 = (char *)v317;
          if (v99 >= v319)
          {
            v246 = v99 + 1;
            v247 = (char *)v317 + 24 * v99 > (char *)&v294;
            if (v317 <= &v294 && v247)
            {
              v276 = (char *)&v294 - (_BYTE *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v246, 24);
              v101 = (char *)v317;
              v100 = (const void ***)((char *)v317 + v276);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v246, 24);
              v100 = &v294;
              v101 = (char *)v317;
            }
          }
          v102 = &v101[24 * v318];
          v103 = *(_OWORD *)v100;
          *((_QWORD *)v102 + 2) = v100[2];
          *(_OWORD *)v102 = v103;
          ++v318;
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      if (!v325)
        return v1;
      v104 = (_QWORD **)__p;
      if (__p)
      {
        v105 = v324;
        v106 = __p;
        if (v324 != __p)
        {
          do
            v105 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v105 - 1);
          while (v105 != v104);
          v106 = __p;
        }
        v324 = v104;
        operator delete(v106);
      }
      v107 = v321;
      if (!v321)
        goto LABEL_338;
      v108 = v322;
      v109 = v321;
      if (v322 == v321)
        goto LABEL_337;
      do
      {
        v128 = (void *)*--v108;
        v127 = v128;
        *v108 = 0;
        if (v128)
          operator delete[](v127);
      }
      while (v108 != v107);
      goto LABEL_336;
    }
    if ((v90 & 0x80000000) != 0)
      v211 = 0;
    else
      v211 = v93;
    if ((unint64_t)((int)v90 - v211) <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v315)
      {
        LODWORD(v294) = 2;
        v295 = (const char *)(int)v90;
        v212 = &v294;
        v213 = (char *)v317;
        if (v318 >= v319)
        {
          v256 = v318 + 1;
          if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
          {
            v281 = (char *)&v294 - (_BYTE *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v256, 24);
            v213 = (char *)v317;
            v212 = (const void ***)((char *)v317 + v281);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v256, 24);
            v212 = &v294;
            v213 = (char *)v317;
          }
        }
        v214 = &v213[24 * v318];
        v215 = *(_OWORD *)v212;
        *((_QWORD *)v214 + 2) = v212[2];
        *(_OWORD *)v214 = v215;
        v216 = ++v318;
        if (v315)
        {
          LODWORD(v294) = 3;
          v295 = " for input rank ";
          v296 = 16;
          v217 = &v294;
          v218 = (char *)v317;
          if (v216 >= v319)
          {
            v261 = v216 + 1;
            v262 = (char *)v317 + 24 * v216 > (char *)&v294;
            if (v317 <= &v294 && v262)
            {
              v284 = (char *)&v294 - (_BYTE *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v261, 24);
              v218 = (char *)v317;
              v217 = (const void ***)((char *)v317 + v284);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v261, 24);
              v217 = &v294;
              v218 = (char *)v317;
            }
          }
          v219 = &v218[24 * v318];
          v220 = *(_OWORD *)v217;
          *((_QWORD *)v219 + 2) = v217[2];
          *(_OWORD *)v219 = v220;
          v221 = ++v318;
          if (v315)
          {
            LODWORD(v294) = 2;
            v295 = v94;
            v222 = &v294;
            v223 = (char *)v317;
            if (v221 >= v319)
            {
              v265 = v221 + 1;
              v266 = (char *)v317 + 24 * v221 > (char *)&v294;
              if (v317 <= &v294 && v266)
              {
                v286 = (char *)&v294 - (_BYTE *)v317;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v265, 24);
                v223 = (char *)v317;
                v222 = (const void ***)((char *)v317 + v286);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v265, 24);
                v222 = &v294;
                v223 = (char *)v317;
              }
            }
            v224 = &v223[24 * v318];
            v225 = *(_OWORD *)v222;
            *((_QWORD *)v224 + 2) = v222[2];
            *(_OWORD *)v224 = v225;
            v226 = ++v318;
            if (v315)
            {
              LODWORD(v294) = 3;
              v295 = ".";
              v296 = 1;
              v227 = &v294;
              v228 = (char *)v317;
              if (v226 >= v319)
              {
                v267 = v226 + 1;
                v268 = (char *)v317 + 24 * v226 > (char *)&v294;
                if (v317 <= &v294 && v268)
                {
                  v287 = (char *)&v294 - (_BYTE *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v267, 24);
                  v228 = (char *)v317;
                  v227 = (const void ***)((char *)v317 + v287);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v267, 24);
                  v227 = &v294;
                  v228 = (char *)v317;
                }
              }
              v229 = &v228[24 * v318];
              v230 = *(_OWORD *)v227;
              *((_QWORD *)v229 + 2) = v227[2];
              *(_OWORD *)v229 = v230;
              ++v318;
            }
          }
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      if (!v325)
        return v1;
      v231 = (_QWORD **)__p;
      if (__p)
      {
        v232 = v324;
        v233 = __p;
        if (v324 != __p)
        {
          do
            v232 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v232 - 1);
          while (v232 != v231);
          v233 = __p;
        }
        v324 = v231;
        operator delete(v233);
      }
      v107 = v321;
      if (!v321)
        goto LABEL_338;
      v234 = v322;
      v109 = v321;
      if (v322 == v321)
        goto LABEL_337;
      do
      {
        v236 = (void *)*--v234;
        v235 = v236;
        *v234 = 0;
        if (v236)
          operator delete[](v235);
      }
      while (v234 != v107);
LABEL_336:
      v109 = v321;
LABEL_337:
      v322 = v107;
      operator delete(v109);
      goto LABEL_338;
    }
  }
LABEL_198:
  v299 = 0;
  if (!v5 || (v110 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v298 = 0;
    goto LABEL_224;
  }
  v111 = *(void **)(*(_QWORD *)v110 + 136);
  if (v111 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v110 = 0;
  v298 = v110;
  if (v111 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v298), v112 == 4))
  {
LABEL_224:
    v311 = v313;
    v312 = 0x500000000;
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v311))
    {
      if (v5)
      {
        if (v308)
        {
          v129 = v312;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
          if (v130 != v129)
          {
            v297 = 259;
            mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
            if (v315)
            {
              LODWORD(v301) = 5;
              v302 = v165;
              v166 = &v301;
              v167 = (char *)v317;
              if (v318 >= v319)
              {
                v237 = v318 + 1;
                if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
                {
                  v269 = (char *)&v301 - (_BYTE *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v237, 24);
                  v167 = (char *)v317;
                  v166 = (const void ***)((char *)v317 + v269);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v237, 24);
                  v166 = &v301;
                  v167 = (char *)v317;
                }
              }
              v168 = &v167[24 * v318];
              v169 = *(_OWORD *)v166;
              *((_QWORD *)v168 + 2) = v166[2];
              *(_OWORD *)v168 = v169;
              v170 = ++v318;
              if (v315)
              {
                LODWORD(v301) = 3;
                v303 = 35;
                v171 = &v301;
                v172 = (char *)v317;
                if (v170 >= v319)
                {
                  v242 = v170 + 1;
                  v243 = (char *)v317 + 24 * v170 > (char *)&v301;
                  if (v317 <= &v301 && v243)
                  {
                    v274 = (char *)&v301 - (_BYTE *)v317;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v242, 24);
                    v172 = (char *)v317;
                    v171 = (const void ***)((char *)v317 + v274);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v242, 24);
                    v171 = &v301;
                    v172 = (char *)v317;
                  }
                }
                v173 = &v172[24 * v318];
                v174 = *(_OWORD *)v171;
                *((_QWORD *)v173 + 2) = v171[2];
                *(_OWORD *)v173 = v174;
                v175 = ++v318;
                if (v315)
                {
                  LODWORD(v301) = 5;
                  v302 = (const char *)v312;
                  v176 = &v301;
                  v177 = (char *)v317;
                  if (v175 >= v319)
                  {
                    v252 = v175 + 1;
                    v253 = (char *)v317 + 24 * v175 > (char *)&v301;
                    if (v317 <= &v301 && v253)
                    {
                      v279 = (char *)&v301 - (_BYTE *)v317;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v252, 24);
                      v177 = (char *)v317;
                      v176 = (const void ***)((char *)v317 + v279);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v252, 24);
                      v176 = &v301;
                      v177 = (char *)v317;
                    }
                  }
                  v178 = &v177[24 * v318];
                  v179 = *(_OWORD *)v176;
                  *((_QWORD *)v178 + 2) = v176[2];
                  *(_OWORD *)v178 = v179;
                  v180 = ++v318;
                  if (v315)
                  {
                    LODWORD(v301) = 3;
                    v302 = " values.";
                    v303 = 8;
                    v181 = &v301;
                    v182 = (char *)v317;
                    if (v180 >= v319)
                    {
                      v259 = v180 + 1;
                      v260 = (char *)v317 + 24 * v180 > (char *)&v301;
                      if (v317 <= &v301 && v260)
                      {
                        v283 = (char *)&v301 - (_BYTE *)v317;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v259, 24);
                        v182 = (char *)v317;
                        v181 = (const void ***)((char *)v317 + v283);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v259, 24);
                        v181 = &v301;
                        v182 = (char *)v317;
                      }
                    }
                    v183 = &v182[24 * v318];
                    v184 = *(_OWORD *)v181;
                    *((_QWORD *)v183 + 2) = v181[2];
                    *(_OWORD *)v183 = v184;
                    ++v318;
                  }
                }
              }
            }
            v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
            if (v315)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
            if (v325)
            {
              v185 = (_QWORD **)__p;
              if (__p)
              {
                v186 = v324;
                v187 = __p;
                if (v324 != __p)
                {
                  do
                    v186 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v186 - 1);
                  while (v186 != v185);
                  v187 = __p;
                }
                v324 = v185;
                operator delete(v187);
              }
              v156 = v321;
              if (!v321)
                goto LABEL_334;
              v188 = v322;
              v158 = v321;
              if (v322 == v321)
                goto LABEL_333;
              do
              {
                v190 = (void *)*--v188;
                v189 = v190;
                *v188 = 0;
                if (v190)
                  operator delete[](v189);
              }
              while (v188 != v156);
              goto LABEL_332;
            }
LABEL_258:
            v163 = v311;
            if (v311 != v313)
            {
LABEL_259:
              free(v163);
              return v1;
            }
            return v1;
          }
        }
        if (v299)
        {
          v131 = v312;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v299);
          if (v132 != v131)
          {
            v297 = 259;
            mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v299);
            if (v315)
            {
              LODWORD(v301) = 5;
              v302 = v133;
              v134 = &v301;
              v135 = (char *)v317;
              if (v318 >= v319)
              {
                v240 = v318 + 1;
                if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
                {
                  v272 = (char *)&v301 - (_BYTE *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v240, 24);
                  v135 = (char *)v317;
                  v134 = (const void ***)((char *)v317 + v272);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v240, 24);
                  v134 = &v301;
                  v135 = (char *)v317;
                }
              }
              v136 = &v135[24 * v318];
              v137 = *(_OWORD *)v134;
              *((_QWORD *)v136 + 2) = v134[2];
              *(_OWORD *)v136 = v137;
              v138 = ++v318;
              if (v315)
              {
                LODWORD(v301) = 3;
                v303 = 38;
                v139 = &v301;
                v140 = (char *)v317;
                if (v138 >= v319)
                {
                  v248 = v138 + 1;
                  v249 = (char *)v317 + 24 * v138 > (char *)&v301;
                  if (v317 <= &v301 && v249)
                  {
                    v277 = (char *)&v301 - (_BYTE *)v317;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v248, 24);
                    v140 = (char *)v317;
                    v139 = (const void ***)((char *)v317 + v277);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v248, 24);
                    v139 = &v301;
                    v140 = (char *)v317;
                  }
                }
                v141 = &v140[24 * v318];
                v142 = *(_OWORD *)v139;
                *((_QWORD *)v141 + 2) = v139[2];
                *(_OWORD *)v141 = v142;
                v143 = ++v318;
                if (v315)
                {
                  LODWORD(v301) = 5;
                  v302 = (const char *)v312;
                  v144 = &v301;
                  v145 = (char *)v317;
                  if (v143 >= v319)
                  {
                    v257 = v143 + 1;
                    v258 = (char *)v317 + 24 * v143 > (char *)&v301;
                    if (v317 <= &v301 && v258)
                    {
                      v282 = (char *)&v301 - (_BYTE *)v317;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v257, 24);
                      v145 = (char *)v317;
                      v144 = (const void ***)((char *)v317 + v282);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v257, 24);
                      v144 = &v301;
                      v145 = (char *)v317;
                    }
                  }
                  v146 = &v145[24 * v318];
                  v147 = *(_OWORD *)v144;
                  *((_QWORD *)v146 + 2) = v144[2];
                  *(_OWORD *)v146 = v147;
                  v148 = ++v318;
                  if (v315)
                  {
                    LODWORD(v301) = 3;
                    v302 = " values.";
                    v303 = 8;
                    v149 = &v301;
                    v150 = (char *)v317;
                    if (v148 >= v319)
                    {
                      v263 = v148 + 1;
                      v264 = (char *)v317 + 24 * v148 > (char *)&v301;
                      if (v317 <= &v301 && v264)
                      {
                        v285 = (char *)&v301 - (_BYTE *)v317;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v263, 24);
                        v150 = (char *)v317;
                        v149 = (const void ***)((char *)v317 + v285);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v263, 24);
                        v149 = &v301;
                        v150 = (char *)v317;
                      }
                    }
                    v151 = &v150[24 * v318];
                    v152 = *(_OWORD *)v149;
                    *((_QWORD *)v151 + 2) = v149[2];
                    *(_OWORD *)v151 = v152;
                    ++v318;
                  }
                }
              }
            }
            v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
            if (v315)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
            if (v325)
            {
              v153 = (_QWORD **)__p;
              if (__p)
              {
                v154 = v324;
                v155 = __p;
                if (v324 != __p)
                {
                  do
                    v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
                  while (v154 != v153);
                  v155 = __p;
                }
                v324 = v153;
                operator delete(v155);
              }
              v156 = v321;
              if (!v321)
                goto LABEL_334;
              v157 = v322;
              v158 = v321;
              if (v322 == v321)
              {
LABEL_333:
                v322 = v156;
                operator delete(v158);
LABEL_334:
                if (v317 != v320)
                  free(v317);
                goto LABEL_258;
              }
              do
              {
                v160 = (void *)*--v157;
                v159 = v160;
                *v157 = 0;
                if (v160)
                  operator delete[](v159);
              }
              while (v157 != v156);
LABEL_332:
              v158 = v321;
              goto LABEL_333;
            }
            goto LABEL_258;
          }
        }
      }
      else if ((_DWORD)v312 != 4)
      {
        v297 = 259;
        mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
        if (v315)
        {
          LODWORD(v301) = 3;
          v303 = 21;
          v191 = &v301;
          v192 = (char *)v317;
          if (v318 >= v319)
          {
            v238 = v318 + 1;
            if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
            {
              v270 = (char *)&v301 - (_BYTE *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v238, 24);
              v192 = (char *)v317;
              v191 = (const void ***)((char *)v317 + v270);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v238, 24);
              v191 = &v301;
              v192 = (char *)v317;
            }
          }
          v193 = &v192[24 * v318];
          v194 = *(_OWORD *)v191;
          *((_QWORD *)v193 + 2) = v191[2];
          *(_OWORD *)v193 = v194;
          v195 = ++v318;
          if (v315)
          {
            LODWORD(v301) = 5;
            v302 = (const char *)v312;
            v196 = &v301;
            v197 = (char *)v317;
            if (v195 >= v319)
            {
              v244 = v195 + 1;
              v245 = (char *)v317 + 24 * v195 > (char *)&v301;
              if (v317 <= &v301 && v245)
              {
                v275 = (char *)&v301 - (_BYTE *)v317;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v244, 24);
                v197 = (char *)v317;
                v196 = (const void ***)((char *)v317 + v275);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v244, 24);
                v196 = &v301;
                v197 = (char *)v317;
              }
            }
            v198 = &v197[24 * v318];
            v199 = *(_OWORD *)v196;
            *((_QWORD *)v198 + 2) = v196[2];
            *(_OWORD *)v198 = v199;
            v200 = ++v318;
            if (v315)
            {
              LODWORD(v301) = 3;
              v302 = " values.";
              v303 = 8;
              v201 = &v301;
              v202 = (char *)v317;
              if (v200 >= v319)
              {
                v254 = v200 + 1;
                v255 = (char *)v317 + 24 * v200 > (char *)&v301;
                if (v317 <= &v301 && v255)
                {
                  v280 = (char *)&v301 - (_BYTE *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v254, 24);
                  v202 = (char *)v317;
                  v201 = (const void ***)((char *)v317 + v280);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v254, 24);
                  v201 = &v301;
                  v202 = (char *)v317;
                }
              }
              v203 = &v202[24 * v318];
              v204 = *(_OWORD *)v201;
              *((_QWORD *)v203 + 2) = v201[2];
              *(_OWORD *)v203 = v204;
              ++v318;
            }
          }
        }
        v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
        if (v315)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
        if (v325)
        {
          v205 = (_QWORD **)__p;
          if (__p)
          {
            v206 = v324;
            v207 = __p;
            if (v324 != __p)
            {
              do
                v206 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v206 - 1);
              while (v206 != v205);
              v207 = __p;
            }
            v324 = v205;
            operator delete(v207);
          }
          v156 = v321;
          if (!v321)
            goto LABEL_334;
          v208 = v322;
          v158 = v321;
          if (v322 == v321)
            goto LABEL_333;
          do
          {
            v210 = (void *)*--v208;
            v209 = v210;
            *v208 = 0;
            if (v210)
              operator delete[](v209);
          }
          while (v208 != v156);
          goto LABEL_332;
        }
        goto LABEL_258;
      }
    }
    v1 = 1;
    goto LABEL_258;
  }
  v314 = 259;
  mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v298);
  if (v315)
  {
    LODWORD(v294) = 5;
    v295 = v113;
    v114 = &v294;
    v115 = (char *)v317;
    if (v318 >= v319)
    {
      v241 = v318 + 1;
      if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
      {
        v273 = (char *)&v294 - (_BYTE *)v317;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v241, 24);
        v115 = (char *)v317;
        v114 = (const void ***)((char *)v317 + v273);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v241, 24);
        v114 = &v294;
        v115 = (char *)v317;
      }
    }
    v116 = &v115[24 * v318];
    v117 = *(_OWORD *)v114;
    *((_QWORD *)v116 + 2) = v114[2];
    *(_OWORD *)v116 = v117;
    v118 = ++v318;
    if (v315)
    {
      LODWORD(v294) = 3;
      v295 = ".";
      v296 = 1;
      v119 = &v294;
      v120 = (char *)v317;
      if (v118 >= v319)
      {
        v250 = v118 + 1;
        v251 = (char *)v317 + 24 * v118 > (char *)&v294;
        if (v317 <= &v294 && v251)
        {
          v278 = (char *)&v294 - (_BYTE *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v250, 24);
          v120 = (char *)v317;
          v119 = (const void ***)((char *)v317 + v278);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v250, 24);
          v119 = &v294;
          v120 = (char *)v317;
        }
      }
      v121 = &v120[24 * v318];
      v122 = *(_OWORD *)v119;
      *((_QWORD *)v121 + 2) = v119[2];
      *(_OWORD *)v121 = v122;
      ++v318;
    }
  }
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
  if (v315)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
  if (v325)
  {
    v123 = (_QWORD **)__p;
    if (__p)
    {
      v124 = v324;
      v125 = __p;
      if (v324 != __p)
      {
        do
          v124 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v124 - 1);
        while (v124 != v123);
        v125 = __p;
      }
      v324 = v123;
      operator delete(v125);
    }
    v107 = v321;
    if (v321)
    {
      v126 = v322;
      v109 = v321;
      if (v322 == v321)
        goto LABEL_337;
      do
      {
        v162 = (void *)*--v126;
        v161 = v162;
        *v126 = 0;
        if (v162)
          operator delete[](v161);
      }
      while (v126 != v107);
      goto LABEL_336;
    }
LABEL_338:
    v163 = v317;
    if (v317 == v320)
      return v1;
    goto LABEL_259;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *ArgAttrsAttr;
  int64_t v33;
  int64_t v34;
  uint64_t Int;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  int64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int64_t v55;
  int64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int64_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int8x16_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t v70;
  int64_t v71;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t NumElements;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171[8];
  char v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  _QWORD v184[5];
  void *__p;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  void *v189;
  uint64_t v190;
  _BYTE v191[24];
  void *v192;
  uint64_t v193;
  _BYTE v194[24];
  void *v195;
  uint64_t v196;
  _BYTE v197[48];
  void *v198;
  uint64_t v199;
  _BYTE v200[40];
  void *v201;
  uint64_t v202;
  _BYTE v203[40];
  unint64_t v204[2];
  _QWORD *v205;
  uint64_t v206;
  _QWORD v207[10];

  v207[8] = *MEMORY[0x1E0C80C00];
  v180 = a4;
  v181 = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = *((_QWORD *)a7 + 4);
  }
  else
  {
    v16 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
  }
  v170 = a6;
  v171[0] = 0;
  v172 = 0;
  v173 = v14;
  v174 = v15;
  v175 = v16;
  v176 = a9;
  v17 = a5;
  v177 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v170);
    if (v172)
      v172 = 0;
    mlir::OperationName::OperationName(v171, "mps.depthwise_conv_3d", 21, Context);
    v172 = 1;
    v17 = v181;
  }
  v178 = a4;
  v179 = a5;
  if (v17 < 2
    || (v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::DepthwiseConv3DOpAdaptor::verify(&v170, v19)))
  {
    v31 = mlir::Float32Type::get(this, a2);
LABEL_24:
    v38 = mlir::UnrankedTensorType::get(v31);
    goto LABEL_25;
  }
  v20 = mlir::ValueRange::dereference_iterator(&v180, 0);
  v22 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v180, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = v173;
  v24 = v174;
  v25 = v175;
  v205 = (_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = v205;
  v206 = v22;
  mlir::ValueRange::ValueRange(v204, (uint64_t)&v205, 2uLL);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
    v164 = v21;
    v165 = v27;
    v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
    if (v28)
      goto LABEL_12;
  }
  else
  {
    v164 = 0;
    v165 = 0;
    v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
    if (v28)
    {
LABEL_12:
      v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v22 + 8);
      v162 = v22;
      v163 = v29;
      v30 = v164;
      if (!v164)
        goto LABEL_23;
      goto LABEL_17;
    }
  }
  v22 = 0;
  v162 = 0;
  v163 = v28;
  v30 = v164;
  if (!v164)
  {
LABEL_23:
    v31 = v26;
    goto LABEL_24;
  }
LABEL_17:
  if (*(_UNKNOWN **)(*v30 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !v22
    || *(_UNKNOWN **)(*(_QWORD *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_23;
  }
  v201 = v203;
  v202 = 0x500000000;
  v198 = v200;
  v199 = 0x500000000;
  v195 = v197;
  v196 = 0x600000000;
  v192 = v194;
  v193 = 0x300000000;
  v189 = v191;
  v190 = 0x300000000;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v164);
  v34 = v33;
  v168 = *((_QWORD *)&v23 + 1);
  v169 = v25;
  v166 = v23;
  v167 = v24;
  if ((_QWORD)v23)
  {
    Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v166);
    v36 = v196;
    v37 = v196 > 6;
    if ((_DWORD)v196 == 6)
      goto LABEL_34;
  }
  else
  {
    Int = -4;
    v36 = v196;
    v37 = v196 > 6;
    if ((_DWORD)v196 == 6)
      goto LABEL_34;
  }
  if (!v37)
  {
    if (HIDWORD(v196) > 5
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v195, v197, 6uLL, 8), v36 = v196, (_DWORD)v196 != 6))
    {
      bzero((char *)v195 + 8 * v36, 48 - 8 * v36);
    }
  }
  LODWORD(v196) = 6;
LABEL_34:
  v41 = v193;
  if ((_DWORD)v193 == 3)
  {
    v42 = v190;
    v43 = v190 > 3;
    if ((_DWORD)v190 == 3)
      goto LABEL_36;
  }
  else
  {
    if (v193 <= 3)
    {
      v50 = v193;
      v51 = v193;
      if (HIDWORD(v193) <= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, v194, 3uLL, 8);
        v50 = v193;
        v51 = v193;
      }
      memset_pattern16((char *)v192 + 8 * v50, &unk_181233190, 24 - 8 * v41);
      v49 = v51 - v41 + 3;
    }
    else
    {
      v49 = 3;
    }
    LODWORD(v193) = v49;
    v42 = v190;
    v43 = v190 > 3;
    if ((_DWORD)v190 == 3)
    {
LABEL_36:
      v44 = v202;
      v45 = v202 > 5;
      if ((_DWORD)v202 == 5)
        goto LABEL_37;
      goto LABEL_53;
    }
  }
  if (v43)
  {
    v52 = 3;
  }
  else
  {
    v53 = v42;
    v54 = v42;
    if (HIDWORD(v190) <= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v191, 3uLL, 8);
      v53 = v190;
      v54 = v190;
    }
    memset_pattern16((char *)v189 + 8 * v53, &unk_181233190, 24 - 8 * v42);
    v52 = v54 - v42 + 3;
  }
  LODWORD(v190) = v52;
  v44 = v202;
  v45 = v202 > 5;
  if ((_DWORD)v202 == 5)
  {
LABEL_37:
    v46 = v199;
    v47 = v199 > 5;
    if ((_DWORD)v199 == 5)
      goto LABEL_38;
    goto LABEL_58;
  }
LABEL_53:
  if (!v45)
  {
    if (HIDWORD(v202) > 4
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, v203, 5uLL, 8), v44 = v202, (_DWORD)v202 != 5))
    {
      bzero((char *)v201 + 8 * v44, 40 - 8 * v44);
    }
  }
  LODWORD(v202) = 5;
  v46 = v199;
  v47 = v199 > 5;
  if ((_DWORD)v199 == 5)
  {
LABEL_38:
    v48 = v34 - 4;
    if (v34 < 4)
      goto LABEL_98;
    goto LABEL_63;
  }
LABEL_58:
  if (!v47)
  {
    if (HIDWORD(v199) > 4
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v200, 5uLL, 8), v46 = v199, (_DWORD)v199 != 5))
    {
      bzero((char *)v198 + 8 * v46, 40 - 8 * v46);
    }
  }
  LODWORD(v199) = 5;
  v48 = v34 - 4;
  if (v34 >= 4)
  {
LABEL_63:
    v55 = (v34 & (Int >> 63)) + Int;
    if (v55 >= v34 || v55 < v48)
      v57 = v48;
    else
      v57 = (v34 & (Int >> 63)) + Int;
    if (v34 != 5)
    {
      if ((unint64_t)v34 >= 5)
      {
        if (v34 <= (unint64_t)HIDWORD(v199))
        {
          v58 = 5;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v200, v34, 8);
          v58 = v199;
        }
        if (v34 != v58)
          bzero((char *)v198 + 8 * v58, 8 * (v34 - v58));
      }
      LODWORD(v199) = v34;
    }
    v59 = v198;
    v60 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    v61 = vdupq_n_s64(v57);
    v62 = vdupq_n_s64(v48);
    v63 = (int64x2_t)xmmword_181233120;
    v64 = (int8x16_t *)((char *)v198 + 16);
    v65 = vdupq_n_s64(2uLL);
    v66 = vdupq_n_s64(1uLL);
    v67 = vdupq_n_s64(3uLL);
    v68 = vdupq_n_s64(4uLL);
    v69 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v70 = vaddq_s64(v63, v65);
      v64[-1] = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v63, v61), (int8x16_t)vcgtq_s64(v62, v63)), (int8x16_t)v63, vbslq_s8((int8x16_t)vcgtq_s64(v61, v63), (int8x16_t)vaddq_s64(v63, v66), (int8x16_t)v62));
      *v64 = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v70, v61), (int8x16_t)vcgtq_s64(v62, v70)), (int8x16_t)v70, vbslq_s8((int8x16_t)vcgtq_s64(v61, v70), (int8x16_t)vaddq_s64(v63, v67), (int8x16_t)v62));
      v63 = vaddq_s64(v63, v68);
      v64 += 2;
      v69 -= 4;
    }
    while (v69);
    for (; v34 != v60; ++v60)
    {
      if (v60 < v57)
        v71 = v60 + 1;
      else
        v71 = v48;
      if (v60 < v48 || v60 > v57)
        v71 = v60;
      v59[v60] = v71;
    }
    v73 = v202;
    if (v34 != v202)
    {
      if (v34 >= (unint64_t)v202)
      {
        if (v34 > (unint64_t)HIDWORD(v202))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, v203, v34, 8);
          v73 = v202;
        }
        if (v34 != v73)
          bzero((char *)v201 + 8 * v73, 8 * (v34 - v73));
      }
      LODWORD(v202) = v34;
    }
    v74 = (uint64_t *)v198;
    v75 = v201;
    v76 = v34;
    do
    {
      v78 = *ArgAttrsAttr++;
      v77 = v78;
      v79 = *v74++;
      v75[v79] = v77;
      --v76;
    }
    while (v76);
  }
LABEL_98:
  if (v169 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v169) == 3)
  {
    LODWORD(v193) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v169, 0);
    v80 = v169;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v169);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v80, NumElements);
    while (1)
    {
      v82 = v205 == v182 && v206 == v183;
      if (v82 && v207[0] == v184[0])
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40)
        v83 = *(_QWORD *)__p;
      else
        v83 = (uint64_t)((_QWORD)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      v84 = v193;
      if (v193 >= (unint64_t)HIDWORD(v193))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, v194, v193 + 1, 8);
        v84 = v193;
      }
      *((_QWORD *)v192 + v84) = v83;
      LODWORD(v193) = v193 + 1;
      if (v186 >= 0x41 && __p)
        operator delete[](__p);
      ++v207[0];
    }
  }
  if (*((_QWORD *)&v23 + 1) && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v168) == 3)
  {
    LODWORD(v190) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v168, 0);
    v85 = v168;
    v86 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v168);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v85, v86);
    while (1)
    {
      v87 = v205 == v182 && v206 == v183;
      if (v87 && v207[0] == v184[0])
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40)
        v88 = *(_QWORD *)__p;
      else
        v88 = (uint64_t)((_QWORD)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      v89 = v190;
      if (v190 >= (unint64_t)HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v191, v190 + 1, 8);
        v89 = v190;
      }
      *((_QWORD *)v189 + v89) = v88;
      LODWORD(v190) = v190 + 1;
      if (v186 >= 0x41 && __p)
        operator delete[](__p);
      ++v207[0];
    }
  }
  if ((_QWORD)v24 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167) == 6)
  {
    LODWORD(v196) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v167, 0);
    v90 = v167;
    v91 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v90, v91);
    while (1)
    {
      v92 = v205 == v182 && v206 == v183;
      if (v92 && v207[0] == v184[0])
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40)
        v93 = *(_QWORD *)__p;
      else
        v93 = (uint64_t)((_QWORD)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      v94 = v196;
      if (v196 >= (unint64_t)HIDWORD(v196))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v195, v197, v196 + 1, 8);
        v94 = v196;
      }
      *((_QWORD *)v195 + v94) = v93;
      LODWORD(v196) = v196 + 1;
      if (v186 >= 0x41 && __p)
        operator delete[](__p);
      ++v207[0];
    }
  }
  if (*((_QWORD *)&v24 + 1))
    v95 = *(_DWORD *)(*((_QWORD *)&v24 + 1) + 8);
  else
    v95 = 2;
  v96 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v162);
  __p = &v187;
  v187 = 0u;
  v188 = 0u;
  v186 = 0x400000004;
  if (Int >= 0)
    v98 = v34;
  else
    v98 = 0;
  if (v97 == 4)
  {
    v99 = Int - v98 + 4;
    if (v99 <= 3)
    {
      *(_QWORD *)&v187 = *(_QWORD *)(v96 + 8 * v99);
      *((_QWORD *)&v187 + 1) = *(_QWORD *)(v96 + 8 * (v99 == 0));
      v100 = 8;
      if (v99 <= 1)
        v100 = 16;
      *(_QWORD *)&v188 = *(_QWORD *)(v96 + v100);
      v37 = v99 > 2;
      v101 = 24;
      if (v37)
        v101 = 16;
      *((_QWORD *)&v188 + 1) = *(_QWORD *)(v96 + v101);
    }
  }
  v182 = v184;
  v183 = 0x500000000;
  v102 = v202;
  v205 = v207;
  v206 = 0x800000000;
  if (!(_DWORD)v202)
  {
    v105 = -4;
    v106 = v201;
    v104 = (char *)v207;
LABEL_173:
    v107 = 0;
    if (v105 < 4 || (unint64_t)(v104 - v106) < 0x20)
      goto LABEL_178;
    v108 = 0;
    v107 = v105 & 0xFFFFFFFFFFFFFFFCLL;
    v109 = v105 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v110 = *(_OWORD *)&v106[v108 + 16];
      v111 = &v104[v108];
      *(_OWORD *)v111 = *(_OWORD *)&v106[v108];
      *((_OWORD *)v111 + 1) = v110;
      v108 += 32;
      v109 -= 4;
    }
    while (v109);
    while (v105 != v107)
    {
LABEL_178:
      *(_QWORD *)&v104[8 * v107] = *(_QWORD *)&v106[8 * v107];
      ++v107;
    }
    goto LABEL_179;
  }
  if (v202 < 9)
  {
    v103 = 0;
    v104 = (char *)v207;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, v207, v202, 8);
    v103 = v206;
    v104 = (char *)v205;
  }
  if (v102 != v103)
    bzero(&v104[8 * v103], 8 * (v102 - v103));
  LODWORD(v206) = v102;
  v106 = v201;
  v105 = v102 - 4;
  if (v102 != 4)
    goto LABEL_173;
LABEL_179:
  v112 = v102 - 3;
  v113 = __p;
  *(_QWORD *)&v104[8 * v105] = *(_QWORD *)__p;
  v114 = v192;
  if (v95 == 2 || v95 == 4)
  {
    v115 = *(_QWORD *)&v106[8 * v112];
    if (*(uint64_t *)v192 <= 1)
      v116 = 1;
    else
      v116 = *(_QWORD *)v192;
    v117 = *(_QWORD *)&v106[8 * v112];
    if ((unint64_t)v116 >= 2)
    {
      v117 = 0x8000000000000000;
      if (v115 != 0x8000000000000000)
      {
        v117 = v115 / v116;
        if (v115 / v116 * v116 != v115)
          v117 += v115 >= 0;
      }
    }
    *(_QWORD *)&v104[8 * v112] = v117;
    v118 = *(_QWORD *)&v106[8 * v102 - 16];
    if ((uint64_t)v114[1] <= 1)
      v119 = 1;
    else
      v119 = v114[1];
    v120 = *(_QWORD *)&v106[8 * v102 - 16];
    if ((unint64_t)v119 >= 2)
    {
      v120 = 0x8000000000000000;
      if (v118 != 0x8000000000000000)
      {
        v120 = v118 / v119;
        if (v118 / v119 * v119 != v118)
          v120 += v118 >= 0;
      }
    }
    *(_QWORD *)&v104[8 * v102 - 16] = v120;
    v121 = v102 - 1;
    v122 = *(_QWORD *)&v106[8 * v102 - 8];
    v123 = v114[2];
    if (v123 <= 1)
      v123 = 1;
    if ((unint64_t)v123 >= 2)
    {
      if (v122 == 0x8000000000000000)
      {
        v122 = 0x8000000000000000;
      }
      else if (v122 / v123 * v123 == v122)
      {
        v122 /= v123;
      }
      else
      {
        v122 = v122 / v123 + (v122 >= 0);
      }
    }
  }
  else
  {
    v124 = v189;
    v125 = *(_QWORD *)&v106[8 * v112];
    v126 = v195;
    v127 = v113[1];
    v128 = 0x8000000000000000;
    v129 = v127 == 0x8000000000000000 || v125 == 0x8000000000000000;
    v130 = 0x8000000000000000;
    if (!v129)
    {
      v131 = *((_QWORD *)v195 + 1) & ~(*((uint64_t *)v195 + 1) >> 63);
      v132 = *(_QWORD *)v195 & ~(*(uint64_t *)v195 >> 63);
      v133 = *(_QWORD *)v189;
      if (*(uint64_t *)v189 <= 1)
        v133 = 1;
      v134 = *(_QWORD *)v192;
      if (*(uint64_t *)v192 <= 1)
        v134 = 1;
      if (v95 == 1)
      {
        v131 = 0;
        v132 = 0;
      }
      v135 = v131 + v125 + v132 + v134 + ~(v133 * (v127 - 1));
      v136 = v135 / v134;
      if (v135 / v134 * v134 == v135)
        v137 = 0;
      else
        v137 = v135 >> 63;
      v130 = (v137 + v136) & ~((v137 + v136) >> 63);
    }
    *(_QWORD *)&v104[8 * v112] = v130;
    v138 = *(_QWORD *)&v106[8 * v102 - 16];
    v139 = v113[2];
    if (v139 != 0x8000000000000000 && v138 != 0x8000000000000000)
    {
      v141 = v126[3] & ~((uint64_t)v126[3] >> 63);
      v142 = v126[2] & ~((uint64_t)v126[2] >> 63);
      v143 = v124[1];
      if (v143 <= 1)
        v143 = 1;
      v144 = v114[1];
      if (v144 <= 1)
        v144 = 1;
      if (v95 == 1)
      {
        v141 = 0;
        v142 = 0;
      }
      v145 = v141 + v138 + v142 + v144 + ~(v143 * (v139 - 1));
      v146 = v145 / v144;
      if (v145 / v144 * v144 == v145)
        v147 = 0;
      else
        v147 = v145 >> 63;
      v128 = (v147 + v146) & ~((v147 + v146) >> 63);
    }
    *(_QWORD *)&v104[8 * v102 - 16] = v128;
    v121 = v102 - 1;
    v148 = v113[3];
    v122 = 0x8000000000000000;
    if (v148 != 0x8000000000000000)
    {
      v149 = *(_QWORD *)&v106[8 * v121];
      if (v149 != 0x8000000000000000)
      {
        v150 = v126[5] & ~((uint64_t)v126[5] >> 63);
        v151 = v126[4] & ~((uint64_t)v126[4] >> 63);
        v152 = v124[2];
        if (v152 <= 1)
          v152 = 1;
        v153 = v114[2];
        if (v153 <= 1)
          v153 = 1;
        if (v95 == 1)
        {
          v150 = 0;
          v151 = 0;
        }
        v154 = v150 + v149 + v151 + v153 + ~(v152 * (v148 - 1));
        v155 = v154 / v153;
        if (v154 / v153 * v153 == v154)
          v156 = 0;
        else
          v156 = v154 >> 63;
        v122 = (v156 + v155) & ~((v156 + v155) >> 63);
      }
    }
  }
  *(_QWORD *)&v104[8 * v121] = v122;
  v157 = v183;
  if ((_DWORD)v183 != (_DWORD)v102)
  {
    if (v183 <= v102)
    {
      if (HIDWORD(v183) < v102)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, v184, v102, 8);
        v157 = v183;
      }
      if (v157 != (_DWORD)v102)
        bzero((char *)v182 + 8 * v157, 8 * (v102 - v157));
    }
    LODWORD(v183) = v102;
    v104 = (char *)v205;
  }
  if ((_DWORD)v102)
  {
    v158 = (uint64_t *)v198;
    v159 = v182;
    v160 = v102;
    do
    {
      v161 = *v158++;
      *v159++ = *(_QWORD *)&v104[8 * v161];
      --v160;
    }
    while (v160);
  }
  if (v104 != (char *)v207)
  {
    free(v104);
    v102 = v183;
  }
  v38 = mlir::RankedTensorType::get((uint64_t)v182, v102, v26, 0);
  if (v182 != v184)
    free(v182);
  if (__p != &v187)
    free(__p);
  if (v189 != v191)
    free(v189);
  if (v192 != v194)
    free(v192);
  if (v195 != v197)
    free(v195);
  if (v198 != v200)
    free(v198);
  if (v201 != v203)
    free(v201);
LABEL_25:
  v39 = *(_DWORD *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    v39 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv3DOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *Type;
  _QWORD *v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v61;
  const char *v62;
  uint64_t Value;
  uint64_t v64;
  uint64_t OperandRange;
  const char *v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  _BYTE v73[96];
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD **v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)a1[4];
  if (v3)
  {
    v4 = (const char *)a1[5];
    if (v4)
    {
      if (a1[6])
      {
        v5 = (const char *)a1[7];
        if (v5)
        {
          v6 = (const char *)a1[3];
          v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
          v66 = v5;
          v67 = v7;
          Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
          v9 = Type;
          if (Type)
            Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
          v70 = (uint64_t)v9;
          v71 = Type;
          ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
          v69 = 3;
          if (v11 == 1 && *ArgAttrsAttr == v69)
          {
            v62 = v5;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
            v64 = v12;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
              v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
              v66 = v3;
              v67 = v13;
              v14 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
              v15 = v14;
              if (v14)
                v14 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
              v70 = (uint64_t)v15;
              v71 = v14;
              v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
              v69 = 3;
              if (v17 == 1
                && *v16 == v69
                && (v62 = v3,
                    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                    v64 = v18,
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                v66 = v4;
                v67 = v19;
                v20 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
                v21 = v20;
                if (v20)
                  v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
                v70 = (uint64_t)v21;
                v71 = v20;
                v22 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
                v69 = 6;
                if (v23 == 1
                  && *v22 == v69
                  && (v62 = v4,
                      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                      v64 = v24,
                      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  if (!v6)
                    return 1;
                  v66 = v6;
                  v70 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
                  if (mlir::Type::isSignedInteger((mlir::Type *)&v70, 32))
                    return 1;
                  v61 = "'mps.depthwise_conv_3d' op attribute 'channelAxis' failed to satisfy constraint: 32-bit signed i"
                        "nteger attribute";
                }
                else
                {
                  v61 = "'mps.depthwise_conv_3d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 eleme"
                        "nts attribute of shape {6}";
                }
              }
              else
              {
                v61 = "'mps.depthwise_conv_3d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements "
                      "attribute of shape {3}";
              }
              v66 = v61;
              v68 = 259;
              mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
              v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v70);
              return v25;
            }
          }
          v66 = "'mps.depthwise_conv_3d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {3}";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          if (v78)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v77;
              v48 = __p;
              if (v77 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v77 = v46;
              operator delete(v48);
            }
            v29 = v74;
            if (!v74)
              goto LABEL_81;
            v49 = v75;
            v31 = v74;
            if (v75 == v74)
            {
LABEL_80:
              v75 = v29;
              operator delete(v31);
LABEL_81:
              if (v72 != v73)
                free(v72);
              return v25;
            }
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
LABEL_79:
            v31 = v74;
            goto LABEL_80;
          }
        }
        else
        {
          v66 = "'mps.depthwise_conv_3d' op requires attribute 'strides'";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          if (v78)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v77;
              v54 = __p;
              if (v77 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v77 = v52;
              operator delete(v54);
            }
            v55 = v74;
            if (v74)
            {
              v56 = v75;
              v57 = v74;
              if (v75 != v74)
              {
                do
                {
                  v59 = (void *)*--v56;
                  v58 = v59;
                  *v56 = 0;
                  if (v59)
                    operator delete[](v58);
                }
                while (v56 != v55);
                v57 = v74;
              }
              v75 = v55;
              operator delete(v57);
            }
            if (v72 != v73)
              free(v72);
          }
        }
      }
      else
      {
        v66 = "'mps.depthwise_conv_3d' op requires attribute 'padding_style'";
        v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
        if (v70)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
        if (v78)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v77;
            v42 = __p;
            if (v77 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v77 = v40;
            operator delete(v42);
          }
          v29 = v74;
          if (!v74)
            goto LABEL_81;
          v43 = v75;
          v31 = v74;
          if (v75 == v74)
            goto LABEL_80;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_79;
        }
      }
    }
    else
    {
      v66 = "'mps.depthwise_conv_3d' op requires attribute 'explicit_padding'";
      v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
      if (v70)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
      if (v78)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v77;
          v36 = __p;
          if (v77 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v77 = v34;
          operator delete(v36);
        }
        v29 = v74;
        if (!v74)
          goto LABEL_81;
        v37 = v75;
        v31 = v74;
        if (v75 == v74)
          goto LABEL_80;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    v66 = "'mps.depthwise_conv_3d' op requires attribute 'dilation_rates'";
    v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if (v70)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    if (v78)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v77;
        v28 = __p;
        if (v77 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v77 = v26;
        operator delete(v28);
      }
      v29 = v74;
      if (!v74)
        goto LABEL_81;
      v30 = v75;
      v31 = v74;
      if (v75 == v74)
        goto LABEL_80;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_79;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOp::verify(mlir::mps::DepthwiseConv3DDataGradientOp *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NumElements;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  _QWORD **v79;
  _QWORD **v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  void *v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  const char *v96;
  const void ***v97;
  char *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  const void ***v102;
  char *v103;
  char *v104;
  __int128 v105;
  _QWORD **v106;
  _QWORD **v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  const char *v115;
  const void ***v116;
  char *v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  const void ***v121;
  char *v122;
  char *v123;
  __int128 v124;
  _QWORD **v125;
  _QWORD **v126;
  void *v127;
  _QWORD *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  const void ***v136;
  char *v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  const void ***v141;
  char *v142;
  char *v143;
  __int128 v144;
  uint64_t v145;
  const void ***v146;
  char *v147;
  char *v148;
  __int128 v149;
  uint64_t v150;
  const void ***v151;
  char *v152;
  char *v153;
  __int128 v154;
  _QWORD **v155;
  _QWORD **v156;
  void *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  const char *v167;
  const void ***v168;
  char *v169;
  char *v170;
  __int128 v171;
  uint64_t v172;
  const void ***v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  const void ***v178;
  char *v179;
  char *v180;
  __int128 v181;
  uint64_t v182;
  const void ***v183;
  char *v184;
  char *v185;
  __int128 v186;
  _QWORD **v187;
  _QWORD **v188;
  void *v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  const void ***v193;
  char *v194;
  char *v195;
  __int128 v196;
  uint64_t v197;
  const void ***v198;
  char *v199;
  char *v200;
  __int128 v201;
  uint64_t v202;
  const void ***v203;
  char *v204;
  char *v205;
  __int128 v206;
  _QWORD **v207;
  _QWORD **v208;
  void *v209;
  _QWORD *v210;
  void *v211;
  void *v212;
  uint64_t v213;
  const void ***v214;
  char *v215;
  char *v216;
  __int128 v217;
  uint64_t v218;
  const void ***v219;
  char *v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  const void ***v224;
  char *v225;
  char *v226;
  __int128 v227;
  uint64_t v228;
  const void ***v229;
  char *v230;
  char *v231;
  __int128 v232;
  _QWORD **v233;
  _QWORD **v234;
  void *v235;
  _QWORD *v236;
  void *v237;
  void *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  BOOL v245;
  unint64_t v246;
  BOOL v247;
  unint64_t v248;
  BOOL v249;
  unint64_t v250;
  BOOL v251;
  unint64_t v252;
  BOOL v253;
  unint64_t v254;
  BOOL v255;
  unint64_t v256;
  BOOL v257;
  unint64_t v258;
  unint64_t v259;
  BOOL v260;
  unint64_t v261;
  BOOL v262;
  unint64_t v263;
  BOOL v264;
  unint64_t v265;
  BOOL v266;
  unint64_t v267;
  BOOL v268;
  unint64_t v269;
  BOOL v270;
  int64_t v271;
  int64_t v272;
  int64_t v273;
  int64_t v274;
  int64_t v275;
  int64_t v276;
  int64_t v277;
  int64_t v278;
  int64_t v279;
  int64_t v280;
  int64_t v281;
  int64_t v282;
  int64_t v283;
  int64_t v284;
  int64_t v285;
  int64_t v286;
  int64_t v287;
  int64_t v288;
  int64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const void **v296;
  const char *v297;
  uint64_t v298;
  __int16 v299;
  unint64_t v300;
  void *v301;
  unsigned int v302;
  const void **v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  const char *v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  _BYTE v315[16];
  __int16 v316;
  void *v317;
  unsigned int v318;
  void *v319;
  unsigned int v320;
  unsigned int v321;
  _BYTE v322[96];
  void *v323;
  _QWORD *v324;
  void *__p;
  _QWORD **v326;
  char v327;
  uint64_t v328;

  v328 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = *(_DWORD *)(*(_QWORD *)this + 44);
  v4 = *(_QWORD **)(*(_QWORD *)this + 72);
  v5 = v4[3];
  v6 = v4[7];
  if (*(_DWORD *)(*(_QWORD *)this + 68) == 2)
    v7 = 0;
  else
    v7 = v4[11];
  v309 = *(uint64_t **)this;
  v8 = (_QWORD *)(v2 + 80);
  if (!HIBYTE(v3))
    v8 = 0;
  v9 = v8[4];
  v11 = v8[1];
  v10 = v8[2];
  v307 = v11;
  v308 = v9;
  v306 = v10;
  if (v9 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v308) == 3)
  {
    v290 = v5;
    v293 = v7;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v308, 0);
    v1 = v308;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v308);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v1, NumElements);
    while (1)
    {
      v13 = v296 == v303 && v297 == v304;
      if (v13 && v298 == v305)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
      if (v302 > 0x40)
      {
        v14 = *(_QWORD *)v301;
        if (*(uint64_t *)v301 > 0)
        {
LABEL_21:
          if (v302 < 0x41)
            goto LABEL_51;
LABEL_49:
          if (v301)
            operator delete[](v301);
          goto LABEL_51;
        }
      }
      else
      {
        v14 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
        if (v14 > 0)
          goto LABEL_21;
      }
      v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v302 > 0x40)
      {
        v15 = *(_QWORD *)v301;
        if (!v317)
          goto LABEL_30;
      }
      else
      {
        v15 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
        if (!v317)
          goto LABEL_30;
      }
      LODWORD(v310) = 2;
      v311 = (const char *)v15;
      v16 = (char *)v319;
      if (v320 >= v321)
      {
        v33 = v320 + 1;
        if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
        {
          v36 = (char *)&v310 - (_BYTE *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v33, 24);
          v16 = (char *)v319;
          v17 = (char *)v319 + v36;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v33, 24);
          v17 = (char *)&v310;
          v16 = (char *)v319;
        }
      }
      else
      {
        v17 = (char *)&v310;
      }
      v18 = &v16[24 * v320];
      v19 = *(_OWORD *)v17;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v320;
      if (v317)
      {
        LODWORD(v310) = 3;
        v311 = ", all values should be positive.";
        v312 = 32;
        v21 = (char *)v319;
        if (v20 >= v321)
        {
          v34 = v20 + 1;
          v35 = (char *)v319 + 24 * v20 > (char *)&v310;
          if (v319 <= &v310 && v35)
          {
            v37 = (char *)&v310 - (_BYTE *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v34, 24);
            v21 = (char *)v319;
            v22 = (char *)v319 + v37;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v34, 24);
            v22 = (char *)&v310;
            v21 = (char *)v319;
          }
        }
        else
        {
          v22 = (char *)&v310;
        }
        v23 = &v21[24 * v320];
        v24 = *(_OWORD *)v22;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v23 = v24;
        ++v320;
      }
LABEL_30:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      if (v327)
      {
        v25 = (_QWORD **)__p;
        if (__p)
        {
          v26 = v326;
          v27 = __p;
          if (v326 != __p)
          {
            do
              v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            v27 = __p;
          }
          v326 = v25;
          operator delete(v27);
        }
        v28 = v323;
        if (v323)
        {
          v29 = v324;
          v30 = v323;
          if (v324 != v323)
          {
            do
            {
              v32 = (void *)*--v29;
              v31 = v32;
              *v29 = 0;
              if (v32)
                operator delete[](v31);
            }
            while (v29 != v28);
            v30 = v323;
          }
          v324 = v28;
          operator delete(v30);
        }
        if (v319 != v322)
          free(v319);
      }
      if (v302 >= 0x41)
        goto LABEL_49;
LABEL_51:
      if (v14 < 1)
        return v1;
      ++v298;
    }
    v7 = v293;
    v5 = v290;
    if (!v307)
      goto LABEL_119;
LABEL_62:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v307) == 3)
    {
      v291 = v5;
      v294 = v7;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v307, 0);
      v38 = v307;
      v39 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v307);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v38, v39);
      while (1)
      {
        v40 = v296 == v303 && v297 == v304;
        if (v40 && v298 == v305)
        {
          v7 = v294;
          v5 = v291;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
        if (v302 > 0x40)
        {
          v41 = *(_QWORD *)v301;
          if (*(uint64_t *)v301 > 0)
          {
LABEL_76:
            if (v302 < 0x41)
              goto LABEL_106;
LABEL_104:
            if (v301)
              operator delete[](v301);
            goto LABEL_106;
          }
        }
        else
        {
          v41 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
          if (v41 > 0)
            goto LABEL_76;
        }
        v316 = 259;
        mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
        if (v302 > 0x40)
        {
          v42 = *(_QWORD *)v301;
          if (!v317)
            goto LABEL_85;
        }
        else
        {
          v42 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
          if (!v317)
            goto LABEL_85;
        }
        LODWORD(v310) = 2;
        v311 = (const char *)v42;
        v43 = (char *)v319;
        if (v320 >= v321)
        {
          v60 = v320 + 1;
          if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
          {
            v63 = (char *)&v310 - (_BYTE *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v60, 24);
            v43 = (char *)v319;
            v44 = (char *)v319 + v63;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v60, 24);
            v44 = (char *)&v310;
            v43 = (char *)v319;
          }
        }
        else
        {
          v44 = (char *)&v310;
        }
        v45 = &v43[24 * v320];
        v46 = *(_OWORD *)v44;
        *((_QWORD *)v45 + 2) = *((_QWORD *)v44 + 2);
        *(_OWORD *)v45 = v46;
        v47 = ++v320;
        if (v317)
        {
          LODWORD(v310) = 3;
          v311 = ", all values should be positive.";
          v312 = 32;
          v48 = (char *)v319;
          if (v47 >= v321)
          {
            v61 = v47 + 1;
            v62 = (char *)v319 + 24 * v47 > (char *)&v310;
            if (v319 <= &v310 && v62)
            {
              v64 = (char *)&v310 - (_BYTE *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v61, 24);
              v48 = (char *)v319;
              v49 = (char *)v319 + v64;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v61, 24);
              v49 = (char *)&v310;
              v48 = (char *)v319;
            }
          }
          else
          {
            v49 = (char *)&v310;
          }
          v50 = &v48[24 * v320];
          v51 = *(_OWORD *)v49;
          *((_QWORD *)v50 + 2) = *((_QWORD *)v49 + 2);
          *(_OWORD *)v50 = v51;
          ++v320;
        }
LABEL_85:
        v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
        if (v317)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
        if (v327)
        {
          v52 = (_QWORD **)__p;
          if (__p)
          {
            v53 = v326;
            v54 = __p;
            if (v326 != __p)
            {
              do
                v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
              while (v53 != v52);
              v54 = __p;
            }
            v326 = v52;
            operator delete(v54);
          }
          v55 = v323;
          if (v323)
          {
            v56 = v324;
            v57 = v323;
            if (v324 != v323)
            {
              do
              {
                v59 = (void *)*--v56;
                v58 = v59;
                *v56 = 0;
                if (v59)
                  operator delete[](v58);
              }
              while (v56 != v55);
              v57 = v323;
            }
            v324 = v55;
            operator delete(v57);
          }
          if (v319 != v322)
            free(v319);
        }
        if (v302 >= 0x41)
          goto LABEL_104;
LABEL_106:
        if (v41 < 1)
          return v1;
        ++v298;
      }
    }
  }
  else if (v307)
  {
    goto LABEL_62;
  }
LABEL_119:
  if (v306 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306) == 6)
  {
    v292 = v5;
    v295 = v7;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v306, 0);
    v65 = v306;
    v66 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v65, v66);
    while (1)
    {
      v67 = v296 == v303 && v297 == v304;
      if (v67 && v298 == v305)
      {
        v7 = v295;
        v5 = v292;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
      if (v302 > 0x40)
      {
        v68 = *(_QWORD *)v301;
        if ((*(_QWORD *)v301 & 0x8000000000000000) == 0)
        {
LABEL_134:
          if (v302 < 0x41)
            goto LABEL_164;
LABEL_162:
          if (v301)
            operator delete[](v301);
          goto LABEL_164;
        }
      }
      else
      {
        v68 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
        if ((v68 & 0x8000000000000000) == 0)
          goto LABEL_134;
      }
      v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v302 > 0x40)
      {
        v69 = *(_QWORD *)v301;
        if (!v317)
          goto LABEL_143;
      }
      else
      {
        v69 = (uint64_t)((_QWORD)v301 << -(char)v302) >> -(char)v302;
        if (!v317)
          goto LABEL_143;
      }
      LODWORD(v310) = 2;
      v311 = (const char *)v69;
      v70 = (char *)v319;
      if (v320 >= v321)
      {
        v87 = v320 + 1;
        if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
        {
          v90 = (char *)&v310 - (_BYTE *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v87, 24);
          v70 = (char *)v319;
          v71 = (char *)v319 + v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v87, 24);
          v71 = (char *)&v310;
          v70 = (char *)v319;
        }
      }
      else
      {
        v71 = (char *)&v310;
      }
      v72 = &v70[24 * v320];
      v73 = *(_OWORD *)v71;
      *((_QWORD *)v72 + 2) = *((_QWORD *)v71 + 2);
      *(_OWORD *)v72 = v73;
      v74 = ++v320;
      if (v317)
      {
        LODWORD(v310) = 3;
        v311 = ", all values should be non-negative.";
        v312 = 36;
        v75 = (char *)v319;
        if (v74 >= v321)
        {
          v88 = v74 + 1;
          v89 = (char *)v319 + 24 * v74 > (char *)&v310;
          if (v319 <= &v310 && v89)
          {
            v91 = (char *)&v310 - (_BYTE *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v88, 24);
            v75 = (char *)v319;
            v76 = (char *)v319 + v91;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v88, 24);
            v76 = (char *)&v310;
            v75 = (char *)v319;
          }
        }
        else
        {
          v76 = (char *)&v310;
        }
        v77 = &v75[24 * v320];
        v78 = *(_OWORD *)v76;
        *((_QWORD *)v77 + 2) = *((_QWORD *)v76 + 2);
        *(_OWORD *)v77 = v78;
        ++v320;
      }
LABEL_143:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      if (v327)
      {
        v79 = (_QWORD **)__p;
        if (__p)
        {
          v80 = v326;
          v81 = __p;
          if (v326 != __p)
          {
            do
              v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            v81 = __p;
          }
          v326 = v79;
          operator delete(v81);
        }
        v82 = v323;
        if (v323)
        {
          v83 = v324;
          v84 = v323;
          if (v324 != v323)
          {
            do
            {
              v86 = (void *)*--v83;
              v85 = v86;
              *v83 = 0;
              if (v86)
                operator delete[](v85);
            }
            while (v83 != v82);
            v84 = v323;
          }
          v324 = v82;
          operator delete(v84);
        }
        if (v319 != v322)
          free(v319);
      }
      if (v302 >= 0x41)
        goto LABEL_162;
LABEL_164:
      if (v68 < 0)
        return v1;
      ++v298;
    }
  }
  v313 = (void *)v309[2 * (((unint64_t)*((unsigned int *)v309 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v313, (llvm::APInt *)&v317);
  if (v318 > 0x40)
  {
    v92 = *(_QWORD *)v317;
    operator delete[](v317);
    v310 = 0;
    if (!v5)
    {
LABEL_200:
      v301 = 0;
      goto LABEL_201;
    }
  }
  else
  {
    v92 = (uint64_t)((_QWORD)v317 << -(uint64_t)v318) >> -(uint64_t)v318;
    v310 = 0;
    if (!v5)
      goto LABEL_200;
  }
  v93 = (void *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v93)
    goto LABEL_200;
  v94 = *(void **)(*(_QWORD *)v93 + 136);
  if (v94 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v93 = 0;
  v301 = v93;
  if (v94 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
    v96 = (const char *)v95;
    if (v95 <= 3)
    {
      v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v317)
      {
        LODWORD(v296) = 2;
        v297 = v96;
        v97 = &v296;
        v98 = (char *)v319;
        if (v320 >= v321)
        {
          v241 = v320 + 1;
          if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
          {
            v273 = (char *)&v296 - (_BYTE *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v241, 24);
            v98 = (char *)v319;
            v97 = (const void ***)((char *)v319 + v273);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v241, 24);
            v97 = &v296;
            v98 = (char *)v319;
          }
        }
        v99 = &v98[24 * v320];
        v100 = *(_OWORD *)v97;
        *((_QWORD *)v99 + 2) = v97[2];
        *(_OWORD *)v99 = v100;
        v101 = ++v320;
        if (v317)
        {
          LODWORD(v296) = 3;
          v297 = ".";
          v298 = 1;
          v102 = &v296;
          v103 = (char *)v319;
          if (v101 >= v321)
          {
            v248 = v101 + 1;
            v249 = (char *)v319 + 24 * v101 > (char *)&v296;
            if (v319 <= &v296 && v249)
            {
              v278 = (char *)&v296 - (_BYTE *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v248, 24);
              v103 = (char *)v319;
              v102 = (const void ***)((char *)v319 + v278);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v248, 24);
              v102 = &v296;
              v103 = (char *)v319;
            }
          }
          v104 = &v103[24 * v320];
          v105 = *(_OWORD *)v102;
          *((_QWORD *)v104 + 2) = v102[2];
          *(_OWORD *)v104 = v105;
          ++v320;
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      if (!v327)
        return v1;
      v106 = (_QWORD **)__p;
      if (__p)
      {
        v107 = v326;
        v108 = __p;
        if (v326 != __p)
        {
          do
            v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
          while (v107 != v106);
          v108 = __p;
        }
        v326 = v106;
        operator delete(v108);
      }
      v109 = v323;
      if (!v323)
        goto LABEL_341;
      v110 = v324;
      v111 = v323;
      if (v324 == v323)
        goto LABEL_340;
      do
      {
        v130 = (void *)*--v110;
        v129 = v130;
        *v110 = 0;
        if (v130)
          operator delete[](v129);
      }
      while (v110 != v109);
      goto LABEL_339;
    }
    if ((v92 & 0x80000000) != 0)
      v213 = 0;
    else
      v213 = v95;
    if ((unint64_t)((int)v92 - v213) <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v317)
      {
        LODWORD(v296) = 2;
        v297 = (const char *)(int)v92;
        v214 = &v296;
        v215 = (char *)v319;
        if (v320 >= v321)
        {
          v258 = v320 + 1;
          if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
          {
            v283 = (char *)&v296 - (_BYTE *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v258, 24);
            v215 = (char *)v319;
            v214 = (const void ***)((char *)v319 + v283);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v258, 24);
            v214 = &v296;
            v215 = (char *)v319;
          }
        }
        v216 = &v215[24 * v320];
        v217 = *(_OWORD *)v214;
        *((_QWORD *)v216 + 2) = v214[2];
        *(_OWORD *)v216 = v217;
        v218 = ++v320;
        if (v317)
        {
          LODWORD(v296) = 3;
          v297 = " for input gradient rank ";
          v298 = 25;
          v219 = &v296;
          v220 = (char *)v319;
          if (v218 >= v321)
          {
            v263 = v218 + 1;
            v264 = (char *)v319 + 24 * v218 > (char *)&v296;
            if (v319 <= &v296 && v264)
            {
              v286 = (char *)&v296 - (_BYTE *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v263, 24);
              v220 = (char *)v319;
              v219 = (const void ***)((char *)v319 + v286);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v263, 24);
              v219 = &v296;
              v220 = (char *)v319;
            }
          }
          v221 = &v220[24 * v320];
          v222 = *(_OWORD *)v219;
          *((_QWORD *)v221 + 2) = v219[2];
          *(_OWORD *)v221 = v222;
          v223 = ++v320;
          if (v317)
          {
            LODWORD(v296) = 2;
            v297 = v96;
            v224 = &v296;
            v225 = (char *)v319;
            if (v223 >= v321)
            {
              v267 = v223 + 1;
              v268 = (char *)v319 + 24 * v223 > (char *)&v296;
              if (v319 <= &v296 && v268)
              {
                v288 = (char *)&v296 - (_BYTE *)v319;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v267, 24);
                v225 = (char *)v319;
                v224 = (const void ***)((char *)v319 + v288);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v267, 24);
                v224 = &v296;
                v225 = (char *)v319;
              }
            }
            v226 = &v225[24 * v320];
            v227 = *(_OWORD *)v224;
            *((_QWORD *)v226 + 2) = v224[2];
            *(_OWORD *)v226 = v227;
            v228 = ++v320;
            if (v317)
            {
              LODWORD(v296) = 3;
              v297 = ".";
              v298 = 1;
              v229 = &v296;
              v230 = (char *)v319;
              if (v228 >= v321)
              {
                v269 = v228 + 1;
                v270 = (char *)v319 + 24 * v228 > (char *)&v296;
                if (v319 <= &v296 && v270)
                {
                  v289 = (char *)&v296 - (_BYTE *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v269, 24);
                  v230 = (char *)v319;
                  v229 = (const void ***)((char *)v319 + v289);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v269, 24);
                  v229 = &v296;
                  v230 = (char *)v319;
                }
              }
              v231 = &v230[24 * v320];
              v232 = *(_OWORD *)v229;
              *((_QWORD *)v231 + 2) = v229[2];
              *(_OWORD *)v231 = v232;
              ++v320;
            }
          }
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      if (!v327)
        return v1;
      v233 = (_QWORD **)__p;
      if (__p)
      {
        v234 = v326;
        v235 = __p;
        if (v326 != __p)
        {
          do
            v234 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v234 - 1);
          while (v234 != v233);
          v235 = __p;
        }
        v326 = v233;
        operator delete(v235);
      }
      v109 = v323;
      if (!v323)
        goto LABEL_341;
      v236 = v324;
      v111 = v323;
      if (v324 == v323)
        goto LABEL_340;
      do
      {
        v238 = (void *)*--v236;
        v237 = v238;
        *v236 = 0;
        if (v238)
          operator delete[](v237);
      }
      while (v236 != v109);
LABEL_339:
      v111 = v323;
LABEL_340:
      v324 = v109;
      operator delete(v111);
      goto LABEL_341;
    }
  }
LABEL_201:
  if (!v6 || (v112 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v300 = 0;
    goto LABEL_227;
  }
  v113 = *(void **)(*(_QWORD *)v112 + 136);
  if (v113 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v112 = 0;
  v300 = v112;
  if (v113 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v300), v114 == 4))
  {
LABEL_227:
    v313 = v315;
    v314 = 0x500000000;
    if (mlir::matchConstantWithIntVector<long long>(v7, (uint64_t)&v313))
    {
      if (v6)
      {
        if (v310)
        {
          v131 = v314;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v310);
          if (v132 != v131)
          {
            v299 = 259;
            mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v310);
            if (v317)
            {
              LODWORD(v303) = 5;
              v304 = v167;
              v168 = &v303;
              v169 = (char *)v319;
              if (v320 >= v321)
              {
                v239 = v320 + 1;
                if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
                {
                  v271 = (char *)&v303 - (_BYTE *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v239, 24);
                  v169 = (char *)v319;
                  v168 = (const void ***)((char *)v319 + v271);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v239, 24);
                  v168 = &v303;
                  v169 = (char *)v319;
                }
              }
              v170 = &v169[24 * v320];
              v171 = *(_OWORD *)v168;
              *((_QWORD *)v170 + 2) = v168[2];
              *(_OWORD *)v170 = v171;
              v172 = ++v320;
              if (v317)
              {
                LODWORD(v303) = 3;
                v305 = 35;
                v173 = &v303;
                v174 = (char *)v319;
                if (v172 >= v321)
                {
                  v244 = v172 + 1;
                  v245 = (char *)v319 + 24 * v172 > (char *)&v303;
                  if (v319 <= &v303 && v245)
                  {
                    v276 = (char *)&v303 - (_BYTE *)v319;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v244, 24);
                    v174 = (char *)v319;
                    v173 = (const void ***)((char *)v319 + v276);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v244, 24);
                    v173 = &v303;
                    v174 = (char *)v319;
                  }
                }
                v175 = &v174[24 * v320];
                v176 = *(_OWORD *)v173;
                *((_QWORD *)v175 + 2) = v173[2];
                *(_OWORD *)v175 = v176;
                v177 = ++v320;
                if (v317)
                {
                  LODWORD(v303) = 5;
                  v304 = (const char *)v314;
                  v178 = &v303;
                  v179 = (char *)v319;
                  if (v177 >= v321)
                  {
                    v254 = v177 + 1;
                    v255 = (char *)v319 + 24 * v177 > (char *)&v303;
                    if (v319 <= &v303 && v255)
                    {
                      v281 = (char *)&v303 - (_BYTE *)v319;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v254, 24);
                      v179 = (char *)v319;
                      v178 = (const void ***)((char *)v319 + v281);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v254, 24);
                      v178 = &v303;
                      v179 = (char *)v319;
                    }
                  }
                  v180 = &v179[24 * v320];
                  v181 = *(_OWORD *)v178;
                  *((_QWORD *)v180 + 2) = v178[2];
                  *(_OWORD *)v180 = v181;
                  v182 = ++v320;
                  if (v317)
                  {
                    LODWORD(v303) = 3;
                    v304 = " values.";
                    v305 = 8;
                    v183 = &v303;
                    v184 = (char *)v319;
                    if (v182 >= v321)
                    {
                      v261 = v182 + 1;
                      v262 = (char *)v319 + 24 * v182 > (char *)&v303;
                      if (v319 <= &v303 && v262)
                      {
                        v285 = (char *)&v303 - (_BYTE *)v319;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v261, 24);
                        v184 = (char *)v319;
                        v183 = (const void ***)((char *)v319 + v285);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v261, 24);
                        v183 = &v303;
                        v184 = (char *)v319;
                      }
                    }
                    v185 = &v184[24 * v320];
                    v186 = *(_OWORD *)v183;
                    *((_QWORD *)v185 + 2) = v183[2];
                    *(_OWORD *)v185 = v186;
                    ++v320;
                  }
                }
              }
            }
            v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
            if (v317)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
            if (v327)
            {
              v187 = (_QWORD **)__p;
              if (__p)
              {
                v188 = v326;
                v189 = __p;
                if (v326 != __p)
                {
                  do
                    v188 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v188 - 1);
                  while (v188 != v187);
                  v189 = __p;
                }
                v326 = v187;
                operator delete(v189);
              }
              v158 = v323;
              if (!v323)
                goto LABEL_337;
              v190 = v324;
              v160 = v323;
              if (v324 == v323)
                goto LABEL_336;
              do
              {
                v192 = (void *)*--v190;
                v191 = v192;
                *v190 = 0;
                if (v192)
                  operator delete[](v191);
              }
              while (v190 != v158);
              goto LABEL_335;
            }
LABEL_261:
            v165 = v313;
            if (v313 != v315)
            {
LABEL_262:
              free(v165);
              return v1;
            }
            return v1;
          }
        }
        if (v301)
        {
          v133 = v314;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
          if (v134 != v133)
          {
            v299 = 259;
            mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
            if (v317)
            {
              LODWORD(v303) = 5;
              v304 = v135;
              v136 = &v303;
              v137 = (char *)v319;
              if (v320 >= v321)
              {
                v242 = v320 + 1;
                if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
                {
                  v274 = (char *)&v303 - (_BYTE *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v242, 24);
                  v137 = (char *)v319;
                  v136 = (const void ***)((char *)v319 + v274);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v242, 24);
                  v136 = &v303;
                  v137 = (char *)v319;
                }
              }
              v138 = &v137[24 * v320];
              v139 = *(_OWORD *)v136;
              *((_QWORD *)v138 + 2) = v136[2];
              *(_OWORD *)v138 = v139;
              v140 = ++v320;
              if (v317)
              {
                LODWORD(v303) = 3;
                v305 = 38;
                v141 = &v303;
                v142 = (char *)v319;
                if (v140 >= v321)
                {
                  v250 = v140 + 1;
                  v251 = (char *)v319 + 24 * v140 > (char *)&v303;
                  if (v319 <= &v303 && v251)
                  {
                    v279 = (char *)&v303 - (_BYTE *)v319;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v250, 24);
                    v142 = (char *)v319;
                    v141 = (const void ***)((char *)v319 + v279);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v250, 24);
                    v141 = &v303;
                    v142 = (char *)v319;
                  }
                }
                v143 = &v142[24 * v320];
                v144 = *(_OWORD *)v141;
                *((_QWORD *)v143 + 2) = v141[2];
                *(_OWORD *)v143 = v144;
                v145 = ++v320;
                if (v317)
                {
                  LODWORD(v303) = 5;
                  v304 = (const char *)v314;
                  v146 = &v303;
                  v147 = (char *)v319;
                  if (v145 >= v321)
                  {
                    v259 = v145 + 1;
                    v260 = (char *)v319 + 24 * v145 > (char *)&v303;
                    if (v319 <= &v303 && v260)
                    {
                      v284 = (char *)&v303 - (_BYTE *)v319;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v259, 24);
                      v147 = (char *)v319;
                      v146 = (const void ***)((char *)v319 + v284);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v259, 24);
                      v146 = &v303;
                      v147 = (char *)v319;
                    }
                  }
                  v148 = &v147[24 * v320];
                  v149 = *(_OWORD *)v146;
                  *((_QWORD *)v148 + 2) = v146[2];
                  *(_OWORD *)v148 = v149;
                  v150 = ++v320;
                  if (v317)
                  {
                    LODWORD(v303) = 3;
                    v304 = " values.";
                    v305 = 8;
                    v151 = &v303;
                    v152 = (char *)v319;
                    if (v150 >= v321)
                    {
                      v265 = v150 + 1;
                      v266 = (char *)v319 + 24 * v150 > (char *)&v303;
                      if (v319 <= &v303 && v266)
                      {
                        v287 = (char *)&v303 - (_BYTE *)v319;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v265, 24);
                        v152 = (char *)v319;
                        v151 = (const void ***)((char *)v319 + v287);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v265, 24);
                        v151 = &v303;
                        v152 = (char *)v319;
                      }
                    }
                    v153 = &v152[24 * v320];
                    v154 = *(_OWORD *)v151;
                    *((_QWORD *)v153 + 2) = v151[2];
                    *(_OWORD *)v153 = v154;
                    ++v320;
                  }
                }
              }
            }
            v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
            if (v317)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
            if (v327)
            {
              v155 = (_QWORD **)__p;
              if (__p)
              {
                v156 = v326;
                v157 = __p;
                if (v326 != __p)
                {
                  do
                    v156 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v156 - 1);
                  while (v156 != v155);
                  v157 = __p;
                }
                v326 = v155;
                operator delete(v157);
              }
              v158 = v323;
              if (!v323)
                goto LABEL_337;
              v159 = v324;
              v160 = v323;
              if (v324 == v323)
              {
LABEL_336:
                v324 = v158;
                operator delete(v160);
LABEL_337:
                if (v319 != v322)
                  free(v319);
                goto LABEL_261;
              }
              do
              {
                v162 = (void *)*--v159;
                v161 = v162;
                *v159 = 0;
                if (v162)
                  operator delete[](v161);
              }
              while (v159 != v158);
LABEL_335:
              v160 = v323;
              goto LABEL_336;
            }
            goto LABEL_261;
          }
        }
      }
      else if ((_DWORD)v314 != 4)
      {
        v299 = 259;
        mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
        if (v317)
        {
          LODWORD(v303) = 3;
          v305 = 21;
          v193 = &v303;
          v194 = (char *)v319;
          if (v320 >= v321)
          {
            v240 = v320 + 1;
            if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
            {
              v272 = (char *)&v303 - (_BYTE *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v240, 24);
              v194 = (char *)v319;
              v193 = (const void ***)((char *)v319 + v272);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v240, 24);
              v193 = &v303;
              v194 = (char *)v319;
            }
          }
          v195 = &v194[24 * v320];
          v196 = *(_OWORD *)v193;
          *((_QWORD *)v195 + 2) = v193[2];
          *(_OWORD *)v195 = v196;
          v197 = ++v320;
          if (v317)
          {
            LODWORD(v303) = 5;
            v304 = (const char *)v314;
            v198 = &v303;
            v199 = (char *)v319;
            if (v197 >= v321)
            {
              v246 = v197 + 1;
              v247 = (char *)v319 + 24 * v197 > (char *)&v303;
              if (v319 <= &v303 && v247)
              {
                v277 = (char *)&v303 - (_BYTE *)v319;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v246, 24);
                v199 = (char *)v319;
                v198 = (const void ***)((char *)v319 + v277);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v246, 24);
                v198 = &v303;
                v199 = (char *)v319;
              }
            }
            v200 = &v199[24 * v320];
            v201 = *(_OWORD *)v198;
            *((_QWORD *)v200 + 2) = v198[2];
            *(_OWORD *)v200 = v201;
            v202 = ++v320;
            if (v317)
            {
              LODWORD(v303) = 3;
              v304 = " values.";
              v305 = 8;
              v203 = &v303;
              v204 = (char *)v319;
              if (v202 >= v321)
              {
                v256 = v202 + 1;
                v257 = (char *)v319 + 24 * v202 > (char *)&v303;
                if (v319 <= &v303 && v257)
                {
                  v282 = (char *)&v303 - (_BYTE *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v256, 24);
                  v204 = (char *)v319;
                  v203 = (const void ***)((char *)v319 + v282);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v256, 24);
                  v203 = &v303;
                  v204 = (char *)v319;
                }
              }
              v205 = &v204[24 * v320];
              v206 = *(_OWORD *)v203;
              *((_QWORD *)v205 + 2) = v203[2];
              *(_OWORD *)v205 = v206;
              ++v320;
            }
          }
        }
        v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
        if (v317)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
        if (v327)
        {
          v207 = (_QWORD **)__p;
          if (__p)
          {
            v208 = v326;
            v209 = __p;
            if (v326 != __p)
            {
              do
                v208 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v208 - 1);
              while (v208 != v207);
              v209 = __p;
            }
            v326 = v207;
            operator delete(v209);
          }
          v158 = v323;
          if (!v323)
            goto LABEL_337;
          v210 = v324;
          v160 = v323;
          if (v324 == v323)
            goto LABEL_336;
          do
          {
            v212 = (void *)*--v210;
            v211 = v212;
            *v210 = 0;
            if (v212)
              operator delete[](v211);
          }
          while (v210 != v158);
          goto LABEL_335;
        }
        goto LABEL_261;
      }
    }
    v1 = 1;
    goto LABEL_261;
  }
  v316 = 259;
  mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v300);
  if (v317)
  {
    LODWORD(v296) = 5;
    v297 = v115;
    v116 = &v296;
    v117 = (char *)v319;
    if (v320 >= v321)
    {
      v243 = v320 + 1;
      if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
      {
        v275 = (char *)&v296 - (_BYTE *)v319;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v243, 24);
        v117 = (char *)v319;
        v116 = (const void ***)((char *)v319 + v275);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v243, 24);
        v116 = &v296;
        v117 = (char *)v319;
      }
    }
    v118 = &v117[24 * v320];
    v119 = *(_OWORD *)v116;
    *((_QWORD *)v118 + 2) = v116[2];
    *(_OWORD *)v118 = v119;
    v120 = ++v320;
    if (v317)
    {
      LODWORD(v296) = 3;
      v297 = ".";
      v298 = 1;
      v121 = &v296;
      v122 = (char *)v319;
      if (v120 >= v321)
      {
        v252 = v120 + 1;
        v253 = (char *)v319 + 24 * v120 > (char *)&v296;
        if (v319 <= &v296 && v253)
        {
          v280 = (char *)&v296 - (_BYTE *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v252, 24);
          v122 = (char *)v319;
          v121 = (const void ***)((char *)v319 + v280);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v252, 24);
          v121 = &v296;
          v122 = (char *)v319;
        }
      }
      v123 = &v122[24 * v320];
      v124 = *(_OWORD *)v121;
      *((_QWORD *)v123 + 2) = v121[2];
      *(_OWORD *)v123 = v124;
      ++v320;
    }
  }
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
  if (v317)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
  if (v327)
  {
    v125 = (_QWORD **)__p;
    if (__p)
    {
      v126 = v326;
      v127 = __p;
      if (v326 != __p)
      {
        do
          v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
        while (v126 != v125);
        v127 = __p;
      }
      v326 = v125;
      operator delete(v127);
    }
    v109 = v323;
    if (v323)
    {
      v128 = v324;
      v111 = v323;
      if (v324 == v323)
        goto LABEL_340;
      do
      {
        v164 = (void *)*--v128;
        v163 = v164;
        *v128 = 0;
        if (v164)
          operator delete[](v163);
      }
      while (v128 != v109);
      goto LABEL_339;
    }
LABEL_341:
    v165 = v319;
    if (v319 == v322)
      return v1;
    goto LABEL_262;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t Context;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int32x2_t v45;
  int32x2_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *Value;
  int64_t v50;
  int64_t v51;
  uint64_t Int;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  BOOL v65;
  int64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int64_t v73;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int8x16_t *v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  unint64_t v87;
  int64x2_t v88;
  int64_t v89;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t NumElements;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  unint64_t v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169[8];
  char v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  _QWORD v182[5];
  void *__p;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  void *v187;
  uint64_t v188;
  _BYTE v189[24];
  void *v190;
  uint64_t v191;
  _BYTE v192[24];
  void *v193;
  uint64_t v194;
  _BYTE v195[48];
  void *v196;
  uint64_t v197;
  _BYTE v198[40];
  void *v199;
  uint64_t v200;
  _BYTE v201[40];
  void *v202;
  uint64_t v203;
  _BYTE v204[40];
  unint64_t v205[2];
  _QWORD *v206;
  uint64_t v207;
  _QWORD v208[10];

  v208[8] = *MEMORY[0x1E0C80C00];
  v178 = a4;
  v179 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = *((_QWORD *)a7 + 4);
  }
  else
  {
    v18 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
  }
  v168 = a6;
  v169[0] = 0;
  v170 = 0;
  v171 = v16;
  v172 = v17;
  v173 = v18;
  v174 = a9;
  v19 = a5;
  v175 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v168);
    if (v170)
      v170 = 0;
    mlir::OperationName::OperationName(v169, "mps.depthwise_conv_3d_data_gradient", 35, Context);
    v170 = 1;
    v19 = v179;
  }
  v176 = a4;
  v177 = a5;
  if (v19 < 2
    || (v21 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DepthwiseConv3DDataGradientOpAdaptor::verify(&v168, v21)))
  {
    v32 = mlir::Float32Type::get(this, a2);
LABEL_28:
    v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_29;
  }
  v22 = mlir::ValueRange::dereference_iterator(&v178, 0);
  v23 = mlir::ValueRange::dereference_iterator(&v178, 1);
  v24 = 0;
  if (v179 == 3)
    v24 = mlir::ValueRange::dereference_iterator(&v178, 2);
  v25 = v171;
  v160 = v172;
  v161 = *((_QWORD *)&v171 + 1);
  v26 = v173;
  v159 = *((_QWORD *)&v172 + 1);
  v28 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  v206 = (_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  v27 = v206;
  v207 = v28;
  mlir::ValueRange::ValueRange(v205, (uint64_t)&v206, 2uLL);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
    v30 = v27;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v28 + 8))
      goto LABEL_14;
  }
  else
  {
    v30 = 0;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v28 + 8))
    {
LABEL_14:
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v28 + 8);
      v31 = v28;
      if (!v30)
        goto LABEL_27;
      goto LABEL_19;
    }
  }
  v31 = 0;
  if (!v30)
  {
LABEL_27:
    v32 = v29;
    goto LABEL_28;
  }
LABEL_19:
  v33 = *(void **)(*v30 + 136);
  if (v33 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !v31
    || *(_UNKNOWN **)(*(_QWORD *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_27;
  }
  v202 = v204;
  v203 = 0x500000000;
  if (!v24)
  {
    if (v33 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      v47 = v30;
    else
      v47 = 0;
    v163 = v47;
    if (*(_UNKNOWN **)(*(_QWORD *)v28 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      v48 = v28;
    else
      v48 = 0;
    v162 = v48;
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v163);
    v51 = v50;
    v199 = v201;
    v200 = 0x500000000;
    v196 = v198;
    v197 = 0x500000000;
    v193 = v195;
    v194 = 0x600000000;
    v190 = v192;
    v191 = 0x300000000;
    v187 = v189;
    v188 = 0x300000000;
    v166 = v161;
    v167 = v26;
    v164 = v25;
    v165 = v160;
    if (v25)
    {
      Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v164);
      v53 = v194;
      if ((_DWORD)v194 == 6)
      {
        v54 = v159;
        goto LABEL_68;
      }
      v54 = v159;
      if (v194 > 6
        || HIDWORD(v194) <= 5
        && (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v195, 6uLL, 8), v53 = v194,
                                                                                            (_DWORD)v194 == 6))
      {
LABEL_67:
        LODWORD(v194) = 6;
LABEL_68:
        v59 = v191;
        if ((_DWORD)v191 == 3)
        {
          v60 = v188;
          v61 = v188 > 3;
          if ((_DWORD)v188 == 3)
            goto LABEL_70;
        }
        else
        {
          if (v191 <= 3)
          {
            v68 = v191;
            v69 = v191;
            if (HIDWORD(v191) <= 2)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, 3uLL, 8);
              v68 = v191;
              v69 = v191;
            }
            memset_pattern16((char *)v190 + 8 * v68, &unk_181233190, 24 - 8 * v59);
            v67 = v69 - v59 + 3;
          }
          else
          {
            v67 = 3;
          }
          LODWORD(v191) = v67;
          v60 = v188;
          v61 = v188 > 3;
          if ((_DWORD)v188 == 3)
          {
LABEL_70:
            v62 = v200;
            v63 = v200 > 5;
            if ((_DWORD)v200 == 5)
              goto LABEL_71;
            goto LABEL_87;
          }
        }
        if (v61)
        {
          v70 = 3;
        }
        else
        {
          v71 = v60;
          v72 = v60;
          if (HIDWORD(v188) <= 2)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, 3uLL, 8);
            v71 = v188;
            v72 = v188;
          }
          memset_pattern16((char *)v187 + 8 * v71, &unk_181233190, 24 - 8 * v60);
          v70 = v72 - v60 + 3;
        }
        LODWORD(v188) = v70;
        v62 = v200;
        v63 = v200 > 5;
        if ((_DWORD)v200 == 5)
        {
LABEL_71:
          v64 = v197;
          v65 = v197 > 5;
          if ((_DWORD)v197 == 5)
            goto LABEL_72;
          goto LABEL_92;
        }
LABEL_87:
        if (!v63)
        {
          if (HIDWORD(v200) > 4
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v201, 5uLL, 8),
                v62 = v200,
                (_DWORD)v200 != 5))
          {
            bzero((char *)v199 + 8 * v62, 40 - 8 * v62);
          }
        }
        LODWORD(v200) = 5;
        v64 = v197;
        v65 = v197 > 5;
        if ((_DWORD)v197 == 5)
        {
LABEL_72:
          v66 = v51 - 4;
          if (v51 < 4)
          {
LABEL_132:
            if (v167 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167) == 3)
            {
              LODWORD(v191) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v167, 0);
              v98 = v167;
              NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v98, NumElements);
              while (1)
              {
                v100 = v206 == v180 && v207 == v181;
                if (v100 && v208[0] == v182[0])
                  break;
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40)
                  v101 = *(_QWORD *)__p;
                else
                  v101 = (uint64_t)((_QWORD)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                v102 = v191;
                if (v191 >= (unint64_t)HIDWORD(v191))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v191 + 1, 8);
                  v102 = v191;
                }
                *((_QWORD *)v190 + v102) = v101;
                LODWORD(v191) = v191 + 1;
                if (v184 >= 0x41 && __p)
                  operator delete[](__p);
                ++v208[0];
              }
            }
            if (v161 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v166) == 3)
            {
              LODWORD(v188) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v166, 0);
              v103 = v166;
              v104 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v166);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v103, v104);
              while (1)
              {
                v105 = v206 == v180 && v207 == v181;
                if (v105 && v208[0] == v182[0])
                  break;
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40)
                  v106 = *(_QWORD *)__p;
                else
                  v106 = (uint64_t)((_QWORD)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                v107 = v188;
                if (v188 >= (unint64_t)HIDWORD(v188))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v188 + 1, 8);
                  v107 = v188;
                }
                *((_QWORD *)v187 + v107) = v106;
                LODWORD(v188) = v188 + 1;
                if (v184 >= 0x41 && __p)
                  operator delete[](__p);
                ++v208[0];
              }
            }
            if (v160 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v165) == 6)
            {
              LODWORD(v194) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v165, 0);
              v108 = v165;
              v109 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v165);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v108, v109);
              while (1)
              {
                v110 = v206 == v180 && v207 == v181;
                if (v110 && v208[0] == v182[0])
                  break;
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40)
                  v111 = *(_QWORD *)__p;
                else
                  v111 = (uint64_t)((_QWORD)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                v112 = v194;
                if (v194 >= (unint64_t)HIDWORD(v194))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v195, v194 + 1, 8);
                  v112 = v194;
                }
                *((_QWORD *)v193 + v112) = v111;
                LODWORD(v194) = v194 + 1;
                if (v184 >= 0x41 && __p)
                  operator delete[](__p);
                ++v208[0];
              }
            }
            if (v54)
              v113 = *(_DWORD *)(v54 + 8);
            else
              v113 = 2;
            v114 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v162);
            __p = &v185;
            v185 = xmmword_1812503B8;
            v186 = unk_1812503C8;
            v184 = 0x400000004;
            if (Int >= 0)
              v116 = v51;
            else
              v116 = 0;
            if (v115 == 4)
            {
              v117 = Int - v116 + 4;
              if (v117 <= 3)
              {
                *(_QWORD *)&v185 = *(_QWORD *)(v114 + 8 * v117);
                *((_QWORD *)&v185 + 1) = *(_QWORD *)(v114 + 8 * (v117 == 0));
                v118 = 8;
                if (v117 <= 1)
                  v118 = 16;
                *(_QWORD *)&v186 = *(_QWORD *)(v114 + v118);
                v61 = v117 > 2;
                v119 = 24;
                if (v61)
                  v119 = 16;
                *((_QWORD *)&v186 + 1) = *(_QWORD *)(v114 + v119);
              }
            }
            v180 = v182;
            v181 = 0x500000000;
            v120 = v200;
            v206 = v208;
            v207 = 0x800000000;
            if ((_DWORD)v200)
            {
              if (v200 < 9)
              {
                v121 = 0;
                v122 = v208;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v208, v200, 8);
                v121 = v207;
                v122 = v206;
              }
              if (v120 != v121)
                bzero(&v122[v121], 8 * (v120 - v121));
              LODWORD(v207) = v120;
              if (v120 >= 4)
              {
                v123 = v120 - 3;
                v124 = v199;
                v125 = v120 - 4;
                if (v120 != 4)
                {
                  v126 = 0;
                  if (v125 < 4)
                    goto LABEL_212;
                  if ((unint64_t)((char *)v122 - (_BYTE *)v199) < 0x20)
                    goto LABEL_212;
                  v126 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                  v127 = (__int128 *)((char *)v199 + 16);
                  v128 = v122 + 2;
                  v129 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v130 = *v127;
                    *(v128 - 1) = *(v127 - 1);
                    *v128 = v130;
                    v127 += 2;
                    v128 += 2;
                    v129 -= 4;
                  }
                  while (v129);
                  if (v125 != v126)
                  {
LABEL_212:
                    v131 = v120 - v126 - 4;
                    v132 = v126;
                    v133 = &v122[v126];
                    v134 = &v124[v132];
                    do
                    {
                      v135 = *v134++;
                      *v133++ = v135;
                      --v131;
                    }
                    while (v131);
                  }
                }
                v136 = __p;
                v122[v125] = *(_QWORD *)__p;
                v137 = v190;
                v138 = v187;
                v139 = v193;
                v140 = v124[v123];
                v141 = 0x8000000000000000;
                v142 = 0x8000000000000000;
                if (v140 != 0x8000000000000000)
                {
                  v143 = v136[1];
                  v144 = *(_QWORD *)v190;
                  v145 = *(_QWORD *)v187 * (v143 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      v142 = 0x8000000000000000;
                      if (v143 != 0x8000000000000000)
                      {
                        v140 = v145 + v144 * (v140 - 1) - (*(_QWORD *)v193 + *((_QWORD *)v193 + 1));
                        goto LABEL_222;
                      }
                      break;
                    case 1:
                      v140 = v145 + v144 * (v140 - 1);
                      if (v143 == 0x8000000000000000)
                        v140 = 0x8000000000000000;
                      goto LABEL_221;
                    case 2:
                    case 4:
                      v140 *= v144;
                      goto LABEL_221;
                    default:
LABEL_221:
                      v142 = v140;
                      if (v143 != 0x8000000000000000)
LABEL_222:
                        v142 = v140 & ~(v140 >> 63);
                      break;
                  }
                }
                v122[v123] = v142;
                v146 = v124[v120 - 2];
                if (v146 != 0x8000000000000000)
                {
                  v147 = v136[2];
                  v148 = v137[1];
                  v149 = v138[1] * (v147 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      v141 = 0x8000000000000000;
                      if (v147 != 0x8000000000000000)
                      {
                        v146 = v149 + v148 * (v146 - 1) - (v139[2] + v139[3]);
                        goto LABEL_232;
                      }
                      break;
                    case 1:
                      if (v147 == 0x8000000000000000)
                        v146 = 0x8000000000000000;
                      else
                        v146 = v149 + v148 * (v146 - 1);
                      goto LABEL_231;
                    case 2:
                    case 4:
                      v146 *= v148;
                      goto LABEL_231;
                    default:
LABEL_231:
                      v141 = v146;
                      if (v147 != 0x8000000000000000)
LABEL_232:
                        v141 = v146 & ~(v146 >> 63);
                      break;
                  }
                }
                v122[v120 - 2] = v141;
                v150 = v124[v120 - 1];
                v151 = 0x8000000000000000;
                if (v150 != 0x8000000000000000)
                {
                  v152 = v136[3];
                  v153 = v137[2];
                  v154 = v138[2] * (v152 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      v151 = 0x8000000000000000;
                      if (v152 != 0x8000000000000000)
                      {
                        v150 = v154 + v153 * (v150 - 1) - (v139[4] + v139[5]);
                        goto LABEL_241;
                      }
                      break;
                    case 1:
                      v150 = v154 + v153 * (v150 - 1);
                      if (v152 == 0x8000000000000000)
                        v150 = 0x8000000000000000;
                      goto LABEL_240;
                    case 2:
                    case 4:
                      v150 *= v153;
                      goto LABEL_240;
                    default:
LABEL_240:
                      v151 = v150;
                      if (v152 != 0x8000000000000000)
LABEL_241:
                        v151 = v150 & ~(v150 >> 63);
                      break;
                  }
                }
                v122[v120 - 1] = v151;
                v155 = v181;
                if ((_DWORD)v181 != (_DWORD)v120)
                {
                  if (v181 <= v120)
                  {
                    if (HIDWORD(v181) < v120)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v180, v182, v120, 8);
                      v155 = v181;
                    }
                    if (v155 != (_DWORD)v120)
                      bzero((char *)v180 + 8 * v155, 8 * (v120 - v155));
                  }
                  LODWORD(v181) = v120;
                  v122 = v206;
                }
                v156 = (uint64_t *)v196;
                v157 = v180;
                do
                {
                  v158 = *v156++;
                  *v157++ = v122[v158];
                  --v120;
                }
                while (v120);
              }
              if (v122 != v208)
                free(v122);
            }
            v42 = mlir::RankedTensorType::get((uint64_t)v180, v181, v29, 0);
            if (v180 != v182)
              free(v180);
            if (__p != &v185)
              free(__p);
            if (v187 != v189)
              free(v187);
            if (v190 != v192)
              free(v190);
            if (v193 != v195)
              free(v193);
            if (v196 != v198)
              free(v196);
            if (v199 != v201)
              free(v199);
            v55 = 1;
            goto LABEL_268;
          }
LABEL_97:
          v73 = (v51 & (Int >> 63)) + Int;
          if (v73 >= v51 || v73 < v66)
            v75 = v66;
          else
            v75 = (v51 & (Int >> 63)) + Int;
          if (v51 != 5)
          {
            if ((unint64_t)v51 >= 5)
            {
              if (v51 <= (unint64_t)HIDWORD(v197))
              {
                v76 = 5;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, v198, v51, 8);
                v76 = v197;
              }
              if (v51 != v76)
                bzero((char *)v196 + 8 * v76, 8 * (v51 - v76));
            }
            LODWORD(v197) = v51;
          }
          v77 = v196;
          v78 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          v79 = vdupq_n_s64(v75);
          v80 = vdupq_n_s64(v66);
          v81 = (int64x2_t)xmmword_181233120;
          v82 = (int8x16_t *)((char *)v196 + 16);
          v83 = vdupq_n_s64(2uLL);
          v84 = vdupq_n_s64(1uLL);
          v85 = vdupq_n_s64(3uLL);
          v86 = vdupq_n_s64(4uLL);
          v87 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v88 = vaddq_s64(v81, v83);
            v82[-1] = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v81, v79), (int8x16_t)vcgtq_s64(v80, v81)), (int8x16_t)v81, vbslq_s8((int8x16_t)vcgtq_s64(v79, v81), (int8x16_t)vaddq_s64(v81, v84), (int8x16_t)v80));
            *v82 = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v88, v79), (int8x16_t)vcgtq_s64(v80, v88)), (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_s64(v79, v88), (int8x16_t)vaddq_s64(v81, v85), (int8x16_t)v80));
            v81 = vaddq_s64(v81, v86);
            v82 += 2;
            v87 -= 4;
          }
          while (v87);
          for (; v51 != v78; ++v78)
          {
            if (v78 < v75)
              v89 = v78 + 1;
            else
              v89 = v66;
            if (v78 < v66 || v78 > v75)
              v89 = v78;
            v77[v78] = v89;
          }
          v91 = v200;
          if (v51 != v200)
          {
            if (v51 >= (unint64_t)v200)
            {
              if (v51 > (unint64_t)HIDWORD(v200))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v201, v51, 8);
                v91 = v200;
              }
              if (v51 != v91)
                bzero((char *)v199 + 8 * v91, 8 * (v51 - v91));
            }
            LODWORD(v200) = v51;
          }
          v92 = (uint64_t *)v196;
          v93 = v199;
          v94 = v51;
          do
          {
            v96 = *Value++;
            v95 = v96;
            v97 = *v92++;
            v93[v97] = v95;
            --v94;
          }
          while (v94);
          goto LABEL_132;
        }
LABEL_92:
        if (!v65)
        {
          if (HIDWORD(v197) > 4
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, v198, 5uLL, 8),
                v64 = v197,
                (_DWORD)v197 != 5))
          {
            bzero((char *)v196 + 8 * v64, 40 - 8 * v64);
          }
        }
        LODWORD(v197) = 5;
        v66 = v51 - 4;
        if (v51 < 4)
          goto LABEL_132;
        goto LABEL_97;
      }
    }
    else
    {
      v53 = 0;
      Int = -4;
      v54 = v159;
    }
    bzero((char *)v193 + 8 * v53, 48 - 8 * v53);
    goto LABEL_67;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v24, (uint64_t)&v202))
  {
    v42 = mlir::UnrankedTensorType::get(v29);
    v55 = 1;
    goto LABEL_268;
  }
  v34 = v203;
  if (!(_DWORD)v203)
    goto LABEL_55;
  v35 = (char *)v202;
  v36 = (v203 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v37 = (char *)v202;
  if (v36 < 3)
    goto LABEL_57;
  v38 = v36 + 1;
  v37 = (char *)v202 + 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
  v39 = (int64x2_t *)((char *)v202 + 16);
  v40.i64[0] = -1;
  v40.i64[1] = -1;
  v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
    if ((v45.i8[0] & 1) != 0)
    {
      v39[-1].i64[0] = 0x8000000000000000;
      if ((v45.i8[4] & 1) == 0)
      {
LABEL_35:
        v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if ((v46.i8[0] & 1) != 0)
          goto LABEL_40;
        goto LABEL_36;
      }
    }
    else if ((v45.i8[4] & 1) == 0)
    {
      goto LABEL_35;
    }
    v39[-1].i64[1] = 0x8000000000000000;
    v46 = vmovn_s64(vceqq_s64(*v39, v40));
    if ((v46.i8[0] & 1) != 0)
    {
LABEL_40:
      v39->i64[0] = 0x8000000000000000;
      if ((v46.i8[4] & 1) == 0)
        goto LABEL_32;
      goto LABEL_41;
    }
LABEL_36:
    if ((v46.i8[4] & 1) == 0)
      goto LABEL_32;
LABEL_41:
    v39->i64[1] = 0x8000000000000000;
LABEL_32:
    v39 += 2;
    v41 -= 4;
  }
  while (v41);
  if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_55;
LABEL_57:
  v58 = &v35[8 * v34];
  do
  {
    if (*(_QWORD *)v37 == -1)
      *(_QWORD *)v37 = 0x8000000000000000;
    v37 += 8;
  }
  while (v37 != v58);
LABEL_55:
  v206 = v27;
  v56 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v206);
  v206 = v208;
  v207 = 0x500000000;
  {
    v42 = mlir::RankedTensorType::get((uint64_t)v206, v207, v29, 0);
    v55 = 1;
  }
  else
  {
    v42 = 0;
    v55 = 0;
  }
  if (v206 != v208)
    free(v206);
LABEL_268:
  if (v202 != v204)
    free(v202);
  if (!v55)
    return 0;
LABEL_29:
  v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    v43 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *Type;
  _QWORD *v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v61;
  const char *v62;
  uint64_t Value;
  uint64_t v64;
  uint64_t OperandRange;
  const char *v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  _BYTE v73[96];
  void *v74;
  _QWORD *v75;
  void *__p;
  _QWORD **v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)a1[4];
  if (v3)
  {
    v4 = (const char *)a1[5];
    if (v4)
    {
      if (a1[6])
      {
        v5 = (const char *)a1[7];
        if (v5)
        {
          v6 = (const char *)a1[3];
          v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
          v66 = v5;
          v67 = v7;
          Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
          v9 = Type;
          if (Type)
            Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
          v70 = (uint64_t)v9;
          v71 = Type;
          ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
          v69 = 3;
          if (v11 == 1 && *ArgAttrsAttr == v69)
          {
            v62 = v5;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
            v64 = v12;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
              v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
              v66 = v3;
              v67 = v13;
              v14 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
              v15 = v14;
              if (v14)
                v14 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
              v70 = (uint64_t)v15;
              v71 = v14;
              v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
              v69 = 3;
              if (v17 == 1
                && *v16 == v69
                && (v62 = v3,
                    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                    v64 = v18,
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                v66 = v4;
                v67 = v19;
                v20 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
                v21 = v20;
                if (v20)
                  v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
                v70 = (uint64_t)v21;
                v71 = v20;
                v22 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
                v69 = 6;
                if (v23 == 1
                  && *v22 == v69
                  && (v62 = v4,
                      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                      v64 = v24,
                      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  if (!v6)
                    return 1;
                  v66 = v6;
                  v70 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
                  if (mlir::Type::isSignedInteger((mlir::Type *)&v70, 32))
                    return 1;
                  v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'channelAxis' failed to satisfy constraint: 3"
                        "2-bit signed integer attribute";
                }
                else
                {
                  v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'explicit_padding' failed to satisfy constrai"
                        "nt: ui64 elements attribute of shape {6}";
                }
              }
              else
              {
                v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: "
                      "ui64 elements attribute of shape {3}";
              }
              v66 = v61;
              v68 = 259;
              mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
              v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v70);
              return v25;
            }
          }
          v66 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 elements"
                " attribute of shape {3}";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          if (v78)
          {
            v46 = (_QWORD **)__p;
            if (__p)
            {
              v47 = v77;
              v48 = __p;
              if (v77 != __p)
              {
                do
                  v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                v48 = __p;
              }
              v77 = v46;
              operator delete(v48);
            }
            v29 = v74;
            if (!v74)
              goto LABEL_81;
            v49 = v75;
            v31 = v74;
            if (v75 == v74)
            {
LABEL_80:
              v75 = v29;
              operator delete(v31);
LABEL_81:
              if (v72 != v73)
                free(v72);
              return v25;
            }
            do
            {
              v51 = (void *)*--v49;
              v50 = v51;
              *v49 = 0;
              if (v51)
                operator delete[](v50);
            }
            while (v49 != v29);
LABEL_79:
            v31 = v74;
            goto LABEL_80;
          }
        }
        else
        {
          v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'strides'";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          if (v78)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v77;
              v54 = __p;
              if (v77 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v77 = v52;
              operator delete(v54);
            }
            v55 = v74;
            if (v74)
            {
              v56 = v75;
              v57 = v74;
              if (v75 != v74)
              {
                do
                {
                  v59 = (void *)*--v56;
                  v58 = v59;
                  *v56 = 0;
                  if (v59)
                    operator delete[](v58);
                }
                while (v56 != v55);
                v57 = v74;
              }
              v75 = v55;
              operator delete(v57);
            }
            if (v72 != v73)
              free(v72);
          }
        }
      }
      else
      {
        v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'padding_style'";
        v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
        v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
        if (v70)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
        if (v78)
        {
          v40 = (_QWORD **)__p;
          if (__p)
          {
            v41 = v77;
            v42 = __p;
            if (v77 != __p)
            {
              do
                v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              v42 = __p;
            }
            v77 = v40;
            operator delete(v42);
          }
          v29 = v74;
          if (!v74)
            goto LABEL_81;
          v43 = v75;
          v31 = v74;
          if (v75 == v74)
            goto LABEL_80;
          do
          {
            v45 = (void *)*--v43;
            v44 = v45;
            *v43 = 0;
            if (v45)
              operator delete[](v44);
          }
          while (v43 != v29);
          goto LABEL_79;
        }
      }
    }
    else
    {
      v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'explicit_padding'";
      v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
      if (v70)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
      if (v78)
      {
        v34 = (_QWORD **)__p;
        if (__p)
        {
          v35 = v77;
          v36 = __p;
          if (v77 != __p)
          {
            do
              v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            v36 = __p;
          }
          v77 = v34;
          operator delete(v36);
        }
        v29 = v74;
        if (!v74)
          goto LABEL_81;
        v37 = v75;
        v31 = v74;
        if (v75 == v74)
          goto LABEL_80;
        do
        {
          v39 = (void *)*--v37;
          v38 = v39;
          *v37 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v37 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'dilation_rates'";
    v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if (v70)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    if (v78)
    {
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v77;
        v28 = __p;
        if (v77 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v77 = v26;
        operator delete(v28);
      }
      v29 = v74;
      if (!v74)
        goto LABEL_81;
      v30 = v75;
      v31 = v74;
      if (v75 == v74)
        goto LABEL_80;
      do
      {
        v33 = (void *)*--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v30 != v29);
      goto LABEL_79;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DWeightsGradientOp::verify(mlir::mps::DepthwiseConv3DWeightsGradientOp *this)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NumElements;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unint64_t *v48;
  char *v49;
  __int128 v50;
  _QWORD **v51;
  _QWORD **v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t *v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  unint64_t *v75;
  char *v76;
  __int128 v77;
  _QWORD **v78;
  _QWORD **v79;
  void *v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  const char *v98;
  const void ***v99;
  char *v100;
  char *v101;
  __int128 v102;
  uint64_t v103;
  const void ***v104;
  char *v105;
  char *v106;
  __int128 v107;
  _QWORD **v108;
  _QWORD **v109;
  void *v110;
  _QWORD *v111;
  _QWORD *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  const char *v117;
  const void ***v118;
  char *v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  const void ***v123;
  char *v124;
  char *v125;
  __int128 v126;
  _QWORD **v127;
  _QWORD **v128;
  void *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  const void ***v133;
  char *v134;
  char *v135;
  __int128 v136;
  uint64_t v137;
  const void ***v138;
  char *v139;
  char *v140;
  __int128 v141;
  uint64_t v142;
  const void ***v143;
  char *v144;
  char *v145;
  __int128 v146;
  _QWORD **v147;
  _QWORD **v148;
  void *v149;
  _QWORD *v150;
  _QWORD *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  uint64_t v159;
  const void ***v160;
  char *v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  const void ***v165;
  char *v166;
  char *v167;
  __int128 v168;
  uint64_t v169;
  const void ***v170;
  char *v171;
  char *v172;
  __int128 v173;
  uint64_t v174;
  const void ***v175;
  char *v176;
  char *v177;
  __int128 v178;
  _QWORD **v179;
  _QWORD **v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  const void ***v186;
  char *v187;
  char *v188;
  __int128 v189;
  uint64_t v190;
  const void ***v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  const void ***v196;
  char *v197;
  char *v198;
  __int128 v199;
  uint64_t v200;
  const void ***v201;
  char *v202;
  char *v203;
  __int128 v204;
  _QWORD **v205;
  _QWORD **v206;
  void *v207;
  _QWORD *v208;
  void *v209;
  void *v210;
  unint64_t v211;
  unint64_t v212;
  BOOL v213;
  unint64_t v214;
  BOOL v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  BOOL v219;
  unint64_t v220;
  BOOL v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  BOOL v225;
  unint64_t v226;
  BOOL v227;
  unint64_t v228;
  BOOL v229;
  unint64_t v230;
  BOOL v231;
  unint64_t v232;
  BOOL v233;
  unint64_t v234;
  BOOL v235;
  int64_t v236;
  int64_t v237;
  int64_t v238;
  int64_t v239;
  int64_t v240;
  int64_t v241;
  int64_t v242;
  int64_t v243;
  int64_t v244;
  int64_t v245;
  int64_t v246;
  int64_t v247;
  int64_t v248;
  int64_t v249;
  int64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  const void **v254;
  const char *v255;
  uint64_t v256;
  __int16 v257;
  void *v258;
  unsigned int v259;
  const void **v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  unint64_t v267;
  const char *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  _BYTE v272[16];
  __int16 v273;
  void *v274;
  unsigned int v275;
  void *v276;
  unsigned int v277;
  unsigned int v278;
  _BYTE v279[96];
  void *v280;
  _QWORD *v281;
  void *__p;
  _QWORD **v283;
  char v284;
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*(_QWORD *)this + 47);
  v3 = *(_QWORD **)(*(_QWORD *)this + 72);
  v4 = v3[7];
  v5 = v3[3];
  v6 = v3[11];
  v266 = *(uint64_t **)this;
  v7 = v266 + 10;
  if (!v2)
    v7 = 0;
  v8 = v7[4];
  v10 = v7[1];
  v9 = v7[2];
  v264 = v10;
  v265 = v8;
  v263 = v9;
  if (v8 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v265) == 3)
  {
    v251 = v4;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v265, 0);
    v1 = v265;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v265);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v1, NumElements);
    while (1)
    {
      v12 = v254 == v260 && v255 == v261;
      if (v12 && v256 == v262)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
      if (v259 > 0x40)
      {
        v13 = *(_QWORD *)v258;
        if (*(uint64_t *)v258 > 0)
        {
LABEL_14:
          if (v259 < 0x41)
            goto LABEL_48;
LABEL_46:
          if (v258)
            operator delete[](v258);
          goto LABEL_48;
        }
      }
      else
      {
        v13 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
        if (v13 > 0)
          goto LABEL_14;
      }
      v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v259 > 0x40)
      {
        v14 = *(_QWORD *)v258;
        if (!v274)
          goto LABEL_27;
      }
      else
      {
        v14 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
        if (!v274)
          goto LABEL_27;
      }
      LODWORD(v267) = 2;
      v268 = (const char *)v14;
      v15 = (char *)v276;
      if (v277 >= v278)
      {
        v32 = v277 + 1;
        if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
        {
          v35 = (char *)&v267 - (_BYTE *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v32, 24);
          v15 = (char *)v276;
          v16 = (unint64_t *)((char *)v276 + v35);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v32, 24);
          v16 = &v267;
          v15 = (char *)v276;
        }
      }
      else
      {
        v16 = &v267;
      }
      v17 = &v15[24 * v277];
      v18 = *(_OWORD *)v16;
      *((_QWORD *)v17 + 2) = v16[2];
      *(_OWORD *)v17 = v18;
      v19 = ++v277;
      if (v274)
      {
        LODWORD(v267) = 3;
        v268 = ", all values should be positive.";
        v269 = 32;
        v20 = (char *)v276;
        if (v19 >= v278)
        {
          v33 = v19 + 1;
          v34 = (char *)v276 + 24 * v19 > (char *)&v267;
          if (v276 <= &v267 && v34)
          {
            v36 = (char *)&v267 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v33, 24);
            v20 = (char *)v276;
            v21 = (unint64_t *)((char *)v276 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v33, 24);
            v21 = &v267;
            v20 = (char *)v276;
          }
        }
        else
        {
          v21 = &v267;
        }
        v22 = &v20[24 * v277];
        v23 = *(_OWORD *)v21;
        *((_QWORD *)v22 + 2) = v21[2];
        *(_OWORD *)v22 = v23;
        ++v277;
      }
LABEL_27:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (v284)
      {
        v24 = (_QWORD **)__p;
        if (__p)
        {
          v25 = v283;
          v26 = __p;
          if (v283 != __p)
          {
            do
              v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            v26 = __p;
          }
          v283 = v24;
          operator delete(v26);
        }
        v27 = v280;
        if (v280)
        {
          v28 = v281;
          v29 = v280;
          if (v281 != v280)
          {
            do
            {
              v31 = (void *)*--v28;
              v30 = v31;
              *v28 = 0;
              if (v31)
                operator delete[](v30);
            }
            while (v28 != v27);
            v29 = v280;
          }
          v281 = v27;
          operator delete(v29);
        }
        if (v276 != v279)
          free(v276);
      }
      if (v259 >= 0x41)
        goto LABEL_46;
LABEL_48:
      if (v13 < 1)
        return v1;
      ++v256;
    }
    v4 = v251;
    if (!v264)
      goto LABEL_116;
LABEL_59:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v264) == 3)
    {
      v252 = v4;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v264, 0);
      v37 = v264;
      v38 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v264);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v37, v38);
      while (1)
      {
        v39 = v254 == v260 && v255 == v261;
        if (v39 && v256 == v262)
        {
          v4 = v252;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
        if (v259 > 0x40)
        {
          v40 = *(_QWORD *)v258;
          if (*(uint64_t *)v258 > 0)
          {
LABEL_69:
            if (v259 < 0x41)
              goto LABEL_103;
LABEL_101:
            if (v258)
              operator delete[](v258);
            goto LABEL_103;
          }
        }
        else
        {
          v40 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
          if (v40 > 0)
            goto LABEL_69;
        }
        v273 = 259;
        mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
        if (v259 > 0x40)
        {
          v41 = *(_QWORD *)v258;
          if (!v274)
            goto LABEL_82;
        }
        else
        {
          v41 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
          if (!v274)
            goto LABEL_82;
        }
        LODWORD(v267) = 2;
        v268 = (const char *)v41;
        v42 = (char *)v276;
        if (v277 >= v278)
        {
          v59 = v277 + 1;
          if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
          {
            v62 = (char *)&v267 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v59, 24);
            v42 = (char *)v276;
            v43 = (unint64_t *)((char *)v276 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v59, 24);
            v43 = &v267;
            v42 = (char *)v276;
          }
        }
        else
        {
          v43 = &v267;
        }
        v44 = &v42[24 * v277];
        v45 = *(_OWORD *)v43;
        *((_QWORD *)v44 + 2) = v43[2];
        *(_OWORD *)v44 = v45;
        v46 = ++v277;
        if (v274)
        {
          LODWORD(v267) = 3;
          v268 = ", all values should be positive.";
          v269 = 32;
          v47 = (char *)v276;
          if (v46 >= v278)
          {
            v60 = v46 + 1;
            v61 = (char *)v276 + 24 * v46 > (char *)&v267;
            if (v276 <= &v267 && v61)
            {
              v63 = (char *)&v267 - (_BYTE *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v60, 24);
              v47 = (char *)v276;
              v48 = (unint64_t *)((char *)v276 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v60, 24);
              v48 = &v267;
              v47 = (char *)v276;
            }
          }
          else
          {
            v48 = &v267;
          }
          v49 = &v47[24 * v277];
          v50 = *(_OWORD *)v48;
          *((_QWORD *)v49 + 2) = v48[2];
          *(_OWORD *)v49 = v50;
          ++v277;
        }
LABEL_82:
        v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
        if (v274)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
        if (v284)
        {
          v51 = (_QWORD **)__p;
          if (__p)
          {
            v52 = v283;
            v53 = __p;
            if (v283 != __p)
            {
              do
                v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
              while (v52 != v51);
              v53 = __p;
            }
            v283 = v51;
            operator delete(v53);
          }
          v54 = v280;
          if (v280)
          {
            v55 = v281;
            v56 = v280;
            if (v281 != v280)
            {
              do
              {
                v58 = (void *)*--v55;
                v57 = v58;
                *v55 = 0;
                if (v58)
                  operator delete[](v57);
              }
              while (v55 != v54);
              v56 = v280;
            }
            v281 = v54;
            operator delete(v56);
          }
          if (v276 != v279)
            free(v276);
        }
        if (v259 >= 0x41)
          goto LABEL_101;
LABEL_103:
        if (v40 < 1)
          return v1;
        ++v256;
      }
    }
  }
  else if (v264)
  {
    goto LABEL_59;
  }
LABEL_116:
  if (v263 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v263) == 6)
  {
    v253 = v4;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v263, 0);
    v64 = v263;
    v65 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v263);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v64, v65);
    while (1)
    {
      v66 = v254 == v260 && v255 == v261;
      if (v66 && v256 == v262)
      {
        v4 = v253;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
      if (v259 > 0x40)
      {
        v67 = *(_QWORD *)v258;
        if ((*(_QWORD *)v258 & 0x8000000000000000) == 0)
        {
LABEL_127:
          if (v259 < 0x41)
            goto LABEL_161;
LABEL_159:
          if (v258)
            operator delete[](v258);
          goto LABEL_161;
        }
      }
      else
      {
        v67 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
        if ((v67 & 0x8000000000000000) == 0)
          goto LABEL_127;
      }
      v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v259 > 0x40)
      {
        v68 = *(_QWORD *)v258;
        if (!v274)
          goto LABEL_140;
      }
      else
      {
        v68 = (uint64_t)((_QWORD)v258 << -(char)v259) >> -(char)v259;
        if (!v274)
          goto LABEL_140;
      }
      LODWORD(v267) = 2;
      v268 = (const char *)v68;
      v69 = (char *)v276;
      if (v277 >= v278)
      {
        v86 = v277 + 1;
        if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
        {
          v89 = (char *)&v267 - (_BYTE *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v86, 24);
          v69 = (char *)v276;
          v70 = (unint64_t *)((char *)v276 + v89);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v86, 24);
          v70 = &v267;
          v69 = (char *)v276;
        }
      }
      else
      {
        v70 = &v267;
      }
      v71 = &v69[24 * v277];
      v72 = *(_OWORD *)v70;
      *((_QWORD *)v71 + 2) = v70[2];
      *(_OWORD *)v71 = v72;
      v73 = ++v277;
      if (v274)
      {
        LODWORD(v267) = 3;
        v268 = ", all values should be non-negative.";
        v269 = 36;
        v74 = (char *)v276;
        if (v73 >= v278)
        {
          v87 = v73 + 1;
          v88 = (char *)v276 + 24 * v73 > (char *)&v267;
          if (v276 <= &v267 && v88)
          {
            v90 = (char *)&v267 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v87, 24);
            v74 = (char *)v276;
            v75 = (unint64_t *)((char *)v276 + v90);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v87, 24);
            v75 = &v267;
            v74 = (char *)v276;
          }
        }
        else
        {
          v75 = &v267;
        }
        v76 = &v74[24 * v277];
        v77 = *(_OWORD *)v75;
        *((_QWORD *)v76 + 2) = v75[2];
        *(_OWORD *)v76 = v77;
        ++v277;
      }
LABEL_140:
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (v284)
      {
        v78 = (_QWORD **)__p;
        if (__p)
        {
          v79 = v283;
          v80 = __p;
          if (v283 != __p)
          {
            do
              v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
            while (v79 != v78);
            v80 = __p;
          }
          v283 = v78;
          operator delete(v80);
        }
        v81 = v280;
        if (v280)
        {
          v82 = v281;
          v83 = v280;
          if (v281 != v280)
          {
            do
            {
              v85 = (void *)*--v82;
              v84 = v85;
              *v82 = 0;
              if (v85)
                operator delete[](v84);
            }
            while (v82 != v81);
            v83 = v280;
          }
          v281 = v81;
          operator delete(v83);
        }
        if (v276 != v279)
          free(v276);
      }
      if (v259 >= 0x41)
        goto LABEL_159;
LABEL_161:
      if (v67 < 0)
        return v1;
      ++v256;
    }
  }
  v270 = (void *)v266[2 * (((unint64_t)*((unsigned int *)v266 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v270, (llvm::APInt *)&v274);
  if (v275 > 0x40)
  {
    v94 = *(_QWORD *)v274;
    operator delete[](v274);
    v92 = v94 << 32;
    v93 = (const char *)(int)v94;
    if (!v4)
    {
LABEL_197:
      v267 = 0;
      goto LABEL_198;
    }
  }
  else
  {
    v91 = (uint64_t)((_QWORD)v274 << -(uint64_t)v275) >> -(uint64_t)v275;
    v92 = v91 << 32;
    v93 = (const char *)(int)v91;
    if (!v4)
      goto LABEL_197;
  }
  v95 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v95)
    goto LABEL_197;
  v96 = *(void **)(*(_QWORD *)v95 + 136);
  if (v96 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v95 = 0;
  v267 = v95;
  if (v96 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v267);
    v98 = (const char *)v97;
    if (v97 <= 3)
    {
      v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        v255 = v98;
        v99 = &v254;
        v100 = (char *)v276;
        if (v277 >= v278)
        {
          v216 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            v239 = (char *)&v254 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v216, 24);
            v100 = (char *)v276;
            v99 = (const void ***)((char *)v276 + v239);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v216, 24);
            v99 = &v254;
            v100 = (char *)v276;
          }
        }
        v101 = &v100[24 * v277];
        v102 = *(_OWORD *)v99;
        *((_QWORD *)v101 + 2) = v99[2];
        *(_OWORD *)v101 = v102;
        v103 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          v255 = ".";
          v256 = 1;
          v104 = &v254;
          v105 = (char *)v276;
          if (v103 >= v278)
          {
            v218 = v103 + 1;
            v219 = (char *)v276 + 24 * v103 > (char *)&v254;
            if (v276 <= &v254 && v219)
            {
              v241 = (char *)&v254 - (_BYTE *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v218, 24);
              v105 = (char *)v276;
              v104 = (const void ***)((char *)v276 + v241);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v218, 24);
              v104 = &v254;
              v105 = (char *)v276;
            }
          }
          v106 = &v105[24 * v277];
          v107 = *(_OWORD *)v104;
          *((_QWORD *)v106 + 2) = v104[2];
          *(_OWORD *)v106 = v107;
          ++v277;
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (!v284)
        return v1;
      v108 = (_QWORD **)__p;
      if (__p)
      {
        v109 = v283;
        v110 = __p;
        if (v283 != __p)
        {
          do
            v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
          while (v109 != v108);
          v110 = __p;
        }
        v283 = v108;
        operator delete(v110);
      }
      v111 = v280;
      if (!v280)
        goto LABEL_313;
      v112 = v281;
      v113 = v280;
      if (v281 == v280)
        goto LABEL_312;
      do
      {
        v132 = (void *)*--v112;
        v131 = v132;
        *v112 = 0;
        if (v132)
          operator delete[](v131);
      }
      while (v112 != v111);
      goto LABEL_311;
    }
    if (v92 >= 0)
      v159 = v97;
    else
      v159 = 0;
    if ((unint64_t)&v93[-v159] <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        v255 = v93;
        v160 = &v254;
        v161 = (char *)v276;
        if (v277 >= v278)
        {
          v222 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            v243 = (char *)&v254 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v222, 24);
            v161 = (char *)v276;
            v160 = (const void ***)((char *)v276 + v243);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v222, 24);
            v160 = &v254;
            v161 = (char *)v276;
          }
        }
        v162 = &v161[24 * v277];
        v163 = *(_OWORD *)v160;
        *((_QWORD *)v162 + 2) = v160[2];
        *(_OWORD *)v162 = v163;
        v164 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          v255 = " for input rank ";
          v256 = 16;
          v165 = &v254;
          v166 = (char *)v276;
          if (v164 >= v278)
          {
            v224 = v164 + 1;
            v225 = (char *)v276 + 24 * v164 > (char *)&v254;
            if (v276 <= &v254 && v225)
            {
              v245 = (char *)&v254 - (_BYTE *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v224, 24);
              v166 = (char *)v276;
              v165 = (const void ***)((char *)v276 + v245);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v224, 24);
              v165 = &v254;
              v166 = (char *)v276;
            }
          }
          v167 = &v166[24 * v277];
          v168 = *(_OWORD *)v165;
          *((_QWORD *)v167 + 2) = v165[2];
          *(_OWORD *)v167 = v168;
          v169 = ++v277;
          if (v274)
          {
            LODWORD(v254) = 2;
            v255 = v98;
            v170 = &v254;
            v171 = (char *)v276;
            if (v169 >= v278)
            {
              v228 = v169 + 1;
              v229 = (char *)v276 + 24 * v169 > (char *)&v254;
              if (v276 <= &v254 && v229)
              {
                v247 = (char *)&v254 - (_BYTE *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v228, 24);
                v171 = (char *)v276;
                v170 = (const void ***)((char *)v276 + v247);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v228, 24);
                v170 = &v254;
                v171 = (char *)v276;
              }
            }
            v172 = &v171[24 * v277];
            v173 = *(_OWORD *)v170;
            *((_QWORD *)v172 + 2) = v170[2];
            *(_OWORD *)v172 = v173;
            v174 = ++v277;
            if (v274)
            {
              LODWORD(v254) = 3;
              v255 = ".";
              v256 = 1;
              v175 = &v254;
              v176 = (char *)v276;
              if (v174 >= v278)
              {
                v232 = v174 + 1;
                v233 = (char *)v276 + 24 * v174 > (char *)&v254;
                if (v276 <= &v254 && v233)
                {
                  v249 = (char *)&v254 - (_BYTE *)v276;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v232, 24);
                  v176 = (char *)v276;
                  v175 = (const void ***)((char *)v276 + v249);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v232, 24);
                  v175 = &v254;
                  v176 = (char *)v276;
                }
              }
              v177 = &v176[24 * v277];
              v178 = *(_OWORD *)v175;
              *((_QWORD *)v177 + 2) = v175[2];
              *(_OWORD *)v177 = v178;
              ++v277;
            }
          }
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (!v284)
        return v1;
      v179 = (_QWORD **)__p;
      if (__p)
      {
        v180 = v283;
        v181 = __p;
        if (v283 != __p)
        {
          do
            v180 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v180 - 1);
          while (v180 != v179);
          v181 = __p;
        }
        v283 = v179;
        operator delete(v181);
      }
      v111 = v280;
      if (!v280)
        goto LABEL_313;
      v182 = v281;
      v113 = v280;
      if (v281 == v280)
        goto LABEL_312;
      do
      {
        v184 = (void *)*--v182;
        v183 = v184;
        *v182 = 0;
        if (v184)
          operator delete[](v183);
      }
      while (v182 != v111);
LABEL_311:
      v113 = v280;
LABEL_312:
      v281 = v111;
      operator delete(v113);
      goto LABEL_313;
    }
  }
LABEL_198:
  if (!v5 || (v114 = (void *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8)) == 0)
  {
    v258 = 0;
    goto LABEL_224;
  }
  v115 = *(void **)(*(_QWORD *)v114 + 136);
  if (v115 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v114 = 0;
  v258 = v114;
  if (v115 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
LABEL_224:
    v270 = v272;
    v271 = 0x500000000;
    v1 = 1;
    if (mlir::matchConstantWithIntVector<long long>(v6, (uint64_t)&v270) && (_DWORD)v271 != 4)
    {
      v257 = 259;
      mlir::OpState::emitOpError(&v266, &v254, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v260) = 3;
        v262 = 21;
        v133 = &v260;
        v134 = (char *)v276;
        if (v277 >= v278)
        {
          v211 = v277 + 1;
          if (v276 <= &v260 && (char *)v276 + 24 * v277 > (char *)&v260)
          {
            v236 = (char *)&v260 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v211, 24);
            v134 = (char *)v276;
            v133 = (const void ***)((char *)v276 + v236);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v211, 24);
            v133 = &v260;
            v134 = (char *)v276;
          }
        }
        v135 = &v134[24 * v277];
        v136 = *(_OWORD *)v133;
        *((_QWORD *)v135 + 2) = v133[2];
        *(_OWORD *)v135 = v136;
        v137 = ++v277;
        if (v274)
        {
          LODWORD(v260) = 5;
          v261 = (const char *)v271;
          v138 = &v260;
          v139 = (char *)v276;
          if (v137 >= v278)
          {
            v212 = v137 + 1;
            v213 = (char *)v276 + 24 * v137 > (char *)&v260;
            if (v276 <= &v260 && v213)
            {
              v237 = (char *)&v260 - (_BYTE *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v212, 24);
              v139 = (char *)v276;
              v138 = (const void ***)((char *)v276 + v237);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v212, 24);
              v138 = &v260;
              v139 = (char *)v276;
            }
          }
          v140 = &v139[24 * v277];
          v141 = *(_OWORD *)v138;
          *((_QWORD *)v140 + 2) = v138[2];
          *(_OWORD *)v140 = v141;
          v142 = ++v277;
          if (v274)
          {
            LODWORD(v260) = 3;
            v261 = " values.";
            v262 = 8;
            v143 = &v260;
            v144 = (char *)v276;
            if (v142 >= v278)
            {
              v214 = v142 + 1;
              v215 = (char *)v276 + 24 * v142 > (char *)&v260;
              if (v276 <= &v260 && v215)
              {
                v238 = (char *)&v260 - (_BYTE *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v214, 24);
                v144 = (char *)v276;
                v143 = (const void ***)((char *)v276 + v238);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v214, 24);
                v143 = &v260;
                v144 = (char *)v276;
              }
            }
            v145 = &v144[24 * v277];
            v146 = *(_OWORD *)v143;
            *((_QWORD *)v145 + 2) = v143[2];
            *(_OWORD *)v145 = v146;
            ++v277;
          }
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (v284)
      {
        v147 = (_QWORD **)__p;
        if (__p)
        {
          v148 = v283;
          v149 = __p;
          if (v283 != __p)
          {
            do
              v148 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v148 - 1);
            while (v148 != v147);
            v149 = __p;
          }
          v283 = v147;
          operator delete(v149);
        }
        v150 = v280;
        if (v280)
        {
          v151 = v281;
          v152 = v280;
          if (v281 != v280)
          {
            do
            {
              v154 = (void *)*--v151;
              v153 = v154;
              *v151 = 0;
              if (v154)
                operator delete[](v153);
            }
            while (v151 != v150);
            v152 = v280;
          }
          v281 = v150;
          operator delete(v152);
        }
        if (v276 != v279)
          free(v276);
      }
    }
    v157 = v270;
    if (v270 != v272)
    {
LABEL_255:
      free(v157);
      return v1;
    }
    return v1;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v258);
  v117 = (const char *)v116;
  if (v116 > 3)
  {
    if (v92 >= 0)
      v185 = v116;
    else
      v185 = 0;
    if ((unint64_t)&v93[-v185] <= 0xFFFFFFFFFFFFFFFBLL)
    {
      v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        v255 = v93;
        v186 = &v254;
        v187 = (char *)v276;
        if (v277 >= v278)
        {
          v223 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            v244 = (char *)&v254 - (_BYTE *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v223, 24);
            v187 = (char *)v276;
            v186 = (const void ***)((char *)v276 + v244);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v223, 24);
            v186 = &v254;
            v187 = (char *)v276;
          }
        }
        v188 = &v187[24 * v277];
        v189 = *(_OWORD *)v186;
        *((_QWORD *)v188 + 2) = v186[2];
        *(_OWORD *)v188 = v189;
        v190 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          v255 = " for input gradient rank ";
          v256 = 25;
          v191 = &v254;
          v192 = (char *)v276;
          if (v190 >= v278)
          {
            v226 = v190 + 1;
            v227 = (char *)v276 + 24 * v190 > (char *)&v254;
            if (v276 <= &v254 && v227)
            {
              v246 = (char *)&v254 - (_BYTE *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v226, 24);
              v192 = (char *)v276;
              v191 = (const void ***)((char *)v276 + v246);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v226, 24);
              v191 = &v254;
              v192 = (char *)v276;
            }
          }
          v193 = &v192[24 * v277];
          v194 = *(_OWORD *)v191;
          *((_QWORD *)v193 + 2) = v191[2];
          *(_OWORD *)v193 = v194;
          v195 = ++v277;
          if (v274)
          {
            LODWORD(v254) = 2;
            v255 = v117;
            v196 = &v254;
            v197 = (char *)v276;
            if (v195 >= v278)
            {
              v230 = v195 + 1;
              v231 = (char *)v276 + 24 * v195 > (char *)&v254;
              if (v276 <= &v254 && v231)
              {
                v248 = (char *)&v254 - (_BYTE *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v230, 24);
                v197 = (char *)v276;
                v196 = (const void ***)((char *)v276 + v248);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v230, 24);
                v196 = &v254;
                v197 = (char *)v276;
              }
            }
            v198 = &v197[24 * v277];
            v199 = *(_OWORD *)v196;
            *((_QWORD *)v198 + 2) = v196[2];
            *(_OWORD *)v198 = v199;
            v200 = ++v277;
            if (v274)
            {
              LODWORD(v254) = 3;
              v255 = ".";
              v256 = 1;
              v201 = &v254;
              v202 = (char *)v276;
              if (v200 >= v278)
              {
                v234 = v200 + 1;
                v235 = (char *)v276 + 24 * v200 > (char *)&v254;
                if (v276 <= &v254 && v235)
                {
                  v250 = (char *)&v254 - (_BYTE *)v276;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v234, 24);
                  v202 = (char *)v276;
                  v201 = (const void ***)((char *)v276 + v250);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v234, 24);
                  v201 = &v254;
                  v202 = (char *)v276;
                }
              }
              v203 = &v202[24 * v277];
              v204 = *(_OWORD *)v201;
              *((_QWORD *)v203 + 2) = v201[2];
              *(_OWORD *)v203 = v204;
              ++v277;
            }
          }
        }
      }
      v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      if (!v284)
        return v1;
      v205 = (_QWORD **)__p;
      if (__p)
      {
        v206 = v283;
        v207 = __p;
        if (v283 != __p)
        {
          do
            v206 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v206 - 1);
          while (v206 != v205);
          v207 = __p;
        }
        v283 = v205;
        operator delete(v207);
      }
      v111 = v280;
      if (!v280)
        goto LABEL_313;
      v208 = v281;
      v113 = v280;
      if (v281 == v280)
        goto LABEL_312;
      do
      {
        v210 = (void *)*--v208;
        v209 = v210;
        *v208 = 0;
        if (v210)
          operator delete[](v209);
      }
      while (v208 != v111);
      goto LABEL_311;
    }
    goto LABEL_224;
  }
  v273 = 259;
  mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
  if (v274)
  {
    LODWORD(v254) = 2;
    v255 = v117;
    v118 = &v254;
    v119 = (char *)v276;
    if (v277 >= v278)
    {
      v217 = v277 + 1;
      if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
      {
        v240 = (char *)&v254 - (_BYTE *)v276;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v217, 24);
        v119 = (char *)v276;
        v118 = (const void ***)((char *)v276 + v240);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v217, 24);
        v118 = &v254;
        v119 = (char *)v276;
      }
    }
    v120 = &v119[24 * v277];
    v121 = *(_OWORD *)v118;
    *((_QWORD *)v120 + 2) = v118[2];
    *(_OWORD *)v120 = v121;
    v122 = ++v277;
    if (v274)
    {
      LODWORD(v254) = 3;
      v255 = ".";
      v256 = 1;
      v123 = &v254;
      v124 = (char *)v276;
      if (v122 >= v278)
      {
        v220 = v122 + 1;
        v221 = (char *)v276 + 24 * v122 > (char *)&v254;
        if (v276 <= &v254 && v221)
        {
          v242 = (char *)&v254 - (_BYTE *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v220, 24);
          v124 = (char *)v276;
          v123 = (const void ***)((char *)v276 + v242);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v220, 24);
          v123 = &v254;
          v124 = (char *)v276;
        }
      }
      v125 = &v124[24 * v277];
      v126 = *(_OWORD *)v123;
      *((_QWORD *)v125 + 2) = v123[2];
      *(_OWORD *)v125 = v126;
      ++v277;
    }
  }
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
  if (v274)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
  if (v284)
  {
    v127 = (_QWORD **)__p;
    if (__p)
    {
      v128 = v283;
      v129 = __p;
      if (v283 != __p)
      {
        do
          v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
        while (v128 != v127);
        v129 = __p;
      }
      v283 = v127;
      operator delete(v129);
    }
    v111 = v280;
    if (v280)
    {
      v130 = v281;
      v113 = v280;
      if (v281 == v280)
        goto LABEL_312;
      do
      {
        v156 = (void *)*--v130;
        v155 = v156;
        *v130 = 0;
        if (v156)
          operator delete[](v155);
      }
      while (v130 != v111);
      goto LABEL_311;
    }
LABEL_313:
    v157 = v276;
    if (v276 == v279)
      return v1;
    goto LABEL_255;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DWeightsGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[2];
  void *v23;
  uint64_t v24;
  _BYTE v25[32];
  unint64_t v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a4;
  v22[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v11 = mlir::ValueRange::dereference_iterator(v22, 0);
  v12 = mlir::ValueRange::dereference_iterator(v22, 1);
  v13 = mlir::ValueRange::dereference_iterator(v22, 2);
  v14 = (void *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8);
  v15 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = v14;
  v24 = v15;
  mlir::ValueRange::ValueRange(v26, (uint64_t)&v23, 2uLL);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v15 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v15 + 8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8))
      goto LABEL_4;
LABEL_8:
    v14 = 0;
    if (!v15)
      goto LABEL_20;
    goto LABEL_9;
  }
  v15 = 0;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8))
    goto LABEL_8;
LABEL_4:
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v14 + 8);
  if (!v15)
    goto LABEL_20;
LABEL_9:
  if (*(_UNKNOWN **)(*(_QWORD *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v14
    && *(_UNKNOWN **)(*(_QWORD *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v23 = v25;
    v24 = 0x400000000;
    if (mlir::matchConstantWithIntVector<long long>(v13, (uint64_t)&v23))
    {
      v18 = v24;
      if (v24 <= 3)
      {
        if (HIDWORD(v24) > 3
          || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, 4uLL, 8), v18 = v24, (_DWORD)v24 != 4))
        {
          bzero((char *)v23 + 8 * v18, 32 - 8 * v18);
        }
        v18 = 4;
        LODWORD(v24) = 4;
      }
      v19 = mlir::RankedTensorType::get((uint64_t)v23, v18, v16, 0);
      v20 = v23;
      if (v23 == v25)
        goto LABEL_21;
    }
    else
    {
      v19 = mlir::UnrankedTensorType::get(v16);
      v20 = v23;
      if (v23 == v25)
        goto LABEL_21;
    }
    free(v20);
    goto LABEL_21;
  }
LABEL_20:
  v19 = mlir::UnrankedTensorType::get(v16);
LABEL_21:
  v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::checkInputTensors<mlir::mps::PoolMaxGradientOp>(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  const void **v24;
  __int16 v25;
  uint64_t *v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v26 = (uint64_t *)a1;
  v1 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v2 = (unsigned int *)(a1 + 16 * ((v1 >> 23) & 1) + 64);
  else
    v2 = 0;
  v3 = v2[18];
  v4 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    v5 = *(_QWORD *)(a1 + 72);
    if (v4)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    if (v4)
    {
LABEL_6:
      v6 = *(_QWORD *)(v5 + 32 * v3 + 24);
      v7 = v4 + v3;
      v8 = v2[20];
      if ((v1 & 0x800000) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  v6 = 0;
  v7 = v4 + v3;
  v8 = v2[20];
  if ((v1 & 0x800000) != 0)
  {
LABEL_7:
    v9 = *(_QWORD *)(a1 + 72);
    if (v8)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v9 = 0;
  if (v8)
  {
LABEL_8:
    v10 = *(_QWORD *)(v9 + 32 * v7 + 24);
    v11 = v2[21];
    if ((v1 & 0x800000) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v10 = 0;
  v11 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
LABEL_9:
    v12 = *(_QWORD *)(a1 + 72);
    if (v11)
      goto LABEL_10;
LABEL_19:
    v13 = 0;
    if (v10)
      goto LABEL_11;
LABEL_20:
    if (!v6 || v13)
      goto LABEL_23;
    return 1;
  }
LABEL_18:
  v12 = 0;
  if (!v11)
    goto LABEL_19;
LABEL_10:
  v13 = *(_QWORD *)(v12 + 32 * (v8 + v7) + 24);
  if (!v10)
    goto LABEL_20;
LABEL_11:
  if (v13 && !v6)
    return 1;
LABEL_23:
  v24 = (const void **)"op supports only (gradient && input) || (gradient && indices && ouput_shape) as parameters";
  v25 = 259;
  mlir::OpState::emitOpError(&v26, &v24, (uint64_t)v27);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  if (v34)
  {
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v33;
      v17 = __p;
      if (v33 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v33 = v15;
      operator delete(v17);
    }
    v18 = v30;
    if (v30)
    {
      v19 = v31;
      v20 = v30;
      if (v31 != v30)
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v30;
      }
      v31 = v18;
      operator delete(v20);
    }
    if (v28 != &v29)
      free(v28);
  }
  return v14;
}

uint64_t mlir::mps::PoolMaxGradientOp::getInput(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = *(_DWORD *)(v2 + 76);
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * *(unsigned int *)(v2 + 72) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * *(unsigned int *)(v2 + 72) + 24);
  }
  return 0;
}

uint64_t mlir::mps::PoolMaxGradientOp::getIndices(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[20];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[19] + v2[18]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[19] + v2[18]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::PoolMaxGradientOp::getOutputShape(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[20] + v2[19] + v2[18]) + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * (v2[20] + v2[19] + v2[18]) + 24);
  }
  return 0;
}

uint64_t mlir::mps::inferPool4DShape(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;

  v12 = *((unsigned int *)a4 + 2);
  if (v12 >= 4)
    v13 = 4;
  else
    v13 = *((unsigned int *)a4 + 2);
  if (v12 <= 3)
    v14 = 0;
  else
    v14 = v12 - v13;
  v15 = *(unsigned int *)(a10 + 8);
  v16 = v12 - v15;
  if ((_DWORD)v12 != (_DWORD)v15)
  {
    if (v12 >= v15)
    {
      v110 = a3;
      v111 = a6;
      v17 = a7;
      v18 = a8;
      v19 = *(unsigned int *)(a10 + 8);
      v20 = *(_DWORD *)(a10 + 8);
      if (*(_DWORD *)(a10 + 12) < v12)
      {
        v109 = *((unsigned int *)a4 + 2);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v12, 8);
        v12 = v109;
        v19 = *(unsigned int *)(a10 + 8);
        v20 = *(_DWORD *)(a10 + 8);
      }
      bzero((void *)(*(_QWORD *)a10 + 8 * v19), 8 * (v12 - v15));
      LODWORD(v12) = v20 + v16;
      a8 = v18;
      a7 = v17;
      a3 = v110;
      a6 = v111;
    }
    *(_DWORD *)(a10 + 8) = v12;
  }
  if (v14)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *(_QWORD *)a10;
    if (v14 < 4)
      goto LABEL_19;
    if ((unint64_t)(v23 - v22) < 0x20)
      goto LABEL_19;
    v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = (__int128 *)(v22 + 16);
    v25 = (_OWORD *)(v23 + 16);
    v26 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v24;
      *(v25 - 1) = *(v24 - 1);
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v14 != v21)
    {
LABEL_19:
      v28 = v14 - v21;
      v29 = 8 * v21;
      v30 = (uint64_t *)(v22 + v29);
      v31 = (_QWORD *)(v23 + v29);
      do
      {
        v32 = *v30++;
        *v31++ = v32;
        --v28;
      }
      while (v28);
    }
  }
  if (v13)
  {
    v33 = *a4;
    v34 = *a5;
    v35 = *(_QWORD *)a10;
    if (a8 == 4 || a8 == 2)
    {
      v36 = -v13;
      v37 = v34 + 32;
      v38 = (uint64_t *)(v35 + 8 * v14);
      v39 = (uint64_t *)(v33 + 8 * v14);
      do
      {
        v42 = *v39++;
        v41 = v42;
        if (*(uint64_t *)(v37 + 8 * v36) <= 1)
          v43 = 1;
        else
          v43 = *(_QWORD *)(v37 + 8 * v36);
        v44 = v41;
        if ((unint64_t)v43 >= 2)
        {
          v44 = 0x8000000000000000;
          if (v41 != 0x8000000000000000)
          {
            v44 = v41 / v43;
            if (v41 / v43 * v43 != v41)
              v44 += v41 >= 0;
          }
        }
        *v38++ = v44;
      }
      while (!__CFADD__(v36++, 1));
    }
    else
    {
      v45 = a9;
      v46 = *a3;
      v47 = *a6;
      v48 = *a7;
      v49 = *(_QWORD *)(v33 + 8 * v14);
      v50 = 4 - v13;
      v51 = *(_QWORD *)(*a3 + 8 * (4 - v13));
      v52 = 0x8000000000000000;
      if (v51 != 0x8000000000000000 && v49 != 0x8000000000000000)
      {
        v54 = *(_QWORD *)(v48 + 16 * v50 + 8) & ~(*(uint64_t *)(v48 + 16 * v50 + 8) >> 63);
        v55 = *(_QWORD *)(v48 + 16 * v50) & ~(*(uint64_t *)(v48 + 16 * v50) >> 63);
        v56 = 8 * v50;
        v57 = *(_QWORD *)(v47 + v56);
        if (v57 <= 1)
          v57 = 1;
        v58 = *(_QWORD *)(v34 + v56);
        if (v58 <= 1)
          v58 = 1;
        if (a8 == 1)
        {
          v54 = 0;
          v55 = 0;
        }
        v59 = v58 + v49 + v55 + v54 + ~(v57 * (v51 - 1));
        v60 = v59 / v58;
        v61 = v59 / v58 * v58;
        if (v59 >= 0)
          v62 = a9;
        else
          v62 = a9 - 1;
        if (v61 == v59)
          v63 = 0;
        else
          v63 = v62;
        v52 = (v60 + v63) & ~((v60 + v63) >> 63);
      }
      *(_QWORD *)(v35 + 8 * v14) = v52;
      if (v13 != 1)
      {
        v64 = v14 + 1;
        v65 = 5 - v13;
        v66 = *(_QWORD *)(v46 + 8 * (5 - v13));
        v67 = 0x8000000000000000;
        if (v66 != 0x8000000000000000)
        {
          v68 = *(_QWORD *)(v33 + 8 * v64);
          if (v68 != 0x8000000000000000)
          {
            v69 = *(_QWORD *)(v48 + 16 * v65 + 8) & ~(*(uint64_t *)(v48 + 16 * v65 + 8) >> 63);
            v70 = *(_QWORD *)(v48 + 16 * v65) & ~(*(uint64_t *)(v48 + 16 * v65) >> 63);
            v71 = 8 * v65;
            v72 = *(_QWORD *)(v47 + v71);
            if (v72 <= 1)
              v72 = 1;
            v73 = *(_QWORD *)(v34 + v71);
            if (v73 <= 1)
              v73 = 1;
            if (a8 == 1)
            {
              v69 = 0;
              v70 = 0;
            }
            v74 = v73 + v68 + v70 + v69 + ~(v72 * (v66 - 1));
            v75 = v74 / v73;
            v76 = v74 / v73 * v73;
            if (v74 >= 0)
              v77 = a9;
            else
              v77 = a9 - 1;
            if (v76 == v74)
              v78 = 0;
            else
              v78 = v77;
            v67 = (v75 + v78) & ~((v75 + v78) >> 63);
          }
        }
        *(_QWORD *)(v35 + 8 * v64) = v67;
        if (v13 != 2)
        {
          v79 = v14 + 2;
          v80 = 6 - v13;
          v81 = *(_QWORD *)(v46 + 8 * (6 - v13));
          v82 = 0x8000000000000000;
          if (v81 != 0x8000000000000000)
          {
            v83 = *(_QWORD *)(v33 + 8 * v79);
            if (v83 != 0x8000000000000000)
            {
              v84 = *(_QWORD *)(v48 + 16 * v80 + 8) & ~(*(uint64_t *)(v48 + 16 * v80 + 8) >> 63);
              v85 = *(_QWORD *)(v48 + 16 * v80) & ~(*(uint64_t *)(v48 + 16 * v80) >> 63);
              v86 = 8 * v80;
              v87 = *(_QWORD *)(v47 + v86);
              if (v87 <= 1)
                v87 = 1;
              v88 = *(_QWORD *)(v34 + v86);
              if (v88 <= 1)
                v88 = 1;
              if (a8 == 1)
              {
                v84 = 0;
                v85 = 0;
              }
              v89 = v88 + v83 + v85 + v84 + ~(v87 * (v81 - 1));
              v90 = v89 / v88;
              v91 = v89 / v88 * v88;
              if (v89 >= 0)
                v92 = a9;
              else
                v92 = a9 - 1;
              if (v91 == v89)
                v93 = 0;
              else
                v93 = v92;
              v82 = (v90 + v93) & ~((v90 + v93) >> 63);
            }
          }
          *(_QWORD *)(v35 + 8 * v79) = v82;
          if (v13 != 3)
          {
            v94 = v14 + 3;
            v95 = v13 ^ 7;
            v96 = *(_QWORD *)(v46 + 8 * (v13 ^ 7));
            v97 = 0x8000000000000000;
            if (v96 != 0x8000000000000000)
            {
              v98 = *(_QWORD *)(v33 + 8 * v94);
              if (v98 != 0x8000000000000000)
              {
                v99 = *(_QWORD *)(v48 + 16 * v95 + 8) & ~(*(uint64_t *)(v48 + 16 * v95 + 8) >> 63);
                v100 = *(_QWORD *)(v48 + 16 * v95) & ~(*(uint64_t *)(v48 + 16 * v95) >> 63);
                v101 = 8 * v95;
                v102 = *(_QWORD *)(v47 + v101);
                if (v102 <= 1)
                  v102 = 1;
                v103 = *(_QWORD *)(v34 + v101);
                if (v103 <= 1)
                  v103 = 1;
                if (a8 == 1)
                  v104 = 0;
                else
                  v104 = v99;
                if (a8 == 1)
                  v100 = 0;
                v105 = v103 + v98 + v100 + v104 + ~(v102 * (v96 - 1));
                v106 = v105 / v103;
                v107 = v105 / v103 * v103;
                if (v105 < 0)
                  v45 = a9 - 1;
                if (v107 == v105)
                  v45 = 0;
                v97 = (v106 + v45) & ~((v106 + v45) >> 63);
              }
            }
            *(_QWORD *)(v35 + 8 * v94) = v97;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t mlir::mps::inferPool4DGradientOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int64x2_t *v12;
  int v13;
  __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int64x2_t *v18;
  int64x2_t v19;
  uint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t ElementTypeOrSelf;
  uint64_t v26;
  uint64_t OperandRange;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[32];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v35[0] = a3;
  v35[1] = a4;
  v7 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v35, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
  {
    v30 = 0;
    v31 = 0;
    if (a4 == 3)
      goto LABEL_3;
LABEL_21:
    v23 = mlir::ValueRange::dereference_iterator(v35, 1);
  }
  v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
  v30 = v7;
  v31 = v8;
  if (a4 != 3)
    goto LABEL_21;
LABEL_3:
  v32 = v34;
  v33 = 0x400000000;
  v9 = mlir::ValueRange::dereference_iterator(v35, 2);
  if (mlir::matchConstantWithIntVector<long long>(v9, (uint64_t)&v32))
  {
    v10 = v33;
    if (v33 >= 4)
    {
      v12 = (int64x2_t *)v32;
      v14 = (char *)v32 + 8 * v33;
      v15 = 8 * v33 - 8;
      if (v15 >= 0x18)
      {
LABEL_9:
        v16 = (v15 >> 3) + 1;
        v17 = &v12->i64[v16 & 0x3FFFFFFFFFFFFFFCLL];
        v18 = v12 + 1;
        v19.i64[0] = -1;
        v19.i64[1] = -1;
        v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        while (1)
        {
          v21 = vmovn_s64(vceqq_s64(v18[-1], v19));
          if ((v21.i8[0] & 1) != 0)
          {
            v18[-1].i64[0] = 0x8000000000000000;
            if ((v21.i8[4] & 1) == 0)
            {
LABEL_13:
              v22 = vmovn_s64(vceqq_s64(*v18, v19));
              if ((v22.i8[0] & 1) == 0)
                goto LABEL_14;
              goto LABEL_18;
            }
          }
          else if ((v21.i8[4] & 1) == 0)
          {
            goto LABEL_13;
          }
          v18[-1].i64[1] = 0x8000000000000000;
          v22 = vmovn_s64(vceqq_s64(*v18, v19));
          if ((v22.i8[0] & 1) == 0)
          {
LABEL_14:
            if ((v22.i8[4] & 1) != 0)
              goto LABEL_19;
            goto LABEL_10;
          }
LABEL_18:
          v18->i64[0] = 0x8000000000000000;
          if ((v22.i8[4] & 1) != 0)
LABEL_19:
            v18->i64[1] = 0x8000000000000000;
LABEL_10:
          v18 += 2;
          v20 -= 4;
          if (!v20)
          {
            if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_28;
            goto LABEL_31;
          }
        }
      }
    }
    else
    {
      if (HIDWORD(v33) <= 3)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, 4uLL, 8);
      v11 = v33;
      v12 = (int64x2_t *)v32;
      memset_pattern16((char *)v32 + 8 * v33, &unk_181233190, 32 - 8 * v10);
      v13 = v11 - v10;
      v10 = (v11 - v10 + 4);
      LODWORD(v33) = v13 + 4;
      if (v13 == -4)
      {
        v10 = 0;
        goto LABEL_31;
      }
      v14 = &v12->i8[8 * v10];
      v15 = 8 * v10 - 8;
      if (v15 >= 0x18)
        goto LABEL_9;
    }
    v17 = (uint64_t *)v12;
    do
    {
LABEL_28:
      if (*v17 == -1)
        *v17 = 0x8000000000000000;
      ++v17;
    }
    while (v17 != (uint64_t *)v14);
LABEL_31:
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v30);
    v26 = mlir::RankedTensorType::get((uint64_t)v12, v10, OperandRange, 0);
  }
  else
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
    v26 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  }
  v28 = v26;
  v29 = *(unsigned int *)(a5 + 8);
  if (v29 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v29) = v28;
  ++*(_DWORD *)(a5 + 8);
  if (v32 != v34)
    free(v32);
  return 1;
}

uint64_t mlir::mps::PoolAvgOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, __int128 a9, uint64_t a10)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[7];
  __int128 v26;
  _BYTE v27[64];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v15 = *a7;
    v16 = a7[1];
    v17 = a7[2];
    v18 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v18 = 0;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
  }
  *(_QWORD *)&v26 = a6;
  BYTE8(v26) = 0;
  v27[0] = 0;
  *(_OWORD *)&v27[8] = v15;
  *(_OWORD *)&v27[24] = v16;
  *(_OWORD *)&v27[40] = v17;
  *(_QWORD *)&v27[56] = v18;
  v28 = a9;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v27[0])
      v27[0] = 0;
    mlir::OperationName::OperationName((char *)&v26 + 8, "mps.pooling_average", 19, Context);
    v27[0] = 1;
  }
  *(_QWORD *)&v29 = a4;
  *((_QWORD *)&v29 + 1) = a5;
  if (a5 && (v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::PoolAvgOpAdaptor::verify(&v26, v20)))
  {
    v25[4] = *(_OWORD *)&v27[48];
    v25[5] = v28;
    v25[6] = v29;
    v25[0] = v26;
    v25[1] = *(_OWORD *)v27;
    v25[2] = *(_OWORD *)&v27[16];
    v25[3] = *(_OWORD *)&v27[32];
    return mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>((uint64_t)a2, a3, v25, a10);
  }
  else
  {
    v22 = mlir::Float32Type::get(this, a2);
    v23 = mlir::UnrankedTensorType::get(v22);
    v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
}

uint64_t mlir::mps::PoolAvgOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *Type;
  _QWORD *v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  _QWORD **v58;
  _QWORD **v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  const char *v65;
  uint64_t Value;
  uint64_t v67;
  uint64_t OperandRange;
  const char *v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)a1[9];
  if (v3)
  {
    v5 = (const char *)a1[4];
    v4 = (const char *)a1[5];
    v6 = (const char *)a1[8];
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
    v69 = v3;
    v70 = v7;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
    v9 = Type;
    if (Type)
      Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    v73 = v9;
    v74 = Type;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
    v72 = 4;
    if (v11 == 1
      && *ArgAttrsAttr == v72
      && (v65 = v3,
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
          v67 = v12,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v6)
        goto LABEL_103;
      v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
      v69 = v6;
      v70 = v13;
      v14 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
      v15 = v14;
      if (v14)
        v14 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
      v73 = v15;
      v74 = v14;
      v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
      v72 = 4;
      if (v17 != 1)
        goto LABEL_54;
      if (*v16 == v72
        && (v65 = v6,
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
            v67 = v18,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_103:
        if (!v5)
          goto LABEL_104;
        v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
        v69 = v5;
        v70 = v19;
        v20 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
        v21 = v20;
        if (v20)
          v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
        v73 = v21;
        v74 = v20;
        v22 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
        v72 = 4;
        if (v23 != 1)
          goto LABEL_68;
        if (*v22 == v72
          && (v65 = v5,
              Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
              v67 = v24,
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_104:
          if (!v4)
            return 1;
          v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
          v69 = v4;
          v70 = v25;
          v26 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
          v27 = v26;
          if (v26)
            v26 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
          v73 = v27;
          v74 = v26;
          v28 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
          v72 = 8;
          if (v29 == 1 && *v28 == v72)
          {
            v65 = v4;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
            v67 = v30;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
              return 1;
          }
          v69 = "'mps.pooling_average' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attrib"
                "ute of shape {8}";
          v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          if (v81)
          {
            v58 = (_QWORD **)__p;
            if (__p)
            {
              v59 = v80;
              v60 = __p;
              if (v80 != __p)
              {
                do
                  v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
                while (v59 != v58);
                v60 = __p;
              }
              v80 = v58;
              operator delete(v60);
            }
            v35 = v77;
            if (!v77)
              goto LABEL_98;
            v61 = v78;
            v37 = v77;
            if (v78 == v77)
            {
LABEL_97:
              v78 = v35;
              operator delete(v37);
LABEL_98:
              if (v75 != &v76)
                free(v75);
              return v31;
            }
            do
            {
              v63 = (void *)*--v61;
              v62 = v63;
              *v61 = 0;
              if (v63)
                operator delete[](v62);
            }
            while (v61 != v35);
LABEL_96:
            v37 = v77;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_68:
          v69 = "'mps.pooling_average' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          if (v81)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v80;
              v54 = __p;
              if (v80 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v80 = v52;
              operator delete(v54);
            }
            v35 = v77;
            if (!v77)
              goto LABEL_98;
            v55 = v78;
            v37 = v77;
            if (v78 == v77)
              goto LABEL_97;
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v35);
            goto LABEL_96;
          }
        }
      }
      else
      {
LABEL_54:
        v69 = "'mps.pooling_average' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        v71 = 259;
        mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
        v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
        if (v73)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
        if (v81)
        {
          v46 = (_QWORD **)__p;
          if (__p)
          {
            v47 = v80;
            v48 = __p;
            if (v80 != __p)
            {
              do
                v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              v48 = __p;
            }
            v80 = v46;
            operator delete(v48);
          }
          v35 = v77;
          if (!v77)
            goto LABEL_98;
          v49 = v78;
          v37 = v77;
          if (v78 == v77)
            goto LABEL_97;
          do
          {
            v51 = (void *)*--v49;
            v50 = v51;
            *v49 = 0;
            if (v51)
              operator delete[](v50);
          }
          while (v49 != v35);
          goto LABEL_96;
        }
      }
    }
    else
    {
      v69 = "'mps.pooling_average' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      v71 = 259;
      mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
      v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      if (v81)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v80;
          v34 = __p;
          if (v80 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v80 = v32;
          operator delete(v34);
        }
        v35 = v77;
        if (!v77)
          goto LABEL_98;
        v36 = v78;
        v37 = v77;
        if (v78 == v77)
          goto LABEL_97;
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        goto LABEL_96;
      }
    }
  }
  else
  {
    v69 = "'mps.pooling_average' op requires attribute 'window_sizes'";
    v71 = 259;
    mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    if (v81)
    {
      v40 = (_QWORD **)__p;
      if (__p)
      {
        v41 = v80;
        v42 = __p;
        if (v80 != __p)
        {
          do
            v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          v42 = __p;
        }
        v80 = v40;
        operator delete(v42);
      }
      v35 = v77;
      if (!v77)
        goto LABEL_98;
      v43 = v78;
      v37 = v77;
      if (v78 == v77)
        goto LABEL_97;
      do
      {
        v45 = (void *)*--v43;
        v44 = v45;
        *v43 = 0;
        if (v45)
          operator delete[](v44);
      }
      while (v43 != v35);
      goto LABEL_96;
    }
  }
  return v31;
}

uint64_t mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  _OWORD v18[7];
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = a3[6];
  v16 = 0;
  v8 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v9 = a3[1];
  v18[0] = *a3;
  v18[1] = v9;
  v10 = a3[6];
  v11 = a3[4];
  v18[5] = a3[5];
  v18[6] = v10;
  v12 = a3[3];
  v18[2] = a3[2];
  v18[3] = v12;
  v18[4] = v11;
  v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::Attribute::getContext((mlir::Attribute *)&v17);
  if (!mlir::mps::inferPool4DReturnType<mlir::mps::PoolAvgOpAdaptor>(a1, a2, v8, v18, &v16))
    return 0;
  v13 = v16;
  v14 = *(unsigned int *)(a4 + 8);
  if (v14 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v14) = v13;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolAvgOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t NumElements;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD **v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  char *v111;
  __int128 v112;
  _QWORD **v113;
  _QWORD **v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  void *v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  int64_t v124;
  int64_t v125;
  uint64_t *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  __int128 v145;
  _QWORD **v146;
  _QWORD **v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  uint64_t *v159;
  char *v160;
  char *v161;
  __int128 v162;
  _QWORD **v163;
  _QWORD **v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  BOOL v173;
  int64_t v174;
  int64_t v175;
  int64_t v176;
  const void **v179[4];
  __int16 v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  _QWORD v197[3];
  void *v198;
  unsigned int v199;
  unsigned int v200;
  _BYTE v201[96];
  void *v202;
  _QWORD *v203;
  void *__p;
  _QWORD **v205;
  char v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v193 = (uint64_t *)a1;
  v4 = *(unsigned int *)(a1 + 44);
  v5 = a1 + 64;
  v6 = (v4 >> 23) & 1;
  v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 40);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v7 + 40)))
      v9 = v8;
    else
      v9 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v9 = 0;
  }
  v192 = v9;
  v10 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v10 + 8)))
      v12 = v11;
    else
      v12 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v12 = 0;
  }
  v191 = v12;
  v13 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 48);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v13 + 48)))
      v15 = v14;
    else
      v15 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v15 = 0;
  }
  v189 = 0;
  v190 = v15;
  v16 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v16 + 16)))
      v18 = v17;
    else
      v18 = 0;
    v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    v17 = v190;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v21 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41)
            goto LABEL_77;
LABEL_75:
          if (v181)
            operator delete[](v181);
          goto LABEL_77;
        }
      }
      else
      {
        v21 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0)
          goto LABEL_47;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v22 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_56;
      }
      else
      {
        v22 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_56;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v22;
      v23 = (char *)v198;
      if (v199 >= v200)
      {
        v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v43 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v23 = (char *)v198;
          v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v24 = &v194;
          v23 = (char *)v198;
        }
      }
      else
      {
        v24 = &v194;
      }
      v25 = &v23[24 * v199];
      v26 = *(_OWORD *)v24;
      *((_QWORD *)v25 + 2) = v24[2];
      *(_OWORD *)v25 = v26;
      v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v28 = (char *)v198;
        if (v27 >= v200)
        {
          v41 = v27 + 1;
          v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            v44 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v28 = (char *)v198;
            v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v29 = &v194;
            v28 = (char *)v198;
          }
        }
        else
        {
          v29 = &v194;
        }
        v30 = &v28[24 * v199];
        v31 = *(_OWORD *)v29;
        *((_QWORD *)v30 + 2) = v29[2];
        *(_OWORD *)v30 = v31;
        ++v199;
      }
LABEL_56:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v205;
          v34 = __p;
          if (v205 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v205 = v32;
          operator delete(v34);
        }
        v35 = v202;
        if (v202)
        {
          v36 = v203;
          v37 = v202;
          if (v203 != v202)
          {
            do
            {
              v39 = (void *)*--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                operator delete[](v38);
            }
            while (v36 != v35);
            v37 = v202;
          }
          v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_75;
LABEL_77:
      if (v21 < 1)
        return v17;
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    v45 = v192;
    v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v48 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41)
            goto LABEL_132;
LABEL_130:
          if (v181)
            operator delete[](v181);
          goto LABEL_132;
        }
      }
      else
      {
        v48 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0)
          goto LABEL_102;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v49 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_111;
      }
      else
      {
        v49 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_111;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v49;
      v50 = (char *)v198;
      if (v199 >= v200)
      {
        v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v70 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v50 = (char *)v198;
          v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v51 = &v194;
          v50 = (char *)v198;
        }
      }
      else
      {
        v51 = &v194;
      }
      v52 = &v50[24 * v199];
      v53 = *(_OWORD *)v51;
      *((_QWORD *)v52 + 2) = v51[2];
      *(_OWORD *)v52 = v53;
      v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v55 = (char *)v198;
        if (v54 >= v200)
        {
          v68 = v54 + 1;
          v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            v71 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v55 = (char *)v198;
            v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v56 = &v194;
            v55 = (char *)v198;
          }
        }
        else
        {
          v56 = &v194;
        }
        v57 = &v55[24 * v199];
        v58 = *(_OWORD *)v56;
        *((_QWORD *)v57 + 2) = v56[2];
        *(_OWORD *)v57 = v58;
        ++v199;
      }
LABEL_111:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v59 = (_QWORD **)__p;
        if (__p)
        {
          v60 = v205;
          v61 = __p;
          if (v205 != __p)
          {
            do
              v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            v61 = __p;
          }
          v205 = v59;
          operator delete(v61);
        }
        v62 = v202;
        if (v202)
        {
          v63 = v203;
          v64 = v202;
          if (v203 != v202)
          {
            do
            {
              v66 = (void *)*--v63;
              v65 = v66;
              *v63 = 0;
              if (v66)
                operator delete[](v65);
            }
            while (v63 != v62);
            v64 = v202;
          }
          v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_130;
LABEL_132:
      if (v48 < 1)
        return v17;
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    v72 = v191;
    v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v75 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41)
            goto LABEL_187;
LABEL_185:
          if (v181)
            operator delete[](v181);
          goto LABEL_187;
        }
      }
      else
      {
        v75 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0)
          goto LABEL_157;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v76 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_166;
      }
      else
      {
        v76 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_166;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v76;
      v77 = (char *)v198;
      if (v199 >= v200)
      {
        v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v97 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v77 = (char *)v198;
          v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v78 = &v194;
          v77 = (char *)v198;
        }
      }
      else
      {
        v78 = &v194;
      }
      v79 = &v77[24 * v199];
      v80 = *(_OWORD *)v78;
      *((_QWORD *)v79 + 2) = v78[2];
      *(_OWORD *)v79 = v80;
      v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v82 = (char *)v198;
        if (v81 >= v200)
        {
          v95 = v81 + 1;
          v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            v98 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v82 = (char *)v198;
            v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v83 = &v194;
            v82 = (char *)v198;
          }
        }
        else
        {
          v83 = &v194;
        }
        v84 = &v82[24 * v199];
        v85 = *(_OWORD *)v83;
        *((_QWORD *)v84 + 2) = v83[2];
        *(_OWORD *)v84 = v85;
        ++v199;
      }
LABEL_166:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v86 = (_QWORD **)__p;
        if (__p)
        {
          v87 = v205;
          v88 = __p;
          if (v205 != __p)
          {
            do
              v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            v88 = __p;
          }
          v205 = v86;
          operator delete(v88);
        }
        v89 = v202;
        if (v202)
        {
          v90 = v203;
          v91 = v202;
          if (v203 != v202)
          {
            do
            {
              v93 = (void *)*--v90;
              v92 = v93;
              *v90 = 0;
              if (v93)
                operator delete[](v92);
            }
            while (v90 != v89);
            v91 = v202;
          }
          v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_185;
LABEL_187:
      if (v75 < 1)
        return v17;
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    v99 = v189;
    v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v102 = *(_QWORD *)v181;
        if ((*(_QWORD *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41)
            goto LABEL_242;
LABEL_240:
          if (v181)
            operator delete[](v181);
          goto LABEL_242;
        }
      }
      else
      {
        v102 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0)
          goto LABEL_212;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v103 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_221;
      }
      else
      {
        v103 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_221;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v103;
      v104 = (char *)v198;
      if (v199 >= v200)
      {
        v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v124 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v104 = (char *)v198;
          v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v105 = &v194;
          v104 = (char *)v198;
        }
      }
      else
      {
        v105 = &v194;
      }
      v106 = &v104[24 * v199];
      v107 = *(_OWORD *)v105;
      *((_QWORD *)v106 + 2) = v105[2];
      *(_OWORD *)v106 = v107;
      v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be non-negative.";
        v196 = 36;
        v109 = (char *)v198;
        if (v108 >= v200)
        {
          v122 = v108 + 1;
          v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            v125 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v109 = (char *)v198;
            v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v110 = &v194;
            v109 = (char *)v198;
          }
        }
        else
        {
          v110 = &v194;
        }
        v111 = &v109[24 * v199];
        v112 = *(_OWORD *)v110;
        *((_QWORD *)v111 + 2) = v110[2];
        *(_OWORD *)v111 = v112;
        ++v199;
      }
LABEL_221:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v113 = (_QWORD **)__p;
        if (__p)
        {
          v114 = v205;
          v115 = __p;
          if (v205 != __p)
          {
            do
              v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            v115 = __p;
          }
          v205 = v113;
          operator delete(v115);
        }
        v116 = v202;
        if (v202)
        {
          v117 = v203;
          v118 = v202;
          if (v203 != v202)
          {
            do
            {
              v120 = (void *)*--v117;
              v119 = v120;
              *v117 = 0;
              if (v120)
                operator delete[](v119);
            }
            while (v117 != v116);
            v118 = v202;
          }
          v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_240;
LABEL_242:
      if (v102 < 0)
        return v17;
      ++v188;
    }
  }
  v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)v193 + 11)))
    v126 = 0;
  v127 = *(_DWORD *)(v126[4] + 8);
  if (v127 == 3)
  {
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "not supported by this op.";
      v188 = 25;
      v142 = (uint64_t *)&v186;
      v143 = (char *)v198;
      if (v199 >= v200)
      {
        v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v174 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v143 = (char *)v198;
          v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v142 = (uint64_t *)&v186;
          v143 = (char *)v198;
        }
      }
      v144 = &v143[24 * v199];
      v145 = *(_OWORD *)v142;
      *((_QWORD *)v144 + 2) = v142[2];
      *(_OWORD *)v144 = v145;
      ++v199;
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v146 = (_QWORD **)__p;
      if (__p)
      {
        v147 = v205;
        v148 = __p;
        if (v205 != __p)
        {
          do
            v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          v148 = __p;
        }
        v205 = v146;
        operator delete(v148);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_312;
      v150 = v203;
      v151 = v202;
      if (v203 == v202)
        goto LABEL_311;
      do
      {
        v153 = (void *)*--v150;
        v152 = v153;
        *v150 = 0;
        if (v153)
          operator delete[](v152);
      }
      while (v150 != v149);
      goto LABEL_310;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (a2)
      {
        v128 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8))
        {
          v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8);
          v130 = a3;
          v186 = v128;
          v187 = (const char *)v129;
          if (a3)
            goto LABEL_260;
LABEL_285:
          v131 = 0;
          v183 = 0;
          v184 = 0;
          if (v128)
            goto LABEL_262;
          return 1;
        }
        v128 = 0;
        v130 = a3;
        v186 = 0;
        v187 = 0;
        if (!a3)
          goto LABEL_285;
      }
      else
      {
        v128 = 0;
        v186 = 0;
        v187 = 0;
        v130 = a3;
        if (!a3)
          goto LABEL_285;
      }
LABEL_260:
      v131 = *(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8))
      {
        v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8);
        v183 = v131;
        v184 = v132;
        if (v128)
        {
LABEL_262:
          v17 = 1;
          if (*(_UNKNOWN **)(*(_QWORD *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(_QWORD *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  v194 = v136;
                  v137 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  v181 = v139;
                  v140 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v138, (uint64_t *)&v181);
                  v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        v131 = 0;
        v183 = 0;
        v184 = 0;
        if (v128)
          goto LABEL_262;
      }
      return 1;
    }
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "invalid type. Must be specified when ";
      v188 = 37;
      v154 = (uint64_t *)&v186;
      v155 = (char *)v198;
      if (v199 >= v200)
      {
        v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v175 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v155 = (char *)v198;
          v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v154 = (uint64_t *)&v186;
          v155 = (char *)v198;
        }
      }
      v156 = &v155[24 * v199];
      v157 = *(_OWORD *)v154;
      *((_QWORD *)v156 + 2) = v154[2];
      *(_OWORD *)v156 = v157;
      v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        v188 = 31;
        v159 = (uint64_t *)&v186;
        v160 = (char *)v198;
        if (v158 >= v200)
        {
          v172 = v158 + 1;
          v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            v176 = (char *)&v186 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v160 = (char *)v198;
            v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v159 = (uint64_t *)&v186;
            v160 = (char *)v198;
          }
        }
        v161 = &v160[24 * v199];
        v162 = *(_OWORD *)v159;
        *((_QWORD *)v161 + 2) = v159[2];
        *(_OWORD *)v161 = v162;
        ++v199;
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v163 = (_QWORD **)__p;
      if (__p)
      {
        v164 = v205;
        v165 = __p;
        if (v205 != __p)
        {
          do
            v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          v165 = __p;
        }
        v205 = v163;
        operator delete(v165);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_312;
      v166 = v203;
      v151 = v202;
      if (v203 == v202)
      {
LABEL_311:
        v203 = v149;
        operator delete(v151);
LABEL_312:
        if (v198 != v201)
          free(v198);
        return v17;
      }
      do
      {
        v168 = (void *)*--v166;
        v167 = v168;
        *v166 = 0;
        if (v168)
          operator delete[](v167);
      }
      while (v166 != v149);
LABEL_310:
      v151 = v202;
      goto LABEL_311;
    }
  }
  return v17;
}

uint64_t mlir::mps::PoolL2NormOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, __int128 a9, uint64_t a10)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[7];
  __int128 v26;
  _BYTE v27[64];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v15 = *a7;
    v16 = a7[1];
    v17 = a7[2];
    v18 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v18 = 0;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
  }
  *(_QWORD *)&v26 = a6;
  BYTE8(v26) = 0;
  v27[0] = 0;
  *(_OWORD *)&v27[8] = v15;
  *(_OWORD *)&v27[24] = v16;
  *(_OWORD *)&v27[40] = v17;
  *(_QWORD *)&v27[56] = v18;
  v28 = a9;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v27[0])
      v27[0] = 0;
    mlir::OperationName::OperationName((char *)&v26 + 8, "mps.pooling_l2_norm", 19, Context);
    v27[0] = 1;
  }
  *(_QWORD *)&v29 = a4;
  *((_QWORD *)&v29 + 1) = a5;
  if (a5 && (v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::PoolL2NormOpAdaptor::verify(&v26, v20)))
  {
    v25[4] = *(_OWORD *)&v27[48];
    v25[5] = v28;
    v25[6] = v29;
    v25[0] = v26;
    v25[1] = *(_OWORD *)v27;
    v25[2] = *(_OWORD *)&v27[16];
    v25[3] = *(_OWORD *)&v27[32];
    return mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>((uint64_t)a2, a3, v25, a10);
  }
  else
  {
    v22 = mlir::Float32Type::get(this, a2);
    v23 = mlir::UnrankedTensorType::get(v22);
    v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
}

uint64_t mlir::mps::PoolL2NormOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *Type;
  _QWORD *v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  _QWORD **v58;
  _QWORD **v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  const char *v65;
  uint64_t Value;
  uint64_t v67;
  uint64_t OperandRange;
  const char *v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)a1[9];
  if (v3)
  {
    v5 = (const char *)a1[4];
    v4 = (const char *)a1[5];
    v6 = (const char *)a1[8];
    v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
    v69 = v3;
    v70 = v7;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
    v9 = Type;
    if (Type)
      Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    v73 = v9;
    v74 = Type;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
    v72 = 4;
    if (v11 == 1
      && *ArgAttrsAttr == v72
      && (v65 = v3,
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
          v67 = v12,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v6)
        goto LABEL_103;
      v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
      v69 = v6;
      v70 = v13;
      v14 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
      v15 = v14;
      if (v14)
        v14 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
      v73 = v15;
      v74 = v14;
      v16 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
      v72 = 4;
      if (v17 != 1)
        goto LABEL_54;
      if (*v16 == v72
        && (v65 = v6,
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
            v67 = v18,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_103:
        if (!v5)
          goto LABEL_104;
        v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
        v69 = v5;
        v70 = v19;
        v20 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
        v21 = v20;
        if (v20)
          v20 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
        v73 = v21;
        v74 = v20;
        v22 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
        v72 = 4;
        if (v23 != 1)
          goto LABEL_68;
        if (*v22 == v72
          && (v65 = v5,
              Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
              v67 = v24,
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_104:
          if (!v4)
            return 1;
          v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
          v69 = v4;
          v70 = v25;
          v26 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
          v27 = v26;
          if (v26)
            v26 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
          v73 = v27;
          v74 = v26;
          v28 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
          v72 = 8;
          if (v29 == 1 && *v28 == v72)
          {
            v65 = v4;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
            v67 = v30;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
              return 1;
          }
          v69 = "'mps.pooling_l2_norm' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attrib"
                "ute of shape {8}";
          v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          if (v81)
          {
            v58 = (_QWORD **)__p;
            if (__p)
            {
              v59 = v80;
              v60 = __p;
              if (v80 != __p)
              {
                do
                  v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
                while (v59 != v58);
                v60 = __p;
              }
              v80 = v58;
              operator delete(v60);
            }
            v35 = v77;
            if (!v77)
              goto LABEL_98;
            v61 = v78;
            v37 = v77;
            if (v78 == v77)
            {
LABEL_97:
              v78 = v35;
              operator delete(v37);
LABEL_98:
              if (v75 != &v76)
                free(v75);
              return v31;
            }
            do
            {
              v63 = (void *)*--v61;
              v62 = v63;
              *v61 = 0;
              if (v63)
                operator delete[](v62);
            }
            while (v61 != v35);
LABEL_96:
            v37 = v77;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_68:
          v69 = "'mps.pooling_l2_norm' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          if (v81)
          {
            v52 = (_QWORD **)__p;
            if (__p)
            {
              v53 = v80;
              v54 = __p;
              if (v80 != __p)
              {
                do
                  v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                v54 = __p;
              }
              v80 = v52;
              operator delete(v54);
            }
            v35 = v77;
            if (!v77)
              goto LABEL_98;
            v55 = v78;
            v37 = v77;
            if (v78 == v77)
              goto LABEL_97;
            do
            {
              v57 = (void *)*--v55;
              v56 = v57;
              *v55 = 0;
              if (v57)
                operator delete[](v56);
            }
            while (v55 != v35);
            goto LABEL_96;
          }
        }
      }
      else
      {
LABEL_54:
        v69 = "'mps.pooling_l2_norm' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        v71 = 259;
        mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
        v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
        if (v73)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
        if (v81)
        {
          v46 = (_QWORD **)__p;
          if (__p)
          {
            v47 = v80;
            v48 = __p;
            if (v80 != __p)
            {
              do
                v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              v48 = __p;
            }
            v80 = v46;
            operator delete(v48);
          }
          v35 = v77;
          if (!v77)
            goto LABEL_98;
          v49 = v78;
          v37 = v77;
          if (v78 == v77)
            goto LABEL_97;
          do
          {
            v51 = (void *)*--v49;
            v50 = v51;
            *v49 = 0;
            if (v51)
              operator delete[](v50);
          }
          while (v49 != v35);
          goto LABEL_96;
        }
      }
    }
    else
    {
      v69 = "'mps.pooling_l2_norm' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      v71 = 259;
      mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
      v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      if (v81)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v80;
          v34 = __p;
          if (v80 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v80 = v32;
          operator delete(v34);
        }
        v35 = v77;
        if (!v77)
          goto LABEL_98;
        v36 = v78;
        v37 = v77;
        if (v78 == v77)
          goto LABEL_97;
        do
        {
          v39 = (void *)*--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            operator delete[](v38);
        }
        while (v36 != v35);
        goto LABEL_96;
      }
    }
  }
  else
  {
    v69 = "'mps.pooling_l2_norm' op requires attribute 'window_sizes'";
    v71 = 259;
    mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    if (v81)
    {
      v40 = (_QWORD **)__p;
      if (__p)
      {
        v41 = v80;
        v42 = __p;
        if (v80 != __p)
        {
          do
            v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          v42 = __p;
        }
        v80 = v40;
        operator delete(v42);
      }
      v35 = v77;
      if (!v77)
        goto LABEL_98;
      v43 = v78;
      v37 = v77;
      if (v78 == v77)
        goto LABEL_97;
      do
      {
        v45 = (void *)*--v43;
        v44 = v45;
        *v43 = 0;
        if (v45)
          operator delete[](v44);
      }
      while (v43 != v35);
      goto LABEL_96;
    }
  }
  return v31;
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolMaxGradientOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t NumElements;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD **v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  char *v111;
  __int128 v112;
  _QWORD **v113;
  _QWORD **v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  void *v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  int64_t v124;
  int64_t v125;
  uint64_t *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  __int128 v145;
  _QWORD **v146;
  _QWORD **v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  uint64_t *v159;
  char *v160;
  char *v161;
  __int128 v162;
  _QWORD **v163;
  _QWORD **v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  BOOL v173;
  int64_t v174;
  int64_t v175;
  int64_t v176;
  const void **v179[4];
  __int16 v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  _QWORD v197[3];
  void *v198;
  unsigned int v199;
  unsigned int v200;
  _BYTE v201[96];
  void *v202;
  _QWORD *v203;
  void *__p;
  _QWORD **v205;
  char v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v193 = (uint64_t *)a1;
  v4 = *(unsigned int *)(a1 + 44);
  v5 = a1 + 64;
  v6 = (v4 >> 23) & 1;
  v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v7 + 56)))
      v9 = v8;
    else
      v9 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v9 = 0;
  }
  v192 = v9;
  v10 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v10 + 8)))
      v12 = v11;
    else
      v12 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v12 = 0;
  }
  v191 = v12;
  v13 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 64);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v13 + 64)))
      v15 = v14;
    else
      v15 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v15 = 0;
  }
  v189 = 0;
  v190 = v15;
  v16 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v16 + 16)))
      v18 = v17;
    else
      v18 = 0;
    v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    v17 = v190;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v21 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41)
            goto LABEL_77;
LABEL_75:
          if (v181)
            operator delete[](v181);
          goto LABEL_77;
        }
      }
      else
      {
        v21 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0)
          goto LABEL_47;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v22 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_56;
      }
      else
      {
        v22 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_56;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v22;
      v23 = (char *)v198;
      if (v199 >= v200)
      {
        v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v43 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v23 = (char *)v198;
          v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v24 = &v194;
          v23 = (char *)v198;
        }
      }
      else
      {
        v24 = &v194;
      }
      v25 = &v23[24 * v199];
      v26 = *(_OWORD *)v24;
      *((_QWORD *)v25 + 2) = v24[2];
      *(_OWORD *)v25 = v26;
      v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v28 = (char *)v198;
        if (v27 >= v200)
        {
          v41 = v27 + 1;
          v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            v44 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v28 = (char *)v198;
            v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v29 = &v194;
            v28 = (char *)v198;
          }
        }
        else
        {
          v29 = &v194;
        }
        v30 = &v28[24 * v199];
        v31 = *(_OWORD *)v29;
        *((_QWORD *)v30 + 2) = v29[2];
        *(_OWORD *)v30 = v31;
        ++v199;
      }
LABEL_56:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v205;
          v34 = __p;
          if (v205 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v205 = v32;
          operator delete(v34);
        }
        v35 = v202;
        if (v202)
        {
          v36 = v203;
          v37 = v202;
          if (v203 != v202)
          {
            do
            {
              v39 = (void *)*--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                operator delete[](v38);
            }
            while (v36 != v35);
            v37 = v202;
          }
          v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_75;
LABEL_77:
      if (v21 < 1)
        return v17;
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    v45 = v192;
    v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v48 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41)
            goto LABEL_132;
LABEL_130:
          if (v181)
            operator delete[](v181);
          goto LABEL_132;
        }
      }
      else
      {
        v48 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0)
          goto LABEL_102;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v49 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_111;
      }
      else
      {
        v49 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_111;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v49;
      v50 = (char *)v198;
      if (v199 >= v200)
      {
        v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v70 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v50 = (char *)v198;
          v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v51 = &v194;
          v50 = (char *)v198;
        }
      }
      else
      {
        v51 = &v194;
      }
      v52 = &v50[24 * v199];
      v53 = *(_OWORD *)v51;
      *((_QWORD *)v52 + 2) = v51[2];
      *(_OWORD *)v52 = v53;
      v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v55 = (char *)v198;
        if (v54 >= v200)
        {
          v68 = v54 + 1;
          v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            v71 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v55 = (char *)v198;
            v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v56 = &v194;
            v55 = (char *)v198;
          }
        }
        else
        {
          v56 = &v194;
        }
        v57 = &v55[24 * v199];
        v58 = *(_OWORD *)v56;
        *((_QWORD *)v57 + 2) = v56[2];
        *(_OWORD *)v57 = v58;
        ++v199;
      }
LABEL_111:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v59 = (_QWORD **)__p;
        if (__p)
        {
          v60 = v205;
          v61 = __p;
          if (v205 != __p)
          {
            do
              v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            v61 = __p;
          }
          v205 = v59;
          operator delete(v61);
        }
        v62 = v202;
        if (v202)
        {
          v63 = v203;
          v64 = v202;
          if (v203 != v202)
          {
            do
            {
              v66 = (void *)*--v63;
              v65 = v66;
              *v63 = 0;
              if (v66)
                operator delete[](v65);
            }
            while (v63 != v62);
            v64 = v202;
          }
          v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_130;
LABEL_132:
      if (v48 < 1)
        return v17;
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    v72 = v191;
    v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v75 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41)
            goto LABEL_187;
LABEL_185:
          if (v181)
            operator delete[](v181);
          goto LABEL_187;
        }
      }
      else
      {
        v75 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0)
          goto LABEL_157;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v76 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_166;
      }
      else
      {
        v76 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_166;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v76;
      v77 = (char *)v198;
      if (v199 >= v200)
      {
        v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v97 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v77 = (char *)v198;
          v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v78 = &v194;
          v77 = (char *)v198;
        }
      }
      else
      {
        v78 = &v194;
      }
      v79 = &v77[24 * v199];
      v80 = *(_OWORD *)v78;
      *((_QWORD *)v79 + 2) = v78[2];
      *(_OWORD *)v79 = v80;
      v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v82 = (char *)v198;
        if (v81 >= v200)
        {
          v95 = v81 + 1;
          v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            v98 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v82 = (char *)v198;
            v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v83 = &v194;
            v82 = (char *)v198;
          }
        }
        else
        {
          v83 = &v194;
        }
        v84 = &v82[24 * v199];
        v85 = *(_OWORD *)v83;
        *((_QWORD *)v84 + 2) = v83[2];
        *(_OWORD *)v84 = v85;
        ++v199;
      }
LABEL_166:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v86 = (_QWORD **)__p;
        if (__p)
        {
          v87 = v205;
          v88 = __p;
          if (v205 != __p)
          {
            do
              v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            v88 = __p;
          }
          v205 = v86;
          operator delete(v88);
        }
        v89 = v202;
        if (v202)
        {
          v90 = v203;
          v91 = v202;
          if (v203 != v202)
          {
            do
            {
              v93 = (void *)*--v90;
              v92 = v93;
              *v90 = 0;
              if (v93)
                operator delete[](v92);
            }
            while (v90 != v89);
            v91 = v202;
          }
          v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_185;
LABEL_187:
      if (v75 < 1)
        return v17;
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    v99 = v189;
    v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v102 = *(_QWORD *)v181;
        if ((*(_QWORD *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41)
            goto LABEL_242;
LABEL_240:
          if (v181)
            operator delete[](v181);
          goto LABEL_242;
        }
      }
      else
      {
        v102 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0)
          goto LABEL_212;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v103 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_221;
      }
      else
      {
        v103 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_221;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v103;
      v104 = (char *)v198;
      if (v199 >= v200)
      {
        v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v124 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v104 = (char *)v198;
          v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v105 = &v194;
          v104 = (char *)v198;
        }
      }
      else
      {
        v105 = &v194;
      }
      v106 = &v104[24 * v199];
      v107 = *(_OWORD *)v105;
      *((_QWORD *)v106 + 2) = v105[2];
      *(_OWORD *)v106 = v107;
      v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be non-negative.";
        v196 = 36;
        v109 = (char *)v198;
        if (v108 >= v200)
        {
          v122 = v108 + 1;
          v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            v125 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v109 = (char *)v198;
            v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v110 = &v194;
            v109 = (char *)v198;
          }
        }
        else
        {
          v110 = &v194;
        }
        v111 = &v109[24 * v199];
        v112 = *(_OWORD *)v110;
        *((_QWORD *)v111 + 2) = v110[2];
        *(_OWORD *)v111 = v112;
        ++v199;
      }
LABEL_221:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v113 = (_QWORD **)__p;
        if (__p)
        {
          v114 = v205;
          v115 = __p;
          if (v205 != __p)
          {
            do
              v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            v115 = __p;
          }
          v205 = v113;
          operator delete(v115);
        }
        v116 = v202;
        if (v202)
        {
          v117 = v203;
          v118 = v202;
          if (v203 != v202)
          {
            do
            {
              v120 = (void *)*--v117;
              v119 = v120;
              *v117 = 0;
              if (v120)
                operator delete[](v119);
            }
            while (v117 != v116);
            v118 = v202;
          }
          v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_240;
LABEL_242:
      if (v102 < 0)
        return v17;
      ++v188;
    }
  }
  if (HIBYTE(*((_DWORD *)v193 + 11)))
    v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  else
    v126 = 0;
  v127 = *(_DWORD *)(v126[6] + 8);
  if (v127 == 3)
  {
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "not supported by this op.";
      v188 = 25;
      v142 = (uint64_t *)&v186;
      v143 = (char *)v198;
      if (v199 >= v200)
      {
        v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v174 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v143 = (char *)v198;
          v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v142 = (uint64_t *)&v186;
          v143 = (char *)v198;
        }
      }
      v144 = &v143[24 * v199];
      v145 = *(_OWORD *)v142;
      *((_QWORD *)v144 + 2) = v142[2];
      *(_OWORD *)v144 = v145;
      ++v199;
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v146 = (_QWORD **)__p;
      if (__p)
      {
        v147 = v205;
        v148 = __p;
        if (v205 != __p)
        {
          do
            v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          v148 = __p;
        }
        v205 = v146;
        operator delete(v148);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_311;
      v150 = v203;
      v151 = v202;
      if (v203 == v202)
        goto LABEL_310;
      do
      {
        v153 = (void *)*--v150;
        v152 = v153;
        *v150 = 0;
        if (v153)
          operator delete[](v152);
      }
      while (v150 != v149);
      goto LABEL_309;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (!mlir::mps::checkInputTensors<mlir::mps::PoolMaxGradientOp>((uint64_t)v193))
        return 0;
      if (a2)
      {
        v128 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8))
        {
          v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8);
          v130 = a3;
          v186 = v128;
          v187 = (const char *)v129;
          if (a3)
            goto LABEL_262;
LABEL_288:
          v131 = 0;
          v183 = 0;
          v184 = 0;
          if (v128)
            goto LABEL_264;
          return 1;
        }
        v128 = 0;
        v130 = a3;
        v186 = 0;
        v187 = 0;
        if (!a3)
          goto LABEL_288;
      }
      else
      {
        v128 = 0;
        v186 = 0;
        v187 = 0;
        v130 = a3;
        if (!a3)
          goto LABEL_288;
      }
LABEL_262:
      v131 = *(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8))
      {
        v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8);
        v183 = v131;
        v184 = v132;
        if (v128)
        {
LABEL_264:
          v17 = 1;
          if (*(_UNKNOWN **)(*(_QWORD *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(_QWORD *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  v194 = v136;
                  v137 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  v181 = v139;
                  v140 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v138, (uint64_t *)&v181);
                  v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        v131 = 0;
        v183 = 0;
        v184 = 0;
        if (v128)
          goto LABEL_264;
      }
      return 1;
    }
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "invalid type. Must be specified when ";
      v188 = 37;
      v154 = (uint64_t *)&v186;
      v155 = (char *)v198;
      if (v199 >= v200)
      {
        v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v175 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v155 = (char *)v198;
          v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v154 = (uint64_t *)&v186;
          v155 = (char *)v198;
        }
      }
      v156 = &v155[24 * v199];
      v157 = *(_OWORD *)v154;
      *((_QWORD *)v156 + 2) = v154[2];
      *(_OWORD *)v156 = v157;
      v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        v188 = 31;
        v159 = (uint64_t *)&v186;
        v160 = (char *)v198;
        if (v158 >= v200)
        {
          v172 = v158 + 1;
          v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            v176 = (char *)&v186 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v160 = (char *)v198;
            v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v159 = (uint64_t *)&v186;
            v160 = (char *)v198;
          }
        }
        v161 = &v160[24 * v199];
        v162 = *(_OWORD *)v159;
        *((_QWORD *)v161 + 2) = v159[2];
        *(_OWORD *)v161 = v162;
        ++v199;
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v163 = (_QWORD **)__p;
      if (__p)
      {
        v164 = v205;
        v165 = __p;
        if (v205 != __p)
        {
          do
            v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          v165 = __p;
        }
        v205 = v163;
        operator delete(v165);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_311;
      v166 = v203;
      v151 = v202;
      if (v203 == v202)
      {
LABEL_310:
        v203 = v149;
        operator delete(v151);
LABEL_311:
        if (v198 != v201)
          free(v198);
        return v17;
      }
      do
      {
        v168 = (void *)*--v166;
        v167 = v168;
        *v166 = 0;
        if (v168)
          operator delete[](v167);
      }
      while (v166 != v149);
LABEL_309:
      v151 = v202;
      goto LABEL_310;
    }
  }
  return v17;
}

uint64_t mlir::mps::PoolMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, __int128 a9, uint64_t a10)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t Context;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::MLIRContext *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t ElementTypeOrSelf;
  uint64_t v30;
  uint64_t *ArgAttrsAttr;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v48;
  __int16 v49;
  uint64_t v50;
  _QWORD v51[2];
  void *v52;
  uint64_t v53;
  _BYTE v54[32];
  _OWORD v55[8];
  void *v56[2];
  _BYTE v57[32];
  void *v58[2];
  _BYTE v59[32];
  void *Value;
  uint64_t v61;
  _BYTE v62[64];
  void *v63[2];
  _BYTE v64[32];
  void *v65[2];
  _BYTE v66[32];
  __int128 v67;
  _BYTE v68[80];
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v13 = *a7;
    v14 = a7[1];
    v15 = a7[2];
    v16 = a7[3];
    v17 = *((_QWORD *)a7 + 8);
  }
  else
  {
    v17 = 0;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  *(_QWORD *)&v67 = a6;
  BYTE8(v67) = 0;
  v68[0] = 0;
  *(_OWORD *)&v68[8] = v13;
  *(_OWORD *)&v68[24] = v14;
  *(_OWORD *)&v68[40] = v15;
  *(_OWORD *)&v68[56] = v16;
  *(_QWORD *)&v68[72] = v17;
  v69 = a9;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v68[0])
      v68[0] = 0;
    mlir::OperationName::OperationName((char *)&v67 + 8, "mps.pooling_max", 15, Context);
    v68[0] = 1;
  }
  *(_QWORD *)&v70 = a4;
  *((_QWORD *)&v70 + 1) = a5;
  if (!a5 || (v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::PoolMaxOpAdaptor::verify(&v67, v19)))
  {
    v22 = mlir::Float32Type::get(this, a2);
    v23 = mlir::UnrankedTensorType::get(v22);
    v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    v25 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    if (!v25)
      v25 = mlir::Float32Type::get(this, v26);
    v27 = mlir::UnrankedTensorType::get(v25);
    v28 = *(_DWORD *)(a10 + 8);
    if (v28 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v28 + 1, 8);
      v28 = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v28) = v27;
    goto LABEL_48;
  }
  Value = (void *)v70;
  v61 = 0;
  v20 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&Value, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  if (v21)
    v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  else
    v20 = 0;
  v51[0] = v20;
  v51[1] = v21;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v20);
  v30 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
  v50 = *(_QWORD *)&v68[48];
  if (*(_QWORD *)&v68[48])
  {
    Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
    if (mlir::Type::isSignedInteger((mlir::Type *)&Value, 32) || mlir::Type::isSignedInteger((mlir::Type *)&Value, 64))
      v30 = (uint64_t)Value;
  }
  if (!v20 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51) & 1) == 0)
  {
    v42 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v43 = mlir::UnrankedTensorType::get(v30);
    v44 = *(unsigned int *)(a10 + 8);
    if (v44 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v44 + 1, 8);
      LODWORD(v44) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v44) = v42;
    v45 = *(_DWORD *)(a10 + 12);
    v46 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v46;
    if (v46 >= v45)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v46) = v43;
LABEL_48:
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
  v65[0] = v66;
  v65[1] = (void *)0x400000000;
  v63[0] = v64;
  v63[1] = (void *)0x400000000;
  Value = v62;
  v61 = 0x800000000;
  v58[0] = v59;
  v58[1] = (void *)0x400000000;
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v49 = 0;
  v48 = 2;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  v55[4] = *(_OWORD *)&v68[48];
  v55[5] = *(_OWORD *)&v68[64];
  v55[6] = v69;
  v55[7] = v70;
  v55[0] = v67;
  v55[1] = *(_OWORD *)v68;
  v55[2] = *(_OWORD *)&v68[16];
  v55[3] = *(_OWORD *)&v68[32];
  mlir::mps::getPool4dParams<mlir::mps::PoolMaxOpAdaptor>(ArgAttrsAttr, v32, v55, (uint64_t)v65, (uint64_t)v63, (uint64_t)&Value, (uint64_t)v58, (uint64_t)v56, &v48, (BOOL *)&v49 + 1, (BOOL *)&v49);
  v52 = v54;
  v53 = 0x400000000;
  if (mlir::mps::inferPool4DShape(v33, v34, v63, (uint64_t *)v65, (uint64_t *)v58, v56, &Value, v48, HIBYTE(v49), (uint64_t)&v52))
  {
    v35 = mlir::RankedTensorType::get((uint64_t)v52, v53, ElementTypeOrSelf, 0);
    v36 = mlir::RankedTensorType::get((uint64_t)v52, v53, v30, 0);
    v37 = *(unsigned int *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v37 + 1, 8);
      LODWORD(v37) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v37) = v35;
    v38 = *(_DWORD *)(a10 + 12);
    v39 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v39;
    if (v39 >= v38)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(a10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a10 + 8 * v39) = v36;
    ++*(_DWORD *)(a10 + 8);
    v40 = 1;
    v41 = v52;
    if (v52 == v54)
      goto LABEL_33;
  }
  else
  {
    v40 = 0;
    v41 = v52;
    if (v52 == v54)
      goto LABEL_33;
  }
  free(v41);
LABEL_33:
  if (v56[0] != v57)
    free(v56[0]);
  if (v58[0] != v59)
    free(v58[0]);
  if (Value != v62)
    free(Value);
  if (v63[0] != v64)
    free(v63[0]);
  if (v65[0] != v66)
    free(v65[0]);
  return v40;
}

uint64_t mlir::mps::PoolMaxOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  const char *v66;
  uint64_t Value;
  uint64_t v68;
  uint64_t OperandRange;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  void *__p;
  _QWORD **v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)a1[11];
  if (v3)
  {
    v5 = (const char *)a1[4];
    v4 = (const char *)a1[5];
    v6 = (_QWORD *)a1[8];
    v7 = (const char *)a1[10];
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
    v70 = v3;
    v71 = v8;
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
    v10 = Type;
    if (Type)
      Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    v74 = v10;
    v75 = Type;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
    v73 = 4;
    if (v12 == 1
      && *ArgAttrsAttr == v73
      && (v66 = v3,
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
          v68 = v13,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v7)
        goto LABEL_105;
      v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v7 + 8);
      v70 = v7;
      v71 = v14;
      v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      v16 = v15;
      if (v15)
        v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
      v74 = v16;
      v75 = v15;
      v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
      v73 = 4;
      if (v18 != 1)
        goto LABEL_56;
      if (*v17 == v73
        && (v66 = v7,
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
            v68 = v19,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_105:
        if (!v5)
          goto LABEL_106;
        v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
        v70 = v5;
        v71 = v20;
        v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
        v22 = v21;
        if (v21)
          v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
        v74 = v22;
        v75 = v21;
        v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
        v73 = 4;
        if (v24 != 1)
          goto LABEL_70;
        if (*v23 == v73
          && (v66 = v5,
              Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
              v68 = v25,
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_106:
          if (!v4)
            goto LABEL_25;
          v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
          v70 = v4;
          v71 = v26;
          v27 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
          v28 = v27;
          if (v27)
            v27 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
          v74 = v28;
          v75 = v27;
          v29 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
          v73 = 8;
          if (v30 == 1 && *v29 == v73)
          {
            v66 = v4;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66);
            v68 = v31;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
LABEL_25:
              if (v6)
              {
                v74 = v6;
                mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v74);
              }
              return 1;
            }
          }
          v70 = "'mps.pooling_max' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attribute of shape {8}";
          v72 = 259;
          mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
          v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
          if (v74)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
          if (v82)
          {
            v59 = (_QWORD **)__p;
            if (__p)
            {
              v60 = v81;
              v61 = __p;
              if (v81 != __p)
              {
                do
                  v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                v61 = __p;
              }
              v81 = v59;
              operator delete(v61);
            }
            v36 = v78;
            if (!v78)
              goto LABEL_100;
            v62 = v79;
            v38 = v78;
            if (v79 == v78)
            {
LABEL_99:
              v79 = v36;
              operator delete(v38);
LABEL_100:
              if (v76 != &v77)
                free(v76);
              return v32;
            }
            do
            {
              v64 = (void *)*--v62;
              v63 = v64;
              *v62 = 0;
              if (v64)
                operator delete[](v63);
            }
            while (v62 != v36);
LABEL_98:
            v38 = v78;
            goto LABEL_99;
          }
        }
        else
        {
LABEL_70:
          v70 = "'mps.pooling_max' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          v72 = 259;
          mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
          v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
          if (v74)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
          if (v82)
          {
            v53 = (_QWORD **)__p;
            if (__p)
            {
              v54 = v81;
              v55 = __p;
              if (v81 != __p)
              {
                do
                  v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                while (v54 != v53);
                v55 = __p;
              }
              v81 = v53;
              operator delete(v55);
            }
            v36 = v78;
            if (!v78)
              goto LABEL_100;
            v56 = v79;
            v38 = v78;
            if (v79 == v78)
              goto LABEL_99;
            do
            {
              v58 = (void *)*--v56;
              v57 = v58;
              *v56 = 0;
              if (v58)
                operator delete[](v57);
            }
            while (v56 != v36);
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_56:
        v70 = "'mps.pooling_max' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        v72 = 259;
        mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
        v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
        if (v74)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
        if (v82)
        {
          v47 = (_QWORD **)__p;
          if (__p)
          {
            v48 = v81;
            v49 = __p;
            if (v81 != __p)
            {
              do
                v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
              while (v48 != v47);
              v49 = __p;
            }
            v81 = v47;
            operator delete(v49);
          }
          v36 = v78;
          if (!v78)
            goto LABEL_100;
          v50 = v79;
          v38 = v78;
          if (v79 == v78)
            goto LABEL_99;
          do
          {
            v52 = (void *)*--v50;
            v51 = v52;
            *v50 = 0;
            if (v52)
              operator delete[](v51);
          }
          while (v50 != v36);
          goto LABEL_98;
        }
      }
    }
    else
    {
      v70 = "'mps.pooling_max' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      v72 = 259;
      mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
      v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
      if (v74)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
      if (v82)
      {
        v33 = (_QWORD **)__p;
        if (__p)
        {
          v34 = v81;
          v35 = __p;
          if (v81 != __p)
          {
            do
              v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
            while (v34 != v33);
            v35 = __p;
          }
          v81 = v33;
          operator delete(v35);
        }
        v36 = v78;
        if (!v78)
          goto LABEL_100;
        v37 = v79;
        v38 = v78;
        if (v79 == v78)
          goto LABEL_99;
        do
        {
          v40 = (void *)*--v37;
          v39 = v40;
          *v37 = 0;
          if (v40)
            operator delete[](v39);
        }
        while (v37 != v36);
        goto LABEL_98;
      }
    }
  }
  else
  {
    v70 = "'mps.pooling_max' op requires attribute 'window_sizes'";
    v72 = 259;
    mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
    v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    if (v82)
    {
      v41 = (_QWORD **)__p;
      if (__p)
      {
        v42 = v81;
        v43 = __p;
        if (v81 != __p)
        {
          do
            v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          v43 = __p;
        }
        v81 = v41;
        operator delete(v43);
      }
      v36 = v78;
      if (!v78)
        goto LABEL_100;
      v44 = v79;
      v38 = v78;
      if (v79 == v78)
        goto LABEL_99;
      do
      {
        v46 = (void *)*--v44;
        v45 = v46;
        *v44 = 0;
        if (v46)
          operator delete[](v45);
      }
      while (v44 != v36);
      goto LABEL_98;
    }
  }
  return v32;
}

void mlir::mps::getPool4dParams<mlir::mps::PoolMaxOpAdaptor>(uint64_t *a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, BOOL *a10, BOOL *a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t NumElements;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  unsigned int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v18 = a3[11];
  v70 = a3[10];
  v71 = v18;
  v58 = a3[4];
  v59 = a3[5];
  v68 = v59;
  v69 = v58;
  *a9 = 2;
  v19 = a3[9];
  if (v19)
    *a9 = *(_DWORD *)(v19 + 8);
  *a10 = a3[3] != 0;
  *a11 = a3[6] != 0;
  v20 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v20 == 8)
  {
    v21 = *(unsigned int *)(a7 + 8);
    v22 = v21 > 4;
    if ((_DWORD)v21 == 4)
      goto LABEL_5;
LABEL_15:
    if (v22)
    {
      *(_DWORD *)(a7 + 8) = 4;
      v23 = *(unsigned int *)(a8 + 8);
      v24 = v23 > 4;
      if ((_DWORD)v23 != 4)
        goto LABEL_22;
    }
    else
    {
      v29 = v21;
      v30 = v21;
      if (*(_DWORD *)(a7 + 12) <= 3u)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), 4uLL, 8);
        v29 = *(unsigned int *)(a7 + 8);
        v30 = *(_DWORD *)(a7 + 8);
      }
      memset_pattern16((void *)(*(_QWORD *)a7 + 8 * v29), &unk_181233190, 32 - 8 * v21);
      *(_DWORD *)(a7 + 8) = v30 - v21 + 4;
      v23 = *(unsigned int *)(a8 + 8);
      v24 = v23 > 4;
      if ((_DWORD)v23 != 4)
        goto LABEL_22;
    }
LABEL_6:
    v25 = *(unsigned int *)(a5 + 8);
    v26 = v25 > 4;
    if ((_DWORD)v25 == 4)
      goto LABEL_7;
LABEL_29:
    if (v26)
    {
      *(_DWORD *)(a5 + 8) = 4;
      if (a2 > *(unsigned int *)(a4 + 12))
        goto LABEL_8;
    }
    else
    {
      v33 = v25;
      v34 = v25;
      if (*(_DWORD *)(a5 + 12) <= 3u)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), 4uLL, 8);
        v33 = *(unsigned int *)(a5 + 8);
        v34 = *(_DWORD *)(a5 + 8);
      }
      memset_pattern16((void *)(*(_QWORD *)a5 + 8 * v33), &unk_181233190, 32 - 8 * v25);
      *(_DWORD *)(a5 + 8) = v34 - v25 + 4;
      if (a2 > *(unsigned int *)(a4 + 12))
        goto LABEL_8;
    }
LABEL_36:
    if (!a2)
      goto LABEL_42;
    goto LABEL_37;
  }
  if (v20 <= 8)
  {
    v27 = *(unsigned int *)(a6 + 8);
    v28 = *(_DWORD *)(a6 + 8);
    if (*(_DWORD *)(a6 + 12) <= 7u)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), 8uLL, 8);
      v27 = *(unsigned int *)(a6 + 8);
      v28 = *(_DWORD *)(a6 + 8);
    }
    bzero((void *)(*(_QWORD *)a6 + 8 * v27), 64 - 8 * v20);
    *(_DWORD *)(a6 + 8) = v28 - v20 + 8;
    v21 = *(unsigned int *)(a7 + 8);
    v22 = v21 > 4;
    if ((_DWORD)v21 != 4)
      goto LABEL_15;
  }
  else
  {
    *(_DWORD *)(a6 + 8) = 8;
    v21 = *(unsigned int *)(a7 + 8);
    v22 = v21 > 4;
    if ((_DWORD)v21 != 4)
      goto LABEL_15;
  }
LABEL_5:
  v23 = *(unsigned int *)(a8 + 8);
  v24 = v23 > 4;
  if ((_DWORD)v23 == 4)
    goto LABEL_6;
LABEL_22:
  if (v24)
  {
    *(_DWORD *)(a8 + 8) = 4;
    v25 = *(unsigned int *)(a5 + 8);
    v26 = v25 > 4;
    if ((_DWORD)v25 != 4)
      goto LABEL_29;
  }
  else
  {
    v31 = v23;
    v32 = v23;
    if (*(_DWORD *)(a8 + 12) <= 3u)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a8, (void *)(a8 + 16), 4uLL, 8);
      v31 = *(unsigned int *)(a8 + 8);
      v32 = *(_DWORD *)(a8 + 8);
    }
    memset_pattern16((void *)(*(_QWORD *)a8 + 8 * v31), &unk_181233190, 32 - 8 * v23);
    *(_DWORD *)(a8 + 8) = v32 - v23 + 4;
    v25 = *(unsigned int *)(a5 + 8);
    v26 = v25 > 4;
    if ((_DWORD)v25 != 4)
      goto LABEL_29;
  }
LABEL_7:
  if (a2 <= *(unsigned int *)(a4 + 12))
    goto LABEL_36;
LABEL_8:
  llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), a2, 8);
LABEL_37:
  v35 = *(_DWORD *)(a4 + 8);
  v36 = 8 * a2;
  do
  {
    v37 = *a1;
    if (v35 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35 + 1, 8);
      v35 = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v35) = v37;
    v35 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v35;
    ++a1;
    v36 -= 8;
  }
  while (v36);
  v18 = v71;
LABEL_42:
  if (v18 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v71) == 4)
  {
    *(_DWORD *)(a5 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v71, 0);
    v38 = v71;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v71);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v38, NumElements);
    while (1)
    {
      v40 = v65 == v62 && v66 == v63;
      if (v40 && v67 == v64)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40)
        v41 = *(_QWORD *)__p;
      else
        v41 = (uint64_t)((_QWORD)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      v42 = *(unsigned int *)(a5 + 8);
      if (v42 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v42 + 1, 8);
        v42 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v42) = v41;
      ++*(_DWORD *)(a5 + 8);
      if (v61 >= 0x41)
      {
        if (__p)
          operator delete[](__p);
      }
      ++v67;
    }
  }
  if (v70 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v70) == 4)
  {
    *(_DWORD *)(a7 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v70, 0);
    v43 = v70;
    v44 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v70);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v43, v44);
    while (1)
    {
      v45 = v65 == v62 && v66 == v63;
      if (v45 && v67 == v64)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40)
        v46 = *(_QWORD *)__p;
      else
        v46 = (uint64_t)((_QWORD)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      v47 = *(unsigned int *)(a7 + 8);
      if (v47 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), v47 + 1, 8);
        v47 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v47) = v46;
      ++*(_DWORD *)(a7 + 8);
      if (v61 >= 0x41 && __p)
        operator delete[](__p);
      ++v67;
    }
  }
  if (v58 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v69) == 4)
  {
    *(_DWORD *)(a8 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v69, 0);
    v48 = v69;
    v49 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v69);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v48, v49);
    while (1)
    {
      v50 = v65 == v62 && v66 == v63;
      if (v50 && v67 == v64)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40)
        v51 = *(_QWORD *)__p;
      else
        v51 = (uint64_t)((_QWORD)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      v52 = *(unsigned int *)(a8 + 8);
      if (v52 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a8, (void *)(a8 + 16), v52 + 1, 8);
        v52 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v52) = v51;
      ++*(_DWORD *)(a8 + 8);
      if (v61 >= 0x41 && __p)
        operator delete[](__p);
      ++v67;
    }
  }
  if (v59 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v68) == 8)
  {
    *(_DWORD *)(a6 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v68, 0);
    v53 = v68;
    v54 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v68);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v53, v54);
    while (1)
    {
      v55 = v65 == v62 && v66 == v63;
      if (v55 && v67 == v64)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40)
        v56 = *(_QWORD *)__p;
      else
        v56 = (uint64_t)((_QWORD)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      v57 = *(unsigned int *)(a6 + 8);
      if (v57 >= *(unsigned int *)(a6 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v57 + 1, 8);
        v57 = *(unsigned int *)(a6 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a6 + 8 * v57) = v56;
      ++*(_DWORD *)(a6 + 8);
      if (v61 >= 0x41 && __p)
        operator delete[](__p);
      ++v67;
    }
  }
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolMaxOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t NumElements;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD **v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  void *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  char *v111;
  __int128 v112;
  _QWORD **v113;
  _QWORD **v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  void *v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  int64_t v124;
  int64_t v125;
  uint64_t *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  char *v143;
  char *v144;
  __int128 v145;
  _QWORD **v146;
  _QWORD **v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  void *v153;
  uint64_t *v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  uint64_t *v159;
  char *v160;
  char *v161;
  __int128 v162;
  _QWORD **v163;
  _QWORD **v164;
  void *v165;
  _QWORD *v166;
  void *v167;
  void *v168;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  BOOL v173;
  int64_t v174;
  int64_t v175;
  int64_t v176;
  const void **v179[4];
  __int16 v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  _QWORD v197[3];
  void *v198;
  unsigned int v199;
  unsigned int v200;
  _BYTE v201[96];
  void *v202;
  _QWORD *v203;
  void *__p;
  _QWORD **v205;
  char v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v193 = (uint64_t *)a1;
  v4 = *(unsigned int *)(a1 + 44);
  v5 = a1 + 64;
  v6 = (v4 >> 23) & 1;
  v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v7 + 56)))
      v9 = v8;
    else
      v9 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v9 = 0;
  }
  v192 = v9;
  v10 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v10 + 8)))
      v12 = v11;
    else
      v12 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v12 = 0;
  }
  v191 = v12;
  v13 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 64);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v13 + 64)))
      v15 = v14;
    else
      v15 = 0;
    v4 = *(unsigned int *)(a1 + 44);
    v6 = (v4 >> 23) & 1;
  }
  else
  {
    v15 = 0;
  }
  v189 = 0;
  v190 = v15;
  v16 = v5 + 16 * v6;
  if (!BYTE3(v4))
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(_QWORD *)(v16 + 16)))
      v18 = v17;
    else
      v18 = 0;
    v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    v17 = v190;
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v21 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41)
            goto LABEL_77;
LABEL_75:
          if (v181)
            operator delete[](v181);
          goto LABEL_77;
        }
      }
      else
      {
        v21 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0)
          goto LABEL_47;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v22 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_56;
      }
      else
      {
        v22 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_56;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v22;
      v23 = (char *)v198;
      if (v199 >= v200)
      {
        v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v43 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v23 = (char *)v198;
          v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          v24 = &v194;
          v23 = (char *)v198;
        }
      }
      else
      {
        v24 = &v194;
      }
      v25 = &v23[24 * v199];
      v26 = *(_OWORD *)v24;
      *((_QWORD *)v25 + 2) = v24[2];
      *(_OWORD *)v25 = v26;
      v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v28 = (char *)v198;
        if (v27 >= v200)
        {
          v41 = v27 + 1;
          v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            v44 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v28 = (char *)v198;
            v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            v29 = &v194;
            v28 = (char *)v198;
          }
        }
        else
        {
          v29 = &v194;
        }
        v30 = &v28[24 * v199];
        v31 = *(_OWORD *)v29;
        *((_QWORD *)v30 + 2) = v29[2];
        *(_OWORD *)v30 = v31;
        ++v199;
      }
LABEL_56:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v205;
          v34 = __p;
          if (v205 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v205 = v32;
          operator delete(v34);
        }
        v35 = v202;
        if (v202)
        {
          v36 = v203;
          v37 = v202;
          if (v203 != v202)
          {
            do
            {
              v39 = (void *)*--v36;
              v38 = v39;
              *v36 = 0;
              if (v39)
                operator delete[](v38);
            }
            while (v36 != v35);
            v37 = v202;
          }
          v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_75;
LABEL_77:
      if (v21 < 1)
        return v17;
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    v45 = v192;
    v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v48 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41)
            goto LABEL_132;
LABEL_130:
          if (v181)
            operator delete[](v181);
          goto LABEL_132;
        }
      }
      else
      {
        v48 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0)
          goto LABEL_102;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v49 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_111;
      }
      else
      {
        v49 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_111;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v49;
      v50 = (char *)v198;
      if (v199 >= v200)
      {
        v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v70 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v50 = (char *)v198;
          v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          v51 = &v194;
          v50 = (char *)v198;
        }
      }
      else
      {
        v51 = &v194;
      }
      v52 = &v50[24 * v199];
      v53 = *(_OWORD *)v51;
      *((_QWORD *)v52 + 2) = v51[2];
      *(_OWORD *)v52 = v53;
      v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v55 = (char *)v198;
        if (v54 >= v200)
        {
          v68 = v54 + 1;
          v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            v71 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v55 = (char *)v198;
            v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            v56 = &v194;
            v55 = (char *)v198;
          }
        }
        else
        {
          v56 = &v194;
        }
        v57 = &v55[24 * v199];
        v58 = *(_OWORD *)v56;
        *((_QWORD *)v57 + 2) = v56[2];
        *(_OWORD *)v57 = v58;
        ++v199;
      }
LABEL_111:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v59 = (_QWORD **)__p;
        if (__p)
        {
          v60 = v205;
          v61 = __p;
          if (v205 != __p)
          {
            do
              v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            v61 = __p;
          }
          v205 = v59;
          operator delete(v61);
        }
        v62 = v202;
        if (v202)
        {
          v63 = v203;
          v64 = v202;
          if (v203 != v202)
          {
            do
            {
              v66 = (void *)*--v63;
              v65 = v66;
              *v63 = 0;
              if (v66)
                operator delete[](v65);
            }
            while (v63 != v62);
            v64 = v202;
          }
          v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_130;
LABEL_132:
      if (v48 < 1)
        return v17;
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    v72 = v191;
    v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v75 = *(_QWORD *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41)
            goto LABEL_187;
LABEL_185:
          if (v181)
            operator delete[](v181);
          goto LABEL_187;
        }
      }
      else
      {
        v75 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0)
          goto LABEL_157;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v76 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_166;
      }
      else
      {
        v76 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_166;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v76;
      v77 = (char *)v198;
      if (v199 >= v200)
      {
        v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v97 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v77 = (char *)v198;
          v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          v78 = &v194;
          v77 = (char *)v198;
        }
      }
      else
      {
        v78 = &v194;
      }
      v79 = &v77[24 * v199];
      v80 = *(_OWORD *)v78;
      *((_QWORD *)v79 + 2) = v78[2];
      *(_OWORD *)v79 = v80;
      v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be positive.";
        v196 = 32;
        v82 = (char *)v198;
        if (v81 >= v200)
        {
          v95 = v81 + 1;
          v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            v98 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v82 = (char *)v198;
            v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            v83 = &v194;
            v82 = (char *)v198;
          }
        }
        else
        {
          v83 = &v194;
        }
        v84 = &v82[24 * v199];
        v85 = *(_OWORD *)v83;
        *((_QWORD *)v84 + 2) = v83[2];
        *(_OWORD *)v84 = v85;
        ++v199;
      }
LABEL_166:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v86 = (_QWORD **)__p;
        if (__p)
        {
          v87 = v205;
          v88 = __p;
          if (v205 != __p)
          {
            do
              v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            v88 = __p;
          }
          v205 = v86;
          operator delete(v88);
        }
        v89 = v202;
        if (v202)
        {
          v90 = v203;
          v91 = v202;
          if (v203 != v202)
          {
            do
            {
              v93 = (void *)*--v90;
              v92 = v93;
              *v90 = 0;
              if (v93)
                operator delete[](v92);
            }
            while (v90 != v89);
            v91 = v202;
          }
          v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_185;
LABEL_187:
      if (v75 < 1)
        return v17;
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    v99 = v189;
    v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        v102 = *(_QWORD *)v181;
        if ((*(_QWORD *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41)
            goto LABEL_242;
LABEL_240:
          if (v181)
            operator delete[](v181);
          goto LABEL_242;
        }
      }
      else
      {
        v102 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0)
          goto LABEL_212;
      }
      v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        v103 = *(_QWORD *)v181;
        if (!v197[0])
          goto LABEL_221;
      }
      else
      {
        v103 = (uint64_t)((_QWORD)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0])
          goto LABEL_221;
      }
      LODWORD(v194) = 2;
      v195 = (const char *)v103;
      v104 = (char *)v198;
      if (v199 >= v200)
      {
        v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          v124 = (char *)&v194 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v104 = (char *)v198;
          v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          v105 = &v194;
          v104 = (char *)v198;
        }
      }
      else
      {
        v105 = &v194;
      }
      v106 = &v104[24 * v199];
      v107 = *(_OWORD *)v105;
      *((_QWORD *)v106 + 2) = v105[2];
      *(_OWORD *)v106 = v107;
      v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        v195 = ", all values should be non-negative.";
        v196 = 36;
        v109 = (char *)v198;
        if (v108 >= v200)
        {
          v122 = v108 + 1;
          v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            v125 = (char *)&v194 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v109 = (char *)v198;
            v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            v110 = &v194;
            v109 = (char *)v198;
          }
        }
        else
        {
          v110 = &v194;
        }
        v111 = &v109[24 * v199];
        v112 = *(_OWORD *)v110;
        *((_QWORD *)v111 + 2) = v110[2];
        *(_OWORD *)v111 = v112;
        ++v199;
      }
LABEL_221:
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      if (v206)
      {
        v113 = (_QWORD **)__p;
        if (__p)
        {
          v114 = v205;
          v115 = __p;
          if (v205 != __p)
          {
            do
              v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            v115 = __p;
          }
          v205 = v113;
          operator delete(v115);
        }
        v116 = v202;
        if (v202)
        {
          v117 = v203;
          v118 = v202;
          if (v203 != v202)
          {
            do
            {
              v120 = (void *)*--v117;
              v119 = v120;
              *v117 = 0;
              if (v120)
                operator delete[](v119);
            }
            while (v117 != v116);
            v118 = v202;
          }
          v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201)
          free(v198);
      }
      if (v182 >= 0x41)
        goto LABEL_240;
LABEL_242:
      if (v102 < 0)
        return v17;
      ++v188;
    }
  }
  v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)v193 + 11)))
    v126 = 0;
  v127 = *(_DWORD *)(v126[6] + 8);
  if (v127 == 3)
  {
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "not supported by this op.";
      v188 = 25;
      v142 = (uint64_t *)&v186;
      v143 = (char *)v198;
      if (v199 >= v200)
      {
        v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v174 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v143 = (char *)v198;
          v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          v142 = (uint64_t *)&v186;
          v143 = (char *)v198;
        }
      }
      v144 = &v143[24 * v199];
      v145 = *(_OWORD *)v142;
      *((_QWORD *)v144 + 2) = v142[2];
      *(_OWORD *)v144 = v145;
      ++v199;
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v146 = (_QWORD **)__p;
      if (__p)
      {
        v147 = v205;
        v148 = __p;
        if (v205 != __p)
        {
          do
            v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          v148 = __p;
        }
        v205 = v146;
        operator delete(v148);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_312;
      v150 = v203;
      v151 = v202;
      if (v203 == v202)
        goto LABEL_311;
      do
      {
        v153 = (void *)*--v150;
        v152 = v153;
        *v150 = 0;
        if (v153)
          operator delete[](v152);
      }
      while (v150 != v149);
      goto LABEL_310;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (a2)
      {
        v128 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8))
        {
          v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v128 + 8);
          v130 = a3;
          v186 = v128;
          v187 = (const char *)v129;
          if (a3)
            goto LABEL_260;
LABEL_285:
          v131 = 0;
          v183 = 0;
          v184 = 0;
          if (v128)
            goto LABEL_262;
          return 1;
        }
        v128 = 0;
        v130 = a3;
        v186 = 0;
        v187 = 0;
        if (!a3)
          goto LABEL_285;
      }
      else
      {
        v128 = 0;
        v186 = 0;
        v187 = 0;
        v130 = a3;
        if (!a3)
          goto LABEL_285;
      }
LABEL_260:
      v131 = *(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8))
      {
        v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v131 + 8);
        v183 = v131;
        v184 = v132;
        if (v128)
        {
LABEL_262:
          v17 = 1;
          if (*(_UNKNOWN **)(*(_QWORD *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(_QWORD *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  v194 = v136;
                  v137 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  v181 = v139;
                  v140 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v138, (uint64_t *)&v181);
                  v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        v131 = 0;
        v183 = 0;
        v184 = 0;
        if (v128)
          goto LABEL_262;
      }
      return 1;
    }
    v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      v187 = "invalid type. Must be specified when ";
      v188 = 37;
      v154 = (uint64_t *)&v186;
      v155 = (char *)v198;
      if (v199 >= v200)
      {
        v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          v175 = (char *)&v186 - (_BYTE *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v155 = (char *)v198;
          v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          v154 = (uint64_t *)&v186;
          v155 = (char *)v198;
        }
      }
      v156 = &v155[24 * v199];
      v157 = *(_OWORD *)v154;
      *((_QWORD *)v156 + 2) = v154[2];
      *(_OWORD *)v156 = v157;
      v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        v188 = 31;
        v159 = (uint64_t *)&v186;
        v160 = (char *)v198;
        if (v158 >= v200)
        {
          v172 = v158 + 1;
          v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            v176 = (char *)&v186 - (_BYTE *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v160 = (char *)v198;
            v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            v159 = (uint64_t *)&v186;
            v160 = (char *)v198;
          }
        }
        v161 = &v160[24 * v199];
        v162 = *(_OWORD *)v159;
        *((_QWORD *)v161 + 2) = v159[2];
        *(_OWORD *)v161 = v162;
        ++v199;
      }
    }
    v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    if (v206)
    {
      v163 = (_QWORD **)__p;
      if (__p)
      {
        v164 = v205;
        v165 = __p;
        if (v205 != __p)
        {
          do
            v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          v165 = __p;
        }
        v205 = v163;
        operator delete(v165);
      }
      v149 = v202;
      if (!v202)
        goto LABEL_312;
      v166 = v203;
      v151 = v202;
      if (v203 == v202)
      {
LABEL_311:
        v203 = v149;
        operator delete(v151);
LABEL_312:
        if (v198 != v201)
          free(v198);
        return v17;
      }
      do
      {
        v168 = (void *)*--v166;
        v167 = v168;
        *v166 = 0;
        if (v168)
          operator delete[](v167);
      }
      while (v166 != v149);
LABEL_310:
      v151 = v202;
      goto LABEL_311;
    }
  }
  return v17;
}

uint64_t mlir::mps::BiasAddOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const void ***v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  const char *v40;
  const void ***v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  const void ***v46;
  char *v47;
  char *v48;
  __int128 v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  const void ***v58;
  char *v59;
  char *v60;
  __int128 v61;
  const char *v62;
  const void ***v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  const void ***v68;
  char *v69;
  char *v70;
  __int128 v71;
  _QWORD **v72;
  _QWORD **v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  const void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  BOOL v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  const void **v113;
  const char *v114;
  uint64_t v115;
  __int16 v116;
  _QWORD v117[2];
  _QWORD *v118;
  uint64_t v119;
  const void **v120;
  const char *v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  unsigned int v127;
  unsigned int v128;
  _BYTE v129[96];
  void *v130;
  _QWORD *v131;
  void *__p;
  _QWORD **v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(int *)((*this)[10] + 8);
  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v4)
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    v6 = (*this)[9];
    v118 = v4;
    v119 = v5;
    v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
    {
LABEL_3:
      v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v118 = 0;
    v119 = 0;
    v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_6:
  v117[0] = v7;
  v117[1] = v8;
  if ((_DWORD)v3 == 1)
    v9 = 2;
  else
    v9 = 3;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v118))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
    if (v10 < v9)
    {
      v116 = 257;
      mlir::OpState::emitOpError(this, &v113, (uint64_t)&v124);
      if (v124)
      {
        LODWORD(v120) = 3;
        v121 = "requires value operand to have rank at least ";
        v122 = 45;
        v11 = &v120;
        v12 = (char *)v126;
        if (v127 >= v128)
        {
          v87 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            v102 = (char *)&v120 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v87, 24);
            v12 = (char *)v126;
            v11 = (const void ***)((char *)v126 + v102);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v87, 24);
            v11 = &v120;
            v12 = (char *)v126;
          }
        }
        v13 = &v12[24 * v127];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        v15 = ++v127;
        if (v124)
        {
          LODWORD(v120) = 2;
          v121 = (const char *)v9;
          v16 = &v120;
          v17 = (char *)v126;
          if (v15 >= v128)
          {
            v91 = v15 + 1;
            v92 = (char *)v126 + 24 * v15 > (char *)&v120;
            if (v126 <= &v120 && v92)
            {
              v106 = (char *)&v120 - (_BYTE *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v91, 24);
              v17 = (char *)v126;
              v16 = (const void ***)((char *)v126 + v106);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v91, 24);
              v16 = &v120;
              v17 = (char *)v126;
            }
          }
          v18 = &v17[24 * v127];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          v20 = ++v127;
          if (v124)
          {
            LODWORD(v120) = 3;
            v122 = 7;
            v21 = &v120;
            v22 = (char *)v126;
            if (v20 >= v128)
            {
              v100 = v20 + 1;
              v101 = (char *)v126 + 24 * v20 > (char *)&v120;
              if (v126 <= &v120 && v101)
              {
                v111 = (char *)&v120 - (_BYTE *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                v22 = (char *)v126;
                v21 = (const void ***)((char *)v126 + v111);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                v21 = &v120;
                v22 = (char *)v126;
              }
            }
            v23 = &v22[24 * v127];
            v24 = *(_OWORD *)v21;
            *((_QWORD *)v23 + 2) = v21[2];
            *(_OWORD *)v23 = v24;
            ++v127;
          }
        }
      }
      if (v3 > 0xA)
      {
        v25 = 0;
        v26 = "";
        if (!v124)
          goto LABEL_56;
      }
      else
      {
        v25 = (const char *)qword_18125C470[v3];
        v26 = off_1E0E55838[v3];
        if (!v124)
          goto LABEL_56;
      }
      v123 = 261;
      v120 = (const void **)v26;
      v121 = v25;
      mlir::Diagnostic::operator<<((uint64_t)&v125, &v120);
      if (v124)
      {
        LODWORD(v120) = 3;
        v122 = 21;
        v58 = &v120;
        v59 = (char *)v126;
        if (v127 >= v128)
        {
          v93 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            v107 = (char *)&v120 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v93, 24);
            v59 = (char *)v126;
            v58 = (const void ***)((char *)v126 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v93, 24);
            v58 = &v120;
            v59 = (char *)v126;
          }
        }
        v60 = &v59[24 * v127];
        v61 = *(_OWORD *)v58;
        *((_QWORD *)v60 + 2) = v58[2];
        *(_OWORD *)v60 = v61;
        ++v127;
      }
LABEL_56:
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
      if (v124)
      {
        LODWORD(v120) = 2;
        v121 = v62;
        v63 = &v120;
        v64 = (char *)v126;
        if (v127 >= v128)
        {
          v88 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            v103 = (char *)&v120 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v88, 24);
            v64 = (char *)v126;
            v63 = (const void ***)((char *)v126 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v88, 24);
            v63 = &v120;
            v64 = (char *)v126;
          }
        }
        v65 = &v64[24 * v127];
        v66 = *(_OWORD *)v63;
        *((_QWORD *)v65 + 2) = v63[2];
        *(_OWORD *)v65 = v66;
        v67 = ++v127;
        if (v124)
        {
          LODWORD(v120) = 3;
          v121 = ".";
          v122 = 1;
          v68 = &v120;
          v69 = (char *)v126;
          if (v67 >= v128)
          {
            v94 = v67 + 1;
            v95 = (char *)v126 + 24 * v67 > (char *)&v120;
            if (v126 <= &v120 && v95)
            {
              v108 = (char *)&v120 - (_BYTE *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v94, 24);
              v69 = (char *)v126;
              v68 = (const void ***)((char *)v126 + v108);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v94, 24);
              v68 = &v120;
              v69 = (char *)v126;
            }
          }
          v70 = &v69[24 * v127];
          v71 = *(_OWORD *)v68;
          *((_QWORD *)v70 + 2) = v68[2];
          *(_OWORD *)v70 = v71;
          ++v127;
        }
      }
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v124);
      if (v124)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v124);
      if (v134)
      {
        v72 = (_QWORD **)__p;
        if (__p)
        {
          v73 = v133;
          v74 = __p;
          if (v133 != __p)
          {
            do
              v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
            while (v73 != v72);
            v74 = __p;
          }
          v133 = v72;
          operator delete(v74);
        }
        v53 = v130;
        if (!v130)
          goto LABEL_77;
        v75 = v131;
        v55 = v130;
        if (v131 == v130)
        {
LABEL_76:
          v131 = v53;
          operator delete(v55);
LABEL_77:
          if (v126 != v129)
            free(v126);
          return v30;
        }
        do
        {
          v77 = (void *)*--v75;
          v76 = v77;
          *v75 = 0;
          if (v77)
            operator delete[](v76);
        }
        while (v75 != v53);
LABEL_75:
        v55 = v130;
        goto LABEL_76;
      }
      return v30;
    }
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v117)
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117), v27 != 1))
  {
    v123 = 257;
    mlir::OpState::emitOpError(this, &v120, (uint64_t)&v124);
    if (v124)
    {
      LODWORD(v113) = 3;
      v114 = "requires bias operand to have rank exactly one.";
      v115 = 47;
      v31 = &v113;
      v32 = (char *)v126;
      if (v127 >= v128)
      {
        v89 = v127 + 1;
        if (v126 <= &v113 && (char *)v126 + 24 * v127 > (char *)&v113)
        {
          v104 = (char *)&v113 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v89, 24);
          v32 = (char *)v126;
          v31 = (const void ***)((char *)v126 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v89, 24);
          v31 = &v113;
          v32 = (char *)v126;
        }
      }
      v33 = &v32[24 * v127];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = v31[2];
      *(_OWORD *)v33 = v34;
      v35 = ++v127;
      if (v124)
      {
        LODWORD(v113) = 3;
        v114 = " Found ";
        v115 = 7;
        v36 = &v113;
        v37 = (char *)v126;
        if (v35 >= v128)
        {
          v96 = v35 + 1;
          v97 = (char *)v126 + 24 * v35 > (char *)&v113;
          if (v126 <= &v113 && v97)
          {
            v109 = (char *)&v113 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v96, 24);
            v37 = (char *)v126;
            v36 = (const void ***)((char *)v126 + v109);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v96, 24);
            v36 = &v113;
            v37 = (char *)v126;
          }
        }
        v38 = &v37[24 * v127];
        v39 = *(_OWORD *)v36;
        *((_QWORD *)v38 + 2) = v36[2];
        *(_OWORD *)v38 = v39;
        ++v127;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117);
    if (v124)
    {
      LODWORD(v113) = 2;
      v114 = v40;
      v41 = &v113;
      v42 = (char *)v126;
      if (v127 >= v128)
      {
        v90 = v127 + 1;
        if (v126 <= &v113 && (char *)v126 + 24 * v127 > (char *)&v113)
        {
          v105 = (char *)&v113 - (_BYTE *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v90, 24);
          v42 = (char *)v126;
          v41 = (const void ***)((char *)v126 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v90, 24);
          v41 = &v113;
          v42 = (char *)v126;
        }
      }
      v43 = &v42[24 * v127];
      v44 = *(_OWORD *)v41;
      *((_QWORD *)v43 + 2) = v41[2];
      *(_OWORD *)v43 = v44;
      v45 = ++v127;
      if (v124)
      {
        LODWORD(v113) = 3;
        v114 = ".";
        v115 = 1;
        v46 = &v113;
        v47 = (char *)v126;
        if (v45 >= v128)
        {
          v98 = v45 + 1;
          v99 = (char *)v126 + 24 * v45 > (char *)&v113;
          if (v126 <= &v113 && v99)
          {
            v110 = (char *)&v113 - (_BYTE *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
            v47 = (char *)v126;
            v46 = (const void ***)((char *)v126 + v110);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
            v46 = &v113;
            v47 = (char *)v126;
          }
        }
        v48 = &v47[24 * v127];
        v49 = *(_OWORD *)v46;
        *((_QWORD *)v48 + 2) = v46[2];
        *(_OWORD *)v48 = v49;
        ++v127;
      }
    }
    v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v124);
    if (v124)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v124);
    if (v134)
    {
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v133;
        v52 = __p;
        if (v133 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v133 = v50;
        operator delete(v52);
      }
      v53 = v130;
      if (!v130)
        goto LABEL_77;
      v54 = v131;
      v55 = v130;
      if (v131 == v130)
        goto LABEL_76;
      do
      {
        v57 = (void *)*--v54;
        v56 = v57;
        *v54 = 0;
        if (v57)
          operator delete[](v56);
      }
      while (v54 != v53);
      goto LABEL_75;
    }
  }
  else if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v117)
         && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v118))
  {
    if ((_DWORD)v3 == 1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
      v29 = (v28 - 1);
    }
    else
    {
      v29 = 1;
    }
    v78 = *(const void ***)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118) + 8 * v29);
    v113 = v78;
    v79 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117);
    v112 = v79;
    v30 = 1;
    if (v78 != (const void **)0x8000000000000000 && v79 != 0x8000000000000000 && v78 != (const void **)v79)
    {
      v123 = 257;
      mlir::OpState::emitOpError(this, &v120, (uint64_t)&v124);
      v80 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v124, "requires feature dimension and bias dimension to match. ");
      v81 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, "Found ");
      v82 = mlir::InFlightDiagnostic::operator<<<long long &>(v81, (uint64_t *)&v113);
      v83 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v82, " and ");
      v84 = mlir::InFlightDiagnostic::operator<<<long long &>(v83, &v112);
      v85 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v84, ", respectively.");
      v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v85);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v124);
    }
  }
  else
  {
    return 1;
  }
  return v30;
}

uint64_t mlir::mps::BiasAddGradOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t Context;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t ArgAttrsAttr;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t ElementTypeOrSelf;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  char v44;
  void *v45;
  uint64_t v46;
  uint64_t OperandRange;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[32];
  void *v56;
  uint64_t v57;
  _BYTE v58[48];
  uint64_t v59;
  _BYTE v60[8];
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[4];

  v67[2] = *MEMORY[0x1E0C80C00];
  v67[0] = a4;
  v67[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v59 = a6;
  v60[0] = 0;
  v61 = 0;
  v62 = v16;
  v63 = a9;
  v64 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(v60, "mps.bias_add_grad", 17, Context);
    v61 = 1;
  }
  v65 = a4;
  v66 = a5;
  if (!a5
    || (v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::BiasAddGradOpAdaptor::verify((uint64_t)&v59, v18)))
  {
    ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
    goto LABEL_20;
  }
  v19 = mlir::ValueRange::dereference_iterator(v67, 0);
  v20 = *(_DWORD *)(v62 + 8);
  v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    v51 = 0;
    v52 = 0;
    goto LABEL_25;
  }
  v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
  v51 = v21;
  v52 = v22;
  if (!v21)
  {
LABEL_25:
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(0);
    goto LABEL_20;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51) & 1) != 0)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    v24 = v23;
    if (v20 == 1)
      v25 = v23 - 1;
    else
      v25 = 1;
    v56 = v58;
    v57 = 0x600000000;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    v28 = v27;
    v53 = v55;
    v54 = 0x400000000;
    if (v24)
    {
      if (v24 < 5)
      {
        v29 = 0;
        v30 = (uint64_t *)v55;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v24, 8);
        v29 = v54;
        v30 = (uint64_t *)v53;
      }
      if (v24 != v29)
        bzero(&v30[v29], 8 * (v24 - v29));
      LODWORD(v54) = v24;
      if (v24 >= 4)
      {
        v36 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        v37 = (int64x2_t)xmmword_181233120;
        v38 = (int64x2_t *)(v30 + 2);
        v39 = vdupq_n_s64(2uLL);
        v40 = vdupq_n_s64(4uLL);
        v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v38[-1] = v37;
          *v38 = vaddq_s64(v37, v39);
          v37 = vaddq_s64(v37, v40);
          v38 += 2;
          v41 -= 4;
        }
        while (v41);
        goto LABEL_37;
      }
      v36 = 0;
      do
      {
        v30[v36] = v36;
        ++v36;
LABEL_37:
        ;
      }
      while (v24 != v36);
    }
    else
    {
      v30 = (uint64_t *)v55;
    }
    v42 = &v30[v25];
    v43 = &v30[v24];
    if (v43 != v42 + 1)
    {
      memmove(v42, v42 + 1, (char *)v43 - (char *)(v42 + 1));
      LODWORD(v24) = v54;
      v30 = (uint64_t *)v53;
    }
    LODWORD(v54) = v24 - 1;
    if (v53 != v55)
      free(v53);
    if (v44)
    {
      v45 = v56;
      v46 = v57;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
      v48 = mlir::RankedTensorType::get((uint64_t)v45, v46, OperandRange, 0);
      v49 = *(unsigned int *)(a11 + 8);
      if (v49 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v49 + 1, 8);
        LODWORD(v49) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v49) = v48;
      ++*(_DWORD *)(a11 + 8);
      v34 = 1;
      v50 = v56;
      if (v56 == v58)
        return v34;
    }
    else
    {
      v34 = 0;
      v50 = v56;
      if (v56 == v58)
        return v34;
    }
    free(v50);
    return v34;
  }
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v51);
LABEL_20:
  v32 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  v33 = *(unsigned int *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::BiasAddGradOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  const char *v13;
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2 || *(_DWORD *)(v2 + 8) < 2u)
    return 1;
  v13 = "'mps.bias_add_grad' op attribute 'data_format' failed to satisfy constraint: valid TensorDataLayout is NHWC or NCHW";
  v14 = 259;
  mlir::emitError(a2, (uint64_t)&v13, (uint64_t)v15);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  if (v22)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
    v8 = v18;
    if (v18)
    {
      v9 = v19;
      v10 = v18;
      if (v19 != v18)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v18;
      }
      v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17)
      free(v16);
  }
  return v3;
}

uint64_t mlir::mps::`anonymous namespace'::inferReductionOpReturnShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v30;
  _BYTE v31[24];
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[8];

  v41[6] = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v40 = 0x600000000;
  {
    v27 = 0;
    v28 = v39;
    if (v39 == v41)
      return v27;
    goto LABEL_33;
  }
  v33 = v35;
  v34 = 0x400000000;
  v37 = 0;
  v38 = 0;
  v36 = &v37;
  if ((_DWORD)v40)
  {
    v12 = (uint64_t **)v39;
    v13 = 8 * v40;
    do
    {
      v14 = *v12++;
      v32 = v14;
      llvm::SmallSet<long long,4u,std::less<long long>>::insert((uint64_t)&v33, &v32, (uint64_t)v31);
      v13 -= 8;
    }
    while (v13);
  }
  if (a4)
  {
    v15 = 0;
    v16 = (void *)(a8 + 16);
    do
    {
      if (v38)
      {
        v19 = v37;
        if (!v37)
          goto LABEL_7;
        v20 = &v37;
        do
        {
          v21 = v19;
          v22 = v20;
          v23 = v19[4];
          v24 = v19 + 1;
          if (v23 >= v15)
          {
            v24 = v21;
            v20 = (_QWORD **)v21;
          }
          v19 = (_QWORD *)*v24;
        }
        while (v19);
        if (v20 == &v37)
          goto LABEL_7;
        if (v23 < v15)
          v21 = v22;
        if (v15 < v21[4])
          goto LABEL_7;
      }
      else
      {
        if (!(_DWORD)v34)
          goto LABEL_7;
        v25 = v33;
        v26 = 8 * v34;
        while (*v25 != v15)
        {
          ++v25;
          v26 -= 8;
          if (!v26)
            goto LABEL_7;
        }
        if (!v26)
        {
LABEL_7:
          v17 = *(_QWORD *)(a3 + 8 * v15);
          v18 = *(unsigned int *)(a8 + 8);
          if (v18 >= *(unsigned int *)(a8 + 12))
            goto LABEL_29;
          goto LABEL_8;
        }
      }
      if (!a7)
        goto LABEL_9;
      v18 = *(unsigned int *)(a8 + 8);
      v17 = 1;
      if (v18 >= *(unsigned int *)(a8 + 12))
      {
LABEL_29:
        v30 = v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a8, v16, v18 + 1, 8);
        v16 = v30;
        v18 = *(unsigned int *)(a8 + 8);
      }
LABEL_8:
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v18) = v17;
      ++*(_DWORD *)(a8 + 8);
LABEL_9:
      ++v15;
    }
    while (v15 != a4);
  }
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v36, v37);
  if (v33 != v35)
    free(v33);
  v27 = 1;
  v28 = v39;
  if (v39 != v41)
LABEL_33:
    free(v28);
  return v27;
}

uint64_t mlir::mps::BiasAddGradOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  const void ***v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  const void ***v31;
  char *v32;
  char *v33;
  __int128 v34;
  _QWORD **v35;
  _QWORD **v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  BOOL v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  const void **v56;
  __int16 v57;
  _QWORD *v58;
  uint64_t v59;
  const void **v60;
  const char *v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE v69[96];
  void *v70;
  _QWORD *v71;
  void *__p;
  _QWORD **v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v2 = *(int *)((*this)[10] + 8);
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
  {
    v58 = 0;
    v59 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v58))
      goto LABEL_5;
    return 1;
  }
  v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  v58 = v3;
  v59 = v4;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v58))
    return 1;
LABEL_5:
  if ((_DWORD)v2 == 1)
    v5 = 2;
  else
    v5 = 3;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  if (v6 >= v5)
    return 1;
  v7 = (const char *)v6;
  v56 = (const void **)"requires out_backprop operand to have rank at least ";
  v57 = 259;
  mlir::Operation::emitOpError(v1, &v56, (uint64_t)&v64);
  if (v64)
  {
    LODWORD(v60) = 2;
    v61 = (const char *)v5;
    v8 = &v60;
    v9 = (char *)v66;
    if (v67 >= v68)
    {
      v43 = v67 + 1;
      if (v66 <= &v60 && (char *)v66 + 24 * v67 > (char *)&v60)
      {
        v51 = (char *)&v60 - (_BYTE *)v66;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v43, 24);
        v9 = (char *)v66;
        v8 = (const void ***)((char *)v66 + v51);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v43, 24);
        v8 = &v60;
        v9 = (char *)v66;
      }
    }
    v10 = &v9[24 * v67];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    v12 = ++v67;
    if (v64)
    {
      LODWORD(v60) = 3;
      v62 = 7;
      v13 = &v60;
      v14 = (char *)v66;
      if (v12 >= v68)
      {
        v44 = v12 + 1;
        v45 = (char *)v66 + 24 * v12 > (char *)&v60;
        if (v66 <= &v60 && v45)
        {
          v52 = (char *)&v60 - (_BYTE *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v44, 24);
          v14 = (char *)v66;
          v13 = (const void ***)((char *)v66 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v44, 24);
          v13 = &v60;
          v14 = (char *)v66;
        }
      }
      v15 = &v14[24 * v67];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v67;
    }
  }
  if (v2 <= 0xA)
  {
    v17 = (const char *)qword_18125C470[v2];
    v18 = off_1E0E55838[v2];
    if (!v64)
      goto LABEL_27;
LABEL_20:
    v63 = 261;
    v60 = (const void **)v18;
    v61 = v17;
    mlir::Diagnostic::operator<<((uint64_t)&v65, &v60);
    if (v64)
    {
      LODWORD(v60) = 3;
      v62 = 21;
      v21 = &v60;
      v22 = (char *)v66;
      if (v67 >= v68)
      {
        v46 = v67 + 1;
        if (v66 <= &v60 && (char *)v66 + 24 * v67 > (char *)&v60)
        {
          v53 = (char *)&v60 - (_BYTE *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v46, 24);
          v22 = (char *)v66;
          v21 = (const void ***)((char *)v66 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v46, 24);
          v21 = &v60;
          v22 = (char *)v66;
        }
      }
      v23 = &v22[24 * v67];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = v21[2];
      *(_OWORD *)v23 = v24;
      v25 = ++v67;
      if (v64)
      {
        LODWORD(v60) = 2;
        v61 = v7;
        v26 = &v60;
        v27 = (char *)v66;
        if (v25 >= v68)
        {
          v47 = v25 + 1;
          v48 = (char *)v66 + 24 * v25 > (char *)&v60;
          if (v66 <= &v60 && v48)
          {
            v54 = (char *)&v60 - (_BYTE *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v47, 24);
            v27 = (char *)v66;
            v26 = (const void ***)((char *)v66 + v54);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v47, 24);
            v26 = &v60;
            v27 = (char *)v66;
          }
        }
        v28 = &v27[24 * v67];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = v26[2];
        *(_OWORD *)v28 = v29;
        v30 = ++v67;
        if (v64)
        {
          LODWORD(v60) = 3;
          v61 = ".";
          v62 = 1;
          v31 = &v60;
          v32 = (char *)v66;
          if (v30 >= v68)
          {
            v49 = v30 + 1;
            v50 = (char *)v66 + 24 * v30 > (char *)&v60;
            if (v66 <= &v60 && v50)
            {
              v55 = (char *)&v60 - (_BYTE *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v49, 24);
              v32 = (char *)v66;
              v31 = (const void ***)((char *)v66 + v55);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v49, 24);
              v31 = &v60;
              v32 = (char *)v66;
            }
          }
          v33 = &v32[24 * v67];
          v34 = *(_OWORD *)v31;
          *((_QWORD *)v33 + 2) = v31[2];
          *(_OWORD *)v33 = v34;
          ++v67;
        }
      }
    }
    goto LABEL_27;
  }
  v17 = 0;
  v18 = "";
  if (v64)
    goto LABEL_20;
LABEL_27:
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  if (v74)
  {
    v35 = (_QWORD **)__p;
    if (__p)
    {
      v36 = v73;
      v37 = __p;
      if (v73 != __p)
      {
        do
          v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        v37 = __p;
      }
      v73 = v35;
      operator delete(v37);
    }
    v38 = v70;
    if (v70)
    {
      v39 = v71;
      v40 = v70;
      if (v71 != v70)
      {
        do
        {
          v42 = (void *)*--v39;
          v41 = v42;
          *v39 = 0;
          if (v42)
            operator delete[](v41);
        }
        while (v39 != v38);
        v40 = v70;
      }
      v71 = v38;
      operator delete(v40);
    }
    if (v66 != v69)
      free(v66);
  }
  return v19;
}

uint64_t mlir::mps::inferStencilShape(int a1, int a2, void *__src, unint64_t a4, _QWORD *a5, int a6, unint64_t **a7, _QWORD **a8, _QWORD **a9, char a10, uint64_t a11)
{
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v16 = *(unsigned int *)(a11 + 8);
  if (a4 != v16)
  {
    if (a4 >= v16)
    {
      if (a4 > *(unsigned int *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), a4, 8);
        v16 = *(unsigned int *)(a11 + 8);
      }
      if (a4 != v16)
        bzero((void *)(*(_QWORD *)a11 + 8 * v16), 8 * (a4 - v16));
    }
    *(_DWORD *)(a11 + 8) = a4;
  }
  v17 = a4 - 4;
  if (a4)
    memmove(*(void **)a11, __src, 8 * a4);
  v18 = *a8;
  v19 = *a7;
  v20 = *(_QWORD **)a11;
  v21 = *((_QWORD *)__src + v17);
  if ((a10 & 1) == 0)
  {
    v28 = *a9;
    if (v21 == 0x8000000000000000)
    {
      v29 = a4 - 3;
      v30 = *((_QWORD *)__src + a4 - 3);
      if (v30 == 0x8000000000000000)
        goto LABEL_18;
    }
    else
    {
      v20[v17] = (*v28 + v28[1] + v21 + ~(*v18 * (*a5 - 1)) + *v19) / *v19;
      v29 = a4 - 3;
      v30 = *((_QWORD *)__src + a4 - 3);
      if (v30 == 0x8000000000000000)
      {
LABEL_18:
        v31 = a4 - 2;
        v32 = *((_QWORD *)__src + a4 - 2);
        if (v32 == 0x8000000000000000)
          goto LABEL_19;
        goto LABEL_35;
      }
    }
    v20[v29] = (v28[2] + v28[3] + v30 + ~(v18[1] * (a5[1] - 1)) + v19[1]) / v19[1];
    v31 = a4 - 2;
    v32 = *((_QWORD *)__src + a4 - 2);
    if (v32 == 0x8000000000000000)
    {
LABEL_19:
      v26 = a4 - 1;
      v33 = *((_QWORD *)__src + a4 - 1);
      if (v33 == 0x8000000000000000)
        return 1;
      goto LABEL_36;
    }
LABEL_35:
    v20[v31] = (v28[4] + v28[5] + v32 + ~(v18[2] * (a5[2] - 1)) + v19[2]) / v19[2];
    v26 = a4 - 1;
    v33 = *((_QWORD *)__src + a4 - 1);
    if (v33 == 0x8000000000000000)
      return 1;
LABEL_36:
    v42 = v19[3];
    v44 = v28[6] + v28[7] + v33 + ~(v18[3] * (a5[3] - 1)) + v42;
LABEL_37:
    v20[v26] = v44 / v42;
    return 1;
  }
  if (v21 == 0x8000000000000000)
  {
    v22 = a4 - 3;
    v23 = *((_QWORD *)__src + a4 - 3);
    if (v23 == 0x8000000000000000)
      goto LABEL_13;
LABEL_24:
    v36 = v19[1];
    v37 = v23 % v36;
    if (!(v23 % v36))
      v37 = v19[1];
    v35 = v18[1] * (a5[1] - 1);
    v20[v22] = (((v35 - v37 + 1) & ~((uint64_t)(v35 - v37 + 1) >> 63)) + ~v35 + v23 + v36) / v36;
    v24 = a4 - 2;
    v25 = *((_QWORD *)__src + a4 - 2);
    if (v25 == 0x8000000000000000)
    {
LABEL_14:
      v26 = a4 - 1;
      v27 = *((_QWORD *)__src + a4 - 1);
      if (v27 == 0x8000000000000000)
        return 1;
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  v34 = v21 % *v19;
  if (!v34)
    v34 = *v19;
  v20[v17] = (((*v18 * (*a5 - 1) - v34 + 1) & ~((uint64_t)(*v18 * (*a5 - 1) - v34 + 1) >> 63))
            + ~(*v18 * (*a5 - 1))
            + v21
            + *v19)
           / *v19;
  v22 = a4 - 3;
  v23 = *((_QWORD *)__src + a4 - 3);
  if (v23 != 0x8000000000000000)
    goto LABEL_24;
LABEL_13:
  v24 = a4 - 2;
  v25 = *((_QWORD *)__src + a4 - 2);
  if (v25 == 0x8000000000000000)
    goto LABEL_14;
LABEL_27:
  v39 = v19[2];
  v40 = v25 % v39;
  if (!(v25 % v39))
    v40 = v19[2];
  v38 = v18[2] * (a5[2] - 1);
  v20[v24] = (((v38 - v40 + 1) & ~((uint64_t)(v38 - v40 + 1) >> 63)) + ~v38 + v25 + v39) / v39;
  v26 = a4 - 1;
  v27 = *((_QWORD *)__src + a4 - 1);
  if (v27 != 0x8000000000000000)
  {
LABEL_30:
    v41 = v18[3] * (a5[3] - 1);
    v42 = v19[3];
    v43 = v27 % v42;
    if (!(v27 % v42))
      v43 = v42;
    v44 = ((v41 - v43 + 1) & ~((uint64_t)(v41 - v43 + 1) >> 63)) + ~v41 + v27 + v42;
    goto LABEL_37;
  }
  return 1;
}

uint64_t mlir::mps::StencilOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t Context;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ElementTypeOrSelf;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  void *ArgAttrsAttr;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  int v52;
  void *v53;
  uint64_t v54;
  uint64_t OperandRange;
  uint64_t v56;
  _QWORD *v57[2];
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *__p;
  uint64_t v71;
  _QWORD v72[4];
  void *v73;
  uint64_t v74;
  _QWORD v75[8];
  void *v76;
  uint64_t v77;
  _QWORD v78[4];
  void *v79;
  uint64_t v80;
  _BYTE v81[32];
  uint64_t v82;
  char v83[8];
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v93 = a4;
  v94 = a5;
  if (a7)
  {
    v16 = *a7;
    v17 = a7[1];
    v18 = a7[2];
    v19 = a7[3];
  }
  else
  {
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
  }
  v82 = a6;
  v83[0] = 0;
  v84 = 0;
  v85 = v16;
  v86 = v17;
  v87 = v18;
  v88 = v19;
  v20 = a5;
  v89 = a9;
  v90 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v82);
    if (v84)
      v84 = 0;
    mlir::OperationName::OperationName(v83, "mps.stencil", 11, Context);
    v84 = 1;
    v20 = v94;
  }
  v91 = a4;
  v92 = a5;
  if (v20 < 2
    || (v22 = mlir::UnknownLoc::get(this, a2), !mlir::mps::StencilOpAdaptor::verify(&v82, v22)))
  {
    v34 = mlir::Float32Type::get(this, a2);
    v28 = (_QWORD *)mlir::UnrankedTensorType::get(v34);
    goto LABEL_21;
  }
  v23 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v93, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v24 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v93, 1) + 8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8))
  {
    v68 = 0;
    v69 = 0;
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil a non-shaped inputType");
  }
  v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
  v68 = v23;
  v69 = v25;
  if (!v23)
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil a non-shaped inputType");
  v26 = v24 & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) + 8))
  {
    v66 = 0;
    v67 = 0;
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil with a non-shaped weightsType");
  }
  v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v26 + 8);
  v66 = v24 & 0xFFFFFFFFFFFFFFF8;
  v67 = v27;
  if (!v26)
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil with a non-shaped weightsType");
  v28 = v68;
  if (*(_UNKNOWN **)(*v68 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
    v30 = v29;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
    if (v30 >= 4 && v31 == 4)
    {
      v32 = *((_QWORD *)&v85 + 1);
      v64 = v85;
      v65 = *((_QWORD *)&v88 + 1);
      v63 = *((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v87 + 1))
        v33 = *(_DWORD *)(*((_QWORD *)&v87 + 1) + 8);
      else
        v33 = 2;
      v79 = v81;
      v80 = 0x400000000;
      if (*((_QWORD *)&v88 + 1) && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v65) == 4)
      {
        mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v73, v65, 0);
        mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v65, &v76);
        while (1)
        {
          v40 = v73 == v76 && v74 == v77;
          if (v40 && v75[0] == v78[0])
            break;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v73, (llvm::APInt *)&__p);
          if (v71 > 0x40)
            v41 = *(_QWORD *)__p;
          else
            v41 = (uint64_t)((_QWORD)__p << -(uint64_t)v71) >> -(uint64_t)v71;
          v42 = v80;
          if (v80 >= (unint64_t)HIDWORD(v80))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v80 + 1, 8);
            v42 = v80;
          }
          *((_QWORD *)v79 + v42) = v41;
          LODWORD(v80) = v80 + 1;
          if (v71 >= 0x41)
          {
            if (__p)
              operator delete[](__p);
          }
          ++v75[0];
        }
      }
      else
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v79, 4uLL, 1uLL);
      }
      v76 = v78;
      v77 = 0x400000000;
      if (v64 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v64) == 4)
      {
        mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v73, v64, 0);
        mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v64, &__p);
        while (1)
        {
          v43 = v73 == __p && v74 == v71;
          if (v43 && v75[0] == v72[0])
            break;
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v73, (llvm::APInt *)&v60);
          if (v61 > 0x40)
            v44 = *(_QWORD *)v60;
          else
            v44 = (uint64_t)((_QWORD)v60 << -(uint64_t)v61) >> -(uint64_t)v61;
          v45 = v77;
          if (v77 >= (unint64_t)HIDWORD(v77))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v77 + 1, 8);
            v45 = v77;
          }
          *((_QWORD *)v76 + v45) = v44;
          LODWORD(v77) = v77 + 1;
          if (v61 >= 0x41 && v60)
            operator delete[](v60);
          ++v75[0];
        }
      }
      else
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v76, 4uLL, 1uLL);
      }
      v73 = v75;
      v74 = 0x800000000;
      switch(v33)
      {
        case 0:
        case 3:
          if (!v32 || mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v63) != 8)
            goto LABEL_87;
          mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&__p, v63, 0);
          mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v63, &v60);
          break;
        case 1:
LABEL_87:
          llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v73, 8uLL, 0);
          goto LABEL_88;
        case 2:
        case 4:
          v47 = 1;
          goto LABEL_90;
        default:
LABEL_88:
          v47 = 0;
LABEL_90:
          __p = v72;
          v71 = 0x400000000;
          ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
          v50 = v49;
          v51 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
          v60 = v79;
          v61 = v80;
          v58 = v76;
          v59 = v77;
          v57[0] = v73;
          v57[1] = (_QWORD *)v74;
          if (mlir::mps::inferStencilShape((int)v51, v52, ArgAttrsAttr, v50, v51, v52, (unint64_t **)&v60, (_QWORD **)&v58, v57, v47, (uint64_t)&__p))
          {
            v53 = __p;
            v54 = v71;
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
            v56 = mlir::RankedTensorType::get((uint64_t)v53, v54, OperandRange, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
            v36 = 1;
          }
          else
          {
            v36 = 0;
          }
          if (__p != v72)
            free(__p);
          if (v73 != v75)
            free(v73);
          if (v76 != v78)
            free(v76);
          if (v79 != v81)
            free(v79);
          return v36;
      }
      while (1)
      {
        v46 = __p == v60 && v71 == v61;
        if (v46 && v72[0] == v62)
          goto LABEL_88;
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&__p, (llvm::APInt *)&v58);
        if (v59 > 0x40)
        {
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v73, *(_QWORD *)v58);
          if (v59 < 0x41)
            goto LABEL_74;
        }
        else
        {
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v73, (uint64_t)((_QWORD)v58 << -(uint64_t)v59) >> -(uint64_t)v59);
          if (v59 < 0x41)
            goto LABEL_74;
        }
        if (v58)
          operator delete[](v58);
LABEL_74:
        ++v72[0];
      }
    }
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68);
    v39 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v39);
    return 1;
  }
LABEL_21:
  v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v28;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::StencilOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  _QWORD **v47;
  _QWORD **v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  const char *v66;
  uint64_t v67;
  __int16 v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t OperandRange;
  uint64_t Value;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = (const char *)a1[3];
  v3 = (const char *)a1[4];
  v6 = (const char *)a1[5];
  v5 = (const char *)a1[6];
  v7 = (const char *)a1[10];
  if (!v6)
    goto LABEL_105;
  v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
  v66 = v6;
  v67 = v8;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
  v10 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  Value = (uint64_t)v10;
  v74 = Type;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
  v82 = 4;
  if (v12 != 1)
    goto LABEL_28;
  if (*ArgAttrsAttr == v82
    && (v69 = v6,
        v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
        v71 = v13,
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
        mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)))
  {
LABEL_105:
    if (!v7)
      goto LABEL_106;
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v7 + 8);
    v66 = v7;
    v67 = v14;
    v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
    v16 = v15;
    if (v15)
      v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
    Value = (uint64_t)v16;
    v74 = v15;
    v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
    v82 = 4;
    if (v18 != 1)
      goto LABEL_42;
    if (*v17 == v82
      && (v69 = v7,
          v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
          v71 = v19,
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_106:
      if (!v4)
        goto LABEL_107;
      v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
      v66 = v4;
      v67 = v20;
      v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
      v22 = v21;
      if (v21)
        v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
      Value = (uint64_t)v22;
      v74 = v21;
      v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
      v82 = 4;
      if (v24 != 1)
        goto LABEL_56;
      if (*v23 == v82
        && (v69 = v4,
            v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
            v71 = v25,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_107:
        if (!v3)
          goto LABEL_108;
        v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v3 + 8);
        v66 = v3;
        v67 = v26;
        v27 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
        v28 = v27;
        if (v27)
          v27 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
        Value = (uint64_t)v28;
        v74 = v27;
        v29 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
        v82 = 8;
        if (v30 != 1)
          goto LABEL_70;
        if (*v29 == v82
          && (v69 = v3,
              v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
              v71 = v31,
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_108:
          if (!v5)
            return 1;
          v66 = v5;
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
          if (mlir::Type::isF32((mlir::Type *)&Value))
            return 1;
          v66 = "'mps.stencil' op attribute 'paddingConstant' failed to satisfy constraint: 32-bit float attribute";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
          v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v81)
          {
            v59 = (_QWORD **)__p;
            if (__p)
            {
              v60 = v80;
              v61 = __p;
              if (v80 != __p)
              {
                do
                  v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                v61 = __p;
              }
              v80 = v59;
              operator delete(v61);
            }
            v36 = v77;
            if (!v77)
              goto LABEL_100;
            v62 = v78;
            v38 = v77;
            if (v78 == v77)
            {
LABEL_99:
              v78 = v36;
              operator delete(v38);
LABEL_100:
              if (v75 != &v76)
                free(v75);
              return v32;
            }
            do
            {
              v64 = (void *)*--v62;
              v63 = v64;
              *v62 = 0;
              if (v64)
                operator delete[](v63);
            }
            while (v62 != v36);
LABEL_98:
            v38 = v77;
            goto LABEL_99;
          }
        }
        else
        {
LABEL_70:
          v66 = "'mps.stencil' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attribute of shape {8}";
          v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
          v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          if (v81)
          {
            v53 = (_QWORD **)__p;
            if (__p)
            {
              v54 = v80;
              v55 = __p;
              if (v80 != __p)
              {
                do
                  v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                while (v54 != v53);
                v55 = __p;
              }
              v80 = v53;
              operator delete(v55);
            }
            v36 = v77;
            if (!v77)
              goto LABEL_100;
            v56 = v78;
            v38 = v77;
            if (v78 == v77)
              goto LABEL_99;
            do
            {
              v58 = (void *)*--v56;
              v57 = v58;
              *v56 = 0;
              if (v58)
                operator delete[](v57);
            }
            while (v56 != v36);
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_56:
        v66 = "'mps.stencil' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
        v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        if (v81)
        {
          v47 = (_QWORD **)__p;
          if (__p)
          {
            v48 = v80;
            v49 = __p;
            if (v80 != __p)
            {
              do
                v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
              while (v48 != v47);
              v49 = __p;
            }
            v80 = v47;
            operator delete(v49);
          }
          v36 = v77;
          if (!v77)
            goto LABEL_100;
          v50 = v78;
          v38 = v77;
          if (v78 == v77)
            goto LABEL_99;
          do
          {
            v52 = (void *)*--v50;
            v51 = v52;
            *v50 = 0;
            if (v52)
              operator delete[](v51);
          }
          while (v50 != v36);
          goto LABEL_98;
        }
      }
    }
    else
    {
LABEL_42:
      v66 = "'mps.stencil' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
      v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      if (v81)
      {
        v41 = (_QWORD **)__p;
        if (__p)
        {
          v42 = v80;
          v43 = __p;
          if (v80 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v80 = v41;
          operator delete(v43);
        }
        v36 = v77;
        if (!v77)
          goto LABEL_100;
        v44 = v78;
        v38 = v77;
        if (v78 == v77)
          goto LABEL_99;
        do
        {
          v46 = (void *)*--v44;
          v45 = v46;
          *v44 = 0;
          if (v46)
            operator delete[](v45);
        }
        while (v44 != v36);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_28:
    v66 = "'mps.stencil' op attribute 'offsets' failed to satisfy constraint: si64 elements attribute of shape {4}";
    v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
    v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    if (v81)
    {
      v33 = (_QWORD **)__p;
      if (__p)
      {
        v34 = v80;
        v35 = __p;
        if (v80 != __p)
        {
          do
            v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          v35 = __p;
        }
        v80 = v33;
        operator delete(v35);
      }
      v36 = v77;
      if (!v77)
        goto LABEL_100;
      v37 = v78;
      v38 = v77;
      if (v78 == v77)
        goto LABEL_99;
      do
      {
        v40 = (void *)*--v37;
        v39 = v40;
        *v37 = 0;
        if (v40)
          operator delete[](v39);
      }
      while (v37 != v36);
      goto LABEL_98;
    }
  }
  return v32;
}

_QWORD *mlir::DenseIntElementsAttr::end@<X0>(mlir::DenseIntElementsAttr *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t NumElements;

  v3 = *(_QWORD *)this;
  NumElements = mlir::DenseElementsAttr::getNumElements(this);
  return mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(a2, v3, NumElements);
}

uint64_t mlir::mps::StencilOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const void **v48[4];
  __int16 v49;
  _QWORD v50[3];
  void *v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  void *__p;
  _QWORD **v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v2 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v2 = 0;
  v3 = *(_DWORD *)(v2[5] + 8);
  if (v3)
  {
    if (v3 != 3)
      goto LABEL_8;
    if (!v2[2])
    {
      v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
      if (v50[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
      if (!v57)
        return v13;
      v34 = (_QWORD **)__p;
      if (__p)
      {
        v35 = v56;
        v36 = __p;
        if (v56 != __p)
        {
          do
            v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          v36 = __p;
        }
        v56 = v34;
        operator delete(v36);
      }
      v17 = v53;
      if (!v53)
        goto LABEL_76;
      v37 = v54;
      v19 = v53;
      if (v54 == v53)
        goto LABEL_75;
      do
      {
        v39 = (void *)*--v37;
        v38 = v39;
        *v37 = 0;
        if (v39)
          operator delete[](v38);
      }
      while (v37 != v17);
LABEL_74:
      v19 = v53;
LABEL_75:
      v54 = v17;
      operator delete(v19);
      goto LABEL_76;
    }
  }
  if (!v2[1])
  {
                            " MPS_EXPLICIT or MPS_EXPLICIT_OFFSET.";
    v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    if (!v57)
      return v13;
    v22 = (_QWORD **)__p;
    if (__p)
    {
      v23 = v56;
      v24 = __p;
      if (v56 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v56 = v22;
      operator delete(v24);
    }
    v17 = v53;
    if (v53)
    {
      v25 = v54;
      v19 = v53;
      if (v54 == v53)
        goto LABEL_75;
      do
      {
        v27 = (void *)*--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          operator delete[](v26);
      }
      while (v25 != v17);
      goto LABEL_74;
    }
    goto LABEL_76;
  }
LABEL_8:
  v4 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v4 + 8))
  {
    v46 = 0;
    v47 = 0;
    goto LABEL_17;
  }
  v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v4 + 8);
  v46 = v4;
  v47 = v5;
  if (!v4)
  {
LABEL_17:
    v48[0] = (const void **)"invalid type for input.";
    v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    if (!v57)
      return v13;
    v14 = (_QWORD **)__p;
    if (__p)
    {
      v15 = v56;
      v16 = __p;
      if (v56 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v56 = v14;
      operator delete(v16);
    }
    v17 = v53;
    if (!v53)
      goto LABEL_76;
    v18 = v54;
    v19 = v53;
    if (v54 == v53)
      goto LABEL_75;
    do
    {
      v21 = (void *)*--v18;
      v20 = v21;
      *v18 = 0;
      if (v21)
        operator delete[](v20);
    }
    while (v18 != v17);
    goto LABEL_74;
  }
  v6 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v6 + 8))
  {
    v44 = 0;
    v45 = 0;
LABEL_46:
    v48[0] = (const void **)"invalid type for weights.";
    v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    if (!v57)
      return v13;
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v56;
      v30 = __p;
      if (v56 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v56 = v28;
      operator delete(v30);
    }
    v17 = v53;
    if (v53)
    {
      v31 = v54;
      v19 = v53;
      if (v54 == v53)
        goto LABEL_75;
      do
      {
        v33 = (void *)*--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          operator delete[](v32);
      }
      while (v31 != v17);
      goto LABEL_74;
    }
LABEL_76:
    if (v51 != &v52)
      free(v51);
    return v13;
  }
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v6 + 8);
  v44 = v6;
  v45 = v7;
  if (!v6)
    goto LABEL_46;
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
    v9 = v8;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
    v42 = v10;
    v43 = v9;
    if (v9 <= 3)
    {
      v48[0] = (const void **)"stencil input rank ";
      v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      v11 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v50, (uint64_t *)&v43);
      v12 = " must be >= 4 ";
LABEL_82:
      v41 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v11, v12);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v41);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v50);
      return v13;
    }
    if (v10 != 4)
    {
      v48[0] = (const void **)"stencil weights rank ";
      v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      v11 = mlir::InFlightDiagnostic::operator<<<unsigned long>((uint64_t)v50, &v42);
      v12 = " must be == 4 ";
      goto LABEL_82;
    }
  }
  return 1;
}

uint64_t mlir::mps::StencilOp::getPaddingStyle(mlir::mps::StencilOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(unsigned int *)(*(_QWORD *)(v1 + 40) + 8);
}

uint64_t mlir::mps::StencilOp::getOffsets(mlir::mps::StencilOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 16);
}

uint64_t mlir::mps::StencilOp::getExplicitPadding(mlir::mps::StencilOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 8);
}

uint64_t mlir::mps::CropResizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t Context;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  void *v35;
  unsigned int UInt;
  void *v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t ElementTypeOrSelf;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t Value;
  void *v56;
  uint64_t v57;
  _BYTE v58[64];
  uint64_t v59;
  char v60[8];
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v70 = a4;
  v71 = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = a7[2];
    v17 = *((_QWORD *)a7 + 6);
  }
  else
  {
    v17 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  v59 = a6;
  v60[0] = 0;
  v61 = 0;
  v62 = v14;
  v63 = v15;
  v64 = v16;
  v65 = v17;
  v66 = a9;
  v18 = a5;
  v67 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(v60, "mps.crop_resize", 15, Context);
    v61 = 1;
    v18 = v71;
  }
  v68 = a4;
  v69 = a5;
  if (v18 >= 2
    && (v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::CropResizeOpAdaptor::verify(&v59, v20)))
  {
    v21 = mlir::ValueRange::dereference_iterator(&v70, 0);
    v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v24 = (_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v24 = 0;
    }
    v25 = mlir::ValueRange::dereference_iterator(&v70, 1);
    v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      v28 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v28 = 0;
    }
    if (v24)
      v29 = v28 == 0;
    else
      v29 = 1;
    if (!v29)
    {
      v34 = (void *)v64;
      if (!(_QWORD)v64)
        goto LABEL_39;
      v35 = *(void **)(*(_QWORD *)v64 + 136);
      if (v35 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v34 = 0;
      v56 = v34;
      if (v35 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
        && (Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56),
            mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
      {
        UInt = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v56);
      }
      else
      {
LABEL_39:
        UInt = 1;
      }
      v37 = (void *)*((_QWORD *)&v64 + 1);
      if (!*((_QWORD *)&v64 + 1))
        goto LABEL_46;
      v38 = *(void **)(**((_QWORD **)&v64 + 1) + 136);
      if (v38 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v37 = 0;
      v56 = v37;
      if (v38 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
        && (Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56),
            mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
      {
        v39 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v56);
      }
      else
      {
LABEL_46:
        v39 = 1;
      }
      Value = (uint64_t)v24;
      v56 = v58;
      v57 = 0x800000000;
      v54 = v28;
      if (mlir::TensorType::hasRank((mlir::TensorType *)&Value)
        && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value), v40 == 4))
      {
        v41 = (unint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
        v42 = *v41;
        v43 = v41[1];
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v54))
        {
LABEL_50:
          v44 = 0x8000000000000000;
          v45 = 0x8000000000000000;
LABEL_57:
          v49 = v57;
          if ((_DWORD)v57 != 5)
          {
            if (v57 <= 5)
            {
              if (HIDWORD(v57) > 4
                || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, 5uLL, 8),
                    v49 = v57,
                    (_DWORD)v57 != 5))
              {
                bzero((char *)v56 + 8 * v49, 40 - 8 * v49);
              }
            }
            LODWORD(v57) = 5;
          }
          v50 = v56;
          *(_QWORD *)v56 = v44;
          v50[1] = v45;
          v50[2] = v43;
          v50[3] = UInt;
          v50[4] = v39;
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24);
          v52 = mlir::RankedTensorType::get((uint64_t)v50, 5, ElementTypeOrSelf, 0);
          v53 = *(unsigned int *)(a11 + 8);
          if (v53 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v53 + 1, 8);
            LODWORD(v53) = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v53) = v52;
          ++*(_DWORD *)(a11 + 8);
          if (v56 != v58)
            free(v56);
          return 1;
        }
      }
      else
      {
        v42 = 0x8000000000000000;
        v43 = 0x8000000000000000;
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v54))
          goto LABEL_50;
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      v45 = 0x8000000000000000;
      v44 = 0x8000000000000000;
      if (v46 == 2)
      {
        v47 = (unint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
        v44 = *v47;
        v48 = v47[1];
        if (v48 != 0x8000000000000000)
        {
          if (v48 == 4)
            v45 = v42;
          else
            v45 = 1;
        }
      }
      goto LABEL_57;
    }
    v30 = mlir::getElementTypeOrSelf(v24);
  }
  else
  {
    v30 = mlir::Float32Type::get(this, a2);
  }
  v31 = mlir::UnrankedTensorType::get(v30);
  v32 = *(unsigned int *)(a11 + 8);
  if (v32 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v32) = v31;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::CropResizeOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[3];
  void *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *__p;
  _QWORD **v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1[8];
  v4 = a1[9];
  if (a1[7]
    && (v27[0] = a1[7],
        v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
        !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 32)))
  {
    v27[0] = "'mps.crop_resize' op attribute 'resize_height' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v6 = (_QWORD **)__p;
      if (__p)
      {
        v7 = v35;
        v8 = __p;
        if (v35 != __p)
        {
          do
            v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          v8 = __p;
        }
        v35 = v6;
        operator delete(v8);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v10 = v33;
      v11 = v32;
      if (v33 == v32)
        goto LABEL_51;
      do
      {
        v13 = (void *)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          operator delete[](v12);
      }
      while (v10 != v9);
      goto LABEL_50;
    }
  }
  else if (v3
         && (v27[0] = v3,
             v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
             !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 32)))
  {
    v27[0] = "'mps.crop_resize' op attribute 'resize_width' failed to satisfy constraint: 32-bit unsigned integer attribute";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v35;
        v16 = __p;
        if (v35 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v35 = v14;
        operator delete(v16);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v17 = v33;
      v11 = v32;
      if (v33 == v32)
        goto LABEL_51;
      do
      {
        v19 = (void *)*--v17;
        v18 = v19;
        *v17 = 0;
        if (v19)
          operator delete[](v18);
      }
      while (v17 != v9);
      goto LABEL_50;
    }
  }
  else
  {
    if (!v4)
      return 1;
    v27[0] = v4;
    v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27);
    if (mlir::Type::isF32((mlir::Type *)v29))
      return 1;
    v27[0] = "'mps.crop_resize' op attribute 'spatial_scale' failed to satisfy constraint: 32-bit float attribute";
    v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    if (v36)
    {
      v20 = (_QWORD **)__p;
      if (__p)
      {
        v21 = v35;
        v22 = __p;
        if (v35 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v35 = v20;
        operator delete(v22);
      }
      v9 = v32;
      if (!v32)
        goto LABEL_52;
      v23 = v33;
      v11 = v32;
      if (v33 == v32)
      {
LABEL_51:
        v33 = v9;
        operator delete(v11);
LABEL_52:
        if (v30 != &v31)
          free(v30);
        return v5;
      }
      do
      {
        v25 = (void *)*--v23;
        v24 = v25;
        *v23 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v23 != v9);
LABEL_50:
      v11 = v32;
      goto LABEL_51;
    }
  }
  return v5;
}

uint64_t mlir::mps::CropResizeOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  BOOL v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 hasRank;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  const void **v47[4];
  __int16 v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[3];
  void *v52;
  _BYTE v53[96];
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(void **)(*(_QWORD *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v3 = 0;
  }
  v50 = v3;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v6 = 0;
  }
  v49 = v6;
  if (v3)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v47[0] = (const void **)"cannot crop_resize a non-tensor type";
    v48 = 259;
    mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (v58)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v57;
        v13 = __p;
        if (v57 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v57 = v11;
        operator delete(v13);
      }
      v14 = v54;
      if (!v54)
        goto LABEL_70;
      v15 = v55;
      v16 = v54;
      if (v55 == v54)
        goto LABEL_69;
      do
      {
        v18 = (void *)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v15 != v14);
      goto LABEL_68;
    }
  }
  else
  {
    hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v50);
    if (hasRank && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50), v20 != 4))
    {
      v47[0] = (const void **)"images tensor must have shape [N, C, H, W]";
      v48 = 259;
      mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
      if (v51[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
      if (v58)
      {
        v26 = (_QWORD **)__p;
        if (__p)
        {
          v27 = v57;
          v28 = __p;
          if (v57 != __p)
          {
            do
              v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            v28 = __p;
          }
          v57 = v26;
          operator delete(v28);
        }
        v14 = v54;
        if (!v54)
          goto LABEL_70;
        v29 = v55;
        v16 = v54;
        if (v55 == v54)
          goto LABEL_69;
        do
        {
          v31 = (void *)*--v29;
          v30 = v31;
          *v29 = 0;
          if (v31)
            operator delete[](v30);
        }
        while (v29 != v14);
        goto LABEL_68;
      }
    }
    else
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v49))
        return 1;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49);
      if (v21 == 2)
      {
        Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49);
        v24 = *(_QWORD *)(Value + 8 * v23 - 8);
        if ((unint64_t)(v24 - 4) >= 2 && v24 != 0x8000000000000000)
        {
          v47[0] = (const void **)"boxes tensor must have shape [B, 4] or [B, 5]";
          v48 = 259;
          mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
          if (v51[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
          if (!v58)
            return v10;
          v39 = (_QWORD **)__p;
          if (__p)
          {
            v40 = v57;
            v41 = __p;
            if (v57 != __p)
            {
              do
                v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
              while (v40 != v39);
              v41 = __p;
            }
            v57 = v39;
            operator delete(v41);
          }
          v42 = v54;
          if (v54)
          {
            v43 = v55;
            v44 = v54;
            if (v55 != v54)
            {
              do
              {
                v46 = (void *)*--v43;
                v45 = v46;
                *v43 = 0;
                if (v46)
                  operator delete[](v45);
              }
              while (v43 != v42);
              v44 = v54;
            }
            v55 = v42;
            operator delete(v44);
          }
          if (v52 != v53)
            free(v52);
          if ((unint64_t)(v24 - 4) >= 2 && v24 != 0x8000000000000000)
            return v10;
        }
        return 1;
      }
      v47[0] = (const void **)"boxes tensor must have shape [B, 4] or [B, 5]";
      v48 = 259;
      mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
      v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
      if (v51[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
      if (v58)
      {
        v32 = (_QWORD **)__p;
        if (__p)
        {
          v33 = v57;
          v34 = __p;
          if (v57 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v57 = v32;
          operator delete(v34);
        }
        v14 = v54;
        if (!v54)
          goto LABEL_70;
        v35 = v55;
        v16 = v54;
        if (v55 == v54)
        {
LABEL_69:
          v55 = v14;
          operator delete(v16);
LABEL_70:
          if (v52 != v53)
            free(v52);
          return v10;
        }
        do
        {
          v37 = (void *)*--v35;
          v36 = v37;
          *v35 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v35 != v14);
LABEL_68:
        v16 = v54;
        goto LABEL_69;
      }
    }
  }
  return v10;
}

uint64_t mlir::mps::LPNormOp::verify(uint64_t **this)
{
  void *v2;
  uint64_t DefiningOp;
  int64_t SingleInt;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char PositiveAxes;
  void *v20;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t **v31[4];
  _QWORD v32[2];
  _QWORD *v33;
  uint64_t ***v34;
  __int16 v35;
  _QWORD v36[2];
  int64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[32];
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD **v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)((*this)[9] + 56);
  v47 = 0;
  v48 = 0;
  v31[0] = (uint64_t **)&v47;
  v39 = v2;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v31, DefiningOp))
  {
    SingleInt = mlir::getSingleIntValue<long long>(v47, v48);
    v37 = SingleInt;
    v38 = v5;
    if ((_BYTE)v5 && SingleInt <= 0)
    {
      v39 = "failed: exponent must be positive, but got {0}";
      v40 = 46;
      v41[0] = &v43;
      v41[1] = 1;
      v42[0] = &off_1E0E23E00;
      v42[1] = &v37;
      v43 = v42;
      LOWORD(v32[0]) = 263;
      v31[0] = (uint64_t **)&v39;
      mlir::OpState::emitOpError(this, (const void ***)v31, (uint64_t)&v47);
      v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
      if (v47)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
      if (!v55)
        return v6;
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v54;
        v9 = __p;
        if (v54 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v54 = v7;
        operator delete(v9);
      }
      v10 = v51;
      if (v51)
      {
        v11 = v52;
        v12 = v51;
        if (v52 != v51)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v51;
        }
        v52 = v10;
        operator delete(v12);
      }
      v20 = v49;
      if (v49 == v50)
        return v6;
LABEL_32:
      free(v20);
      return v6;
    }
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v15 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v15)
    v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  else
    v16 = 0;
  v36[0] = v15;
  v36[1] = v16;
  v44 = v46;
  v45 = 0x400000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36)
    || !mlir::matchConstantWithIntVector<long long>(*(_QWORD *)((*this)[9] + 88), (uint64_t)&v44))
  {
    goto LABEL_30;
  }
  v39 = v41;
  v40 = 0x600000000;
  v6 = (uint64_t)v44;
  v17 = v45;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
  if (!PositiveAxes)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
    v31[0] = (uint64_t **)"failed: found an axis out of bounds for input rank {0}";
    v31[1] = (uint64_t **)54;
    v31[2] = &v33;
    v31[3] = (uint64_t **)1;
    v32[0] = &off_1E0E23EC0;
    v32[1] = v22;
    v33 = v32;
    v34 = v31;
    v35 = 263;
    mlir::OpState::emitOpError(this, (const void ***)&v34, (uint64_t)&v47);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
    if (v47)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
    if (v55)
    {
      v23 = (_QWORD **)__p;
      if (__p)
      {
        v24 = v54;
        v25 = __p;
        if (v54 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v54 = v23;
        operator delete(v25);
      }
      v26 = v51;
      if (v51)
      {
        v27 = v52;
        v28 = v51;
        if (v52 != v51)
        {
          do
          {
            v30 = (void *)*--v27;
            v29 = v30;
            *v27 = 0;
            if (v30)
              operator delete[](v29);
          }
          while (v27 != v26);
          v28 = v51;
        }
        v52 = v26;
        operator delete(v28);
      }
      if (v49 != v50)
        free(v49);
    }
  }
  if (v39 != v41)
    free(v39);
  if (PositiveAxes)
LABEL_30:
    v6 = 1;
  v20 = v44;
  if (v44 != v46)
    goto LABEL_32;
  return v6;
}

uint64_t mlir::mps::MatrixDecompositionLUOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t ArgAttrsAttr;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[32];
  void *v51;
  uint64_t v52;
  _BYTE v53[32];
  _QWORD v54[4];

  v54[2] = *MEMORY[0x1E0C80C00];
  v54[0] = a4;
  v54[1] = a5;
  if (a5 != 1)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v51 = a4;
  v52 = 1;
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned int *)(a11 + 8);
  if (v15 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v15) = v14;
  ++*(_DWORD *)(a11 + 8);
  v16 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v54, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v16 + 8)
    || (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v16 + 8),
        *(_UNKNOWN **)(*(_QWORD *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id))
  {
    v23 = mlir::IntegerType::get(a1, 0x20u, 2u);
    v24 = mlir::UnrankedTensorType::get(v23);
    v25 = *(unsigned int *)(a11 + 8);
    if (v25 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
    ++*(_DWORD *)(a11 + 8);
    v26 = mlir::IntegerType::get(a1, 0x20u, 1u);
    v27 = mlir::UnrankedTensorType::get(v26);
    v28 = *(unsigned int *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      LODWORD(v28) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v27;
    ++*(_DWORD *)(a11 + 8);
  }
  else
  {
    v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v54, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
    {
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      v51 = v17;
      v52 = v18;
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
      v21 = v20 - 1;
      if (v20 <= 1)
        return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
    }
    else
    {
      v51 = 0;
      v52 = 0;
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
      v21 = v20 - 1;
      if (v20 <= 1)
        return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
    }
    v29 = (const void *)ArgAttrsAttr;
    v30 = v20 - 2;
    if (*(_QWORD *)(ArgAttrsAttr + 8 * (v20 - 2)) >= *(_QWORD *)(ArgAttrsAttr + 8 * v21))
      v31 = *(_QWORD *)(ArgAttrsAttr + 8 * v21);
    else
      v31 = *(_QWORD *)(ArgAttrsAttr + 8 * (v20 - 2));
    v32 = 8 * v20;
    v33 = v53;
    v51 = v53;
    v52 = 0x400000000;
    v47 = (uint64_t)(8 * v20) >> 3;
    if (8 * v20 < 0x21)
    {
      v34 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, (uint64_t)(8 * v20) >> 3, 8);
      v34 = v52;
      v33 = v51;
    }
    memcpy(&v33[8 * v34], v29, v32);
    LODWORD(v52) = v52 + (v32 >> 3);
    v35 = v52;
    v36 = v51;
    *((_QWORD *)v51 + v30) = 1;
    v36[v21] = v31;
    v37 = mlir::IntegerType::get(a1, 0x20u, 2u);
    v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, v37, 0);
    v39 = *(unsigned int *)(a11 + 8);
    if (v39 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v39) = v38;
    ++*(_DWORD *)(a11 + 8);
    v48 = v50;
    v49 = 0x400000000;
    if (v32 < 0x21)
    {
      v40 = 0;
      v41 = v50;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v47, 8);
      v40 = v49;
      v41 = v48;
    }
    memcpy(&v41[8 * v40], v29, v32);
    LODWORD(v49) = v49 + (v32 >> 3);
    v42 = v49;
    v43 = v48;
    *(int64x2_t *)((char *)v48 + 8 * v30) = vdupq_n_s64(1uLL);
    v44 = mlir::IntegerType::get(a1, 0x20u, 1u);
    v45 = mlir::RankedTensorType::get((uint64_t)v43, v42, v44, 0);
    v46 = *(unsigned int *)(a11 + 8);
    if (v46 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v46) = v45;
    ++*(_DWORD *)(a11 + 8);
    if (v48 != v50)
      free(v48);
    if (v51 != v53)
      free(v51);
  }
  return 1;
}

uint64_t mlir::mps::MatrixSolverLUOp::verify(uint64_t **this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  _QWORD *v23[4];
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v2 + 8))
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v2 + 8);
  else
    v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8))
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v4 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v4 + 8);
    v5 = 1;
    if (!v2)
      return v5;
  }
  else
  {
    v4 = 0;
    v5 = 1;
    if (!v2)
      return v5;
  }
  if (v3
    && *(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4
    && *(_UNKNOWN **)(*(_QWORD *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v23[0] = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    v26 = v6;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    v9 = v8;
    v23[0] = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    v26 = v10;
    v11 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    v13 = v12;
    v23[0] = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
    v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    v26 = v14;
    v15 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    if (v9 == v16 && v9 == v13)
    {
      v17 = v9 - 2;
      if (v9 == 2)
        return 1;
      v5 = 1;
      while (1)
      {
        v19 = *v15++;
        v18 = v19;
        v20 = *ArgAttrsAttr++;
        if (v18 != v20 || v18 != *v11)
          break;
        ++v11;
        if (!--v17)
          return v5;
      }
      v21 = "batch dims of rhs and lu should match";
    }
    else
    {
      v21 = "rank for lu matrix and rhs should match";
    }
    v23[0] = v21;
    v24 = 259;
    mlir::OpState::emitOpError(this, (const void ***)v23, (uint64_t)&v25);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v25);
  }
  return v5;
}

uint64_t mlir::mps::MatrixSolverLUOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t OperandRange;
  uint64_t v21;
  uint64_t v22;
  uint64_t ArgAttrsAttr;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v40[0] = a4;
  v40[1] = a5;
  if (a5 != 3)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v13 + 8))
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v13 + 8);
  else
    v13 = 0;
  v15 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v40, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v15 + 8))
  {
    v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v15 + 8);
    v35 = v15;
    v36 = v16;
    if (!v13)
      goto LABEL_17;
  }
  else
  {
    v15 = 0;
    v35 = 0;
    v36 = 0;
    if (!v13)
    {
LABEL_17:
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      v21 = mlir::UnrankedTensorType::get(OperandRange);
      v22 = *(unsigned int *)(a11 + 8);
      if (v22 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
        LODWORD(v22) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v22) = v21;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  v17 = *(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
     || v15 == 0;
  if (v17 || *(_UNKNOWN **)(*(_QWORD *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_17;
  v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  if (v19)
    v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  else
    v18 = 0;
  v37 = v18;
  v38 = v19;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
  v25 = v24;
  v26 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v40, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
  {
    v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
    v37 = v26;
    v38 = v27;
    v28 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
    if (v25 < 2)
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v28 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
    if (v25 < 2)
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
  }
  if (v29 > 1)
  {
    v30 = *(_QWORD *)(ArgAttrsAttr + 8 * v25 - 8);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v37, v28, &v28[8 * v29]);
    v31 = v38;
    v32 = v37;
    *((_QWORD *)v37 + v38 - 2) = v30;
    v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
    v34 = mlir::RankedTensorType::get((uint64_t)v32, v31, v33, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v34);
    if (v37 != &v39)
      free(v37);
    return 1;
  }
  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
}

uint64_t mlir::mps::MatrixInverseOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v2 + 8))
    return 1;
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v2 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    return 1;
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  if (v4)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  else
    v3 = 0;
  v22[0] = v3;
  v22[1] = v4;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  v9 = ArgAttrsAttr + 8 * v8;
  v10 = *(_QWORD *)(v9 - 16);
  v5 = 1;
  if (v10 != 0x8000000000000000)
  {
    v11 = *(_QWORD *)(v9 - 8);
    if (v11 != 0x8000000000000000 && v11 != v10)
    {
      v20 = (const void **)"inverse op supported only for square matrix";
      v21 = 259;
      mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
      v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
      if (v22[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
      if (v29)
      {
        v12 = (_QWORD **)__p;
        if (__p)
        {
          v13 = v28;
          v14 = __p;
          if (v28 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v28 = v12;
          operator delete(v14);
        }
        v15 = v25;
        if (v25)
        {
          v16 = v26;
          v17 = v25;
          if (v26 != v25)
          {
            do
            {
              v19 = (void *)*--v16;
              v18 = v19;
              *v16 = 0;
              if (v19)
                operator delete[](v18);
            }
            while (v16 != v15);
            v17 = v25;
          }
          v26 = v15;
          operator delete(v17);
        }
        if (v23 != &v24)
          free(v23);
      }
    }
  }
  return v5;
}

uint64_t mlir::mps::MatrixInverseOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v19 = a4;
  v20 = a5;
  if (a5 != 1)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v13 = 0;
  v18 = v13;
  if (v13)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
    if (v14 <= 1)
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
  }
  v21[0] = v19;
  v21[1] = v20;
  if (!v20)
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  v16 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned int *)(a11 + 8);
  if (v17 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v17) = v16;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PruningOp::verify(uint64_t **this)
{
  unint64_t v2;
  float v3;
  void *v4;
  llvm::APFloatBase *v5;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const void **v18[4];
  __int16 v19;
  void *v20;
  _QWORD v21[2];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD **v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v18[0] = *(const void ***)(v2 + 16);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v18, (uint64_t)&v20);
  v3 = llvm::APFloat::convertToFloat(&v20);
  v4 = (void *)v21[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v4)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (v3 < 0.0 || v3 > 1.0)
      goto LABEL_8;
    return 1;
  }
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
  if (v3 >= 0.0 && v3 <= 1.0)
    return 1;
LABEL_8:
  v19 = 259;
  mlir::OpState::emitOpError(this, v18, (uint64_t)&v20);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  if (v28)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v27;
      v10 = __p;
      if (v27 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v27 = v8;
      operator delete(v10);
    }
    v11 = v24;
    if (v24)
    {
      v12 = v25;
      v13 = v24;
      if (v25 != v24)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v24;
      }
      v25 = v11;
      operator delete(v13);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v7;
}

llvm::detail::DoubleAPFloat *mlir::mps::PruningOp::getSparsity@<X0>(mlir::mps::PruningOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v4 = *(_QWORD *)(v2 + 16);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&v4, a2);
}

uint64_t mlir::mps::CreateTextureTensorOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  int v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void ***v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  uint64_t (**v38)(llvm::detail::format_adapter *__hidden);
  uint64_t *v39;
  void **v40;
  uint64_t (***v41)(llvm::detail::format_adapter *__hidden);
  const void **v42[4];
  __int16 v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD v46[2];
  _QWORD v47[3];
  void *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  v3 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  else
    v4 = 0;
  v46[0] = v3;
  v46[1] = v4;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v46);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v46))
    return 1;
  v6 = *(_QWORD *)(ArgAttrsAttr + 24);
  if (v6 == 0x8000000000000000)
    return 1;
  v9 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v9 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 8);
  v45 = v10;
  v44 = v6;
  if (v10 > 9)
    return 1;
  v11 = 1 << v10;
  if ((v11 & 0x24C) != 0)
  {
    if (v6 != 4)
    {
      v32 = "failed: expected a number of channels equal to 4 for pixel format {0}, but found {1}";
      v33 = 84;
      v34 = &v40;
      v35 = 2;
      v36 = &unk_1E0E23FB0;
      v37 = &v45;
      v38 = &off_1E0E23E00;
      v39 = &v44;
      v40 = &v36;
      v41 = &v38;
      v43 = 263;
      v42[0] = (const void **)&v32;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      if (v54)
      {
        v20 = (_QWORD **)__p;
        if (__p)
        {
          v21 = v53;
          v22 = __p;
          if (v53 != __p)
          {
            do
              v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
            while (v21 != v20);
            v22 = __p;
          }
          v53 = v20;
          operator delete(v22);
        }
        v15 = v50;
        if (!v50)
          goto LABEL_63;
        v23 = v51;
        v17 = v50;
        if (v51 == v50)
          goto LABEL_62;
        do
        {
          v25 = (void *)*--v23;
          v24 = v25;
          *v23 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v23 != v15);
        goto LABEL_61;
      }
      return v7;
    }
    return 1;
  }
  if ((v11 & 0x91) != 0)
  {
    if (v6 != 1)
    {
      v32 = "failed: expected a number of channels equal to 1 for pixel format {0}, but found {1}";
      v33 = 84;
      v34 = &v40;
      v35 = 2;
      v36 = &unk_1E0E23FB0;
      v37 = &v45;
      v38 = &off_1E0E23E00;
      v39 = &v44;
      v40 = &v36;
      v41 = &v38;
      v43 = 263;
      v42[0] = (const void **)&v32;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
      v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      if (v54)
      {
        v12 = (_QWORD **)__p;
        if (__p)
        {
          v13 = v53;
          v14 = __p;
          if (v53 != __p)
          {
            do
              v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            v14 = __p;
          }
          v53 = v12;
          operator delete(v14);
        }
        v15 = v50;
        if (!v50)
          goto LABEL_63;
        v16 = v51;
        v17 = v50;
        if (v51 == v50)
        {
LABEL_62:
          v51 = v15;
          operator delete(v17);
LABEL_63:
          if (v48 != &v49)
            free(v48);
          return v7;
        }
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
LABEL_61:
        v17 = v50;
        goto LABEL_62;
      }
      return v7;
    }
    return 1;
  }
  if (v6 == 2)
    return 1;
  v32 = "failed: expected a number of channels equal to 2 for pixel format {0}, but found {1}";
  v33 = 84;
  v34 = &v40;
  v35 = 2;
  v36 = &unk_1E0E23FB0;
  v37 = &v45;
  v38 = &off_1E0E23E00;
  v39 = &v44;
  v40 = &v36;
  v41 = &v38;
  v43 = 263;
  v42[0] = (const void **)&v32;
  mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  if (v54)
  {
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v53;
      v28 = __p;
      if (v53 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v53 = v26;
      operator delete(v28);
    }
    v15 = v50;
    if (!v50)
      goto LABEL_63;
    v29 = v51;
    v17 = v50;
    if (v51 == v50)
      goto LABEL_62;
    do
    {
      v31 = (void *)*--v29;
      v30 = v31;
      *v29 = 0;
      if (v31)
        operator delete[](v30);
    }
    while (v29 != v15);
    goto LABEL_61;
  }
  return v7;
}

BOOL mlir::mps::QuantizeOp::verify(uint64_t **this)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  const void **v30[4];
  __int16 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t **v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  void *__p;
  _QWORD **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v37 = *(void **)(v2 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v31 = 259;
    mlir::OpState::emitOpError(this, v30, (uint64_t)&v37);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
    if (v37)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    if (v46)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v45;
        v6 = __p;
        if (v45 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v45 = v4;
        operator delete(v6);
      }
      v7 = v42;
      if (!v42)
        goto LABEL_52;
      v8 = v43;
      v9 = v42;
      if (v43 == v42)
      {
LABEL_51:
        v43 = v7;
        operator delete(v9);
LABEL_52:
        if (v40 != &v41)
          free(v40);
        return v3;
      }
      do
      {
        v11 = (void *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          operator delete[](v10);
      }
      while (v8 != v7);
LABEL_50:
      v9 = v42;
      goto LABEL_51;
    }
    return v3;
  }
  v12 = *this;
  v36 = v12;
  v13 = *(_QWORD *)(v12[9] + 24);
  v30[0] = (const void **)v12[10];
  if (v30[0])
  {
    mlir::IntegerAttr::getValue(v30, (llvm::APInt *)&v37);
    if (v38 > 0x40)
    {
      LODWORD(v14) = *(_DWORD *)v37;
      operator delete[](v37);
    }
    else
    {
      v14 = (uint64_t)((_QWORD)v37 << -(uint64_t)v38) >> -(uint64_t)v38;
    }
    v15 = v14 | 0x100000000;
  }
  else
  {
    v15 = 0;
  }
  v35 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    v33 = 0;
    v34 = 0;
    return 1;
  }
  v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  v33 = v16;
  v34 = v17;
  if (!v16 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33))
    return 1;
  v32 = 0;
  if ((v15 & 0x100000000) == 0)
    goto LABEL_56;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
  if ((int)v15 < 0)
    v19 = v18;
  else
    v19 = 0;
  v20 = v19 + v15;
  if ((v20 & 0x80000000) == 0)
  {
    v21 = v20;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
    if (v21 <= v22)
    {
      v32 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33) + 8 * v21);
      v12 = v36;
LABEL_56:
      v37 = &v35;
      v38 = &v36;
      v39 = &v32;
      v40 = &v33;
    }
  }
  v31 = 259;
  mlir::OpState::emitOpError(&v36, v30, (uint64_t)&v37);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
  if (v37)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  if (v46)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v45;
      v25 = __p;
      if (v45 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v45 = v23;
      operator delete(v25);
    }
    v7 = v42;
    if (!v42)
      goto LABEL_52;
    v26 = v43;
    v9 = v42;
    if (v43 == v42)
      goto LABEL_51;
    do
    {
      v28 = (void *)*--v26;
      v27 = v28;
      *v26 = 0;
      if (v28)
        operator delete[](v27);
    }
    while (v26 != v7);
    goto LABEL_50;
  }
  return v3;
}

BOOL mlir::mps::DequantizeOp::verify(uint64_t **this)
{
  unint64_t v2;
  void *v3;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD **v36;
  _QWORD **v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  const void **v42[4];
  __int16 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void *__p;
  uint64_t **v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  _QWORD **v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  __p = *(void **)(v2 + 8);
  v3 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p) + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v43 = 259;
    mlir::OpState::emitOpError(this, v42, (uint64_t)&__p);
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    if (v58)
    {
      v36 = (_QWORD **)v56;
      if (v56)
      {
        v37 = v57;
        v38 = v56;
        if (v57 != v56)
        {
          do
            v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          v38 = v56;
        }
        v57 = v36;
        operator delete(v38);
      }
      v30 = v54;
      if (!v54)
        goto LABEL_92;
      v39 = v55;
      v32 = v54;
      if (v55 == v54)
      {
LABEL_91:
        v55 = v30;
        operator delete(v32);
LABEL_92:
        if (v52 != &v53)
          free(v52);
        return v26;
      }
      do
      {
        v41 = (void *)*--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v39 != v30);
LABEL_90:
      v32 = v54;
      goto LABEL_91;
    }
    return v26;
  }
  v15 = *this;
  v48 = v15;
  v16 = *(_QWORD *)(v15[9] + 24);
  v42[0] = (const void **)v15[10];
  if (v42[0])
  {
    mlir::IntegerAttr::getValue(v42, (llvm::APInt *)&__p);
    if (v50 > 0x40)
    {
      LODWORD(v17) = *(_DWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v17 = (uint64_t)((_QWORD)__p << -(uint64_t)v50) >> -(uint64_t)v50;
    }
    v18 = v17 | 0x100000000;
  }
  else
  {
    v18 = 0;
  }
  v47 = v18;
  v19 = (_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    v45 = 0;
    v46 = 0;
    return 1;
  }
  v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  v45 = v19;
  v46 = v20;
  if (!v19 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v45))
    return 1;
  v44 = 0;
  if ((v18 & 0x100000000) == 0)
  {
LABEL_72:
    __p = &v47;
    v50 = &v48;
    v51 = &v44;
    v52 = &v45;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  if ((int)v18 < 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22 + v18;
  if ((v23 & 0x80000000) == 0)
  {
    v24 = v23;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
    if (v24 <= v25)
    {
      v44 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45) + 8 * v24);
      v15 = v48;
      goto LABEL_72;
    }
  }
  v43 = 259;
  mlir::OpState::emitOpError(&v48, v42, (uint64_t)&__p);
  v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v58)
  {
    v27 = (_QWORD **)v56;
    if (v56)
    {
      v28 = v57;
      v29 = v56;
      if (v57 != v56)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = v56;
      }
      v57 = v27;
      operator delete(v29);
    }
    v30 = v54;
    if (!v54)
      goto LABEL_92;
    v31 = v55;
    v32 = v54;
    if (v55 == v54)
      goto LABEL_91;
    do
    {
      v34 = (void *)*--v31;
      v33 = v34;
      *v31 = 0;
      if (v34)
        operator delete[](v33);
    }
    while (v31 != v30);
    goto LABEL_90;
  }
  return v26;
}

void mlir::mps::DequantizeOp::downgradeToVersion(uint64_t **a1@<X0>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  const void **v22;
  __int16 v23;
  _QWORD v24[2];
  int v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v24[0] = &unk_1E0E4B858;
  v24[1] = 1;
  v25 = 1;
  if (!mlir::mps::DequantizeOp::hasNDParams((mlir::mps::DequantizeOp *)a1)
    || (v7 = a2[2]) != 0 && (v7 != 1 || a2[3] || a2[4]))
  {
    v8 = *((unsigned int *)v6 + 9);
    v9 = v6 - 2;
    if (!(_DWORD)v8)
      v9 = 0;
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v18[0] = "failed to downgrade: requested target version is {0}, but ND Params in only supported from version {1}";
    v18[1] = 102;
    v18[2] = v21;
    v18[3] = 2;
    v19[0] = &unk_1E0E23F50;
    v19[1] = a2;
    v20[0] = &unk_1E0E23FE0;
    v20[1] = v24;
    v21[0] = v19;
    v21[1] = v20;
    v23 = 263;
    v22 = (const void **)v18;
    mlir::OpState::emitOpError(a1, &v22, (uint64_t)v26);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v10 = (_QWORD **)__p;
      if (__p)
      {
        v11 = v32;
        v12 = __p;
        if (v32 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v32 = v10;
        operator delete(v12);
      }
      v13 = v29;
      if (v29)
      {
        v14 = v30;
        v15 = v29;
        if (v30 != v29)
        {
          do
          {
            v17 = (void *)*--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              operator delete[](v16);
          }
          while (v14 != v13);
          v15 = v29;
        }
        v30 = v13;
        operator delete(v15);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
}

uint64_t mlir::mps::DequantizeOp::hasNDParams(mlir::mps::DequantizeOp *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD **)(*(_QWORD *)this + 72);
  v2 = v1[11];
  v3 = v1[15];
  v4 = (_QWORD *)(*(_QWORD *)(v1[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    v14 = v4;
    v15 = v5;
    if (v4)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v6 > 1)
          return 1;
      }
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v7 = (_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8))
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    v14 = v7;
    v15 = v8;
    if (v7)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v9 > 1)
          return 1;
      }
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v10 = (_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
    v14 = v10;
    v15 = v11;
    if (v10)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v12 > 1)
          return 1;
      }
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  return 0;
}

uint64_t mlir::mps::QuantizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  uint64_t Context;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Value;
  uint64_t ElementTypeOrSelf;
  uint64_t v26;
  uint64_t v27[2];
  __int128 v28;
  char v29;
  uint64_t v30;
  _BYTE v31[8];
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0uLL;
  v30 = a6;
  v31[0] = 0;
  v32 = 0;
  v33 = v14;
  v34 = a9;
  v35 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32)
      v32 = 0;
    mlir::OperationName::OperationName(v31, "mps.quantize", 12, Context);
    v32 = 1;
  }
  *(_QWORD *)&v36 = a4;
  *((_QWORD *)&v36 + 1) = a5;
  if (a5
    && (v16 = mlir::UnknownLoc::get(this, a2), mlir::mps::QuantizeOpAdaptor::verify((uint64_t)&v30, v16)))
  {
    v17 = *((_QWORD *)&v33 + 1);
    v37 = v36;
    v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18)
      v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    else
      v19 = 0;
    v27[0] = (uint64_t)v18;
    v27[1] = v19;
    v26 = v17;
    Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(Value);
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = mlir::ShapedType::cloneWith(v27, &v28, ElementTypeOrSelf);
    v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
      goto LABEL_16;
  }
  else
  {
    v20 = mlir::Float32Type::get(this, a2);
    v21 = mlir::UnrankedTensorType::get(v20);
    v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
    {
LABEL_16:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a11 + 8);
    }
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v22) = v21;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::QuantizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v22[0] = *(_QWORD *)(a1 + 32);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v22);
    if (!v3)
      return 1;
    v20[0] = v3;
    v22[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isSignedInteger((mlir::Type *)v22, 32))
      return 1;
    v20[0] = "'mps.quantize' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
    v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v28;
        v15 = __p;
        if (v28 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v28 = v13;
        operator delete(v15);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_35;
      v16 = v26;
      v10 = v25;
      if (v26 == v25)
      {
LABEL_34:
        v26 = v8;
        operator delete(v10);
LABEL_35:
        if (v23 != &v24)
          free(v23);
        return v4;
      }
      do
      {
        v18 = (void *)*--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v16 != v8);
LABEL_33:
      v10 = v25;
      goto LABEL_34;
    }
  }
  else
  {
    v20[0] = "'mps.quantize' op requires attribute 'dtype'";
    v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v28;
        v7 = __p;
        if (v28 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v28 = v5;
        operator delete(v7);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_35;
      v9 = v26;
      v10 = v25;
      if (v26 == v25)
        goto LABEL_34;
      do
      {
        v12 = (void *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          operator delete[](v11);
      }
      while (v9 != v8);
      goto LABEL_33;
    }
  }
  return v4;
}

uint64_t mlir::mps::DequantizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  uint64_t Context;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Value;
  uint64_t ElementTypeOrSelf;
  uint64_t v26;
  uint64_t v27[2];
  __int128 v28;
  char v29;
  uint64_t v30;
  _BYTE v31[8];
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0uLL;
  v30 = a6;
  v31[0] = 0;
  v32 = 0;
  v33 = v14;
  v34 = a9;
  v35 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32)
      v32 = 0;
    mlir::OperationName::OperationName(v31, "mps.dequantize", 14, Context);
    v32 = 1;
  }
  *(_QWORD *)&v36 = a4;
  *((_QWORD *)&v36 + 1) = a5;
  if (a5
    && (v16 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DequantizeOpAdaptor::verify((uint64_t)&v30, v16)))
  {
    v17 = *((_QWORD *)&v33 + 1);
    v37 = v36;
    v18 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18)
      v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    else
      v19 = 0;
    v27[0] = (uint64_t)v18;
    v27[1] = v19;
    v26 = v17;
    Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(Value);
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = mlir::ShapedType::cloneWith(v27, &v28, ElementTypeOrSelf);
    v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
      goto LABEL_16;
  }
  else
  {
    v20 = mlir::Float32Type::get(this, a2);
    v21 = mlir::UnrankedTensorType::get(v20);
    v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
    {
LABEL_16:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a11 + 8);
    }
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v22) = v21;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DequantizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 24);
    v22[0] = *(_QWORD *)(a1 + 32);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v22);
    if (!v3)
      return 1;
    v20[0] = v3;
    v22[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isSignedInteger((mlir::Type *)v22, 32))
      return 1;
    v20[0] = "'mps.dequantize' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
    v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v28;
        v15 = __p;
        if (v28 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v28 = v13;
        operator delete(v15);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_35;
      v16 = v26;
      v10 = v25;
      if (v26 == v25)
      {
LABEL_34:
        v26 = v8;
        operator delete(v10);
LABEL_35:
        if (v23 != &v24)
          free(v23);
        return v4;
      }
      do
      {
        v18 = (void *)*--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v16 != v8);
LABEL_33:
      v10 = v25;
      goto LABEL_34;
    }
  }
  else
  {
    v20[0] = "'mps.dequantize' op requires attribute 'dtype'";
    v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v28;
        v7 = __p;
        if (v28 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v28 = v5;
        operator delete(v7);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_35;
      v9 = v26;
      v10 = v25;
      if (v26 == v25)
        goto LABEL_34;
      do
      {
        v12 = (void *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          operator delete[](v11);
      }
      while (v9 != v8);
      goto LABEL_33;
    }
  }
  return v4;
}

uint64_t mlir::mps::DequantizeLUTOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t Context;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *OperandRange;
  uint64_t v25;
  uint64_t v26;
  uint64_t ElementTypeOrSelf;
  uint64_t v28;
  uint64_t Axis;
  uint64_t v30;
  unint64_t PositiveAxis;
  char v32;
  unint64_t v33;
  const void *ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44[2];
  __int128 v45;
  char v46;
  uint64_t v47;
  _BYTE v48[8];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD v55[3];

  v55[2] = *MEMORY[0x1E0C80C00];
  v55[0] = a4;
  v55[1] = a5;
  if (a7)
    v16 = *a7;
  else
    v16 = 0;
  v47 = a6;
  v48[0] = 0;
  v49 = 0;
  v50 = v16;
  v51 = a9;
  v52 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v47);
    if (v49)
      v49 = 0;
    mlir::OperationName::OperationName(v48, "mps.dequantize_lut", 18, Context);
    v49 = 1;
  }
  v53 = a4;
  v54 = a5;
  if (a5 < 2
    || (v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DequantizeLUTOpAdaptor::verify((uint64_t)&v47, v18)))
  {
    v21 = mlir::Float32Type::get(this, a2);
LABEL_31:
    v28 = mlir::UnrankedTensorType::get(v21);
    goto LABEL_32;
  }
  v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v55, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v19)
    v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  else
    v20 = 0;
  v44[0] = (uint64_t)v19;
  v44[1] = v20;
  v22 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v55, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v22)
    v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  else
    v23 = 0;
  v43[0] = v22;
  v43[1] = v23;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v43);
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43) & 1) == 0)
    goto LABEL_30;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
  if (v25 == 1
    || !v50
    || (v26 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43)
                        + 8 * (v25 - 1)),
        v26 == 1))
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(OperandRange);
    LOBYTE(v45) = 0;
    v46 = 0;
    v28 = mlir::ShapedType::cloneWith(v44, &v45, ElementTypeOrSelf);
LABEL_32:
    v40 = v28;
    v41 = *(unsigned int *)(a11 + 8);
    if (v41 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v41) = v40;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44) || !v50)
  {
LABEL_30:
    v21 = (uint64_t)OperandRange;
    goto LABEL_31;
  }
  Axis = (int)mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxis((mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *)&v47);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  if (v32)
  {
    v33 = PositiveAxis;
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v45, ArgAttrsAttr, v35);
    v36 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    v37 = 0x8000000000000000;
    v38 = v45;
    if (v26 != 0x8000000000000000 && *(_QWORD *)(v36 + 8 * v33) != 0x8000000000000000)
      v37 = *(_QWORD *)(v45 + 8 * v33) * v26;
    *(_QWORD *)(v45 + 8 * v33) = v37;
    v39 = mlir::RankedTensorType::get(v38, DWORD2(v45), (uint64_t)OperandRange, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v39);
    if ((char *)v45 != &v46)
      free((void *)v45);
    return 1;
  }
  return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, (uint64_t)OperandRange);
}

uint64_t mlir::mps::DequantizeLUTOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
    return 1;
  v13[0] = *(_QWORD *)(a1 + 24);
  v15[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
  if (mlir::Type::isSignedInteger((mlir::Type *)v15, 32))
    return 1;
  v13[0] = "'mps.dequantize_lut' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
  v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)v15);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  if (v22)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
    v8 = v18;
    if (v18)
    {
      v9 = v19;
      v10 = v18;
      if (v19 != v18)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v18;
      }
      v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17)
      free(v16);
  }
  return v3;
}

uint64_t mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxisAttr(mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *this)
{
  return *((_QWORD *)this + 3);
}

unint64_t mlir::mps::`anonymous namespace'::tryGetPositiveAxis(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  const char *v7;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  int *v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  int *v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD **v38;
  _QWORD **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  BOOL v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  const void **v66[4];
  __int16 v67;
  uint64_t v68;
  int v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72[3];
  void *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD **v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v68 = a1;
  v7 = (const char *)-a2;
  if (-a2 > a1 || a2 <= a1)
  {
    if (a5)
    {
      v66[0] = (const void **)"invalid axis ";
      v67 = 259;
      mlir::Operation::emitOpError(a5, v66, (uint64_t)v72);
      if (v72[0])
      {
        v69 = 2;
        v70 = (const char *)a1;
        v9 = &v69;
        v10 = (char *)v73;
        if (v74 >= v75)
        {
          v49 = v74 + 1;
          if (v73 <= &v69 && (char *)v73 + 24 * v74 > (char *)&v69)
          {
            v60 = (char *)&v69 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v49, 24);
            v10 = (char *)v73;
            v9 = (int *)((char *)v73 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v49, 24);
            v9 = &v69;
            v10 = (char *)v73;
          }
        }
        v11 = &v10[24 * v74];
        v12 = *(_OWORD *)v9;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v11 = v12;
        v13 = ++v74;
        if (v72[0])
        {
          v69 = 3;
          v70 = " is outside of the range [";
          v71 = 26;
          v14 = &v69;
          v15 = (char *)v73;
          if (v13 >= v75)
          {
            v50 = v13 + 1;
            v51 = (char *)v73 + 24 * v13 > (char *)&v69;
            if (v73 <= &v69 && v51)
            {
              v61 = (char *)&v69 - (_BYTE *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v50, 24);
              v15 = (char *)v73;
              v14 = (int *)((char *)v73 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v50, 24);
              v14 = &v69;
              v15 = (char *)v73;
            }
          }
          v16 = &v15[24 * v74];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          v18 = ++v74;
          if (v72[0])
          {
            v69 = 2;
            v70 = v7;
            v19 = &v69;
            v20 = (char *)v73;
            if (v18 >= v75)
            {
              v52 = v18 + 1;
              v53 = (char *)v73 + 24 * v18 > (char *)&v69;
              if (v73 <= &v69 && v53)
              {
                v62 = (char *)&v69 - (_BYTE *)v73;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
                v20 = (char *)v73;
                v19 = (int *)((char *)v73 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
                v19 = &v69;
                v20 = (char *)v73;
              }
            }
            v21 = &v20[24 * v74];
            v22 = *(_OWORD *)v19;
            *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v21 = v22;
            v23 = ++v74;
            if (v72[0])
            {
              v69 = 3;
              v70 = ", ";
              v71 = 2;
              v24 = &v69;
              v25 = (char *)v73;
              if (v23 >= v75)
              {
                v54 = v23 + 1;
                v55 = (char *)v73 + 24 * v23 > (char *)&v69;
                if (v73 <= &v69 && v55)
                {
                  v63 = (char *)&v69 - (_BYTE *)v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
                  v25 = (char *)v73;
                  v24 = (int *)((char *)v73 + v63);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
                  v24 = &v69;
                  v25 = (char *)v73;
                }
              }
              v26 = &v25[24 * v74];
              v27 = *(_OWORD *)v24;
              *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
              *(_OWORD *)v26 = v27;
              v28 = ++v74;
              if (v72[0])
              {
                v69 = 2;
                v70 = (const char *)(a2 - 1);
                v29 = &v69;
                v30 = (char *)v73;
                if (v28 >= v75)
                {
                  v56 = v28 + 1;
                  v57 = (char *)v73 + 24 * v28 > (char *)&v69;
                  if (v73 <= &v69 && v57)
                  {
                    v64 = (char *)&v69 - (_BYTE *)v73;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
                    v30 = (char *)v73;
                    v29 = (int *)((char *)v73 + v64);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
                    v29 = &v69;
                    v30 = (char *)v73;
                  }
                }
                v31 = &v30[24 * v74];
                v32 = *(_OWORD *)v29;
                *((_QWORD *)v31 + 2) = *((_QWORD *)v29 + 2);
                *(_OWORD *)v31 = v32;
                v33 = ++v74;
                if (v72[0])
                {
                  v69 = 3;
                  v70 = "].";
                  v71 = 2;
                  v34 = &v69;
                  v35 = (char *)v73;
                  if (v33 >= v75)
                  {
                    v58 = v33 + 1;
                    v59 = (char *)v73 + 24 * v33 > (char *)&v69;
                    if (v73 <= &v69 && v59)
                    {
                      v65 = (char *)&v69 - (_BYTE *)v73;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
                      v35 = (char *)v73;
                      v34 = (int *)((char *)v73 + v65);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
                      v34 = &v69;
                      v35 = (char *)v73;
                    }
                  }
                  v36 = &v35[24 * v74];
                  v37 = *(_OWORD *)v34;
                  *((_QWORD *)v36 + 2) = *((_QWORD *)v34 + 2);
                  *(_OWORD *)v36 = v37;
                  ++v74;
                  if (v72[0])
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v72);
                }
              }
            }
          }
        }
      }
      if (v81)
      {
        v38 = (_QWORD **)__p;
        if (__p)
        {
          v39 = v80;
          v40 = __p;
          if (v80 != __p)
          {
            do
              v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            v40 = __p;
          }
          v80 = v38;
          operator delete(v40);
        }
        v41 = v77;
        if (v77)
        {
          v42 = v78;
          v43 = v77;
          if (v78 != v77)
          {
            do
            {
              v45 = (void *)*--v42;
              v44 = v45;
              *v42 = 0;
              if (v45)
                operator delete[](v44);
            }
            while (v42 != v41);
            v43 = v77;
          }
          v78 = v41;
          operator delete(v43);
        }
        if (v73 != v76)
          free(v73);
      }
    }
    else
    {
      v72[0] = -a2;
      v66[0] = (const void **)(a2 - 1);
      mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(a3, a4, "invalid axis ", &v68, " is outside of the range [", v72, ", ", (uint64_t *)v66, "]");
    }
    v47 = 0;
    v46 = 0;
  }
  else
  {
    v46 = ((a2 & (a1 >> 63)) + a1) & 0xFFFFFFFFFFFFFF00;
    v47 = ((a2 & (a1 >> 63)) + a1);
  }
  return v46 | v47;
}

uint64_t mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxis(mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *this)
{
  unsigned int v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *((_QWORD *)this + 3);
  if (!v5)
    return 0;
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return ((uint64_t)((_QWORD)__p << -(uint64_t)v4) >> -(uint64_t)v4) | 0x100000000;
  v2 = *(_DWORD *)__p;
  operator delete[](__p);
  return v2 | 0x100000000;
}

uint64_t mlir::mps::verifyDequantLUT(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int IntOrFloatBitWidth;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int8x8_t v18;
  int8x8_t *v19;
  unsigned int v20;
  uint64_t ArgAttrsAttr;
  uint8x8_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  void *v70;
  void *v71;
  int *v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  int *v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  int *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  int *v87;
  char *v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  int *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  int *v97;
  char *v98;
  char *v99;
  __int128 v100;
  _QWORD **v101;
  _QWORD **v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  BOOL v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  BOOL v124;
  int64_t v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  int64_t v131;
  int64_t v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  const void **v136[4];
  __int16 v137;
  _QWORD v138[2];
  _QWORD *v139;
  uint64_t v140;
  int v141;
  const char *v142;
  uint64_t v143;
  _QWORD v144[3];
  void *v145;
  unsigned int v146;
  unsigned int v147;
  _BYTE v148[96];
  void *v149;
  _QWORD *v150;
  void *__p;
  _QWORD **v152;
  char v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    v139 = v7;
    v140 = v8;
    v9 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
LABEL_3:
      v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v139 = 0;
    v140 = 0;
    v9 = (_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
      goto LABEL_3;
  }
  v10 = 0;
LABEL_6:
  v138[0] = v9;
  v138[1] = v10;
  v144[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v139);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v144);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v138))
    return 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  v13 = v12;
  v14 = a4 & 0xFF00000000;
  if (v12 == 1)
  {
    if (v14)
    {
      v15 = 1;
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (!v14)
  {
LABEL_16:
    v20 = v12 - 1;
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    v17 = 0;
    v15 = 1;
    v18 = *(int8x8_t *)(ArgAttrsAttr + 8 * v20);
    if (*(_QWORD *)&v18 == 0x8000000000000000)
      goto LABEL_19;
    goto LABEL_17;
  }
  v15 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138)
                  + 8 * (v12 - 1));
  if (v13 < 3)
  {
LABEL_14:
    v19 = (int8x8_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    v17 = 1;
    v18 = *v19;
    if (*v19 == 0x8000000000000000)
      goto LABEL_19;
    goto LABEL_17;
  }
  v16 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  v17 = 1;
  v18 = *(int8x8_t *)(v16 + 8 * (v13 - 2));
  if (*(_QWORD *)&v18 == 0x8000000000000000)
    goto LABEL_19;
LABEL_17:
  v22 = (uint8x8_t)vcnt_s8(v18);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] != 1)
  {
    v137 = 257;
    mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
    if (v144[0])
    {
      v141 = 3;
      v143 = 10;
      v42 = &v141;
      v43 = (char *)v145;
      if (v146 >= v147)
      {
        v107 = v146 + 1;
        if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
        {
          v125 = (char *)&v141 - (_BYTE *)v145;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v107, 24);
          v43 = (char *)v145;
          v42 = (int *)((char *)v145 + v125);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v107, 24);
          v42 = &v141;
          v43 = (char *)v145;
        }
      }
      v44 = &v43[24 * v146];
      v45 = *(_OWORD *)v42;
      *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      v46 = ++v146;
      if (v144[0])
      {
        v141 = 2;
        v142 = (const char *)v18;
        v47 = &v141;
        v48 = (char *)v145;
        if (v46 >= v147)
        {
          v109 = v46 + 1;
          v110 = (char *)v145 + 24 * v46 > (char *)&v141;
          if (v145 <= &v141 && v110)
          {
            v127 = (char *)&v141 - (_BYTE *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v109, 24);
            v48 = (char *)v145;
            v47 = (int *)((char *)v145 + v127);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v109, 24);
            v47 = &v141;
            v48 = (char *)v145;
          }
        }
        v49 = &v48[24 * v146];
        v50 = *(_OWORD *)v47;
        *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
        *(_OWORD *)v49 = v50;
        v51 = ++v146;
        if (v144[0])
        {
          v141 = 3;
          v143 = 22;
          v52 = &v141;
          v53 = (char *)v145;
          if (v51 >= v147)
          {
            v113 = v51 + 1;
            v114 = (char *)v145 + 24 * v51 > (char *)&v141;
            if (v145 <= &v141 && v114)
            {
              v130 = (char *)&v141 - (_BYTE *)v145;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v113, 24);
              v53 = (char *)v145;
              v52 = (int *)((char *)v145 + v130);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v113, 24);
              v52 = &v141;
              v53 = (char *)v145;
            }
          }
          v54 = &v53[24 * v146];
          v55 = *(_OWORD *)v52;
          *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
          *(_OWORD *)v54 = v55;
          ++v146;
        }
      }
    }
    v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
    if (v144[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
    if (v153)
    {
      v56 = (_QWORD **)__p;
      if (__p)
      {
        v57 = v152;
        v58 = __p;
        if (v152 != __p)
        {
          do
            v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          v58 = __p;
        }
        v152 = v56;
        operator delete(v58);
      }
      v36 = v149;
      if (!v149)
        goto LABEL_109;
      v59 = v150;
      v38 = v149;
      if (v150 == v149)
        goto LABEL_108;
      do
      {
        v61 = (void *)*--v59;
        v60 = v61;
        *v59 = 0;
        if (v61)
          operator delete[](v60);
      }
      while (v59 != v36);
      goto LABEL_107;
    }
    return v32;
  }
  v23 = (const char *)IntOrFloatBitWidth;
  v24 = (const char *)(1 << IntOrFloatBitWidth);
  if ((const char *)v18 != v24)
  {
    v137 = 257;
    mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
    if (v144[0])
    {
      v141 = 3;
      v143 = 10;
      v72 = &v141;
      v73 = (char *)v145;
      if (v146 >= v147)
      {
        v112 = v146 + 1;
        if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
        {
          v129 = (char *)&v141 - (_BYTE *)v145;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v112, 24);
          v73 = (char *)v145;
          v72 = (int *)((char *)v145 + v129);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v112, 24);
          v72 = &v141;
          v73 = (char *)v145;
        }
      }
      v74 = &v73[24 * v146];
      v75 = *(_OWORD *)v72;
      *((_QWORD *)v74 + 2) = *((_QWORD *)v72 + 2);
      *(_OWORD *)v74 = v75;
      v76 = ++v146;
      if (v144[0])
      {
        v141 = 2;
        v142 = (const char *)v18;
        v77 = &v141;
        v78 = (char *)v145;
        if (v76 >= v147)
        {
          v115 = v76 + 1;
          v116 = (char *)v145 + 24 * v76 > (char *)&v141;
          if (v145 <= &v141 && v116)
          {
            v131 = (char *)&v141 - (_BYTE *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v115, 24);
            v78 = (char *)v145;
            v77 = (int *)((char *)v145 + v131);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v115, 24);
            v77 = &v141;
            v78 = (char *)v145;
          }
        }
        v79 = &v78[24 * v146];
        v80 = *(_OWORD *)v77;
        *((_QWORD *)v79 + 2) = *((_QWORD *)v77 + 2);
        *(_OWORD *)v79 = v80;
        v81 = ++v146;
        if (v144[0])
        {
          v141 = 3;
          v143 = 41;
          v82 = &v141;
          v83 = (char *)v145;
          if (v81 >= v147)
          {
            v117 = v81 + 1;
            v118 = (char *)v145 + 24 * v81 > (char *)&v141;
            if (v145 <= &v141 && v118)
            {
              v132 = (char *)&v141 - (_BYTE *)v145;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v117, 24);
              v83 = (char *)v145;
              v82 = (int *)((char *)v145 + v132);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v117, 24);
              v82 = &v141;
              v83 = (char *)v145;
            }
          }
          v84 = &v83[24 * v146];
          v85 = *(_OWORD *)v82;
          *((_QWORD *)v84 + 2) = *((_QWORD *)v82 + 2);
          *(_OWORD *)v84 = v85;
          v86 = ++v146;
          if (v144[0])
          {
            v141 = 2;
            v142 = v23;
            v87 = &v141;
            v88 = (char *)v145;
            if (v86 >= v147)
            {
              v119 = v86 + 1;
              v120 = (char *)v145 + 24 * v86 > (char *)&v141;
              if (v145 <= &v141 && v120)
              {
                v133 = (char *)&v141 - (_BYTE *)v145;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v119, 24);
                v88 = (char *)v145;
                v87 = (int *)((char *)v145 + v133);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v119, 24);
                v87 = &v141;
                v88 = (char *)v145;
              }
            }
            v89 = &v88[24 * v146];
            v90 = *(_OWORD *)v87;
            *((_QWORD *)v89 + 2) = *((_QWORD *)v87 + 2);
            *(_OWORD *)v89 = v90;
            v91 = ++v146;
            if (v144[0])
            {
              v141 = 3;
              v142 = "=";
              v143 = 1;
              v92 = &v141;
              v93 = (char *)v145;
              if (v91 >= v147)
              {
                v121 = v91 + 1;
                v122 = (char *)v145 + 24 * v91 > (char *)&v141;
                if (v145 <= &v141 && v122)
                {
                  v134 = (char *)&v141 - (_BYTE *)v145;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v121, 24);
                  v93 = (char *)v145;
                  v92 = (int *)((char *)v145 + v134);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v121, 24);
                  v92 = &v141;
                  v93 = (char *)v145;
                }
              }
              v94 = &v93[24 * v146];
              v95 = *(_OWORD *)v92;
              *((_QWORD *)v94 + 2) = *((_QWORD *)v92 + 2);
              *(_OWORD *)v94 = v95;
              v96 = ++v146;
              if (v144[0])
              {
                v141 = 2;
                v142 = v24;
                v97 = &v141;
                v98 = (char *)v145;
                if (v96 >= v147)
                {
                  v123 = v96 + 1;
                  v124 = (char *)v145 + 24 * v96 > (char *)&v141;
                  if (v145 <= &v141 && v124)
                  {
                    v135 = (char *)&v141 - (_BYTE *)v145;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v123, 24);
                    v98 = (char *)v145;
                    v97 = (int *)((char *)v145 + v135);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v123, 24);
                    v97 = &v141;
                    v98 = (char *)v145;
                  }
                }
                v99 = &v98[24 * v146];
                v100 = *(_OWORD *)v97;
                *((_QWORD *)v99 + 2) = *((_QWORD *)v97 + 2);
                *(_OWORD *)v99 = v100;
                ++v146;
              }
            }
          }
        }
      }
    }
    v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
    if (v144[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
    if (v153)
    {
      v101 = (_QWORD **)__p;
      if (__p)
      {
        v102 = v152;
        v103 = __p;
        if (v152 != __p)
        {
          do
            v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
          while (v102 != v101);
          v103 = __p;
        }
        v152 = v101;
        operator delete(v103);
      }
      v36 = v149;
      if (!v149)
        goto LABEL_109;
      v104 = v150;
      v38 = v149;
      if (v150 == v149)
        goto LABEL_108;
      do
      {
        v106 = (void *)*--v104;
        v105 = v106;
        *v104 = 0;
        if (v106)
          operator delete[](v105);
      }
      while (v104 != v36);
      goto LABEL_107;
    }
    return v32;
  }
LABEL_19:
  if ((v17 & 1) != 0)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139);
    v26 = (v25 & ((uint64_t)(int)a4 >> 31)) + (int)a4;
    if (v26 < 0 || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139), v26 >= v27))
    {
      v137 = 257;
      mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
      if (v144[0])
      {
        v141 = 3;
        v142 = "axis value is not compatible with input rank";
        v143 = 44;
        v28 = &v141;
        v29 = (char *)v145;
        if (v146 >= v147)
        {
          v108 = v146 + 1;
          if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
          {
            v126 = (char *)&v141 - (_BYTE *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v108, 24);
            v29 = (char *)v145;
            v28 = (int *)((char *)v145 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v108, 24);
            v28 = &v141;
            v29 = (char *)v145;
          }
        }
        v30 = &v29[24 * v146];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v30 = v31;
        ++v146;
      }
      v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
      if (v144[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
      if (v153)
      {
        v33 = (_QWORD **)__p;
        if (__p)
        {
          v34 = v152;
          v35 = __p;
          if (v152 != __p)
          {
            do
              v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
            while (v34 != v33);
            v35 = __p;
          }
          v152 = v33;
          operator delete(v35);
        }
        v36 = v149;
        if (!v149)
          goto LABEL_109;
        v37 = v150;
        v38 = v149;
        if (v150 == v149)
        {
LABEL_108:
          v150 = v36;
          operator delete(v38);
LABEL_109:
          if (v145 != v148)
            free(v145);
          return v32;
        }
        do
        {
          v40 = (void *)*--v37;
          v39 = v40;
          *v37 = 0;
          if (v40)
            operator delete[](v39);
        }
        while (v37 != v36);
LABEL_107:
        v38 = v149;
        goto LABEL_108;
      }
      return v32;
    }
    return 1;
  }
  if (v15 < 2)
    return 1;
  v137 = 257;
  mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
  if (v144[0])
  {
    v141 = 3;
    v142 = "axis must be defined when LUT Vector size > 1";
    v143 = 45;
    v62 = &v141;
    v63 = (char *)v145;
    if (v146 >= v147)
    {
      v111 = v146 + 1;
      if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
      {
        v128 = (char *)&v141 - (_BYTE *)v145;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v111, 24);
        v63 = (char *)v145;
        v62 = (int *)((char *)v145 + v128);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v111, 24);
        v62 = &v141;
        v63 = (char *)v145;
      }
    }
    v64 = &v63[24 * v146];
    v65 = *(_OWORD *)v62;
    *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
    *(_OWORD *)v64 = v65;
    ++v146;
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
  if (v144[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
  if (v153)
  {
    v66 = (_QWORD **)__p;
    if (__p)
    {
      v67 = v152;
      v68 = __p;
      if (v152 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v152 = v66;
      operator delete(v68);
    }
    v36 = v149;
    if (!v149)
      goto LABEL_109;
    v69 = v150;
    v38 = v149;
    if (v150 == v149)
      goto LABEL_108;
    do
    {
      v71 = (void *)*--v69;
      v70 = v71;
      *v69 = 0;
      if (v71)
        operator delete[](v70);
    }
    while (v69 != v36);
    goto LABEL_107;
  }
  return v32;
}

uint64_t mlir::mps::DequantizeLUTOp::getAxis(mlir::mps::DequantizeLUTOp *this)
{
  unsigned int v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (!v5)
    return 0;
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return ((uint64_t)((_QWORD)__p << -(uint64_t)v4) >> -(uint64_t)v4) | 0x100000000;
  v2 = *(_DWORD *)__p;
  operator delete[](__p);
  return v2 | 0x100000000;
}

uint64_t mlir::mps::UnrealizedFoldOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  const void **v25[4];
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  _QWORD v38[3];
  _QWORD *v39;
  unint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v28 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange((unint64_t *)&v41, (uint64_t)&v28, 1uLL);
  v27 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v40, (uint64_t)&v27, 1uLL);
  v38[0] = off_1E0DFB640;
  v39 = v38;
  if (v42 != v40[1])
  {
    (*(void (**)(_QWORD *))(v38[0] + 32))(v38);
    goto LABEL_24;
  }
  v2 = v41;
  v3 = v40[0];
  v30[0] = off_1E0E50F70;
  v30[1] = v38;
  v4 = v30;
  v31 = v30;
  if (v42)
  {
    v5 = 0;
    v6 = v42 - 1;
    do
    {
      v7 = (const void **)mlir::TypeRange::dereference_iterator(v2, v5);
      v8 = mlir::TypeRange::dereference_iterator(v3, v5);
      v25[0] = v7;
      v29 = v8;
      if (!v31)
        std::__throw_bad_function_call[abi:nn180100]();
      v9 = (*(uint64_t (**)(void *, const void ***, unint64_t *))(*(_QWORD *)v31 + 48))(v31, v25, &v29);
      if (v9)
        v10 = v6 == v5;
      else
        v10 = 1;
      ++v5;
    }
    while (!v10);
    v11 = v9;
    v4 = v31;
    if (v31 == v30)
    {
      v12 = 4;
      v4 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_17;
      v12 = 5;
    }
  }
  else
  {
    v11 = 1;
    v12 = 4;
  }
  (*(void (**)(void))(*v4 + 8 * v12))();
LABEL_17:
  v13 = v39;
  if (v39 == v38)
  {
    v14 = 4;
    v13 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_22;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_22:
  if ((v11 & 1) != 0)
    return 1;
LABEL_24:
  v25[0] = (const void **)"failed: the input type must be more specialized than the result type";
  v26 = 259;
  mlir::OpState::emitOpError(this, v25, (uint64_t)v30);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
  if (v30[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
  if (v37)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v36;
      v18 = __p;
      if (v36 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v36 = v16;
      operator delete(v18);
    }
    v19 = v33;
    if (v33)
    {
      v20 = v34;
      v21 = v33;
      if (v34 != v33)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v33;
      }
      v34 = v19;
      operator delete(v21);
    }
    if (v31 != &v32)
      free(v31);
  }
  return v15;
}

uint64_t mlir::mps::TypeConstraintOp::verify(uint64_t **this)
{
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const void **v15[4];
  __int16 v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD **v23;
  char v24;
  _QWORD v25[3];
  _QWORD *v26;
  unint64_t v27[2];
  unint64_t v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v15[0] = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ValueRange::ValueRange(v28, (uint64_t)v15, 1uLL);
  v17[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v17[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v17);
  mlir::ValueRange::ValueRange(v27, (uint64_t)v17, 1uLL);
  v25[0] = off_1E0DFB698;
  v26 = v25;
  v3 = v26;
  if (v26 == v25)
  {
    v4 = 4;
    v3 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if ((v2 & 1) != 0)
    return 1;
  v15[0] = (const void **)"the type constraint cannot be satisfied";
  v16 = 259;
  mlir::OpState::emitOpError(this, v15, (uint64_t)v17);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  if (v24)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v23;
      v8 = __p;
      if (v23 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v23 = v6;
      operator delete(v8);
    }
    v9 = v20;
    if (v20)
    {
      v10 = v21;
      v11 = v20;
      if (v21 != v20)
      {
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        v11 = v20;
      }
      v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v5;
}

uint64_t mlir::mps::`anonymous namespace'::areCompatibleTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v30;
  unint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t (**v36)();
  _BYTE *v37;
  uint64_t (***v38)();
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)a5[3];
  if (v10)
  {
    if (v10 == a5)
    {
      v35 = v34;
      (*(void (**)(_QWORD *, _BYTE *))(*a5 + 24))(a5, v34);
      if (a2 != a4)
        goto LABEL_21;
    }
    else
    {
      v35 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
      if (a2 != a4)
        goto LABEL_21;
    }
  }
  else
  {
    v35 = 0;
    if (a2 != a4)
      goto LABEL_21;
  }
  v36 = off_1E0E50F70;
  v37 = v34;
  v38 = &v36;
  if (!a2)
    goto LABEL_19;
  v11 = 0;
  do
  {
    v12 = mlir::TypeRange::dereference_iterator(a1, v11);
    v30 = mlir::TypeRange::dereference_iterator(a3, v11);
    v31 = v12;
    if (!v38)
LABEL_55:
      std::__throw_bad_function_call[abi:nn180100]();
    v13 = ((uint64_t (*)(uint64_t (***)(), unint64_t *, unint64_t *))(*v38)[6])(v38, &v31, &v30);
    if (v13)
      v14 = a2 - 1 == v11;
    else
      v14 = 1;
    ++v11;
  }
  while (!v14);
  v15 = v13;
  if (v38 == &v36)
  {
    v36[4]();
    if ((v15 & 1) == 0)
      goto LABEL_21;
LABEL_19:
    v16 = 1;
    goto LABEL_47;
  }
  if (v38)
  {
    (*v38)[5]();
    if ((v15 & 1) == 0)
      goto LABEL_21;
    goto LABEL_19;
  }
  if ((v13 & 1) != 0)
    goto LABEL_19;
LABEL_21:
  v17 = (_QWORD *)a5[3];
  if (v17)
  {
    if (v17 != a5)
    {
      v33 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      if (a2 == a4)
        goto LABEL_24;
LABEL_36:
      v16 = 0;
      goto LABEL_37;
    }
    v33 = v32;
    (*(void (**)(_QWORD *, _BYTE *))(*a5 + 24))(a5, v32);
    if (a2 != a4)
      goto LABEL_36;
  }
  else
  {
    v33 = 0;
    if (a2 != a4)
      goto LABEL_36;
  }
LABEL_24:
  v36 = off_1E0E50F70;
  v37 = v32;
  v18 = &v36;
  v38 = &v36;
  if (!a2)
  {
    v16 = 1;
    v24 = 4;
    goto LABEL_44;
  }
  v19 = 0;
  v20 = a2 - 1;
  do
  {
    v21 = mlir::TypeRange::dereference_iterator(a3, v19);
    v30 = mlir::TypeRange::dereference_iterator(a1, v19);
    v31 = v21;
    if (!v38)
      goto LABEL_55;
    v22 = ((uint64_t (*)(uint64_t (***)(), unint64_t *, unint64_t *))(*v38)[6])(v38, &v31, &v30);
    if ((_DWORD)v22)
      v23 = v20 == v19;
    else
      v23 = 1;
    ++v19;
  }
  while (!v23);
  v16 = v22;
  v18 = v38;
  if (v38 == &v36)
  {
    v24 = 4;
    v18 = &v36;
LABEL_44:
    (*v18)[v24]();
    v25 = v33;
    if (v33 == v32)
      goto LABEL_45;
    goto LABEL_38;
  }
  if (v38)
  {
    v24 = 5;
    goto LABEL_44;
  }
LABEL_37:
  v25 = v33;
  if (v33 == v32)
  {
LABEL_45:
    v26 = 4;
    v25 = v32;
    goto LABEL_46;
  }
LABEL_38:
  if (!v25)
    goto LABEL_47;
  v26 = 5;
LABEL_46:
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_47:
  v27 = v35;
  if (v35 == v34)
  {
    v28 = 4;
    v27 = v34;
    goto LABEL_51;
  }
  if (v35)
  {
    v28 = 5;
LABEL_51:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return v16;
}

uint64_t mlir::mps::TypeConstraintOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t (***a7)(), int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (**v14)();
  uint64_t Context;
  uint64_t v16;
  mlir::MLIRContext *v17;
  unint64_t *p_Value;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t Value;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  unint64_t v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[8];
  char v46;
  uint64_t (**v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t (**v50)();
  uint64_t v51;
  uint64_t (**v52)();
  _QWORD *v53;
  uint64_t (***v54)();
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0;
  v44 = a6;
  v45[0] = 0;
  v46 = 0;
  v47 = v14;
  v48 = a9;
  v49 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v44);
    if (v46)
      v46 = 0;
    mlir::OperationName::OperationName(v45, "mps.type_constraint", 19, Context);
    v46 = 1;
  }
  v50 = a4;
  v51 = a5;
  v16 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::TypeConstraintOpAdaptor::verify((uint64_t)&v44, v16))
  {
    v31 = mlir::Float32Type::get(this, v17);
    v32 = mlir::UnrankedTensorType::get(v31);
    v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v52 = v50;
  v53 = 0;
  v36 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v52 = v47;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v52);
  mlir::ValueRange::ValueRange((unint64_t *)&v42, (uint64_t)&v36, 1uLL);
  p_Value = (unint64_t *)&Value;
  mlir::ValueRange::ValueRange(v41, (uint64_t)&Value, 1uLL);
  v39[0] = off_1E0DFB640;
  v40 = v39;
  if (v43 == v41[1])
  {
    v19 = v42;
    v20 = v41[0];
    v52 = off_1E0E50F70;
    v53 = v39;
    v54 = &v52;
    if (v43)
    {
      v21 = 0;
      v22 = v43 - 1;
      do
      {
        v23 = mlir::TypeRange::dereference_iterator(v19, v21);
        v37 = mlir::TypeRange::dereference_iterator(v20, v21);
        v38 = v23;
        if (!v54)
          std::__throw_bad_function_call[abi:nn180100]();
        v24 = ((uint64_t (*)(uint64_t (***)(), unint64_t *, unint64_t *))(*v54)[6])(v54, &v38, &v37);
        if (v24)
          v25 = v22 == v21;
        else
          v25 = 1;
        ++v21;
      }
      while (!v25);
      v26 = v24;
      if (v54 == &v52)
      {
        v52[4]();
        if ((v26 & 1) != 0)
          goto LABEL_21;
      }
      else if (v54)
      {
        (*v54)[5]();
        if ((v26 & 1) != 0)
          goto LABEL_21;
      }
      else if ((v24 & 1) != 0)
      {
        goto LABEL_21;
      }
      v27 = Value;
      v28 = *(unsigned int *)(a11 + 8);
      if (v28 < *(_DWORD *)(a11 + 12))
        goto LABEL_23;
LABEL_34:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      LODWORD(v28) = *(_DWORD *)(a11 + 8);
      goto LABEL_23;
    }
LABEL_21:
    p_Value = &v36;
  }
  v27 = *p_Value;
  v28 = *(unsigned int *)(a11 + 8);
  if (v28 >= *(_DWORD *)(a11 + 12))
    goto LABEL_34;
LABEL_23:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v27;
  ++*(_DWORD *)(a11 + 8);
  v29 = v40;
  if (v40 == v39)
  {
    v30 = 4;
    v29 = v39;
    goto LABEL_30;
  }
  if (v40)
  {
    v30 = 5;
LABEL_30:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  return 1;
}

uint64_t mlir::mps::TypeConstraintOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    v14[0] = *(_QWORD *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    v12 = "'mps.type_constraint' op requires attribute 'type_constraint'";
    v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    if (v21)
    {
      v4 = (_QWORD **)__p;
      if (__p)
      {
        v5 = v20;
        v6 = __p;
        if (v20 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v20 = v4;
        operator delete(v6);
      }
      v7 = v17;
      if (v17)
      {
        v8 = v18;
        v9 = v17;
        if (v18 != v17)
        {
          do
          {
            v11 = (void *)*--v8;
            v10 = v11;
            *v8 = 0;
            if (v11)
              operator delete[](v10);
          }
          while (v8 != v7);
          v9 = v17;
        }
        v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16)
        free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::CreateComplexOp::inferReturnTypes(mlir::Float32Type *a1, uint64_t a2, uint64_t a3, mlir::MLIRContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  mlir::MLIRContext *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OperandRange;
  uint64_t v20;
  uint64_t v21[2];
  __int128 v22;
  char v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x100000000;
  {
    v13 = *(_QWORD **)v24;
    if (*(_QWORD *)v24)
      v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    else
      v14 = 0;
    v21[0] = (uint64_t)v13;
    v21[1] = v14;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v21);
    v20 = mlir::ComplexType::get(OperandRange);
    LOBYTE(v22) = 0;
    v23 = 0;
    v16 = mlir::ShapedType::cloneWith(v21, &v22, v20);
    v17 = *(unsigned int *)(a11 + 8);
    if (v17 < *(_DWORD *)(a11 + 12))
      goto LABEL_7;
  }
  else
  {
    v15 = mlir::Float32Type::get(a1, v12);
    v16 = mlir::UnrankedTensorType::get(v15);
    v17 = *(unsigned int *)(a11 + 8);
    if (v17 < *(_DWORD *)(a11 + 12))
      goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v17 + 1, 8);
  LODWORD(v17) = *(_DWORD *)(a11 + 8);
LABEL_7:
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v17) = v16;
  ++*(_DWORD *)(a11 + 8);
  if (v24 != v26)
    free(v24);
  return 1;
}

uint64_t mlir::mps::RealPartOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t ComplexPartType;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  _BYTE v22[8];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v21 = a6;
  v22[0] = 0;
  v23 = 0;
  v24 = a9;
  v25 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v21);
    if (v23)
      v23 = 0;
    mlir::OperationName::OperationName(v22, "mps.real_part", 13, Context);
    v23 = 1;
  }
  v26 = a4;
  v27 = a5;
  if (!a5
    || (mlir::UnknownLoc::get(this, a2),
        v28[0] = v26,
        v28[1] = 0,
        v15 = mlir::ValueRange::dereference_iterator(v28, 0),
  {
    v17 = mlir::Float32Type::get(this, a2);
    ComplexPartType = mlir::UnrankedTensorType::get(v17);
  }
  v18 = ComplexPartType;
  v19 = *(_DWORD *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    v19 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = v18;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::inferGetComplexPartType(_QWORD *a1)
{
  uint64_t v2;
  uint64_t ElementTypeOrSelf;
  uint64_t v4;
  __int128 v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    v9 = 0;
    v10 = 0;
    return 0;
  }
  v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  v9 = a1;
  v10 = v2;
  if (!a1)
    return 0;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v4 = ElementTypeOrSelf;
  else
    v4 = 0;
  v8 = v4;
  if (v4)
    ElementTypeOrSelf = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v8);
  LOBYTE(v6) = 0;
  v7 = 0;
  return mlir::ShapedType::cloneWith((uint64_t *)&v9, &v6, ElementTypeOrSelf);
}

uint64_t mlir::mps::ImaginaryPartOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t ComplexPartType;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  _BYTE v22[8];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v21 = a6;
  v22[0] = 0;
  v23 = 0;
  v24 = a9;
  v25 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v21);
    if (v23)
      v23 = 0;
    mlir::OperationName::OperationName(v22, "mps.imaginary_part", 18, Context);
    v23 = 1;
  }
  v26 = a4;
  v27 = a5;
  if (!a5
    || (mlir::UnknownLoc::get(this, a2),
        v28[0] = v26,
        v28[1] = 0,
        v15 = mlir::ValueRange::dereference_iterator(v28, 0),
  {
    v17 = mlir::Float32Type::get(this, a2);
    ComplexPartType = mlir::UnrankedTensorType::get(v17);
  }
  v18 = ComplexPartType;
  v19 = *(_DWORD *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    v19 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v19) = v18;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::verifyFFTAxes(uint64_t *a1, _QWORD *a2, const char **a3)
{
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  int v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char **v19;
  uint64_t v20;
  const char *v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  BOOL v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  const void **v84;
  __int16 v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  const char *v89;
  uint64_t v90;
  void *v91[2];
  uint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;
  _BYTE v96[96];
  void *v97;
  _QWORD *v98;
  void *__p;
  _QWORD **v100;
  char v101;
  const char **v102;
  uint64_t v103;
  _QWORD v104[7];

  v104[6] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v86 = 0;
    v87 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86))
      goto LABEL_5;
    return 1;
  }
  v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
  v86 = a2;
  v87 = v6;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86))
    return 1;
LABEL_5:
  v102 = a3;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v102);
  if (!DefiningOp)
    return 1;
  v8 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    return 1;
  v91[0] = &v92;
  v91[1] = (void *)0x100000000;
  mlir::Operation::fold(v8, 0, 0, (uint64_t)v91);
  v9 = *(_QWORD *)v91[0] & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 != 0;
  v11 = mlir::DenseIntElementsAttr::classof(v9);
  v12 = v11 & v10;
  if ((v11 & v10) != 0)
    v13 = (_QWORD *)v9;
  else
    v13 = 0;
  if (v91[0] != &v92)
    free(v91[0]);
  if ((v12 & 1) == 0)
    return 1;
  v102 = (const char **)v104;
  v103 = 0x600000000;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  v15 = v14;
  if (v13)
    v16 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v13 + 8);
  else
    v16 = 0;
  {
    if ((_DWORD)v103)
    {
      v19 = v102;
      v20 = 8 * v103;
      while (1)
      {
        v21 = *v19;
        if (v15 - (uint64_t)*v19 >= 5)
          break;
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_23;
      }
      v84 = (const void **)"invalid axis: ";
      v85 = 259;
      mlir::Operation::emitOpError(a1, &v84, (uint64_t)v91);
      if (v91[0])
      {
        v88 = 2;
        v89 = v21;
        v22 = &v88;
        v23 = (char *)v93;
        if (v94 >= v95)
        {
          v64 = v94 + 1;
          if (v93 <= &v88 && (char *)v93 + 24 * v94 > (char *)&v88)
          {
            v77 = (char *)&v88 - (_BYTE *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v64, 24);
            v23 = (char *)v93;
            v22 = (int *)((char *)v93 + v77);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v64, 24);
            v22 = &v88;
            v23 = (char *)v93;
          }
        }
        v24 = &v23[24 * v94];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        v26 = ++v94;
        if (v91[0])
        {
          v88 = 3;
          v89 = " for rank: ";
          v90 = 11;
          v27 = &v88;
          v28 = (char *)v93;
          if (v26 >= v95)
          {
            v65 = v26 + 1;
            v66 = (char *)v93 + 24 * v26 > (char *)&v88;
            if (v93 <= &v88 && v66)
            {
              v78 = (char *)&v88 - (_BYTE *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v65, 24);
              v28 = (char *)v93;
              v27 = (int *)((char *)v93 + v78);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v65, 24);
              v27 = &v88;
              v28 = (char *)v93;
            }
          }
          v29 = &v28[24 * v94];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          v31 = ++v94;
          if (v91[0])
          {
            v88 = 2;
            v89 = (const char *)v15;
            v32 = &v88;
            v33 = (char *)v93;
            if (v31 >= v95)
            {
              v67 = v31 + 1;
              v68 = (char *)v93 + 24 * v31 > (char *)&v88;
              if (v93 <= &v88 && v68)
              {
                v79 = (char *)&v88 - (_BYTE *)v93;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v67, 24);
                v33 = (char *)v93;
                v32 = (int *)((char *)v93 + v79);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v67, 24);
                v32 = &v88;
                v33 = (char *)v93;
              }
            }
            v34 = &v33[24 * v94];
            v35 = *(_OWORD *)v32;
            *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
            *(_OWORD *)v34 = v35;
            v36 = ++v94;
            if (v91[0])
            {
              v88 = 3;
              v89 = ". Transform supported only on the last four dimensions";
              v90 = 54;
              v37 = &v88;
              v38 = (char *)v93;
              if (v36 >= v95)
              {
                v69 = v36 + 1;
                v70 = (char *)v93 + 24 * v36 > (char *)&v88;
                if (v93 <= &v88 && v70)
                {
                  v80 = (char *)&v88 - (_BYTE *)v93;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v69, 24);
                  v38 = (char *)v93;
                  v37 = (int *)((char *)v93 + v80);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v69, 24);
                  v37 = &v88;
                  v38 = (char *)v93;
                }
              }
              v39 = &v38[24 * v94];
              v40 = *(_OWORD *)v37;
              *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
              *(_OWORD *)v39 = v40;
              v41 = ++v94;
              if (v91[0])
              {
                v88 = 3;
                v89 = ", ie. axis must be larger than ";
                v90 = 31;
                v42 = &v88;
                v43 = (char *)v93;
                if (v41 >= v95)
                {
                  v71 = v41 + 1;
                  v72 = (char *)v93 + 24 * v41 > (char *)&v88;
                  if (v93 <= &v88 && v72)
                  {
                    v81 = (char *)&v88 - (_BYTE *)v93;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v71, 24);
                    v43 = (char *)v93;
                    v42 = (int *)((char *)v93 + v81);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v71, 24);
                    v42 = &v88;
                    v43 = (char *)v93;
                  }
                }
                v44 = &v43[24 * v94];
                v45 = *(_OWORD *)v42;
                *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
                *(_OWORD *)v44 = v45;
                v46 = ++v94;
                if (v91[0])
                {
                  v88 = 2;
                  v89 = (const char *)(v15 - 5);
                  v47 = &v88;
                  v48 = (char *)v93;
                  if (v46 >= v95)
                  {
                    v73 = v46 + 1;
                    v74 = (char *)v93 + 24 * v46 > (char *)&v88;
                    if (v93 <= &v88 && v74)
                    {
                      v82 = (char *)&v88 - (_BYTE *)v93;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v73, 24);
                      v48 = (char *)v93;
                      v47 = (int *)((char *)v93 + v82);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v73, 24);
                      v47 = &v88;
                      v48 = (char *)v93;
                    }
                  }
                  v49 = &v48[24 * v94];
                  v50 = *(_OWORD *)v47;
                  *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
                  *(_OWORD *)v49 = v50;
                  v51 = ++v94;
                  if (v91[0])
                  {
                    v88 = 3;
                    v89 = ".";
                    v90 = 1;
                    v52 = &v88;
                    v53 = (char *)v93;
                    if (v51 >= v95)
                    {
                      v75 = v51 + 1;
                      v76 = (char *)v93 + 24 * v51 > (char *)&v88;
                      if (v93 <= &v88 && v76)
                      {
                        v83 = (char *)&v88 - (_BYTE *)v93;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
                        v53 = (char *)v93;
                        v52 = (int *)((char *)v93 + v83);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
                        v52 = &v88;
                        v53 = (char *)v93;
                      }
                    }
                    v54 = &v53[24 * v94];
                    v55 = *(_OWORD *)v52;
                    *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
                    *(_OWORD *)v54 = v55;
                    ++v94;
                  }
                }
              }
            }
          }
        }
      }
      v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v91);
      if (v91[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
      if (v101)
      {
        v56 = (_QWORD **)__p;
        if (__p)
        {
          v57 = v100;
          v58 = __p;
          if (v100 != __p)
          {
            do
              v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
            while (v57 != v56);
            v58 = __p;
          }
          v100 = v56;
          operator delete(v58);
        }
        v59 = v97;
        if (v97)
        {
          v60 = v98;
          v61 = v97;
          if (v98 != v97)
          {
            do
            {
              v63 = (void *)*--v60;
              v62 = v63;
              *v60 = 0;
              if (v63)
                operator delete[](v62);
            }
            while (v60 != v59);
            v61 = v97;
          }
          v98 = v59;
          operator delete(v61);
        }
        if (v93 != v96)
          free(v93);
      }
    }
    else
    {
LABEL_23:
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  if (v102 != v104)
    free(v102);
  return v17;
}

uint64_t mlir::mps::FastFourierTransformOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t ElementTypeOrSelf;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[8];
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  __int128 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37[0] = a4;
  v37[1] = a5;
  if (a7)
    v14 = *a7;
  else
    v14 = 0uLL;
  v29 = a6;
  v30[0] = 0;
  v31 = 0;
  v32 = v14;
  v33 = a9;
  v34 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(v30, "mps.fast_fourier_transform", 26, Context);
    v31 = 1;
  }
  v35 = a4;
  v36 = a5;
  if (a5)
  {
    v16 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::FastFourierTransformOpAdaptor::verify((uint64_t)&v29, v16))
    {
      v38 = v35;
      v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
        v27 = v17;
        v28 = v18;
        if (v17)
        {
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v17);
          v20 = ElementTypeOrSelf;
          if (!ElementTypeOrSelf
            || *(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
          {
            v20 = mlir::ComplexType::get(ElementTypeOrSelf);
          }
          LOBYTE(v38) = 0;
          v39 = 0;
          v21 = mlir::ShapedType::cloneWith((uint64_t *)&v27, &v38, v20);
          v22 = *(_DWORD *)(a11 + 8);
          if (v22 < *(_DWORD *)(a11 + 12))
            goto LABEL_16;
          goto LABEL_23;
        }
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
      v21 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v22 = *(_DWORD *)(a11 + 8);
      if (v22 < *(_DWORD *)(a11 + 12))
      {
LABEL_16:
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v22) = v21;
        goto LABEL_20;
      }
LABEL_23:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
      v22 = *(_DWORD *)(a11 + 8);
      goto LABEL_16;
    }
  }
  v23 = mlir::Float32Type::get(this, a2);
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
LABEL_20:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::FastFourierTransformOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
    return 1;
  v12 = "'mps.fast_fourier_transform' op requires attribute 'scaling_mode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::RealToHermiteanFFTOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v24;
  char v25[8];
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = *a7;
  else
    v14 = 0uLL;
  v24 = a6;
  v25[0] = 0;
  v26 = 0;
  v27 = v14;
  v28 = a9;
  v29 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v24);
    if (v26)
      v26 = 0;
    mlir::OperationName::OperationName(v25, "mps.real_to_hermitean_fft", 25, Context);
    v26 = 1;
  }
  v30 = a4;
  v31 = a5;
  if (!a5)
    goto LABEL_11;
  v16 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::RealToHermiteanFFTOpAdaptor::verify((uint64_t)&v24, v16))
    goto LABEL_11;
  v32 = v30;
  v33 = 0;
  v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v32 = v30;
  v33 = 1;
  v32 = mlir::ValueRange::offset_base(&v32, 1);
  v33 = 0;
  v18 = mlir::ValueRange::dereference_iterator(&v32, 0);
  if (!v19)
  {
LABEL_11:
    v20 = mlir::Float32Type::get(this, a2);
    v19 = mlir::UnrankedTensorType::get(v20);
  }
  v21 = v19;
  v22 = *(_DWORD *)(a11 + 8);
  if (v22 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
    v22 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v22) = v21;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::RealToHermiteanFFTOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
    return 1;
  v12 = "'mps.real_to_hermitean_fft' op requires attribute 'scaling_mode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::`anonymous namespace'::inferHermiteanFFTType(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *ArgAttrsAttr;
  unint64_t v15;
  unint64_t v16;
  char matched;
  unint64_t v18;
  int8x8_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *__b;
  uint64_t v49;
  _BYTE v50[32];
  void *v51;
  uint64_t v52;
  _QWORD v53[5];

  v53[4] = *MEMORY[0x1E0C80C00];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v9 = ElementTypeOrSelf;
  else
    v9 = 0;
  v47 = v9;
  if (!a3)
  {
    if (!v9)
    {
      Value = mlir::ComplexType::get(ElementTypeOrSelf);
      v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
      if (v11)
        goto LABEL_7;
LABEL_12:
      v45 = 0;
      v46 = v11;
      return mlir::UnrankedTensorType::get(Value);
    }
    return 0;
  }
  if (!v9)
    return 0;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
  v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  if (!v11)
    goto LABEL_12;
LABEL_7:
  v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
  v45 = a1;
  v46 = v12;
  if (!a1 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v45) & 1) == 0)
    return mlir::UnrankedTensorType::get(Value);
  __b = v50;
  v49 = 0x400000000;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  v16 = v15;
  v51 = v53;
  v52 = 0x400000000;
  matched = mlir::matchConstantWithIntVector<long long>(a2, (uint64_t)&v51);
  if (!matched || !(_DWORD)v52)
  {
    v19 = (int8x8_t)-1;
    goto LABEL_26;
  }
  v18 = (v52 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v18 >= 3)
  {
    v21 = v18 + 1;
    v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v20 = (uint64_t *)((char *)v51 + 8 * v22);
    v23 = (int8x16_t)vdupq_n_s64(v16);
    v24 = (int64x2_t *)((char *)v51 + 16);
    v25.i64[0] = -1;
    v25.i64[1] = -1;
    v26 = v22;
    v27.i64[0] = -1;
    v27.i64[1] = -1;
    do
    {
      v28 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vcltzq_s64(v24[-1]), v23), v24[-1]);
      v29 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vcltzq_s64(*v24), v23), *v24);
      v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, v25), (int8x16_t)v28, (int8x16_t)v25);
      v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v29, v27), (int8x16_t)v29, (int8x16_t)v27);
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    v30 = vbslq_s8((int8x16_t)vcgtq_s64(v25, v27), (int8x16_t)v25, (int8x16_t)v27);
    v31 = vextq_s8(v30, v30, 8uLL).u64[0];
    v19 = vbsl_s8((int8x8_t)vcgtd_s64(v30.i64[0], v31), *(int8x8_t *)v30.i8, (int8x8_t)v31);
    if (v21 == v22)
      goto LABEL_26;
  }
  else
  {
    v19 = (int8x8_t)-1;
    v20 = (uint64_t *)v51;
  }
  do
  {
    v32 = *v20++;
    v33 = (int8x8_t)((v16 & (v32 >> 63)) + v32);
    if (*(_QWORD *)&v33 > *(_QWORD *)&v19)
      v19 = v33;
  }
  while (v20 != (uint64_t *)((char *)v51 + 8 * v52));
LABEL_26:
  v34 = v49;
  if (v16 != v49)
  {
    if (v16 >= v49)
    {
      if (v16 > HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v50, v16, 8);
        v34 = v49;
      }
      if (v16 != v34)
        bzero((char *)__b + 8 * v34, 8 * (v16 - v34));
    }
    LODWORD(v49) = v16;
    LODWORD(v34) = v16;
  }
  if (!v16)
    goto LABEL_54;
  v35 = (uint64_t *)__b;
  if (a3)
  {
    if (matched)
    {
      do
      {
        v37 = *ArgAttrsAttr++;
        v36 = v37;
        v38 = (a4 | (2 * v37)) - 2;
        if (v37 == 0x8000000000000000)
          v38 = 0x8000000000000000;
        if (!*(_QWORD *)&v19)
          v36 = v38;
        *v35++ = v36;
        --*(_QWORD *)&v19;
        --v16;
      }
      while (v16);
      goto LABEL_54;
    }
  }
  else if (matched)
  {
    do
    {
      v40 = *ArgAttrsAttr++;
      v39 = v40;
      if (v40 >= 0)
        v41 = v39;
      else
        v41 = v39 + 1;
      v42 = v41 >> 1;
      if (v39 == 0x8000000000000000)
        v43 = 0x8000000000000000;
      else
        v43 = v42 + 1;
      if (!*(_QWORD *)&v19)
        v39 = v43;
      *v35++ = v39;
      --*(_QWORD *)&v19;
      --v16;
    }
    while (v16);
    goto LABEL_54;
  }
  memset_pattern16(__b, &unk_1812352C0, 8 * v16);
LABEL_54:
  if (v51 != v53)
  {
    free(v51);
    LODWORD(v34) = v49;
  }
  v13 = mlir::RankedTensorType::get((uint64_t)__b, v34, Value, 0);
  if (__b != v50)
    free(__b);
  return v13;
}

uint64_t mlir::mps::HermiteanToRealFFTOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  uint64_t v15;
  uint64_t Context;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;
  char v27[8];
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v14 = *a7;
    v15 = *((_QWORD *)a7 + 2);
  }
  else
  {
    v15 = 0;
    v14 = 0uLL;
  }
  v26 = a6;
  v27[0] = 0;
  v28 = 0;
  v29 = v14;
  v30 = v15;
  v31 = a9;
  v32 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v28)
      v28 = 0;
    mlir::OperationName::OperationName(v27, "mps.hermitean_to_real_fft", 25, Context);
    v28 = 1;
  }
  v33 = a4;
  v34 = a5;
  if (!a5)
    goto LABEL_11;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::HermiteanToRealFFTOpAdaptor::verify((uint64_t)&v26, v17))
    goto LABEL_11;
  v18 = *((_QWORD *)&v29 + 1) != 0;
  v35 = v33;
  v36 = 0;
  v19 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v35, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v35 = v33;
  v36 = 1;
  v35 = mlir::ValueRange::offset_base(&v35, 1);
  v36 = 0;
  v20 = mlir::ValueRange::dereference_iterator(&v35, 0);
  if (!v21)
  {
LABEL_11:
    v22 = mlir::Float32Type::get(this, a2);
    v21 = mlir::UnrankedTensorType::get(v22);
  }
  v23 = v21;
  v24 = *(_DWORD *)(a11 + 8);
  if (v24 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
    v24 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v24) = v23;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::HermiteanToRealFFTOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
    return 1;
  v12 = "'mps.hermitean_to_real_fft' op requires attribute 'scaling_mode'";
  v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::mps::NonZeroOp::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  mlir::MLIRContext *v15;
  uint64_t Context;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  char v30[8];
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[16];
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v36 = v38;
  memset_pattern16(v38, &unk_1812352C0, 0x10uLL);
  v37 = 0x200000002;
  v29 = a6;
  v30[0] = 0;
  v31 = 0;
  v32 = a9;
  v33 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(v30, "mps.non_zero", 12, Context);
    v31 = 1;
  }
  v34 = a4;
  v35 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(a1, v15);
    v39 = v34;
    v40 = 0;
    v17 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
    {
      v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      v39 = v17;
      v40 = v18;
      if (v17 && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39) & 1) != 0)
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        *((_QWORD *)v36 + 1) = v24;
      }
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v25 = mlir::IntegerType::get((uint64_t)a1, 0x20u, 1u);
    v26 = mlir::RankedTensorType::get((uint64_t)v36, v37, v25, 0);
    v27 = *(_DWORD *)(a11 + 8);
    if (v27 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
      v27 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v27) = v26;
    ++*(_DWORD *)(a11 + 8);
    v22 = v36;
    if (v36 != v38)
LABEL_22:
      free(v22);
  }
  else
  {
    v19 = mlir::IntegerType::get((uint64_t)a1, 0x20u, 1u);
    v20 = mlir::RankedTensorType::get((uint64_t)v36, v37, v19, 0);
    v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = v20;
    ++*(_DWORD *)(a11 + 8);
    v22 = v36;
    if (v36 != v38)
      goto LABEL_22;
  }
  return 1;
}

uint64_t mlir::mps::ImToColOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t Context;
  uint64_t v19;
  uint64_t v20;
  uint64_t ElementTypeOrSelf;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[3];
  void *v68;
  uint64_t v69;
  _QWORD v70[4];
  void *v71[2];
  _BYTE v72[64];
  void *v73;
  uint64_t v74;
  __int128 v75;
  void *v76[2];
  _BYTE v77[16];
  void *v78;
  uint64_t v79;
  __int128 v80;
  void *v81[2];
  _BYTE v82[16];
  void *v83;
  uint64_t v84;
  __int128 v85;
  void *v86[2];
  _BYTE v87[16];
  void *v88;
  uint64_t v89;
  _QWORD v90[4];
  uint64_t v91;
  _BYTE v92[8];
  char v93;
  __int128 v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v101 = a4;
  v102 = a5;
  if (a7)
  {
    v14 = *a7;
    v15 = a7[1];
    v16 = (_QWORD *)*((_QWORD *)a7 + 4);
  }
  else
  {
    v16 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
  }
  v91 = a6;
  v92[0] = 0;
  v93 = 0;
  v94 = v14;
  v95 = v15;
  v96 = v16;
  v97 = a9;
  v17 = a5;
  v98 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v91);
    if (v93)
      v93 = 0;
    mlir::OperationName::OperationName(v92, "mps.im_to_col", 13, Context);
    v93 = 1;
    v17 = v102;
  }
  v99 = a4;
  v100 = a5;
  if (v17 != 1
    || (v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::ImToColOpAdaptor::verify(&v91, v19)))
  {
    v24 = mlir::Float32Type::get(this, a2);
    v25 = mlir::UnrankedTensorType::get(v24);
    v26 = *(unsigned int *)(a11 + 8);
    if (v26 >= *(_DWORD *)(a11 + 12))
    {
LABEL_28:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
      LODWORD(v26) = *(_DWORD *)(a11 + 8);
    }
LABEL_14:
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  v20 = mlir::ValueRange::dereference_iterator(&v101, 0);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  v22 = (_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
  {
    v63 = 0;
    v64 = 0;
    goto LABEL_27;
  }
  v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  v63 = v22;
  v64 = v23;
  if (!v22
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63), v28 != 4))
  {
LABEL_27:
    v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v26 = *(unsigned int *)(a11 + 8);
    if (v26 >= *(_DWORD *)(a11 + 12))
      goto LABEL_28;
    goto LABEL_14;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
  v30 = *((_QWORD *)&v95 + 1);
  v31 = *ArgAttrsAttr;
  v32 = 3;
  v33 = 1;
  if (*(_DWORD *)(v94 + 8))
    v34 = 3;
  else
    v34 = 1;
  if (*(_DWORD *)(v94 + 8))
    v32 = 2;
  else
    v33 = 2;
  v35 = ArgAttrsAttr[v34];
  v36 = ArgAttrsAttr[v33];
  v37 = ArgAttrsAttr[v32];
  v88 = v90;
  v90[0] = v31;
  v90[1] = v35;
  v90[2] = v36;
  v90[3] = v37;
  v89 = 0x400000004;
  v86[0] = v87;
  v86[1] = (void *)0x200000000;
  if (*((_QWORD *)&v95 + 1))
    v38 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v95 + 1) + 8);
  else
    v38 = 0;
  mlir::getIntValues<long long>(v30, v38, (uint64_t)v86, 1);
  v83 = &v85;
  v85 = *(_OWORD *)v86[0];
  v84 = 0x200000002;
  v81[0] = v82;
  v81[1] = (void *)0x200000000;
  v39 = (uint64_t)v96;
  if (v96)
    v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v96 + 8);
  else
    v40 = 0;
  mlir::getIntValues<long long>(v39, v40, (uint64_t)v81, 1);
  v78 = &v80;
  v80 = *(_OWORD *)v81[0];
  v79 = 0x200000002;
  v76[0] = v77;
  v76[1] = (void *)0x200000000;
  v41 = *((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
    v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((_QWORD **)&v94 + 1) + 8);
  else
    v42 = 0;
  mlir::getIntValues<long long>(v41, v42, (uint64_t)v76, 1);
  v73 = &v75;
  v75 = *(_OWORD *)v76[0];
  v74 = 0x200000002;
  v71[0] = v72;
  v71[1] = (void *)0x800000000;
  v43 = v95;
  if ((_QWORD)v95)
    v44 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v95 + 8);
  else
    v44 = 0;
  mlir::getIntValues<long long>(v43, v44, (uint64_t)v71, 1);
  v45 = 16;
  v46 = 32;
  if (!*(_DWORD *)(v94 + 8))
    v45 = 32;
  v47 = 24;
  v48 = 40;
  if (!*(_DWORD *)(v94 + 8))
  {
    v47 = 40;
    v46 = 48;
    v48 = 56;
  }
  v49 = *(_QWORD *)((char *)v71[0] + v45);
  v50 = *(_QWORD *)((char *)v71[0] + v47);
  v51 = *(_QWORD *)((char *)v71[0] + v46);
  v52 = *(_QWORD *)((char *)v71[0] + v48);
  v68 = v70;
  v70[0] = v49;
  v70[1] = v50;
  v70[2] = v51;
  v70[3] = v52;
  v69 = 0x400000004;
  v65 = v67;
  v66 = 0x300000003;
  v67[0] = *(_QWORD *)v88;
  v53 = *(_QWORD *)v83;
  v54 = *((_QWORD *)v83 + 1);
  v67[1] = *(_QWORD *)v83 * *((_QWORD *)v88 + 1) * v54;
  v55 = *((_QWORD *)v88 + 2);
  v56 = *((_QWORD *)v88 + 3);
  v57 = 0x8000000000000000;
  v58 = 0x8000000000000000;
  if (v55 != 0x8000000000000000 && v53 != 0x8000000000000000)
    v58 = (v55 + v49 + ~(*(_QWORD *)v73 * (v53 - 1)) + v50 + *(_QWORD *)v78) / *(_QWORD *)v78;
  if (v56 != 0x8000000000000000 && v54 != 0x8000000000000000)
    v57 = (v51 + v56 + ~(*((_QWORD *)v73 + 1) * (v54 - 1)) + v52 + *((_QWORD *)v78 + 1)) / *((_QWORD *)v78 + 1);
  v59 = 0x8000000000000000;
  if (v57 != 0x8000000000000000 && v58 != 0x8000000000000000)
    v59 = v57 * v58;
  v67[2] = v59;
  v61 = mlir::RankedTensorType::get((uint64_t)v67, 3, ElementTypeOrSelf, 0);
  v62 = *(unsigned int *)(a11 + 8);
  if (v62 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v62 + 1, 8);
    LODWORD(v62) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v62) = v61;
  ++*(_DWORD *)(a11 + 8);
  if (v65 != v67)
    free(v65);
  if (v68 != v70)
    free(v68);
  if (v71[0] != v72)
    free(v71[0]);
  if (v73 != &v75)
    free(v73);
  if (v76[0] != v77)
    free(v76[0]);
  if (v78 != &v80)
    free(v78);
  if (v81[0] != v82)
    free(v81[0]);
  if (v83 != &v85)
    free(v83);
  if (v86[0] != v87)
    free(v86[0]);
  if (v88 != v90)
    free(v88);
  return 1;
}

uint64_t mlir::mps::ImToColOpAdaptor::verify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *Type;
  _QWORD *v10;
  _QWORD *ArgAttrsAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  _QWORD **v48;
  _QWORD **v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  _QWORD **v54;
  _QWORD **v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  const char *v60;
  _QWORD **v61;
  _QWORD **v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  const char *v68;
  uint64_t v69;
  const char *OperandRange;
  const char *v71;
  uint64_t v72;
  __int16 v73;
  _QWORD v74[2];
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  void *__p;
  _QWORD **v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = a1[3];
  if (v3)
  {
    v4 = (const char *)a1[4];
    if (v4)
    {
      v5 = (const char *)a1[5];
      if (v5)
      {
        v6 = (const char *)a1[6];
        if (v6)
        {
          v7 = (const char *)a1[7];
          if (v7)
          {
            v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v6 + 8);
            v71 = v6;
            v72 = v8;
            Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v71);
            v10 = Type;
            if (Type)
              Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
            v76 = v10;
            v77 = Type;
            ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
            v74[0] = 2;
            if (v12 == 1
              && *ArgAttrsAttr == v74[0]
              && (OperandRange = v6,
                  llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
              && (v68 = v6,
                  *(_QWORD *)&v75 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v68),
                  *((_QWORD *)&v75 + 1) = v13,
                  v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75),
                  mlir::Type::isUnsignedInteger((mlir::Type *)&v69, 64)))
            {
              v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v7 + 8);
              v71 = v7;
              v72 = v14;
              v15 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v71);
              v16 = v15;
              if (v15)
                v15 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
              v76 = v16;
              v77 = v15;
              v17 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
              v74[0] = 2;
              if (v18 == 1
                && *v17 == v74[0]
                && (OperandRange = v7,
                    llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                && (v68 = v7,
                    *(_QWORD *)&v75 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v68),
                    *((_QWORD *)&v75 + 1) = v19,
                    v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&v69, 64)))
              {
                v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v4 + 8);
                v71 = v4;
                v72 = v20;
                v21 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v71);
                v22 = v21;
                if (v21)
                  v21 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                v76 = v22;
                v77 = v21;
                v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
                v74[0] = 2;
                if (v24 == 1
                  && *v23 == v74[0]
                  && (OperandRange = v4,
                      llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                  && (v68 = v4,
                      *(_QWORD *)&v75 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v68),
                      *((_QWORD *)&v75 + 1) = v25,
                      v69 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&v69, 64)))
                {
                  v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v5 + 8);
                  v71 = v5;
                  v72 = v26;
                  v27 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v71);
                  v28 = v27;
                  if (v27)
                    v27 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
                  v76 = v28;
                  v77 = v27;
                  v29 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
                  v75 = xmmword_181240890;
                  if (v30 == 2
                    && (*v29 == (_QWORD)v75 ? (v31 = v29[1] == *((_QWORD *)&v75 + 1)) : (v31 = 0),
                        v31
                     && (v69 = (uint64_t)v5,
                         v74[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
                         v74[1] = v32,
                         OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74),
                         mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                  {
                    if (*(_DWORD *)(v3 + 8) < 2u)
                      return 1;
                    v60 = "'mps.im_to_col' op attribute 'data_layout' failed to satisfy constraint: valid TensorDataLayou"
                          "t is one of NCHW or NHWC";
                  }
                  else
                  {
                    v60 = "'mps.im_to_col' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements at"
                          "tribute of shape {4, 2}";
                  }
                }
                else
                {
                  v60 = "'mps.im_to_col' op attribute 'dilation_rates' failed to satisfy constraint: positive ui64 elemen"
                        "ts attribute of shape {2}";
                }
              }
              else
              {
                v60 = "'mps.im_to_col' op attribute 'strides' failed to satisfy constraint: positive ui64 elements attrib"
                      "ute of shape {2}";
              }
            }
            else
            {
              v60 = "'mps.im_to_col' op attribute 'kernel_sizes' failed to satisfy constraint: positive ui64 elements att"
                    "ribute of shape {2}";
            }
            v71 = v60;
            v73 = 259;
            mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
            v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v76);
            return v33;
          }
          v71 = "'mps.im_to_col' op requires attribute 'strides'";
          v73 = 259;
          mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
          v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
          if (v76)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
          if (v84)
          {
            v61 = (_QWORD **)__p;
            if (__p)
            {
              v62 = v83;
              v63 = __p;
              if (v83 != __p)
              {
                do
                  v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
                while (v62 != v61);
                v63 = __p;
              }
              v83 = v61;
              operator delete(v63);
            }
            v37 = v80;
            if (!v80)
              goto LABEL_109;
            v64 = v81;
            v39 = v80;
            if (v81 == v80)
            {
LABEL_108:
              v81 = v37;
              operator delete(v39);
LABEL_109:
              if (v78 != &v79)
                free(v78);
              return v33;
            }
            do
            {
              v66 = (void *)*--v64;
              v65 = v66;
              *v64 = 0;
              if (v66)
                operator delete[](v65);
            }
            while (v64 != v37);
LABEL_107:
            v39 = v80;
            goto LABEL_108;
          }
        }
        else
        {
          v71 = "'mps.im_to_col' op requires attribute 'kernel_sizes'";
          v73 = 259;
          mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
          v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
          if (v76)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
          if (v84)
          {
            v54 = (_QWORD **)__p;
            if (__p)
            {
              v55 = v83;
              v56 = __p;
              if (v83 != __p)
              {
                do
                  v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                v56 = __p;
              }
              v83 = v54;
              operator delete(v56);
            }
            v37 = v80;
            if (!v80)
              goto LABEL_109;
            v57 = v81;
            v39 = v80;
            if (v81 == v80)
              goto LABEL_108;
            do
            {
              v59 = (void *)*--v57;
              v58 = v59;
              *v57 = 0;
              if (v59)
                operator delete[](v58);
            }
            while (v57 != v37);
            goto LABEL_107;
          }
        }
      }
      else
      {
        v71 = "'mps.im_to_col' op requires attribute 'explicit_padding'";
        v73 = 259;
        mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
        v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
        if (v76)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
        if (v84)
        {
          v48 = (_QWORD **)__p;
          if (__p)
          {
            v49 = v83;
            v50 = __p;
            if (v83 != __p)
            {
              do
                v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
              while (v49 != v48);
              v50 = __p;
            }
            v83 = v48;
            operator delete(v50);
          }
          v37 = v80;
          if (!v80)
            goto LABEL_109;
          v51 = v81;
          v39 = v80;
          if (v81 == v80)
            goto LABEL_108;
          do
          {
            v53 = (void *)*--v51;
            v52 = v53;
            *v51 = 0;
            if (v53)
              operator delete[](v52);
          }
          while (v51 != v37);
          goto LABEL_107;
        }
      }
    }
    else
    {
      v71 = "'mps.im_to_col' op requires attribute 'dilation_rates'";
      v73 = 259;
      mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
      v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
      if (v76)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
      if (v84)
      {
        v42 = (_QWORD **)__p;
        if (__p)
        {
          v43 = v83;
          v44 = __p;
          if (v83 != __p)
          {
            do
              v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
            while (v43 != v42);
            v44 = __p;
          }
          v83 = v42;
          operator delete(v44);
        }
        v37 = v80;
        if (!v80)
          goto LABEL_109;
        v45 = v81;
        v39 = v80;
        if (v81 == v80)
          goto LABEL_108;
        do
        {
          v47 = (void *)*--v45;
          v46 = v47;
          *v45 = 0;
          if (v47)
            operator delete[](v46);
        }
        while (v45 != v37);
        goto LABEL_107;
      }
    }
  }
  else
  {
    v71 = "'mps.im_to_col' op requires attribute 'data_layout'";
    v73 = 259;
    mlir::emitError(a2, (uint64_t)&v71, (uint64_t)&v76);
    v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v76);
    if (v76)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v76);
    if (v84)
    {
      v34 = (_QWORD **)__p;
      if (__p)
      {
        v35 = v83;
        v36 = __p;
        if (v83 != __p)
        {
          do
            v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          v36 = __p;
        }
        v83 = v34;
        operator delete(v36);
      }
      v37 = v80;
      if (!v80)
        goto LABEL_109;
      v38 = v81;
      v39 = v80;
      if (v81 == v80)
        goto LABEL_108;
      do
      {
        v41 = (void *)*--v38;
        v40 = v41;
        *v38 = 0;
        if (v41)
          operator delete[](v40);
      }
      while (v38 != v37);
      goto LABEL_107;
    }
  }
  return v33;
}

uint64_t mlir::mps::ImToColOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  const void **v17;
  __int16 v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD **v25;
  char v26;
  _QWORD v27[2];
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v27[0] = v28;
  v27[1] = 0x600000000;
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v27, 1);
  v5 = (void *)v27[0];
  v6 = *(_QWORD *)v27[0];
  if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8))
  {
    if (!v6 && !*(_QWORD *)(v27[0] + 8) && !*(_QWORD *)(v27[0] + 48) && !*(_QWORD *)(v27[0] + 56))
      goto LABEL_37;
  }
  else if (!v6 && !*(_QWORD *)(v27[0] + 8) && !*(_QWORD *)(v27[0] + 16) && !*(_QWORD *)(v27[0] + 24))
  {
LABEL_37:
    v7 = 1;
    if ((_QWORD *)v27[0] == v28)
      return v7;
    goto LABEL_35;
  }
  v17 = (const void **)"failed: padding should be nonzero on spatial dimension only";
  v18 = 259;
  mlir::OpState::emitOpError(this, &v17, (uint64_t)v19);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = (_QWORD **)__p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = (void *)*--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            operator delete[](v14);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  v5 = (void *)v27[0];
  if ((_QWORD *)v27[0] != v28)
LABEL_35:
    free(v5);
  return v7;
}

uint64_t mlir::mps::get2DElementsForImToCol(mlir::Builder *a1, __int128 *a2)
{
  uint64_t IntegerType;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = &v11;
  v11 = *a2;
  v10 = 0x200000002;
  v8 = 2;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v3 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v8, 1, IntegerType, 0);
  v4 = v3;
  if (v3)
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  else
    v5 = 0;
  v6 = mlir::DenseElementsAttr::getFromRawBuffer(v4, v5, v9, 8 * v10, 8, 1, 0);
  if (v9 != &v11)
    free(v9);
  return v6;
}

uint64_t mlir::mps::getFormattedPaddingImToCol(mlir::Builder *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t IntegerType;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v20 = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, 8uLL, 8);
  v10 = v20;
  v11 = (char *)v19 + 8 * v20;
  if (a4)
  {
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    v11[3] = v6;
    v11[4] = v9;
    v11[5] = v8;
    v11[6] = 0;
    v11[7] = 0;
  }
  else
  {
    *(_OWORD *)v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    v11[4] = v7;
    v11[5] = v6;
    v11[6] = v9;
    v11[7] = v8;
  }
  LODWORD(v20) = v10 + 8;
  v18 = xmmword_181240890;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  v13 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v18, 2, IntegerType, 0);
  v14 = v13;
  if (v13)
    v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  else
    v15 = 0;
  v16 = mlir::DenseElementsAttr::getFromRawBuffer(v14, v15, v19, 8 * v20, 8, 1, 0);
  if (v19 != v21)
    free(v19);
  return v16;
}

uint64_t mlir::mps::ColToImOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t ElementTypeOrSelf;
  uint64_t TensorType;
  uint64_t v21;
  uint64_t v23;
  char v24[8];
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33[0] = a4;
  v33[1] = a5;
  if (a7)
  {
    v13 = *a7;
    v14 = a7[1];
    v15 = *((_QWORD *)a7 + 4);
  }
  else
  {
    v15 = 0;
    v13 = 0uLL;
    v14 = 0uLL;
  }
  v23 = a6;
  v24[0] = 0;
  v25 = 0;
  v26 = v13;
  v27 = v14;
  v28 = v15;
  v29 = a9;
  v30 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v23);
    if (v25)
      v25 = 0;
    mlir::OperationName::OperationName(v24, "mps.col_to_im", 13, Context);
    v25 = 1;
  }
  v31 = a4;
  v32 = a5;
  v17 = mlir::ValueRange::dereference_iterator(v33, 0);
  v34 = v31;
  v35 = 1;
  v34 = mlir::ValueRange::offset_base(&v34, 1);
  v35 = 0;
  v18 = mlir::ValueRange::dereference_iterator(&v34, 0);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8));
  TensorType = mlir::mps::getTensorType(v18, ElementTypeOrSelf);
  v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v21) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ColToImOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *ArgAttrsAttr;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD **v67;
  _QWORD **v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  void *v74;
  const void **v75;
  __int16 v76;
  _QWORD v77[2];
  _QWORD v78[2];
  void *v79;
  uint64_t v80;
  _QWORD v81[2];
  unint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[4];
  void *v86;
  uint64_t v87;
  _WORD v88[16];
  void *v89;
  uint64_t v90;
  __int128 v91;
  void *v92[2];
  _BYTE v93[16];
  void *v94;
  uint64_t v95;
  __int128 v96;
  void *v97[2];
  _BYTE v98[16];
  void *v99;
  uint64_t v100;
  __int128 v101;
  _QWORD v102[2];
  _BYTE v103[16];
  _QWORD v104[3];
  void *v105;
  _BYTE v106[96];
  void *v107;
  _QWORD *v108;
  void *__p;
  _QWORD **v110;
  char v111;
  void *v112[2];
  _QWORD v113[8];

  v113[6] = *MEMORY[0x1E0C80C00];
  v112[0] = v113;
  v112[1] = (void *)0x600000000;
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *(_QWORD **)(v2 + 16);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  else
    v4 = 0;
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v112, 1);
  v5 = *((unsigned int *)*this + 11);
  v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1)];
  v8 = *(_QWORD *)(v6 + 64);
  v7 = v6 + 64;
  v9 = *(_QWORD *)v112[0];
  if (*(_DWORD *)(v8 + 8))
  {
    if (!v9 && !*((_QWORD *)v112[0] + 1) && !*((_QWORD *)v112[0] + 6) && !*((_QWORD *)v112[0] + 7))
    {
LABEL_37:
      v102[0] = v103;
      v102[1] = 0x200000000;
      if (BYTE3(v5))
        v21 = v7;
      else
        v21 = 0;
      v22 = *(_QWORD **)(v21 + 24);
      if (v22)
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v22 + 8);
      else
        v23 = 0;
      mlir::getIntValues<long long>((uint64_t)v22, v23, (uint64_t)v102, 1);
      v24 = *((unsigned int *)*this + 11);
      v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1) + 8];
      v99 = &v101;
      v101 = *(_OWORD *)v102[0];
      v100 = 0x200000002;
      v97[0] = v98;
      v97[1] = (void *)0x200000000;
      if (BYTE3(v24))
        v26 = v25;
      else
        v26 = 0;
      v27 = *(_QWORD **)(v26 + 32);
      if (v27)
        v28 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8);
      else
        v28 = 0;
      mlir::getIntValues<long long>((uint64_t)v27, v28, (uint64_t)v97, 1);
      v29 = *((unsigned int *)*this + 11);
      v30 = (uint64_t)&(*this)[2 * ((v29 >> 23) & 1) + 8];
      v94 = &v96;
      v96 = *(_OWORD *)v97[0];
      v95 = 0x200000002;
      v92[0] = v93;
      v92[1] = (void *)0x200000000;
      if (BYTE3(v29))
        v31 = v30;
      else
        v31 = 0;
      v32 = *(_QWORD **)(v31 + 8);
      if (v32)
        v33 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8);
      else
        v33 = 0;
      v10 = 1;
      mlir::getIntValues<long long>((uint64_t)v32, v33, (uint64_t)v92, 1);
      v34 = *this;
      v89 = &v91;
      v91 = *(_OWORD *)v92[0];
      v90 = 0x200000002;
      v35 = *((_DWORD *)v34 + 9);
      v36 = (uint64_t)(v34 - 2);
      if (v35)
        v37 = v36;
      else
        v37 = 0;
      v38 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38)
      {
        v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v38 + 8);
        v78[0] = v38;
        v78[1] = v39;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
        {
          ArgAttrsAttr = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
          v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
          v43 = (_BYTE *)(v41 + 8 * v42);
          v86 = v88;
          v87 = 0x400000000;
          v44 = v43 - ArgAttrsAttr;
          if ((unint64_t)(v43 - ArgAttrsAttr) < 0x21)
          {
            v45 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v88, v44 >> 3, 8);
            v45 = v87;
          }
          if (v43 != ArgAttrsAttr)
          {
            memcpy((char *)v86 + 8 * v45, ArgAttrsAttr, v43 - ArgAttrsAttr);
            v45 = v87;
          }
          LODWORD(v87) = v45 + ((unint64_t)v44 >> 3);
          v46 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v78);
          v47 = *this;
          v48 = *v46;
          v49 = 3;
          v50 = 1;
          if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8))
            v51 = 3;
          else
            v51 = 1;
          if (!*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8))
            v50 = 2;
          v52 = v46[v51];
          if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8))
            v49 = 2;
          v53 = v46[v50];
          v54 = v46[v49];
          v82 = 0;
          v83 = v85;
          v85[0] = v48;
          v85[1] = v52;
          v85[2] = v53;
          v85[3] = v54;
          v84 = 0x400000004;
          v79 = v81;
          v80 = 0x300000003;
          v81[0] = v48;
          v56 = *(_QWORD *)v99;
          v55 = *((_QWORD *)v99 + 1);
          v81[1] = *(_QWORD *)v99 * v52 * v55;
          v57 = 0x8000000000000000;
          v58 = 0x8000000000000000;
          if (v53 != 0x8000000000000000 && v56 != 0x8000000000000000)
            v58 = (*(_QWORD *)v112[0] + ~(*(_QWORD *)v89 * (v56 - 1)) + *((_QWORD *)v112[0] + 1) + *(_QWORD *)v94 + v53)
                / *(_QWORD *)v94;
          if (v54 != 0x8000000000000000 && v55 != 0x8000000000000000)
            v57 = (*((_QWORD *)v112[0] + 2)
                 + ~(*((_QWORD *)v89 + 1) * (v55 - 1))
                 + *((_QWORD *)v112[0] + 3)
                 + *((_QWORD *)v94 + 1)
                 + v54)
                / *((_QWORD *)v94 + 1);
          v59 = 0x8000000000000000;
          if (v57 != 0x8000000000000000 && v58 != 0x8000000000000000)
            v59 = v57 * v58;
          v82 = v59;
          v61 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (v61)
            v62 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v61 + 8);
          else
            v62 = 0;
          v77[0] = v61;
          v77[1] = v62;
          v63 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v77);
          if (!v77[0]
            || (v65 = (_QWORD *)v63,
                v66 = v64,
                !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v77))
            || *v65 == *(_QWORD *)v79
            && v65[1] == *((_QWORD *)v79 + 1)
            && v65[2] == *((_QWORD *)v79 + 2)
            && v66 == 3
            && v80 == 3)
          {
            v10 = 1;
          }
          else
          {
            v75 = (const void **)"failed: invalid output shape for input & attributes.";
            v76 = 259;
            mlir::OpState::emitOpError(this, &v75, (uint64_t)v104);
            v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v104);
            if (v104[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v104);
            if (v111)
            {
              v67 = (_QWORD **)__p;
              if (__p)
              {
                v68 = v110;
                v69 = __p;
                if (v110 != __p)
                {
                  do
                    v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
                  while (v68 != v67);
                  v69 = __p;
                }
                v110 = v67;
                operator delete(v69);
              }
              v70 = v107;
              if (v107)
              {
                v71 = v108;
                v72 = v107;
                if (v108 != v107)
                {
                  do
                  {
                    v74 = (void *)*--v71;
                    v73 = v74;
                    *v71 = 0;
                    if (v74)
                      operator delete[](v73);
                  }
                  while (v71 != v70);
                  v72 = v107;
                }
                v108 = v70;
                operator delete(v72);
              }
              if (v105 != v106)
                free(v105);
            }
          }
          if (v79 != v81)
            free(v79);
          if (v83 != v85)
            free(v83);
          if (v86 != v88)
            free(v86);
        }
      }
      if (v89 != &v91)
        free(v89);
      if (v92[0] != v93)
        free(v92[0]);
      if (v94 != &v96)
        free(v94);
      if (v97[0] != v98)
        free(v97[0]);
      if (v99 != &v101)
        free(v99);
      v19 = (void *)v102[0];
      if ((_BYTE *)v102[0] == v103)
        goto LABEL_34;
LABEL_33:
      free(v19);
      goto LABEL_34;
    }
  }
  else if (!v9 && !*((_QWORD *)v112[0] + 1) && !*((_QWORD *)v112[0] + 2) && !*((_QWORD *)v112[0] + 3))
  {
    goto LABEL_37;
  }
  v86 = "failed: padding should be nonzero on spatial dimension only";
  v88[8] = 259;
  mlir::OpState::emitOpError(this, (const void ***)&v86, (uint64_t)v104);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v104);
  if (v104[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v104);
  if (v111)
  {
    v11 = (_QWORD **)__p;
    if (__p)
    {
      v12 = v110;
      v13 = __p;
      if (v110 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v110 = v11;
      operator delete(v13);
    }
    v14 = v107;
    if (v107)
    {
      v15 = v108;
      v16 = v107;
      if (v108 != v107)
      {
        do
        {
          v18 = (void *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            operator delete[](v17);
        }
        while (v15 != v14);
        v16 = v107;
      }
      v108 = v14;
      operator delete(v16);
    }
    v19 = v105;
    if (v105 != v106)
      goto LABEL_33;
  }
LABEL_34:
  if (v112[0] != v113)
    free(v112[0]);
  return v10;
}

uint64_t mlir::mps::ColToImOp::getKernelSizes(mlir::mps::ColToImOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 24);
}

uint64_t mlir::mps::ColToImOp::getStrides(mlir::mps::ColToImOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  return *(_QWORD *)(v1 + 32);
}

uint64_t mlir::mps::NonMaximumSuppressionOp::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  mlir::MLIRContext *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t Context;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *ArgAttrsAttr;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[2];
  mlir::UnknownLoc *v48;
  uint64_t v49;
  _BYTE v50[8];
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  void *v58[2];
  _QWORD v59[3];
  void *v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v47[1] = a11;
  v48 = a1;
  v47[0] = &v48;
  v58[0] = v59;
  memset_pattern16(v59, &unk_1812352C0, 0x18uLL);
  v58[1] = (void *)0x300000003;
  v59[2] = 2;
  if (a7)
  {
    v16 = *a7;
    v17 = *((_QWORD *)a7 + 2);
  }
  else
  {
    v17 = 0;
    v16 = 0uLL;
  }
  v49 = a6;
  v50[0] = 0;
  v51 = 0;
  v52 = v16;
  v53 = v17;
  v54 = a9;
  v55 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v49);
    if (v51)
      v51 = 0;
    mlir::OperationName::OperationName(v50, "mps.non_maximum_suppression", 27, Context);
    v51 = 1;
  }
  v56 = a4;
  v57 = a5;
  if (a5)
  {
    v19 = mlir::UnknownLoc::get(v48, v15);
    if (mlir::mps::NonMaximumSuppressionOpAdaptor::verify((uint64_t)&v49, v19))
    {
      v45 = (_QWORD *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        mlir::IntegerAttr::getValue(&v45, (llvm::APInt *)&v60);
        if (v61 >= 0x41 && v60)
          operator delete[](v60);
        v45 = (_QWORD *)*((_QWORD *)&v52 + 1);
        if (*((_QWORD *)&v52 + 1))
        {
          mlir::IntegerAttr::getValue(&v45, (llvm::APInt *)&v60);
          if (v61 >= 0x41)
            v20 = (void **)v60;
          else
            v20 = &v60;
          v21 = *(unsigned int *)v20;
          if (v61 >= 0x41 && v60)
            operator delete[](v60);
        }
        else
        {
          v21 = 0;
        }
        *((_QWORD *)v58[0] + 1) = v21;
      }
      v60 = v56;
      v61 = 0;
      v22 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
      {
        v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
        v45 = v22;
        v46 = v23;
        if (v22)
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v45))
          {
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
            if (v24 == 3)
            {
              ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
              v26 = v58[0];
              *(_QWORD *)v58[0] = *ArgAttrsAttr;
              if (v26[1] == 0x8000000000000000)
              {
                v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
                *((_QWORD *)v58[0] + 1) = *(_QWORD *)(v27 + 8);
              }
            }
          }
        }
      }
      else
      {
        v45 = 0;
        v46 = 0;
      }
      v28 = v58[0];
      if (*(_QWORD *)v58[0] == 0x8000000000000000 || *((_QWORD *)v58[0] + 1) == 0x8000000000000000)
      {
        if (a5 < 2)
          goto LABEL_59;
        v60 = v56;
        v61 = 1;
        v60 = (void *)mlir::ValueRange::offset_base(&v60, 1);
        v61 = 0;
        v29 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8))
        {
          v30 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8);
          v60 = v29;
          v61 = v30;
          if (v29)
          {
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
            {
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
              if (v31 == 3)
              {
                v32 = v58[0];
                if (*(_QWORD *)v58[0] == 0x8000000000000000)
                {
                  v33 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
                  v32 = v58[0];
                  *(_QWORD *)v58[0] = *v33;
                }
                if (v32[1] == 0x8000000000000000)
                {
                  v34 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
                  *((_QWORD *)v58[0] + 1) = *(_QWORD *)(v34 + 8);
                }
              }
            }
          }
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
        v28 = v58[0];
        if (*(_QWORD *)v58[0] == 0x8000000000000000)
          goto LABEL_64;
      }
      if (v28[1] == 0x8000000000000000)
      {
LABEL_64:
        if (a5 >= 3)
        {
          v35 = v57;
          v60 = v56;
          v61 = 2;
          v36 = (void *)mlir::ValueRange::offset_base(&v60, 2);
          if (v35 - 2 != v61)
          {
            v60 = v36;
            v61 = 0;
            if (mlir::ValueRange::dereference_iterator(&v60, 0))
            {
              v60 = v56;
              v61 = 2;
              v60 = (void *)mlir::ValueRange::offset_base(&v60, 2);
              v61 = 0;
              v37 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
              v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
              if (v38)
                v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
              else
                v37 = 0;
              v60 = v37;
              v61 = v38;
              if (v37)
              {
                if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
                {
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
                  if (v39 == 2)
                  {
                    v40 = v58[0];
                    if (*(_QWORD *)v58[0] == 0x8000000000000000)
                    {
                      v41 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
                      v40 = v58[0];
                      *(_QWORD *)v58[0] = *v41;
                    }
                    if (v40[1] == 0x8000000000000000)
                    {
                      v42 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v60);
                      *((_QWORD *)v58[0] + 1) = *(_QWORD *)(v42 + 8);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_59:
  v43 = mlir::mps::NonMaximumSuppressionOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()((uint64_t)v47, (uint64_t)v58);
  if (v58[0] != v59)
    free(v58[0]);
  return v43;
}

uint64_t mlir::mps::NonMaximumSuppressionOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[3];
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p;
  _QWORD **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
    return 1;
  v13[0] = *(_QWORD *)(a1 + 32);
  v15[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)v15, 32))
    return 1;
  v13[0] = "'mps.non_maximum_suppression' op attribute 'max_boxes' failed to satisfy constraint: 32-bit unsigned integer attribute";
  v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)v15);
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  if (v22)
  {
    v5 = (_QWORD **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
    v8 = v18;
    if (v18)
    {
      v9 = v19;
      v10 = v18;
      if (v19 != v18)
      {
        do
        {
          v12 = (void *)*--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            operator delete[](v11);
        }
        while (v9 != v8);
        v10 = v18;
      }
      v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17)
      free(v16);
  }
  return v3;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v4 = mlir::IntegerType::get(**(_QWORD **)a1, 0x20u, 1u);
  v5 = mlir::IntegerType::get(**(_QWORD **)a1, 0x20u, 2u);
  v6 = *(_QWORD **)a2;
  v14[0] = **(_QWORD **)a2;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = mlir::RankedTensorType::get((uint64_t)v6, *(unsigned int *)(a2 + 8), v4, 0);
  v9 = *(unsigned int *)(v7 + 8);
  if (v9 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(v7 + 16), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = v8;
  ++*(_DWORD *)(v7 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = mlir::RankedTensorType::get((uint64_t)v14, 1, v5, 0);
  v12 = *(unsigned int *)(v10 + 8);
  if (v12 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v10 + 16), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v12) = v11;
  ++*(_DWORD *)(v10 + 8);
  return 1;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::verify(uint64_t **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *ArgAttrsAttr;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD **v34;
  _QWORD **v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  _QWORD *v50;
  uint64_t v51;
  const void **v52[4];
  __int16 v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[3];
  void *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD **v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    v5 = (*this)[9];
    v56 = v3;
    v57 = v4;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
      goto LABEL_3;
LABEL_20:
    v54 = v6;
    v55 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
      goto LABEL_4;
LABEL_21:
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
      goto LABEL_14;
LABEL_22:
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
    if (v23 != 3
      || v12 && *ArgAttrsAttr != 0x8000000000000000 && *ArgAttrsAttr != v13
      || (v24 = ArgAttrsAttr[1], v14) && v24 != 0x8000000000000000 && v24 != v15)
    {
      v52[0] = (const void **)"scores tensor must have shape [N, B, K]";
      v53 = 259;
      mlir::OpState::emitOpError(this, v52, (uint64_t)v58);
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
      if (v58[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
      if (!v65)
        return v25;
      v26 = (_QWORD **)__p;
      if (__p)
      {
        v27 = v64;
        v28 = __p;
        if (v64 != __p)
        {
          do
            v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          v28 = __p;
        }
        v64 = v26;
        operator delete(v28);
      }
      v29 = v61;
      if (v61)
      {
        v30 = v62;
        v31 = v61;
        if (v62 == v61)
          goto LABEL_93;
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
LABEL_92:
        v31 = v61;
LABEL_93:
        v62 = v29;
        operator delete(v31);
      }
LABEL_94:
      if (v59 != &v60)
        free(v59);
      return v25;
    }
    if (*ArgAttrsAttr != 0x8000000000000000)
    {
      v13 = *ArgAttrsAttr;
      v12 = 1;
    }
    if (v24 != 0x8000000000000000)
    {
      v15 = ArgAttrsAttr[1];
      v14 = 1;
    }
    v40 = ArgAttrsAttr[2];
    v17 = v40 != 0x8000000000000000;
    if (v40 == 0x8000000000000000)
      v16 = 0;
    else
      v16 = ArgAttrsAttr[2];
    v18 = *this;
    if (*((_DWORD *)*this + 17) == 4)
      return 1;
    goto LABEL_15;
  }
  v56 = 0;
  v57 = 0;
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_20;
LABEL_3:
  v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  v54 = v6;
  v55 = v7;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
    goto LABEL_21;
LABEL_4:
  v8 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  if (v9 != 3 || (v10 = v8[2], v10 != 0x8000000000000000) && v10 != 4)
  {
    v52[0] = (const void **)"boxes tensor must have shape [N, B, 4]";
    v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v58);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
    if (v58[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
    if (!v65)
      return v25;
    v34 = (_QWORD **)__p;
    if (__p)
    {
      v35 = v64;
      v36 = __p;
      if (v64 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v64 = v34;
      operator delete(v36);
    }
    v29 = v61;
    if (v61)
    {
      v37 = v62;
      v31 = v61;
      if (v62 == v61)
        goto LABEL_93;
      do
      {
        v39 = (void *)*--v37;
        v38 = v39;
        *v37 = 0;
        if (v39)
          operator delete[](v38);
      }
      while (v37 != v29);
      goto LABEL_92;
    }
    goto LABEL_94;
  }
  v11 = v8[1];
  v12 = *v8 != 0x8000000000000000;
  if (*v8 == 0x8000000000000000)
    v13 = 0;
  else
    v13 = *v8;
  v14 = v11 != 0x8000000000000000;
  if (v11 == 0x8000000000000000)
    v15 = 0;
  else
    v15 = v8[1];
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
    goto LABEL_22;
LABEL_14:
  v16 = 0;
  v17 = 0;
  v18 = *this;
  if (*((_DWORD *)*this + 17) == 4)
    return 1;
LABEL_15:
  v19 = *(_QWORD *)(v18[9] + 88);
  if (!v19)
    return 1;
  v20 = (_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v20)
  {
    v50 = 0;
    v51 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
      goto LABEL_67;
    return 1;
  }
  v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  v50 = v20;
  v51 = v21;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
    return 1;
LABEL_67:
  v41 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
  if (v42 != 2
    || v12 && *v41 != 0x8000000000000000 && *v41 != v13
    || v14 && *v41 != 0x8000000000000000 && v41[1] != v15)
  {
    v52[0] = (const void **)"class_indices tensor must have shape [N, B]";
    v53 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v58);
    v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
    if (v58[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
    if (!v65)
      return v25;
    v43 = (_QWORD **)__p;
    if (__p)
    {
      v44 = v64;
      v45 = __p;
      if (v64 != __p)
      {
        do
          v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
        while (v44 != v43);
        v45 = __p;
      }
      v64 = v43;
      operator delete(v45);
    }
    v29 = v61;
    if (v61)
    {
      v46 = v62;
      v31 = v61;
      if (v62 == v61)
        goto LABEL_93;
      do
      {
        v48 = (void *)*--v46;
        v47 = v48;
        *v46 = 0;
        if (v48)
          operator delete[](v47);
      }
      while (v46 != v29);
      goto LABEL_92;
    }
    goto LABEL_94;
  }
  if (v16 == 1 || !v17)
    return 1;
  v52[0] = (const void **)"when class_indices tensor is provided, scores tensor must have shape [N, B, 1]";
  v53 = 259;
  mlir::OpState::emitOpError(this, v52, (uint64_t)v58);
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v58);
  return v25;
}

uint64_t mlir::mps::NonMaximumSuppressionOp::getClassIndices(mlir::mps::NonMaximumSuppressionOp *this)
{
  if (*(_DWORD *)(*(_QWORD *)this + 68) == 4)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 88);
}

uint64_t mlir::mps::ACosOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ACoshOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ASinOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ASinhOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ATan2Op::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ATanOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ATanhOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::AbsoluteOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::AbsoluteSquareOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::AddOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::AndOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::AssignVariableOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BandPartOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BatchToSpaceOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BiasAddGradOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BiasAddOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseAndOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseLeftShiftOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseNotOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseOrOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwisePopcountOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseRightShiftOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BitwiseXorOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BroadcastGradientArgsOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::BroadcastToOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CallOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CastOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CeilOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ClampOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ColToImOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ConcatOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ConjugateOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ConstantOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv2DDataGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv2DOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv2DWeightsGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv3DDataGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv3DOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::Conv3DWeightsGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CosOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CoshOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CostVolumeOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CreateComplexOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CreateTextureTensorOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CropOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CropResizeOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CumulativeMaximumOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CumulativeMinimumOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CumulativeProductOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::CumulativeSumOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DegammaOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthToSpace2DOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv2DDataGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv2DOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv2DWeightsGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv3DOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DepthwiseConv3DWeightsGradientOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DequantizeLUTOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DequantizeOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DimensionSizeOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DiracOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DivideOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::DynamicShapeCastOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::EluOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::EqualToOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ErfOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ExpandDimsOp::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ExponentBase10Op::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

uint64_t mlir::mps::ExponentBase2Op::canonicalize(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t InterfaceFor;

  if (mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1))
  {
    if (a1)
    {
      v5 = a1;
      InterfaceFor = mlir::OpInterface<mlir::ExternalCanonicalizeInterface,mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits>::getInterfaceFor(a1);
      return mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v5, a2);
    }
    v5 = 0;
    InterfaceFor = 0;
  }
  else
  {
    v5 = 0;
    InterfaceFor = 0;
  }
  return 0;
}

