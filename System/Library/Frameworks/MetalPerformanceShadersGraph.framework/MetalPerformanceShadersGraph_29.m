void llvm::DataLayout::parseSpecifier(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  llvm *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unsigned int v45;
  uint8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t data_low;
  char v50;
  uint8x8_t v51;
  unsigned int v52;
  unint64_t v53;
  uint8x8_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  BOOL v59;
  _BOOL8 v60;
  __int16 data;
  __int16 v62;
  unint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  const char *v66;
  llvm *v67;
  uint64_t v68;
  uint64_t v69;
  std::error_code v70;
  const char *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  __int128 __dst;
  unint64_t v78;
  __int16 v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  std::string v83;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = a3;
  if (a3 >= 0x17)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v78 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v78) = a3;
    p_dst = &__dst;
    if (!a3)
    {
      LOBYTE(__dst) = 0;
      v9 = a1 + 216;
      if ((*(char *)(a1 + 239) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  memmove(p_dst, a2, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v9 = a1 + 216;
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)v9 = __dst;
    *(_QWORD *)(v9 + 16) = v78;
    if (!v5)
      goto LABEL_135;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)v9);
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(v9 + 16) = v78;
  if (!v5)
  {
LABEL_135:
    *a4 = 0;
    return;
  }
LABEL_12:
  v12 = a1 + 12;
  v13 = a1 + 4;
  v14 = a1 + 16;
  v15 = 0uLL;
  while (2)
  {
    v81 = v15;
    v82 = v15;
    split(a4, (uint64_t)a2, v5, 45, (uint64_t)&v81);
    if (*a4)
      return;
    v5 = *((_QWORD *)&v82 + 1);
    a2 = (const void *)v82;
    split(a4, v81, *((uint64_t *)&v81 + 1), 58, (uint64_t)&v81);
    if (*a4)
      return;
    v19 = *((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1) == 2)
    {
      v20 = (unsigned __int8 *)v81;
      if (*(_WORD *)v81 == 26990)
      {
        v21 = *((_QWORD *)&v82 + 1);
        while (1)
        {
          split(a4, v82, v21, 58, (uint64_t)&v81);
          if (*a4)
            break;
          v80 = 0;
          getInt<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v80);
          if (*a4)
            break;
          v22 = v80;
          if (!v80)
          {
            v66 = "Address space 0 can never be non-integral";
            goto LABEL_158;
          }
          v23 = *(unsigned int *)(a1 + 400);
          if (v23 >= *(unsigned int *)(a1 + 404))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 392, (void *)(a1 + 408), v23 + 1, 4);
            v23 = *(unsigned int *)(a1 + 400);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 392) + 4 * v23) = v22;
          ++*(_DWORD *)(a1 + 400);
          v21 = *((_QWORD *)&v82 + 1);
          if (!*((_QWORD *)&v82 + 1))
            goto LABEL_15;
        }
        return;
      }
    }
    else
    {
      v20 = (unsigned __int8 *)v81;
    }
    v24 = (char)*v20;
    v25 = *((_QWORD *)&v81 + 1) != 0;
    if (*((_QWORD *)&v81 + 1))
      v26 = v20 + 1;
    else
      v26 = v20;
    v27 = *((_QWORD *)&v81 + 1) - v25;
    *(_QWORD *)&v81 = v26;
    *((_QWORD *)&v81 + 1) -= v25;
    switch(v24)
    {
      case 'A':
        v16 = a4;
        v17 = v13;
        goto LABEL_14;
      case 'E':
        *(_BYTE *)a1 = 1;
        goto LABEL_15;
      case 'F':
        v30 = (char)*v26;
        if (v30 == 105)
        {
          v31 = 0;
        }
        else
        {
          if (v30 != 110)
          {
            v66 = "Unknown function pointer alignment type in datalayout string";
            goto LABEL_158;
          }
          v31 = 1;
        }
        *(_DWORD *)(a1 + 24) = v31;
        v59 = v19 == v25;
        v60 = v19 != v25;
        if (!v59)
          ++v26;
        *(_QWORD *)&v81 = v26;
        *((_QWORD *)&v81 + 1) = v27 - v60;
        v83.__r_.__value_.__r.__words[0] = 0;
        getIntInBytes<unsigned long long>(a4, v26, v27 - v60, (unint64_t *)&v83);
        if (*a4)
          return;
        data = (__int16)v83.__r_.__value_.__l.__data_;
        if (v83.__r_.__value_.__r.__words[0])
        {
          if ((v83.__r_.__value_.__r.__words[0] & (v83.__r_.__value_.__r.__words[0] - 1)) != 0)
          {
LABEL_148:
            v71 = "Alignment is neither 0 nor a power of 2";
            goto LABEL_165;
          }
          v62 = __clz(v83.__r_.__value_.__r.__words[0]) ^ 0x3F;
          data = 1;
        }
        else
        {
          v62 = 0;
        }
        *(_WORD *)(a1 + 20) = v62 | (data << 8);
LABEL_15:
        v15 = 0uLL;
        if (!v5)
          goto LABEL_135;
        continue;
      case 'G':
        v16 = a4;
        v17 = v14;
        goto LABEL_14;
      case 'P':
        v16 = a4;
        v17 = v12;
LABEL_14:
        getAddrSpace(v16, v26, v27, v17);
        if (!*a4)
          goto LABEL_15;
        return;
      case 'S':
        v83.__r_.__value_.__r.__words[0] = 0;
        getIntInBytes<unsigned long long>(a4, v26, v27, (unint64_t *)&v83);
        if (*a4)
          return;
        v32 = (__int16)v83.__r_.__value_.__l.__data_;
        if (v83.__r_.__value_.__r.__words[0])
        {
          if ((v83.__r_.__value_.__r.__words[0] & (v83.__r_.__value_.__r.__words[0] - 1)) != 0)
            goto LABEL_148;
          v33 = __clz(v83.__r_.__value_.__r.__words[0]) ^ 0x3F;
          v32 = 1;
        }
        else
        {
          v33 = 0;
        }
        *(_WORD *)(a1 + 8) = v33 | (v32 << 8);
        goto LABEL_15;
      case 'a':
      case 'f':
      case 'i':
      case 'v':
        v80 = 0;
        if (v19 == v25)
        {
          v28 = 0;
          v29 = v24 == 97;
        }
        else
        {
          getInt<unsigned int>(a4, v26, v27, &v80);
          if (*a4)
            return;
          v29 = v24 == 97;
          if (v24 == 97)
          {
            v28 = v80;
            if (v80)
            {
              v66 = "Sized aggregate specification in datalayout string";
              goto LABEL_158;
            }
          }
          else
          {
            v28 = v80;
          }
        }
        if (!*((_QWORD *)&v82 + 1))
        {
          v66 = "Missing alignment specification in datalayout string";
          goto LABEL_158;
        }
        split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
        if (*a4)
          return;
        LODWORD(v83.__r_.__value_.__l.__data_) = 0;
        getIntInBytes<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v83);
        if (*a4)
          return;
        v73 = v14;
        v47 = v13;
        v48 = v12;
        data_low = LODWORD(v83.__r_.__value_.__l.__data_);
        if (LODWORD(v83.__r_.__value_.__l.__data_))
          v50 = 1;
        else
          v50 = v29;
        if ((v50 & 1) == 0)
        {
          v71 = "ABI alignment specification must be >0 for non-aggregate types";
          goto LABEL_165;
        }
        if (LODWORD(v83.__r_.__value_.__l.__data_) >= 0x10000)
        {
          v71 = "Invalid ABI alignment, must be a 16bit integer";
          goto LABEL_165;
        }
        if (LODWORD(v83.__r_.__value_.__l.__data_))
        {
          v51 = (uint8x8_t)vcnt_s8((int8x8_t)LODWORD(v83.__r_.__value_.__l.__data_));
          v51.i16[0] = vaddlv_u8(v51);
          if (v51.u32[0] >= 2uLL)
          {
            v71 = "Invalid ABI alignment, must be a power of 2";
            goto LABEL_165;
          }
        }
        if (v24 == 105 && v28 == 8 && LODWORD(v83.__r_.__value_.__l.__data_) != 1)
        {
          v71 = "Invalid ABI alignment, i8 must be naturally aligned";
          goto LABEL_165;
        }
        v76 = v83.__r_.__value_.__l.__data_;
        v52 = v83.__r_.__value_.__l.__data_;
        v53 = LODWORD(v83.__r_.__value_.__l.__data_);
        if (*((_QWORD *)&v82 + 1))
        {
          split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
          if (*a4)
            return;
          getIntInBytes<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v76);
          if (*a4)
            return;
          v52 = v76;
          if (v76 >= 0x10000)
          {
            v71 = "Invalid preferred alignment, must be a 16bit integer";
            goto LABEL_165;
          }
          v53 = v76;
        }
        if (v52)
        {
          v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
          v54.i16[0] = vaddlv_u8(v54);
          if (v54.u32[0] >= 2uLL)
          {
            v71 = "Invalid preferred alignment, must be a power of 2";
            goto LABEL_165;
          }
        }
        v55 = 63 - __clz(data_low);
        v56 = 63 - __clz(v53);
        if ((_DWORD)data_low)
          v57 = v55;
        else
          v57 = 0;
        if (v52)
          v58 = v56;
        else
          v58 = 0;
        llvm::DataLayout::setAlignment(a1, v24, v57, v58, v28, a4);
        if (*a4)
          return;
        v12 = v48;
        v13 = v47;
        v14 = v73;
        goto LABEL_15;
      case 'e':
        *(_BYTE *)a1 = 0;
        goto LABEL_15;
      case 'm':
        if (v19 != v25)
        {
          v66 = "Unexpected trailing characters after mangling specifier in datalayout string";
          goto LABEL_158;
        }
        if (*((_QWORD *)&v82 + 1) == 1)
        {
          switch(*(_BYTE *)v82)
          {
            case 'a':
              *(_DWORD *)(a1 + 28) = 7;
              goto LABEL_15;
            case 'e':
              *(_DWORD *)(a1 + 28) = 1;
              goto LABEL_15;
            case 'l':
              *(_DWORD *)(a1 + 28) = 5;
              goto LABEL_15;
            case 'm':
              *(_DWORD *)(a1 + 28) = 6;
              goto LABEL_15;
            case 'o':
              *(_DWORD *)(a1 + 28) = 2;
              goto LABEL_15;
            case 'w':
              *(_DWORD *)(a1 + 28) = 3;
              goto LABEL_15;
            case 'x':
              *(_DWORD *)(a1 + 28) = 4;
              goto LABEL_15;
            default:
              v71 = "Unknown mangling in datalayout string";
              goto LABEL_165;
          }
        }
        if (!*((_QWORD *)&v82 + 1))
        {
          v66 = "Expected mangling specifier in datalayout string";
          goto LABEL_158;
        }
        v71 = "Unknown mangling specifier in datalayout string";
        goto LABEL_165;
      case 'n':
        v80 = 0;
        getInt<unsigned int>(a4, v26, v27, &v80);
        if (*a4)
          return;
        while (2)
        {
          v34 = v80;
          if (v80)
          {
            v35 = *(_QWORD *)(a1 + 40);
            if ((unint64_t)(v35 + 1) > *(_QWORD *)(a1 + 48))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 32, (void *)(a1 + 56), v35 + 1, 1);
              v35 = *(_QWORD *)(a1 + 40);
            }
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + v35) = v34;
            ++*(_QWORD *)(a1 + 40);
            if (*((_QWORD *)&v82 + 1))
            {
              split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
              if (*a4)
                return;
              v80 = 0;
              getInt<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v80);
              if (*a4)
                return;
              continue;
            }
            goto LABEL_15;
          }
          break;
        }
        v66 = "Zero width native integer type in datalayout string";
        goto LABEL_158;
      case 'p':
        v36 = 0;
        v80 = 0;
        if (v19 == v25)
          goto LABEL_66;
        getInt<unsigned int>(a4, v26, v27, &v80);
        if (*a4)
          return;
        v36 = v80;
        if (HIBYTE(v80))
        {
          v66 = "Invalid address space, must be a 24-bit integer";
LABEL_158:
          *(_QWORD *)&__dst = v66;
          v79 = 259;
          v67 = (llvm *)llvm::inconvertibleErrorCode(v18);
          v69 = v68;
          llvm::Twine::str((llvm::Twine *)&__dst, &v83);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70.__cat_ = (const std::error_category *)&v83;
          else
            v70.__cat_ = (const std::error_category *)v83.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v70.__val_ = v69;
          llvm::createStringError(v67, v70, a4);
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
          return;
        }
LABEL_66:
        if (!*((_QWORD *)&v82 + 1))
        {
          v66 = "Missing size specification for pointer in datalayout string";
          goto LABEL_158;
        }
        split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
        if (*a4)
          return;
        LODWORD(v83.__r_.__value_.__l.__data_) = 0;
        getInt<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v83);
        if (*a4)
          return;
        v37 = LODWORD(v83.__r_.__value_.__l.__data_);
        if (!LODWORD(v83.__r_.__value_.__l.__data_))
        {
          v71 = "Invalid pointer size of 0 bytes";
          goto LABEL_165;
        }
        if (!*((_QWORD *)&v82 + 1))
        {
          v71 = "Missing alignment specification for pointer in datalayout string";
          goto LABEL_165;
        }
        split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
        if (*a4)
          return;
        v76 = 0;
        getIntInBytes<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v76);
        if (*a4)
          return;
        v39 = v14;
        v40 = v13;
        v41 = v12;
        v42 = v76;
        if (!v76 || (v38.i32[0] = v76, v43 = (uint8x8_t)vcnt_s8(v38), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] >= 2uLL))
        {
          v71 = "Pointer ABI alignment must be a power of 2";
          goto LABEL_165;
        }
        v72 = v36;
        v74 = v76;
        v75 = v37;
        v44 = v37;
        v45 = v76;
        if (!*((_QWORD *)&v82 + 1))
          goto LABEL_124;
        split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
        if (*a4)
          return;
        getIntInBytes<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v74);
        if (*a4)
          return;
        v45 = v74;
        v46 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.i32[0] == 1)
        {
          if (*((_QWORD *)&v82 + 1))
          {
            split(a4, v82, *((uint64_t *)&v82 + 1), 58, (uint64_t)&v81);
            if (*a4)
              return;
            getInt<unsigned int>(a4, (unsigned __int8 *)v81, *((uint64_t *)&v81 + 1), &v75);
            if (*a4)
              return;
            v44 = v75;
            if (!v75)
            {
              v71 = "Invalid index size of 0 bytes";
              goto LABEL_165;
            }
          }
          else
          {
            v44 = v37;
          }
LABEL_124:
          v63 = __clz(v42) ^ 0x3F;
          v64 = 63 - __clz(v45);
          if (v45)
            v65 = v64;
          else
            v65 = 0;
          llvm::DataLayout::setPointerAlignmentInBits(a1, v72, v63, v65, v37, v44, a4);
          if (*a4)
            return;
          v12 = v41;
          v13 = v40;
          v14 = v39;
          goto LABEL_15;
        }
        v71 = "Pointer preferred alignment must be a power of 2";
LABEL_165:
        *(_QWORD *)&__dst = v71;
        v79 = 259;
        reportError((const llvm::Twine *)a4, (llvm::Twine *)&__dst);
        return;
      case 's':
        goto LABEL_15;
      default:
        v66 = "Unknown specifier in datalayout string";
        goto LABEL_158;
    }
  }
}

void llvm::DataLayout::parse(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  __int16 v9;
  __int16 v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[3];
  _QWORD v14[6];
  _QWORD v15[6];
  _WORD v16[20];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[19];
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v11 = v13;
  v12 = xmmword_1812349A0;
  v13[1] = v14;
  v13[2] = 0x400000000;
  v14[4] = v15;
  v14[5] = 0x400000000;
  v15[4] = v16;
  v15[5] = 0x400000000;
  v16[18] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = v22;
  v21 = 0x800000000;
  v22[16] = 0;
  v22[17] = v23;
  v22[18] = 0x800000000;
  llvm::DataLayout::reset((uint64_t)v8, "", 0);
  llvm::DataLayout::parseSpecifier((uint64_t)v8, a1, a2, &v7);
  v6 = v7;
  if (v7)
  {
    *(_BYTE *)(a3 + 440) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    *(_BYTE *)(a3 + 440) &= ~1u;
    *(_WORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 20) = 0;
    *(_QWORD *)(a3 + 32) = a3 + 56;
    *(_OWORD *)(a3 + 40) = xmmword_1812349A0;
    *(_QWORD *)(a3 + 64) = a3 + 80;
    *(_QWORD *)(a3 + 72) = 0x400000000;
    *(_QWORD *)(a3 + 112) = a3 + 128;
    *(_QWORD *)(a3 + 120) = 0x400000000;
    *(_QWORD *)(a3 + 160) = a3 + 176;
    *(_QWORD *)(a3 + 168) = 0x400000000;
    *(_WORD *)(a3 + 212) = 0;
    *(_QWORD *)(a3 + 216) = 0;
    *(_QWORD *)(a3 + 224) = 0;
    *(_QWORD *)(a3 + 232) = 0;
    *(_QWORD *)(a3 + 240) = a3 + 256;
    *(_QWORD *)(a3 + 248) = 0x800000000;
    *(_QWORD *)(a3 + 384) = 0;
    *(_QWORD *)(a3 + 392) = a3 + 408;
    *(_QWORD *)(a3 + 400) = 0x800000000;
    llvm::DataLayout::operator=(a3, (uint64_t)v8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v8);
}

void split(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  llvm *v7;
  __int128 v8;
  llvm *v9;
  char *v10;
  const char *v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  std::error_code v15;
  char v16[32];
  __int16 v17;
  uint64_t v18[3];
  std::string v19;

  v18[0] = a2;
  v18[1] = a3;
  v16[0] = a4;
  v7 = (llvm *)llvm::StringRef::find(v18, v16, 1uLL, 0);
  if (v7 == (llvm *)-1)
  {
    *(_OWORD *)a5 = *(_OWORD *)v18;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    goto LABEL_19;
  }
  v8 = *(_OWORD *)v18;
  if ((unint64_t)v7 >= v18[1])
    v9 = (llvm *)v18[1];
  else
    v9 = v7;
  if (v18[1] >= (unint64_t)v7 + 1)
    v10 = (char *)v7 + 1;
  else
    v10 = (char *)v18[1];
  *(_QWORD *)a5 = v18[0];
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = &v10[v8];
  *(_QWORD *)(a5 + 24) = *((_QWORD *)&v8 + 1) - (_QWORD)v10;
  if (*((_QWORD *)&v8 + 1) <= (unint64_t)v7 + 1)
  {
    if (*((_QWORD *)&v8 + 1) > (unint64_t)v7)
    {
      v11 = "Trailing separator in datalayout string";
      goto LABEL_14;
    }
LABEL_19:
    *a1 = 0;
    return;
  }
  if (v9)
    goto LABEL_19;
  v11 = "Expected token before separator in datalayout string";
LABEL_14:
  *(_QWORD *)v16 = v11;
  v17 = 259;
  v12 = (llvm *)llvm::inconvertibleErrorCode(v7);
  v14 = v13;
  llvm::Twine::str((llvm::Twine *)v16, &v19);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15.__cat_ = (const std::error_category *)&v19;
  else
    v15.__cat_ = (const std::error_category *)v19.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v15.__val_ = v14;
  llvm::createStringError(v12, v15, a1);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void getInt<unsigned int>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t AsUnsignedInteger;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;
  unint64_t v11[4];
  __int16 v12;
  std::string __p;

  v11[0] = 0;
  AsUnsignedInteger = llvm::getAsUnsignedInteger(a2, a3, 0xAu, v11);
  if ((AsUnsignedInteger & 1) != 0 || HIDWORD(v11[0]))
  {
    v11[0] = (unint64_t)"not a number, or does not fit in an unsigned int";
    v12 = 259;
    v7 = (llvm *)llvm::inconvertibleErrorCode((llvm *)AsUnsignedInteger);
    v9 = v8;
    llvm::Twine::str((llvm::Twine *)v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10.__cat_ = (const std::error_category *)&__p;
    else
      v10.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v10.__val_ = v9;
    llvm::createStringError(v7, v10, a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a4 = v11[0];
    *a1 = 0;
  }
}

void reportError(const llvm::Twine *a1, llvm::Twine *a2)
{
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  std::error_code v7;
  std::string __p;

  v4 = (llvm *)llvm::inconvertibleErrorCode(a1);
  v6 = v5;
  llvm::Twine::str(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7.__cat_ = (const std::error_category *)&__p;
  else
    v7.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v7.__val_ = v6;
  llvm::createStringError(v4, v7, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void getIntInBytes<unsigned int>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  llvm *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;
  const char *v11;
  __int16 v12;
  std::string __p;

  getInt<unsigned int>(a1, a2, a3, a4);
  if (!*a1)
  {
    if ((*a4 & 7) != 0)
    {
      v11 = "number of bits must be a byte width multiple";
      v12 = 259;
      v7 = (llvm *)llvm::inconvertibleErrorCode(v6);
      v9 = v8;
      llvm::Twine::str((llvm::Twine *)&v11, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10.__cat_ = (const std::error_category *)&__p;
      else
        v10.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v10.__val_ = v9;
      llvm::createStringError(v7, v10, a1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *a4 >>= 3;
      *a1 = 0;
    }
  }
}

void getIntInBytes<unsigned long long>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4)
{
  llvm *AsUnsignedInteger;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;
  unint64_t v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  std::error_code v15;
  unint64_t v16[4];
  __int16 v17;
  std::string __p;

  v16[0] = 0;
  AsUnsignedInteger = (llvm *)llvm::getAsUnsignedInteger(a2, a3, 0xAu, v16);
  if ((_DWORD)AsUnsignedInteger)
  {
    v16[0] = (unint64_t)"not a number, or does not fit in an unsigned int";
    v17 = 259;
    v7 = (llvm *)llvm::inconvertibleErrorCode(AsUnsignedInteger);
    v9 = v8;
    llvm::Twine::str((llvm::Twine *)v16, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10.__cat_ = (const std::error_category *)&__p;
    else
      v10.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v10.__val_ = v9;
    llvm::createStringError(v7, v10, a1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*a1)
        return;
    }
    else if (*a1)
    {
      return;
    }
    v11 = *a4;
    if ((*a4 & 7) == 0)
      goto LABEL_16;
  }
  else
  {
    v11 = v16[0];
    *a4 = v16[0];
    *a1 = 0;
    if ((v11 & 7) == 0)
    {
LABEL_16:
      *a4 = v11 >> 3;
      *a1 = 0;
      return;
    }
  }
  v16[0] = (unint64_t)"number of bits must be a byte width multiple";
  v17 = 259;
  v12 = (llvm *)llvm::inconvertibleErrorCode(AsUnsignedInteger);
  v14 = v13;
  llvm::Twine::str((llvm::Twine *)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15.__cat_ = (const std::error_category *)&__p;
  else
    v15.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v15.__val_ = v14;
  llvm::createStringError(v12, v15, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void getAddrSpace(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  llvm *v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  std::error_code v10;
  const char *v11;
  __int16 v12;
  std::string __p;

  getInt<unsigned int>(a1, a2, a3, (_DWORD *)a4);
  if (!*a1)
  {
    if (*(_BYTE *)(a4 + 3))
    {
      v11 = "Invalid address space, must be a 24-bit integer";
      v12 = 259;
      v7 = (llvm *)llvm::inconvertibleErrorCode(v6);
      v9 = v8;
      llvm::Twine::str((llvm::Twine *)&v11, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10.__cat_ = (const std::error_category *)&__p;
      else
        v10.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v10.__val_ = v9;
      llvm::createStringError(v7, v10, a1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *a1 = 0;
    }
  }
}

uint64_t llvm::DataLayout::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  llvm::DataLayout::clear(a1);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (a1 == a2)
  {
    v7 = *(_DWORD *)(a2 + 208);
    *(_WORD *)(a1 + 212) = *(_WORD *)(a2 + 212);
    *(_DWORD *)(a1 + 208) = v7;
    return a1;
  }
  v4 = (void **)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 >= v5)
  {
    if (v5)
      memmove(*v4, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    if (*(_QWORD *)(a1 + 48) >= v5)
    {
      if (v6)
        memmove(*v4, *(const void **)(a2 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 0;
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 32, (void *)(a1 + 56), v5, 1);
      v6 = 0;
    }
    v9 = *(_QWORD *)(a2 + 40);
    if (v6 != v9)
      memcpy((char *)*v4 + v6, (const void *)(*(_QWORD *)(a2 + 32) + v6), v9 - v6);
  }
  *(_QWORD *)(a1 + 40) = v5;
  v10 = (void **)(a1 + 64);
  v11 = *(unsigned int *)(a2 + 72);
  v12 = *(unsigned int *)(a1 + 72);
  if (v12 >= v11)
  {
    if ((_DWORD)v11)
      memmove(*v10, *(const void **)(a2 + 64), 8 * v11 - 2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 76) < v11)
    {
      *(_DWORD *)(a1 + 72) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (void *)(a1 + 80), v11, 8);
      v12 = 0;
      v13 = *(unsigned int *)(a2 + 72);
      if (!*(_DWORD *)(a2 + 72))
        goto LABEL_21;
      goto LABEL_20;
    }
    if ((_DWORD)v12)
    {
      memmove(*v10, *(const void **)(a2 + 64), 8 * v12 - 2);
      v13 = *(unsigned int *)(a2 + 72);
      if (v12 == v13)
        goto LABEL_21;
      goto LABEL_20;
    }
    v12 = 0;
    v13 = *(unsigned int *)(a2 + 72);
    if (*(_DWORD *)(a2 + 72))
LABEL_20:
      memcpy((char *)*v10 + 8 * v12, (const void *)(*(_QWORD *)(a2 + 64) + 8 * v12), 8 * v13 - 8 * v12);
  }
LABEL_21:
  *(_DWORD *)(a1 + 72) = v11;
  v14 = (void **)(a1 + 112);
  v15 = *(unsigned int *)(a2 + 120);
  v16 = *(unsigned int *)(a1 + 120);
  if (v16 >= v15)
  {
    if ((_DWORD)v15)
      memmove(*v14, *(const void **)(a2 + 112), 8 * v15 - 2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 124) < v15)
    {
      *(_DWORD *)(a1 + 120) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 112, (void *)(a1 + 128), v15, 8);
      v16 = 0;
      v17 = *(unsigned int *)(a2 + 120);
      if (!*(_DWORD *)(a2 + 120))
        goto LABEL_30;
      goto LABEL_29;
    }
    if ((_DWORD)v16)
    {
      memmove(*v14, *(const void **)(a2 + 112), 8 * v16 - 2);
      v17 = *(unsigned int *)(a2 + 120);
      if (v16 == v17)
        goto LABEL_30;
      goto LABEL_29;
    }
    v16 = 0;
    v17 = *(unsigned int *)(a2 + 120);
    if (*(_DWORD *)(a2 + 120))
LABEL_29:
      memcpy((char *)*v14 + 8 * v16, (const void *)(*(_QWORD *)(a2 + 112) + 8 * v16), 8 * v17 - 8 * v16);
  }
LABEL_30:
  *(_DWORD *)(a1 + 120) = v15;
  v18 = (void **)(a1 + 160);
  v19 = *(unsigned int *)(a2 + 168);
  v20 = *(unsigned int *)(a1 + 168);
  if (v20 >= v19)
  {
    if ((_DWORD)v19)
      memmove(*v18, *(const void **)(a2 + 160), 8 * v19 - 2);
  }
  else
  {
    if (*(_DWORD *)(a1 + 172) < v19)
    {
      *(_DWORD *)(a1 + 168) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 160, (void *)(a1 + 176), v19, 8);
      v20 = 0;
      v21 = *(unsigned int *)(a2 + 168);
      if (!*(_DWORD *)(a2 + 168))
        goto LABEL_39;
      goto LABEL_38;
    }
    if ((_DWORD)v20)
    {
      memmove(*v18, *(const void **)(a2 + 160), 8 * v20 - 2);
      v21 = *(unsigned int *)(a2 + 168);
      if (v20 == v21)
        goto LABEL_39;
      goto LABEL_38;
    }
    v20 = 0;
    v21 = *(unsigned int *)(a2 + 168);
    if (*(_DWORD *)(a2 + 168))
LABEL_38:
      memcpy((char *)*v18 + 8 * v20, (const void *)(*(_QWORD *)(a2 + 160) + 8 * v20), 8 * v21 - 8 * v20);
  }
LABEL_39:
  *(_DWORD *)(a1 + 168) = v19;
  v22 = *(_DWORD *)(a2 + 208);
  *(_WORD *)(a1 + 212) = *(_WORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v22;
  v23 = (void **)(a1 + 240);
  v24 = *(unsigned int *)(a2 + 248);
  v25 = *(unsigned int *)(a1 + 248);
  if (v25 >= v24)
  {
    if ((_DWORD)v24)
      memmove(*v23, *(const void **)(a2 + 240), 16 * v24);
  }
  else
  {
    if (*(_DWORD *)(a1 + 252) < v24)
    {
      *(_DWORD *)(a1 + 248) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 240, (void *)(a1 + 256), v24, 16);
      v25 = 0;
      v26 = *(unsigned int *)(a2 + 248);
      if (!*(_DWORD *)(a2 + 248))
        goto LABEL_48;
      goto LABEL_47;
    }
    if ((_DWORD)v25)
    {
      memmove(*v23, *(const void **)(a2 + 240), 16 * v25);
      v26 = *(unsigned int *)(a2 + 248);
      if (v25 == v26)
        goto LABEL_48;
      goto LABEL_47;
    }
    v25 = 0;
    v26 = *(unsigned int *)(a2 + 248);
    if (*(_DWORD *)(a2 + 248))
LABEL_47:
      memcpy((char *)*v23 + 16 * v25, (const void *)(*(_QWORD *)(a2 + 240) + 16 * v25), 16 * v26 - 16 * v25);
  }
LABEL_48:
  *(_DWORD *)(a1 + 248) = v24;
  v27 = (void **)(a1 + 392);
  v28 = *(unsigned int *)(a2 + 400);
  v29 = *(unsigned int *)(a1 + 400);
  if (v29 >= v28)
  {
    if ((_DWORD)v28)
      memmove(*v27, *(const void **)(a2 + 392), 4 * v28);
    goto LABEL_57;
  }
  if (*(_DWORD *)(a1 + 404) < v28)
  {
    *(_DWORD *)(a1 + 400) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 392, (void *)(a1 + 408), v28, 4);
    v29 = 0;
    v30 = *(unsigned int *)(a2 + 400);
    if (!*(_DWORD *)(a2 + 400))
      goto LABEL_57;
    goto LABEL_56;
  }
  if (!(_DWORD)v29)
  {
    v29 = 0;
    v30 = *(unsigned int *)(a2 + 400);
    if (!*(_DWORD *)(a2 + 400))
      goto LABEL_57;
    goto LABEL_56;
  }
  memmove(*v27, *(const void **)(a2 + 392), 4 * v29);
  v30 = *(unsigned int *)(a2 + 400);
  if (v29 != v30)
LABEL_56:
    memcpy((char *)*v27 + 4 * v29, (const void *)(*(_QWORD *)(a2 + 392) + 4 * v29), 4 * v30 - 4 * v29);
LABEL_57:
  *(_DWORD *)(a1 + 400) = v28;
  return a1;
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 30);
  if (!a2)
    return v2;
  v3 = *((unsigned int *)this + 62);
  if (!(_DWORD)v3)
    return v2;
  v4 = v2 + 16 * v3;
  result = *((_QWORD *)this + 30);
  do
  {
    v6 = v3 >> 1;
    v7 = result + 16 * (v3 >> 1);
    v8 = *(_DWORD *)(v7 + 8);
    v9 = v7 + 16;
    v3 += ~(v3 >> 1);
    if (v8 < a2)
      result = v9;
    else
      v3 = v6;
  }
  while (v3);
  if (result == v4 || *(_DWORD *)(result + 8) != a2)
    return v2;
  return result;
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  char *v2;
  char *v3;
  llvm::DataLayout *v4;
  char *v5;
  char *v6;
  char *v7;

  llvm::DataLayout::clear((uint64_t)this);
  v2 = (char *)*((_QWORD *)this + 49);
  if (v2 != (char *)this + 408)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 30);
  if (v3 != (char *)this + 256)
    free(v3);
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    v4 = (llvm::DataLayout *)*((_QWORD *)this + 20);
    if (v4 == (llvm::DataLayout *)((char *)this + 176))
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*((void **)this + 27));
  v4 = (llvm::DataLayout *)*((_QWORD *)this + 20);
  if (v4 != (llvm::DataLayout *)((char *)this + 176))
LABEL_7:
    free(v4);
LABEL_8:
  v5 = (char *)*((_QWORD *)this + 14);
  if (v5 != (char *)this + 128)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 8);
  if (v6 != (char *)this + 80)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 56)
    free(v7);
}

llvm::StructLayout *llvm::DataLayout::getStructLayout(llvm::DataLayout *this, llvm::StructType *a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  llvm::StructType **v8;
  llvm::StructType *v9;
  llvm::StructType **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  llvm::StructType *v15;
  llvm::StructLayout *result;
  llvm::StructLayout *v17;
  int v18;
  unsigned int v19;
  llvm::StructType *v20;
  llvm::StructType **v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v4 = (_DWORD *)*((_QWORD *)this + 48);
  if (v4)
  {
    v5 = *(_QWORD *)v4;
    v6 = v4[4];
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v4 = operator new(0x18uLL);
    v5 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)this + 48) = v4;
    v6 = v4[4];
    if (v6)
    {
LABEL_3:
      v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v8 = (llvm::StructType **)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_19;
      v10 = 0;
      v11 = 1;
      while (v9 != (llvm::StructType *)-4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == (llvm::StructType *)-8192;
        if (v12)
          v10 = v8;
        v13 = v7 + v11++;
        v7 = v13 & (v6 - 1);
        v8 = (llvm::StructType **)(v5 + 16 * v7);
        v9 = *v8;
        if (*v8 == a2)
          goto LABEL_19;
      }
      if (v10)
        v8 = v10;
      v14 = v4[2];
      if (4 * v14 + 4 >= 3 * v6)
        goto LABEL_25;
LABEL_15:
      if (v6 + ~v14 - v4[3] > v6 >> 3)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  v8 = 0;
  v14 = v4[2];
  if (4 * v14 + 4 < 3 * v6)
    goto LABEL_15;
LABEL_25:
  v6 *= 2;
LABEL_26:
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v6);
  v18 = v4[4] - 1;
  v19 = v18 & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (llvm::StructType **)(*(_QWORD *)v4 + 16 * v19);
  v20 = *v8;
  if (*v8 == a2)
  {
LABEL_27:
    ++v4[2];
    if (a2 == (llvm::StructType *)-4096)
      goto LABEL_18;
    goto LABEL_17;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != (llvm::StructType *)-4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v20 == (llvm::StructType *)-8192;
    if (v23)
      v21 = v8;
    v24 = v19 + v22++;
    v19 = v24 & v18;
    v8 = (llvm::StructType **)(*(_QWORD *)v4 + 16 * v19);
    v20 = *v8;
    if (*v8 == a2)
      goto LABEL_27;
  }
  if (v21)
    v8 = v21;
LABEL_16:
  v15 = *v8;
  ++v4[2];
  if (v15 != (llvm::StructType *)-4096)
LABEL_17:
    --v4[3];
LABEL_18:
  *v8 = a2;
  v8[1] = 0;
LABEL_19:
  result = v8[1];
  if (!result)
  {
    v17 = (llvm::StructLayout *)malloc(16 * *((unsigned int *)a2 + 3) + 24);
    if (!v17)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v8[1] = v17;
    return llvm::StructLayout::StructLayout(v17, a2, this);
  }
  return result;
}

unint64_t llvm::DataLayout::getPointerSize(llvm::DataLayout *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_10;
  v2 = *((unsigned int *)this + 62);
  if (!(_DWORD)v2)
    goto LABEL_10;
  v3 = *((_QWORD *)this + 30) + 16 * v2;
  v4 = *((_QWORD *)this + 30);
  do
  {
    v5 = v2 >> 1;
    v6 = v4 + 16 * (v2 >> 1);
    v7 = *(_DWORD *)(v6 + 8);
    v8 = v6 + 16;
    v2 += ~(v2 >> 1);
    if (v7 < a2)
      v4 = v8;
    else
      v2 = v5;
  }
  while (v2);
  if (v4 == v3 || *(_DWORD *)(v4 + 8) != a2)
LABEL_10:
    v4 = *((_QWORD *)this + 30);
  return ((unint64_t)*(unsigned int *)(v4 + 4) + 7) >> 3;
}

uint64_t llvm::DataLayout::getIndexTypeSizeInBits(llvm::DataLayout *this, Type *a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *((_DWORD *)a2 + 2);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if (v2 < 0x100)
    goto LABEL_12;
  v3 = *((unsigned int *)this + 62);
  if (!(_DWORD)v3)
    goto LABEL_12;
  v4 = v2 >> 8;
  v5 = *((_QWORD *)this + 30);
  v6 = v5 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = v5 + 16 * (v3 >> 1);
    v9 = *(_DWORD *)(v8 + 8);
    v10 = v8 + 16;
    v3 += ~(v3 >> 1);
    if (v9 < v4)
      v5 = v10;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 == v6 || *(_DWORD *)(v5 + 8) != v4)
LABEL_12:
    v5 = *((_QWORD *)this + 30);
  return *(unsigned int *)(v5 + 12);
}

void llvm::DataLayout::getAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  __asm { BR              X9 }
}

void sub_180CCFDA8()
{
  JUMPOUT(0x180CCFD90);
}

uint64_t sub_180CCFDB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int v38;
  uint64_t v39;
  Type *v40;
  unsigned int v41;
  unint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  unsigned int *v46;
  _DWORD *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;

  llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)v39, v40);
  v42 = *(unsigned int *)(v39 + 120);
  if (!(_DWORD)v42)
    goto LABEL_9;
  v43 = *(_DWORD **)(v39 + 112);
  v44 = &v43[2 * v42];
  do
  {
    v45 = v42 >> 1;
    v46 = &v43[2 * (v42 >> 1)];
    v48 = *v46;
    v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41)
      v43 = v47;
    else
      v42 = v45;
  }
  while (v42);
  if (v43 != v44 && *v43 == v41)
  {
    v53 = 4;
    if (!v38)
      v53 = 5;
    return *((unsigned __int8 *)v43 + v53);
  }
  else
  {
LABEL_9:
    v49 = v41 >> 3;
    if (v41 >> 3)
    {
      v50 = (v49 - 1) | ((v49 - 1) >> 1) | (((v49 - 1) | ((v49 - 1) >> 1)) >> 2);
      v51 = v50 | (v50 >> 4) | ((v50 | (v50 >> 4)) >> 8);
      v49 = (v51 | (v51 >> 16) | ((v51 | (v51 >> 16)) >> 32)) + 1;
    }
    return 63 - __clz(v49);
  }
}

void llvm::DataLayout::getPrefTypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  llvm::DataLayout::getAlignment(this, a2);
}

double llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::ScalableVectorType *v12;
  double result;

  v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if (v3 < 0x100)
    goto LABEL_12;
  v4 = *((unsigned int *)this + 62);
  if (!(_DWORD)v4)
    goto LABEL_12;
  v5 = v3 >> 8;
  v6 = *((_QWORD *)this + 30);
  v7 = v6 + 16 * v4;
  do
  {
    v8 = v4 >> 1;
    v9 = v6 + 16 * (v4 >> 1);
    v10 = *(_DWORD *)(v9 + 8);
    v11 = v9 + 16;
    v4 += ~(v4 >> 1);
    if (v10 < v5)
      v6 = v11;
    else
      v4 = v8;
  }
  while (v4);
  if (v6 == v7 || *(_DWORD *)(v6 + 8) != v5)
LABEL_12:
    v6 = *((_QWORD *)this + 30);
  v12 = (llvm::ScalableVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(v6 + 4));
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    return llvm::VectorType::get(v12, (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32)));
  return result;
}

uint64_t llvm::DataLayout::getPreferredAlign(llvm::DataLayout *this, const llvm::GlobalVariable *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  llvm::Type *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD v15[2];

  v4 = *((_DWORD *)a2 + 8);
  v5 = (v4 >> 17) & 0x3F;
  if (v5)
  {
    v6 = (v5 - 1);
    if ((v4 & 0x800000) == 0)
    {
      v7 = (llvm::Type *)*((_QWORD *)a2 + 3);
      llvm::DataLayout::getAlignment(this, v7);
      if (v6 < v8)
      {
        llvm::DataLayout::getAlignment(this, v7);
        if (v6 <= v9)
          v6 = v9;
        else
          v6 = v6;
      }
      llvm::GlobalValue::isDeclaration(a2);
    }
  }
  else
  {
    v10 = (llvm::Type *)*((_QWORD *)a2 + 3);
    llvm::DataLayout::getAlignment(this, v10);
    v6 = v11;
    if (!llvm::GlobalValue::isDeclaration(a2) && v6 <= 3u)
    {
      llvm::DataLayout::getTypeSizeInBits(this, (Type *)v10);
      v15[0] = v12;
      v15[1] = v13;
      if ((unint64_t)llvm::TypeSize::operator unsigned long long(v15, v13) <= 0x80)
        return v6;
      else
        return 4;
    }
  }
  return v6;
}

void _GLOBAL__sub_I_DataLayout_cpp()
{
  DefaultAlignments = 105;
  *(_QWORD *)algn_1EDC0BB6C = 1;
  dword_1EDC0BB74 = 105;
  unk_1EDC0BB78 = 8;
  dword_1EDC0BB80 = 105;
  *(_QWORD *)algn_1EDC0BB84 = 0x10100000010;
  dword_1EDC0BB8C = 105;
  unk_1EDC0BB90 = 0x20200000020;
  dword_1EDC0BB98 = 105;
  *(_QWORD *)algn_1EDC0BB9C = 0x30200000040;
  dword_1EDC0BBA4 = 102;
  unk_1EDC0BBA8 = 0x10100000010;
  dword_1EDC0BBB0 = 102;
  *(_QWORD *)algn_1EDC0BBB4 = 0x20200000020;
  dword_1EDC0BBBC = 102;
  unk_1EDC0BBC0 = 0x30300000040;
  dword_1EDC0BBC8 = 102;
  *(_QWORD *)algn_1EDC0BBCC = 0x40400000080;
  dword_1EDC0BBD4 = 118;
  unk_1EDC0BBD8 = 0x30300000040;
  dword_1EDC0BBE0 = 118;
  *(_QWORD *)algn_1EDC0BBE4 = 0x40400000080;
}

llvm::MDNode *updateLoopMetadataDebugLocationsImpl(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  unint64_t *v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::MDNode *Impl;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v19[0] = 0;
  v18 = 0x400000001;
  v6 = (unint64_t *)(a1 - 16);
  for (i = 1; ; ++i)
  {
    v8 = *v6;
    if ((*v6 & 2) != 0)
      break;
    if (i >= ((v8 >> 6) & 0xF))
      goto LABEL_16;
    if (!v6[i - ((v8 >> 2) & 0xF)])
    {
LABEL_13:
      v12 = v18;
      if (v18 >= (unint64_t)HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v18 + 1, 8);
        v12 = v18;
      }
      *((_QWORD *)v17 + v12) = 0;
      goto LABEL_3;
    }
LABEL_8:
    v9 = a2(a3);
    if (v9)
    {
      v10 = v9;
      v11 = v18;
      if (v18 >= (unint64_t)HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v18 + 1, 8);
        v11 = v18;
      }
      *((_QWORD *)v17 + v11) = v10;
LABEL_3:
      LODWORD(v18) = v18 + 1;
      continue;
    }
  }
  if (i < *(unsigned int *)(a1 - 24))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 - 32) + 8 * i))
      goto LABEL_13;
    goto LABEL_8;
  }
LABEL_16:
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0)
    v14 = (_QWORD *)*v14;
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t)v14, v17, v18, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  if (v17 != v19)
    free(v17);
  return Impl;
}

void llvm::stripDebugInfo(llvm **this, llvm::Function *a2)
{
  uint64_t v3;
  llvm *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t MetadataImpl;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MDNode *updated;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unsigned __int8 **v35;
  void *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  llvm *v56;
  void *v57;
  llvm *v58;
  llvm *v59;
  unsigned int v60;
  char *v61;
  unsigned __int8 *v62;
  llvm *v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD v66[2];
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  _BYTE v71[64];
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  _BYTE v79[12];
  uint64_t v80;

  if ((*((_BYTE *)this + 23) & 0x20) != 0 && llvm::Value::getMetadataImpl((llvm::Value *)this, 0))
  {
    llvm::Function::setSubprogram((llvm::Function *)this, 0);
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v4 = this[10];
  v58 = (llvm *)(this + 9);
  if (v4 == (llvm *)(this + 9))
  {
    v57 = 0;
    v56 = 0;
LABEL_108:
    llvm::deallocate_buffer(v56, v57);
  }
  v5 = &v80;
  v6 = &v76;
LABEL_8:
  v7 = (char *)v4 - 24;
  v59 = v4;
  if (!v4)
    v7 = 0;
  v8 = v7 + 48;
  v9 = (char *)*((_QWORD *)v7 + 7);
  v61 = v8;
  if (v9 == v8)
    goto LABEL_7;
  while (1)
  {
    v10 = (char *)*((_QWORD *)v9 + 1);
    if (v9)
      v11 = (uint64_t)(v9 - 24);
    else
      v11 = 0;
    if (*(_BYTE *)(v11 + 16) == 84)
    {
      v12 = *(_QWORD *)(v11 - 32);
      if (v12)
      {
        if (!*(_BYTE *)(v12 + 16)
          && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v11 + 80)
          && (*(_BYTE *)(v12 + 33) & 0x20) != 0
          && (*(_DWORD *)(v12 + 36) - 61) <= 3)
        {
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
          v3 = 1;
          v9 = v10;
          if (v10 != v61)
            continue;
LABEL_7:
          v4 = (llvm *)*((_QWORD *)v59 + 1);
          if (v4 == v58)
          {
            v56 = v63;
            v57 = (void *)(16 * v65);
            goto LABEL_108;
          }
          goto LABEL_8;
        }
      }
    }
    v14 = (unsigned __int8 **)(v11 + 48);
    v13 = *(unsigned __int8 **)(v11 + 48);
    if (v13)
    {
      v62 = 0;
      if (v14 != &v62)
      {
        llvm::MetadataTracking::untrack(v11 + 48, v13);
        v15 = v62;
        *v14 = v62;
        if (v15)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v62, v15, v11 + 48);
          v62 = 0;
        }
      }
      v3 = 1;
    }
    if ((*(_BYTE *)(v11 + 23) & 0x20) == 0)
      goto LABEL_80;
    MetadataImpl = llvm::Value::getMetadataImpl((llvm::Value *)v11, 18);
    if (!MetadataImpl)
      goto LABEL_80;
    v17 = MetadataImpl;
    if (v65)
    {
      v18 = (v65 - 1) & ((MetadataImpl >> 4) ^ (MetadataImpl >> 9));
      v19 = *((_QWORD *)v63 + 2 * v18);
      if (v19 == MetadataImpl)
      {
LABEL_33:
        updated = (llvm::MDNode *)*((_QWORD *)v63 + 2 * v18 + 1);
        if (updated)
          goto LABEL_78;
      }
      else
      {
        v47 = 1;
        while (v19 != -4096)
        {
          v48 = v18 + v47++;
          v18 = v48 & (v65 - 1);
          v19 = *((_QWORD *)v63 + 2 * v18);
          if (v19 == MetadataImpl)
            goto LABEL_33;
        }
      }
    }
    v77 = v5;
    v78 = v5;
    *(_DWORD *)&v79[8] = 0;
    v72 = v6;
    v73 = v6;
    v74 = 8;
    v75 = 0;
    v67 = v71;
    v68 = v71;
    v69 = 8;
    v70 = 0;
    *(_QWORD *)v79 = 0x100000008;
    v80 = MetadataImpl;
    v22 = (unint64_t *)(MetadataImpl - 16);
    v21 = *(_QWORD *)(MetadataImpl - 16);
    v60 = MetadataImpl >> 4;
    if ((v21 & 2) != 0)
    {
      v23 = *(unint64_t **)(MetadataImpl - 32);
      v24 = *(unsigned int *)(MetadataImpl - 24);
      updated = (llvm::MDNode *)MetadataImpl;
      if (v24 == 1)
        goto LABEL_54;
    }
    else
    {
      v23 = &v22[-((v21 >> 2) & 0xF)];
      v24 = (v21 >> 6) & 0xF;
      updated = (llvm::MDNode *)MetadataImpl;
      if (v24 == 1)
        goto LABEL_54;
    }
    v25 = v6;
    v26 = v3;
    v27 = v5;
    v28 = 0;
    v29 = (unsigned __int8 **)(v23 + 1);
    v30 = 8 * v24 - 8;
    do
    {
      v31 = *v29++;
      v28 += isDILocationReachable((uint64_t)&v77, (unsigned int *)&v72, v31);
      v30 -= 8;
    }
    while (v30);
    updated = (llvm::MDNode *)v17;
    v5 = v27;
    v3 = v26;
    v6 = v25;
    if (!v28)
      goto LABEL_54;
    if (v78 != v77)
    {
      if (*(_DWORD *)v79 >= 0x21u && (4 * (*(_DWORD *)&v79[4] - *(_DWORD *)&v79[8])) < *(_DWORD *)v79)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v77);
        v32 = *v22;
        if ((*v22 & 2) != 0)
          goto LABEL_45;
        goto LABEL_52;
      }
      memset(v78, 255, 8 * *(unsigned int *)v79);
    }
    *(_QWORD *)&v79[4] = 0;
    v32 = *v22;
    if ((*v22 & 2) != 0)
    {
LABEL_45:
      v33 = *(unint64_t **)(v17 - 32);
      v34 = *(unsigned int *)(v17 - 24);
      if (v34 == 1)
        goto LABEL_53;
      goto LABEL_46;
    }
LABEL_52:
    v33 = &v22[-((v32 >> 2) & 0xF)];
    v34 = (v32 >> 6) & 0xF;
    if (v34 == 1)
    {
LABEL_53:
      updated = 0;
LABEL_54:
      v36 = v68;
      if (v68 != v67)
        goto LABEL_55;
      goto LABEL_56;
    }
LABEL_46:
    v35 = (unsigned __int8 **)(v33 + 1);
    updated = (llvm::MDNode *)(8 * v34 - 8);
    while ((isAllDILocation((uint64_t)&v77, (unsigned int *)&v67, (unsigned int *)&v72, *v35) & 1) != 0)
    {
      ++v35;
      updated = (llvm::MDNode *)((char *)updated - 8);
      if (!updated)
        goto LABEL_54;
    }
    v66[0] = &v67;
    v66[1] = &v72;
    updated = updateLoopMetadataDebugLocationsImpl(v17, (uint64_t (*)(uint64_t))llvm::function_ref<llvm::Metadata * ()(llvm::Metadata *)>::callback_fn<stripDebugLocFromLoopID(llvm::MDNode *)::$_2>, (uint64_t)v66);
    v36 = v68;
    if (v68 != v67)
LABEL_55:
      free(v36);
LABEL_56:
    if (v73 != v72)
      free(v73);
    if (v78 != v77)
      free(v78);
    v37 = v65;
    if (!v65)
      goto LABEL_91;
    v38 = v65 - 1;
    v39 = (v65 - 1) & (v60 ^ (v17 >> 9));
    v40 = (uint64_t *)((char *)v63 + 16 * v39);
    v41 = *v40;
    if (v17 == *v40)
      goto LABEL_77;
    v42 = 0;
    v43 = 1;
    while (v41 != -4096)
    {
      if (v42)
        v44 = 0;
      else
        v44 = v41 == -8192;
      if (v44)
        v42 = v40;
      v45 = v39 + v43++;
      v39 = v45 & v38;
      v40 = (uint64_t *)((char *)v63 + 16 * (v45 & v38));
      v41 = *v40;
      if (v17 == *v40)
        goto LABEL_77;
    }
    if (v42)
      v40 = v42;
    if (4 * (int)v64 + 4 < 3 * v65)
    {
      if (v65 + ~(_DWORD)v64 - HIDWORD(v64) > v65 >> 3)
        goto LABEL_73;
    }
    else
    {
LABEL_91:
      v37 = 2 * v65;
    }
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v63, v37);
    v49 = v65 - 1;
    v50 = (v65 - 1) & (v60 ^ (v17 >> 9));
    v40 = (uint64_t *)((char *)v63 + 16 * v50);
    v51 = *v40;
    if (v17 == *v40)
    {
      v46 = v17;
      goto LABEL_74;
    }
    v52 = 0;
    v53 = 1;
    do
    {
      if (v51 == -4096)
      {
        if (v52)
          v40 = v52;
LABEL_73:
        v46 = *v40;
        goto LABEL_74;
      }
      if (v52)
        v54 = 0;
      else
        v54 = v51 == -8192;
      if (v54)
        v52 = v40;
      v55 = v50 + v53++;
      v50 = v55 & v49;
      v40 = (uint64_t *)((char *)v63 + 16 * (v55 & v49));
      v51 = *v40;
    }
    while (v17 != *v40);
    v46 = v17;
LABEL_74:
    LODWORD(v64) = v64 + 1;
    if (v46 != -4096)
      --HIDWORD(v64);
    *v40 = v17;
    v40[1] = 0;
LABEL_77:
    v40[1] = (uint64_t)updated;
LABEL_78:
    if (updated != (llvm::MDNode *)v17)
      llvm::Instruction::setMetadata((unsigned __int8 **)v11, 18, updated);
LABEL_80:
    if ((*(_BYTE *)(v11 + 23) & 0x20) != 0)
    {
      llvm::Instruction::setMetadata(v11, (int8x16_t *)"heapallocsite", (const unsigned __int8 *)0xD, 0);
      llvm::Instruction::setMetadata((unsigned __int8 **)v11, 38, 0);
    }
    llvm::Instruction::dropDbgValues((llvm::Instruction *)v11);
    v9 = v10;
    if (v10 == v61)
      goto LABEL_7;
  }
}

uint64_t sub_180CD0AC0()
{
  char v0;

  return v0 & 1;
}

uint64_t llvm::StripDebugInfo(llvm *this, llvm::Module *a2)
{
  char *v3;
  llvm::NamedMDNode *v4;
  int v5;
  char *v6;
  char *Name;
  unint64_t v8;
  BOOL v9;
  char *v10;
  BOOL v11;
  llvm *v12;
  llvm **v13;
  _QWORD *i;
  llvm::Value *v15;
  uint64_t v16;

  v3 = (char *)this + 72;
  v4 = (llvm::NamedMDNode *)*((_QWORD *)this + 10);
  if (v4 == (llvm *)((char *)this + 72))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = (char *)*((_QWORD *)v4 + 1);
      Name = llvm::NamedMDNode::getName(v4);
      if (v8 >= 9 && (*(_QWORD *)Name == 0x6762642E6D766C6CLL ? (v9 = Name[8] == 46) : (v9 = 0), v9)
        || (v10 = llvm::NamedMDNode::getName(v4), a2 == (llvm::Module *)9)
        && (*(_QWORD *)v10 == 0x6F63672E6D766C6CLL ? (v11 = v10[8] == 118) : (v11 = 0), v11))
      {
        llvm::NamedMDNode::eraseFromParent((llvm::Module **)v4);
        v5 = 1;
      }
      v4 = (llvm::NamedMDNode *)v6;
    }
    while (v6 != v3);
  }
  v12 = (llvm *)*((_QWORD *)this + 4);
  if (v12 != (llvm *)((char *)this + 24))
  {
    if (v12)
      v13 = (llvm **)((char *)v12 - 56);
    else
      v13 = 0;
    llvm::stripDebugInfo(v13, a2);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 2); i != (_QWORD *)((char *)this + 8); i = (_QWORD *)i[1])
  {
    if (i)
      v15 = (llvm::Value *)(i - 7);
    else
      v15 = 0;
    v5 |= llvm::Value::eraseMetadata(v15, 0);
  }
  v16 = *((_QWORD *)this + 19);
  if (v16)
    (*(void (**)(uint64_t, llvm::Module *))(*(_QWORD *)v16 + 40))(v16, a2);
  return v5 & 1;
}

uint64_t llvm::getDebugMetadataVersionFromModule(llvm *this, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;

  result = llvm::Module::getModuleFlag(this, "Debug Info Version", 0x12uLL);
  if (result)
  {
    if (*(_BYTE *)result == 1 && (v3 = *(_QWORD *)(result + 128), *(_BYTE *)(v3 + 16) == 16))
    {
      v4 = (unsigned int *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u)
        v4 = *(unsigned int **)v4;
      return *v4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::at::getAssignmentInsts(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2528);
  v5 = *(unsigned int *)(v3 + 2544);
  if ((_DWORD)v5)
  {
    v6 = v5 - 1;
    v7 = (uint64_t *)(v4 + 32 * (((_DWORD)v5 - 1) & ((a1 >> 4) ^ (a1 >> 9))));
    v8 = *v7;
    if (*v7 == a1)
      goto LABEL_10;
    v9 = 1;
    LODWORD(v10) = v6 & ((a1 >> 4) ^ (a1 >> 9));
    while (v8 != -4096)
    {
      v11 = v10 + v9++;
      v10 = v11 & v6;
      v8 = *(_QWORD *)(v4 + 32 * v10);
      if (v8 == a1)
      {
        v7 = (uint64_t *)(v4 + 32 * v10);
        goto LABEL_10;
      }
    }
  }
  v7 = (uint64_t *)(v4 + 32 * v5);
LABEL_10:
  if (v7 == (uint64_t *)(v4 + 32 * v5))
    return 0;
  else
    return v7[1];
}

BOOL isDILocationReachable(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
  int v4;
  uint64_t v8;
  const void **BucketFor;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 **v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  const void **v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v40;

  if (!a3)
    return 0;
  v4 = *a3;
  if ((v4 - 7) >= 0x1D && v4 != 5)
    return v4 == 6;
  v8 = *((_QWORD *)a2 + 1);
  if (v8 == *(_QWORD *)a2)
  {
    v14 = a2[5];
    v15 = v8 + 8 * v14;
    if ((_DWORD)v14)
    {
      v16 = 0;
      while (*(unsigned __int8 **)(v8 + v16) != a3)
      {
        v16 += 8;
        if (8 * v14 == v16)
          goto LABEL_26;
      }
      v15 = v8 + v16;
    }
LABEL_26:
    if (v15 != *((_QWORD *)a2 + 1) + 8 * v14)
      return 1;
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a2, a3);
    v10 = *(_QWORD *)a2;
    v11 = *((_QWORD *)a2 + 1);
    if (*BucketFor == a3)
    {
      if (v11 == v10)
        v17 = a2[5];
      else
        v17 = a2[4];
      if (BucketFor != (const void **)(v11 + 8 * v17))
        return 1;
    }
    else
    {
      v12 = a2[4];
      if (v11 == v10)
      {
        v12 = a2[5];
        v13 = v12;
      }
      else
      {
        v13 = a2[4];
      }
      if (v11 + 8 * v12 != v11 + 8 * v13)
        return 1;
    }
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != *(_QWORD *)a1)
    goto LABEL_28;
  v23 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = 8 * v23;
    v26 = *(unsigned __int8 ***)(a1 + 8);
    do
    {
      if (*v26 == a3)
        return 0;
      if (*v26 == (unsigned __int8 *)-2)
        v24 = v26;
      ++v26;
      v25 -= 8;
    }
    while (v25);
    if (v24)
    {
      *v24 = a3;
      --*(_DWORD *)(a1 + 24);
      goto LABEL_29;
    }
  }
  if (v23 < *(_DWORD *)(a1 + 16))
  {
    *(_DWORD *)(a1 + 20) = v23 + 1;
    *(_QWORD *)(v18 + 8 * v23) = a3;
  }
  else
  {
LABEL_28:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a3);
    if (!v19)
      return 0;
  }
LABEL_29:
  v20 = *((_QWORD *)a3 - 2);
  if ((v20 & 2) == 0)
  {
    v21 = &a3[-8 * ((v20 >> 2) & 0xF) - 16];
    v22 = (v20 >> 6) & 0xF;
    if (!v22)
      goto LABEL_57;
    goto LABEL_42;
  }
  v21 = (unsigned __int8 *)*((_QWORD *)a3 - 4);
  v22 = *((unsigned int *)a3 - 6);
  if (*((_DWORD *)a3 - 6))
  {
LABEL_42:
    v27 = &v21[8 * v22];
    do
    {
      if (isDILocationReachable(a1, a2, *(_QWORD *)v21))
      {
        v28 = *((_QWORD *)a2 + 1);
        if (v28 != *(_QWORD *)a2)
          goto LABEL_43;
        v29 = a2[5];
        if ((_DWORD)v29)
        {
          v30 = 0;
          v31 = 8 * v29;
          v32 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
          while (*v32 != a3)
          {
            if (*v32 == (unsigned __int8 *)-2)
              v30 = v32;
            ++v32;
            v31 -= 8;
            if (!v31)
            {
              if (!v30)
                goto LABEL_55;
              *v30 = a3;
              --a2[6];
              goto LABEL_44;
            }
          }
          goto LABEL_44;
        }
LABEL_55:
        if (v29 < a2[4])
        {
          a2[5] = v29 + 1;
          *(_QWORD *)(v28 + 8 * v29) = a3;
        }
        else
        {
LABEL_43:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a2, a3);
        }
      }
LABEL_44:
      v21 += 8;
    }
    while (v21 != v27);
  }
LABEL_57:
  v33 = *((_QWORD *)a2 + 1);
  if (v33 == *(_QWORD *)a2)
  {
    v36 = a2[5];
    v34 = (const void **)(v33 + 8 * v36);
    if ((_DWORD)v36)
    {
      v38 = 0;
      while (*(unsigned __int8 **)(v33 + v38) != a3)
      {
        v38 += 8;
        if (8 * v36 == v38)
          goto LABEL_70;
      }
      v34 = (const void **)(v33 + v38);
    }
LABEL_70:
    v35 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v34 = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a2, a3);
    v33 = *(_QWORD *)a2;
    v35 = *((_QWORD *)a2 + 1);
    LODWORD(v36) = a2[5];
    if (*v34 != a3)
    {
      v37 = a2[4];
      if (v35 == v33)
        v37 = a2[5];
      v34 = (const void **)(v35 + 8 * v37);
    }
  }
  if (v35 == v33)
    v40 = v36;
  else
    v40 = a2[4];
  return v34 != (const void **)(v35 + 8 * v40);
}

uint64_t isAllDILocation(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned __int8 *a4)
{
  int v5;
  uint64_t v10;
  const void **BucketFor;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unsigned __int8 **v43;
  uint64_t v44;
  unsigned __int8 **v45;

  if (!a4)
    return 0;
  v5 = *a4;
  if ((v5 - 7) >= 0x1D && v5 != 5)
    return v5 == 6;
  v10 = *((_QWORD *)a2 + 1);
  if (v10 == *(_QWORD *)a2)
  {
    v16 = a2[5];
    v17 = v10 + 8 * v16;
    if ((_DWORD)v16)
    {
      v18 = 0;
      while (*(unsigned __int8 **)(v10 + v18) != a4)
      {
        v18 += 8;
        if (8 * v16 == v18)
          goto LABEL_26;
      }
      v17 = v10 + v18;
    }
LABEL_26:
    if (v17 != *((_QWORD *)a2 + 1) + 8 * v16)
      return 1;
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a2, a4);
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    if (*BucketFor == a4)
    {
      if (v13 == v12)
        v19 = a2[5];
      else
        v19 = a2[4];
      if (BucketFor != (const void **)(v13 + 8 * v19))
        return 1;
    }
    else
    {
      v14 = a2[4];
      if (v13 == v12)
      {
        v14 = a2[5];
        v15 = v14;
      }
      else
      {
        v15 = a2[4];
      }
      if (v13 + 8 * v14 != v13 + 8 * v15)
        return 1;
    }
  }
  v20 = *((_QWORD *)a3 + 1);
  if (v20 == *(_QWORD *)a3)
  {
    v31 = a3[5];
    v32 = v20 + 8 * v31;
    if ((_DWORD)v31)
    {
      v33 = 0;
      while (*(unsigned __int8 **)(v20 + v33) != a4)
      {
        v33 += 8;
        if (8 * v31 == v33)
          goto LABEL_66;
      }
      v32 = v20 + v33;
    }
LABEL_66:
    if (v32 == *((_QWORD *)a3 + 1) + 8 * v31)
      return 0;
  }
  else
  {
    v21 = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a3, a4);
    v22 = *(_QWORD *)a3;
    v23 = *((_QWORD *)a3 + 1);
    if (*v21 == a4)
    {
      if (v23 == v22)
        v34 = a3[5];
      else
        v34 = a3[4];
      if (v21 == (const void **)(v23 + 8 * v34))
        return 0;
    }
    else
    {
      v24 = a3[4];
      if (v23 == v22)
      {
        v24 = a3[5];
        v25 = v24;
      }
      else
      {
        v25 = a3[4];
      }
      if (v23 + 8 * v24 == v23 + 8 * v25)
        return 0;
    }
  }
  v26 = *(_QWORD *)(a1 + 8);
  if (v26 != *(_QWORD *)a1)
    goto LABEL_34;
  v35 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v35)
  {
    v36 = 0;
    v37 = 8 * v35;
    v38 = *(unsigned __int8 ***)(a1 + 8);
    while (*v38 != a4)
    {
      if (*v38 == (unsigned __int8 *)-2)
        v36 = v38;
      ++v38;
      v37 -= 8;
      if (!v37)
      {
        if (!v36)
          goto LABEL_68;
        *v36 = a4;
        --*(_DWORD *)(a1 + 24);
        goto LABEL_35;
      }
    }
    return 0;
  }
LABEL_68:
  if (v35 >= *(_DWORD *)(a1 + 16))
  {
LABEL_34:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, a4);
    if (v27)
      goto LABEL_35;
    return 0;
  }
  *(_DWORD *)(a1 + 20) = v35 + 1;
  *(_QWORD *)(v26 + 8 * v35) = a4;
LABEL_35:
  v28 = *((_QWORD *)a4 - 2);
  if ((v28 & 2) == 0)
  {
    v29 = (unsigned __int8 **)&a4[-8 * ((v28 >> 2) & 0xF) - 16];
    v30 = (v28 >> 6) & 0xF;
    if (!v30)
      goto LABEL_63;
LABEL_58:
    v39 = 8 * v30;
    while (1)
    {
      if (*v29 != a4)
      {
        result = isAllDILocation(a1, a2, a3);
        if (!(_DWORD)result)
          return result;
      }
      ++v29;
      v39 -= 8;
      if (!v39)
        goto LABEL_63;
    }
  }
  v29 = (unsigned __int8 **)*((_QWORD *)a4 - 4);
  v30 = *((unsigned int *)a4 - 6);
  if (*((_DWORD *)a4 - 6))
    goto LABEL_58;
LABEL_63:
  v40 = *((_QWORD *)a2 + 1);
  if (v40 != *(_QWORD *)a2)
    goto LABEL_64;
  v42 = a2[5];
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = 8 * v42;
    v45 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
    while (*v45 != a4)
    {
      if (*v45 == (unsigned __int8 *)-2)
        v43 = v45;
      ++v45;
      v44 -= 8;
      if (!v44)
      {
        if (!v43)
          goto LABEL_78;
        *v43 = a4;
        --a2[6];
        return 1;
      }
    }
    return 1;
  }
LABEL_78:
  if (v42 < a2[4])
  {
    a2[5] = v42 + 1;
    *(_QWORD *)(v40 + 8 * v42) = a4;
    return 1;
  }
  else
  {
LABEL_64:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a2, a4);
    return 1;
  }
}

llvm::MDNode *llvm::function_ref<llvm::Metadata * ()(llvm::Metadata *)>::callback_fn<stripDebugLocFromLoopID(llvm::MDNode *)::$_2>(unsigned int **a1, _BYTE *a2)
{
  return stripLoopMDLoc(*a1, a1[1], a2);
}

llvm::MDNode *stripLoopMDLoc(unsigned int *a1, unsigned int *a2, _BYTE *a3)
{
  llvm::MDNode *v3;
  uint64_t v8;
  const void **BucketFor;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  llvm::MDNode *Impl;
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  if (*a3 == 6)
    return 0;
  v8 = *((_QWORD *)a1 + 1);
  if (v8 == *(_QWORD *)a1)
  {
    v14 = a1[5];
    v15 = v8 + 8 * v14;
    if ((_DWORD)v14)
    {
      v16 = 0;
      while (*(_BYTE **)(v8 + v16) != a3)
      {
        v16 += 8;
        if (8 * v14 == v16)
          goto LABEL_22;
      }
      v15 = v8 + v16;
    }
LABEL_22:
    if (v15 != v8 + 8 * v14)
      return 0;
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a1, a3);
    v10 = *(_QWORD *)a1;
    v11 = *((_QWORD *)a1 + 1);
    if (*BucketFor == a3)
    {
      if (v11 == v10)
        v17 = a1[5];
      else
        v17 = a1[4];
      if (BucketFor != (const void **)(v11 + 8 * v17))
        return 0;
    }
    else
    {
      v12 = a1[4];
      if (v11 == v10)
      {
        v12 = a1[5];
        v13 = v12;
      }
      else
      {
        v13 = a1[4];
      }
      if (v11 + 8 * v12 != v11 + 8 * v13)
        return 0;
    }
  }
  v18 = *((_QWORD *)a2 + 1);
  if (v18 == *(_QWORD *)a2)
  {
    v24 = a2[5];
    v25 = v18 + 8 * v24;
    if ((_DWORD)v24)
    {
      v26 = 0;
      while (*(_BYTE **)(v18 + v26) != a3)
      {
        v26 += 8;
        if (8 * v24 == v26)
          goto LABEL_41;
      }
      v25 = v18 + v26;
    }
LABEL_41:
    if (v25 == *((_QWORD *)a2 + 1) + 8 * v24)
      return (llvm::MDNode *)a3;
  }
  else
  {
    v19 = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)a2, a3);
    v20 = *(_QWORD *)a2;
    v21 = *((_QWORD *)a2 + 1);
    if (*v19 == a3)
    {
      if (v21 == v20)
        v27 = a2[5];
      else
        v27 = a2[4];
      if (v19 == (const void **)(v21 + 8 * v27))
        return (llvm::MDNode *)a3;
    }
    else
    {
      v22 = a2[4];
      if (v21 == v20)
      {
        v22 = a2[5];
        v23 = v22;
      }
      else
      {
        v23 = a2[4];
      }
      if (v21 + 8 * v22 == v21 + 8 * v23)
        return (llvm::MDNode *)a3;
    }
  }
  if (*a3 - 5 > 0x1E)
    return (llvm::MDNode *)a3;
  v28 = 0;
  v29 = 0;
  v43 = v45;
  v44 = 0x400000000;
  v30 = (unint64_t *)(a3 - 16);
  while (1)
  {
    v32 = *v30;
    if ((*v30 & 2) != 0)
      break;
    if (v28 >= ((v32 >> 6) & 0xF))
      goto LABEL_64;
    v33 = (_BYTE *)v30[v28 - ((v32 >> 2) & 0xF)];
    if (!v33)
    {
LABEL_44:
      v31 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 8);
        v31 = v44;
      }
      *((_QWORD *)v43 + v31) = 0;
LABEL_47:
      LODWORD(v44) = v44 + 1;
      goto LABEL_48;
    }
LABEL_55:
    if (v33 == a3)
    {
      v37 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 8);
        v37 = v44;
      }
      *((_QWORD *)v43 + v37) = 0;
      v29 = 1;
      goto LABEL_47;
    }
    v34 = stripLoopMDLoc(a1, a2);
    if (v34)
    {
      v35 = v34;
      v36 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 8);
        v36 = v44;
      }
      *((_QWORD *)v43 + v36) = v35;
      goto LABEL_47;
    }
LABEL_48:
    ++v28;
  }
  if (v28 < *((unsigned int *)a3 - 6))
  {
    v33 = *(_BYTE **)(*((_QWORD *)a3 - 4) + 8 * v28);
    if (!v33)
      goto LABEL_44;
    goto LABEL_55;
  }
LABEL_64:
  v3 = 0;
  if ((_DWORD)v44 && (v29 & (v44 == 1)) == 0)
  {
    v38 = *((_QWORD *)a3 + 1);
    v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
    if ((a3[1] & 0x7F) == 1)
    {
      if ((v38 & 4) != 0)
        v39 = (_QWORD *)*v39;
      v40 = v43;
      v41 = 1;
    }
    else
    {
      if ((v38 & 4) != 0)
        v39 = (_QWORD *)*v39;
      v40 = v43;
      v41 = 0;
    }
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t)v39, v40, v44, v41, 1);
    v3 = Impl;
    if ((v29 & 1) != 0)
      llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  }
  if (v43 != v45)
    free(v43);
  return v3;
}

uint64_t llvm::DILocation::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  unsigned int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (HIWORD(a3))
    v14 = 0;
  else
    v14 = a3;
  if (a7)
    goto LABEL_12;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 528);
  v30 = (void *)__PAIR64__(v14, a2);
  v31 = a4;
  v32 = a5;
  LOBYTE(v33) = a6;
  v29 = 0;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(v17, (uint64_t)&v30, &v29))v19 = v29 == (uint64_t *)(*(_QWORD *)(v16 + 528) + 8 * *(unsigned int *)(v16 + 544));
  else
    v19 = 1;
  if (!v19)
    v18 = *v29;
  if (!v18 && a8)
  {
LABEL_12:
    v30 = &v32;
    v32 = a4;
    v31 = 0x200000001;
    if (a5)
    {
      v33 = a5;
      v20 = 2;
      LODWORD(v31) = 2;
    }
    else
    {
      v20 = 1;
    }
    v21 = llvm::MDNode::operator new(16, v20, a7);
    v22 = llvm::MDNode::MDNode((uint64_t)v21, (uint64_t)a1, 6, a7, (uint64_t)v30, v31, 0, 0);
    *(_DWORD *)(v22 + 4) = a2;
    *(_WORD *)(v22 + 2) = v14;
    if (a6)
      v23 = 0x80;
    else
      v23 = 0;
    *(_BYTE *)(v22 + 1) = v23 & 0x80 | *(_BYTE *)(v22 + 1) & 0x7F;
    v24 = *a1;
    v28 = v22;
    if (a7 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v22);
    }
    else if (!a7)
    {
      v25 = v24 + 528;
      v29 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)(v24 + 528), &v28, &v29) & 1) == 0)
      {
        v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(v25, (uint64_t)&v28, &v28, v29);
        *v26 = v28;
      }
    }
    v18 = v28;
    if (v30 != &v32)
      free(v30);
  }
  return v18;
}

unsigned __int8 *llvm::DILocalScope::getSubprogram(unsigned __int8 *this)
{
  unint64_t v1;

  if (*this - 19 <= 1)
  {
    do
    {
      while (1)
      {
        v1 = *((_QWORD *)this - 2);
        if ((v1 & 2) != 0)
          break;
        this = *(unsigned __int8 **)&this[-8 * ((v1 >> 2) & 0xF) - 8];
        if (*this - 19 >= 2)
          return this;
      }
      this = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 8);
    }
    while (*this - 19 < 2);
  }
  return this;
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return *((unsigned __int16 *)this + 1);
}

const char *llvm::DINode::getFlagString(int a1)
{
  const char *result;

  if (a1 >= 0x4000)
  {
    if (a1 >= 0x400000)
    {
      if (a1 > 0x3FFFFFF)
      {
        if (a1 > 0xFFFFFFF)
        {
          if (a1 == 0x10000000)
            return "DIFlagLittleEndian";
          if (a1 == 0x20000000)
            return "DIFlagAllCallsDescribed";
        }
        else
        {
          if (a1 == 0x4000000)
            return "DIFlagNonTrivial";
          if (a1 == 0x8000000)
            return "DIFlagBigEndian";
        }
      }
      else if (a1 > 0xFFFFFF)
      {
        if (a1 == 0x1000000)
          return "DIFlagEnumClass";
        if (a1 == 0x2000000)
          return "DIFlagThunk";
      }
      else
      {
        if (a1 == 0x400000)
          return "DIFlagTypePassByValue";
        if (a1 == 0x800000)
          return "DIFlagTypePassByReference";
      }
    }
    else if (a1 >= 196608)
    {
      if (a1 >= 0x80000)
      {
        if (a1 == 0x80000)
          return "DIFlagBitField";
        if (a1 == 0x100000)
          return "DIFlagNoReturn";
      }
      else
      {
        if (a1 == 196608)
          return "DIFlagVirtualInheritance";
        if (a1 == 0x40000)
          return "DIFlagIntroducedVirtual";
      }
    }
    else if (a1 >= 0x10000)
    {
      if (a1 == 0x10000)
        return "DIFlagSingleInheritance";
      if (a1 == 0x20000)
        return "DIFlagMultipleInheritance";
    }
    else
    {
      if (a1 == 0x4000)
        return "DIFlagRValueReference";
      if (a1 == 0x8000)
        return "DIFlagExportSymbols";
    }
    return "";
  }
  if (a1 > 127)
  {
    if (a1 <= 1023)
    {
      switch(a1)
      {
        case 128:
          return "DIFlagExplicit";
        case 256:
          return "DIFlagPrototyped";
        case 512:
          return "DIFlagObjcClassComplete";
      }
    }
    else if (a1 > 4095)
    {
      if (a1 == 4096)
        return "DIFlagStaticMember";
      if (a1 == 0x2000)
        return "DIFlagLValueReference";
    }
    else
    {
      if (a1 == 1024)
        return "DIFlagObjectPointer";
      if (a1 == 2048)
        return "DIFlagVector";
    }
    return "";
  }
  result = "DIFlagZero";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "DIFlagPrivate";
      break;
    case 2:
      result = "DIFlagProtected";
      break;
    case 3:
      result = "DIFlagPublic";
      break;
    case 4:
      result = "DIFlagFwdDecl";
      break;
    case 8:
      result = "DIFlagAppleBlock";
      break;
    case 16:
      result = "DIFlagReservedBit4";
      break;
    case 32:
      result = "DIFlagVirtual";
      break;
    case 36:
      result = "DIFlagIndirectVirtualBase";
      break;
    case 64:
      result = "DIFlagArtificial";
      break;
    default:
      return "";
  }
  return result;
}

uint64_t llvm::DINode::splitFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;

  v3 = a1;
  v4 = a1 & 3;
  if ((a1 & 3) != 0)
  {
    if (v4 == 2)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(_DWORD *)(a2 + 12);
      v7 = 2;
    }
    else
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(_DWORD *)(a2 + 12);
      if (v4 == 1)
        v7 = 1;
      else
        v7 = 3;
    }
    if (v5 >= v6)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v5 + 1, 4);
      v5 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v7;
    ++*(_DWORD *)(a2 + 8);
    v3 = (v4 ^ 0x3FFFFFFF) & v3;
  }
  v8 = v3 & 0x30000;
  if ((v3 & 0x30000) != 0)
  {
    if (v8 == 0x20000)
    {
      v9 = *(_DWORD *)(a2 + 8);
      v10 = *(_DWORD *)(a2 + 12);
      v11 = 0x20000;
    }
    else
    {
      v9 = *(_DWORD *)(a2 + 8);
      v10 = *(_DWORD *)(a2 + 12);
      if (v8 == 0x10000)
        v11 = 0x10000;
      else
        v11 = 196608;
    }
    if (v9 >= v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9 + 1, 4);
      v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v11;
    ++*(_DWORD *)(a2 + 8);
    v3 = (v8 ^ 0x3FFFFFFF) & v3;
  }
  if ((~(_DWORD)v3 & 0x24) != 0)
  {
    if ((v3 & 1) == 0)
      goto LABEL_21;
  }
  else
  {
    v3 &= 0x3FFFFFDBu;
    v16 = *(unsigned int *)(a2 + 8);
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16 + 1, 4);
      LODWORD(v16) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = 36;
    ++*(_DWORD *)(a2 + 8);
    if ((v3 & 1) == 0)
    {
LABEL_21:
      if ((v3 & 2) == 0)
        goto LABEL_22;
      goto LABEL_59;
    }
  }
  v17 = v3 & 1;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v18 + 1, 4);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v17 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 2) == 0)
  {
LABEL_22:
    v12 = v3 & 3;
    if ((v3 & 3) == 0)
      goto LABEL_23;
    goto LABEL_62;
  }
LABEL_59:
  v19 = v3 & 2;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v20 + 1, 4);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = v19;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v19 ^ 0x3FFFFFFF) & v3;
  v12 = v3 & 3;
  if ((v3 & 3) == 0)
  {
LABEL_23:
    if ((v3 & 4) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_62:
  v21 = *(unsigned int *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v21 + 1, 4);
    LODWORD(v21) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = v12;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v12 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 4) == 0)
  {
LABEL_24:
    if ((v3 & 8) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_65:
  v22 = v3 & 4;
  v23 = *(unsigned int *)(a2 + 8);
  if (v23 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v23 + 1, 4);
    LODWORD(v23) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v23) = v22;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v22 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 8) == 0)
  {
LABEL_25:
    if ((v3 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_68:
  v24 = v3 & 8;
  v25 = *(unsigned int *)(a2 + 8);
  if (v25 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v25 + 1, 4);
    LODWORD(v25) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v25) = v24;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v24 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_26:
    if ((v3 & 0x20) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_71:
  v26 = v3 & 0x10;
  v27 = *(unsigned int *)(a2 + 8);
  if (v27 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v27 + 1, 4);
    LODWORD(v27) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v27) = v26;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v26 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_27:
    if ((v3 & 0x40) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_74:
  v28 = v3 & 0x20;
  v29 = *(unsigned int *)(a2 + 8);
  if (v29 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v29 + 1, 4);
    LODWORD(v29) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v29) = v28;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v28 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_28:
    if ((v3 & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_77:
  v30 = v3 & 0x40;
  v31 = *(unsigned int *)(a2 + 8);
  if (v31 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v31 + 1, 4);
    LODWORD(v31) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v31) = v30;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v30 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_29:
    if ((v3 & 0x100) == 0)
      goto LABEL_30;
    goto LABEL_83;
  }
LABEL_80:
  v32 = v3 & 0x80;
  v33 = *(unsigned int *)(a2 + 8);
  if (v33 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v33 + 1, 4);
    LODWORD(v33) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v33) = v32;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v32 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_30:
    if ((v3 & 0x200) == 0)
      goto LABEL_31;
    goto LABEL_86;
  }
LABEL_83:
  v34 = v3 & 0x100;
  v35 = *(unsigned int *)(a2 + 8);
  if (v35 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v35 + 1, 4);
    LODWORD(v35) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v35) = v34;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v34 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_31:
    if ((v3 & 0x400) == 0)
      goto LABEL_32;
    goto LABEL_89;
  }
LABEL_86:
  v36 = v3 & 0x200;
  v37 = *(unsigned int *)(a2 + 8);
  if (v37 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v37 + 1, 4);
    LODWORD(v37) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v37) = v36;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v36 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400) == 0)
  {
LABEL_32:
    if ((v3 & 0x800) == 0)
      goto LABEL_33;
    goto LABEL_92;
  }
LABEL_89:
  v38 = v3 & 0x400;
  v39 = *(unsigned int *)(a2 + 8);
  if (v39 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v39 + 1, 4);
    LODWORD(v39) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v39) = v38;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v38 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800) == 0)
  {
LABEL_33:
    if ((v3 & 0x1000) == 0)
      goto LABEL_34;
    goto LABEL_95;
  }
LABEL_92:
  v40 = v3 & 0x800;
  v41 = *(unsigned int *)(a2 + 8);
  if (v41 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v41 + 1, 4);
    LODWORD(v41) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v41) = v40;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v40 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000) == 0)
  {
LABEL_34:
    if ((v3 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_98;
  }
LABEL_95:
  v42 = v3 & 0x1000;
  v43 = *(unsigned int *)(a2 + 8);
  if (v43 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v43 + 1, 4);
    LODWORD(v43) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v43) = v42;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v42 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000) == 0)
  {
LABEL_35:
    if ((v3 & 0x4000) == 0)
      goto LABEL_36;
    goto LABEL_101;
  }
LABEL_98:
  v44 = v3 & 0x2000;
  v45 = *(unsigned int *)(a2 + 8);
  if (v45 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v45 + 1, 4);
    LODWORD(v45) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v45) = v44;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v44 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000) == 0)
  {
LABEL_36:
    if ((v3 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_104;
  }
LABEL_101:
  v46 = v3 & 0x4000;
  v47 = *(unsigned int *)(a2 + 8);
  if (v47 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v47 + 1, 4);
    LODWORD(v47) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v47) = v46;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v46 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v3 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_107;
  }
LABEL_104:
  v48 = v3 & 0x8000;
  v49 = *(unsigned int *)(a2 + 8);
  if (v49 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v49 + 1, 4);
    LODWORD(v49) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v49) = v48;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v48 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000) == 0)
  {
LABEL_38:
    if ((v3 & 0x20000) == 0)
      goto LABEL_39;
    goto LABEL_110;
  }
LABEL_107:
  v50 = v3 & 0x10000;
  v51 = *(unsigned int *)(a2 + 8);
  if (v51 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v51 + 1, 4);
    LODWORD(v51) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v51) = v50;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v50 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000) == 0)
  {
LABEL_39:
    v13 = v3 & 0x30000;
    if ((v3 & 0x30000) == 0)
      goto LABEL_40;
    goto LABEL_113;
  }
LABEL_110:
  v52 = v3 & 0x20000;
  v53 = *(unsigned int *)(a2 + 8);
  if (v53 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v53 + 1, 4);
    LODWORD(v53) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v53) = v52;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v52 ^ 0x3FFFFFFF) & v3;
  v13 = v3 & 0x30000;
  if ((v3 & 0x30000) == 0)
  {
LABEL_40:
    if ((v3 & 0x40000) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_113:
  v54 = *(unsigned int *)(a2 + 8);
  if (v54 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v54 + 1, 4);
    LODWORD(v54) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v54) = v13;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v13 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x40000) == 0)
  {
LABEL_41:
    if ((v3 & 0x80000) == 0)
      goto LABEL_42;
    goto LABEL_119;
  }
LABEL_116:
  v55 = v3 & 0x40000;
  v56 = *(unsigned int *)(a2 + 8);
  if (v56 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v56 + 1, 4);
    LODWORD(v56) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v56) = v55;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v55 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x80000) == 0)
  {
LABEL_42:
    if ((v3 & 0x100000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_119:
  v57 = v3 & 0x80000;
  v58 = *(unsigned int *)(a2 + 8);
  if (v58 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v58 + 1, 4);
    LODWORD(v58) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v58) = v57;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v57 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100000) == 0)
  {
LABEL_43:
    if ((v3 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_122:
  v59 = v3 & 0x100000;
  v60 = *(unsigned int *)(a2 + 8);
  if (v60 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v60 + 1, 4);
    LODWORD(v60) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v60) = v59;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v59 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400000) == 0)
  {
LABEL_44:
    if ((v3 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_128;
  }
LABEL_125:
  v61 = v3 & 0x400000;
  v62 = *(unsigned int *)(a2 + 8);
  if (v62 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v62 + 1, 4);
    LODWORD(v62) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v62) = v61;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v61 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800000) == 0)
  {
LABEL_45:
    if ((v3 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_131;
  }
LABEL_128:
  v63 = v3 & 0x800000;
  v64 = *(unsigned int *)(a2 + 8);
  if (v64 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v64 + 1, 4);
    LODWORD(v64) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v64) = v63;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v63 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v3 & 0x2000000) == 0)
      goto LABEL_47;
    goto LABEL_134;
  }
LABEL_131:
  v65 = v3 & 0x1000000;
  v66 = *(unsigned int *)(a2 + 8);
  if (v66 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v66 + 1, 4);
    LODWORD(v66) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v66) = v65;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v65 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000000) == 0)
  {
LABEL_47:
    if ((v3 & 0x4000000) == 0)
      goto LABEL_48;
    goto LABEL_137;
  }
LABEL_134:
  v67 = v3 & 0x2000000;
  v68 = *(unsigned int *)(a2 + 8);
  if (v68 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v68 + 1, 4);
    LODWORD(v68) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v68) = v67;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v67 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000000) == 0)
  {
LABEL_48:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_49;
    goto LABEL_140;
  }
LABEL_137:
  v69 = v3 & 0x4000000;
  v70 = *(unsigned int *)(a2 + 8);
  if (v70 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v70 + 1, 4);
    LODWORD(v70) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v70) = v69;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v69 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000000) == 0)
  {
LABEL_49:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_50;
    goto LABEL_143;
  }
LABEL_140:
  v71 = v3 & 0x8000000;
  v72 = *(unsigned int *)(a2 + 8);
  if (v72 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v72 + 1, 4);
    LODWORD(v72) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v72) = v71;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v71 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000000) == 0)
  {
LABEL_50:
    if ((v3 & 0x20000000) == 0)
      goto LABEL_51;
LABEL_146:
    v75 = v3 & 0x20000000;
    v76 = *(unsigned int *)(a2 + 8);
    if (v76 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v76 + 1, 4);
      LODWORD(v76) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v76) = v75;
    ++*(_DWORD *)(a2 + 8);
    v3 = (v75 ^ 0x3FFFFFFF) & v3;
    v14 = v3 & 0x24;
    if ((v3 & 0x24) == 0)
      return v3;
    goto LABEL_149;
  }
LABEL_143:
  v73 = v3 & 0x10000000;
  v74 = *(unsigned int *)(a2 + 8);
  if (v74 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v74 + 1, 4);
    LODWORD(v74) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v74) = v73;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v73 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000000) != 0)
    goto LABEL_146;
LABEL_51:
  v14 = v3 & 0x24;
  if ((v3 & 0x24) == 0)
    return v3;
LABEL_149:
  v77 = *(unsigned int *)(a2 + 8);
  if (v77 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v77 + 1, 4);
    LODWORD(v77) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v77) = v14;
  ++*(_DWORD *)(a2 + 8);
  return (v14 ^ 0x3FFFFFFF) & v3;
}

uint64_t llvm::DIScope::getScope(llvm::DIScope *this)
{
  int v1;
  unint64_t v2;
  unint64_t v4;
  char *v5;

  v1 = *(unsigned __int8 *)this;
  if ((v1 - 12) < 4 || v1 == 18 || v1 == 34 || (v1 - 19) <= 1)
  {
LABEL_8:
    v2 = *((_QWORD *)this - 2);
    if ((v2 & 2) != 0)
      return *(_QWORD *)(*((_QWORD *)this - 4) + 8);
    else
      return *((_QWORD *)this - ((v2 >> 2) & 0xF) - 1);
  }
  if (v1 != 33)
  {
    if (v1 != 22 && v1 != 21)
      return 0;
    goto LABEL_8;
  }
  v4 = *((_QWORD *)this - 2);
  if ((v4 & 2) != 0)
    v5 = (char *)*((_QWORD *)this - 4);
  else
    v5 = (char *)this - 8 * ((v4 >> 2) & 0xF) - 16;
  return *(_QWORD *)v5;
}

uint64_t llvm::GenericDINode::getImpl(uint64_t a1, int a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int a6, int a7)
{
  int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  _QWORD *v37[4];
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v13 = 0;
  }
  else
  {
    v37[0] = a4;
    v37[1] = a5;
    v37[2] = 0;
    v37[3] = 0;
    v15 = llvm::MDNodeOpsKey::calculateHash(a4, (uint64_t)a5);
    v38 = v15;
    v39 = a2;
    v40 = a3;
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 600);
    v18 = *(_DWORD *)(*(_QWORD *)a1 + 616);
    if (!v18)
      goto LABEL_15;
    LODWORD(v41) = v15;
    v19 = llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *>(&v41, &v39, &v40);
    v20 = v18 - 1;
    v21 = (v18 - 1) & v19;
    v22 = 1;
    v23 = (uint64_t *)(v17 + 8 * v21);
    v24 = *v23;
    if ((*v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_7;
    while (v24 != -4096)
    {
      while (1)
      {
        v25 = v21 + v22++;
        v21 = v25 & v20;
        v23 = (uint64_t *)(v17 + 8 * (v25 & v20));
        v24 = *v23;
        if ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_7:
        v34 = v22;
        v35 = v21;
        v36 = v20;
        if (llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf((uint64_t)v37, v24))
        {
          if (v23 != (uint64_t *)(*(_QWORD *)(v16 + 600) + 8 * *(unsigned int *)(v16 + 616)))
            goto LABEL_12;
          goto LABEL_15;
        }
        v21 = v35;
        v20 = v36;
        v22 = v34;
        if (*v23 == -4096)
          goto LABEL_9;
      }
    }
LABEL_9:
    v26 = *(_QWORD *)(v16 + 600);
    v27 = *(unsigned int *)(v16 + 616);
    v23 = (uint64_t *)(v26 + 8 * v27);
    if (v23 != (uint64_t *)(v26 + 8 * v27))
    {
LABEL_12:
      result = *v23;
      if (*v23)
        return result;
    }
    else
    {
LABEL_15:
      result = 0;
    }
    if (!a7)
      return result;
    v13 = v38;
  }
  v42[0] = a3;
  v29 = llvm::MDNode::operator new(16, (unint64_t)a5 + 1, a6);
  v30 = llvm::MDNode::MDNode((uint64_t)v29, a1, 9, a6, (uint64_t)v42, 1, (unsigned __int8 **)a4, (uint64_t)a5);
  *(_WORD *)(v30 + 2) = a2;
  *(_DWORD *)(v30 + 4) = v13;
  v31 = *(_QWORD *)a1;
  v41 = v30;
  if (a6 == 1)
  {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v30);
  }
  else if (!a6)
  {
    v32 = v31 + 600;
    v37[0] = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)(v31 + 600), &v41, v37) & 1) == 0)
    {
      v33 = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(v32, (uint64_t)&v41, &v41, v37[0]);
      *v33 = v41;
    }
  }
  return v41;
}

unint64_t llvm::GenericDINode::recalculateHash(llvm::GenericDINode *this)
{
  unint64_t result;

  result = llvm::MDNodeOpsKey::calculateHash(this, (llvm::MDNode *)1);
  *((_DWORD *)this + 1) = result;
  return result;
}

char **llvm::DISubrange::getImpl(llvm::Type *a1, llvm::LLVMContext *a2, uint64_t a3, int a4, int a5)
{
  uint64_t Int64Ty;
  llvm::ValueAsMetadata *v11;
  llvm::Value *v12;
  llvm::ValueAsMetadata *v13;
  llvm::LLVMContext *v14;
  uint64_t v15;
  llvm::ValueAsMetadata *v16;
  llvm::Value *v17;
  llvm::ValueAsMetadata *v18;

  Int64Ty = llvm::Type::getInt64Ty(a1, a2);
  v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int64Ty, (uint64_t)a2, (const llvm::APInt *)1);
  v13 = llvm::ValueAsMetadata::get(v11, v12);
  v15 = llvm::Type::getInt64Ty(a1, v14);
  v16 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v15, a3, (const llvm::APInt *)1);
  v18 = llvm::ValueAsMetadata::get(v16, v17);
  return llvm::DISubrange::getImpl(a1, (uint64_t)v13, (uint64_t)v18, 0, 0, a4, a5);
}

{
  uint64_t Int64Ty;
  llvm::ValueAsMetadata *v11;
  llvm::Value *v12;
  llvm::ValueAsMetadata *v13;

  Int64Ty = llvm::Type::getInt64Ty(a1, a2);
  v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int64Ty, a3, (const llvm::APInt *)1);
  v13 = llvm::ValueAsMetadata::get(v11, v12);
  return llvm::DISubrange::getImpl(a1, (uint64_t)a2, (uint64_t)v13, 0, 0, a4, a5);
}

char **llvm::DISubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t *v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 624);
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v31 = 0;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(v15, &v32, (uint64_t **)&v31))v17 = v31 == (char **)(*(_QWORD *)(v14 + 624) + 8 * *(unsigned int *)(v14 + 640));
  else
    v17 = 1;
  if (!v17)
    v16 = *v31;
  if (!v16 && a7)
  {
LABEL_9:
    v32 = a2;
    v33 = a3;
    v34 = a4;
    v35 = a5;
    v16 = llvm::MDNode::operator new(16, 4uLL, a6);
    v18 = llvm::MDNode::MDNode((uint64_t)v16, (uint64_t)a1, 10, a6, (uint64_t)&v32, 4, 0, 0);
    *(_WORD *)(v18 + 2) = 33;
    v19 = *a1;
    v31 = (char **)v18;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v16);
    }
    else if (!a6)
    {
      v20 = *(_DWORD *)(v19 + 640);
      if (!v20)
      {
        v30 = 0;
LABEL_25:
        llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucket<llvm::DISubrange * const&,llvm::detail::DenseSetEmpty&>(v19 + 624, v30, (uint64_t *)&v31);
        return v31;
      }
      v21 = *(_QWORD *)(v19 + 624);
      v22 = llvm::MDNodeInfo<llvm::DISubrange>::getHashValue((uint64_t)v16) & (v20 - 1);
      v23 = (uint64_t *)(v21 + 8 * v22);
      v24 = (char *)*v23;
      if ((char *)*v23 != v16)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != (char *)-4096)
        {
          if (v25)
            v27 = 0;
          else
            v27 = v24 == (char *)-8192;
          if (v27)
            v25 = v23;
          v28 = v22 + v26++;
          v22 = v28 & (v20 - 1);
          v23 = (uint64_t *)(v21 + 8 * v22);
          v24 = (char *)*v23;
          if ((char *)*v23 == v16)
            return (char **)v16;
        }
        if (v25)
          v30 = v25;
        else
          v30 = v23;
        goto LABEL_25;
      }
    }
  }
  return (char **)v16;
}

unint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  unint64_t v1;
  unint64_t v2;
  int v3;

  v1 = *((_QWORD *)this - 2);
  if ((v1 & 2) != 0)
  {
    v2 = **((_QWORD **)this - 4);
    if (!v2)
      return 0;
  }
  else
  {
    v2 = *((_QWORD *)this - ((v1 >> 2) & 0xF) - 2);
    if (!v2)
      return 0;
  }
  v3 = *(unsigned __int8 *)v2;
  if (v3 == 1)
    return *(_QWORD *)(v2 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v3 - 27) < 0xFFFFFFFE)
  {
    if (v3 == 7)
      return v2 & 0xFFFFFFFFFFFFFFF9 | 4;
    return 0;
  }
  return v2 & 0xFFFFFFFFFFFFFFF9 | 2;
}

char **llvm::DIGenericSubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  BOOL v17;
  char **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t *v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1176);
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v31 = 0;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(v15, &v32, &v31))v17 = v31 == (char **)(*(_QWORD *)(v14 + 1176) + 8 * *(unsigned int *)(v14 + 1192));
  else
    v17 = 1;
  if (!v17)
    v16 = *v31;
  if (!v16 && a7)
  {
LABEL_9:
    v32 = a2;
    v33 = a3;
    v34 = a4;
    v35 = a5;
    v16 = llvm::MDNode::operator new(16, 4uLL, a6);
    v18 = (char **)llvm::MDNode::MDNode((uint64_t)v16, (uint64_t)a1, 35, a6, (uint64_t)&v32, 4, 0, 0);
    *((_WORD *)v18 + 1) = 69;
    v19 = *a1;
    v31 = v18;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v16);
    }
    else if (!a6)
    {
      v20 = *(_DWORD *)(v19 + 1192);
      if (!v20)
      {
        v30 = 0;
LABEL_25:
        llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucket<llvm::DISubrange * const&,llvm::detail::DenseSetEmpty&>(v19 + 1176, v30, (uint64_t *)&v31);
        return v31;
      }
      v21 = *(_QWORD *)(v19 + 1176);
      v22 = llvm::MDNodeInfo<llvm::DISubrange>::getHashValue((uint64_t)v16) & (v20 - 1);
      v23 = (uint64_t *)(v21 + 8 * v22);
      v24 = (char *)*v23;
      if ((char *)*v23 != v16)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != (char *)-4096)
        {
          if (v25)
            v27 = 0;
          else
            v27 = v24 == (char *)-8192;
          if (v27)
            v25 = v23;
          v28 = v22 + v26++;
          v22 = v28 & (v20 - 1);
          v23 = (uint64_t *)(v21 + 8 * v22);
          v24 = (char *)*v23;
          if ((char *)*v23 == v16)
            return (char **)v16;
        }
        if (v25)
          v30 = v25;
        else
          v30 = v23;
        goto LABEL_25;
      }
    }
  }
  return (char **)v16;
}

char *llvm::DIEnumerator::getImpl(_QWORD *a1, llvm::APInt *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  llvm::APInt *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  unsigned int v26;
  void *__p;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_18;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 648);
  v14 = *((_DWORD *)a2 + 2);
  v26 = v14;
  if (v14 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)a2);
    v28 = v26;
    if (v26 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v25);
    else
      __p = v25;
  }
  else
  {
    v25 = *(void **)a2;
    v28 = v14;
    __p = v25;
  }
  v29 = a4;
  v30 = a3;
  v31 = 0;
  v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(v13, (uint64_t)&__p, &v31);
  v16 = 0;
  if (v15 && v31 != (char *)(*(_QWORD *)(v12 + 648) + 8 * *(unsigned int *)(v12 + 664)))
    v16 = *(_QWORD *)v31;
  if (v28 >= 0x41 && __p)
    operator delete[](__p);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  if (!v16 && a6)
  {
LABEL_18:
    v32[0] = a4;
    v17 = llvm::MDNode::operator new(32, 1uLL, a5);
    v18 = llvm::MDNode::MDNode((uint64_t)v17, (uint64_t)a1, 11, a5, (uint64_t)v32, 1, 0, 0);
    *(_WORD *)(v18 + 2) = 40;
    v19 = (llvm::APInt *)(v18 + 16);
    v20 = *((_DWORD *)a2 + 2);
    *((_DWORD *)v17 + 6) = v20;
    if (v20 > 0x40)
    {
      llvm::APInt::initSlowCase(v19, (const void **)a2);
      *((_DWORD *)v17 + 1) = a3;
      v21 = *a1;
      v31 = v17;
      if (a5 != 1)
        goto LABEL_20;
    }
    else
    {
      *(_QWORD *)v19 = *(_QWORD *)a2;
      *((_DWORD *)v17 + 1) = a3;
      v21 = *a1;
      v31 = v17;
      if (a5 != 1)
      {
LABEL_20:
        if (!a5)
        {
          v22 = v21 + 648;
          __p = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)(v21 + 648), &v31, &__p) & 1) == 0)
          {
            v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(v22, (uint64_t)&v31, &v31, __p);
            *v23 = v31;
          }
        }
        return v31;
      }
    }
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v17);
    return v31;
  }
  return (char *)v16;
}

uint64_t llvm::DIBasicType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  __int16 v15;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD v30[4];

  v15 = a2;
  v30[3] = *MEMORY[0x1E0C80C00];
  if (a8)
    goto LABEL_7;
  v17 = *a1;
  v18 = (uint64_t *)(*a1 + 672);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a7;
  v30[0] = 0;
  v19 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(v18, (uint64_t)&v23, v30)&& v30[0] != *(_QWORD *)(v17 + 672) + 8 * *(unsigned int *)(v17 + 688))
  {
    v19 = *(char **)v30[0];
  }
  if (!v19 && a9)
  {
LABEL_7:
    v30[0] = 0;
    v30[1] = 0;
    v30[2] = a3;
    v19 = llvm::MDNode::operator new(48, 3uLL, a8);
    v20 = llvm::MDNode::MDNode((uint64_t)v19, (uint64_t)a1, 12, a8, (uint64_t)v30, 3, 0, 0);
    *(_WORD *)(v20 + 2) = v15;
    *(_DWORD *)(v20 + 16) = 0;
    *(_DWORD *)(v20 + 20) = a7;
    *(_DWORD *)(v20 + 4) = a5;
    *(_QWORD *)(v20 + 24) = a4;
    *(_QWORD *)(v20 + 32) = 0;
    *(_DWORD *)(v20 + 40) = a6;
    v21 = *a1;
    v29 = v20;
    if (a8 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v19);
    }
    else if (!a8)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21 + 672, &v29, (uint64_t)&v23);
      return v29;
    }
  }
  return (uint64_t)v19;
}

llvm::MDNode *llvm::DIStringType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, char a11)
{
  int v11;
  __int16 v17;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  char *v23;
  uint64_t v24;
  llvm::MDNode **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v11 = a8;
  v17 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  if (a10)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 1152);
  LODWORD(v27) = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a8;
  v34 = a9;
  v26 = 0;
  v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(v20, (uint64_t)&v27, &v26);
  result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(_QWORD *)(v19 + 1152) + 8 * *(unsigned int *)(v19 + 1168)))
    result = *v26;
  v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      v27 = 0;
      v28 = 0;
      v29 = a3;
      v30 = a4;
      v31 = a5;
      v32 = a6;
      v23 = llvm::MDNode::operator new(48, 6uLL, a10);
      v24 = llvm::MDNode::MDNode((uint64_t)v23, (uint64_t)a1, 34, a10, (uint64_t)&v27, 6, 0, 0);
      *(_WORD *)(v24 + 2) = v17;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = a7;
      *(_DWORD *)(v24 + 4) = v11;
      *(_QWORD *)(v24 + 32) = 0;
      *(_DWORD *)(v24 + 40) = a9;
      return llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>((llvm::MDNode *)v24, a10, *a1 + 1152);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  llvm::MDNode **v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  unsigned int v14;
  llvm::MDNode **v15;
  llvm::MDNode *v16;
  llvm::MDNode **v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  llvm::MDNode *v21;
  int v22;
  _OWORD v23[2];
  uint64_t v24;
  int v25;
  int v26;

  v21 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
    return this;
  }
  if (a2)
    return this;
  v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a3;
    v7 = *((_QWORD *)this - 2);
    v22 = *((unsigned __int16 *)this + 1);
    if ((v7 & 2) != 0)
      v8 = (char *)*((_QWORD *)this - 4);
    else
      v8 = (char *)this - 8 * ((v7 >> 2) & 0xF) - 16;
    v12 = *((_OWORD *)v8 + 2);
    v23[0] = *((_OWORD *)v8 + 1);
    v23[1] = v12;
    v24 = *((_QWORD *)this + 3);
    v13 = *((_DWORD *)this + 10);
    v25 = *((_DWORD *)this + 1);
    v26 = v13;
    v14 = (v5 - 1) & llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(&v22, (uint64_t *)v23, (uint64_t *)v23 + 1, &v26);
    v15 = (llvm::MDNode **)(v6 + 8 * v14);
    v16 = *v15;
    if (*v15 != this)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != (llvm::MDNode *)-4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == (llvm::MDNode *)-8192;
        if (v19)
          v17 = v15;
        v20 = v14 + v18++;
        v14 = v20 & (v5 - 1);
        v15 = (llvm::MDNode **)(v6 + 8 * v14);
        v16 = *v15;
        if (*v15 == this)
          return this;
      }
      if (v17)
        v10 = v17;
      else
        v10 = v15;
      goto LABEL_9;
    }
    return this;
  }
  v10 = 0;
LABEL_9:
  v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(a3, (uint64_t)&v21, (uint64_t *)&v21, v10);
  *v11 = v21;
  return v21;
}

uint64_t llvm::DIDerivedType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  uint64_t v17;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t result;
  __int16 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int16 v42;
  int v43;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v17 = a8;
  v23 = a13;
  v24 = a11;
  v25 = a10;
  v26 = a9;
  v61 = *MEMORY[0x1E0C80C00];
  if (a16)
    goto LABEL_7;
  v27 = *a1;
  v28 = (uint64_t *)(*a1 + 696);
  v42 = a2;
  v43 = a5;
  LODWORD(v47) = a2;
  v48 = a3;
  v49 = a4;
  LODWORD(v50) = a5;
  v51 = a6;
  v52 = a7;
  v53 = a8;
  v54 = a10;
  v55 = a9;
  v56 = a11;
  v57 = a12;
  v58 = a13;
  v59 = a14;
  v60 = a15;
  v46 = 0;
  v29 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(v28, (uint64_t)&v47, &v46);
  result = 0;
  if (v29 && v46 != (uint64_t *)(*(_QWORD *)(v27 + 696) + 8 * *(unsigned int *)(v27 + 712)))
    result = *v46;
  v17 = a8;
  LOWORD(a2) = v42;
  a5 = v43;
  v24 = a11;
  v23 = a13;
  v25 = a10;
  v26 = a9;
  if (!result)
  {
    if (a17)
    {
LABEL_7:
      v47 = a4;
      v48 = a6;
      v49 = a3;
      v50 = a7;
      v51 = a14;
      v52 = a15;
      v31 = a2;
      v32 = a5;
      v33 = v24;
      v34 = v23;
      v35 = v25;
      v36 = v26;
      v37 = llvm::MDNode::operator new(48, 6uLL, a16);
      v38 = llvm::MDNode::MDNode((uint64_t)v37, (uint64_t)a1, 13, a16, (uint64_t)&v47, 6, 0, 0);
      *(_WORD *)(v38 + 2) = v31;
      *(_DWORD *)(v38 + 16) = v32;
      *(_DWORD *)(v38 + 20) = v34;
      *(_DWORD *)(v38 + 4) = v36;
      *(_QWORD *)(v38 + 24) = v17;
      *(_QWORD *)(v38 + 32) = v35;
      *(_QWORD *)(v38 + 40) = v33;
      if ((a12 & 0xFF00000000) != 0)
        *(_DWORD *)(v38 + 4) = a12;
      v39 = *a1;
      v45 = v38;
      if (a16 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v38);
      }
      else if (!a16)
      {
        v40 = v39 + 696;
        v46 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)(v39 + 696), &v45, &v46) & 1) == 0)
        {
          v41 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(v40, (uint64_t)&v45, &v45, v46);
          *v41 = v45;
        }
      }
      return v45;
    }
  }
  return result;
}

char **llvm::DICompositeType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  __int16 v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v24 = a8;
  v28 = a21;
  v27 = a22;
  v30 = a19;
  v29 = a20;
  v31 = a18;
  v32 = a13;
  v33 = a11;
  v34 = a10;
  v35 = a9;
  v85 = *MEMORY[0x1E0C80C00];
  if (a23)
    goto LABEL_7;
  v36 = *a1;
  v37 = (uint64_t *)(*a1 + 720);
  v61 = a2;
  v62 = a5;
  LODWORD(v65) = a2;
  v58 = a3;
  v66 = a3;
  v67 = a4;
  LODWORD(v68) = a5;
  v59 = a6;
  v69 = a6;
  v70 = a7;
  v60 = a7;
  v64 = 0;
  v71 = a8;
  v72 = a10;
  v73 = __PAIR64__(a11, a9);
  v74 = a12;
  LODWORD(v75) = a13;
  v76 = a14;
  v77 = a15;
  v78 = a16;
  v79 = a17;
  v80 = a18;
  v81 = a19;
  v82 = a20;
  v83 = a21;
  v84 = a22;
  v38 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(v37, (uint64_t)&v65, (uint64_t **)&v64)&& v64 != (char **)(*(_QWORD *)(v36 + 720) + 8 * *(unsigned int *)(v36 + 736)))
  {
    v38 = *v64;
  }
  v24 = a8;
  LOWORD(a2) = v61;
  a5 = v62;
  v32 = a13;
  v34 = a10;
  v35 = a9;
  v33 = a11;
  a7 = v60;
  v27 = a22;
  v29 = a20;
  v28 = a21;
  v30 = a19;
  a6 = v59;
  v31 = a18;
  a3 = v58;
  if (!v38)
  {
    if (a24)
    {
LABEL_7:
      v65 = a4;
      v66 = a6;
      v67 = a3;
      v68 = a7;
      v69 = a12;
      v70 = a14;
      v71 = a15;
      v72 = a16;
      v73 = a17;
      v74 = v31;
      v75 = v30;
      v76 = v29;
      v77 = v28;
      v78 = v27;
      v39 = a2;
      v40 = a5;
      v41 = v32;
      v42 = v34;
      v43 = v33;
      v44 = v35;
      v38 = llvm::MDNode::operator new(48, 0xEuLL, a23);
      v45 = llvm::MDNode::MDNode((uint64_t)v38, (uint64_t)a1, 14, a23, (uint64_t)&v65, 14, 0, 0);
      *(_WORD *)(v45 + 2) = v39;
      *(_DWORD *)(v45 + 16) = v40;
      *(_DWORD *)(v45 + 20) = v43;
      *(_DWORD *)(v45 + 4) = v44;
      *(_QWORD *)(v45 + 24) = v24;
      *(_QWORD *)(v45 + 32) = v42;
      *(_DWORD *)(v45 + 40) = v41;
      v46 = *a1;
      v64 = (char **)v45;
      if (a23 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v38);
      }
      else if (!a23)
      {
        v47 = *(_DWORD *)(v46 + 736);
        if (!v47)
        {
          v57 = 0;
LABEL_23:
          llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucket<llvm::DICompositeType * const&,llvm::detail::DenseSetEmpty&>(v46 + 720, v57, (uint64_t *)&v64);
          return v64;
        }
        v48 = *(_QWORD *)(v46 + 720);
        v49 = llvm::MDNodeInfo<llvm::DICompositeType>::getHashValue((uint64_t)v38) & (v47 - 1);
        v50 = (uint64_t *)(v48 + 8 * v49);
        v51 = (char *)*v50;
        if ((char *)*v50 != v38)
        {
          v52 = 0;
          v53 = 1;
          while (v51 != (char *)-4096)
          {
            if (v52)
              v54 = 0;
            else
              v54 = v51 == (char *)-8192;
            if (v54)
              v52 = v50;
            v55 = v49 + v53++;
            v49 = v55 & (v47 - 1);
            v50 = (uint64_t *)(v48 + 8 * v49);
            v51 = (char *)*v50;
            if ((char *)*v50 == v38)
              return (char **)v38;
          }
          if (v52)
            v57 = v52;
          else
            v57 = v50;
          goto LABEL_23;
        }
      }
    }
  }
  return (char **)v38;
}

char *llvm::DICompositeType::buildODRType(llvm::LLVMContext *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unint64_t v49;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!llvm::LLVMContext::isODRUniquingDebugTypes(a1))
    return 0;
  v30 = *(_QWORD *)a1;
  v31 = *(_DWORD *)(*(_QWORD *)a1 + 1216);
  if (!v31)
    goto LABEL_40;
  v32 = *(_QWORD *)(v30 + 1200);
  v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v34 = (_QWORD *)(v32 + 16 * v33);
  v35 = *v34;
  if (*v34 == a2)
    goto LABEL_18;
  v36 = 0;
  v37 = 1;
  while (v35 != -4096)
  {
    if (v36)
      v38 = 0;
    else
      v38 = v35 == -8192;
    if (v38)
      v36 = v34;
    v39 = v33 + v37++;
    v33 = v39 & (v31 - 1);
    v34 = (_QWORD *)(v32 + 16 * v33);
    v35 = *v34;
    if (*v34 == a2)
      goto LABEL_18;
  }
  if (v36)
    v34 = v36;
  v51 = *(_DWORD *)(v30 + 1208);
  if (4 * v51 + 4 >= 3 * v31)
  {
LABEL_40:
    v31 *= 2;
LABEL_41:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v30 + 1200, v31);
    v52 = *(_QWORD *)(v30 + 1200);
    v53 = *(_DWORD *)(v30 + 1216) - 1;
    v54 = v53 & ((a2 >> 4) ^ (a2 >> 9));
    v34 = (_QWORD *)(v52 + 16 * v54);
    v55 = *v34;
    if (*v34 == a2)
    {
LABEL_42:
      ++*(_DWORD *)(v30 + 1208);
      if (a2 == -4096)
        goto LABEL_17;
    }
    else
    {
      v56 = 0;
      v57 = 1;
      while (v55 != -4096)
      {
        if (v56)
          v58 = 0;
        else
          v58 = v55 == -8192;
        if (v58)
          v56 = v34;
        v59 = v54 + v57++;
        v54 = v59 & v53;
        v34 = (_QWORD *)(v52 + 16 * v54);
        v55 = *v34;
        if (*v34 == a2)
          goto LABEL_42;
      }
      if (v56)
        v34 = v56;
      v60 = *v34;
      ++*(_DWORD *)(v30 + 1208);
      if (v60 == -4096)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v31 + ~v51 - *(_DWORD *)(v30 + 1212) <= v31 >> 3)
    goto LABEL_41;
  v40 = *v34;
  ++*(_DWORD *)(v30 + 1208);
  if (v40 != -4096)
LABEL_16:
    --*(_DWORD *)(v30 + 1212);
LABEL_17:
  *v34 = a2;
  v34[1] = 0;
LABEL_18:
  v41 = (char *)v34[1];
  if (!v41)
  {
    v61 = a5;
    v62 = a7;
    v63 = a4;
    v64 = a8;
    v65 = a13;
    v66 = a15;
    v67 = a16;
    v68 = a2;
    v69 = a17;
    v70 = a18;
    v71 = a19;
    v72 = a20;
    v73 = a21;
    v74 = a22;
    v41 = llvm::MDNode::operator new(48, 0xEuLL, 1);
    v44 = llvm::MDNode::MDNode((uint64_t)v41, (uint64_t)a1, 14, 1, (uint64_t)&v61, 14, 0, 0);
    *(_WORD *)(v44 + 2) = a3;
    *(_DWORD *)(v44 + 16) = a6;
    *(_DWORD *)(v44 + 20) = a12;
    *(_DWORD *)(v44 + 4) = a10;
    *(_QWORD *)(v44 + 24) = a9;
    *(_QWORD *)(v44 + 32) = a11;
    *(_DWORD *)(v44 + 40) = a14;
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v44);
    v34[1] = v41;
    return v41;
  }
  if (*((unsigned __int16 *)v41 + 1) != a3)
    return 0;
  if ((a12 & 4) == 0 && (*((_DWORD *)v41 + 5) & 4) != 0)
  {
    *((_DWORD *)v41 + 10) = a14;
    *((_WORD *)v41 + 1) = a3;
    *((_DWORD *)v41 + 4) = a6;
    *((_DWORD *)v41 + 5) = a12;
    *((_DWORD *)v41 + 1) = a10;
    *((_QWORD *)v41 + 3) = a9;
    *((_QWORD *)v41 + 4) = a11;
    v61 = a5;
    v62 = a7;
    v63 = a4;
    v64 = a8;
    v65 = a13;
    v66 = a15;
    v67 = a16;
    v68 = a2;
    v69 = a17;
    v70 = a18;
    v71 = a19;
    v72 = a20;
    v73 = a21;
    v74 = a22;
    v41 = (char *)v34[1];
    v42 = *((_QWORD *)v41 - 2);
    v43 = (v42 & 2) != 0 ? *((_DWORD *)v41 - 6) : (v42 >> 6) & 0xF;
    if (v43)
    {
      v45 = 0;
      v46 = v43;
      while (1)
      {
        v48 = v34[1];
        v49 = *(_QWORD *)(v48 - 16);
        if ((v49 & 2) == 0)
          break;
        v47 = (unsigned __int8 *)*(&v61 + v45);
        if (v47 != *(unsigned __int8 **)(*(_QWORD *)(v48 - 32) + 8 * v45))
          goto LABEL_30;
LABEL_31:
        if (v46 == ++v45)
          return (char *)v34[1];
      }
      v47 = (unsigned __int8 *)*(&v61 + v45);
      if (v47 == *(unsigned __int8 **)(v48 - 16 - 8 * ((v49 >> 2) & 0xF) + 8 * v45))
        goto LABEL_31;
LABEL_30:
      llvm::MDNode::setOperand(v48, v45, v47);
      goto LABEL_31;
    }
  }
  return v41;
}

uint64_t llvm::DISubroutineType::getImpl(uint64_t *a1, int a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE v30[31];
  uint64_t v31;
  uint64_t v32[4];

  v32[3] = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_21;
  v12 = *a1;
  LODWORD(v31) = a2;
  BYTE4(v31) = a3;
  v32[0] = a4;
  v13 = *(_QWORD *)(v12 + 744);
  v14 = *(_DWORD *)(v12 + 760);
  if (!v14)
  {
LABEL_19:
    v25 = 0;
LABEL_20:
    if (!a6)
      return (uint64_t)v25;
LABEL_21:
    v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    v32[2] = a4;
    v25 = llvm::MDNode::operator new(48, 4uLL, a5);
    v26 = llvm::MDNode::MDNode((uint64_t)v25, (uint64_t)a1, 15, a5, (uint64_t)&v31, 4, 0, 0);
    *(_WORD *)(v26 + 2) = 21;
    *(_DWORD *)(v26 + 16) = 0;
    *(_DWORD *)(v26 + 20) = a2;
    *(_DWORD *)(v26 + 4) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    *(_BYTE *)(v26 + 40) = a3;
    v27 = *a1;
    v29 = v26;
    if (a5 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v25);
    }
    else if (!a5)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v27 + 744, &v29, (uint64_t)v30);
      return v29;
    }
    return (uint64_t)v25;
  }
  v15 = llvm::hash_combine<unsigned int,unsigned char,llvm::Metadata *>(&v31, (char *)&v31 + 4, v32);
  v16 = 1;
  v17 = (v14 - 1) & v15;
  v18 = *(_QWORD *)(v13 + 8 * v17);
  if (v18 == -8192)
    goto LABEL_11;
  while (1)
  {
    if (v18 == -4096)
    {
      v22 = *(_QWORD *)(v12 + 744);
      v23 = *(unsigned int *)(v12 + 760);
      v24 = (char **)(v22 + 8 * v23);
      if (v24 == (char **)(v22 + 8 * v23))
        goto LABEL_19;
      goto LABEL_16;
    }
    if ((_DWORD)v31 == *(_DWORD *)(v18 + 20) && BYTE4(v31) == *(unsigned __int8 *)(v18 + 40))
    {
      v19 = *(_QWORD *)(v18 - 16);
      v20 = (v19 & 2) != 0 ? *(_QWORD *)(v18 - 32) : v18 - 16 - 8 * ((v19 >> 2) & 0xF);
      if (v32[0] == *(_QWORD *)(v20 + 24))
        break;
    }
    do
    {
LABEL_11:
      v21 = v17 + v16++;
      v17 = v21 & (v14 - 1);
      v18 = *(_QWORD *)(v13 + 8 * v17);
    }
    while (v18 == -8192);
  }
  v24 = (char **)(v13 + 8 * v17);
  if (v24 == (char **)(*(_QWORD *)(v12 + 744) + 8 * *(unsigned int *)(v12 + 760)))
    goto LABEL_19;
LABEL_16:
  v25 = *v24;
  if (!*v24)
    goto LABEL_20;
  return (uint64_t)v25;
}

const char *llvm::DIFile::getChecksumKindAsString(int a1)
{
  const char *v1;

  v1 = ChecksumKindName[a1 - 1];
  strlen(v1);
  return v1;
}

uint64_t llvm::DIFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_7;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 768);
  v31 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  v29 = a2;
  v30 = a3;
  v32 = v16;
  v33 = a5;
  v28 = 0;
  v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(v15, &v29, &v28);
  result = 0;
  if (v17 && v28 != (uint64_t *)(*(_QWORD *)(v14 + 768) + 8 * *(unsigned int *)(v14 + 784)))
    result = *v28;
  if (!result && a7)
  {
LABEL_7:
    v29 = a2;
    v30 = a3;
    if (*((_BYTE *)a4 + 16))
      v19 = *((_QWORD *)a4 + 1);
    else
      v19 = 0;
    *(_QWORD *)&v31 = v19;
    *((_QWORD *)&v31 + 1) = a5;
    v20 = llvm::MDNode::operator new(48, 4uLL, a6);
    v25 = *a4;
    v26 = *((_QWORD *)a4 + 2);
    v21 = llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 16, a6, (uint64_t)&v29, 4, 0, 0);
    *(_WORD *)(v21 + 2) = 41;
    *(_OWORD *)(v21 + 16) = v25;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = a5;
    v22 = *a1;
    v27 = v21;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v21);
    }
    else if (!a6)
    {
      v23 = v22 + 768;
      v28 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)(v22 + 768), &v27, &v28) & 1) == 0)
      {
        v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(v23, (uint64_t)&v27, &v27, v28);
        *v24 = v27;
      }
    }
    return v27;
  }
  return result;
}

char *llvm::DICompileUnit::getImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, int a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, char a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20)
{
  char *v22;
  uint64_t v23;
  _QWORD v27[4];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v27[0] = a3;
  v27[1] = a4;
  v27[2] = a6;
  v27[3] = a8;
  v28 = a10;
  v29 = a11;
  v30 = a12;
  v31 = a18;
  v32 = a19;
  v22 = llvm::MDNode::operator new(48, 0xBuLL, a20);
  v23 = llvm::MDNode::MDNode((uint64_t)v22, a1, 17, a20, (uint64_t)v27, 11, 0, 0);
  *(_WORD *)(v23 + 2) = 17;
  *(_DWORD *)(v23 + 16) = a2;
  *(_DWORD *)(v23 + 20) = a7;
  *(_QWORD *)(v23 + 24) = a13;
  *(_DWORD *)(v23 + 32) = a9;
  *(_DWORD *)(v23 + 36) = a16;
  *(_BYTE *)(v23 + 40) = a5;
  *(_BYTE *)(v23 + 41) = a14;
  *(_BYTE *)(v23 + 42) = a15;
  *(_BYTE *)(v23 + 43) = a17;
  if (a20 == 1)
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v22);
  return v22;
}

char *llvm::DICompileUnit::emissionKindString(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E0E5B860[a1];
}

char *llvm::DICompileUnit::nameTableKindString(int a1)
{
  if ((a1 - 1) > 2)
    return 0;
  else
    return off_1E0E5B880[a1 - 1];
}

uint64_t llvm::DISubprogram::toSPFlags(llvm::DISubprogram *this, int a2, int a3, char a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;

  if ((_DWORD)this)
    v5 = 4;
  else
    v5 = 0;
  if (a2)
    v6 = 8;
  else
    v6 = 0;
  if (a3)
    v7 = 16;
  else
    v7 = 0;
  if (a5)
    v8 = 256;
  else
    v8 = 0;
  return (v6 | v5 | v7) & 0xFFFFFFFC | a4 & 3 | v8;
}

const char *llvm::DISubprogram::getFlagString(int a1)
{
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  result = "";
  if (a1 > 127)
  {
    v3 = "DISPFlagDeleted";
    v4 = "DISPFlagObjCDirect";
    v5 = "DISPFlagIsTransparentStepping";
    if (a1 != 4096)
      v5 = "";
    if (a1 != 2048)
      v4 = v5;
    if (a1 != 512)
      v3 = v4;
    v6 = "DISPFlagRecursive";
    v7 = "DISPFlagMainSubprogram";
    if (a1 != 256)
      v7 = "";
    if (a1 != 128)
      v6 = v7;
    if (a1 <= 511)
      return v6;
    else
      return v3;
  }
  else
  {
    switch(a1)
    {
      case 0:
        result = "DISPFlagZero";
        break;
      case 1:
        result = "DISPFlagVirtual";
        break;
      case 2:
        result = "DISPFlagPureVirtual";
        break;
      case 4:
        result = "DISPFlagLocalToUnit";
        break;
      case 8:
        result = "DISPFlagDefinition";
        break;
      case 16:
        result = "DISPFlagOptimized";
        break;
      case 32:
        result = "DISPFlagPure";
        break;
      case 64:
        result = "DISPFlagElemental";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::DISubprogram::splitFlags(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v3 = a1;
  if ((a1 & 1) != 0)
  {
    v5 = a1 & 1;
    v6 = *(unsigned int *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v6 + 1, 4);
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = v5;
    ++*(_DWORD *)(a2 + 8);
    v3 = (v5 ^ 0x1FFF) & v3;
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = v3 & 2;
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8 + 1, 4);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v7 ^ 0x1FFF) & v3;
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_20:
  v9 = v3 & 4;
  v10 = *(unsigned int *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 4);
    LODWORD(v10) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v9;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v9 ^ 0x1FFF) & v3;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_23:
  v11 = v3 & 8;
  v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v12 + 1, 4);
    LODWORD(v12) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v11;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v11 ^ 0x1FFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_26:
  v13 = v3 & 0x10;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v14 + 1, 4);
    LODWORD(v14) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v14) = v13;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v13 ^ 0x1FFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_29:
  v15 = v3 & 0x20;
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16 + 1, 4);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = v15;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v15 ^ 0x1FFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_32:
  v17 = v3 & 0x40;
  v18 = *(unsigned int *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v18 + 1, 4);
    LODWORD(v18) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v17 ^ 0x1FFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_9:
    if ((v3 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_35:
  v19 = v3 & 0x80;
  v20 = *(unsigned int *)(a2 + 8);
  if (v20 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v20 + 1, 4);
    LODWORD(v20) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = v19;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v19 ^ 0x1FFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_10:
    if ((v3 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_38:
  v21 = v3 & 0x100;
  v22 = *(unsigned int *)(a2 + 8);
  if (v22 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v22 + 1, 4);
    LODWORD(v22) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) = v21;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v21 ^ 0x1FFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_11:
    if ((v3 & 0x800) == 0)
      goto LABEL_12;
LABEL_44:
    v25 = v3 & 0x800;
    v26 = *(unsigned int *)(a2 + 8);
    if (v26 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v26 + 1, 4);
      LODWORD(v26) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v26) = v25;
    ++*(_DWORD *)(a2 + 8);
    v3 = (v25 ^ 0x1FFF) & v3;
    if ((v3 & 0x1000) == 0)
      return v3;
    goto LABEL_47;
  }
LABEL_41:
  v23 = v3 & 0x200;
  v24 = *(unsigned int *)(a2 + 8);
  if (v24 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v24 + 1, 4);
    LODWORD(v24) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v24) = v23;
  ++*(_DWORD *)(a2 + 8);
  v3 = (v23 ^ 0x1FFF) & v3;
  if ((v3 & 0x800) != 0)
    goto LABEL_44;
LABEL_12:
  if ((v3 & 0x1000) == 0)
    return v3;
LABEL_47:
  v27 = v3 & 0x1000;
  v28 = *(unsigned int *)(a2 + 8);
  if (v28 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v28 + 1, 4);
    LODWORD(v28) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v28) = v27;
  ++*(_DWORD *)(a2 + 8);
  return (v27 ^ 0x1FFF) & v3;
}

llvm::MDNode *llvm::DISubprogram::getImpl(uint64_t *a1, void *a2, uint64_t a3, void *a4, void *a5, int a6, void *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int HashValue;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  llvm::MDNode *v40;
  unsigned int v41;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  int v64;
  int v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v22 = a15;
  v21 = a16;
  v23 = a13;
  v24 = a14;
  v26 = a11;
  v25 = HIDWORD(a11);
  v28 = a10;
  v27 = HIDWORD(a10);
  v29 = a9;
  v83 = *MEMORY[0x1E0C80C00];
  if (!a19)
  {
    v30 = *a1;
    v66 = a2;
    v67 = a3;
    v68 = a4;
    v69 = a5;
    LODWORD(v70) = a6;
    v71 = a7;
    LODWORD(v72) = a8;
    v73 = a9;
    v74 = a10;
    v75 = a11;
    v76 = a12;
    v77 = a13;
    v78 = a14;
    v79 = a15;
    v80 = a16;
    v81 = a17;
    v82 = a18;
    v31 = *(_DWORD *)(v30 + 808);
    if (!v31)
      goto LABEL_5;
    v59 = a2;
    v60 = a5;
    v61 = a3;
    v62 = a4;
    v63 = a7;
    v64 = a6;
    v65 = a8;
    v32 = *(_QWORD *)(v30 + 792);
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue((uint64_t)&v66);
    v34 = v32;
    v35 = v31 - 1;
    v36 = 1;
    v37 = HashValue & (v31 - 1);
    v38 = (uint64_t *)(v32 + 8 * v37);
    v39 = *v38;
    if ((*v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_32;
LABEL_7:
    v58 = v37;
    if (v66)
      v42 = (v75 & 0x800000000) == 0;
    else
      v42 = 0;
    v43 = !v42 || v68 == 0;
    if (!v43 && *(_BYTE *)v66 == 14)
    {
      v44 = *((_QWORD *)v66 - 2);
      v45 = (v44 & 2) != 0 ? (char *)*((_QWORD *)v66 - 4) : (char *)v66 - 8 * ((v44 >> 2) & 0xF) - 16;
      if (*((_QWORD *)v45 + 7) && ((HIDWORD(v75) ^ *(unsigned __int8 *)(v39 + 36)) & 8) == 0)
      {
        v46 = *(_QWORD *)(v39 - 16);
        if ((v46 & 2) != 0)
        {
          v47 = *(_QWORD *)(v39 - 32);
          if (*(void **)(v47 + 8) == v66 && *(void **)(v47 + 24) == v68)
          {
            if (*(_DWORD *)(v39 - 24) < 0xAu)
              goto LABEL_24;
            goto LABEL_28;
          }
        }
        else
        {
          v47 = v39 - 16 - 8 * ((v46 >> 2) & 0xF);
          if (*(void **)(v47 + 8) == v66 && *(void **)(v47 + 24) == v68)
          {
            if ((*(_QWORD *)(v39 - 16) & 0x380uLL) <= 0x240)
            {
LABEL_24:
              v48 = 0;
              goto LABEL_29;
            }
LABEL_28:
            v48 = *(_QWORD *)(v47 + 72);
LABEL_29:
            if (v48 == v77)
              goto LABEL_45;
          }
        }
      }
    }
    if (!llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf((uint64_t *)&v66, v39))
    {
      v39 = *v38;
      v34 = v32;
      v37 = v58;
LABEL_32:
      while (1)
      {
        a6 = v64;
        a8 = v65;
        v21 = a16;
        v23 = a13;
        a7 = v63;
        v29 = a9;
        a3 = v61;
        a4 = v62;
        v22 = a15;
        a5 = v60;
        v24 = a14;
        if (v39 == -4096)
          break;
        v41 = v37 + v36++;
        v37 = v41 & v35;
        v38 = (uint64_t *)(v34 + 8 * (v41 & v35));
        v39 = *v38;
        if ((*v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_7;
      }
      v49 = *(_QWORD *)(v30 + 792);
      v50 = *(unsigned int *)(v30 + 808);
      v26 = a11;
      v25 = HIDWORD(a11);
      v28 = a10;
      v27 = HIDWORD(a10);
      a2 = v59;
      v38 = (uint64_t *)(v49 + 8 * v50);
      if (v38 != (uint64_t *)(v49 + 8 * v50))
      {
LABEL_34:
        v40 = (llvm::MDNode *)*v38;
        if (*v38)
          return v40;
        goto LABEL_35;
      }
LABEL_5:
      v40 = 0;
LABEL_35:
      if (!a20)
        return v40;
      goto LABEL_36;
    }
LABEL_45:
    a6 = v64;
    a8 = v65;
    v26 = a11;
    v25 = HIDWORD(a11);
    v28 = a10;
    v27 = HIDWORD(a10);
    v21 = a16;
    v23 = a13;
    a7 = v63;
    v29 = a9;
    a3 = v61;
    a4 = v62;
    v22 = a15;
    a5 = v60;
    a2 = v59;
    v24 = a14;
    if (v38 != (uint64_t *)(*(_QWORD *)(v30 + 792) + 8 * *(unsigned int *)(v30 + 808)))
      goto LABEL_34;
    goto LABEL_5;
  }
LABEL_36:
  v51 = v25;
  v66 = &v68;
  v68 = a5;
  v69 = a2;
  v70 = a3;
  v71 = a4;
  v72 = a7;
  v73 = a12;
  v74 = v24;
  v75 = v22;
  v76 = v29;
  v77 = v23;
  v78 = v21;
  v79 = a17;
  v80 = a18;
  v67 = 0xD0000000DLL;
  if (a18)
  {
    v52 = a6;
    v53 = a8;
    v54 = 13;
  }
  else
  {
    v54 = 12;
    LODWORD(v67) = 12;
    if (a17 || (v54 = 11, LODWORD(v67) = 11, v21) || (v54 = 10, LODWORD(v67) = 10, v23))
    {
      v52 = a6;
      v53 = a8;
    }
    else
    {
      v52 = a6;
      v53 = a8;
      if (v29)
        v54 = 9;
      else
        v54 = 8;
      LODWORD(v67) = v54;
    }
  }
  v55 = llvm::MDNode::operator new(40, v54, a19);
  v56 = llvm::MDNode::MDNode((uint64_t)v55, (uint64_t)a1, 18, a19, (uint64_t)v66, v67, 0, 0);
  *(_WORD *)(v56 + 2) = 46;
  *(_DWORD *)(v56 + 16) = v52;
  *(_DWORD *)(v56 + 20) = v53;
  *(_DWORD *)(v56 + 24) = v28;
  *(_DWORD *)(v56 + 28) = v27;
  *(_DWORD *)(v56 + 32) = v26;
  *(_DWORD *)(v56 + 36) = v51;
  v40 = llvm::MDNode::storeImpl<llvm::DISubprogram,llvm::DenseSet<llvm::DISubprogram*,llvm::MDNodeInfo<llvm::DISubprogram>>>((llvm::MDNode *)v56, a19, *a1 + 792);
  if (v66 != &v68)
    free(v66);
  return v40;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DISubprogram,llvm::DenseSet<llvm::DISubprogram*,llvm::MDNodeInfo<llvm::DISubprogram>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  llvm::MDNode *v18;
  _BYTE v19[136];

  v3 = this;
  v18 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
    return v3;
  }
  if (!a2)
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (!v5)
    {
      v12 = 0;
      goto LABEL_19;
    }
    v6 = *(_QWORD *)a3;
    llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl((uint64_t)v19, (uint64_t)this);
    v7 = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue((uint64_t)v19) & (v5 - 1);
    v8 = *(_QWORD *)(v6 + 8 * v7);
    if ((llvm::MDNode *)v8 != v3)
    {
      v17 = (uint64_t *)(v6 + 8 * v7);
      v15 = v5 - 1;
      v16 = v7;
      v9 = 0;
      v10 = 1;
      do
      {
        if ((v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (v8 == -4096)
            goto LABEL_14;
        }
        else
        {
          if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual((uint64_t)v3, v8))
            return v3;
          v8 = *v17;
          if (*v17 == -4096)
          {
LABEL_14:
            if (v9)
              v12 = v9;
            else
              v12 = v17;
LABEL_19:
            v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(a3, (uint64_t)&v18, (uint64_t *)&v18, v12);
            *v13 = (uint64_t)v18;
            return v18;
          }
        }
        if (v8 == -8192 && v9 == 0)
          v9 = v17;
        v11 = v16 + v10++;
        v16 = v11 & v15;
        v17 = (uint64_t *)(v6 + 8 * (v11 & v15));
        v8 = *v17;
      }
      while ((llvm::MDNode *)*v17 != v3);
    }
  }
  return v3;
}

BOOL llvm::DISubprogram::describes(llvm::DISubprogram *this, const llvm::Function *a2)
{
  return llvm::Function::getSubprogram(a2) == (_QWORD)this;
}

llvm::MDNode *llvm::DILexicalBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  unsigned int v12;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  char *v19;
  uint64_t v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (HIWORD(a5))
    v12 = 0;
  else
    v12 = a5;
  if (a6)
    goto LABEL_12;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 816);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v12;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(v15, &v22, &v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 816) + 8 * *(unsigned int *)(v14 + 832)))
    result = *v21;
  if (!result && a7)
  {
LABEL_12:
    v22 = a3;
    v23 = a2;
    v19 = llvm::MDNode::operator new(24, 2uLL, a6);
    v20 = llvm::MDNode::MDNode((uint64_t)v19, (uint64_t)a1, 19, a6, (uint64_t)&v22, 2, 0, 0);
    *(_WORD *)(v20 + 2) = 11;
    *(_WORD *)(v20 + 16) = v12;
    *(_DWORD *)(v20 + 4) = a4;
    return llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>((llvm::MDNode *)v20, a6, *a1 + 816);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  llvm::MDNode **v8;
  llvm::MDNode *v9;
  llvm::MDNode **v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  llvm::MDNode **v15;
  llvm::MDNode *v16;
  llvm::MDNode **v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  llvm::MDNode *v21;
  llvm::MDNode *v22;
  llvm::MDNode *v23;
  int v24;
  int v25;

  v21 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
    return this;
  }
  if (a2)
    return this;
  v5 = *(_DWORD *)(a3 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a3;
    v7 = *((_QWORD *)this - 2);
    if ((v7 & 2) != 0)
    {
      v8 = (llvm::MDNode **)*((_QWORD *)this - 4);
      v22 = v8[1];
      v9 = this;
      if (*(_BYTE *)this == 16)
        goto LABEL_13;
    }
    else
    {
      v8 = (llvm::MDNode **)((char *)this - 8 * ((v7 >> 2) & 0xF) - 16);
      v22 = v8[1];
      v9 = this;
      if (*(_BYTE *)this == 16)
      {
LABEL_13:
        v23 = v9;
        v13 = *((unsigned __int16 *)this + 8);
        v24 = *((_DWORD *)this + 1);
        v25 = v13;
        v14 = (v5 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int>(&v22, (uint64_t *)&v23, &v24, &v25);
        v15 = (llvm::MDNode **)(v6 + 8 * v14);
        v16 = *v15;
        if (*v15 != this)
        {
          v17 = 0;
          v18 = 1;
          while (v16 != (llvm::MDNode *)-4096)
          {
            if (v17)
              v19 = 0;
            else
              v19 = v16 == (llvm::MDNode *)-8192;
            if (v19)
              v17 = v15;
            v20 = v14 + v18++;
            v14 = v20 & (v5 - 1);
            v15 = (llvm::MDNode **)(v6 + 8 * v14);
            v16 = *v15;
            if (*v15 == this)
              return this;
          }
          if (v17)
            v11 = v17;
          else
            v11 = v15;
          goto LABEL_10;
        }
        return this;
      }
    }
    v9 = *v8;
    goto LABEL_13;
  }
  v11 = 0;
LABEL_10:
  v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(a3, (uint64_t)&v21, (uint64_t *)&v21, v11);
  *v12 = v21;
  return v21;
}

uint64_t llvm::DILexicalBlockFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];
  int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 840);
  v20[0] = a2;
  v20[1] = a3;
  v21 = a4;
  v22[0] = 0;
  v14 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(v13, v20, v22))v15 = v22[0] == *(_QWORD *)(v12 + 840) + 8 * *(unsigned int *)(v12 + 856);
  else
    v15 = 1;
  if (!v15)
    v14 = *(char **)v22[0];
  if (!v14 && a6)
  {
LABEL_9:
    v22[0] = a3;
    v22[1] = a2;
    v14 = llvm::MDNode::operator new(16, 2uLL, a5);
    v16 = llvm::MDNode::MDNode((uint64_t)v14, (uint64_t)a1, 20, a5, (uint64_t)v22, 2, 0, 0);
    *(_WORD *)(v16 + 2) = 11;
    *(_DWORD *)(v16 + 4) = a4;
    v17 = *a1;
    v19 = v16;
    if (a5 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v14);
    }
    else if (!a5)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v17 + 840, &v19, (uint64_t)v20);
      return v19;
    }
  }
  return (uint64_t)v14;
}

uint64_t llvm::DINamespace::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 864);
  v25 = a2;
  v26 = a3;
  LOBYTE(v27) = a4;
  v24 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(v13, &v25, &v24);
  result = 0;
  if (v14)
    v16 = v24 == (uint64_t *)(*(_QWORD *)(v12 + 864) + 8 * *(unsigned int *)(v12 + 880));
  else
    v16 = 1;
  if (!v16)
    result = *v24;
  if (!result && a6)
  {
LABEL_9:
    v25 = 0;
    v26 = a2;
    v27 = a3;
    v17 = llvm::MDNode::operator new(16, 3uLL, a5);
    v18 = llvm::MDNode::MDNode((uint64_t)v17, (uint64_t)a1, 21, a5, (uint64_t)&v25, 3, 0, 0);
    *(_WORD *)(v18 + 2) = 57;
    if (a4)
      v19 = 0x80;
    else
      v19 = 0;
    *(_BYTE *)(v18 + 1) = v19 & 0x80 | *(_BYTE *)(v18 + 1) & 0x7F;
    v20 = *a1;
    v23 = v18;
    if (a5 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v18);
    }
    else if (!a5)
    {
      v21 = v20 + 864;
      v24 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)(v20 + 864), &v23, &v24) & 1) == 0)
      {
        v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(v21, (uint64_t)&v23, &v23, v24);
        *v22 = v23;
      }
    }
    return v23;
  }
  return result;
}

uint64_t llvm::DICommonBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 1128);
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v24[0] = 0;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(v17, &v25, v24))v19 = v24[0] == *(_QWORD *)(v16 + 1128) + 8 * *(unsigned int *)(v16 + 1144);
  else
    v19 = 1;
  if (!v19)
    v18 = *(char **)v24[0];
  if (!v18 && a8)
  {
LABEL_9:
    v25 = a2;
    v26 = a3;
    v27 = a4;
    v28 = a5;
    v18 = llvm::MDNode::operator new(16, 4uLL, a7);
    v20 = llvm::MDNode::MDNode((uint64_t)v18, (uint64_t)a1, 33, a7, (uint64_t)&v25, 4, 0, 0);
    *(_WORD *)(v20 + 2) = 26;
    *(_DWORD *)(v20 + 4) = a6;
    v21 = *a1;
    v23 = v20;
    if (a7 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v18);
    }
    else if (!a7)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21 + 1128, &v23, (uint64_t)v24);
      return v23;
    }
  }
  return (uint64_t)v18;
}

uint64_t llvm::DIModule::getImpl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, int a10, char a11)
{
  int v11;
  uint64_t v17;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t result;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v11 = a8;
  v55 = *MEMORY[0x1E0C80C00];
  if (a10)
    goto LABEL_30;
  v17 = *a1;
  v47 = a2;
  v48 = a3;
  v49 = a4;
  v50 = a5;
  v51 = a6;
  v52 = a7;
  v53 = a8;
  v54 = a9;
  v19 = *(_QWORD *)(v17 + 888);
  v20 = *(_DWORD *)(v17 + 904);
  if (!v20)
  {
    v11 = a8;
LABEL_28:
    result = 0;
LABEL_29:
    if (!a11)
      return result;
LABEL_30:
    v47 = a2;
    v48 = a3;
    v49 = a4;
    v50 = a5;
    v51 = a6;
    v52 = a7;
    v36 = llvm::MDNode::operator new(16, 6uLL, a10);
    v37 = llvm::MDNode::MDNode((uint64_t)v36, (uint64_t)a1, 22, a10, (uint64_t)&v47, 6, 0, 0);
    *(_WORD *)(v37 + 2) = 30;
    if (a9)
      v38 = 0x80;
    else
      v38 = 0;
    *(_BYTE *)(v37 + 1) = v38 & 0x80 | *(_BYTE *)(v37 + 1) & 0x7F;
    *(_DWORD *)(v37 + 4) = v11;
    v39 = *a1;
    v45 = v37;
    if (a10 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v37);
    }
    else if (!a10)
    {
      v40 = v39 + 888;
      v46 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)(v39 + 888), &v45, &v46) & 1) == 0)
      {
        v41 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(v40, (uint64_t)&v45, &v45, v46);
        *v41 = v45;
      }
    }
    return v45;
  }
  v42 = v17;
  v43 = a6;
  v44 = a7;
  v21 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v48, &v49, &v50, &v51);
  v22 = v20 - 1;
  v23 = 1;
  v11 = a8;
  v24 = v22 & v21;
  v25 = *(_QWORD *)(v19 + 8 * v24);
  if (v25 == -8192)
    goto LABEL_21;
  while (1)
  {
    if (v25 == -4096)
    {
      a6 = v43;
      v32 = *(_QWORD *)(v42 + 888);
      v33 = *(unsigned int *)(v42 + 904);
      a7 = v44;
      v34 = (uint64_t *)(v32 + 8 * v33);
      if (v34 == (uint64_t *)(v32 + 8 * v33))
        goto LABEL_28;
      goto LABEL_25;
    }
    v26 = v25 - 16;
    v27 = *(_QWORD *)(v25 - 16);
    v28 = (v27 & 2) != 0 ? *(_QWORD **)(v25 - 32) : (_QWORD *)(v26 - 8 * ((v27 >> 2) & 0xF));
    if (v48 == v28[1] && v49 == v28[2] && v50 == v28[3] && v51 == v28[4] && v52 == v28[5])
    {
      v29 = v25;
      if (*(_BYTE *)v25 != 16)
      {
        if ((v27 & 2) != 0)
          v30 = *(uint64_t **)(v25 - 32);
        else
          v30 = (uint64_t *)(v26 - 8 * ((v27 >> 2) & 0xF));
        v29 = *v30;
      }
      if (v47 == v29 && v53 == *(_DWORD *)(v25 + 4) && v54 == *(unsigned __int8 *)(v25 + 1) >> 7)
        break;
    }
    do
    {
LABEL_21:
      v31 = v24 + v23++;
      v24 = v31 & v22;
      v25 = *(_QWORD *)(v19 + 8 * v24);
    }
    while (v25 == -8192);
  }
  v34 = (uint64_t *)(v19 + 8 * v24);
  a6 = v43;
  a7 = v44;
  if (v34 == (uint64_t *)(*(_QWORD *)(v42 + 888) + 8 * *(unsigned int *)(v42 + 904)))
    goto LABEL_28;
LABEL_25:
  result = *v34;
  if (!*v34)
    goto LABEL_29;
  return result;
}

uint64_t llvm::DITemplateTypeParameter::getImpl(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[15];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
LABEL_20:
    v34[0] = a2;
    v34[1] = a3;
    v25 = llvm::MDNode::operator new(16, 2uLL, a5);
    v26 = llvm::MDNode::MDNode((uint64_t)v25, (uint64_t)a1, 23, a5, (uint64_t)v34, 2, 0, 0);
    *(_WORD *)(v26 + 2) = 47;
    if (a4)
      v27 = 0x80;
    else
      v27 = 0;
    *(_BYTE *)(v26 + 1) = v27 & 0x80 | *(_BYTE *)(v26 + 1) & 0x7F;
    v28 = *a1;
    v30 = v26;
    if (a5 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v25);
    }
    else if (!a5)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v28 + 912, &v30, (uint64_t)&v31);
      return v30;
    }
    return (uint64_t)v25;
  }
  v12 = *a1;
  v31 = a2;
  v32 = a3;
  v33[0] = a4;
  v13 = *(_QWORD *)(v12 + 912);
  v14 = *(_DWORD *)(v12 + 928);
  if (!v14)
  {
LABEL_18:
    v25 = 0;
LABEL_19:
    if (!a6)
      return (uint64_t)v25;
    goto LABEL_20;
  }
  v15 = llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(&v31, &v32, v33);
  v16 = 1;
  v17 = (v14 - 1) & v15;
  v18 = *(_QWORD *)(v13 + 8 * v17);
  if (v18 == -8192)
    goto LABEL_10;
  while (v18 != -4096)
  {
    v19 = *(_QWORD *)(v18 - 16);
    if ((v19 & 2) != 0)
    {
      v20 = *(_QWORD **)(v18 - 32);
      if (v31 != *v20)
        goto LABEL_10;
    }
    else
    {
      v20 = (_QWORD *)(v18 - 16 - 8 * ((v19 >> 2) & 0xF));
      if (v31 != *v20)
        goto LABEL_10;
    }
    if (v32 == v20[1] && v33[0] == *(unsigned __int8 *)(v18 + 1) >> 7)
    {
      v22 = (char **)(v13 + 8 * v17);
      if (v22 == (char **)(*(_QWORD *)(v12 + 912) + 8 * *(unsigned int *)(v12 + 928)))
        goto LABEL_18;
      goto LABEL_16;
    }
    do
    {
LABEL_10:
      v21 = v17 + v16++;
      v17 = v21 & (v14 - 1);
      v18 = *(_QWORD *)(v13 + 8 * v17);
    }
    while (v18 == -8192);
  }
  v23 = *(_QWORD *)(v12 + 912);
  v24 = *(unsigned int *)(v12 + 928);
  v22 = (char **)(v23 + 8 * v24);
  if (v22 == (char **)(v23 + 8 * v24))
    goto LABEL_18;
LABEL_16:
  v25 = *v22;
  if (!*v22)
    goto LABEL_19;
  return (uint64_t)v25;
}

uint64_t llvm::DITemplateValueParameter::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  __int16 v13;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];

  v13 = a2;
  v30[3] = *MEMORY[0x1E0C80C00];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 936);
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v30[0] = 0;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(v17, (uint64_t)&v24, v30))v19 = v30[0] == *(_QWORD *)(v16 + 936) + 8 * *(unsigned int *)(v16 + 952);
  else
    v19 = 1;
  if (!v19)
    v18 = *(char **)v30[0];
  if (!v18 && a8)
  {
LABEL_9:
    v30[0] = a3;
    v30[1] = a4;
    v30[2] = a6;
    v18 = llvm::MDNode::operator new(16, 3uLL, a7);
    v20 = llvm::MDNode::MDNode((uint64_t)v18, (uint64_t)a1, 24, a7, (uint64_t)v30, 3, 0, 0);
    *(_WORD *)(v20 + 2) = v13;
    if (a5)
      v21 = 0x80;
    else
      v21 = 0;
    *(_BYTE *)(v20 + 1) = v21 & 0x80 | *(_BYTE *)(v20 + 1) & 0x7F;
    v22 = *a1;
    v29 = v20;
    if (a7 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v18);
    }
    else if (!a7)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v22 + 936, &v29, (uint64_t)&v24);
      return v29;
    }
  }
  return (uint64_t)v18;
}

uint64_t llvm::DIGlobalVariable::getImpl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, char a15)
{
  char v15;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v47;
  _BYTE v48[31];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59[3];

  v15 = a8;
  v21 = a13;
  v22 = a9;
  v59[1] = *MEMORY[0x1E0C80C00];
  if (a14)
    goto LABEL_16;
  v23 = *a1;
  v49 = a2;
  v50 = a3;
  v51 = a4;
  v52 = a5;
  LODWORD(v53) = a6;
  v54 = a7;
  LOBYTE(v55) = a8;
  BYTE1(v55) = a9;
  v56 = a10;
  v57 = a11;
  v58 = a12;
  v59[0] = a13;
  v24 = *(_DWORD *)(v23 + 976);
  if (!v24)
    goto LABEL_14;
  v43 = *(_QWORD *)(v23 + 960);
  v44 = a7;
  v25 = llvm::hash_combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(&v49, &v50, &v51, &v52, (int *)&v53, &v54, (char *)&v55, (char *)&v55 + 1, &v56, v59);
  v26 = v43;
  v27 = v24 - 1;
  v28 = (v24 - 1) & v25;
  v29 = 1;
  v30 = (uint64_t *)(v43 + 8 * v28);
  v31 = *v30;
  if ((*v30 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_6;
  while (1)
  {
    a7 = v44;
    if (v31 == -4096)
      break;
    while (1)
    {
      v32 = v28 + v29++;
      v28 = v32 & v27;
      v30 = (uint64_t *)(v26 + 8 * (v32 & v27));
      v31 = *v30;
      if ((*v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
        break;
LABEL_6:
      v40 = v29;
      v41 = v28;
      v42 = v27;
      if (llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf(&v49, v31))
      {
        v22 = a9;
        a7 = v44;
        v21 = a13;
        if (v30 != (uint64_t *)(*(_QWORD *)(v23 + 960) + 8 * *(unsigned int *)(v23 + 976)))
          goto LABEL_11;
        goto LABEL_14;
      }
      v26 = v43;
      v28 = v41;
      v27 = v42;
      v29 = v40;
      a7 = v44;
      if (*v30 == -4096)
        goto LABEL_8;
    }
  }
LABEL_8:
  v33 = *(_QWORD *)(v23 + 960);
  v34 = *(unsigned int *)(v23 + 976);
  v22 = a9;
  v21 = a13;
  v30 = (uint64_t *)(v33 + 8 * v34);
  if (v30 != (uint64_t *)(v33 + 8 * v34))
  {
LABEL_11:
    v35 = (char *)*v30;
    v15 = a8;
    if (v35)
      return (uint64_t)v35;
  }
  else
  {
LABEL_14:
    v35 = 0;
    v15 = a8;
  }
  if (a15)
  {
LABEL_16:
    v49 = a2;
    v50 = a3;
    v51 = a5;
    v52 = a7;
    v53 = a3;
    v54 = a4;
    v55 = a10;
    v56 = a11;
    v57 = v21;
    v36 = v22;
    v35 = llvm::MDNode::operator new(24, 9uLL, a14);
    v37 = llvm::MDNode::MDNode((uint64_t)v35, (uint64_t)a1, 25, a14, (uint64_t)&v49, 9, 0, 0);
    *(_WORD *)(v37 + 2) = 52;
    *(_DWORD *)(v37 + 16) = a6;
    *(_DWORD *)(v37 + 4) = a12;
    *(_BYTE *)(v37 + 20) = v15;
    *(_BYTE *)(v37 + 21) = v36;
    v38 = *a1;
    v47 = v37;
    if (a14 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v35);
    }
    else if (!a14)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v38 + 960, &v47, (uint64_t)v48);
      return v47;
    }
  }
  return (uint64_t)v35;
}

char **llvm::DILocalVariable::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, char a12)
{
  int v12;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t *v35;
  int v36;
  __int16 v37;
  char **v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v12 = a8;
  v48 = *MEMORY[0x1E0C80C00];
  if (a11)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 984);
  *(_QWORD *)&v40 = a2;
  *((_QWORD *)&v40 + 1) = a3;
  v41 = a4;
  v36 = a5;
  v37 = a7;
  LODWORD(v42) = a5;
  v43 = a6;
  v44 = a7;
  v45 = a8;
  v46 = a9;
  v47 = a10;
  v39 = 0;
  v20 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(v19, &v40, (uint64_t **)&v39)&& v39 != (char **)(*(_QWORD *)(v18 + 984) + 8 * *(unsigned int *)(v18 + 1000)))
  {
    v20 = *v39;
  }
  LOWORD(a7) = v37;
  v12 = a8;
  a5 = v36;
  if (!v20)
  {
    if (a12)
    {
LABEL_7:
      *(_QWORD *)&v40 = a2;
      *((_QWORD *)&v40 + 1) = a3;
      v41 = a4;
      v42 = a6;
      v43 = a10;
      v21 = a7;
      v22 = a5;
      v20 = llvm::MDNode::operator new(32, 5uLL, a11);
      v23 = llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 26, a11, (uint64_t)&v40, 5, 0, 0);
      *(_WORD *)(v23 + 2) = 52;
      *(_DWORD *)(v23 + 16) = v22;
      *(_DWORD *)(v23 + 4) = a9;
      *(_WORD *)(v23 + 20) = v21;
      *(_DWORD *)(v23 + 24) = v12;
      v24 = *a1;
      v39 = (char **)v23;
      if (a11 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v20);
      }
      else if (!a11)
      {
        v25 = *(_DWORD *)(v24 + 1000);
        if (!v25)
        {
          v35 = 0;
LABEL_23:
          llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucket<llvm::DILocalVariable * const&,llvm::detail::DenseSetEmpty&>(v24 + 984, v35, (uint64_t *)&v39);
          return v39;
        }
        v26 = *(_QWORD *)(v24 + 984);
        v27 = llvm::MDNodeInfo<llvm::DILocalVariable>::getHashValue((uint64_t)v20) & (v25 - 1);
        v28 = (uint64_t *)(v26 + 8 * v27);
        v29 = (char *)*v28;
        if ((char *)*v28 != v20)
        {
          v30 = 0;
          v31 = 1;
          while (v29 != (char *)-4096)
          {
            if (v30)
              v32 = 0;
            else
              v32 = v29 == (char *)-8192;
            if (v32)
              v30 = v28;
            v33 = v27 + v31++;
            v27 = v33 & (v25 - 1);
            v28 = (uint64_t *)(v26 + 8 * v27);
            v29 = (char *)*v28;
            if ((char *)*v28 == v20)
              return (char **)v20;
          }
          if (v30)
            v35 = v30;
          else
            v35 = v28;
          goto LABEL_23;
        }
      }
    }
  }
  return (char **)v20;
}

unsigned __int8 *llvm::DIVariable::getSizeInBits(llvm::DIVariable *this)
{
  unint64_t v1;
  unsigned __int8 *v2;
  int v4;
  unint64_t v5;

  v1 = *((_QWORD *)this - 2);
  if ((v1 & 2) != 0)
  {
    v2 = *(unsigned __int8 **)(*((_QWORD *)this - 4) + 24);
    if (v2)
      goto LABEL_7;
    return v2;
  }
  v2 = (unsigned __int8 *)((_QWORD *)this - ((v1 >> 2) & 0xF))[1];
  if (!v2)
    return v2;
  while (1)
  {
LABEL_7:
    v4 = *v2;
    if ((v4 - 12) >= 4 && v4 != 34)
      return 0;
    if (*((_QWORD *)v2 + 3))
      break;
    if (v4 != 13)
      return 0;
    v5 = *((_QWORD *)v2 - 2);
    if ((v5 & 2) != 0)
    {
      v2 = *(unsigned __int8 **)(*((_QWORD *)v2 - 4) + 24);
      if (!v2)
        return v2;
    }
    else
    {
      v2 = *(unsigned __int8 **)&v2[-8 * ((v5 >> 2) & 0xF) + 8];
      if (!v2)
        return v2;
    }
  }
  return (unsigned __int8 *)*((_QWORD *)v2 + 3);
}

uint64_t llvm::DILabel::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[3];
  int v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1008);
  v21[0] = a2;
  v21[1] = a3;
  v21[2] = a4;
  v22 = a5;
  v24[0] = 0;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(v15, v21, v24))v17 = v24[0] == *(_QWORD *)(v14 + 1008) + 8 * *(unsigned int *)(v14 + 1024);
  else
    v17 = 1;
  if (!v17)
    v16 = *(char **)v24[0];
  if (!v16 && a7)
  {
LABEL_9:
    v24[0] = a2;
    v24[1] = a3;
    v24[2] = a4;
    v16 = llvm::MDNode::operator new(16, 3uLL, a6);
    v18 = llvm::MDNode::MDNode((uint64_t)v16, (uint64_t)a1, 27, a6, (uint64_t)v24, 3, 0, 0);
    *(_WORD *)(v18 + 2) = 10;
    *(_DWORD *)(v18 + 4) = a5;
    v19 = *a1;
    v23 = v18;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v16);
    }
    else if (!a6)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v19 + 1008, &v23, (uint64_t)v21);
      return v23;
    }
  }
  return (uint64_t)v16;
}

llvm::MDNode *llvm::DIExpression::getImpl(uint64_t a1, _QWORD *a2, void *a3, int a4, int a5)
{
  void *v5;
  char *v9;
  _QWORD *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  _QWORD *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  char **v37;
  char *v38;
  char **v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  char **v43;
  uint64_t __n;
  char *v45;

  v5 = a3;
  if (a4)
  {
    v9 = llvm::MDNode::operator new(40, 0, a4);
    v10 = (_QWORD *)llvm::MDNode::MDNode((uint64_t)v9, a1, 7, a4, 0, 0, 0, 0);
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = 0;
    if (!v5)
      return llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>((llvm::MDNode *)v9, a4, *(_QWORD *)a1 + 552);
    v11 = 8 * (_QWORD)v5;
    if (((8 * (_QWORD)v5) & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(8 * (_QWORD)v5);
      *((_QWORD *)v9 + 2) = v12;
      *((_QWORD *)v9 + 3) = v12;
      v13 = &v12[8 * ((8 * (uint64_t)v5) >> 3)];
      *((_QWORD *)v9 + 4) = v13;
      memcpy(v12, a2, v11);
      *((_QWORD *)v9 + 3) = v13;
      return llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>((llvm::MDNode *)v9, a4, *(_QWORD *)a1 + 552);
    }
LABEL_41:
    abort();
  }
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 552);
  v18 = *(_DWORD *)(*(_QWORD *)a1 + 568);
  if (!v18)
    goto LABEL_19;
  __n = 8 * (_QWORD)a3;
  v19 = v18 - 1;
  v20 = 1;
  v21 = (v18 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(a2, (uint64_t)&a2[(_QWORD)a3]);
  v22 = *(_QWORD *)(v17 + 8 * v21);
  if (v22 == -8192)
    goto LABEL_11;
  while (1)
  {
    if (v22 == -4096)
    {
      v25 = *(_QWORD *)(v16 + 552);
      v26 = *(unsigned int *)(v16 + 568);
      v27 = (char **)(v25 + 8 * v26);
      if (v27 != (char **)(v25 + 8 * v26))
        goto LABEL_16;
LABEL_19:
      v28 = 0;
      goto LABEL_20;
    }
    v23 = *(const void **)(v22 + 16);
    if (v5 == (void *)((uint64_t)(*(_QWORD *)(v22 + 24) - (_QWORD)v23) >> 3) && !memcmp(a2, v23, __n))
      break;
    do
    {
LABEL_11:
      v24 = v21 + v20++;
      v21 = v24 & v19;
      v22 = *(_QWORD *)(v17 + 8 * v21);
    }
    while (v22 == -8192);
  }
  v27 = (char **)(v17 + 8 * v21);
  if (v27 == (char **)(*(_QWORD *)(v16 + 552) + 8 * *(unsigned int *)(v16 + 568)))
    goto LABEL_19;
LABEL_16:
  v28 = *v27;
  if (!*v27)
  {
LABEL_20:
    if (!a5)
      return (llvm::MDNode *)v28;
    v28 = llvm::MDNode::operator new(40, 0, 0);
    v29 = (_QWORD *)llvm::MDNode::MDNode((uint64_t)v28, a1, 7, 0, 0, 0, 0, 0);
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = 0;
    if (v5)
    {
      v30 = 8 * (_QWORD)v5;
      if (8 * (_QWORD)v5 < 0)
        goto LABEL_41;
      v31 = (8 * (uint64_t)v5) >> 3;
      v5 = operator new(8 * (_QWORD)v5);
      *((_QWORD *)v28 + 2) = v5;
      *((_QWORD *)v28 + 3) = v5;
      v32 = (uint64_t)v5 + 8 * v31;
      *((_QWORD *)v28 + 4) = v32;
      memcpy(v5, a2, v30);
      *((_QWORD *)v28 + 3) = v32;
      v33 = *(_QWORD *)a1;
      v45 = v28;
      v34 = *(_DWORD *)(v33 + 568);
      if (v34)
        goto LABEL_24;
    }
    else
    {
      v32 = 0;
      v33 = *(_QWORD *)a1;
      v45 = v28;
      v34 = *(_DWORD *)(v33 + 568);
      if (v34)
      {
LABEL_24:
        v35 = *(_QWORD *)(v33 + 552);
        v36 = (v34 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(v5, v32);
        v37 = (char **)(v35 + 8 * v36);
        v38 = *v37;
        if (*v37 == v28)
          return (llvm::MDNode *)v28;
        v39 = 0;
        v40 = 1;
        while (v38 != (char *)-4096)
        {
          if (v39)
            v41 = 0;
          else
            v41 = v38 == (char *)-8192;
          if (v41)
            v39 = v37;
          v42 = v36 + v40++;
          v36 = v42 & (v34 - 1);
          v37 = (char **)(v35 + 8 * v36);
          v38 = *v37;
          if (*v37 == v28)
            return (llvm::MDNode *)v28;
        }
        if (v39)
          v43 = v39;
        else
          v43 = v37;
        goto LABEL_36;
      }
    }
    v43 = 0;
LABEL_36:
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucket<llvm::DIExpression * const&,llvm::detail::DenseSetEmpty&>(v33 + 552, v43, (uint64_t *)&v45);
    return (llvm::MDNode *)v45;
  }
  return (llvm::MDNode *)v28;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  llvm::MDNode **v8;
  llvm::MDNode *v9;
  llvm::MDNode **v11;
  llvm::MDNode **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  llvm::MDNode *v16;

  v16 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
    return this;
  }
  else
  {
    if (a2)
      return this;
    v5 = *(_DWORD *)(a3 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)a3;
      v7 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)this + 2), *((_QWORD *)this + 3));
      v8 = (llvm::MDNode **)(v6 + 8 * v7);
      v9 = *v8;
      if (*v8 == this)
        return this;
      v12 = 0;
      v13 = 1;
      while (v9 != (llvm::MDNode *)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v9 == (llvm::MDNode *)-8192;
        if (v14)
          v12 = v8;
        v15 = v7 + v13++;
        v7 = v15 & (v5 - 1);
        v8 = (llvm::MDNode **)(v6 + 8 * v7);
        v9 = *v8;
        if (*v8 == this)
          return this;
      }
      if (v12)
        v11 = v12;
      else
        v11 = v8;
    }
    else
    {
      v11 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucket<llvm::DIExpression * const&,llvm::detail::DenseSetEmpty&>(a3, v11, (uint64_t *)&v16);
    return v16;
  }
}

BOOL llvm::DIExpression::isEntryValue(uint64_t **this)
{
  _BOOL8 result;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  result = llvm::DIExpression::isSingleLocationExpression(this);
  if (result)
  {
    v3 = (char *)this[2];
    v4 = (char *)this[3] - v3;
    if ((v4 & 0x7FFFFFFF8) == 0)
      return 0;
    v5 = v4 >> 3;
    if (*(_QWORD *)v3 == 4101)
      v5 -= 2;
    return v5 && *(_QWORD *)&v3[16 * (*(_QWORD *)v3 == 4101)] == 4099;
  }
  return result;
}

BOOL llvm::DIExpression::startsWithDeref(uint64_t **this)
{
  _BOOL8 result;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  result = llvm::DIExpression::isSingleLocationExpression(this);
  if (result)
  {
    v3 = (char *)this[2];
    v4 = (char *)this[3] - v3;
    if ((v4 & 0x7FFFFFFF8) == 0)
      return 0;
    v5 = v4 >> 3;
    if (*(_QWORD *)v3 == 4101)
      v5 -= 2;
    return v5 && *(_QWORD *)&v3[16 * (*(_QWORD *)v3 == 4101)] == 6;
  }
  return result;
}

char *llvm::DIAssignID::getImpl(uint64_t a1, int a2)
{
  char *v4;

  v4 = llvm::MDNode::operator new(16, 0, a2);
  llvm::MDNode::MDNode((uint64_t)v4, a1, 30, a2, 0, 0, 0, 0);
  if (a2 == 1)
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v4);
  return v4;
}

uint64_t llvm::DIExpression::ExprOperand::getSize(uint64_t **this)
{
  uint64_t v1;
  uint64_t result;
  BOOL v3;

  v1 = **this;
  if ((unint64_t)(v1 - 112) < 0x20)
    return 2;
  result = 3;
  if (v1 <= 147)
  {
    v3 = (unint64_t)v1 > 0x23 || ((1 << v1) & 0x800030000) == 0;
    if (!v3 || v1 == 144)
      return 2;
    if (v1 != 146)
      return 1;
  }
  else
  {
    if ((unint64_t)(v1 - 4096) > 5)
      goto LABEL_6;
    if (((1 << v1) & 0x2C) != 0)
      return 2;
    if (((1 << v1) & 3) == 0)
    {
LABEL_6:
      if (v1 != 148)
        return 1;
      return 2;
    }
  }
  return result;
}

BOOL llvm::DIExpression::isValid(llvm::DIExpression *this)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 == v1)
    return 1;
  if (((v2 - (_QWORD)v1) & 0x7FFFFFFF8) == 8)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 2);
    while (1)
    {
      v5 = *v3;
      v6 = *v3 - 112;
      if (v6 < 0x20)
      {
LABEL_9:
        v7 = 2;
        goto LABEL_10;
      }
      if (v5 <= 147)
      {
        v9 = (unint64_t)v5 > 0x23 || ((1 << v5) & 0x800030000) == 0;
        if (!v9 || v5 == 144)
          goto LABEL_9;
        v7 = 3;
        if (v5 != 146)
          goto LABEL_33;
      }
      else
      {
        if ((unint64_t)(v5 - 4096) > 5)
          goto LABEL_24;
        if (((1 << v5) & 0x2C) != 0)
          goto LABEL_9;
        v7 = 3;
        if (((1 << v5) & 3) == 0)
        {
LABEL_24:
          if (v5 == 148)
            goto LABEL_9;
LABEL_33:
          v7 = 1;
        }
      }
LABEL_10:
      if ((unint64_t)&v3[v7] > v2)
        return 0;
      if ((unint64_t)(v5 - 80) < 0x40)
        return 1;
      result = 0;
      switch(v5)
      {
        case 6:
        case 16:
        case 17:
        case 18:
        case 20:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 48:
        case 144:
        case 146:
        case 148:
        case 151:
          goto LABEL_13;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 19:
        case 21:
        case 22:
        case 23:
        case 25:
        case 31:
        case 40:
        case 47:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 145:
        case 147:
        case 149:
        case 150:
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
          return result;
        case 159:
          if (v3 + 1 != (uint64_t *)v2 && v3[1] != 4096)
            return 0;
          goto LABEL_42;
        default:
          v10 = v5 - 4096;
          if ((unint64_t)(v5 - 4096) > 5)
            return result;
          if (((1 << v5) & 0x36) == 0)
            goto LABEL_85;
LABEL_13:
          if (v6 < 0x20)
            goto LABEL_6;
          if (v5 <= 147)
          {
            if ((unint64_t)v5 <= 0x23 && ((1 << v5) & 0x800030000) != 0 || v5 == 144)
            {
LABEL_6:
              v4 = 2;
              goto LABEL_7;
            }
            v4 = 3;
            if (v5 != 146)
              goto LABEL_42;
          }
          else
          {
            if ((unint64_t)(v5 - 4096) > 5)
              goto LABEL_18;
            if (((1 << v5) & 0x2C) != 0)
              goto LABEL_6;
            v4 = 3;
            if (((1 << v5) & 3) == 0)
            {
LABEL_18:
              if (v5 == 148)
                goto LABEL_6;
LABEL_42:
              v4 = 1;
            }
          }
LABEL_7:
          v3 += v4;
          if (v3 == (uint64_t *)v2)
            return 1;
          break;
      }
    }
  }
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (2)
  {
    v12 = *v3;
    v13 = *v3 - 112;
    if (v13 < 0x20)
    {
LABEL_63:
      v14 = 2;
      goto LABEL_64;
    }
    if (v12 <= 147)
    {
      v15 = (unint64_t)v12 > 0x23 || ((1 << v12) & 0x800030000) == 0;
      if (!v15 || v12 == 144)
        goto LABEL_63;
      v14 = 3;
      if (v12 != 146)
        goto LABEL_62;
    }
    else
    {
      if ((unint64_t)(v12 - 4096) > 5)
        goto LABEL_53;
      if (((1 << v12) & 0x2C) != 0)
        goto LABEL_63;
      v14 = 3;
      if (((1 << v12) & 3) == 0)
      {
LABEL_53:
        if (v12 == 148)
          goto LABEL_63;
LABEL_62:
        v14 = 1;
      }
    }
LABEL_64:
    if ((unint64_t)&v3[v14] > v2)
      return 0;
    if ((unint64_t)(v12 - 80) < 0x40)
      return 1;
    result = 0;
    switch(v12)
    {
      case 6:
      case 16:
      case 17:
      case 18:
      case 20:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 48:
      case 144:
      case 146:
      case 148:
      case 151:
        goto LABEL_67;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 21:
      case 23:
      case 25:
      case 31:
      case 40:
      case 47:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 145:
      case 147:
      case 149:
      case 150:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
        return result;
      case 22:
        goto LABEL_82;
      case 159:
        if (v3 + 1 != (uint64_t *)v2 && v3[1] != 4096)
          return 0;
        goto LABEL_82;
      default:
        v10 = v12 - 4096;
        if ((unint64_t)(v12 - 4096) > 5)
          return result;
        if (((1 << v12) & 0x36) != 0)
        {
LABEL_67:
          if (v13 < 0x20)
            goto LABEL_46;
          if (v12 > 147)
          {
            if ((unint64_t)(v12 - 4096) > 5)
              goto LABEL_72;
            if (((1 << v12) & 0x2C) == 0)
            {
              v11 = 3;
              if (((1 << v12) & 3) != 0)
                goto LABEL_47;
LABEL_72:
              if (v12 != 148)
                goto LABEL_82;
            }
LABEL_46:
            v11 = 2;
            goto LABEL_47;
          }
          if ((unint64_t)v12 <= 0x23 && ((1 << v12) & 0x800030000) != 0 || v12 == 144)
            goto LABEL_46;
          v11 = 3;
          if (v12 != 146)
LABEL_82:
            v11 = 1;
LABEL_47:
          v3 += v11;
          if (v3 == (uint64_t *)v2)
            return 1;
          continue;
        }
LABEL_85:
        if (!v10)
          return v3 + 3 == (uint64_t *)v2;
        if (*v1 == 4101)
          v1 += 2 * (v1[1] == 0);
        return v3 == v1 && v3[1] == 1;
    }
  }
}

BOOL llvm::DIExpression::isSingleLocationExpression(uint64_t **this)
{
  _BOOL8 result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = llvm::DIExpression::isValid((llvm::DIExpression *)this);
  if (result)
  {
    v3 = this[2];
    if ((((char *)this[3] - (char *)v3) & 0x7FFFFFFF8) != 0)
    {
      if (*v3 == 4101)
      {
        if (v3[1])
          return 0;
        v4 = v3 + 2;
        v5 = this[3];
        if (v4 != v5)
        {
          while (1)
          {
LABEL_15:
            v7 = *v4;
            result = *v4 != 4101;
            if (*v4 == 4101)
              return result;
            if ((unint64_t)(v7 - 112) < 0x20)
              goto LABEL_13;
            if (v7 > 147)
              break;
            if ((unint64_t)v7 <= 0x23 && ((1 << v7) & 0x800030000) != 0 || v7 == 144)
              goto LABEL_13;
            v6 = 3;
            if (v7 != 146)
LABEL_25:
              v6 = 1;
LABEL_14:
            v4 += v6;
            if (v4 == v5)
              return 1;
          }
          if ((unint64_t)(v7 - 4096) <= 5)
          {
            if (((1 << v7) & 0x2C) != 0)
            {
LABEL_13:
              v6 = 2;
              goto LABEL_14;
            }
            v6 = 3;
            if (((1 << v7) & 3) != 0)
              goto LABEL_14;
          }
          if (v7 != 148)
            goto LABEL_25;
          goto LABEL_13;
        }
      }
      else
      {
        v4 = this[2];
        v5 = this[3];
        if (v4 != v5)
          goto LABEL_15;
      }
    }
    return 1;
  }
  return result;
}

int8x16_t llvm::DIExpression::getFragmentInfo@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t result;

  if (a1 == a2)
  {
LABEL_18:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
    return result;
  }
  while (1)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == 4096)
      break;
    if ((unint64_t)(v4 - 112) < 0x20)
      goto LABEL_5;
    if (v4 > 147)
    {
      if ((unint64_t)(*(_QWORD *)a1 - 4096) > 5)
        goto LABEL_13;
      if (((1 << *(_BYTE *)a1) & 0x2C) == 0)
      {
        v3 = 3;
        if (((1 << *(_BYTE *)a1) & 3) != 0)
          goto LABEL_6;
LABEL_13:
        if (v4 != 148)
          goto LABEL_17;
      }
LABEL_5:
      v3 = 2;
      goto LABEL_6;
    }
    if ((unint64_t)v4 <= 0x23 && ((1 << v4) & 0x800030000) != 0 || v4 == 144)
      goto LABEL_5;
    v3 = 3;
    if (v4 != 146)
LABEL_17:
      v3 = 1;
LABEL_6:
    a1 += 8 * v3;
    if (a1 == a2)
      goto LABEL_18;
  }
  result = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  *a3 = result;
  a3[1].i8[0] = 1;
  return result;
}

llvm::MDNode *llvm::DIExpression::append(_QWORD *a1, void *__src, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::MDNode *Impl;
  void *v20;
  uint64_t v21;
  _QWORD v22[18];

  v3 = a3;
  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x1000000000;
  v6 = (uint64_t *)a1[2];
  v7 = (uint64_t *)a1[3];
  if (v7 != v6)
  {
    LODWORD(v8) = 0;
    while (1)
    {
      v10 = *v6;
      if (*v6 == 4096 || v10 == 159)
      {
        v11 = v3 + v8;
        if (v11 > HIDWORD(v21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v11, 8);
          LODWORD(v8) = v21;
        }
        if (v3)
        {
          memcpy((char *)v20 + 8 * v8, __src, 8 * v3);
          LODWORD(v8) = v21;
        }
        __src = 0;
        LODWORD(v8) = v8 + v3;
        LODWORD(v21) = v8;
        v10 = *v6;
        v3 = 0;
      }
      if ((unint64_t)(v10 - 112) < 0x20)
        goto LABEL_26;
      if (v10 <= 147)
      {
        if (((unint64_t)v10 > 0x23 || ((1 << v10) & 0x800030000) == 0) && v10 != 144)
        {
          v12 = 3;
          if (v10 == 146)
            goto LABEL_27;
LABEL_25:
          v12 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        if ((unint64_t)(v10 - 4096) <= 5)
        {
          if (((1 << v10) & 0x2C) != 0)
            goto LABEL_26;
          v12 = 3;
          if (((1 << v10) & 3) != 0)
            goto LABEL_27;
        }
        if (v10 != 148)
          goto LABEL_25;
      }
LABEL_26:
      v12 = 2;
LABEL_27:
      v8 = v8;
      v13 = v12 + v8;
      if (v13 > HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v13, 8);
        v8 = v21;
      }
      memcpy((char *)v20 + 8 * v8, v6, 8 * v12);
      LODWORD(v8) = v21 + v12;
      LODWORD(v21) = v21 + v12;
      v14 = *v6;
      if ((unint64_t)(*v6 - 112) < 0x20)
        goto LABEL_5;
      if (v14 > 147)
      {
        if ((unint64_t)(v14 - 4096) > 5)
          goto LABEL_34;
        if (((1 << v14) & 0x2C) == 0)
        {
          v9 = 3;
          if (((1 << v14) & 3) != 0)
            goto LABEL_6;
LABEL_34:
          if (v14 != 148)
            goto LABEL_38;
        }
LABEL_5:
        v9 = 2;
        goto LABEL_6;
      }
      if ((unint64_t)v14 <= 0x23 && ((1 << v14) & 0x800030000) != 0 || v14 == 144)
        goto LABEL_5;
      v9 = 3;
      if (v14 != 146)
LABEL_38:
        v9 = 1;
LABEL_6:
      v6 += v9;
      if (v6 == v7)
      {
        a3 = v3 + v8;
        if (a3 > HIDWORD(v21))
          goto LABEL_40;
        goto LABEL_41;
      }
    }
  }
  LODWORD(v8) = 0;
  if (a3 > 0x10)
  {
LABEL_40:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, a3, 8);
    LODWORD(v8) = v21;
  }
LABEL_41:
  if (v3)
  {
    memcpy((char *)v20 + 8 * v8, __src, 8 * v3);
    LODWORD(v8) = v21;
  }
  v15 = (v8 + v3);
  LODWORD(v21) = v8 + v3;
  v16 = a1[1];
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  Impl = llvm::DIExpression::getImpl((uint64_t)v17, v20, (void *)v15, 0, 1);
  if (v20 != v22)
    free(v20);
  return Impl;
}

uint64_t llvm::DIExpression::isConstant(llvm::DIExpression *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (*((_QWORD *)this + 3) - (_QWORD)v1) >> 3;
  if ((_DWORD)v2 == 2)
  {
    v4 = *v1;
    if (*v1 != 16)
    {
      if (v4 == 17)
        return 0x100000000;
      return 0;
    }
    return (v4 == 16) | 0x100000000;
  }
  if ((_DWORD)v2 != 6 && (_DWORD)v2 != 3)
    return 0;
  v4 = *v1;
  if ((*v1 & 0xFFFFFFFFFFFFFFFELL) != 0x10)
    return 0;
  if ((_DWORD)v2 == 6)
  {
    if (v1[2] != 159 || v1[3] != 4096)
      return 0;
    return (v4 == 16) | 0x100000000;
  }
  if ((_DWORD)v2 != 3 || v1[2] == 159)
    return (v4 == 16) | 0x100000000;
  return 0;
}

llvm::MDNode *llvm::DIGlobalVariableExpression::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  llvm::MDNode *result;
  BOOL v14;
  char *v15;
  llvm::MDNode *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a4)
    goto LABEL_9;
  v10 = *a1;
  v11 = (uint64_t *)(*a1 + 576);
  v22 = a2;
  v23 = a3;
  v21 = 0;
  v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(v11, &v22, &v21);
  result = 0;
  if (v12)
    v14 = v21 == (llvm::MDNode **)(*(_QWORD *)(v10 + 576) + 8 * *(unsigned int *)(v10 + 592));
  else
    v14 = 1;
  if (!v14)
    result = *v21;
  if (!result && a5)
  {
LABEL_9:
    v22 = a2;
    v23 = a3;
    v15 = llvm::MDNode::operator new(16, 2uLL, a4);
    v16 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v15, (uint64_t)a1, 8, a4, (uint64_t)&v22, 2, 0, 0);
    v17 = *a1;
    v20 = v16;
    if (a4 == 1)
    {
      llvm::MDNode::storeDistinctInContext(v16);
    }
    else if (!a4)
    {
      v18 = v17 + 576;
      v21 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)(v17 + 576), &v20, &v21) & 1) == 0)
      {
        v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(v18, (uint64_t)&v20, &v20, v21);
        *v19 = v20;
      }
    }
    return v20;
  }
  return result;
}

char **llvm::DIObjCProperty::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, char a10)
{
  int v11;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  char **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t *v33;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v11 = a7;
  v43 = *MEMORY[0x1E0C80C00];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 1032);
  v36 = a2;
  v37 = a3;
  LODWORD(v38) = a4;
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v35 = 0;
  v20 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(v19, &v36, &v35)&& v35 != (char **)(*(_QWORD *)(v18 + 1032) + 8 * *(unsigned int *)(v18 + 1048)))
  {
    v20 = *v35;
  }
  v11 = a7;
  if (!v20)
  {
    if (a10)
    {
LABEL_7:
      v36 = a2;
      v37 = a3;
      v38 = a5;
      v39 = a6;
      v40 = a8;
      v20 = llvm::MDNode::operator new(24, 5uLL, a9);
      v21 = (char **)llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 28, a9, (uint64_t)&v36, 5, 0, 0);
      *((_WORD *)v21 + 1) = 16896;
      *((_DWORD *)v21 + 4) = a4;
      *((_DWORD *)v21 + 5) = v11;
      v22 = *a1;
      v35 = v21;
      if (a9 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v20);
      }
      else if (!a9)
      {
        v23 = *(_DWORD *)(v22 + 1048);
        if (!v23)
        {
          v33 = 0;
LABEL_23:
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucket<llvm::DIObjCProperty * const&,llvm::detail::DenseSetEmpty&>(v22 + 1032, v33, (uint64_t *)&v35);
          return v35;
        }
        v24 = *(_QWORD *)(v22 + 1032);
        v25 = llvm::MDNodeInfo<llvm::DIObjCProperty>::getHashValue((uint64_t)v20) & (v23 - 1);
        v26 = (uint64_t *)(v24 + 8 * v25);
        v27 = (char *)*v26;
        if ((char *)*v26 != v20)
        {
          v28 = 0;
          v29 = 1;
          while (v27 != (char *)-4096)
          {
            if (v28)
              v30 = 0;
            else
              v30 = v27 == (char *)-8192;
            if (v30)
              v28 = v26;
            v31 = v25 + v29++;
            v25 = v31 & (v23 - 1);
            v26 = (uint64_t *)(v24 + 8 * v25);
            v27 = (char *)*v26;
            if ((char *)*v26 == v20)
              return (char **)v20;
          }
          if (v28)
            v33 = v28;
          else
            v33 = v26;
          goto LABEL_23;
        }
      }
    }
  }
  return (char **)v20;
}

char **llvm::DIImportedEntity::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  int v12;
  __int16 v16;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  char **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t *v33;
  char **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v12 = a6;
  v16 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 1056);
  LODWORD(v36) = a2;
  v37 = a3;
  v38 = a4;
  v39 = a5;
  LODWORD(v40) = a6;
  v41 = a7;
  v42 = a8;
  v35 = 0;
  v20 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(v19, (uint64_t)&v36, &v35)&& v35 != (char **)(*(_QWORD *)(v18 + 1056) + 8 * *(unsigned int *)(v18 + 1072)))
  {
    v20 = *v35;
  }
  v12 = a6;
  if (!v20)
  {
    if (a10)
    {
LABEL_7:
      v36 = a3;
      v37 = a4;
      v38 = a7;
      v39 = a5;
      v40 = a8;
      v20 = llvm::MDNode::operator new(16, 5uLL, a9);
      v21 = (char **)llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 29, a9, (uint64_t)&v36, 5, 0, 0);
      *((_WORD *)v21 + 1) = v16;
      *((_DWORD *)v21 + 1) = v12;
      v22 = *a1;
      v35 = v21;
      if (a9 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v20);
      }
      else if (!a9)
      {
        v23 = *(_DWORD *)(v22 + 1072);
        if (!v23)
        {
          v33 = 0;
LABEL_23:
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucket<llvm::DIImportedEntity * const&,llvm::detail::DenseSetEmpty&>(v22 + 1056, v33, (uint64_t *)&v35);
          return v35;
        }
        v24 = *(_QWORD *)(v22 + 1056);
        v25 = llvm::MDNodeInfo<llvm::DIImportedEntity>::getHashValue((uint64_t)v20) & (v23 - 1);
        v26 = (uint64_t *)(v24 + 8 * v25);
        v27 = (char *)*v26;
        if ((char *)*v26 != v20)
        {
          v28 = 0;
          v29 = 1;
          while (v27 != (char *)-4096)
          {
            if (v28)
              v30 = 0;
            else
              v30 = v27 == (char *)-8192;
            if (v30)
              v28 = v26;
            v31 = v25 + v29++;
            v25 = v31 & (v23 - 1);
            v26 = (uint64_t *)(v24 + 8 * v25);
            v27 = (char *)*v26;
            if ((char *)*v26 == v20)
              return (char **)v20;
          }
          if (v28)
            v33 = v28;
          else
            v33 = v26;
          goto LABEL_23;
        }
      }
    }
  }
  return (char **)v20;
}

uint64_t llvm::DIMacro::getImpl(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _DWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v11 = a2;
  v25[2] = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1080);
  v22[0] = a2;
  v22[1] = a3;
  v23 = a4;
  v24 = a5;
  v25[0] = 0;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (uint64_t)v22, v25))v17 = v25[0] == *(_QWORD *)(v14 + 1080) + 8 * *(unsigned int *)(v14 + 1096);
  else
    v17 = 1;
  if (!v17)
    v16 = *(char **)v25[0];
  if (!v16 && a7)
  {
LABEL_9:
    v25[0] = a4;
    v25[1] = a5;
    v16 = llvm::MDNode::operator new(16, 2uLL, a6);
    v18 = llvm::MDNode::MDNode((uint64_t)v16, (uint64_t)a1, 31, a6, (uint64_t)v25, 2, 0, 0);
    *(_WORD *)(v18 + 2) = v11;
    *(_DWORD *)(v18 + 4) = a3;
    v19 = *a1;
    v21 = v18;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v16);
    }
    else if (!a6)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v19 + 1080, &v21, (uint64_t)v22);
      return v21;
    }
  }
  return (uint64_t)v16;
}

uint64_t llvm::DIMacroFile::getImpl(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _DWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v11 = a2;
  v25[2] = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1104);
  v22[0] = a2;
  v22[1] = a3;
  v23 = a4;
  v24 = a5;
  v25[0] = 0;
  v16 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (uint64_t)v22, v25))v17 = v25[0] == *(_QWORD *)(v14 + 1104) + 8 * *(unsigned int *)(v14 + 1120);
  else
    v17 = 1;
  if (!v17)
    v16 = *(char **)v25[0];
  if (!v16 && a7)
  {
LABEL_9:
    v25[0] = a4;
    v25[1] = a5;
    v16 = llvm::MDNode::operator new(16, 2uLL, a6);
    v18 = llvm::MDNode::MDNode((uint64_t)v16, (uint64_t)a1, 32, a6, (uint64_t)v25, 2, 0, 0);
    *(_WORD *)(v18 + 2) = v11;
    *(_DWORD *)(v18 + 4) = a3;
    v19 = *a1;
    v21 = v18;
    if (a6 == 1)
    {
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v16);
    }
    else if (!a6)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v19 + 1104, &v21, (uint64_t)v22);
      return v21;
    }
  }
  return (uint64_t)v16;
}

uint64_t llvm::DIArgList::get(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v32;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 480);
  v8 = *(_DWORD *)(*a1 + 496);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = 1;
    v11 = v9 & llvm::hashing::detail::hash_combine_range_impl<char const>(a2, (uint64_t)&a2[a3]);
    v12 = *(_QWORD *)(v7 + 8 * v11);
    if (v12 == -8192)
      goto LABEL_6;
    while (1)
    {
      if (v12 == -4096)
      {
        v14 = *(_QWORD *)(v6 + 480) + 8 * *(unsigned int *)(v6 + 496);
        if (v14 != *(_QWORD *)(*a1 + 480) + 8 * *(unsigned int *)(*a1 + 496))
          return *(_QWORD *)v14;
        goto LABEL_13;
      }
      if (a3 == *(_DWORD *)(v12 + 136) && !memcmp(a2, *(const void **)(v12 + 128), 8 * a3))
        break;
      do
      {
LABEL_6:
        v13 = v11 + v10++;
        v11 = v13 & v9;
        v12 = *(_QWORD *)(v7 + 8 * v11);
      }
      while (v12 == -8192);
    }
    v14 = v7 + 8 * v11;
    if (v14 != *(_QWORD *)(*a1 + 480) + 8 * *(unsigned int *)(*a1 + 496))
      return *(_QWORD *)v14;
  }
  else
  {
    v14 = *(_QWORD *)(*a1 + 480);
    if (v7 != v14 + 8 * *(unsigned int *)(*a1 + 496))
      return *(_QWORD *)v14;
  }
LABEL_13:
  v32 = 0;
  v15 = (uint64_t)operator new(0xB0uLL);
  *(_QWORD *)v15 = 4;
  *(_QWORD *)(v15 + 8) = a1;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 1;
  *(_QWORD *)(v15 + 32) = -4096;
  *(_QWORD *)(v15 + 56) = -4096;
  *(_QWORD *)(v15 + 80) = -4096;
  v16 = (unsigned __int8 **)(v15 + 144);
  *(_QWORD *)(v15 + 128) = v15 + 144;
  *(_QWORD *)(v15 + 104) = -4096;
  *(_QWORD *)(v15 + 136) = 0x400000000;
  if ((unint64_t)(8 * a3) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 128, v16, (8 * a3) >> 3, 8);
    v17 = *(_DWORD *)(v15 + 136);
    v16 = *(unsigned __int8 ***)(v15 + 128);
    if (!a3)
      goto LABEL_18;
    goto LABEL_17;
  }
  v17 = 0;
  if (a3)
  {
LABEL_17:
    memcpy(&v16[v17], a2, 8 * a3);
    v17 = *(_DWORD *)(v15 + 136);
    v16 = *(unsigned __int8 ***)(v15 + 128);
  }
LABEL_18:
  v18 = (v17 + a3);
  *(_DWORD *)(v15 + 136) = v18;
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    do
    {
      if (*v16)
        llvm::MetadataTracking::track((uint64_t)v16, *v16, v15 | 1);
      ++v16;
      v19 -= 8;
    }
    while (v19);
  }
  v32 = v15;
  v20 = *a1;
  v21 = *(_DWORD *)(v20 + 496);
  if (!v21)
  {
    v30 = 0;
LABEL_35:
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucket<llvm::DIArgList * const&,llvm::detail::DenseSetEmpty&>(v20 + 480, v30, &v32);
    return v32;
  }
  v22 = *(_QWORD *)(v20 + 480);
  v23 = (v21 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(v15 + 128), *(_QWORD *)(v15 + 128) + 8 * *(unsigned int *)(v15 + 136));
  v24 = (_QWORD *)(v22 + 8 * v23);
  v25 = *v24;
  if (v15 != *v24)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & (v21 - 1);
      v24 = (_QWORD *)(v22 + 8 * v23);
      v25 = *v24;
      if (v15 == *v24)
        return v15;
    }
    if (v26)
      v30 = v26;
    else
      v30 = v24;
    goto LABEL_35;
  }
  return v15;
}

void llvm::DIArgList::handleChangedOperand(llvm::DIArgList *this, unsigned __int8 *a2, llvm::Metadata *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int32x2_t **v9;
  int32x2_t *v10;
  __int32 v11;
  int32x2_t v12;
  uint64_t v13;
  llvm::DIArgList **v14;
  llvm::DIArgList *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ValueAsMetadata *v20;
  llvm::Value *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ReplaceableMetadataImpl *v34;
  llvm::Metadata **v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  llvm::DIArgList **v41;
  llvm::DIArgList *v42;
  llvm::DIArgList **v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  llvm::DIArgList **v47;
  uint64_t v48;
  unsigned __int8 **v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  llvm::DIArgList *v54;

  v4 = a2;
  v6 = *((unsigned int *)this + 34);
  if ((_DWORD)v6)
  {
    v7 = (void **)*((_QWORD *)this + 16);
    v8 = 8 * v6;
    do
    {
      a2 = (unsigned __int8 *)*v7;
      if (*v7)
        llvm::MetadataTracking::untrack((uint64_t)v7, a2);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v9 = (int32x2_t **)*((_QWORD *)this + 1);
  v10 = *v9;
  v11 = (*v9)[62].i32[0];
  if (v11)
  {
    v12 = v10[60];
    LODWORD(v13) = (v11 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)this + 16), *((_QWORD *)this + 16) + 8 * *((unsigned int *)this + 34));
    v14 = (llvm::DIArgList **)(*(_QWORD *)&v12 + 8 * v13);
    v15 = *v14;
    if (*v14 == this)
    {
LABEL_8:
      *v14 = (llvm::DIArgList *)-8192;
      v10[61] = vadd_s32(v10[61], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v52 = 1;
      while (v15 != (llvm::DIArgList *)-4096)
      {
        v53 = v13 + v52++;
        v13 = v53 & (v11 - 1);
        v15 = *(llvm::DIArgList **)(*(_QWORD *)&v12 + 8 * v13);
        if (v15 == this)
        {
          v14 = (llvm::DIArgList **)(*(_QWORD *)&v12 + 8 * v13);
          goto LABEL_8;
        }
      }
    }
  }
  v16 = *((unsigned int *)this + 34);
  if ((_DWORD)v16)
  {
    v17 = (unsigned __int8 *)*((_QWORD *)this + 16);
    if (a3)
    {
      v18 = 8 * v16;
      do
      {
        if (v17 == v4)
          *(_QWORD *)v4 = a3;
        v17 += 8;
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      v19 = 8 * v16;
      do
      {
        if (v17 == v4)
        {
          v20 = (llvm::ValueAsMetadata *)llvm::PoisonValue::get(**(llvm::PoisonValue ***)(*(_QWORD *)v4 + 128), (llvm::Type *)a2);
          *(_QWORD *)v4 = llvm::ValueAsMetadata::get(v20, v21);
        }
        v17 += 8;
        v19 -= 8;
      }
      while (v19);
      LODWORD(v16) = *((_DWORD *)this + 34);
    }
  }
  v22 = (uint64_t *)*((_QWORD *)this + 1);
  v23 = *v22;
  v24 = *(_QWORD *)(*v22 + 480);
  v25 = *(_DWORD *)(*v22 + 496);
  if (v25)
  {
    v26 = (_QWORD *)*((_QWORD *)this + 16);
    v27 = v25 - 1;
    v28 = 1;
    v29 = (v25 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(v26, (uint64_t)&v26[v16]);
    v30 = *(_QWORD *)(v24 + 8 * v29);
    if (v30 == -8192)
      goto LABEL_25;
    while (1)
    {
      if (v30 == -4096)
      {
        v32 = *(_QWORD *)(v23 + 480);
        v33 = *(unsigned int *)(v23 + 496);
        v34 = (llvm::DIArgList *)((char *)this + 8);
        v35 = (llvm::Metadata **)(v32 + 8 * v33);
        if (v35 == (llvm::Metadata **)(v32 + 8 * v33))
          goto LABEL_37;
        goto LABEL_31;
      }
      if ((_DWORD)v16 == *(_DWORD *)(v30 + 136) && !memcmp(v26, *(const void **)(v30 + 128), 8 * v16))
        break;
      do
      {
LABEL_25:
        v31 = v29 + v28++;
        v29 = v31 & v27;
        v30 = *(_QWORD *)(v24 + 8 * v29);
      }
      while (v30 == -8192);
    }
    v35 = (llvm::Metadata **)(v24 + 8 * v29);
    v34 = (llvm::DIArgList *)((char *)this + 8);
    if (v35 == (llvm::Metadata **)(*(_QWORD *)(v23 + 480) + 8 * *(unsigned int *)(v23 + 496)))
      goto LABEL_37;
LABEL_31:
    if (*v35)
    {
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v34, *v35);
      *((_DWORD *)this + 34) = 0;
      v36 = (char *)*((_QWORD *)this + 16);
      if (v36 != (char *)this + 144)
        free(v36);
      if ((*((_BYTE *)this + 24) & 1) == 0)
        llvm::deallocate_buffer(*((llvm **)this + 4), (void *)(24 * *((unsigned int *)this + 10)));
      operator delete(this);
      return;
    }
  }
LABEL_37:
  v37 = **((_QWORD **)this + 1);
  v54 = this;
  v38 = *(_DWORD *)(v37 + 496);
  if (v38)
  {
    v39 = *(_QWORD *)(v37 + 480);
    v40 = (v38 - 1) & llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)this + 16), *((_QWORD *)this + 16) + 8 * *((unsigned int *)this + 34));
    v41 = (llvm::DIArgList **)(v39 + 8 * v40);
    v42 = *v41;
    if (*v41 == this)
      goto LABEL_50;
    v43 = 0;
    v44 = 1;
    while (v42 != (llvm::DIArgList *)-4096)
    {
      if (v43)
        v45 = 0;
      else
        v45 = v42 == (llvm::DIArgList *)-8192;
      if (v45)
        v43 = v41;
      v46 = v40 + v44++;
      v40 = v46 & (v38 - 1);
      v41 = (llvm::DIArgList **)(v39 + 8 * v40);
      v42 = *v41;
      if (*v41 == this)
        goto LABEL_50;
    }
    if (v43)
      v47 = v43;
    else
      v47 = v41;
  }
  else
  {
    v47 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucket<llvm::DIArgList * const&,llvm::detail::DenseSetEmpty&>(v37 + 480, v47, (uint64_t *)&v54);
LABEL_50:
  v48 = *((unsigned int *)this + 34);
  if ((_DWORD)v48)
  {
    v49 = (unsigned __int8 **)*((_QWORD *)this + 16);
    v50 = (unint64_t)this | 1;
    v51 = 8 * v48;
    do
    {
      if (*v49)
        llvm::MetadataTracking::track((uint64_t)v49, *v49, v50);
      ++v49;
      v51 -= 8;
    }
    while (v51);
  }
}

uint64_t llvm::DIArgList::untrack(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 136);
  if ((_DWORD)v1)
  {
    v2 = *(unsigned __int8 ***)(this + 128);
    v3 = 8 * v1;
    do
    {
      if (*v2)
        this = llvm::MetadataTracking::untrack((uint64_t)v2, *v2);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

void llvm::DIArgList::dropAllReferences(llvm::DIArgList *this, int a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;

  if (a2)
  {
    v3 = *((unsigned int *)this + 34);
    if ((_DWORD)v3)
    {
      v4 = (unsigned __int8 **)*((_QWORD *)this + 16);
      v5 = 8 * v3;
      do
      {
        if (*v4)
          llvm::MetadataTracking::untrack((uint64_t)v4, *v4);
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
  }
  *((_DWORD *)this + 34) = 0;
  llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::DIArgList *)((char *)this + 8), 0);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>((_DWORD *)a2, (int *)(a2 + 4), (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (char *)(a2 + 24));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_14;
  while (v13 != -4096)
  {
    if (*(_DWORD *)a2 != *(_DWORD *)(v13 + 4) || *(_DWORD *)(a2 + 4) != *(unsigned __int16 *)(v13 + 2))
      goto LABEL_14;
    v14 = *(_QWORD *)(v13 - 16);
    if ((v14 & 2) != 0)
    {
      v15 = *(_QWORD **)(v13 - 32);
      if (v10 != *v15)
        goto LABEL_14;
      if (*(_DWORD *)(v13 - 24) == 2)
        goto LABEL_12;
    }
    else
    {
      v15 = (_QWORD *)(v13 - 16 - 8 * ((v14 >> 2) & 0xF));
      if (v10 != *v15)
        goto LABEL_14;
      if ((*(_QWORD *)(v13 - 16) & 0x3C0) == 0x80)
      {
LABEL_12:
        v16 = v15[1];
        goto LABEL_13;
      }
    }
    v16 = 0;
LABEL_13:
    if (*(_QWORD *)(a2 + 16) == v16 && *(_BYTE *)(a2 + 24) == *(unsigned __int8 *)(v13 + 1) >> 7)
    {
      result = 1;
      *a3 = v12;
      return result;
    }
    do
    {
LABEL_14:
      if (v8)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17)
        v8 = v12;
      v18 = v9 + v11++;
      v9 = v18 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>(_DWORD *a1, int *a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  unsigned __int8 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v14;
  unint64_t v15;
  int *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[4];
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  if ((v8 & 1) == 0)
  {
    v16 = a2;
    v17 = a1;
    a2 = v16;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      a2 = v16;
      a1 = v17;
    }
  }
  v25 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v22[0]) = *a1;
  v18 = 0;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v22, (uint64_t *)&v18, (_DWORD *)v22 + 1, (unint64_t)v23, *a2);
  v19 = v18;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v19, v9, (unint64_t)v23, *a3);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v20, v10, (unint64_t)v23, *a4);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v22, (uint64_t *)&v21, v11, (unint64_t)v23, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v22, v21, v12, (char *)v23);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25[8];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v21 = *(_DWORD *)(*a2 + 4);
    v22 = *(unsigned __int16 *)(v7 + 2);
    v8 = *(_QWORD *)(v7 - 16);
    if ((v8 & 2) != 0)
    {
      v9 = *(uint64_t **)(v7 - 32);
      v23 = *v9;
      if (*(_DWORD *)(v7 - 24) != 2)
        goto LABEL_4;
    }
    else
    {
      v9 = (uint64_t *)(v7 - 16 - 8 * ((v8 >> 2) & 0xF));
      v23 = *v9;
      if ((v8 & 0x3C0) != 0x80)
      {
LABEL_4:
        v10 = 0;
        goto LABEL_9;
      }
    }
    v10 = v9[1];
LABEL_9:
    v24 = v10;
    v25[0] = *(_BYTE *)(v7 + 1) >> 7;
    v13 = llvm::hash_combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>(&v21, &v22, &v23, &v24, v25);
    v14 = v4 - 1;
    v15 = (v4 - 1) & v13;
    v11 = (_QWORD *)(v6 + 8 * v15);
    v16 = *v11;
    if (*a2 == *v11)
    {
      result = 1;
      *a3 = v11;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v11;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        v11 = (_QWORD *)(v6 + 8 * (v20 & v14));
        v16 = *v11;
        if (*a2 == *v11)
          goto LABEL_6;
      }
      result = 0;
      if (v17)
        v11 = v17;
      *a3 = v11;
    }
    return result;
  }
  v11 = 0;
  result = 0;
LABEL_6:
  *a3 = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

unint64_t llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *>(_DWORD *a1, int *a2, uint64_t *a3)
{
  unsigned __int8 v4;
  char *v5;
  char *v6;
  int v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if ((v4 & 1) == 0)
  {
    v10 = a2;
    v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v14[0]) = *a1;
  v12 = 0;
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v14, (uint64_t *)&v12, (_DWORD *)v14 + 1, (unint64_t)v15, *a2);
  v13 = v12;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

BOOL llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;

  if (*(_DWORD *)(a1 + 36) != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
  {
    if (v2 != **(_QWORD **)(a2 - 32))
      return 0;
  }
  else if (v2 != *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF)))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 4))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(uint64_t **)a1;
    if ((v4 & 2) != 0)
    {
      if (v5 == *(_DWORD *)(a2 - 24) - 1)
      {
        v7 = *(_QWORD *)(a2 - 32);
LABEL_16:
        v11 = (uint64_t *)(v7 + 8);
        v12 = 8 * v5 - 8;
        do
        {
          v14 = *v6++;
          v13 = v14;
          v15 = *v11++;
          result = v13 == v15;
          v17 = v13 != v15 || v12 == 0;
          v12 -= 8;
        }
        while (!v17);
        return result;
      }
    }
    else if (v5 == ((v4 >> 6) & 0xF) - 1)
    {
      v7 = v3 - 8 * ((v4 >> 2) & 0xF);
      goto LABEL_16;
    }
    return 0;
  }
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if ((v4 & 2) != 0)
  {
    if (v9 != *(_DWORD *)(a2 - 24) - 1)
      return 0;
    v10 = *(_QWORD *)(a2 - 32);
  }
  else
  {
    if (v9 != ((v4 >> 6) & 0xF) - 1)
      return 0;
    v10 = v3 - 8 * ((v4 >> 2) & 0xF);
  }
  if (!v9)
    return 1;
  v18 = (uint64_t *)(v10 + 8);
  v19 = 8 * v9 - 8;
  do
  {
    v21 = *v8++;
    v20 = v21;
    v22 = *v18++;
    result = v20 == v22;
    v23 = v20 != v22 || v19 == 0;
    v19 -= 8;
  }
  while (!v23);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v8 = (unint64_t *)(*a2 - 16);
    v9 = *v8;
    v12 = *(_DWORD *)(v7 + 4);
    v22 = *(unsigned __int16 *)(v7 + 2);
    if ((v9 & 2) != 0)
      v13 = *(uint64_t **)(v7 - 32);
    else
      v13 = (uint64_t *)&v8[-((v9 >> 2) & 0xF)];
    v23 = *v13;
    v24 = v12;
    v14 = llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *>(&v24, &v22, &v23);
    v15 = v4 - 1;
    v16 = (v4 - 1) & v14;
    v10 = (_QWORD *)(v6 + 8 * v16);
    v17 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
      *a3 = v10;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      result = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v10;
        v21 = v16 + v19++;
        v16 = v21 & v15;
        v10 = (_QWORD *)(v6 + 8 * (v21 & v15));
        v17 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v18)
        v10 = v18;
      *a3 = v10;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
LABEL_4:
    *a3 = v10;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    if (*a2 && *(_BYTE *)v7 == 1)
    {
      v8 = *(_QWORD *)(v7 + 128);
      v9 = *(_DWORD *)(v8 + 32);
      if (v9 > 0x40)
        v10 = **(_QWORD **)(v8 + 24);
      else
        v10 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
      v21 = v10;
      v11 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v21, a2 + 1, a2 + 2, a2 + 3);
    }
    else
    {
      v11 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(a2, a2 + 1, a2 + 2, a2 + 3);
    }
    v14 = 0;
    v15 = v4 - 1;
    v16 = v15 & v11;
    v17 = 1;
    v12 = (uint64_t *)(v6 + 8 * (v15 & v11));
    v18 = *v12;
    if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_18;
    while (v18 != -4096)
    {
      while (1)
      {
        if (v14)
          v19 = 0;
        else
          v19 = v18 == -8192;
        if (v19)
          v14 = v12;
        v20 = v16 + v17++;
        v16 = v20 & v15;
        v12 = (uint64_t *)(v6 + 8 * (v20 & v15));
        v18 = *v12;
        if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_18:
        if ((llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf((uint64_t)a2, v18) & 1) != 0)
        {
          result = 1;
          goto LABEL_24;
        }
        v18 = *v12;
        if (*v12 == -4096)
          goto LABEL_20;
      }
    }
LABEL_20:
    result = 0;
    if (v14)
      v12 = v14;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_24:
  *a3 = v12;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;

  v2 = *(_BYTE **)a1;
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
  {
    v5 = **(_QWORD **)(a2 - 32);
    if (v2 == (_BYTE *)v5)
      goto LABEL_20;
  }
  else
  {
    v5 = *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF));
    if (v2 == (_BYTE *)v5)
      goto LABEL_20;
  }
  if (v2)
  {
    if (*v2 == 1)
      v6 = *(_BYTE **)a1;
    else
      v6 = 0;
    if (!v5)
      return 0;
  }
  else
  {
    v6 = 0;
    if (!v5)
      return 0;
  }
  if (!v6 || *(_BYTE *)v5 != 1)
    return 0;
  v7 = *((_QWORD *)v6 + 16);
  v8 = *(_QWORD *)(v5 + 128);
  v9 = *(_DWORD *)(v7 + 32);
  if (v9 > 0x40)
  {
    v10 = **(_QWORD **)(v7 + 24);
    v11 = *(_DWORD *)(v8 + 32);
    if (v11 > 0x40)
    {
LABEL_16:
      if (v10 != **(_QWORD **)(v8 + 24))
        return 0;
      goto LABEL_20;
    }
  }
  else
  {
    v10 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v9) >> -(char)v9;
    v11 = *(_DWORD *)(v8 + 32);
    if (v11 > 0x40)
      goto LABEL_16;
  }
  if (v10 != (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v11) >> -(char)v11)
    return 0;
LABEL_20:
  v12 = *(_BYTE **)(a1 + 8);
  if ((v4 & 2) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
    if (v12 == (_BYTE *)v13)
      goto LABEL_39;
  }
  else
  {
    v13 = *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF) + 8);
    if (v12 == (_BYTE *)v13)
      goto LABEL_39;
  }
  if (v12)
  {
    if (*v12 == 1)
      v14 = *(_QWORD *)(a1 + 8);
    else
      v14 = 0;
    if (!v13)
      return 0;
  }
  else
  {
    v14 = 0;
    if (!v13)
      return 0;
  }
  if (!v14 || *(_BYTE *)v13 != 1)
    return 0;
  v15 = *(_QWORD *)(v14 + 128);
  v16 = *(_QWORD *)(v13 + 128);
  v17 = *(_DWORD *)(v15 + 32);
  if (v17 > 0x40)
  {
    v18 = **(_QWORD **)(v15 + 24);
    v19 = *(_DWORD *)(v16 + 32);
    if (v19 > 0x40)
    {
LABEL_35:
      if (v18 != **(_QWORD **)(v16 + 24))
        return 0;
      goto LABEL_39;
    }
  }
  else
  {
    v18 = (uint64_t)(*(_QWORD *)(v15 + 24) << -(char)v17) >> -(char)v17;
    v19 = *(_DWORD *)(v16 + 32);
    if (v19 > 0x40)
      goto LABEL_35;
  }
  if (v18 != (uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v19) >> -(char)v19)
    return 0;
LABEL_39:
  v20 = *(_BYTE **)(a1 + 16);
  if ((v4 & 2) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16);
    if (v20 == (_BYTE *)v21)
      goto LABEL_58;
  }
  else
  {
    v21 = *(_QWORD *)(a2 - 8 * ((v4 >> 2) & 0xF));
    if (v20 == (_BYTE *)v21)
      goto LABEL_58;
  }
  if (v20)
  {
    if (*v20 == 1)
      v22 = *(_QWORD *)(a1 + 16);
    else
      v22 = 0;
    if (!v21)
      return 0;
  }
  else
  {
    v22 = 0;
    if (!v21)
      return 0;
  }
  if (!v22 || *(_BYTE *)v21 != 1)
    return 0;
  v23 = *(_QWORD *)(v22 + 128);
  v24 = *(_QWORD *)(v21 + 128);
  v25 = *(_DWORD *)(v23 + 32);
  if (v25 > 0x40)
  {
    v26 = **(_QWORD **)(v23 + 24);
    v27 = *(_DWORD *)(v24 + 32);
    if (v27 > 0x40)
    {
LABEL_54:
      if (v26 != **(_QWORD **)(v24 + 24))
        return 0;
      goto LABEL_58;
    }
  }
  else
  {
    v26 = (uint64_t)(*(_QWORD *)(v23 + 24) << -(char)v25) >> -(char)v25;
    v27 = *(_DWORD *)(v24 + 32);
    if (v27 > 0x40)
      goto LABEL_54;
  }
  if (v26 != (uint64_t)(*(_QWORD *)(v24 + 24) << -(char)v27) >> -(char)v27)
    return 0;
LABEL_58:
  v28 = *(_BYTE **)(a1 + 24);
  if ((v4 & 2) != 0)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 24);
    if (v28 != (_BYTE *)v29)
      goto LABEL_60;
    return 1;
  }
  v29 = *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF) + 24);
  if (v28 == (_BYTE *)v29)
    return 1;
LABEL_60:
  if (v28)
  {
    if (*v28 == 1)
      v30 = *(_QWORD *)(a1 + 24);
    else
      v30 = 0;
    if (!v29)
      return 0;
  }
  else
  {
    v30 = 0;
    if (!v29)
      return 0;
  }
  if (v30 && *(_BYTE *)v29 == 1)
  {
    v32 = *(_QWORD *)(v30 + 128);
    v33 = *(_QWORD *)(v29 + 128);
    v34 = *(_DWORD *)(v32 + 32);
    v35 = v34 > 0x40 ? **(_QWORD **)(v32 + 24) : (uint64_t)(*(_QWORD *)(v32 + 24) << -(char)v34) >> -(char)v34;
    v36 = *(_DWORD *)(v33 + 32);
    v37 = v36 > 0x40 ? **(_QWORD **)(v33 + 24) : (uint64_t)(*(_QWORD *)(v33 + 24) << -(char)v36) >> -(char)v36;
    if (v35 == v37)
      return 1;
  }
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucket<llvm::DISubrange * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int HashValue;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  HashValue = llvm::MDNodeInfo<llvm::DISubrange>::getHashValue(*a3);
  v13 = v11 - 1;
  v8 = *a3;
  v14 = HashValue & (v11 - 1);
  a2 = (uint64_t *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::MDNodeInfo<llvm::DISubrange>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 - 16);
  if ((v1 & 2) != 0)
    v2 = *(_QWORD *)(a1 - 32);
  else
    v2 = a1 - 16 - 8 * ((v1 >> 2) & 0xF);
  v3 = *(_QWORD *)v2;
  v7 = v3;
  v8 = *(_OWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 24);
  if (!v3 || *(_BYTE *)v3 != 1)
    return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v7, (uint64_t *)&v8, (uint64_t *)&v8 + 1, &v9);
  v4 = *(_QWORD *)(v3 + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v10 = **(_QWORD **)(v4 + 24);
  else
    v10 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v10, (uint64_t *)&v8, (uint64_t *)&v8 + 1, &v9);
}

int64x2_t *llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MDNodeInfo<llvm::DISubrange>::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = *a2;
  if (*a2 && *(_BYTE *)v7 == 1)
  {
    v8 = *(_QWORD *)(v7 + 128);
    v9 = *(_DWORD *)(v8 + 32);
    if (v9 > 0x40)
      v10 = **(_QWORD **)(v8 + 24);
    else
      v10 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
    v23 = v10;
    v11 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v23, a2 + 1, a2 + 2, a2 + 3);
  }
  else
  {
    v11 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(a2, a2 + 1, a2 + 2, a2 + 3);
  }
  v13 = 0;
  v14 = (v4 - 1) & v11;
  v15 = *a2;
  v16 = 1;
  v17 = (_QWORD *)(v6 + 8 * v14);
  v18 = *v17;
  if (*v17 == -8192)
    goto LABEL_18;
  while (v18 != -4096)
  {
    v19 = *(_QWORD *)(v18 - 16);
    if ((v19 & 2) != 0)
    {
      v20 = *(_QWORD **)(v18 - 32);
      if (v15 != *v20)
        goto LABEL_18;
    }
    else
    {
      v20 = (_QWORD *)(v18 - 16 - 8 * ((v19 >> 2) & 0xF));
      if (v15 != *v20)
        goto LABEL_18;
    }
    if (a2[1] == v20[1] && a2[2] == v20[2] && a2[3] == v20[3])
    {
      result = 1;
      *a3 = v17;
      return result;
    }
    do
    {
LABEL_18:
      if (v13)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v13 = v17;
      v22 = v14 + v16++;
      v14 = v22 & (v4 - 1);
      v17 = (_QWORD *)(v6 + 8 * v14);
      v18 = *v17;
    }
    while (*v17 == -8192);
  }
  result = 0;
  if (v13)
    v17 = v13;
  *a3 = v17;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  int v29;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = (v4 - 1) & llvm::hash_combine<llvm::APInt,llvm::MDString *>((llvm *)a2, (const llvm::APInt *)(a2 + 16));
    v9 = *(_DWORD *)(a2 + 8);
    v10 = *(unsigned __int8 *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 16);
    if (v9 >= 0x41)
    {
      v12 = 0;
      v21 = 1;
      v14 = (_QWORD *)(v6 + 8 * v8);
      v22 = *v14;
      if (*v14 == -8192)
        goto LABEL_29;
      while (v22 != -4096)
      {
        if (v9 == *(_DWORD *)(v22 + 24))
        {
          v29 = v10;
          v28 = v11;
          v23 = llvm::APInt::equalSlowCase((const void **)a2, (const void **)(v22 + 16));
          v11 = v28;
          v10 = v29;
          if (v23 && v29 == (*(_DWORD *)(v22 + 4) != 0))
          {
            v24 = *(_QWORD *)(v22 - 16);
            v25 = (v24 & 2) != 0 ? *(_QWORD **)(v22 - 32) : (_QWORD *)(v22 - 16 - 8 * ((v24 >> 2) & 0xF));
            if (v28 == *v25)
            {
LABEL_39:
              result = 1;
              goto LABEL_38;
            }
          }
        }
        do
        {
LABEL_29:
          if (v12)
            v26 = 0;
          else
            v26 = v22 == -8192;
          if (v26)
            v12 = v14;
          v27 = v8 + v21++;
          v8 = v27 & v7;
          v14 = (_QWORD *)(v6 + 8 * (v27 & v7));
          v22 = *v14;
        }
        while (*v14 == -8192);
      }
    }
    else
    {
      v12 = 0;
      v13 = 1;
      v14 = (_QWORD *)(v6 + 8 * v8);
      v15 = *v14;
      if (*v14 == -8192)
        goto LABEL_12;
      while (v15 != -4096)
      {
        if (v9 == *(_DWORD *)(v15 + 24) && *(_QWORD *)a2 == *(_QWORD *)(v15 + 16) && v10 == (*(_DWORD *)(v15 + 4) != 0))
        {
          v16 = *(_QWORD *)(v15 - 16);
          v17 = (v16 & 2) != 0 ? *(_QWORD **)(v15 - 32) : (_QWORD *)(v15 - 16 - 8 * ((v16 >> 2) & 0xF));
          if (v11 == *v17)
            goto LABEL_39;
        }
        do
        {
LABEL_12:
          if (v12)
            v18 = 0;
          else
            v18 = v15 == -8192;
          if (v18)
            v12 = v14;
          v19 = v8 + v13++;
          v8 = v19 & v7;
          v14 = (_QWORD *)(v6 + 8 * (v19 & v7));
          v15 = *v14;
        }
        while (*v14 == -8192);
      }
    }
    result = 0;
    if (v12)
      v14 = v12;
  }
  else
  {
    v14 = 0;
    result = 0;
  }
LABEL_38:
  *a3 = v14;
  return result;
}

unint64_t llvm::hash_combine<llvm::APInt,llvm::MDString *>(llvm *a1, const llvm::APInt *a2)
{
  unsigned __int8 v3;
  char *v4;
  int v6;
  unint64_t v7;
  llvm *v8;
  unint64_t v9;
  _OWORD v10[4];
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  if ((v3 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a1 = v8;
    }
  }
  v13 = llvm::hashing::detail::get_execution_seed(void)::seed;
  v9 = 0;
  *(_QWORD *)&v10[0] = llvm::hash_value(a1, a2);
  v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v10, (uint64_t *)&v9, (_QWORD *)v10 + 1, (unint64_t)v11, *(_QWORD *)a2);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v10, v9, v4, (char *)v11);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t result;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  void *__p;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v12 = 0;
    result = 0;
    goto LABEL_13;
  }
  v6 = *a1;
  v7 = *a2;
  v8 = (const void **)(*a2 + 16);
  v23 = *(_DWORD *)(v7 + 24);
  if (v23 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v8);
    v9 = v7 - 16;
    v10 = *(_QWORD *)(v7 - 16);
    if ((v10 & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v11 = (uint64_t *)(v9 - 8 * ((v10 >> 2) & 0xF));
    goto LABEL_8;
  }
  __p = (void *)*v8;
  v9 = v7 - 16;
  v10 = *(_QWORD *)(v7 - 16);
  if ((v10 & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v11 = *(uint64_t **)(v7 - 32);
LABEL_8:
  v24 = *v11;
  v25 = *(_DWORD *)(v7 + 4) != 0;
  v14 = llvm::hash_combine<llvm::APInt,llvm::MDString *>((llvm *)&__p, (const llvm::APInt *)&v24);
  if (v23 >= 0x41 && __p)
    operator delete[](__p);
  v15 = v4 - 1;
  v16 = (v4 - 1) & v14;
  v12 = (_QWORD *)(v6 + 8 * v16);
  v17 = *v12;
  if (*a2 == *v12)
  {
    result = 1;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    result = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v12;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      v12 = (_QWORD *)(v6 + 8 * (v21 & v15));
      v17 = *v12;
      if (*a2 == *v12)
        goto LABEL_13;
    }
    result = 0;
    if (v18)
      v12 = v18;
  }
LABEL_13:
  *a3 = v12;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = v4;
      do
      {
        if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, v20, &v28);
          *v28 = *(_QWORD *)v20;
          ++*(_DWORD *)(a1 + 8);
        }
        v20 = (llvm *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 24), (int *)(a2 + 28));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_13;
  while (v13 != -4096)
  {
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v13 + 2))
    {
      v14 = *(_QWORD *)(v13 - 16);
      if ((v14 & 2) != 0)
      {
        if (v10 != *(_QWORD *)(*(_QWORD *)(v13 - 32) + 16))
          goto LABEL_13;
      }
      else if (v10 != *(_QWORD *)(v13 - 8 * ((v14 >> 2) & 0xF)))
      {
        goto LABEL_13;
      }
      if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(v13 + 24)
        && *(_DWORD *)(a2 + 24) == *(_DWORD *)(v13 + 4)
        && *(_DWORD *)(a2 + 28) == *(_DWORD *)(v13 + 40)
        && *(_DWORD *)(a2 + 32) == *(_DWORD *)(v13 + 20))
      {
        result = 1;
        *a3 = v12;
        return result;
      }
    }
    do
    {
LABEL_13:
      if (v8)
        v15 = 0;
      else
        v15 = v13 == -8192;
      if (v15)
        v8 = v12;
      v16 = v9 + v11++;
      v9 = v16 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4, int *a5)
{
  unsigned __int8 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[4];
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  if ((v8 & 1) == 0)
  {
    v16 = a2;
    v17 = a1;
    a2 = v16;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      a2 = v16;
      a1 = v17;
    }
  }
  v25 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v22[0]) = *a1;
  v18 = 0;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v18, (_OWORD *)((char *)v22 + 4), (unint64_t)v23, *a2);
  v19 = v18;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v19, v9, (unint64_t)v23, *a3);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v22, (uint64_t *)&v20, v10, (unint64_t)v23, *a4);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v22, (uint64_t *)&v21, v11, (unint64_t)v23, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v22, v21, v12, (char *)v23);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27[3];

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v23 = *(unsigned __int16 *)(*a2 + 2);
    v9 = *(_QWORD *)(v8 - 16);
    if ((v9 & 2) != 0)
      v10 = *(_QWORD *)(v8 - 32);
    else
      v10 = v8 - 16 - 8 * ((v9 >> 2) & 0xF);
    v14 = *(_QWORD *)(v8 + 24);
    v24 = *(_QWORD *)(v10 + 16);
    v25 = v14;
    v15 = *(_DWORD *)(v8 + 40);
    v26 = *(_DWORD *)(v8 + 4);
    v27[0] = v15;
    v27[1] = *(_DWORD *)(v8 + 20);
    v16 = (v6 - 1) & llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>(&v23, &v24, &v25, &v26, v27);
    result = (char *)(v7 + 8 * v16);
    v17 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v19 = 0;
    v20 = 1;
    while (v17 != -4096)
    {
      v13 = 0;
      if (v19)
        v21 = 0;
      else
        v21 = v17 == -8192;
      if (v21)
        v19 = result;
      v22 = v16 + v20++;
      v16 = v22 & (v6 - 1);
      result = (char *)(v7 + 8 * v16);
      v17 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v19)
      v11 = v19;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucket<llvm::DIBasicType * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v18 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucket<llvm::DIBasicType * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39[3];

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v35 = *(unsigned __int16 *)(*a3 + 2);
  v25 = *(_QWORD *)(v24 - 16);
  if ((v25 & 2) != 0)
    v26 = *(_QWORD *)(v24 - 32);
  else
    v26 = v24 - 16 - 8 * ((v25 >> 2) & 0xF);
  v27 = *(_QWORD *)(v24 + 24);
  v36 = *(_QWORD *)(v26 + 16);
  v37 = v27;
  v28 = *(_DWORD *)(v24 + 40);
  v38 = *(_DWORD *)(v24 + 4);
  v39[0] = v28;
  v39[1] = *(_DWORD *)(v24 + 20);
  v29 = (v17 - 1) & llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>(&v35, &v36, &v37, &v38, v39);
  v7 = *a3;
  a2 = &v16->i8[8 * v29];
  v30 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v31 = 0;
    v32 = 1;
    while (v30 != -4096)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == -8192;
      if (v33)
        v31 = a2;
      v34 = v29 + v32++;
      v29 = v34 & (v17 - 1);
      a2 = &v16->i8[8 * v29];
      v30 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v31)
      a2 = v31;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34[3];

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v22 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v23 = *(_QWORD *)v5;
        v24 = *(_DWORD *)(v5 + 16);
        v30 = *(unsigned __int16 *)(v22 + 2);
        v25 = *(_QWORD *)(v22 - 16);
        if ((v25 & 2) != 0)
          v15 = *(_QWORD *)(v22 - 32);
        else
          v15 = v22 - 16 - 8 * ((v25 >> 2) & 0xF);
        v16 = *(_QWORD *)(v22 + 24);
        v31 = *(_QWORD *)(v15 + 16);
        v32 = v16;
        LODWORD(v16) = *(_DWORD *)(v22 + 40);
        v33 = *(_DWORD *)(v22 + 4);
        v34[0] = v16;
        v34[1] = *(_DWORD *)(v22 + 20);
        result = llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>(&v30, &v31, &v32, &v33, v34);
        v17 = v24 - 1;
        v18 = (v24 - 1) & result;
        v19 = *v4;
        v20 = (_QWORD *)(v23 + 8 * v18);
        v21 = *v20;
        if (*v4 != *v20)
        {
          v26 = 0;
          v27 = 1;
          while (v21 != -4096)
          {
            if (v26)
              v28 = 0;
            else
              v28 = v21 == -8192;
            if (v28)
              v26 = v20;
            v29 = v18 + v27++;
            v18 = v29 & v17;
            v20 = (_QWORD *)(v23 + 8 * (v29 & v17));
            v21 = *v20;
            if (v19 == *v20)
              goto LABEL_12;
          }
          if (v26)
            v20 = v26;
        }
LABEL_12:
        *v20 = v19;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 52));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_15;
  while (v13 != -4096)
  {
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v13 + 2))
    {
      v14 = *(_QWORD *)(v13 - 16);
      if ((v14 & 2) != 0)
      {
        v15 = *(_QWORD **)(v13 - 32);
        if (v10 != v15[2])
          goto LABEL_15;
      }
      else
      {
        v15 = (_QWORD *)(v13 - 16 - 8 * ((v14 >> 2) & 0xF));
        if (v10 != *(_QWORD *)(v13 - 8 * ((v14 >> 2) & 0xF)))
          goto LABEL_15;
      }
      if (*(_QWORD *)(a2 + 16) == v15[3]
        && *(_QWORD *)(a2 + 24) == v15[4]
        && *(_QWORD *)(a2 + 32) == v15[5]
        && *(_QWORD *)(a2 + 40) == *(_QWORD *)(v13 + 24)
        && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v13 + 4)
        && *(_DWORD *)(a2 + 52) == *(_DWORD *)(v13 + 40))
      {
        result = 1;
        *a3 = v12;
        return result;
      }
    }
    do
    {
LABEL_15:
      if (v8)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v8 = v12;
      v17 = v9 + v11++;
      v9 = v17 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4)
{
  unsigned __int8 v6;
  char *v7;
  char *v8;
  char *v9;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[4];
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  if ((v6 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    a2 = v13;
    a1 = v14;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a2 = v13;
      a1 = v14;
    }
  }
  v21 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v18[0]) = *a1;
  v15 = 0;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v15, (_OWORD *)((char *)v18 + 4), (unint64_t)v19, *a2);
  v16 = v15;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v16, v7, (unint64_t)v19, *a3);
  v17 = v16;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v18, (uint64_t *)&v17, v8, (unint64_t)v19, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v18, v17, v9, (char *)v19);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  _OWORD v22[2];
  uint64_t v23;
  int v24;
  int v25;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v21 = *(unsigned __int16 *)(*a2 + 2);
    v8 = *(_QWORD *)(v7 - 16);
    if ((v8 & 2) != 0)
      v9 = *(_QWORD *)(v7 - 32);
    else
      v9 = v7 - 16 - 8 * ((v8 >> 2) & 0xF);
    v12 = *(_OWORD *)(v9 + 32);
    v22[0] = *(_OWORD *)(v9 + 16);
    v22[1] = v12;
    v23 = *(_QWORD *)(v7 + 24);
    v24 = *(_DWORD *)(v7 + 4);
    v25 = *(_DWORD *)(v7 + 40);
    v13 = llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(&v21, (uint64_t *)v22, (uint64_t *)v22 + 1, &v25);
    v14 = v4 - 1;
    v15 = (v4 - 1) & v13;
    v10 = (_QWORD *)(v6 + 8 * v15);
    v16 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
      *a3 = v10;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v10;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        v10 = (_QWORD *)(v6 + 8 * (v20 & v14));
        v16 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v17)
        v10 = v17;
      *a3 = v10;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
LABEL_5:
    *a3 = v10;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = 1;
    v10 = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(a2) & (v4 - 1);
    v11 = (uint64_t *)(v6 + 8 * v10);
    v12 = *v11;
    if ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_29;
    while (1)
    {
      v15 = *(_BYTE **)(a2 + 32);
      v16 = *(_QWORD *)(a2 + 8);
      if (v15)
        v17 = *(_DWORD *)a2 == 13;
      else
        v17 = 0;
      v18 = !v17 || v16 == 0;
      if (!v18
        && *v15 == 14
        && ((v19 = *((_QWORD *)v15 - 2), (v19 & 2) != 0)
          ? (v20 = *((_QWORD *)v15 - 4))
          : (v20 = (uint64_t)&v15[-8 * ((v19 >> 2) & 0xF) - 16]),
            *(_QWORD *)(v20 + 56)
         && *(_WORD *)(v12 + 2) == 13
         && ((v21 = *(_QWORD *)(v12 - 16), (v21 & 2) != 0)
           ? (v22 = *(_QWORD *)(v12 - 32))
           : (v22 = v12 - 16 - 8 * ((v21 >> 2) & 0xF)),
             *(_QWORD *)(v22 + 16) == v16 && *(_BYTE **)(v22 + 8) == v15))
        || llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a2, v12))
      {
        result = 1;
        goto LABEL_34;
      }
      v12 = *v11;
      if (*v11 == -4096)
        break;
      while (1)
      {
        if (v12 == -8192 && v7 == 0)
          v7 = v11;
        v14 = v10 + v9++;
        v10 = v14 & v8;
        v11 = (uint64_t *)(v6 + 8 * (v14 & v8));
        v12 = *v11;
        if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_29:
        if (v12 == -4096)
          goto LABEL_30;
      }
    }
LABEL_30:
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_34:
  *a3 = v11;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  int *v11;
  uint64_t *v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int *v22;
  int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 == 13)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v1 = *(_BYTE **)(a1 + 32);
      if (v1)
      {
        if (*v1 == 14)
        {
          v2 = *((_QWORD *)v1 - 2);
          if ((v2 & 2) != 0)
          {
            if (*(_QWORD *)(*((_QWORD *)v1 - 4) + 56))
            {
LABEL_7:
              v34 = 0;
              v32 = 0u;
              v33 = 0u;
              v30 = 0u;
              v31 = 0u;
              v28 = 0u;
              v29 = 0u;
              v27 = 0u;
              if ((v3 & 1) == 0)
              {
                v26 = a1;
                a1 = v26;
                if (v17)
                {
                  v18 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v18 = 0xFF51AFD7ED558CCDLL;
                  llvm::hashing::detail::get_execution_seed(void)::seed = v18;
                  a1 = v26;
                }
              }
              v35 = llvm::hashing::detail::get_execution_seed(void)::seed;
              v4 = *(_QWORD *)(a1 + 32);
              *(_QWORD *)&v27 = *(_QWORD *)(a1 + 8);
              *((_QWORD *)&v27 + 1) = v4;
              return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v27, 0, (char *)&v28, (char *)&v31);
            }
          }
          else if (*(_QWORD *)&v1[-8 * ((v2 >> 2) & 0xF) + 40])
          {
            goto LABEL_7;
          }
        }
      }
    }
  }
  v6 = (uint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 16);
  v8 = (int *)(a1 + 24);
  v9 = (uint64_t *)(a1 + 32);
  v10 = (uint64_t *)(a1 + 40);
  v11 = (int *)(a1 + 84);
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v24 = (uint64_t *)(a1 + 40);
    v25 = a1;
    v20 = (uint64_t *)(a1 + 16);
    v21 = (uint64_t *)(a1 + 8);
    v22 = (int *)(a1 + 84);
    v23 = (int *)(a1 + 24);
    v19 = (uint64_t *)(a1 + 32);
    v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v11 = v22;
    v8 = v23;
    v9 = v19;
    v7 = v20;
    v6 = v21;
    v15 = v14;
    v10 = v24;
    a1 = v25;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v11 = v22;
      v8 = v23;
      v10 = v24;
      a1 = v25;
      v9 = v19;
      v7 = v20;
      v6 = v21;
    }
  }
  v35 = v12[19];
  LODWORD(v27) = *(_DWORD *)a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v27, 0, (__int128 *)((char *)&v27 + 4), (char *)&v31, v6, v7, v8, v9, v10, v11);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, int *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int16 *)(a2 + 2);
  if (*(_DWORD *)a1 != v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 - 16;
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
  {
    if (v3 != *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16))
      return 0;
  }
  else if (v3 != *(_QWORD *)(a2 - 8 * ((v5 >> 2) & 0xF)))
  {
    return 0;
  }
  v6 = a2;
  if (*(_BYTE *)a2 != 16)
  {
    if ((v5 & 2) != 0)
      v7 = *(uint64_t **)(a2 - 32);
    else
      v7 = (uint64_t *)(v4 - 8 * ((v5 >> 2) & 0xF));
    v6 = *v7;
  }
  if (*(_QWORD *)(a1 + 16) != v6 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16))
    return 0;
  v8 = *(_QWORD *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 - 32);
    if (v8 != *(_QWORD *)(v9 + 8))
      return 0;
  }
  else
  {
    v9 = v4 - 8 * ((v5 >> 2) & 0xF);
    if (v8 != *(_QWORD *)(v9 + 8))
      return 0;
  }
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(v9 + 24))
    return 0;
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 24))
    return 0;
  v10 = *(_DWORD *)(a1 + 64);
  if (v10 != *(_DWORD *)(a2 + 4) || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 32))
    return 0;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFF00000000;
  if (*(_BYTE *)(a1 + 72) && v12)
  {
    if (*(_DWORD *)(a1 + 68) != (_DWORD)v11)
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 72) != 0) != (v12 != 0))
  {
    return 0;
  }
  if (v2 == 17152 && *(_BYTE *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 76) != v10)
      return 0;
  }
  else if ((v2 == 17152) != (*(_BYTE *)(a1 + 80) != 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 20))
  {
    v13 = *(_QWORD *)(a1 + 88);
    if ((v5 & 2) != 0)
    {
      v14 = *(_QWORD *)(a2 - 32);
      if (v13 == *(_QWORD *)(v14 + 32))
        return *(_QWORD *)(a1 + 96) == *(_QWORD *)(v14 + 40);
    }
    else
    {
      v14 = v4 - 8 * ((v5 >> 2) & 0xF);
      if (v13 == *(_QWORD *)(v14 + 32))
        return *(_QWORD *)(a1 + 96) == *(_QWORD *)(v14 + 40);
    }
  }
  return 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  _BYTE *v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[104];

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl((uint64_t)v28, *a2);
  HashValue = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue((uint64_t)v28);
  v8 = v4 - 1;
  v9 = *a2;
  v10 = HashValue & (v4 - 1);
  v11 = (_QWORD *)(v6 + 8 * v10);
  v12 = *v11;
  if (*a2 != *v11)
  {
    v14 = 0;
    v15 = 1;
    while (1)
    {
      if (v12 == -8192)
      {
        v18 = 1;
      }
      else
      {
        if (v12 == -4096)
        {
          result = 0;
          if (v14)
            v11 = v14;
          *a3 = v11;
          return result;
        }
        v16 = *(_QWORD *)(v9 - 16);
        if ((v16 & 2) != 0)
          v17 = *(_QWORD *)(v9 - 32);
        else
          v17 = v9 - 16 - 8 * ((v16 >> 2) & 0xF);
        v20 = *(_BYTE **)(v17 + 8);
        v21 = *(_QWORD *)(v17 + 16);
        if (v20)
          v22 = *(unsigned __int16 *)(v9 + 2) == 13;
        else
          v22 = 0;
        v23 = !v22 || v21 == 0;
        if (!v23 && *v20 == 14)
        {
          v24 = *((_QWORD *)v20 - 2);
          v25 = (v24 & 2) != 0 ? (_BYTE *)*((_QWORD *)v20 - 4) : &v20[-8 * ((v24 >> 2) & 0xF) - 16];
          if (*((_QWORD *)v25 + 7) && *(_WORD *)(v12 + 2) == 13)
          {
            v26 = *(_QWORD *)(v12 - 16);
            v27 = (v26 & 2) != 0 ? *(_QWORD *)(v12 - 32) : v12 - 16 - 8 * ((v26 >> 2) & 0xF);
            if (*(_QWORD *)(v27 + 16) == v21 && *(_BYTE **)(v27 + 8) == v20)
            {
              result = 1;
              *a3 = v11;
              return result;
            }
          }
        }
        v18 = 0;
      }
      if ((v18 & (v14 == 0)) != 0)
        v14 = v11;
      v19 = v10 + v15++;
      v10 = v19 & v8;
      v11 = (_QWORD *)(v6 + 8 * (v19 & v8));
      v12 = *v11;
      result = 1;
      if (v9 == *v11)
        goto LABEL_4;
    }
  }
  result = 1;
LABEL_4:
  *a3 = v11;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (unint64_t *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16);
    v4 = a2;
    if (*(_BYTE *)a2 == 16)
    {
LABEL_3:
      *(_QWORD *)(result + 16) = v4;
      *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
      v5 = *(_QWORD *)(a2 - 16);
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_11:
      *(_QWORD *)(result + 32) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
      v6 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 - 8 * ((v3 >> 2) & 0xF));
    v4 = a2;
    if (*(_BYTE *)a2 == 16)
      goto LABEL_3;
  }
  if ((*v2 & 2) != 0)
    v8 = *(unint64_t **)(a2 - 32);
  else
    v8 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 16) = *v8;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_4:
  *(_QWORD *)(result + 32) = v2[-((v5 >> 2) & 0xF) + 1];
  v6 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_5:
    v7 = *(unint64_t **)(a2 - 32);
    goto LABEL_13;
  }
LABEL_12:
  v7 = &v2[-((v6 >> 2) & 0xF)];
LABEL_13:
  *(_QWORD *)(result + 40) = v7[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(result + 68) = *(_QWORD *)(a2 + 40);
  if (*(_WORD *)(a2 + 2) == 17152)
  {
    *(_QWORD *)(result + 76) = *(unsigned int *)(a2 + 4) | 0x100000000;
    *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 20);
    v9 = *(_QWORD *)(a2 - 16);
    if ((v9 & 2) != 0)
      goto LABEL_15;
LABEL_18:
    *(_QWORD *)(result + 88) = v2[-((v9 >> 2) & 0xF) + 4];
    v10 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_16;
    goto LABEL_19;
  }
  *(_QWORD *)(result + 76) = 0;
  *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 20);
  v9 = *(_QWORD *)(a2 - 16);
  if ((v9 & 2) == 0)
    goto LABEL_18;
LABEL_15:
  *(_QWORD *)(result + 88) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 32);
  v10 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_16:
    *(_QWORD *)(result + 96) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 40);
    return result;
  }
LABEL_19:
  *(_QWORD *)(result + 96) = v2[-((v10 >> 2) & 0xF) + 5];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;
  unint64_t v17;
  __int128 v18;
  _OWORD v19[3];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    v18 = 0u;
    if ((v7 & 1) == 0
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
    }
    v22 = llvm::hashing::detail::get_execution_seed(void)::seed;
    v18 = *(_OWORD *)(a2 + 8);
    v8 = 0;
    v9 = v4 - 1;
    v10 = v9 & llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v18, 0, v19, (char *)v20, (int *)(a2 + 24), (uint64_t *)(a2 + 40), (uint64_t *)(a2 + 32), (uint64_t *)(a2 + 72), (uint64_t *)(a2 + 96), (uint64_t *)(a2 + 152));
    v11 = 1;
    v12 = (uint64_t *)(v6 + 8 * v10);
    v13 = *v12;
    if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_11;
    while (v13 != -4096)
    {
      while (1)
      {
        if (v8)
          v14 = 0;
        else
          v14 = v13 == -8192;
        if (v14)
          v8 = v12;
        v15 = v10 + v11++;
        v10 = v15 & v9;
        v12 = (uint64_t *)(v6 + 8 * (v15 & v9));
        v13 = *v12;
        if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_11:
        if (llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
        if (*v12 == -4096)
          goto LABEL_13;
      }
    }
LABEL_13:
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
  {
    if (v2 != *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16))
      return 0;
  }
  else if (v2 != *(_QWORD *)(a2 - 8 * ((v4 >> 2) & 0xF)))
  {
    return 0;
  }
  v5 = a2;
  if (*(_BYTE *)a2 != 16)
  {
    if ((v4 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v3 - 8 * ((v4 >> 2) & 0xF));
    v5 = *v6;
  }
  if (*(_QWORD *)(a1 + 16) != v5 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16))
    return 0;
  v7 = *(_QWORD *)(a1 + 32);
  if ((v4 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 - 32);
    if (v7 != *(_QWORD *)(v8 + 8))
      return 0;
  }
  else
  {
    v8 = v3 - 8 * ((v4 >> 2) & 0xF);
    if (v7 != *(_QWORD *)(v8 + 8))
      return 0;
  }
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(v8 + 24)
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 4)
    || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  v9 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(v9 + 32) || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 40))
    return 0;
  v10 = *(_QWORD *)(a1 + 88);
  if ((v4 & 2) == 0)
  {
    v11 = (_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF));
    if (v10 == v11[5])
      goto LABEL_31;
    return 0;
  }
  v11 = *(_QWORD **)(a2 - 32);
  if (v10 != v11[5])
    return 0;
LABEL_31:
  if (*(_QWORD *)(a1 + 96) != v11[6]
    || *(_QWORD *)(a1 + 104) != v11[7]
    || *(_QWORD *)(a1 + 112) != v11[8]
    || *(_QWORD *)(a1 + 120) != v11[9]
    || *(_QWORD *)(a1 + 128) != v11[10]
    || *(_QWORD *)(a1 + 136) != v11[11]
    || *(_QWORD *)(a1 + 144) != v11[12])
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 152) == v11[13];
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucket<llvm::DICompositeType * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int HashValue;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  HashValue = llvm::MDNodeInfo<llvm::DICompositeType>::getHashValue(*a3);
  v13 = v11 - 1;
  v8 = *a3;
  v14 = HashValue & (v11 - 1);
  a2 = (uint64_t *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::MDNodeInfo<llvm::DICompositeType>::getHashValue(uint64_t a1)
{
  uint64_t *v1;
  unsigned __int8 v2;
  int v4;
  unint64_t v5;
  _BYTE v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10[4];
  uint64_t v11[3];
  uint64_t v12[7];
  uint64_t v13;
  __int128 v14;
  _OWORD v15[3];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl((uint64_t)v6, a1);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v14 = 0u;
  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v2 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v4)
    {
      v5 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v5 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v5;
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v18 = v1[19];
  v14 = v7;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v14, 0, v15, (char *)v16, &v8, v10, &v9, v11, v12, &v13);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (unint64_t *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16);
    v4 = a2;
    if (*(_BYTE *)a2 == 16)
    {
LABEL_3:
      *(_QWORD *)(result + 16) = v4;
      *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
      v5 = *(_QWORD *)(a2 - 16);
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_11:
      *(_QWORD *)(result + 32) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
      v6 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)(result + 8) = *(_QWORD *)(a2 - 8 * ((v3 >> 2) & 0xF));
    v4 = a2;
    if (*(_BYTE *)a2 == 16)
      goto LABEL_3;
  }
  if ((*v2 & 2) != 0)
    v8 = *(unint64_t **)(a2 - 32);
  else
    v8 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 16) = *v8;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_4:
  *(_QWORD *)(result + 32) = v2[-((v5 >> 2) & 0xF) + 1];
  v6 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_5:
    v7 = *(unint64_t **)(a2 - 32);
    goto LABEL_13;
  }
LABEL_12:
  v7 = &v2[-((v6 >> 2) & 0xF)];
LABEL_13:
  *(_QWORD *)(result + 40) = v7[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 68) = v9;
  v10 = *(_QWORD *)(a2 - 16);
  if ((v10 & 2) != 0)
  {
    *(_QWORD *)(result + 72) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 32);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 - 16);
    if ((v11 & 2) != 0)
    {
LABEL_15:
      *(_QWORD *)(result + 88) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 40);
      v12 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  else
  {
    *(_QWORD *)(result + 72) = v2[-((v10 >> 2) & 0xF) + 4];
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 - 16);
    if ((v11 & 2) != 0)
      goto LABEL_15;
  }
  *(_QWORD *)(result + 88) = v2[-((v11 >> 2) & 0xF) + 5];
  v12 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_16:
    *(_QWORD *)(result + 96) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 48);
    v13 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)(result + 96) = v2[-((v12 >> 2) & 0xF) + 6];
  v13 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_17:
    *(_QWORD *)(result + 104) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 56);
    v14 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  *(_QWORD *)(result + 104) = v2[-((v13 >> 2) & 0xF) + 7];
  v14 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_18:
    *(_QWORD *)(result + 112) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 64);
    v15 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  *(_QWORD *)(result + 112) = v2[-((v14 >> 2) & 0xF) + 8];
  v15 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_19:
    *(_QWORD *)(result + 120) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 72);
    v16 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  *(_QWORD *)(result + 120) = v2[-((v15 >> 2) & 0xF) + 9];
  v16 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_20:
    *(_QWORD *)(result + 128) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 80);
    v17 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_21;
    goto LABEL_31;
  }
LABEL_30:
  *(_QWORD *)(result + 128) = v2[-((v16 >> 2) & 0xF) + 10];
  v17 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_21:
    *(_QWORD *)(result + 136) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 88);
    v18 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_22;
LABEL_32:
    *(_QWORD *)(result + 144) = v2[-((v18 >> 2) & 0xF) + 12];
    v19 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_23;
    goto LABEL_33;
  }
LABEL_31:
  *(_QWORD *)(result + 136) = v2[-((v17 >> 2) & 0xF) + 11];
  v18 = *v2;
  if ((*v2 & 2) == 0)
    goto LABEL_32;
LABEL_22:
  *(_QWORD *)(result + 144) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 96);
  v19 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_23:
    *(_QWORD *)(result + 152) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 104);
    return result;
  }
LABEL_33:
  *(_QWORD *)(result + 152) = v2[-((v19 >> 2) & 0xF) + 13];
  return result;
}

int64x2_t *llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MDNodeInfo<llvm::DICompositeType>::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

unint64_t llvm::hash_combine<unsigned int,unsigned char,llvm::Metadata *>(_DWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 v4;
  char *v5;
  char *v6;
  int v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if ((v4 & 1) == 0)
  {
    v10 = a2;
    v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v14[0]) = *a1;
  v12 = 0;
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v14, (uint64_t *)&v12, (_BYTE *)v14 + 4, (unint64_t)v15, *a2);
  v13 = v12;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  char v22[4];
  uint64_t v23;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v21 = *(_DWORD *)(*a2 + 20);
    v22[0] = *(_BYTE *)(v8 + 40);
    v9 = *(_QWORD *)(v8 - 16);
    if ((v9 & 2) != 0)
      v10 = *(_QWORD *)(v8 - 32);
    else
      v10 = v8 - 16 - 8 * ((v9 >> 2) & 0xF);
    v23 = *(_QWORD *)(v10 + 24);
    v14 = (v6 - 1) & llvm::hash_combine<unsigned int,unsigned char,llvm::Metadata *>(&v21, v22, &v23);
    result = (char *)(v7 + 8 * v14);
    v15 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v17 = 0;
    v18 = 1;
    while (v15 != -4096)
    {
      v13 = 0;
      if (v17)
        v19 = 0;
      else
        v19 = v15 == -8192;
      if (v19)
        v17 = result;
      v20 = v14 + v18++;
      v14 = v20 & (v6 - 1);
      result = (char *)(v7 + 8 * v14);
      v15 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v17)
      v11 = v17;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucket<llvm::DISubroutineType * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v16 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucket<llvm::DISubroutineType * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  char v34[4];
  uint64_t v35;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v33 = *(_DWORD *)(*a3 + 20);
  v34[0] = *(_BYTE *)(v24 + 40);
  v25 = *(_QWORD *)(v24 - 16);
  if ((v25 & 2) != 0)
    v26 = *(_QWORD *)(v24 - 32);
  else
    v26 = v24 - 16 - 8 * ((v25 >> 2) & 0xF);
  v35 = *(_QWORD *)(v26 + 24);
  v27 = (v17 - 1) & llvm::hash_combine<unsigned int,unsigned char,llvm::Metadata *>(&v33, v34, &v35);
  v7 = *a3;
  a2 = &v16->i8[8 * v27];
  v28 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & (v17 - 1);
      a2 = &v16->i8[8 * v27];
      v28 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  char v30[4];
  uint64_t v31;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v21 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v22 = *(_QWORD *)v5;
        v23 = *(_DWORD *)(v5 + 16);
        v29 = *(_DWORD *)(v21 + 20);
        v30[0] = *(_BYTE *)(v21 + 40);
        v24 = *(_QWORD *)(v21 - 16);
        if ((v24 & 2) != 0)
          v15 = *(_QWORD *)(v21 - 32);
        else
          v15 = v21 - 16 - 8 * ((v24 >> 2) & 0xF);
        v31 = *(_QWORD *)(v15 + 24);
        result = llvm::hash_combine<unsigned int,unsigned char,llvm::Metadata *>(&v29, v30, &v31);
        v16 = v23 - 1;
        v17 = (v23 - 1) & result;
        v18 = *v4;
        v19 = (_QWORD *)(v22 + 8 * v17);
        v20 = *v19;
        if (*v4 != *v19)
        {
          v25 = 0;
          v26 = 1;
          while (v20 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v20 == -8192;
            if (v27)
              v25 = v19;
            v28 = v17 + v26++;
            v17 = v28 & v16;
            v19 = (_QWORD *)(v22 + 8 * (v28 & v16));
            v20 = *v19;
            if (v18 == *v19)
              goto LABEL_12;
          }
          if (v25)
            v19 = v25;
        }
LABEL_12:
        *v19 = v18;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  BOOL v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  int v32;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  if (*((_BYTE *)a2 + 32))
  {
    v6 = *((_DWORD *)a2 + 4);
    v7 = a2[3];
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v9 = *a1;
  v32 = v6;
  v31 = v7;
  v10 = llvm::hash_combine<llvm::MDString *,llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(a2, a2 + 1, &v32, &v31, a2 + 5);
  v11 = v4 - 1;
  v12 = (v4 - 1) & v10;
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[5];
  if (*((_BYTE *)a2 + 32))
  {
    v16 = 0;
    v17 = 1;
    v18 = (_QWORD *)(v9 + 8 * v12);
    v19 = *v18;
    if (*v18 == -8192)
      goto LABEL_14;
    while (1)
    {
      if (v19 == -4096)
        goto LABEL_46;
      v20 = *(_QWORD *)(v19 - 16);
      if ((v20 & 2) != 0)
      {
        v21 = *(_QWORD **)(v19 - 32);
        if (v13 != *v21)
          goto LABEL_14;
      }
      else
      {
        v21 = (_QWORD *)(v19 - 16 - 8 * ((v20 >> 2) & 0xF));
        if (v13 != *v21)
          goto LABEL_14;
      }
      if (v14 == v21[1] && *(_BYTE *)(v19 + 32))
      {
        v24 = *((_DWORD *)a2 + 4) == *(_DWORD *)(v19 + 16) && a2[3] == *(_QWORD *)(v19 + 24);
        if (v24 && v15 == *(_QWORD *)(v19 + 40))
          goto LABEL_45;
      }
      do
      {
LABEL_14:
        if (v16)
          v22 = 0;
        else
          v22 = v19 == -8192;
        if (v22)
          v16 = v18;
        v23 = v12 + v17++;
        v12 = v23 & v11;
        v18 = (_QWORD *)(v9 + 8 * v12);
        v19 = *v18;
      }
      while (*v18 == -8192);
    }
  }
  v16 = 0;
  v25 = 1;
  v18 = (_QWORD *)(v9 + 8 * v12);
  v26 = *v18;
  if (*v18 == -8192)
    goto LABEL_37;
  while (v26 != -4096)
  {
    v27 = *(_QWORD *)(v26 - 16);
    if ((v27 & 2) != 0)
    {
      v28 = *(_QWORD **)(v26 - 32);
      if (v13 != *v28)
        goto LABEL_37;
    }
    else
    {
      v28 = (_QWORD *)(v26 - 16 - 8 * ((v27 >> 2) & 0xF));
      if (v13 != *v28)
        goto LABEL_37;
    }
    if (v14 == v28[1] && !*(_BYTE *)(v26 + 32) && v15 == *(_QWORD *)(v26 + 40))
    {
LABEL_45:
      result = 1;
      *a3 = v18;
      return result;
    }
    do
    {
LABEL_37:
      if (v16)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v16 = v18;
      v30 = v12 + v25++;
      v12 = v30 & v11;
      v18 = (_QWORD *)(v9 + 8 * v12);
      v26 = *v18;
    }
    while (*v18 == -8192);
  }
LABEL_46:
  result = 0;
  if (v16)
    v18 = v16;
  *a3 = v18;
  return result;
}

unint64_t llvm::hash_combine<llvm::MDString *,llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(_QWORD *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD v23[4];
  _OWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  if ((v8 & 1) == 0)
  {
    v17 = a2;
    v18 = a1;
    a2 = v17;
    a1 = v18;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      a2 = v17;
      a1 = v18;
    }
  }
  v9 = *a1;
  v26 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v23[0] = v9;
  v19 = 0;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v19, (_QWORD *)v23 + 1, (unint64_t)v24, *a2);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v23, (uint64_t *)&v20, v10, (unint64_t)v24, *a3);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v21, v11, (unint64_t)v24, *a4);
  v22 = v21;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v22, v12, (unint64_t)v24, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v23, v22, v13, (char *)v24);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a2;
    v7 = *(_QWORD *)(*a2 - 16);
    if ((v7 & 2) != 0)
      v8 = *(__int128 **)(v6 - 32);
    else
      v8 = (__int128 *)(*a2 - 16 - 8 * ((v7 >> 2) & 0xF));
    v11 = *a1;
    v12 = *v8;
    v13 = *(_OWORD *)(v6 + 16);
    v15 = *(_QWORD *)(v6 + 32);
    v14 = *(_QWORD *)(v6 + 40);
    v26 = v12;
    v27 = v13;
    v28 = v15;
    v29 = v14;
    if ((_BYTE)v15)
    {
      v16 = v27;
      v17 = *((_QWORD *)&v27 + 1);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v31 = v16;
    v30 = v17;
    v18 = llvm::hash_combine<llvm::MDString *,llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(&v26, (uint64_t *)&v26 + 1, &v31, &v30, &v29);
    v19 = v4 - 1;
    v20 = (v4 - 1) & v18;
    v9 = (_QWORD *)(v11 + 8 * v20);
    v21 = *v9;
    if (*a2 == *v9)
    {
      result = 1;
      *a3 = v9;
    }
    else
    {
      v22 = 0;
      v23 = 1;
      result = 1;
      while (v21 != -4096)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v21 == -8192;
        if (v24)
          v22 = v9;
        v25 = v20 + v23++;
        v20 = v25 & v19;
        v9 = (_QWORD *)(v11 + 8 * (v25 & v19));
        v21 = *v9;
        if (*a2 == *v9)
          goto LABEL_5;
      }
      result = 0;
      if (v22)
        v9 = v22;
      *a3 = v9;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
LABEL_5:
    *a3 = v9;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue(uint64_t a1)
{
  uint64_t *v1;
  _BYTE *v2;
  unint64_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[3];
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (uint64_t *)a1;
  v16 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    return llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  if (!*(_QWORD *)(a1 + 16))
    return llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  v2 = *(_BYTE **)a1;
  if (!*(_QWORD *)a1 || *v2 != 14)
    return llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  v3 = *((_QWORD *)v2 - 2);
  if ((v3 & 2) == 0)
  {
    if (*(_QWORD *)&v2[-8 * ((v3 >> 2) & 0xF) + 40])
      goto LABEL_7;
    return llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  }
  if (!*(_QWORD *)(*((_QWORD *)v2 - 4) + 56))
    return llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
LABEL_7:
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  v11 = 0u;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v1 = (uint64_t *)a1;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v1 = (uint64_t *)a1;
    }
  }
  v15 = v4[19];
  v6 = *v1;
  *(_QWORD *)&v11 = v1[2];
  *((_QWORD *)&v11 + 1) = v6;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v11, 0, (char *)v12, (char *)v13);
}

unint64_t llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD v23[4];
  _OWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  if ((v8 & 1) == 0)
  {
    v17 = a2;
    v18 = a1;
    a2 = v17;
    a1 = v18;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      a2 = v17;
      a1 = v18;
    }
  }
  v9 = *a1;
  v26 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v23[0] = v9;
  v19 = 0;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v19, (_QWORD *)v23 + 1, (unint64_t)v24, *a2);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v20, v10, (unint64_t)v24, *a3);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v23, (uint64_t *)&v21, v11, (unint64_t)v24, *a4);
  v22 = v21;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v23, (uint64_t *)&v22, v12, (unint64_t)v24, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v23, v22, v13, (char *)v24);
}

BOOL llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *a1;
  v4 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    v5 = *(_QWORD **)(a2 - 32);
    if (v2 != v5[1])
      return 0;
  }
  else
  {
    v5 = (_QWORD *)(v4 - 8 * ((v3 >> 2) & 0xF));
    if (v2 != v5[1])
      return 0;
  }
  if (a1[1] != v5[2] || a1[2] != v5[3])
    return 0;
  v6 = a2;
  if (*(_BYTE *)a2 != 16)
  {
    if ((v3 & 2) != 0)
      v7 = *(uint64_t **)(a2 - 32);
    else
      v7 = (uint64_t *)(v4 - 8 * ((v3 >> 2) & 0xF));
    v6 = *v7;
  }
  if (a1[3] != v6 || *((_DWORD *)a1 + 8) != *(_DWORD *)(a2 + 16))
    return 0;
  v8 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v4 - 8 * ((v3 >> 2) & 0xF);
  if (a1[5] != *(_QWORD *)(v8 + 32) || *((_DWORD *)a1 + 12) != *(_DWORD *)(a2 + 20))
    return 0;
  if ((v3 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      v9 = *(_QWORD *)(a2 - 32);
      goto LABEL_24;
    }
LABEL_25:
    v10 = 0;
    goto LABEL_26;
  }
  if ((*(_QWORD *)(a2 - 16) & 0x3C0uLL) <= 0x200)
    goto LABEL_25;
  v9 = v4 - 8 * ((v3 >> 2) & 0xF);
LABEL_24:
  v10 = *(_QWORD *)(v9 + 64);
LABEL_26:
  if (a1[7] != v10
    || *((_DWORD *)a1 + 16) != *(_DWORD *)(a2 + 24)
    || *((_DWORD *)a1 + 17) != *(_DWORD *)(a2 + 28)
    || *((_DWORD *)a1 + 18) != *(_DWORD *)(a2 + 32)
    || *((_DWORD *)a1 + 19) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  v11 = a1[10];
  if ((v3 & 2) == 0)
  {
    v12 = (_QWORD *)(v4 - 8 * ((v3 >> 2) & 0xF));
    if (v11 == v12[5])
    {
      v13 = a1[11];
      if ((*(_QWORD *)(a2 - 16) & 0x380uLL) <= 0x240)
      {
        if (v13)
          return 0;
      }
      else if (v13 != v12[9])
      {
        return 0;
      }
      if (a1[12] != v12[6] || a1[13] != v12[7])
        return 0;
      v17 = a1[14];
      v18 = *(_QWORD *)(a2 - 16) & 0x3C0;
      if (v18 <= 0x280)
      {
        if (v17)
          return 0;
      }
      else if (v17 != v12[10])
      {
        return 0;
      }
      v22 = a1[15];
      if ((~(_WORD)v3 & 0x300) != 0)
      {
        if (!v22)
          goto LABEL_65;
      }
      else if (v22 == v12[11])
      {
LABEL_65:
        v21 = a1[16];
        if (v18 > 0x300)
          return v21 == v12[12];
        return v21 == 0;
      }
    }
    return 0;
  }
  v12 = *(_QWORD **)(a2 - 32);
  if (v11 != v12[5])
    return 0;
  v15 = a1[11];
  v16 = *(_DWORD *)(a2 - 24);
  if (v16 <= 9)
  {
    if (v15)
      return 0;
  }
  else if (v15 != v12[9])
  {
    return 0;
  }
  if (a1[12] != v12[6] || a1[13] != v12[7])
    return 0;
  v19 = a1[14];
  if (v16 <= 0xA)
  {
    if (v19)
      return 0;
    v20 = a1[15];
LABEL_62:
    if (!v20)
      return a1[16] == 0;
    return 0;
  }
  if (v19 != v12[10])
    return 0;
  v20 = a1[15];
  if (v16 <= 0xB)
    goto LABEL_62;
  if (v20 != v12[11])
    return 0;
  v21 = a1[16];
  if (v16 < 0xD)
    return v21 == 0;
  return v21 == v12[12];
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  BOOL v13;

  v2 = *(_QWORD *)(a1 - 16);
  if ((v2 & 2) == 0)
  {
    v3 = (_QWORD *)(a1 - 16 - 8 * ((v2 >> 2) & 0xF));
    v4 = (_BYTE *)v3[1];
    v5 = v3[3];
    if ((*(_QWORD *)(a1 - 16) & 0x380uLL) > 0x240)
      goto LABEL_3;
LABEL_21:
    v6 = 0;
    if (v5)
      v13 = v4 == 0;
    else
      v13 = 1;
    if (v13 || (*(_DWORD *)(a1 + 36) & 8) != 0)
      return 0;
    goto LABEL_11;
  }
  v3 = *(_QWORD **)(a1 - 32);
  v4 = (_BYTE *)v3[1];
  v5 = v3[3];
  if (*(_DWORD *)(a1 - 24) < 0xAu)
    goto LABEL_21;
LABEL_3:
  v6 = v3[9];
  if (v5)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7 || (*(_DWORD *)(a1 + 36) & 8) != 0)
    return 0;
LABEL_11:
  if (*v4 != 14)
    return 0;
  v9 = *((_QWORD *)v4 - 2);
  if ((v9 & 2) == 0)
  {
    if (*(_QWORD *)&v4[-8 * ((v9 >> 2) & 0xF) + 40])
      goto LABEL_14;
    return 0;
  }
  if (!*(_QWORD *)(*((_QWORD *)v4 - 4) + 56))
    return 0;
LABEL_14:
  if (((*(_DWORD *)(a1 + 36) ^ *(unsigned __int8 *)(a2 + 36)) & 8) != 0)
    return 0;
  v10 = *(_QWORD *)(a2 - 16);
  if ((v10 & 2) == 0)
  {
    v11 = (_QWORD *)(a2 - 16 - 8 * ((v10 >> 2) & 0xF));
    if ((_BYTE *)v11[1] == v4 && v11[3] == v5)
    {
      if ((*(_QWORD *)(a2 - 16) & 0x380uLL) <= 0x240)
        return v6 == 0;
      return v11[9] == v6;
    }
    return 0;
  }
  v11 = *(_QWORD **)(a2 - 32);
  if ((_BYTE *)v11[1] != v4 || v11[3] != v5)
    return 0;
  if (*(_DWORD *)(a2 - 24) < 0xAu)
    return v6 == 0;
  return v11[9] == v6;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  int v21;
  _BYTE v22[136];

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v10 = 0;
    v13 = 0;
    goto LABEL_5;
  }
  v6 = *a1;
  llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl((uint64_t)v22, *a2);
  HashValue = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue((uint64_t)v22);
  v8 = v4 - 1;
  v9 = HashValue & (v4 - 1);
  v10 = (uint64_t *)(v6 + 8 * v9);
  v11 = *a2;
  v12 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v13 = 1;
    goto LABEL_5;
  }
  v15 = 0;
  v16 = 1;
  while ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    if (v12 == -4096)
      goto LABEL_15;
LABEL_9:
    if (v12 == -8192 && v15 == 0)
      v15 = v10;
    v17 = v9 + v16++;
    v9 = v17 & v8;
    v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
    v11 = *a2;
    v12 = *v10;
    v13 = 1;
    if (*a2 == *v10)
      goto LABEL_5;
  }
  v21 = v16;
  v20 = v15;
  v18 = v9;
  v19 = v8;
  if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(v11, v12))
    goto LABEL_3;
  v12 = *v10;
  v9 = v18;
  v8 = v19;
  v15 = v20;
  v16 = v21;
  if (*v10 != -4096)
    goto LABEL_9;
LABEL_15:
  v13 = 0;
  if (v15)
    v10 = v15;
LABEL_5:
  *a3 = v10;
  return v13;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = (unint64_t *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
    v4 = *v2;
    if ((*v2 & 2) != 0)
    {
LABEL_3:
      *(_QWORD *)(result + 8) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16);
      v5 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)result = v2[-((v3 >> 2) & 0xF) + 1];
    v4 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_3;
  }
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 - 8 * ((v4 >> 2) & 0xF));
  v5 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_4:
    *(_QWORD *)(result + 16) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 24);
    v6 = a2;
    if (*(_BYTE *)a2 != 16)
      goto LABEL_5;
LABEL_11:
    *(_QWORD *)(result + 24) = v6;
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 - 16);
    if ((v7 & 2) != 0)
      goto LABEL_17;
    goto LABEL_12;
  }
LABEL_10:
  *(_QWORD *)(result + 16) = v2[-((v5 >> 2) & 0xF) + 3];
  v6 = a2;
  if (*(_BYTE *)a2 == 16)
    goto LABEL_11;
LABEL_5:
  if ((*v2 & 2) != 0)
  {
    *(_QWORD *)(result + 24) = **(_QWORD **)(a2 - 32);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 - 16);
    if ((v7 & 2) != 0)
      goto LABEL_17;
LABEL_12:
    *(_QWORD *)(result + 40) = v2[-((v7 >> 2) & 0xF) + 4];
    *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
    v8 = *(_QWORD *)(a2 - 16);
    if ((v8 & 2) == 0)
      goto LABEL_18;
LABEL_13:
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      *(_QWORD *)(result + 56) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 64);
      *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 - 16);
      if ((v9 & 2) != 0)
        goto LABEL_20;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  *(_QWORD *)(result + 24) = v2[-((*v2 >> 2) & 0xF)];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) == 0)
    goto LABEL_12;
LABEL_17:
  *(_QWORD *)(result + 40) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 32);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
  v8 = *(_QWORD *)(a2 - 16);
  if ((v8 & 2) != 0)
    goto LABEL_13;
LABEL_18:
  if ((v8 & 0x3C0) > 0x200)
  {
    *(_QWORD *)(result + 56) = v2[-((v8 >> 2) & 0xF) + 8];
    *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 - 16);
    if ((v9 & 2) != 0)
      goto LABEL_20;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 - 16);
  if ((v9 & 2) != 0)
  {
LABEL_20:
    *(_QWORD *)(result + 80) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 40);
    v10 = *v2;
    if ((*v2 & 2) == 0)
      goto LABEL_21;
LABEL_26:
    if (*(_DWORD *)(a2 - 24) >= 0xAu)
    {
      *(_QWORD *)(result + 88) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 72);
      v11 = *v2;
      if ((*v2 & 2) == 0)
        goto LABEL_34;
      goto LABEL_28;
    }
LABEL_33:
    *(_QWORD *)(result + 88) = 0;
    v11 = *v2;
    if ((*v2 & 2) == 0)
      goto LABEL_34;
LABEL_28:
    *(_QWORD *)(result + 96) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 48);
    v12 = *v2;
    if ((*v2 & 2) == 0)
      goto LABEL_35;
LABEL_29:
    *(_QWORD *)(result + 104) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 56);
    v13 = *v2;
    if ((*v2 & 2) == 0)
      goto LABEL_36;
    goto LABEL_30;
  }
LABEL_25:
  *(_QWORD *)(result + 80) = v2[-((v9 >> 2) & 0xF) + 5];
  v10 = *v2;
  if ((*v2 & 2) != 0)
    goto LABEL_26;
LABEL_21:
  if ((v10 & 0x380) <= 0x240)
    goto LABEL_33;
  *(_QWORD *)(result + 88) = v2[-((v10 >> 2) & 0xF) + 9];
  v11 = *v2;
  if ((*v2 & 2) != 0)
    goto LABEL_28;
LABEL_34:
  *(_QWORD *)(result + 96) = v2[-((v11 >> 2) & 0xF) + 6];
  v12 = *v2;
  if ((*v2 & 2) != 0)
    goto LABEL_29;
LABEL_35:
  *(_QWORD *)(result + 104) = v2[-((v12 >> 2) & 0xF) + 7];
  v13 = *v2;
  if ((*v2 & 2) == 0)
  {
LABEL_36:
    if ((v13 & 0x3C0) > 0x280)
    {
      *(_QWORD *)(result + 112) = v2[-((v13 >> 2) & 0xF) + 10];
      v14 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_38;
LABEL_42:
      if ((~(_WORD)v14 & 0x300) == 0)
      {
        *(_QWORD *)(result + 120) = v2[-((v14 >> 2) & 0xF) + 11];
        v15 = *v2;
        if ((*v2 & 2) == 0)
          goto LABEL_47;
        goto LABEL_44;
      }
LABEL_46:
      *(_QWORD *)(result + 120) = 0;
      v15 = *v2;
      if ((*v2 & 2) == 0)
        goto LABEL_47;
LABEL_44:
      if (*(_DWORD *)(a2 - 24) >= 0xDu)
      {
        *(_QWORD *)(result + 128) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 96);
        return result;
      }
      goto LABEL_49;
    }
    goto LABEL_41;
  }
LABEL_30:
  if (*(_DWORD *)(a2 - 24) >= 0xBu)
  {
    *(_QWORD *)(result + 112) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 80);
    v14 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_38;
    goto LABEL_42;
  }
LABEL_41:
  *(_QWORD *)(result + 112) = 0;
  v14 = *v2;
  if ((*v2 & 2) == 0)
    goto LABEL_42;
LABEL_38:
  if (*(_DWORD *)(a2 - 24) < 0xCu)
    goto LABEL_46;
  *(_QWORD *)(result + 120) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 88);
  v15 = *v2;
  if ((*v2 & 2) != 0)
    goto LABEL_44;
LABEL_47:
  if ((v15 & 0x3C0) > 0x300)
  {
    *(_QWORD *)(result + 128) = v2[-((v15 >> 2) & 0xF) + 12];
    return result;
  }
LABEL_49:
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int>(a2, a2 + 1, (int *)a2 + 4, (int *)a2 + 5);
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *a2;
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_16;
  while (v13 != -4096)
  {
    v14 = v13 - 16;
    v15 = *(_QWORD *)(v13 - 16);
    if ((v15 & 2) != 0)
    {
      if (v10 != *(_QWORD *)(*(_QWORD *)(v13 - 32) + 8))
        goto LABEL_16;
    }
    else if (v10 != *(_QWORD *)(v14 - 8 * ((v15 >> 2) & 0xF) + 8))
    {
      goto LABEL_16;
    }
    v16 = v13;
    if (*(_BYTE *)v13 != 16)
    {
      if ((v15 & 2) != 0)
        v17 = *(uint64_t **)(v13 - 32);
      else
        v17 = (uint64_t *)(v14 - 8 * ((v15 >> 2) & 0xF));
      v16 = *v17;
    }
    if (a2[1] == v16
      && *((_DWORD *)a2 + 4) == *(_DWORD *)(v13 + 4)
      && *((_DWORD *)a2 + 5) == *(unsigned __int16 *)(v13 + 16))
    {
      result = 1;
      *a3 = v12;
      return result;
    }
    do
    {
LABEL_16:
      if (v8)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v8 = v12;
      v19 = v9 + v11++;
      v9 = v19 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int>(_QWORD *a1, uint64_t *a2, int *a3, int *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[4];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if ((v6 & 1) == 0)
  {
    v14 = a2;
    v15 = a1;
    a2 = v14;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  v7 = *a1;
  v22 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v19[0] = v7;
  v16 = 0;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v19, (uint64_t *)&v16, (_QWORD *)v19 + 1, (unint64_t)v20, *a2);
  v17 = v16;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v19, (uint64_t *)&v17, v8, (unint64_t)v20, *a3);
  v18 = v17;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v19, (uint64_t *)&v18, v9, (unint64_t)v20, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v19, v18, v10, (char *)v20);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 - 16);
    if ((v8 & 2) != 0)
    {
      v9 = *(uint64_t **)(v7 - 32);
      v21 = v9[1];
      v10 = v7;
      if (*(_BYTE *)v7 == 16)
        goto LABEL_9;
    }
    else
    {
      v9 = (uint64_t *)(*a2 - 16 - 8 * ((v8 >> 2) & 0xF));
      v21 = v9[1];
      v10 = v7;
      if (*(_BYTE *)v7 == 16)
      {
LABEL_9:
        v22 = v10;
        v23 = *(_DWORD *)(v7 + 4);
        v24 = *(unsigned __int16 *)(v7 + 16);
        v13 = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int>(&v21, &v22, &v23, &v24);
        v14 = v4 - 1;
        v15 = (v4 - 1) & v13;
        v11 = (_QWORD *)(v6 + 8 * v15);
        v16 = *v11;
        if (*a2 == *v11)
        {
          result = 1;
          *a3 = v11;
        }
        else
        {
          v17 = 0;
          v18 = 1;
          result = 1;
          while (v16 != -4096)
          {
            if (v17)
              v19 = 0;
            else
              v19 = v16 == -8192;
            if (v19)
              v17 = v11;
            v20 = v15 + v18++;
            v15 = v20 & v14;
            v11 = (_QWORD *)(v6 + 8 * (v20 & v14));
            v16 = *v11;
            if (*a2 == *v11)
              goto LABEL_6;
          }
          result = 0;
          if (v17)
            v11 = v17;
          *a3 = v11;
        }
        return result;
      }
    }
    v10 = *v9;
    goto LABEL_9;
  }
  v11 = 0;
  result = 0;
LABEL_6:
  *a3 = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(a2, a2 + 1, (int *)a2 + 4);
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *a2;
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_14;
  while (v13 != -4096)
  {
    v14 = v13 - 16;
    v15 = *(_QWORD *)(v13 - 16);
    if ((v15 & 2) != 0)
    {
      if (v10 != *(_QWORD *)(*(_QWORD *)(v13 - 32) + 8))
        goto LABEL_14;
    }
    else if (v10 != *(_QWORD *)(v14 - 8 * ((v15 >> 2) & 0xF) + 8))
    {
      goto LABEL_14;
    }
    v16 = v13;
    if (*(_BYTE *)v13 != 16)
    {
      if ((v15 & 2) != 0)
        v17 = *(uint64_t **)(v13 - 32);
      else
        v17 = (uint64_t *)(v14 - 8 * ((v15 >> 2) & 0xF));
      v16 = *v17;
    }
    if (a2[1] == v16 && *((_DWORD *)a2 + 4) == *(_DWORD *)(v13 + 4))
    {
      result = 1;
      *a3 = v12;
      return result;
    }
    do
    {
LABEL_14:
      if (v8)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v8 = v12;
      v19 = v9 + v11++;
      v9 = v19 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(_QWORD *a1, uint64_t *a2, int *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = *a1;
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, *a2);
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)a1;
  v8 = *a2;
  v9 = *(_QWORD *)(*a2 - 16);
  if ((v9 & 2) == 0)
  {
    v10 = (uint64_t *)(*a2 - 16 - 8 * ((v9 >> 2) & 0xF));
    v22 = v10[1];
    v11 = v8;
    if (*(_BYTE *)v8 == 16)
      goto LABEL_9;
    goto LABEL_8;
  }
  v10 = *(uint64_t **)(v8 - 32);
  v22 = v10[1];
  v11 = v8;
  if (*(_BYTE *)v8 != 16)
LABEL_8:
    v11 = *v10;
LABEL_9:
  v23 = v11;
  v24 = *(_DWORD *)(v8 + 4);
  v15 = (v6 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v22, &v23, &v24);
  result = (uint64_t *)(v7 + 8 * v15);
  v16 = *result;
  if (*a2 == *result)
  {
    v14 = 0;
    goto LABEL_11;
  }
  v18 = 0;
  v19 = 1;
  while (v16 != -4096)
  {
    v14 = 0;
    if (v18)
      v20 = 0;
    else
      v20 = v16 == -8192;
    if (v20)
      v18 = result;
    v21 = v15 + v19++;
    v15 = v21 & (v6 - 1);
    result = (uint64_t *)(v7 + 8 * v15);
    v16 = *result;
    if (*a2 == *result)
      goto LABEL_11;
  }
  if (v18)
    v12 = v18;
  else
    v12 = result;
LABEL_6:
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucket<llvm::DILexicalBlockFile * const&,llvm::detail::DenseSetEmpty&>(a1, v12, a2);
  v14 = 1;
LABEL_11:
  v17 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucket<llvm::DILexicalBlockFile * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_39;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_39:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 - 16);
  if ((v25 & 2) != 0)
    v26 = *(uint64_t **)(v24 - 32);
  else
    v26 = (uint64_t *)(*a3 - 16 - 8 * ((v25 >> 2) & 0xF));
  v34 = v26[1];
  v27 = v24;
  if (*(_BYTE *)v24 != 16)
    v27 = *v26;
  v35 = v27;
  v36 = *(_DWORD *)(v24 + 4);
  v28 = (v17 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v34, &v35, &v36);
  v7 = *a3;
  a2 = &v16->i64[v28];
  v29 = *a2;
  if (*a3 != *a2)
  {
    v30 = 0;
    v31 = 1;
    while (v29 != -4096)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v29 == -8192;
      if (v32)
        v30 = a2;
      v33 = v28 + v31++;
      v28 = v33 & (v17 - 1);
      a2 = &v16->i64[v28];
      v29 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v30)
      a2 = v30;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    while (1)
    {
      v22 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_12:
      if (++v4 == a3)
        return result;
    }
    v23 = *(_QWORD *)(v22 - 16);
    if ((v23 & 2) != 0)
    {
      v24 = *(uint64_t **)(v22 - 32);
      v30 = v24[1];
      v25 = v22;
      if (*(_BYTE *)v22 != 16)
LABEL_18:
        v25 = *v24;
    }
    else
    {
      v24 = (uint64_t *)(v22 - 16 - 8 * ((v23 >> 2) & 0xF));
      v30 = v24[1];
      v25 = v22;
      if (*(_BYTE *)v22 != 16)
        goto LABEL_18;
    }
    v15 = *(_QWORD *)v5;
    v16 = *(_DWORD *)(v5 + 16);
    v31 = v25;
    v32 = *(_DWORD *)(v22 + 4);
    result = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v30, &v31, &v32);
    v17 = v16 - 1;
    v18 = (v16 - 1) & result;
    v19 = *v4;
    v20 = (uint64_t *)(v15 + 8 * v18);
    v21 = *v20;
    if (*v4 != *v20)
    {
      v26 = 0;
      v27 = 1;
      while (v21 != -4096)
      {
        if (v26)
          v28 = 0;
        else
          v28 = v21 == -8192;
        if (v28)
          v26 = v20;
        v29 = v18 + v27++;
        v18 = v29 & v17;
        v20 = (uint64_t *)(v15 + 8 * (v29 & v17));
        v21 = *v20;
        if (v19 == *v20)
          goto LABEL_11;
      }
      if (v26)
        v20 = v26;
    }
LABEL_11:
    *v20 = v19;
    ++*(_DWORD *)(v5 + 8);
    goto LABEL_12;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t result;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v4 = *a1;
  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v28 = a3;
    v26 = a2;
    v29 = *a1;
    v27 = *((_DWORD *)a1 + 4);
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v27;
    v4 = v29;
    a2 = v26;
    a3 = v28;
    if (v24)
    {
      v25 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v25 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v25;
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v27;
      v4 = v29;
      a2 = v26;
      a3 = v28;
    }
  }
  v7 = 0;
  v8 = v6[19];
  v9 = *a2;
  v10 = a2[1];
  v11 = __ROR8__(v10 + 16, 16);
  v12 = 0x9DDFEA08EB382D69
      * (v11 ^ ((0x9DDFEA08EB382D69 * (v8 ^ *a2 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ *a2 ^ v11)));
  v13 = v3 - 1;
  v14 = v13 & ((-348639895 * ((v12 >> 47) ^ v12)) ^ v10);
  v15 = *((unsigned __int8 *)a2 + 16);
  v16 = 1;
  v17 = (_QWORD *)(v4 + 8 * v14);
  v18 = *v17;
  if (*v17 == -8192)
    goto LABEL_10;
  while (v18 != -4096)
  {
    v19 = *(_QWORD *)(v18 - 16);
    if ((v19 & 2) != 0)
    {
      v20 = *(_QWORD *)(v18 - 32);
      if (v9 != *(_QWORD *)(v20 + 8))
        goto LABEL_10;
    }
    else
    {
      v20 = v18 - 16 - 8 * ((v19 >> 2) & 0xF);
      if (v9 != *(_QWORD *)(v20 + 8))
        goto LABEL_10;
    }
    if (v10 == *(_QWORD *)(v20 + 16) && v15 == *(unsigned __int8 *)(v18 + 1) >> 7)
    {
      result = 1;
      *a3 = v17;
      return result;
    }
    do
    {
LABEL_10:
      if (v7)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v7 = v17;
      v22 = v14 + v16++;
      v14 = v22 & v13;
      v17 = (_QWORD *)(v4 + 8 * v14);
      v18 = *v17;
    }
    while (*v17 == -8192);
  }
  result = 0;
  if (v7)
    v17 = v7;
  *a3 = v17;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(*a2 - 16);
    if ((v4 & 2) != 0)
      v5 = *(_QWORD *)(*a2 - 32);
    else
      v5 = *a2 - 16 - 8 * ((v4 >> 2) & 0xF);
    v8 = *a1;
    v10 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(v5 + 16);
    v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v11 & 1) == 0)
    {
      v27 = a3;
      v24 = a2;
      v28 = *a1;
      v25 = *((_DWORD *)a1 + 4);
      v29 = v9;
      v26 = v10;
      v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v10 = v26;
      a3 = v27;
      v8 = v28;
      v9 = v29;
      v3 = v25;
      a2 = v24;
      if (v22)
      {
        v23 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v23 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v23;
        v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v10 = v26;
        a3 = v27;
        v8 = v28;
        v9 = v29;
        v3 = v25;
        a2 = v24;
      }
    }
    v13 = __ROR8__(v9 + 16, 16);
    v14 = 0x9DDFEA08EB382D69 * (v12[19] ^ v10 ^ v13);
    LODWORD(v14) = (-348639895
                  * ((((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 32) >> 15) ^ (-348639895 * (v13 ^ (v14 >> 47) ^ v14)))) ^ v9;
    v15 = v3 - 1;
    v16 = (v3 - 1) & v14;
    v6 = (_QWORD *)(v8 + 8 * v16);
    v17 = *v6;
    if (*a2 == *v6)
    {
      result = 1;
      *a3 = v6;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      result = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v6;
        v21 = v16 + v19++;
        v16 = v21 & v15;
        v6 = (_QWORD *)(v8 + 8 * (v21 & v15));
        v17 = *v6;
        if (*a2 == *v6)
          goto LABEL_5;
      }
      result = 0;
      if (v18)
        v6 = v18;
      *a3 = v6;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
LABEL_5:
    *a3 = v6;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = v4;
      do
      {
        if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, v20, &v28);
          *v28 = *(_QWORD *)v20;
          ++*(_DWORD *)(a1 + 8);
        }
        v20 = (llvm *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(a2, a2 + 1, a2 + 2, a2 + 3, (int *)a2 + 8);
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *a2;
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_11;
  while (v13 != -4096)
  {
    v14 = *(_QWORD *)(v13 - 16);
    if ((v14 & 2) != 0)
    {
      v15 = *(_QWORD **)(v13 - 32);
      if (v10 != *v15)
        goto LABEL_11;
    }
    else
    {
      v15 = (_QWORD *)(v13 - 16 - 8 * ((v14 >> 2) & 0xF));
      if (v10 != *v15)
        goto LABEL_11;
    }
    if (a2[1] == v15[1] && a2[2] == v15[2] && a2[3] == v15[3] && *((_DWORD *)a2 + 8) == *(_DWORD *)(v13 + 4))
    {
      result = 1;
      *a3 = v12;
      return result;
    }
    do
    {
LABEL_11:
      if (v8)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v8 = v12;
      v17 = v9 + v11++;
      v9 = v17 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  char *v11;
  char *result;
  char v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  int v24[4];

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v9 = *(_QWORD *)(*a2 - 16);
    if ((v9 & 2) != 0)
      v10 = *(__int128 **)(v8 - 32);
    else
      v10 = (__int128 *)(*a2 - 16 - 8 * ((v9 >> 2) & 0xF));
    v14 = v10[1];
    v22 = *v10;
    v23 = v14;
    v24[0] = *(_DWORD *)(v8 + 4);
    v15 = (v6 - 1) & llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(&v22, (uint64_t *)&v22 + 1, (uint64_t *)&v23, (uint64_t *)&v23 + 1, v24);
    result = (char *)(v7 + 8 * v15);
    v16 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v18 = 0;
    v19 = 1;
    while (v16 != -4096)
    {
      v13 = 0;
      if (v18)
        v20 = 0;
      else
        v20 = v16 == -8192;
      if (v20)
        v18 = result;
      v21 = v15 + v19++;
      v15 = v21 & (v6 - 1);
      result = (char *)(v7 + 8 * v15);
      v16 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v18)
      v11 = v18;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucket<llvm::DICommonBlock * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v17 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucket<llvm::DICommonBlock * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  BOOL v32;
  int v33;
  __int128 v34;
  __int128 v35;
  int v36[4];

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 - 16);
  if ((v25 & 2) != 0)
    v26 = *(__int128 **)(v24 - 32);
  else
    v26 = (__int128 *)(*a3 - 16 - 8 * ((v25 >> 2) & 0xF));
  v27 = v26[1];
  v34 = *v26;
  v35 = v27;
  v36[0] = *(_DWORD *)(v24 + 4);
  v28 = (v17 - 1) & llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(&v34, (uint64_t *)&v34 + 1, (uint64_t *)&v35, (uint64_t *)&v35 + 1, v36);
  v7 = *a3;
  a2 = &v16->i8[8 * v28];
  v29 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v30 = 0;
    v31 = 1;
    while (v29 != -4096)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v29 == -8192;
      if (v32)
        v30 = a2;
      v33 = v28 + v31++;
      v28 = v33 & (v17 - 1);
      a2 = &v16->i8[8 * v28];
      v29 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v30)
      a2 = v30;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  int v32[4];

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v24 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v25 = *(_QWORD *)(v24 - 16);
        if ((v25 & 2) != 0)
          v15 = *(__int128 **)(v24 - 32);
        else
          v15 = (__int128 *)(v24 - 16 - 8 * ((v25 >> 2) & 0xF));
        v16 = *(_QWORD *)v5;
        v17 = *(_DWORD *)(v5 + 16);
        v18 = v15[1];
        v30 = *v15;
        v31 = v18;
        v32[0] = *(_DWORD *)(v24 + 4);
        result = llvm::hash_combine<llvm::MDString *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(&v30, (uint64_t *)&v30 + 1, (uint64_t *)&v31, (uint64_t *)&v31 + 1, v32);
        v19 = v17 - 1;
        v20 = (v17 - 1) & result;
        v21 = *v4;
        v22 = (_QWORD *)(v16 + 8 * v20);
        v23 = *v22;
        if (*v4 != *v22)
        {
          v26 = 0;
          v27 = 1;
          while (v23 != -4096)
          {
            if (v26)
              v28 = 0;
            else
              v28 = v23 == -8192;
            if (v28)
              v26 = v22;
            v29 = v20 + v27++;
            v20 = v29 & v19;
            v22 = (_QWORD *)(v16 + 8 * (v29 & v19));
            v23 = *v22;
            if (v21 == *v22)
              goto LABEL_12;
          }
          if (v26)
            v22 = v26;
        }
LABEL_12:
        *v22 = v21;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char v25;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a2;
    v7 = *(_QWORD *)(*a2 - 16);
    v10 = *a1;
    if ((v7 & 2) != 0)
      v11 = *(_QWORD *)(v6 - 32);
    else
      v11 = *a2 - 16 - 8 * ((v7 >> 2) & 0xF);
    v12 = *(_OWORD *)(v11 + 24);
    v21 = *(_OWORD *)(v11 + 8);
    v22 = v12;
    v23 = *(_QWORD *)(v11 + 40);
    v24 = *(_DWORD *)(v6 + 4);
    v25 = *(_BYTE *)(v6 + 1) >> 7;
    v13 = llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v21, (uint64_t *)&v21 + 1, (uint64_t *)&v22, (uint64_t *)&v22 + 1);
    v14 = v4 - 1;
    v15 = (v4 - 1) & v13;
    v8 = (_QWORD *)(v10 + 8 * v15);
    v16 = *v8;
    if (*a2 == *v8)
    {
      result = 1;
      *a3 = v8;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v8;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        v8 = (_QWORD *)(v10 + 8 * (v20 & v14));
        v16 = *v8;
        if (*a2 == *v8)
          goto LABEL_4;
      }
      result = 0;
      if (v17)
        v8 = v17;
      *a3 = v8;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
LABEL_4:
    *a3 = v8;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

unint64_t llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(_QWORD *a1, uint64_t *a2, char *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v4 & 1) == 0)
  {
    v11 = a2;
    v12 = a1;
    a2 = v11;
    a1 = v12;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a2 = v11;
      a1 = v12;
    }
  }
  v5 = *a1;
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = v5;
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, *a2);
  v14 = v13;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v15, (uint64_t *)&v14, v6, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v7, (char *)v16);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  char *v11;
  char *result;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  __int128 v21;
  char v22[16];

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v9 = *(_QWORD *)(*a2 - 16);
    if ((v9 & 2) != 0)
      v10 = *(__int128 **)(v8 - 32);
    else
      v10 = (__int128 *)(*a2 - 16 - 8 * ((v9 >> 2) & 0xF));
    v21 = *v10;
    v22[0] = *(_BYTE *)(v8 + 1) >> 7;
    v14 = (v6 - 1) & llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(&v21, (uint64_t *)&v21 + 1, v22);
    result = (char *)(v7 + 8 * v14);
    v15 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v17 = 0;
    v18 = 1;
    while (v15 != -4096)
    {
      v13 = 0;
      if (v17)
        v19 = 0;
      else
        v19 = v15 == -8192;
      if (v19)
        v17 = result;
      v20 = v14 + v18++;
      v14 = v20 & (v6 - 1);
      result = (char *)(v7 + 8 * v14);
      v15 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v17)
      v11 = v17;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucket<llvm::DITemplateTypeParameter * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v16 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucket<llvm::DITemplateTypeParameter * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  int v32;
  __int128 v33;
  char v34[16];

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 - 16);
  if ((v25 & 2) != 0)
    v26 = *(__int128 **)(v24 - 32);
  else
    v26 = (__int128 *)(*a3 - 16 - 8 * ((v25 >> 2) & 0xF));
  v33 = *v26;
  v34[0] = *(_BYTE *)(v24 + 1) >> 7;
  v27 = (v17 - 1) & llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(&v33, (uint64_t *)&v33 + 1, v34);
  v7 = *a3;
  a2 = &v16->i8[8 * v27];
  v28 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & (v17 - 1);
      a2 = &v16->i8[8 * v27];
      v28 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  __int128 v29;
  char v30[16];

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v23 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v24 = *(_QWORD *)(v23 - 16);
        if ((v24 & 2) != 0)
          v15 = *(__int128 **)(v23 - 32);
        else
          v15 = (__int128 *)(v23 - 16 - 8 * ((v24 >> 2) & 0xF));
        v16 = *(_QWORD *)v5;
        v17 = *(_DWORD *)(v5 + 16);
        v29 = *v15;
        v30[0] = *(_BYTE *)(v23 + 1) >> 7;
        result = llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(&v29, (uint64_t *)&v29 + 1, v30);
        v18 = v17 - 1;
        v19 = (v17 - 1) & result;
        v20 = *v4;
        v21 = (_QWORD *)(v16 + 8 * v19);
        v22 = *v21;
        if (*v4 != *v21)
        {
          v25 = 0;
          v26 = 1;
          while (v22 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v22 == -8192;
            if (v27)
              v25 = v21;
            v28 = v19 + v26++;
            v19 = v28 & v18;
            v21 = (_QWORD *)(v16 + 8 * (v28 & v18));
            v22 = *v21;
            if (v20 == *v21)
              goto LABEL_12;
          }
          if (v25)
            v21 = v25;
        }
LABEL_12:
        *v21 = v20;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (char *)(a2 + 24), (uint64_t *)(a2 + 32));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_15;
  while (v13 != -4096)
  {
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v13 + 2))
    {
      v14 = v13 - 16;
      v15 = *(_QWORD *)(v13 - 16);
      if ((v15 & 2) != 0)
      {
        v16 = *(_QWORD **)(v13 - 32);
        if (v10 != *v16)
          goto LABEL_15;
      }
      else
      {
        v16 = (_QWORD *)(v14 - 8 * ((v15 >> 2) & 0xF));
        if (v10 != *v16)
          goto LABEL_15;
      }
      if (*(_QWORD *)(a2 + 16) == v16[1] && *(_BYTE *)(a2 + 24) == *(unsigned __int8 *)(v13 + 1) >> 7)
      {
        v17 = (v15 & 2) != 0 ? *(_QWORD *)(v13 - 32) : v14 - 8 * ((v15 >> 2) & 0xF);
        if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(v17 + 16))
        {
          result = 1;
          *a3 = v12;
          return result;
        }
      }
    }
    do
    {
LABEL_15:
      if (v8)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v8 = v12;
      v19 = v9 + v11++;
      v9 = v19 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(_DWORD *a1, uint64_t *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unsigned __int8 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[4];
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  if ((v8 & 1) == 0)
  {
    v16 = a2;
    v17 = a1;
    a2 = v16;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      a2 = v16;
      a1 = v17;
    }
  }
  v25 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v22[0]) = *a1;
  v18 = 0;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v18, (_OWORD *)((char *)v22 + 4), (unint64_t)v23, *a2);
  v19 = v18;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v19, v9, (unint64_t)v23, *a3);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v22, (uint64_t *)&v20, v10, (unint64_t)v23, *a4);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v21, v11, (unint64_t)v23, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v22, v21, v12, (char *)v23);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  __int128 v22;
  char v23[8];
  uint64_t v24;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v21 = *(unsigned __int16 *)(*a2 + 2);
    v9 = *(_QWORD *)(v8 - 16);
    if ((v9 & 2) != 0)
      v10 = *(_QWORD *)(v8 - 32);
    else
      v10 = v8 - 16 - 8 * ((v9 >> 2) & 0xF);
    v22 = *(_OWORD *)v10;
    v23[0] = *(_BYTE *)(v8 + 1) >> 7;
    v24 = *(_QWORD *)(v10 + 16);
    v14 = (v6 - 1) & llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(&v21, (uint64_t *)&v22, (uint64_t *)&v22 + 1, v23, &v24);
    result = (char *)(v7 + 8 * v14);
    v15 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v17 = 0;
    v18 = 1;
    while (v15 != -4096)
    {
      v13 = 0;
      if (v17)
        v19 = 0;
      else
        v19 = v15 == -8192;
      if (v19)
        v17 = result;
      v20 = v14 + v18++;
      v14 = v20 & (v6 - 1);
      result = (char *)(v7 + 8 * v14);
      v15 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v17)
      v11 = v17;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucket<llvm::DITemplateValueParameter * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v16 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucket<llvm::DITemplateValueParameter * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  __int128 v34;
  char v35[8];
  uint64_t v36;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v33 = *(unsigned __int16 *)(*a3 + 2);
  v25 = *(_QWORD *)(v24 - 16);
  if ((v25 & 2) != 0)
    v26 = *(_QWORD *)(v24 - 32);
  else
    v26 = v24 - 16 - 8 * ((v25 >> 2) & 0xF);
  v34 = *(_OWORD *)v26;
  v35[0] = *(_BYTE *)(v24 + 1) >> 7;
  v36 = *(_QWORD *)(v26 + 16);
  v27 = (v17 - 1) & llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(&v33, (uint64_t *)&v34, (uint64_t *)&v34 + 1, v35, &v36);
  v7 = *a3;
  a2 = &v16->i8[8 * v27];
  v28 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & (v17 - 1);
      a2 = &v16->i8[8 * v27];
      v28 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  char v31[8];
  uint64_t v32;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v21 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v22 = *(_QWORD *)v5;
        v23 = *(_DWORD *)(v5 + 16);
        v29 = *(unsigned __int16 *)(v21 + 2);
        v24 = *(_QWORD *)(v21 - 16);
        if ((v24 & 2) != 0)
          v15 = *(_QWORD *)(v21 - 32);
        else
          v15 = v21 - 16 - 8 * ((v24 >> 2) & 0xF);
        v30 = *(_OWORD *)v15;
        v31[0] = *(_BYTE *)(v21 + 1) >> 7;
        v32 = *(_QWORD *)(v15 + 16);
        result = llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(&v29, (uint64_t *)&v30, (uint64_t *)&v30 + 1, v31, &v32);
        v16 = v23 - 1;
        v17 = (v23 - 1) & result;
        v18 = *v4;
        v19 = (_QWORD *)(v22 + 8 * v17);
        v20 = *v19;
        if (*v4 != *v19)
        {
          v25 = 0;
          v26 = 1;
          while (v20 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v20 == -8192;
            if (v27)
              v25 = v19;
            v28 = v17 + v26++;
            v17 = v28 & v16;
            v19 = (_QWORD *)(v22 + 8 * (v28 & v16));
            v20 = *v19;
            if (v18 == *v19)
              goto LABEL_12;
          }
          if (v25)
            v19 = v25;
        }
LABEL_12:
        *v19 = v18;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

unint64_t llvm::hash_combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  unsigned __int8 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD v29[4];
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  if ((v16 & 1) == 0)
  {
    v24 = a2;
    v25 = a1;
    a2 = v24;
    a1 = v25;
    if (v22)
    {
      v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v23 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      a2 = v24;
      a1 = v25;
    }
  }
  v17 = *a1;
  v32 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v29[0] = v17;
  v26 = 0;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v29, (uint64_t *)&v26, (_QWORD *)v29 + 1, (unint64_t)v30, *a2);
  v27 = v26;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v29, (uint64_t *)&v27, v18, (unint64_t)v30, *a3);
  v28 = v27;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v29, (uint64_t *)&v28, v19, (unint64_t)v30, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v29, v28, v20, (char *)v30, a5, a6, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
  {
    v5 = *(_QWORD **)(a2 - 32);
    if (v2 != *v5)
      return 0;
  }
  else
  {
    v5 = (_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF));
    if (v2 != *v5)
      return 0;
  }
  if (a1[1] != v5[1] || a1[2] != v5[5] || a1[3] != v5[2] || *((_DWORD *)a1 + 8) != *(_DWORD *)(a2 + 16))
    return 0;
  v6 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (a1[5] != *(_QWORD *)(v6 + 24)
    || *((unsigned __int8 *)a1 + 48) != *(unsigned __int8 *)(a2 + 20)
    || *((unsigned __int8 *)a1 + 49) != *(unsigned __int8 *)(a2 + 21))
  {
    return 0;
  }
  v7 = a1[7];
  if ((v4 & 2) == 0)
  {
    v8 = v3 - 8 * ((v4 >> 2) & 0xF);
    if (v7 == *(_QWORD *)(v8 + 48))
      goto LABEL_19;
    return 0;
  }
  v8 = *(_QWORD *)(a2 - 32);
  if (v7 != *(_QWORD *)(v8 + 48))
    return 0;
LABEL_19:
  if (a1[8] != *(_QWORD *)(v8 + 56) || *((_DWORD *)a1 + 18) != *(_DWORD *)(a2 + 4))
    return 0;
  v9 = a1[10];
  if ((v4 & 2) != 0)
    return v9 == *(_QWORD *)(*(_QWORD *)(a2 - 32) + 64);
  else
    return v9 == *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF) + 64);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25[7];
  uint64_t v26[3];
  uint64_t v27;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v12 = 0;
LABEL_5:
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucket<llvm::DIGlobalVariable * const&,llvm::detail::DenseSetEmpty&>(a1, v12, a2);
    v11 = 1;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)a1;
  llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)&v18, *a2);
  v8 = (v6 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(&v18, &v19, &v20, &v21, &v22, &v23, &v24, v25, v26, &v27);
  result = (uint64_t *)(v7 + 8 * v8);
  v10 = *result;
  if (*a2 != *result)
  {
    v14 = 0;
    v15 = 1;
    while (v10 != -4096)
    {
      v11 = 0;
      if (v14)
        v16 = 0;
      else
        v16 = v10 == -8192;
      if (v16)
        v14 = result;
      v17 = v8 + v15++;
      v8 = v17 & (v6 - 1);
      result = (uint64_t *)(v7 + 8 * v8);
      v10 = *result;
      if (*a2 == *result)
        goto LABEL_6;
    }
    if (v14)
      v12 = v14;
    else
      v12 = result;
    goto LABEL_5;
  }
  v11 = 0;
LABEL_6:
  v13 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucket<llvm::DIGlobalVariable * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37[7];
  uint64_t v38[3];
  uint64_t v39;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_34;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)&v30, *a3);
  v24 = (v17 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(&v30, &v31, &v32, &v33, &v34, &v35, &v36, v37, v38, &v39);
  v7 = *a3;
  a2 = &v16->i64[v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & (v17 - 1);
      a2 = &v16->i64[v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (unint64_t *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    *(_QWORD *)result = **(_QWORD **)(a2 - 32);
    v4 = *v2;
    if ((*v2 & 2) != 0)
    {
LABEL_3:
      *(_QWORD *)(result + 8) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
      v5 = *v2;
      if ((*v2 & 2) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)result = v2[-((v3 >> 2) & 0xF)];
    v4 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_3;
  }
  *(_QWORD *)(result + 8) = v2[-((v4 >> 2) & 0xF) + 1];
  v5 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_4:
    *(_QWORD *)(result + 16) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 40);
    v6 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(result + 16) = v2[-((v5 >> 2) & 0xF) + 5];
  v6 = *v2;
  if ((*v2 & 2) != 0)
  {
LABEL_5:
    *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 16);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 - 16);
    if ((v7 & 2) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 - 8 * ((v6 >> 2) & 0xF));
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
  {
LABEL_6:
    *(_QWORD *)(result + 40) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 24);
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 20);
    v8 = *(_QWORD *)(a2 - 16);
    if ((v8 & 2) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(result + 40) = v2[-((v7 >> 2) & 0xF) + 3];
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 20);
  v8 = *(_QWORD *)(a2 - 16);
  if ((v8 & 2) != 0)
  {
LABEL_7:
    *(_QWORD *)(result + 56) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 48);
    v9 = *v2;
    if ((*v2 & 2) != 0)
      goto LABEL_8;
LABEL_16:
    *(_QWORD *)(result + 64) = v2[-((v9 >> 2) & 0xF) + 7];
    *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 4);
    v10 = *(_QWORD *)(a2 - 16);
    if ((v10 & 2) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_15:
  *(_QWORD *)(result + 56) = v2[-((v8 >> 2) & 0xF) + 6];
  v9 = *v2;
  if ((*v2 & 2) == 0)
    goto LABEL_16;
LABEL_8:
  *(_QWORD *)(result + 64) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 56);
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 4);
  v10 = *(_QWORD *)(a2 - 16);
  if ((v10 & 2) != 0)
  {
LABEL_9:
    *(_QWORD *)(result + 80) = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 64);
    return result;
  }
LABEL_17:
  *(_QWORD *)(result + 80) = v2[-((v10 >> 2) & 0xF) + 8];
  return result;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33[7];
  uint64_t v34[3];
  uint64_t v35;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_QWORD *)v5;
        v17 = *(_DWORD *)(v5 + 16);
        llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)&v26, *v4);
        result = llvm::hash_combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(&v26, &v27, &v28, &v29, &v30, &v31, &v32, v33, v34, &v35);
        v18 = v17 - 1;
        v19 = (v17 - 1) & result;
        v20 = *v4;
        v15 = (uint64_t *)(v16 + 8 * v19);
        v21 = *v15;
        if (*v4 != *v15)
        {
          v22 = 0;
          v23 = 1;
          while (v21 != -4096)
          {
            if (v22)
              v24 = 0;
            else
              v24 = v21 == -8192;
            if (v24)
              v22 = v15;
            v25 = v19 + v23++;
            v19 = v25 & v18;
            v15 = (uint64_t *)(v16 + 8 * (v25 & v18));
            v21 = *v15;
            if (v20 == *v15)
              goto LABEL_12;
          }
          if (v22)
            v15 = v22;
        }
LABEL_12:
        *v15 = v20;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(uint64_t *a1, __int128 *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;
  unint64_t v17;
  __int128 v18;
  _OWORD v19[3];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    v18 = 0u;
    if ((v7 & 1) == 0
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
    }
    v22 = llvm::hashing::detail::get_execution_seed(void)::seed;
    v18 = *a2;
    v8 = 0;
    v9 = v4 - 1;
    v10 = v9 & llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v18, 0, v19, (char *)v20, (uint64_t *)a2 + 2, (int *)a2 + 6, (uint64_t *)a2 + 4, (int *)a2 + 10, (int *)a2 + 11, (uint64_t *)a2 + 7);
    v11 = 1;
    v12 = (uint64_t *)(v6 + 8 * v10);
    v13 = *v12;
    if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_11;
    while (v13 != -4096)
    {
      while (1)
      {
        if (v8)
          v14 = 0;
        else
          v14 = v13 == -8192;
        if (v14)
          v8 = v12;
        v15 = v10 + v11++;
        v10 = v15 & v9;
        v12 = (uint64_t *)(v6 + 8 * (v15 & v9));
        v13 = *v12;
        if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_11:
        if (llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf((uint64_t *)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
        if (*v12 == -4096)
          goto LABEL_13;
      }
    }
LABEL_13:
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8, int *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
  {
    v5 = *(_QWORD **)(a2 - 32);
    if (v2 == *v5)
      goto LABEL_5;
    return 0;
  }
  v5 = (_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF));
  if (v2 != *v5)
    return 0;
LABEL_5:
  if (a1[1] != v5[1] || a1[2] != v5[2] || *((_DWORD *)a1 + 6) != *(_DWORD *)(a2 + 16))
    return 0;
  v6 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (a1[4] != *(_QWORD *)(v6 + 24)
    || *((_DWORD *)a1 + 10) != *(unsigned __int16 *)(a2 + 20)
    || *((_DWORD *)a1 + 11) != *(_DWORD *)(a2 + 24)
    || *((_DWORD *)a1 + 12) != *(_DWORD *)(a2 + 4))
  {
    return 0;
  }
  v7 = a1[7];
  if ((v4 & 2) != 0)
    return v7 == *(_QWORD *)(*(_QWORD *)(a2 - 32) + 32);
  else
    return v7 == *(_QWORD *)(v3 - 8 * ((v4 >> 2) & 0xF) + 32);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucket<llvm::DILocalVariable * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int HashValue;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  HashValue = llvm::MDNodeInfo<llvm::DILocalVariable>::getHashValue(*a3);
  v13 = v11 - 1;
  v8 = *a3;
  v14 = HashValue & (v11 - 1);
  a2 = (uint64_t *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::MDNodeInfo<llvm::DILocalVariable>::getHashValue(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __int128 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  int v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17[3];
  uint64_t v18;
  __int128 v19;
  _OWORD v20[3];
  _OWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1 - 16;
  v2 = *(_QWORD *)(a1 - 16);
  v3 = (v2 >> 2) & 0xF;
  if ((v2 & 2) != 0)
    v4 = *(__int128 **)(a1 - 32);
  else
    v4 = (__int128 *)(v1 - 8 * v3);
  v12 = *v4;
  v13 = *((_QWORD *)v4 + 2);
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *((_QWORD *)v4 + 3);
  v5 = *(_DWORD *)(a1 + 24);
  v16 = *(unsigned __int16 *)(a1 + 20);
  v17[0] = v5;
  v17[1] = *(_DWORD *)(a1 + 4);
  if ((v2 & 2) != 0)
    v6 = *(_QWORD *)(a1 - 32);
  else
    v6 = v1 - 8 * v3;
  v18 = *(_QWORD *)(v6 + 32);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v10)
    {
      v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v11 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v11;
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v23 = v8[19];
  v19 = v12;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v19, 0, v20, (char *)v21, &v13, &v14, &v15, &v16, v17, &v18);
}

int64x2_t *llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MDNodeInfo<llvm::DILocalVariable>::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(a2, a2 + 1, (int *)a2 + 6);
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *a2;
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_10;
  while (v13 != -4096)
  {
    v14 = *(_QWORD *)(v13 - 16);
    if ((v14 & 2) != 0)
    {
      v15 = *(_QWORD **)(v13 - 32);
      if (v10 != *v15)
        goto LABEL_10;
    }
    else
    {
      v15 = (_QWORD *)(v13 - 16 - 8 * ((v14 >> 2) & 0xF));
      if (v10 != *v15)
        goto LABEL_10;
    }
    if (a2[1] == v15[1] && a2[2] == v15[2] && *((_DWORD *)a2 + 6) == *(_DWORD *)(v13 + 4))
    {
      result = 1;
      *a3 = v12;
      return result;
    }
    do
    {
LABEL_10:
      if (v8)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v8 = v12;
      v17 = v9 + v11++;
      v9 = v17 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *result;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v9 = *(_QWORD *)(*a2 - 16);
    if ((v9 & 2) != 0)
      v10 = *(_QWORD *)(v8 - 32);
    else
      v10 = *a2 - 16 - 8 * ((v9 >> 2) & 0xF);
    v21 = *(_OWORD *)v10;
    v22 = *(_QWORD *)(v10 + 16);
    v23 = *(_DWORD *)(v8 + 4);
    v14 = (v6 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v21, (uint64_t *)&v21 + 1, &v23);
    result = (char *)(v7 + 8 * v14);
    v15 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v13 = 0;
      goto LABEL_9;
    }
    v17 = 0;
    v18 = 1;
    while (v15 != -4096)
    {
      v13 = 0;
      if (v17)
        v19 = 0;
      else
        v19 = v15 == -8192;
      if (v19)
        v17 = result;
      v20 = v14 + v18++;
      v14 = v20 & (v6 - 1);
      result = (char *)(v7 + 8 * v14);
      v15 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v17)
      v11 = v17;
    else
      v11 = result;
  }
  else
  {
    v11 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucket<llvm::DILabel * const&,llvm::detail::DenseSetEmpty&>(a1, v11, a2);
  v13 = 1;
LABEL_9:
  v16 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucket<llvm::DILabel * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 - 16);
  if ((v25 & 2) != 0)
    v26 = *(_QWORD *)(v24 - 32);
  else
    v26 = *a3 - 16 - 8 * ((v25 >> 2) & 0xF);
  v33 = *(_OWORD *)v26;
  v34 = *(_QWORD *)(v26 + 16);
  v35 = *(_DWORD *)(v24 + 4);
  v27 = (v17 - 1) & llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v33, (uint64_t *)&v33 + 1, &v35);
  v7 = *a3;
  a2 = &v16->i8[8 * v27];
  v28 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & (v17 - 1);
      a2 = &v16->i8[8 * v27];
      v28 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v23 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v24 = *(_QWORD *)(v23 - 16);
        if ((v24 & 2) != 0)
          v15 = *(_QWORD *)(v23 - 32);
        else
          v15 = v23 - 16 - 8 * ((v24 >> 2) & 0xF);
        v16 = *(_QWORD *)v5;
        v17 = *(_DWORD *)(v5 + 16);
        v29 = *(_OWORD *)v15;
        v30 = *(_QWORD *)(v15 + 16);
        v31 = *(_DWORD *)(v23 + 4);
        result = llvm::hash_combine<llvm::Metadata *,llvm::Metadata *,unsigned int>(&v29, (uint64_t *)&v29 + 1, &v31);
        v18 = v17 - 1;
        v19 = (v17 - 1) & result;
        v20 = *v4;
        v21 = (_QWORD *)(v16 + 8 * v19);
        v22 = *v21;
        if (*v4 != *v21)
        {
          v25 = 0;
          v26 = 1;
          while (v22 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v22 == -8192;
            if (v27)
              v25 = v21;
            v28 = v19 + v26++;
            v19 = v28 & v18;
            v21 = (_QWORD *)(v16 + 8 * (v28 & v18));
            v22 = *v21;
            if (v20 == *v21)
              goto LABEL_12;
          }
          if (v25)
            v21 = v25;
        }
LABEL_12:
        *v21 = v20;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucket<llvm::DIExpression * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(*a3 + 16), *(_QWORD *)(*a3 + 24));
  v13 = v11 - 1;
  v14 = (v11 - 1) & v12;
  v8 = *a3;
  a2 = (_QWORD *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

int64x2_t *llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  llvm *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          v29 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(*(_QWORD *)v18 + 16), *(_QWORD *)(*(_QWORD *)v18 + 24));
          v30 = v28 - 1;
          v31 = (v28 - 1) & v29;
          v32 = *(_QWORD *)v18;
          v26 = (_QWORD *)((char *)v27 + 8 * v31);
          v33 = *v26;
          if (*(_QWORD *)v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v31 + v35++;
              v31 = v37 & v30;
              v26 = (_QWORD *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v32 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v32;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 8);
      }
      while (v18 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  BOOL v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v4 = *a1;
  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v27 = a3;
    v25 = a2;
    v28 = *a1;
    v26 = *((_DWORD *)a1 + 4);
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v26;
    v4 = v28;
    a2 = v25;
    a3 = v27;
    if (v23)
    {
      v24 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v24 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v24;
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v26;
      v4 = v28;
      a2 = v25;
      a3 = v27;
    }
  }
  v7 = 0;
  v8 = v6[19];
  v9 = *a2;
  v10 = a2[1];
  v11 = __ROR8__(v10 + 16, 16);
  v12 = 0x9DDFEA08EB382D69
      * (v11 ^ ((0x9DDFEA08EB382D69 * (v8 ^ *a2 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ *a2 ^ v11)));
  v13 = v3 - 1;
  v14 = v13 & ((-348639895 * ((v12 >> 47) ^ v12)) ^ v10);
  v15 = 1;
  v16 = (_QWORD *)(v4 + 8 * v14);
  v17 = *v16;
  if (*v16 == -8192)
    goto LABEL_9;
  while (v17 != -4096)
  {
    v18 = *(_QWORD *)(v17 - 16);
    if ((v18 & 2) != 0)
    {
      v19 = *(_QWORD **)(v17 - 32);
      if (v9 != *v19)
        goto LABEL_9;
    }
    else
    {
      v19 = (_QWORD *)(v17 - 16 - 8 * ((v18 >> 2) & 0xF));
      if (v9 != *v19)
        goto LABEL_9;
    }
    if (v10 == v19[1])
    {
      result = 1;
      *a3 = v16;
      return result;
    }
    do
    {
LABEL_9:
      if (v7)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v7 = v16;
      v21 = v14 + v15++;
      v14 = v21 & v13;
      v16 = (_QWORD *)(v4 + 8 * v14);
      v17 = *v16;
    }
    while (*v16 == -8192);
  }
  result = 0;
  if (v7)
    v16 = v7;
  *a3 = v16;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(*a2 - 16);
    if ((v4 & 2) != 0)
      v5 = *(uint64_t **)(*a2 - 32);
    else
      v5 = (uint64_t *)(*a2 - 16 - 8 * ((v4 >> 2) & 0xF));
    v8 = *a1;
    v10 = *v5;
    v9 = v5[1];
    v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v11 & 1) == 0)
    {
      v27 = a3;
      v24 = a2;
      v28 = *a1;
      v25 = *((_DWORD *)a1 + 4);
      v29 = v9;
      v26 = v10;
      v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v10 = v26;
      a3 = v27;
      v8 = v28;
      v9 = v29;
      v3 = v25;
      a2 = v24;
      if (v22)
      {
        v23 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v23 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v23;
        v12 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v10 = v26;
        a3 = v27;
        v8 = v28;
        v9 = v29;
        v3 = v25;
        a2 = v24;
      }
    }
    v13 = __ROR8__(v9 + 16, 16);
    v14 = 0x9DDFEA08EB382D69 * (v12[19] ^ v10 ^ v13);
    LODWORD(v14) = (-348639895
                  * ((((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 32) >> 15) ^ (-348639895 * (v13 ^ (v14 >> 47) ^ v14)))) ^ v9;
    v15 = v3 - 1;
    v16 = (v3 - 1) & v14;
    v6 = (_QWORD *)(v8 + 8 * v16);
    v17 = *v6;
    if (*a2 == *v6)
    {
      result = 1;
      *a3 = v6;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      result = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v6;
        v21 = v16 + v19++;
        v16 = v21 & v15;
        v6 = (_QWORD *)(v8 + 8 * (v21 & v15));
        v17 = *v6;
        if (*a2 == *v6)
          goto LABEL_5;
      }
      result = 0;
      if (v18)
        v6 = v18;
      *a3 = v6;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
LABEL_5:
    *a3 = v6;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = v4;
      do
      {
        if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, v20, &v28);
          *v28 = *(_QWORD *)v20;
          ++*(_DWORD *)(a1 + 8);
        }
        v20 = (llvm *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t result;
  int v25;
  unint64_t v26;
  _OWORD v27[4];
  _OWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v15 = 0;
    result = 0;
    goto LABEL_32;
  }
  v6 = *a1;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v8 & 1) == 0)
  {
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v25)
    {
      v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v26 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v9 = *a2;
  v30 = v7[19];
  *(_QWORD *)&v27[0] = v9;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v27, 0, (_QWORD *)v27 + 1, (char *)v28, a2 + 1, (int *)a2 + 4, a2 + 3, a2 + 4, (int *)a2 + 10, a2 + 6);
  v11 = 0;
  v12 = (v4 - 1) & v10;
  v13 = *a2;
  v14 = 1;
  v15 = (_QWORD *)(v6 + 8 * v12);
  v16 = *v15;
  if (*v15 == -8192)
    goto LABEL_21;
  while (v16 != -4096)
  {
    v17 = v16 - 16;
    v18 = *(_QWORD *)(v16 - 16);
    if ((v18 & 2) != 0)
    {
      v19 = *(_QWORD **)(v16 - 32);
      if (v13 != *v19)
        goto LABEL_21;
    }
    else
    {
      v19 = (_QWORD *)(v17 - 8 * ((v18 >> 2) & 0xF));
      if (v13 != *v19)
        goto LABEL_21;
    }
    if (a2[1] == v19[1] && *((_DWORD *)a2 + 4) == *(_DWORD *)(v16 + 16))
    {
      v20 = (v18 & 2) != 0 ? *(_QWORD *)(v16 - 32) : v17 - 8 * ((v18 >> 2) & 0xF);
      if (a2[3] == *(_QWORD *)(v20 + 16)
        && a2[4] == *(_QWORD *)(v20 + 24)
        && *((_DWORD *)a2 + 10) == *(_DWORD *)(v16 + 20))
      {
        v21 = (v18 & 2) != 0 ? *(_QWORD *)(v16 - 32) : v17 - 8 * ((v18 >> 2) & 0xF);
        if (a2[6] == *(_QWORD *)(v21 + 32))
        {
          result = 1;
          goto LABEL_32;
        }
      }
    }
    do
    {
LABEL_21:
      if (v11)
        v22 = 0;
      else
        v22 = v16 == -8192;
      if (v22)
        v11 = v15;
      v23 = v12 + v14++;
      v12 = v23 & (v4 - 1);
      v15 = (_QWORD *)(v6 + 8 * v12);
      v16 = *v15;
    }
    while (*v15 == -8192);
  }
  result = 0;
  if (v11)
    v15 = v11;
LABEL_32:
  *a3 = v15;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucket<llvm::DIObjCProperty * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int HashValue;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  HashValue = llvm::MDNodeInfo<llvm::DIObjCProperty>::getHashValue(*a3);
  v13 = v11 - 1;
  v8 = *a3;
  v14 = HashValue & (v11 - 1);
  a2 = (uint64_t *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::MDNodeInfo<llvm::DIObjCProperty>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  _OWORD v15[4];
  char v16[48];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 - 16);
  if ((v1 & 2) != 0)
    v2 = *(_QWORD *)(a1 - 32);
  else
    v2 = a1 - 16 - 8 * ((v1 >> 2) & 0xF);
  v9 = *(_QWORD *)v2;
  v10 = *(_QWORD *)(v2 + 8);
  v3 = *(_DWORD *)(a1 + 20);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_OWORD *)(v2 + 16);
  v13 = v3;
  v14 = *(_QWORD *)(v2 + 32);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v18 = v5[19];
  *(_QWORD *)&v15[0] = v9;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v15, 0, (_QWORD *)v15 + 1, v16, &v10, &v11, (uint64_t *)&v12, (uint64_t *)&v12 + 1, &v13, &v14);
}

int64x2_t *llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MDNodeInfo<llvm::DIObjCProperty>::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  unint64_t v24;
  _OWORD v25[4];
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_30;
  }
  v6 = *a1;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v8 & 1) == 0)
  {
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v23)
    {
      v24 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v24 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v24;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v28 = v7[19];
  LODWORD(v25[0]) = *(_DWORD *)a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v25, 0, (_OWORD *)((char *)v25 + 4), (char *)v26, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24), (int *)(a2 + 32), (uint64_t *)(a2 + 40), (uint64_t *)(a2 + 48));
  v10 = 0;
  v11 = (v4 - 1) & v9;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = 1;
  v14 = (_QWORD *)(v6 + 8 * v11);
  v15 = *v14;
  if (*v14 == -8192)
    goto LABEL_17;
  while (v15 != -4096)
  {
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v15 + 2))
    {
      v16 = v15 - 16;
      v17 = *(_QWORD *)(v15 - 16);
      if ((v17 & 2) != 0)
      {
        v18 = *(_QWORD **)(v15 - 32);
        if (v12 != *v18)
          goto LABEL_17;
      }
      else
      {
        v18 = (_QWORD *)(v16 - 8 * ((v17 >> 2) & 0xF));
        if (v12 != *v18)
          goto LABEL_17;
      }
      if (*(_QWORD *)(a2 + 16) == v18[1]
        && *(_QWORD *)(a2 + 24) == v18[3]
        && *(_DWORD *)(a2 + 32) == *(_DWORD *)(v15 + 4))
      {
        v19 = (v17 & 2) != 0 ? *(_QWORD *)(v15 - 32) : v16 - 8 * ((v17 >> 2) & 0xF);
        if (*(_QWORD *)(a2 + 40) == *(_QWORD *)(v19 + 16) && *(_QWORD *)(a2 + 48) == *(_QWORD *)(v19 + 32))
        {
          result = 1;
          goto LABEL_30;
        }
      }
    }
    do
    {
LABEL_17:
      if (v10)
        v20 = 0;
      else
        v20 = v15 == -8192;
      if (v20)
        v10 = v14;
      v21 = v11 + v13++;
      v11 = v21 & (v4 - 1);
      v14 = (_QWORD *)(v6 + 8 * v11);
      v15 = *v14;
    }
    while (*v14 == -8192);
  }
  result = 0;
  if (v10)
    v14 = v10;
LABEL_30:
  *a3 = v14;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucket<llvm::DIImportedEntity * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int HashValue;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  HashValue = llvm::MDNodeInfo<llvm::DIImportedEntity>::getHashValue(*a3);
  v13 = v11 - 1;
  v8 = *a3;
  v14 = HashValue & (v11 - 1);
  a2 = (uint64_t *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (uint64_t *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

unint64_t llvm::MDNodeInfo<llvm::DIImportedEntity>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[4];
  char v15[48];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 - 16);
  v8 = *(unsigned __int16 *)(a1 + 2);
  if ((v1 & 2) != 0)
    v2 = *(_QWORD *)(a1 - 32);
  else
    v2 = a1 - 16 - 8 * ((v1 >> 2) & 0xF);
  v9 = *(_OWORD *)v2;
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = *(_QWORD *)(v2 + 32);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  v17 = v4[19];
  LODWORD(v14[0]) = v8;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v14, 0, (_OWORD *)((char *)v14 + 4), v15, (uint64_t *)&v9, (uint64_t *)&v9 + 1, &v10, &v11, &v12, &v13);
}

int64x2_t *llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = (uint64_t *)v4;
      do
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MDNodeInfo<llvm::DIImportedEntity>::getHashValue(*v18);
          v30 = v28 - 1;
          v31 = *v18;
          v32 = HashValue & (v28 - 1);
          v26 = (uint64_t *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (uint64_t *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v18;
      }
      while (v18 != (uint64_t *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v7 = llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>((_DWORD *)a2, (int *)(a2 + 4), (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = 1;
  v12 = (_QWORD *)(v6 + 8 * v9);
  v13 = *v12;
  if (*v12 == -8192)
    goto LABEL_10;
  while (v13 != -4096)
  {
    if (*(_DWORD *)a2 == *(unsigned __int16 *)(v13 + 2) && *(_DWORD *)(a2 + 4) == *(_DWORD *)(v13 + 4))
    {
      v14 = *(_QWORD *)(v13 - 16);
      if ((v14 & 2) != 0)
      {
        v15 = *(_QWORD **)(v13 - 32);
        if (v10 != *v15)
          goto LABEL_10;
      }
      else
      {
        v15 = (_QWORD *)(v13 - 16 - 8 * ((v14 >> 2) & 0xF));
        if (v10 != *v15)
          goto LABEL_10;
      }
      if (*(_QWORD *)(a2 + 16) == v15[1])
      {
        result = 1;
        *a3 = v12;
        return result;
      }
    }
    do
    {
LABEL_10:
      if (v8)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v8 = v12;
      v17 = v9 + v11++;
      v9 = v17 & (v4 - 1);
      v12 = (_QWORD *)(v6 + 8 * v9);
      v13 = *v12;
    }
    while (*v12 == -8192);
  }
  result = 0;
  if (v8)
    v12 = v8;
  *a3 = v12;
  return result;
}

unint64_t llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(_DWORD *a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v6;
  char *v7;
  char *v8;
  char *v9;
  int v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD v18[4];
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  if ((v6 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    a2 = v13;
    a1 = v14;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a2 = v13;
      a1 = v14;
    }
  }
  v21 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LODWORD(v18[0]) = *a1;
  v15 = 0;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v18, (uint64_t *)&v15, (_DWORD *)v18 + 1, (unint64_t)v19, *a2);
  v16 = v15;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v16, v7, (unint64_t)v19, *a3);
  v17 = v16;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v17, v8, (unint64_t)v19, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v18, v17, v9, (char *)v19);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  char *result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = *a2;
    v9 = *(_DWORD *)(*a2 + 4);
    v22 = *(unsigned __int16 *)(*a2 + 2);
    v23 = v9;
    v10 = *(_QWORD *)(v8 - 16);
    if ((v10 & 2) != 0)
      v11 = *(uint64_t **)(v8 - 32);
    else
      v11 = (uint64_t *)(v8 - 16 - 8 * ((v10 >> 2) & 0xF));
    v24 = *v11;
    v25 = v11[1];
    v15 = (v6 - 1) & llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(&v22, &v23, &v24, &v25);
    result = (char *)(v7 + 8 * v15);
    v16 = *(_QWORD *)result;
    if (*a2 == *(_QWORD *)result)
    {
      v14 = 0;
      goto LABEL_9;
    }
    v18 = 0;
    v19 = 1;
    while (v16 != -4096)
    {
      v14 = 0;
      if (v18)
        v20 = 0;
      else
        v20 = v16 == -8192;
      if (v20)
        v18 = result;
      v21 = v15 + v19++;
      v15 = v21 & (v6 - 1);
      result = (char *)(v7 + 8 * v15);
      v16 = *(_QWORD *)result;
      if (*a2 == *(_QWORD *)result)
        goto LABEL_9;
    }
    if (v18)
      v12 = v18;
    else
      v12 = result;
  }
  else
  {
    v12 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucket<llvm::DIMacro * const&,llvm::detail::DenseSetEmpty&>(a1, v12, a2);
  v14 = 1;
LABEL_9:
  v17 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucket<llvm::DIMacro * const&,llvm::detail::DenseSetEmpty&>(unint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int64x2_t *buffer;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(a1, v10, &v10[v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(8 * v6));
  }
  v16 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v19 = (char *)buffer;
  if (v18 < 3)
    goto LABEL_37;
  v20 = v18 + 1;
  v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v21 = buffer + 1;
  v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v21[-1] = v22;
    *v21 = v22;
    v21 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_37:
    do
    {
      *(_QWORD *)v19 = -4096;
      v19 += 8;
    }
    while (v19 != (char *)buffer + 8 * v17);
  }
  v24 = *a3;
  v25 = *(_DWORD *)(*a3 + 4);
  v34 = *(unsigned __int16 *)(*a3 + 2);
  v35 = v25;
  v26 = *(_QWORD *)(v24 - 16);
  if ((v26 & 2) != 0)
    v27 = *(uint64_t **)(v24 - 32);
  else
    v27 = (uint64_t *)(v24 - 16 - 8 * ((v26 >> 2) & 0xF));
  v36 = *v27;
  v37 = v27[1];
  v28 = (v17 - 1) & llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(&v34, &v35, &v36, &v37);
  v7 = *a3;
  a2 = &v16->i8[8 * v28];
  v29 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v30 = 0;
    v31 = 1;
    while (v29 != -4096)
    {
      if (v30)
        v32 = 0;
      else
        v32 = v29 == -8192;
      if (v32)
        v30 = a2;
      v33 = v28 + v31++;
      v28 = v33 & (v17 - 1);
      a2 = &v16->i8[8 * v28];
      v29 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v30)
      a2 = v30;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  return a2;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v21 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v22 = *(_QWORD *)v5;
        v23 = *(_DWORD *)(v5 + 16);
        v24 = *(_DWORD *)(v21 + 4);
        v30 = *(unsigned __int16 *)(v21 + 2);
        v31 = v24;
        v25 = *(_QWORD *)(v21 - 16);
        if ((v25 & 2) != 0)
          v15 = *(uint64_t **)(v21 - 32);
        else
          v15 = (uint64_t *)(v21 - 16 - 8 * ((v25 >> 2) & 0xF));
        v32 = *v15;
        v33 = v15[1];
        result = llvm::hash_combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(&v30, &v31, &v32, &v33);
        v16 = v23 - 1;
        v17 = (v23 - 1) & result;
        v18 = *v4;
        v19 = (_QWORD *)(v22 + 8 * v17);
        v20 = *v19;
        if (*v4 != *v19)
        {
          v26 = 0;
          v27 = 1;
          while (v20 != -4096)
          {
            if (v26)
              v28 = 0;
            else
              v28 = v20 == -8192;
            if (v28)
              v26 = v19;
            v29 = v17 + v27++;
            v17 = v29 & v16;
            v19 = (_QWORD *)(v22 + 8 * (v29 & v16));
            v20 = *v19;
            if (v18 == *v19)
              goto LABEL_12;
          }
          if (v26)
            v19 = v26;
        }
LABEL_12:
        *v19 = v18;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucket<llvm::DIArgList * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(a1, v7);
  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(*a3 + 128), *(_QWORD *)(*a3 + 128) + 8 * *(unsigned int *)(*a3 + 136));
  v13 = v11 - 1;
  v14 = (v11 - 1) & v12;
  v8 = *a3;
  a2 = (_QWORD *)(v10 + 8 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v10 + 8 * (v19 & v13));
      v15 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v16)
      a2 = v16;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

int64x2_t *llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::DIArgListInfo,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  llvm *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          v29 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(*(_QWORD *)v18 + 128), *(_QWORD *)(*(_QWORD *)v18 + 128) + 8 * *(unsigned int *)(*(_QWORD *)v18 + 136));
          v30 = v28 - 1;
          v31 = (v28 - 1) & v29;
          v32 = *(_QWORD *)v18;
          v26 = (_QWORD *)((char *)v27 + 8 * v31);
          v33 = *v26;
          if (*(_QWORD *)v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v31 + v35++;
              v31 = v37 & v30;
              v26 = (_QWORD *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v32 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v32;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 8);
      }
      while (v18 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

double _GLOBAL__sub_I_DebugInfoMetadata_cpp()
{
  double result;
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Enable adding flow sensitive discriminators";
  *((_QWORD *)&v1 + 1) = 43;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [38],llvm::cl::OptionHidden,llvm::cl::desc>((uint64_t)&llvm::EnableFSDiscriminator, (int8x16_t *)"enable-fs-discriminator", &v2, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::EnableFSDiscriminator, &dword_18013D000);
  result = NAN;
  llvm::DebugVariable::DefaultFragment = xmmword_181234BE0;
  return result;
}

llvm::DPValue *llvm::DPValue::DPValue(llvm::DPValue *this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *(_QWORD *)(*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 24);
  llvm::DebugValueUser::trackDebugValue((uint64_t)this + 16);
  *((_QWORD *)this + 3) = *(_QWORD *)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4] + 24);
  v4 = *(_QWORD *)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8] + 24);
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = v5;
  *((_QWORD *)this + 4) = v4;
  if (v5)
    llvm::MetadataTracking::track((uint64_t)this + 40, v5, 1);
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 12) = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36) == 64;
  return this;
}

char *llvm::DPValue::createDebugIntrinsic(llvm::DPValue *this, llvm::Module *a2, llvm::Instruction *a3)
{
  char *v6;
  uint64_t CallableRegion;
  unint64_t v8;
  unsigned __int8 *v9;
  char *v10;
  llvm::Metadata *v11;
  uint64_t v12;
  llvm::MetadataAsValue *v13;
  llvm::Metadata *v14;
  llvm::Metadata *v15;
  int v16;
  uint64_t Declaration;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  unsigned __int8 *v24;
  const char *v25[4];
  __int16 v26;
  uint64_t v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 5);
  v25[0] = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)v25, (unsigned __int8 *)v6, 1);
  CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v25);
  v8 = *(_QWORD *)(CallableRegion - 16);
  if ((v8 & 2) != 0)
  {
    llvm::DILocalScope::getSubprogram(**(unsigned __int8 ***)(CallableRegion - 32));
    v9 = (unsigned __int8 *)v25[0];
    if (!v25[0])
      goto LABEL_8;
    goto LABEL_7;
  }
  llvm::DILocalScope::getSubprogram(*(unsigned __int8 **)(CallableRegion - 16 - 8 * ((v8 >> 2) & 0xF)));
  v9 = (unsigned __int8 *)v25[0];
  if (v25[0])
LABEL_7:
    llvm::MetadataTracking::untrack((uint64_t)v25, v9);
LABEL_8:
  v10 = (char *)*((_QWORD *)this + 5);
  v25[0] = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)v25, (unsigned __int8 *)v10, 1);
  v12 = *(_QWORD *)(mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)v25) + 8);
  v13 = (llvm::MetadataAsValue *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = *(llvm::MetadataAsValue **)v13;
  if (v25[0])
    llvm::MetadataTracking::untrack((uint64_t)v25, (unsigned __int8 *)v25[0]);
  v27[0] = (uint64_t)llvm::MetadataAsValue::get(v13, *((llvm::LLVMContext **)this + 2), v11);
  v27[1] = (uint64_t)llvm::MetadataAsValue::get(v13, *((llvm::LLVMContext **)this + 3), v14);
  v27[2] = (uint64_t)llvm::MetadataAsValue::get(v13, *((llvm::LLVMContext **)this + 4), v15);
  if (*((_DWORD *)this + 12))
    v16 = 64;
  else
    v16 = 62;
  Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)a2, v16, 0, 0);
  v18 = *(_QWORD *)(Declaration + 24);
  v26 = 257;
  v19 = llvm::CallInst::Create(v18, Declaration, v27, 3, 0, 0, v25, 0);
  *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xFFFC | 1;
  v20 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v24 = v20;
  if (v20)
    llvm::MetadataTracking::track((uint64_t)&v24, v20, 1);
  v21 = (unsigned __int8 **)(v19 + 48);
  if (v19 + 48 == (char *)&v24)
  {
    if (v24)
      llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  }
  else
  {
    if (*v21)
      llvm::MetadataTracking::untrack((uint64_t)(v19 + 48), *v21);
    v22 = v24;
    *v21 = v24;
    if (v22)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v24, v22, (uint64_t)(v19 + 48));
      v24 = 0;
    }
  }
  if (a3)
    llvm::Instruction::insertBefore((llvm::Instruction *)v19, a3);
  return v19;
}

uint64_t llvm::DPValue::handleChangedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1 + 16;
  llvm::DebugValueUser::untrackDebugValue((unsigned __int8 **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = a2;
  return llvm::DebugValueUser::trackDebugValue(v4);
}

void llvm::DPMarker::dropDPValues(llvm::DPMarker *this)
{
  _QWORD *v1;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v1 = (_QWORD *)((char *)this + 8);
  if (*((llvm::DPMarker **)this + 1) != (llvm::DPMarker *)((char *)this + 8))
  {
    do
    {
      v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
      v5 = *v3;
      v4 = (unsigned __int8 **)v3[1];
      *v4 = *v3;
      *((_QWORD *)v5 + 1) = v4;
      *v3 = 0;
      v3[1] = 0;
      v6 = v3[5];
      if (v6)
        llvm::MetadataTracking::untrack((uint64_t)(v3 + 5), v6);
      llvm::DebugValueUser::untrackDebugValue(v3 + 2);
      operator delete(v3);
    }
    while ((_QWORD *)*v1 != v1);
  }
}

void llvm::DPMarker::removeMarker(llvm::DPMarker *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **NextMarker;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  v2 = *(_QWORD *)this;
  v3 = (uint64_t *)((char *)this + 8);
  if (*((llvm::DPMarker **)this + 1) != (llvm::DPMarker *)((char *)this + 8))
  {
    NextMarker = llvm::BasicBlock::getNextMarker(*(uint64_t ****)(v2 + 40), v2);
    if (NextMarker)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 2);
      if (v5 == v3)
        goto LABEL_13;
    }
    else
    {
      NextMarker = (uint64_t **)operator new(0x18uLL);
      *NextMarker = 0;
      NextMarker[1] = (uint64_t *)(NextMarker + 1);
      NextMarker[2] = (uint64_t *)(NextMarker + 1);
      llvm::BasicBlock::setTrailingDPValues(*(uint64_t ****)(v2 + 40), NextMarker);
      v5 = (uint64_t *)*((_QWORD *)this + 2);
      if (v5 == v3)
      {
LABEL_13:
        if (*(_QWORD *)this)
        {
          *(_QWORD *)(*(_QWORD *)this + 64) = 0;
          *(_QWORD *)this = 0;
        }
        while ((uint64_t *)*v3 != v3)
        {
          v11 = (unsigned __int8 **)*((_QWORD *)this + 2);
          v13 = *v11;
          v12 = (unsigned __int8 **)v11[1];
          *v12 = *v11;
          *((_QWORD *)v13 + 1) = v12;
          *v11 = 0;
          v11[1] = 0;
          v14 = v11[5];
          if (v14)
            llvm::MetadataTracking::untrack((uint64_t)(v11 + 5), v14);
          llvm::DebugValueUser::untrackDebugValue(v11 + 2);
          operator delete(v11);
        }
        operator delete(this);
        return;
      }
    }
    v6 = NextMarker[2];
    v7 = v5;
    do
    {
      v7[7] = (uint64_t)NextMarker;
      v7 = (uint64_t *)v7[1];
    }
    while (v7 != v3);
    if (v6 != v3)
    {
      v8 = (_QWORD *)*v3;
      v9 = *v5;
      *(_QWORD *)(v9 + 8) = v3;
      *v3 = v9;
      v10 = *v6;
      v8[1] = v6;
      *v5 = v10;
      *(_QWORD *)(v10 + 8) = v5;
      *v6 = (uint64_t)v8;
    }
    goto LABEL_13;
  }
  if (v2)
    *(_QWORD *)(v2 + 64) = 0;
  operator delete(this);
  *(_QWORD *)(v2 + 64) = 0;
}

void llvm::DPMarker::eraseFromParent(llvm::DPMarker *this)
{
  _QWORD *i;
  _QWORD *v3;
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 64) = 0;
    *(_QWORD *)this = 0;
  }
  v3 = (_QWORD *)((char *)this + 8);
  for (i = (_QWORD *)*((_QWORD *)this + 1); i != v3; i = (_QWORD *)*v3)
  {
    v4 = (unsigned __int8 **)*((_QWORD *)this + 2);
    v6 = *v4;
    v5 = (unsigned __int8 **)v4[1];
    *v5 = *v4;
    *((_QWORD *)v6 + 1) = v5;
    *v4 = 0;
    v4[1] = 0;
    v7 = v4[5];
    if (v7)
      llvm::MetadataTracking::untrack((uint64_t)(v4 + 5), v7);
    llvm::DebugValueUser::untrackDebugValue(v4 + 2);
    operator delete(v4);
  }
  operator delete(this);
}

uint64_t llvm::DPMarker::absorbDebugValues(uint64_t result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = (uint64_t *)(a2 + 8);
    v5 = *(uint64_t **)(a2 + 16);
    if (v5 == (uint64_t *)(a2 + 8))
      return result;
  }
  else
  {
    v3 = (uint64_t *)(result + 8);
    v4 = (uint64_t *)(a2 + 8);
    v5 = *(uint64_t **)(a2 + 16);
    if (v5 == (uint64_t *)(a2 + 8))
      return result;
  }
  v6 = v5;
  do
  {
    v6[7] = result;
    v6 = (uint64_t *)v6[1];
  }
  while (v6 != v4);
  if (v3 != v4 && v5 != v4)
  {
    v7 = *v4;
    v8 = *v5;
    *(_QWORD *)(v8 + 8) = v4;
    *v4 = v8;
    v9 = *v3;
    *(_QWORD *)(v7 + 8) = v3;
    *v5 = v9;
    *(_QWORD *)(v9 + 8) = v5;
    *v3 = v7;
  }
  return result;
}

uint64_t llvm::DPMarker::getDbgValueRange(llvm::DPMarker *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::DPMarker::insertDPValue(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = *v3;
    *a2 = *v3;
    a2[1] = (uint64_t)v3;
    *(_QWORD *)(v4 + 8) = a2;
    *v3 = (uint64_t)a2;
  }
  else
  {
    v5 = *(_QWORD *)(result + 8);
    *a2 = v5;
    a2[1] = result + 8;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 8) = a2;
  }
  a2[7] = result;
  return result;
}

unsigned __int8 **llvm::DebugLoc::DebugLoc(unsigned __int8 **a1, unsigned __int8 *a2)
{
  *a1 = a2;
  if (a2)
    llvm::MetadataTracking::track((uint64_t)a1, a2, 1);
  return a1;
}

void `anonymous namespace'::PassRemarksOpt::~PassRemarksOpt(_anonymous_namespace_::PassRemarksOpt *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t llvm::DiagnosticHandler::isAnalysisRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1ECD343E0;
  if (qword_1ECD343E0)
    return llvm::Regex::match(qword_1ECD343E0, a2, a3, 0, 0);
  return result;
}

uint64_t llvm::DiagnosticHandler::isMissedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1ECD343D0;
  if (qword_1ECD343D0)
    return llvm::Regex::match(qword_1ECD343D0, a2, a3, 0, 0);
  return result;
}

uint64_t llvm::DiagnosticHandler::isPassedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = _MergedGlobals_63;
  if (_MergedGlobals_63)
    return llvm::Regex::match(_MergedGlobals_63, a2, a3, 0, 0);
  return result;
}

BOOL llvm::DiagnosticHandler::isAnyRemarkEnabled(llvm::DiagnosticHandler *this)
{
  return _MergedGlobals_63 | qword_1ECD343D0 || qword_1ECD343E0 != 0;
}

BOOL llvm::DiagnosticHandler::handleDiagnostics(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t, _QWORD);

  v2 = *(void (**)(uint64_t, _QWORD))(a1 + 16);
  if (v2)
    v2(a2, *(_QWORD *)(a1 + 8));
  return v2 != 0;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  int v13;
  void *v14;
  uint64_t *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  void *__p[2];
  unint64_t v25;
  void **v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void **v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34[5];
  uint64_t v35[5];
  __int128 __dst;
  int64_t v37;
  void *v38[2];
  uint64_t v39;

  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  if (!__src)
  {
    __dst = 0uLL;
    v37 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_33;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v37 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_11:
    memmove(p_dst, __src, __len);
    *((_BYTE *)p_dst + __len) = 0;
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  HIBYTE(v37) = __len;
  p_dst = &__dst;
  if (__len)
    goto LABEL_11;
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_12:
  operator delete(__p[0]);
LABEL_13:
  v25 = v37;
  *(_OWORD *)__p = __dst;
  v13 = SHIBYTE(v37);
  if (v37 >= 0)
    v14 = (void *)HIBYTE(v25);
  else
    v14 = __p[1];
  if (v14)
  {
    v15 = *(uint64_t **)(a1 + 128);
    v16 = operator new(0x28uLL);
    v16[2] = 0;
    *v16 = &unk_1E0E51D30;
    v16[1] = 0;
    if (v13 >= 0)
      v17 = (char *)__p;
    else
      v17 = (char *)__p[0];
    v18 = llvm::Regex::Regex((uint64_t)(v16 + 3), v17, (uint64_t)v14, 0);
    v19 = (std::__shared_weak_count *)v15[1];
    *v15 = v18;
    v15[1] = (uint64_t)v16;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    if (!llvm::Regex::isValid(*v15, (uint64_t)v38))
    {
      v32 = "Invalid regular expression '";
      v33 = 259;
      v31 = 260;
      v30 = __p;
      llvm::operator+((uint64_t *)&v32, (uint64_t *)&v30, (uint64_t)v34);
      v28 = "' in -pass-remarks: ";
      v29 = 259;
      llvm::operator+(v34, (uint64_t *)&v28, (uint64_t)v35);
      v27 = 260;
      v26 = v38;
      llvm::operator+(v35, (uint64_t *)&v26, (uint64_t)&__dst);
      llvm::report_fatal_error((llvm::Twine *)&__dst, 0);
    }
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
  }
  *(_WORD *)(a1 + 12) = a2;
  v22 = *(_QWORD *)(a1 + 176);
  if (!v22)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_33:
    abort();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, __p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &off_1E0E23178;
  v2 = __p + 152;
  v3 = (char *)*((_QWORD *)__p + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 144, a1);
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

void llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 128);
  v2 = (std::__shared_weak_count *)v1[1];
  *v1 = 0;
  v1[1] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<llvm::Regex>::__on_zero_shared(uint64_t a1)
{
  llvm::Regex::~Regex((void **)(a1 + 24));
}

uint64_t llvm::cl::OptionValueBase<`anonymous namespace'::PassRemarksOpt,true>::compare()
{
  return 0;
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F810;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F810;
}

uint64_t std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_114PassRemarksOptELb1ENS0_6parserINSt3__112basic_stringIcNS5_11char_tra"
                     "itsIcEENS5_9allocatorIcEEEEEEEUlRKSB_E_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114PassRemarksOptELb1ENS0_6parserINSt3__112basic_stringIcNS5"
                                "_11char_traitsIcEENS5_9allocatorIcEEEEEEEUlRKSB_E_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_114PassRemarksOptELb1ENS0_6parserINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEUlRKSB_E_E"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114PassRemarksOptELb1ENS0_6parserINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEUlRKSB_E_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

uint64_t llvm::DiagnosticInfoDebugMetadataVersion::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring debug info with an invalid version (");
  v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 104))(v3, *(unsigned int *)(a1 + 24));
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ") in ");
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 144))(v5, *(_QWORD *)(a1 + 16));
}

uint64_t llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring invalid debug info in ");
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, *(_QWORD *)(a1 + 16) + 160);
}

llvm::MDString *llvm::DiagnosticLocation::getRelativePath(llvm::DiagnosticLocation *this)
{
  unint64_t v1;
  llvm::MDString *result;

  v1 = *(_QWORD *)(*(_QWORD *)this - 16);
  if ((v1 & 2) == 0)
  {
    result = *(llvm::MDString **)(*(_QWORD *)this - 16 - 8 * ((v1 >> 2) & 0xF));
    if (!result)
      return result;
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  result = **(llvm::MDString ***)(*(_QWORD *)this - 32);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char a2)
{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  void *v6;

  v5 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (a3 > *((_QWORD *)v5 + 3) - (_QWORD)v6)
  {
    llvm::raw_ostream::write(v5, a2, a3);
    return a1;
  }
  if (!a3)
    return a1;
  memcpy(v6, a2, a3);
  *((_QWORD *)v5 + 4) += a3;
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char *__s)
{
  llvm::raw_ostream *v4;
  size_t v5;
  void *v6;

  if (!__s)
    return a1;
  v4 = *(llvm::raw_ostream **)(a1 + 8);
  v5 = strlen(__s);
  v6 = (void *)*((_QWORD *)v4 + 4);
  if (v5 > *((_QWORD *)v4 + 3) - (_QWORD)v6)
  {
    llvm::raw_ostream::write(v4, __s, v5);
    return a1;
  }
  if (!v5)
    return a1;
  memcpy(v6, __s, v5);
  *((_QWORD *)v4 + 4) += v5;
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const char *a2)
{
  llvm::raw_ostream *v3;
  size_t v4;
  size_t v5;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v5 = v4;
  }
  llvm::raw_ostream::write(v3, a2, v5);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, int a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, double a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Twine *this)
{
  llvm::Twine::print(this, *(llvm::raw_ostream **)(a1 + 8));
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Value *this)
{
  llvm::raw_ostream *v3;
  size_t v4;
  const char *Name;
  size_t v6;
  void *v7;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  Name = llvm::Value::getName(this);
  v6 = v4;
  v7 = (void *)*((_QWORD *)v3 + 4);
  if (v4 > *((_QWORD *)v3 + 3) - (_QWORD)v7)
  {
    llvm::raw_ostream::write(v3, Name, v4);
    return a1;
  }
  if (!v4)
    return a1;
  memcpy(v7, Name, v4);
  *((_QWORD *)v3 + 4) += v6;
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 160);
  v4 = a2 + 160;
  v5 = v6;
  v7 = *(_QWORD *)(v4 + 8);
  if (*(char *)(v4 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else
  {
    v4 = v5;
    v8 = v7;
  }
  llvm::raw_ostream::write(v3, (const char *)v4, v8);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::SMDiagnostic *this)
{
  llvm::SMDiagnostic::print(this, "", *(llvm::raw_ostream **)(a1 + 8), 1, 0);
  return a1;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v21 = 1;
    while (v15 != -4096)
    {
      v22 = v4 + v21++;
      v4 = v22 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        if (v14 != v11)
          goto LABEL_16;
        return 1;
      }
    }
    return 1;
  }
  if (v14 == v11)
    return 1;
LABEL_16:
  v16 = v14[1];
  if (v16 == v12 || v16 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v16 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v16)
    return 0;
  v18 = *(_DWORD *)(v12 + 16);
  if (v18 >= *(_DWORD *)(v16 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72))
      return 0;
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  v19 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v19;
  if (v19 > 0x20)
  {
    llvm::DominatorTreeBase<mlir::Block,false>::updateDFSNumbers(a1);
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72))
      return 0;
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  do
  {
    v20 = v16;
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16 && *(_DWORD *)(v16 + 16) >= v18);
  return v20 == v12;
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1)
{
  llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch(a1, 0);
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *Node;
  char *v21;
  uint64_t v22;
  char *v23;
  void *__p;
  _QWORD *v25;
  _QWORD *v26;
  llvm *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *__src;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  llvm::DominatorTreeBase<mlir::Block,false>::reset(a1);
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (!v5)
    {
      v7 = 0;
      goto LABEL_23;
    }
    v6 = *(_QWORD *)(a2 + 8);
    v7 = a2;
    if (v5 == v6)
      goto LABEL_23;
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(*(_QWORD *)(a2 + 8), *(_DWORD **)(a2 + 16));
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(v6 + 296, (_DWORD *)(v5 + 296));
    *(_BYTE *)(v6 + 592) = *(_BYTE *)(v5 + 592);
    v8 = (void **)(v6 + 600);
    v9 = *(unsigned int *)(v5 + 608);
    v10 = *(unsigned int *)(v6 + 608);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*v8, *(const void **)(v5 + 600), 16 * v9);
      goto LABEL_22;
    }
    if (*(_DWORD *)(v6 + 612) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*v8, *(const void **)(v5 + 600), 16 * v10);
        v11 = *(unsigned int *)(v5 + 608);
        if (v10 == v11)
        {
LABEL_22:
          *(_DWORD *)(v6 + 608) = v9;
          v4 = *(_QWORD *)(a1 + 56);
          v7 = a2;
LABEL_23:
          v16 = operator new(8uLL);
          __p = v16;
          *v16 = 0;
          v25 = v16 + 1;
          v26 = v16 + 1;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = v7;
          __src = v33;
          v17 = *(_QWORD *)(v4 + 80);
          if (v17)
            v18 = v17 - 24;
          else
            v18 = 0;
          v33[0] = v18;
          v32 = 0x100000001;
          if (&__src == (void **)a1)
            goto LABEL_35;
          if (*(_DWORD *)(a1 + 8))
          {
            **(_QWORD **)a1 = v18;
            goto LABEL_33;
          }
          if (*(_DWORD *)(a1 + 12))
          {
            v19 = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
            v19 = v32;
            if (!(_DWORD)v32)
              goto LABEL_33;
          }
          memcpy(*(void **)a1, __src, 8 * v19);
LABEL_33:
          *(_DWORD *)(a1 + 8) = 1;
          LODWORD(v32) = 0;
          if (__src != v33)
            free(__src);
LABEL_35:
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(uint64_t))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::AlwaysDescend, 0, 0);
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
          *(_BYTE *)a2 = 1;
          if (!*(_DWORD *)(a1 + 8))
            goto LABEL_37;
          goto LABEL_36;
        }
      }
      else
      {
        v10 = 0;
        v11 = *(unsigned int *)(v5 + 608);
        if (!*(_DWORD *)(v5 + 608))
          goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 608) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 600, (void *)(v6 + 616), v9, 16);
      v10 = 0;
      v11 = *(unsigned int *)(v5 + 608);
      if (!*(_DWORD *)(v5 + 608))
        goto LABEL_22;
    }
    memcpy((char *)*v8 + 16 * v10, (const void *)(*(_QWORD *)(v5 + 600) + 16 * v10), 16 * v11 - 16 * v10);
    goto LABEL_22;
  }
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = 0;
  v25 = v12 + 1;
  v26 = v12 + 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  __src = v33;
  v13 = *(_QWORD *)(v4 + 80);
  if (v13)
    v14 = v13 - 24;
  else
    v14 = 0;
  v33[0] = v14;
  v32 = 0x100000001;
  if (&__src == (void **)a1)
  {
LABEL_49:
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(uint64_t))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::AlwaysDescend, 0, 0);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
    if (!*(_DWORD *)(a1 + 8))
    {
LABEL_37:
      if (v29)
      {
        v21 = (char *)v27 + 56;
        v22 = 72 * v29;
        while (1)
        {
          if ((*((_QWORD *)v21 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v23 = (char *)*((_QWORD *)v21 - 2);
            if (v21 != v23)
              free(v23);
          }
          v21 += 72;
          v22 -= 72;
          if (!v22)
            llvm::deallocate_buffer(v27, (void *)(72 * v29));
        }
      }
      llvm::deallocate_buffer(v27, 0);
    }
LABEL_36:
    Node = llvm::DominatorTreeBase<mlir::Block,false>::createNode(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = Node;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::attachNewSubtree((uint64_t)&__p, a1, Node);
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    **(_QWORD **)a1 = v14;
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 12))
  {
    v15 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
    v15 = v32;
    if (!(_DWORD)v32)
      goto LABEL_47;
  }
  memcpy(*(void **)a1, __src, 8 * v15);
LABEL_47:
  *(_DWORD *)(a1 + 8) = 1;
  LODWORD(v32) = 0;
  if (__src != v33)
    free(__src);
  goto LABEL_49;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  _BOOL8 v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v21;
  int v22;

  v3 = 1;
  if (!a2)
    return v3;
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 < 0x1C)
    return v3;
  v5 = *((_QWORD *)a3 + 5);
  v6 = *((_QWORD *)this + 3);
  v7 = *((unsigned int *)this + 10);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == v5)
      goto LABEL_10;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v10 == v5)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_10;
      }
    }
  }
  v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_10:
  v13 = (uint64_t *)(v6 + 16 * v7);
  if (v9 == v13)
    return 1;
  v14 = v9[1];
  v3 = v14 == 0;
  if (!(_DWORD)v7 || !v14)
    return v3;
  v15 = *((_QWORD *)a2 + 5);
  v16 = v7 - 1;
  LODWORD(v17) = ((v15 >> 4) ^ (v15 >> 9)) & v16;
  v18 = (uint64_t *)(v6 + 16 * v17);
  v19 = *v18;
  if (*v18 != v15)
  {
    v21 = 1;
    while (v19 != -4096)
    {
      v22 = v17 + v21++;
      v17 = v22 & v16;
      v19 = *(_QWORD *)(v6 + 16 * v17);
      if (v19 == v15)
      {
        v18 = (uint64_t *)(v6 + 16 * v17);
        if (v18 != v13)
          goto LABEL_15;
        return 0;
      }
    }
    return 0;
  }
  if (v18 == v13)
    return 0;
LABEL_15:
  v3 = 0;
  if (a2 == a3 || !v18[1])
    return v3;
  if (v4 == 33 || v4 == 39 || *((_BYTE *)a3 + 16) == 83)
    return llvm::DominatorTree::dominates(this, a2, *((const llvm::BasicBlock **)a3 + 5));
  if (v15 == v5)
    return llvm::Instruction::comesBefore(a2, a3);
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, *((_QWORD *)a2 + 5), *((_QWORD *)a3 + 5));
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const llvm::BasicBlock *v7;
  int v8;
  int v9;
  const llvm::BasicBlock **v10;
  uint64_t v11;
  _BOOL8 v12;
  const llvm::BasicBlock *v13;
  unsigned int v14;
  const llvm::BasicBlock **v15;
  const llvm::BasicBlock *v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22[2];

  v3 = *((_QWORD *)this + 3);
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v6 = v3 + 16 * v5;
    v7 = *(const llvm::BasicBlock **)v6;
    if (*(const llvm::BasicBlock **)v6 == a3)
      goto LABEL_8;
    v8 = 1;
    while (v7 != (const llvm::BasicBlock *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(const llvm::BasicBlock **)(v3 + 16 * v5);
      if (v7 == a3)
      {
        v6 = v3 + 16 * v5;
        goto LABEL_8;
      }
    }
  }
  v6 = v3 + 16 * v4;
LABEL_8:
  v10 = (const llvm::BasicBlock **)(v3 + 16 * v4);
  if ((const llvm::BasicBlock **)v6 == v10)
    return 1;
  v11 = *(_QWORD *)(v6 + 8);
  v12 = v11 == 0;
  if (!(_DWORD)v4 || !v11)
    return v12;
  v13 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v14 = v4 - 1;
  LODWORD(v4) = ((v13 >> 4) ^ (v13 >> 9)) & (v4 - 1);
  v15 = (const llvm::BasicBlock **)(v3 + 16 * v4);
  v16 = *v15;
  if (*v15 != v13)
  {
    v20 = 1;
    while (v16 != (const llvm::BasicBlock *)-4096)
    {
      v21 = v4 + v20++;
      v4 = v21 & v14;
      v16 = *(const llvm::BasicBlock **)(v3 + 16 * v4);
      if (v16 == v13)
      {
        v15 = (const llvm::BasicBlock **)(v3 + 16 * v4);
        if (v15 != v10)
          goto LABEL_13;
        return 0;
      }
    }
    return 0;
  }
  if (v15 == v10)
    return 0;
LABEL_13:
  if (v15[1])
    v17 = v13 == a3;
  else
    v17 = 1;
  if (v17)
    return 0;
  if (!a2 || *((_BYTE *)a2 + 16) != 33)
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, *((_QWORD *)a2 + 5), (uint64_t)a3);
  v19 = *((_QWORD *)a2 - 12);
  v22[0] = *((_QWORD *)a2 + 5);
  v22[1] = v19;
  return llvm::DominatorTree::dominates((uint64_t)this, v22, (uint64_t)a3);
}

BOOL llvm::DominatorTree::dominates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::BasicBlock *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;

  v5 = *a2;
  v4 = (llvm::BasicBlock *)a2[1];
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, a3);
  if (!result)
    return result;
  if (llvm::BasicBlock::getSinglePredecessor(v4))
    return 1;
  v7 = *((_QWORD *)v4 + 1);
  if (!v7)
    return 1;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
    if (v10 && v9 - 29 <= 0xA)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 1;
  }
  v12 = 0;
LABEL_16:
  v13 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 40);
  if (v13 == v5)
  {
    if (v12)
      return 0;
    v12 = 1;
LABEL_21:
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        return 1;
      v14 = *(_QWORD *)(v7 + 24);
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v14)
        v16 = v15 >= 0x1C;
      else
        v16 = 0;
      if (v16 && v15 - 29 < 0xB)
        goto LABEL_16;
    }
  }
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, v13);
  if (result)
    goto LABEL_21;
  return result;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Use *a3)
{
  _BOOL8 v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34[2];

  v3 = 1;
  if (!a2)
    return v3;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 < 0x1C)
    return v3;
  v6 = *((_QWORD *)a3 + 3);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v6)
    v8 = v7 == 83;
  else
    v8 = 0;
  v9 = !v8;
  if (v8)
  {
    v13 = *(_DWORD *)(v6 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v6 - 8);
    else
      v14 = v6 - 32 * (v13 & 0x7FFFFFF);
    v10 = *(_QWORD *)(v14 + 32 * *(unsigned int *)(v6 + 72) + 8 * (((unint64_t)a3 - v14) >> 5));
    v11 = *((_QWORD *)this + 3);
    v12 = *((unsigned int *)this + 10);
    if (!(_DWORD)v12)
      goto LABEL_21;
  }
  else
  {
    v10 = *(_QWORD *)(v6 + 40);
    v11 = *((_QWORD *)this + 3);
    v12 = *((unsigned int *)this + 10);
    if (!(_DWORD)v12)
      goto LABEL_21;
  }
  LODWORD(v15) = ((v10 >> 4) ^ (v10 >> 9)) & (v12 - 1);
  v16 = (uint64_t *)(v11 + 16 * v15);
  v17 = *v16;
  if (*v16 == v10)
    goto LABEL_22;
  v18 = 1;
  while (v17 != -4096)
  {
    v19 = v15 + v18++;
    v15 = v19 & (v12 - 1);
    v17 = *(_QWORD *)(v11 + 16 * v15);
    if (v17 == v10)
    {
      v16 = (uint64_t *)(v11 + 16 * v15);
      goto LABEL_22;
    }
  }
LABEL_21:
  v16 = (uint64_t *)(v11 + 16 * v12);
LABEL_22:
  v20 = (uint64_t *)(v11 + 16 * v12);
  if (v16 == v20)
    return 1;
  v21 = v16[1];
  v3 = v21 == 0;
  if (!(_DWORD)v12 || !v21)
    return v3;
  v22 = *((_QWORD *)a2 + 5);
  v23 = v12 - 1;
  LODWORD(v12) = (v12 - 1) & ((v22 >> 4) ^ (v22 >> 9));
  v24 = (uint64_t *)(v11 + 16 * v12);
  v25 = *v24;
  if (*v24 == v22)
  {
    if (v24 != v20)
    {
LABEL_27:
      if (v24[1])
      {
        if (v5 == 33)
        {
          v26 = *((_QWORD *)a2 - 12);
          v34[0] = *((_QWORD *)a2 + 5);
          v34[1] = v26;
          if ((v9 & 1) != 0)
          {
            v27 = (uint64_t *)(v6 + 40);
            return llvm::DominatorTree::dominates((uint64_t)this, v34, *v27);
          }
          v29 = *(_DWORD *)(v6 + 20);
          if (*(_QWORD *)(v6 + 40) != v26
            || ((v29 & 0x40000000) != 0 ? (v30 = *(_QWORD *)(v6 - 8)) : (v30 = v6 - 32 * (v29 & 0x7FFFFFF)),
                *(_QWORD *)(v30
                          + 32 * *(unsigned int *)(v6 + 72)
                          + 8 * (((unint64_t)a3 - v30) >> 5)) != v22))
          {
            if ((v29 & 0x40000000) != 0)
              v31 = *(_QWORD *)(v6 - 8);
            else
              v31 = v6 - 32 * (v29 & 0x7FFFFFF);
            v27 = (uint64_t *)(v31
                            + 32 * *(unsigned int *)(v6 + 72)
                            + 8 * (((unint64_t)a3 - v31) >> 5));
            return llvm::DominatorTree::dominates((uint64_t)this, v34, *v27);
          }
        }
        else
        {
          if (v22 != v10)
            return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, *((_QWORD *)a2 + 5), v10);
          if (v7 != 83)
            return llvm::Instruction::comesBefore(a2, (const llvm::Instruction *)v6);
        }
        return 1;
      }
      return 0;
    }
  }
  else
  {
    v32 = 1;
    while (v25 != -4096)
    {
      v33 = v12 + v32++;
      v12 = v33 & v23;
      v25 = *(_QWORD *)(v11 + 16 * v12);
      if (v25 == v22)
      {
        v24 = (uint64_t *)(v11 + 16 * v12);
        if (v24 != v20)
          goto LABEL_27;
        return 0;
      }
    }
  }
  return 0;
}

void llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;

  v4 = a2;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      do
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          break;
        v8 = *(_QWORD *)(v7 + 24);
        v9 = *(unsigned __int8 *)(v8 + 16);
        v10 = v8 && v9 >= 0x1C;
      }
      while (!v10 || v9 - 29 >= 0xB);
      ++v6;
    }
    while (v7 != a3);
  }
  v12 = *(unsigned int *)(a1 + 8);
  if (v6 + v12 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + v12, 8);
    v12 = *(unsigned int *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * v12);
    do
    {
      *v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
      do
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          break;
        v14 = *(_QWORD *)(v4 + 24);
        v15 = *(unsigned __int8 *)(v14 + 16);
        v16 = v14 && v15 >= 0x1C;
      }
      while (!v16 || v15 - 29 >= 0xB);
      ++v13;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(a1 + 8) = v12 + v6;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::AlwaysDescend()
{
  return 1;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t), int a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v9;
  int v10;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _OWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t **v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  uint64_t *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  unsigned int v72;
  uint64_t *v73;
  char *v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  char *v88;
  char *v89;
  uint64_t v92;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  unsigned int v98;
  _BYTE v99[64];
  void *v100;
  uint64_t v101;
  _QWORD v102[66];

  v6 = a6;
  v102[64] = *MEMORY[0x1E0C80C00];
  v95 = a2;
  v100 = v102;
  v102[0] = a2;
  v101 = 0x4000000001;
  v9 = *(_QWORD *)(a1 + 24);
  v92 = a1 + 24;
  v10 = *(_DWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_4;
  v12 = v10 - 1;
  v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = (char *)(v9 + 72 * v13);
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 == a2)
  {
LABEL_3:
    *(_DWORD *)(v9 + 72 * v13 + 12) = a5;
LABEL_4:
    v16 = 1;
    goto LABEL_7;
  }
  v80 = 1;
  v81 = *(_QWORD *)v14;
  v82 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v81 == -4096)
      goto LABEL_4;
    v83 = v82 + v80++;
    v82 = v83 & v12;
    v81 = *(_QWORD *)(v9 + 72 * v82);
  }
  while (v81 != a2);
  v84 = 0;
  v85 = 1;
  v6 = a6;
  while (v15 != -4096)
  {
    if (v84)
      v86 = 0;
    else
      v86 = v15 == -8192;
    if (v86)
      v84 = v14;
    v87 = v13 + v85++;
    v13 = v87 & v12;
    v14 = (char *)(v9 + 72 * v13);
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)v14 == a2)
      goto LABEL_3;
  }
  if (v84)
    v88 = v84;
  else
    v88 = v14;
  v89 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v88, &v95);
  v16 = v101;
  *((_DWORD *)v89 + 3) = a5;
  v6 = a6;
  if (v16)
  {
LABEL_7:
    v94 = 0;
    v17 = *((_QWORD *)v100 + v16 - 1);
    LODWORD(v101) = v16 - 1;
    v94 = (uint64_t *)v17;
    v18 = *(_DWORD *)(a1 + 40);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = v18 - 1;
      v21 = v20 & ((v17 >> 4) ^ (v17 >> 9));
      v22 = (char *)(v19 + 72 * v21);
      v23 = *(_QWORD *)v22;
      if (v17 == *(_QWORD *)v22)
        goto LABEL_20;
      v24 = 0;
      v25 = 1;
      while (v23 != -4096)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8192;
        if (v26)
          v24 = v22;
        v27 = v21 + v25++;
        v21 = v27 & v20;
        v22 = (char *)(v19 + 72 * v21);
        v23 = *(_QWORD *)v22;
        if (v17 == *(_QWORD *)v22)
          goto LABEL_20;
      }
      if (v24)
        v28 = v24;
      else
        v28 = v22;
    }
    else
    {
      v28 = 0;
    }
    v22 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v28, (uint64_t *)&v94);
LABEL_20:
    if (*((_DWORD *)v22 + 2))
      goto LABEL_6;
    a3 = (a3 + 1);
    *((_DWORD *)v22 + 4) = a3;
    *((_DWORD *)v22 + 2) = a3;
    v29 = (uint64_t)v94;
    *((_QWORD *)v22 + 3) = v94;
    v31 = *(uint64_t **)(a1 + 8);
    v30 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v31 < v30)
    {
      *v31 = v29;
      v32 = (uint64_t)(v31 + 1);
      goto LABEL_44;
    }
    v33 = a3;
    v34 = *(uint64_t **)a1;
    v35 = (uint64_t)v31 - *(_QWORD *)a1;
    v36 = v35 >> 3;
    v37 = (v35 >> 3) + 1;
    if (v37 >> 61)
      abort();
    v38 = v30 - (_QWORD)v34;
    if (v38 >> 2 > v37)
      v37 = v38 >> 2;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v40 = operator new(8 * v39);
      v41 = (uint64_t *)&v40[8 * v36];
      *v41 = v29;
      v32 = (uint64_t)(v41 + 1);
      if (v31 != v34)
      {
LABEL_32:
        v42 = (char *)(v31 - 1) - (char *)v34;
        if (v42 >= 0x58)
        {
          v43 = (char *)v31 - &v40[v35];
          a3 = v33;
          v6 = a6;
          if (v43 >= 0x20)
          {
            v44 = (v42 >> 3) + 1;
            v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v31[v45 / 0xFFFFFFFFFFFFFFF8];
            v41 = (uint64_t *)((char *)v41 - v45);
            v47 = &v40[8 * v36 - 16];
            v48 = v31 - 2;
            v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 4;
              v49 -= 4;
            }
            while (v49);
            v31 = v46;
            if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_42:
              v31 = *(uint64_t **)a1;
              *(_QWORD *)a1 = v41;
              *(_QWORD *)(a1 + 8) = v32;
              *(_QWORD *)(a1 + 16) = &v40[8 * v39];
              if (!v31)
                goto LABEL_44;
              goto LABEL_43;
            }
          }
        }
        else
        {
          a3 = v33;
          v6 = a6;
        }
        do
        {
          v51 = *--v31;
          *--v41 = v51;
        }
        while (v31 != v34);
        goto LABEL_42;
      }
    }
    else
    {
      v40 = 0;
      v41 = (uint64_t *)(8 * v36);
      *(_QWORD *)(8 * v36) = v29;
      v32 = 8 * v36 + 8;
      if (v31 != v34)
        goto LABEL_32;
    }
    a3 = v33;
    v6 = a6;
    *(_QWORD *)a1 = v41;
    *(_QWORD *)(a1 + 8) = v32;
    *(_QWORD *)(a1 + 16) = &v40[8 * v39];
    if (!v31)
    {
LABEL_44:
      *(_QWORD *)(a1 + 8) = v32;
      v52 = *(_QWORD *)(a1 + 48);
      if (v52)
      {
        llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>(*(_QWORD *)(v52 + 8), (uint64_t)v94, (uint64_t)&v97);
        v53 = v98;
        if (!v6)
          goto LABEL_50;
      }
      else
      {
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>((uint64_t)v94, (uint64_t)&v97);
        v53 = v98;
        if (!v6)
          goto LABEL_50;
      }
      if (v53 >= 2)
      {
        v96 = v6;
        std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**,false>((uint64_t)v97, (uint64_t *)v97 + v53, &v96, 126 - 2 * __clz(v53), 1);
        v53 = v98;
      }
LABEL_50:
      v54 = (uint64_t **)v97;
      v55 = (uint64_t **)((char *)v97 + 8 * v53);
      if (!v53)
      {
        if (v97 != v99)
          goto LABEL_91;
        goto LABEL_6;
      }
      while (1)
      {
        v96 = 0;
        v57 = *v54;
        v96 = *v54;
        v58 = *(_QWORD *)(a1 + 24);
        v59 = *(_DWORD *)(a1 + 40);
        if (v59)
        {
          v60 = (v59 - 1) & ((v57 >> 4) ^ (v57 >> 9));
          v61 = (char *)(v58 + 72 * v60);
          v62 = *(uint64_t **)v61;
          if (*(uint64_t **)v61 == v57)
            goto LABEL_63;
          v63 = 1;
          while (v62 != (uint64_t *)-4096)
          {
            v64 = v60 + v63++;
            v60 = v64 & (v59 - 1);
            v61 = (char *)(v58 + 72 * v60);
            v62 = *(uint64_t **)v61;
            if (*(uint64_t **)v61 == v57)
              goto LABEL_63;
          }
        }
        v61 = (char *)(v58 + 72 * v59);
LABEL_63:
        if (v61 == (char *)(v58 + 72 * v59))
        {
          v65 = (uint64_t)v94;
LABEL_69:
          if (!a4(v65))
            goto LABEL_55;
          v68 = *(_DWORD *)(a1 + 40);
          if (v68)
          {
            v69 = *(_QWORD *)(a1 + 24);
            v70 = v96;
            v71 = v68 - 1;
            v72 = ((v96 >> 4) ^ (v96 >> 9)) & v71;
            v61 = (char *)(v69 + 72 * v72);
            v73 = *(uint64_t **)v61;
            if (v96 != *(uint64_t **)v61)
            {
              v74 = 0;
              v75 = 1;
              while (v73 != (uint64_t *)-4096)
              {
                if (v74)
                  v76 = 0;
                else
                  v76 = v73 == (uint64_t *)-8192;
                if (v76)
                  v74 = v61;
                v77 = v72 + v75++;
                v72 = v77 & v71;
                v61 = (char *)(v69 + 72 * v72);
                v73 = *(uint64_t **)v61;
                if (v96 == *(uint64_t **)v61)
                  goto LABEL_83;
              }
              if (v74)
                v78 = v74;
              else
                v78 = v61;
LABEL_82:
              v61 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v78, (uint64_t *)&v96);
              v70 = v96;
            }
LABEL_83:
            v79 = v101;
            if (v101 >= (unint64_t)HIDWORD(v101))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v101 + 1, 8);
              v79 = v101;
            }
            *((_QWORD *)v100 + v79) = v70;
            v66 = v61 + 48;
            v56 = *((unsigned int *)v61 + 12);
            LODWORD(v101) = v101 + 1;
            *((_DWORD *)v61 + 3) = a3;
            v67 = v61 + 40;
            v65 = (uint64_t)v94;
            if (v56 < *((unsigned int *)v61 + 13))
              goto LABEL_54;
LABEL_53:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, v61 + 56, v56 + 1, 8);
            v56 = *((unsigned int *)v61 + 12);
            goto LABEL_54;
          }
          v78 = 0;
          goto LABEL_82;
        }
        v65 = (uint64_t)v94;
        if (!*((_DWORD *)v61 + 2))
          goto LABEL_69;
        if (v57 == v94)
          goto LABEL_55;
        v66 = v61 + 48;
        v56 = *((unsigned int *)v61 + 12);
        v67 = v61 + 40;
        if (v56 >= *((unsigned int *)v61 + 13))
          goto LABEL_53;
LABEL_54:
        *(_QWORD *)(*v67 + 8 * v56) = v65;
        ++*v66;
LABEL_55:
        if (++v54 == v55)
        {
          v54 = (uint64_t **)v97;
          if (v97 != v99)
LABEL_91:
            free(v54);
LABEL_6:
          v16 = v101;
          if (!(_DWORD)v101)
            goto LABEL_113;
          goto LABEL_7;
        }
      }
    }
LABEL_43:
    operator delete(v31);
    goto LABEL_44;
  }
LABEL_113:
  if (v100 != v102)
    free(v100);
  return a3;
}

uint64_t llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;

  v4 = result;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6 == a2 + 48
    || ((v7 = (llvm::Instruction *)(v6 - 24), v6) ? (v8 = v6 - 24) : (v8 = 0),
        *(unsigned __int8 *)(v8 + 16) - 29 >= 0xB))
  {
    v10 = (_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = a3 + 16;
    v11 = (_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 12) = 8;
    v14 = (_QWORD *)(a3 + 16);
    v15 = 0;
    v16 = a3 + 16;
    v17 = 0;
    goto LABEL_18;
  }
  result = llvm::Instruction::getNumSuccessors(v7);
  v9 = result;
  v10 = (_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  v11 = (_DWORD *)(a3 + 8);
  if (result < 9)
  {
    v12 = 0;
    if (!(_DWORD)result)
    {
      v14 = (_QWORD *)(a3 + 16);
      v15 = 0;
      v16 = a3 + 16;
      v17 = 0;
      goto LABEL_18;
    }
    v13 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v10, (int)result, 8);
    v12 = *(_DWORD *)(a3 + 8);
    v10 = *(_QWORD **)a3;
    v13 = v12;
  }
  v18 = &v10[v13];
  v19 = v9 - 1;
  do
  {
    result = llvm::Instruction::getSuccessor(v7);
    *v18++ = result;
    --v19;
  }
  while (v19 != -1);
  v10 = *(_QWORD **)a3;
  v14 = *(_QWORD **)a3;
  v15 = v12 + v9;
  v16 = *(_QWORD *)a3 + 8 * v15;
  v17 = 8 * v15;
  if (v12 + v9)
  {
    v20 = 8 * v15;
    v14 = *(_QWORD **)a3;
    while (*v14)
    {
      ++v14;
      v20 -= 8;
      if (!v20)
      {
        v14 = (_QWORD *)(*(_QWORD *)a3 + 8 * v15);
        break;
      }
    }
  }
LABEL_18:
  v21 = v14 - v10;
  v22 = v14 + 1;
  if (v21 != v15 && v22 != (_QWORD *)v16)
  {
    v24 = v17 - 8 * v21 - 8;
    do
    {
      if (*v22)
        *v14++ = *v22;
      ++v22;
      v24 -= 8;
    }
    while (v24);
    v10 = *(_QWORD **)a3;
  }
  v25 = (char *)v14 - (char *)v10;
  v26 = (unint64_t)((char *)v14 - (char *)v10) >> 3;
  *v11 = v26;
  v27 = v4 + 8;
  v28 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) != 0)
  {
    v29 = 4;
  }
  else
  {
    v27 = *(_QWORD *)(v4 + 8);
    v29 = *(_DWORD *)(v4 + 16);
    if (!v29)
    {
      v30 = 0;
LABEL_30:
      v31 = v27 + 72 * v30;
      goto LABEL_34;
    }
  }
  v32 = v29 - 1;
  v33 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v31 = v27 + 72 * v33;
  v34 = *(_QWORD *)v31;
  if (*(_QWORD *)v31 != a2)
  {
    v48 = 1;
    while (v34 != -4096)
    {
      v49 = v33 + v48++;
      v33 = v49 & v32;
      v31 = v27 + 72 * (v49 & v32);
      v34 = *(_QWORD *)v31;
      if (*(_QWORD *)v31 == a2)
        goto LABEL_33;
    }
    if ((v28 & 1) == 0)
    {
      v27 = *(_QWORD *)(v4 + 8);
      v30 = *(_DWORD *)(v4 + 16);
      goto LABEL_30;
    }
    v31 = v4 + 296;
LABEL_60:
    if (v31 == v4 + 296)
      return result;
    goto LABEL_35;
  }
LABEL_33:
  if ((v28 & 1) != 0)
    goto LABEL_60;
LABEL_34:
  if (v31 == *(_QWORD *)(v4 + 8) + 72 * *(unsigned int *)(v4 + 16))
    return result;
LABEL_35:
  v35 = *(unsigned int *)(v31 + 16);
  if ((_DWORD)v35)
  {
    v36 = (v25 >> 3);
    v37 = *(uint64_t **)(v31 + 8);
    v38 = &v37[v35];
    do
    {
      v40 = *v37;
      v41 = 8 * v36;
      v42 = v10;
      v43 = &v10[v36];
      if (v36)
      {
        v44 = 8 * v36;
        v42 = v10;
        while (*v42 != v40)
        {
          ++v42;
          v44 -= 8;
          if (!v44)
          {
            v42 = &v10[v36];
            break;
          }
        }
      }
      v45 = v42 - v10;
      if (v45 != v36)
      {
        v46 = v42 + 1;
        if (v42 + 1 != v43)
        {
          v47 = v41 - 8 * v45 - 8;
          do
          {
            if (*v46 != v40)
              *v42++ = *v46;
            ++v46;
            v47 -= 8;
          }
          while (v47);
          v10 = *(_QWORD **)a3;
        }
      }
      v39 = (char *)v42 - (char *)v10;
      v36 = (v39 >> 3);
      ++v37;
    }
    while (v37 != v38);
    v26 = v39 >> 3;
    *v11 = v36;
  }
  return llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a3, (uint64_t)&v10[v26], *(char **)(v31 + 40), (char *)(*(_QWORD *)(v31 + 40) + 8 * *(unsigned int *)(v31 + 48)));
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 48);
  result = a1 + 48;
  v4 = v5;
  if (v5 == result
    || ((v6 = (llvm::Instruction *)(v4 - 24), v4) ? (v7 = v4 - 24) : (v7 = 0),
        *(unsigned __int8 *)(v7 + 16) - 29 >= 0xB))
  {
    v9 = (_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = a2 + 16;
    v10 = (_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 8;
    v13 = (_QWORD *)(a2 + 16);
    v14 = 0;
    v15 = a2 + 16;
    v16 = 0;
    goto LABEL_18;
  }
  result = llvm::Instruction::getNumSuccessors(v6);
  v8 = result;
  v9 = (_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x800000000;
  v10 = (_DWORD *)(a2 + 8);
  if (result < 9)
  {
    v11 = 0;
    if (!(_DWORD)result)
    {
      v13 = (_QWORD *)(a2 + 16);
      v14 = 0;
      v15 = a2 + 16;
      v16 = 0;
      goto LABEL_18;
    }
    v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v9, (int)result, 8);
    v11 = *(_DWORD *)(a2 + 8);
    v9 = *(_QWORD **)a2;
    v12 = v11;
  }
  v17 = &v9[v12];
  v18 = v8 - 1;
  do
  {
    result = llvm::Instruction::getSuccessor(v6);
    *v17++ = result;
    --v18;
  }
  while (v18 != -1);
  v9 = *(_QWORD **)a2;
  v13 = *(_QWORD **)a2;
  v14 = v11 + v8;
  v15 = *(_QWORD *)a2 + 8 * v14;
  v16 = 8 * v14;
  if (v11 + v8)
  {
    v19 = 8 * v14;
    v13 = *(_QWORD **)a2;
    while (*v13)
    {
      ++v13;
      v19 -= 8;
      if (!v19)
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + 8 * v14);
        break;
      }
    }
  }
LABEL_18:
  v20 = v13 - v9;
  v21 = v13 + 1;
  if (v20 != v14 && v21 != (_QWORD *)v15)
  {
    v23 = v16 - 8 * v20 - 8;
    do
    {
      if (*v21)
        *v13++ = *v21;
      ++v21;
      v23 -= 8;
    }
    while (v23);
    v9 = *(_QWORD **)a2;
  }
  *v10 = (unint64_t)((char *)v13 - (char *)v9) >> 3;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v63 = a2 - 3;
  v64 = a2 - 2;
  v11 = v9;
  v65 = a2 - 1;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v41 = *(a2 - 1);
        v42 = *v11;
        v43 = **a3;
        v44 = *((unsigned int *)*a3 + 4);
        if (!(_DWORD)v44)
          goto LABEL_58;
        v45 = v44 - 1;
        LODWORD(v46) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        v47 = v43 + 16 * v46;
        v48 = *(_QWORD *)v47;
        if (*(_QWORD *)v47 == v41)
        {
          v49 = *(_DWORD *)(v47 + 8);
          goto LABEL_61;
        }
        v56 = 1;
        while (v48 != -4096)
        {
          v57 = v46 + v56++;
          v46 = v57 & v45;
          v48 = *(_QWORD *)(v43 + 16 * v46);
          if (v48 == v41)
            goto LABEL_59;
        }
LABEL_58:
        v46 = *((unsigned int *)*a3 + 4);
LABEL_59:
        v49 = *(_DWORD *)(v43 + 16 * v46 + 8);
        if (!(_DWORD)v44)
          goto LABEL_68;
        v45 = v44 - 1;
LABEL_61:
        LODWORD(v58) = v45 & ((v42 >> 4) ^ (v42 >> 9));
        v59 = v43 + 16 * v58;
        v60 = *(_QWORD *)v59;
        if (*(_QWORD *)v59 == v42)
          goto LABEL_62;
        v61 = 1;
        while (v60 != -4096)
        {
          v62 = v58 + v61++;
          v58 = v62 & v45;
          v60 = *(_QWORD *)(v43 + 16 * v58);
          if (v60 == v42)
          {
            v59 = v43 + 16 * v58;
            goto LABEL_62;
          }
        }
LABEL_68:
        v59 = v43 + 16 * v44;
LABEL_62:
        if (v49 < *(_DWORD *)(v59 + 8))
        {
          *v11 = v41;
          *(a2 - 1) = v42;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v10, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v11 + 2, v10, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a2, a3);
        }
        if (a4)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v15, v9, v10, a3);
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9, v15, v10, a3);
            v16 = a4;
            v17 = a2;
            v18 = a5;
            v19 = &v9[v14];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9 + 1, v19 - 1, v64, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v9 + 2, &v9[v14 + 1], v63, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v19 - 1, v15, &v9[v14 + 1], a3);
            v20 = *v9;
            *v9 = *v19;
            *v19 = v20;
            a5 = v18;
            a2 = v17;
            v21 = v16;
            v10 = v65;
            a4 = v21 - 1;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v22 = *v9;
          v23 = **a3;
          v24 = *((unsigned int *)*a3 + 4);
          if ((_DWORD)v24)
          {
            v25 = *(v9 - 1);
            v26 = v24 - 1;
            LODWORD(v27) = (v24 - 1) & ((v25 >> 4) ^ (v25 >> 9));
            v28 = v23 + 16 * v27;
            v29 = *(_QWORD *)v28;
            if (*(_QWORD *)v28 == v25)
            {
              v30 = *(_DWORD *)(v28 + 8);
              goto LABEL_20;
            }
            v31 = 1;
            while (v29 != -4096)
            {
              v32 = v27 + v31++;
              v27 = v32 & v26;
              v29 = *(_QWORD *)(v23 + 16 * v27);
              if (v29 == v25)
                goto LABEL_18;
            }
          }
          v27 = *((unsigned int *)*a3 + 4);
LABEL_18:
          v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
          if (!(_DWORD)v24)
            goto LABEL_31;
          v26 = v24 - 1;
LABEL_20:
          LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
          v34 = v23 + 16 * v33;
          v35 = *(_QWORD *)v34;
          if (*(_QWORD *)v34 == v22)
            goto LABEL_21;
          v39 = 1;
          while (v35 != -4096)
          {
            v40 = v33 + v39++;
            v33 = v40 & v26;
            v35 = *(_QWORD *)(v23 + 16 * v33);
            if (v35 == v22)
            {
              v34 = v23 + 16 * v33;
              goto LABEL_21;
            }
          }
LABEL_31:
          v34 = v23 + 16 * v24;
LABEL_21:
          if (v30 >= *(_DWORD *)(v34 + 8))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v9, a2, a3);
            v11 = (uint64_t *)result;
            a5 = 0;
            continue;
          }
LABEL_22:
          v36 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v9, a2, a3);
          if ((v37 & 1) == 0)
            goto LABEL_25;
          v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**>(v9, v36, a3);
          v11 = v36 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**>(v36 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v38)
              continue;
LABEL_25:
            result = std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**,false>(v9, v36, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v36 + 1;
            continue;
          }
          a2 = v36;
          if (v38)
            return result;
          goto LABEL_2;
        }
        if (v11 != a2)
        {
          v50 = (v13 - 2) >> 1;
          v51 = v50 + 1;
          v52 = &v11[v50];
          do
          {
            std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v11, (unint64_t *)a3, v13, v52--);
            --v51;
          }
          while (v51);
          v53 = (unint64_t)v12 >> 3;
          do
          {
            while (1)
            {
              v55 = *v11;
              result = (uint64_t)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, a3, v53);
              if (v10 == (uint64_t *)result)
                break;
              *(_QWORD *)result = *v10;
              *v10-- = v55;
              result = std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v11, result + 8, a3, (result + 8 - (uint64_t)v11) >> 3);
              v54 = v53-- <= 2;
              if (v54)
                return result;
            }
            *(_QWORD *)result = v55;
            --v10;
            v54 = v53-- <= 2;
          }
          while (!v54);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(llvm::BasicBlock*,unsigned int,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*),unsigned int,llvm::DenseMap<llvm::BasicBlock*,unsigned int,llvm::DenseMapInfo<llvm::BasicBlock*,void>,llvm::detail::DenseMapPair<llvm::BasicBlock*,unsigned int>> const*)::{lambda(llvm::BasicBlock*,llvm::BasicBlock*)#1} &,llvm::BasicBlock**>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v45 = *(a2 - 1);
      v46 = *a1;
      v47 = **a3;
      v48 = *((unsigned int *)*a3 + 4);
      if (!(_DWORD)v48)
        goto LABEL_55;
      v49 = v48 - 1;
      LODWORD(v50) = (v48 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      v51 = v47 + 16 * v50;
      v52 = *(_QWORD *)v51;
      if (*(_QWORD *)v51 == v45)
      {
        v53 = *(_DWORD *)(v51 + 8);
        goto LABEL_58;
      }
      v54 = 1;
      while (v52 != -4096)
      {
        v55 = v50 + v54++;
        v50 = v55 & v49;
        v52 = *(_QWORD *)(v47 + 16 * v50);
        if (v52 == v45)
          goto LABEL_56;
      }
LABEL_55:
      v50 = *((unsigned int *)*a3 + 4);
LABEL_56:
      v53 = *(_DWORD *)(v47 + 16 * v50 + 8);
      if (!(_DWORD)v48)
        goto LABEL_65;
      v49 = v48 - 1;
LABEL_58:
      LODWORD(v56) = v49 & ((v46 >> 4) ^ (v46 >> 9));
      v57 = v47 + 16 * v56;
      v58 = *(_QWORD *)v57;
      if (*(_QWORD *)v57 == v46)
        goto LABEL_59;
      v59 = 1;
      while (v58 != -4096)
      {
        v60 = v56 + v59++;
        v56 = v60 & v49;
        v58 = *(_QWORD *)(v47 + 16 * v56);
        if (v58 == v46)
        {
          v57 = v47 + 16 * v56;
          goto LABEL_59;
        }
      }
LABEL_65:
      v57 = v47 + 16 * v48;
LABEL_59:
      if (v53 >= *(_DWORD *)(v57 + 8))
        return 1;
      *a1 = v45;
      *(a2 - 1) = v46;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (2)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **a3;
    v15 = *((unsigned int *)*a3 + 4);
    v16 = *v9 >> 4;
    if ((_DWORD)v15)
    {
      v17 = v15 - 1;
      LODWORD(v18) = (v15 - 1) & (v16 ^ (v12 >> 9));
      v19 = v14 + 16 * v18;
      v20 = *(_QWORD *)v19;
      if (*(_QWORD *)v19 == v12)
      {
        v21 = *(_DWORD *)(v19 + 8);
        goto LABEL_17;
      }
      v22 = 1;
      while (v20 != -4096)
      {
        v23 = v18 + v22++;
        v18 = v23 & v17;
        v20 = *(_QWORD *)(v14 + 16 * v18);
        if (v20 == v12)
          goto LABEL_15;
      }
    }
    v18 = *((unsigned int *)*a3 + 4);
LABEL_15:
    v21 = *(_DWORD *)(v14 + 16 * v18 + 8);
    if (!(_DWORD)v15)
      goto LABEL_42;
    v17 = v15 - 1;
LABEL_17:
    LODWORD(v24) = v17 & ((v13 >> 4) ^ (v13 >> 9));
    v25 = v14 + 16 * v24;
    v26 = *(_QWORD *)v25;
    if (*(_QWORD *)v25 != v13)
    {
      v43 = 1;
      while (v26 != -4096)
      {
        v44 = v24 + v43++;
        v24 = v44 & v17;
        v26 = *(_QWORD *)(v14 + 16 * v24);
        if (v26 == v13)
        {
          v25 = v14 + 16 * v24;
          goto LABEL_18;
        }
      }
LABEL_42:
      v25 = v14 + 16 * v15;
    }
LABEL_18:
    if (v21 >= *(_DWORD *)(v25 + 8))
      goto LABEL_6;
    v27 = v16 ^ (v12 >> 9);
    v11 = v9;
    while (1)
    {
      *v11 = v13;
      if (v8 == a1)
        break;
      v11 = v8;
      v32 = *--v8;
      v13 = v32;
      v33 = **a3;
      v34 = *((unsigned int *)*a3 + 4);
      if ((_DWORD)v34)
      {
        v28 = v34 - 1;
        LODWORD(v35) = (v34 - 1) & v27;
        v36 = v33 + 16 * v35;
        v37 = *(_QWORD *)v36;
        if (*(_QWORD *)v36 == v12)
        {
          v38 = *(_DWORD *)(v36 + 8);
          goto LABEL_21;
        }
        v41 = 1;
        while (v37 != -4096)
        {
          v42 = v35 + v41++;
          v35 = v42 & v28;
          v37 = *(_QWORD *)(v33 + 16 * v35);
          if (v37 == v12)
            goto LABEL_36;
        }
      }
      v35 = *((unsigned int *)*a3 + 4);
LABEL_36:
      v38 = *(_DWORD *)(v33 + 16 * v35 + 8);
      if (!(_DWORD)v34)
        goto LABEL_37;
      v28 = v34 - 1;
LABEL_21:
      LODWORD(v29) = v28 & ((v13 >> 4) ^ (v13 >> 9));
      v30 = v33 + 16 * v29;
      v31 = *(_QWORD *)v30;
      if (*(_QWORD *)v30 != v13)
      {
        v39 = 1;
        while (v31 != -4096)
        {
          v40 = v29 + v39++;
          v29 = v40 & v28;
          v31 = *(_QWORD *)(v33 + 16 * v29);
          if (v31 == v13)
          {
            v30 = v33 + 16 * v29;
            goto LABEL_22;
          }
        }
LABEL_37:
        v30 = v33 + 16 * v34;
      }
LABEL_22:
      if (v38 >= *(_DWORD *)(v30 + 8))
        goto LABEL_5;
    }
    v11 = a1;
LABEL_5:
    *v11 = v12;
    if (++v10 == 8)
      return v9 + 1 == a2;
LABEL_6:
    v8 = v9++;
    if (v9 != a2)
      continue;
    return 1;
  }
}

uint64_t llvm::classifyEHPersonality(uint64_t this, const llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  const char *Name;
  uint64_t v5;

  if (this)
  {
    v2 = llvm::Value::stripPointerCasts((llvm::Value *)this);
    if (*((unsigned __int8 *)v2 + 16) <= 3u)
    {
      v3 = *((_QWORD *)v2 + 3);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 8) == 14)
        {
          Name = llvm::Value::getName(v2);
          switch(v5)
          {
            case 16:
              if ((*(_QWORD *)Name != 0x5F7470656378655FLL || *((_QWORD *)Name + 1) != 0x3372656C646E6168)
                && (*(_QWORD *)Name != 0x5F7470656378655FLL || *((_QWORD *)Name + 1) != 0x3472656C646E6168))
              {
                return 0;
              }
              return 7;
            case 18:
              if (*(_QWORD *)Name != 0x6172467878435F5FLL
                || *((_QWORD *)Name + 1) != 0x656C646E6148656DLL
                || *((_WORD *)Name + 8) != 13170)
              {
                return 0;
              }
              return 9;
            case 19:
              if (*(_QWORD *)Name == 0x43737365636F7250
                && *((_QWORD *)Name + 1) == 0x747065637845524CLL
                && *(_QWORD *)(Name + 11) == 0x6E6F697470656378)
              {
                return 10;
              }
              if (*(_QWORD *)Name == 0x5F68655F74737572
                && *((_QWORD *)Name + 1) == 0x6C616E6F73726570
                && *(_QWORD *)(Name + 11) == 0x7974696C616E6F73)
              {
                return 11;
              }
              return 0;
            case 20:
              if (*(_QWORD *)Name == 0x65705F7878675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *((_DWORD *)Name + 4) == 813064057)
              {
                return 4;
              }
              if (*(_QWORD *)Name == 0x65705F6363675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *((_DWORD *)Name + 4) == 813064057)
              {
                return 2;
              }
              if (*(_QWORD *)Name != 0x636570735F435F5FLL
                || *((_QWORD *)Name + 1) != 0x6E61685F63696669
                || *((_DWORD *)Name + 4) != 1919249508)
              {
                return 0;
              }
              return 8;
            case 21:
              if (*(_QWORD *)Name == 0x655F74616E675F5FLL
                && *((_QWORD *)Name + 1) == 0x6E6F737265705F68
                && *(_QWORD *)(Name + 13) == 0x7974696C616E6F73)
              {
                return 1;
              }
              if (*(_QWORD *)Name == 0x65705F7878675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *(_QWORD *)(Name + 13) == 0x306A735F7974696CLL)
              {
                return 5;
              }
              if (*(_QWORD *)Name == 0x65705F6363675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *(_QWORD *)(Name + 13) == 0x306A735F7974696CLL)
              {
                return 3;
              }
              if (*(_QWORD *)Name == 0x705F636A626F5F5FLL
                && *((_QWORD *)Name + 1) == 0x696C616E6F737265
                && *(_QWORD *)(Name + 13) == 0x30765F7974696C61)
              {
                return 6;
              }
              return 0;
            case 22:
              if (*(_QWORD *)Name == 0x65705F7878675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *(_QWORD *)(Name + 14) == 0x306865735F797469)
              {
                return 4;
              }
              if (*(_QWORD *)Name == 0x65705F6363675F5FLL
                && *((_QWORD *)Name + 1) == 0x74696C616E6F7372
                && *(_QWORD *)(Name + 14) == 0x306865735F797469)
              {
                return 2;
              }
              if (*(_QWORD *)Name == 0x5F7878636C785F5FLL
                && *((_QWORD *)Name + 1) == 0x6C616E6F73726570
                && *(_QWORD *)(Name + 14) == 0x31765F7974696C61)
              {
                return 13;
              }
              break;
            case 25:
              if (*(_QWORD *)Name != 0x61775F7878675F5FLL
                || *((_QWORD *)Name + 1) != 0x6F737265705F6D73
                || *((_QWORD *)Name + 2) != 0x765F7974696C616ELL
                || Name[24] != 48)
              {
                return 0;
              }
              return 12;
            default:
              return 0;
          }
        }
      }
    }
    return 0;
  }
  return this;
}

void llvm::colorEHFunclets(llvm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  llvm::BasicBlock *v29;
  llvm::Instruction *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  llvm::Instruction *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int NumSuccessors;
  int v39;
  int i;
  uint64_t Successor;
  uint64_t *v42;
  llvm::BasicBlock *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[34];

  v47[32] = *MEMORY[0x1E0C80C00];
  v44 = v47;
  v46 = 16;
  v4 = *((_QWORD *)this + 10);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  v47[0] = v5;
  v47[1] = v5;
  v6 = 1;
  do
  {
    v43 = 0;
    v7 = (char *)v44 + 16 * v6;
    v8 = (llvm::BasicBlock *)*((_QWORD *)v7 - 2);
    v9 = *((_QWORD *)v7 - 1);
    v45 = v6 - 1;
    v43 = v8;
    v10 = llvm::BasicBlock::getFirstNonPHI(v8)[16] - 38;
    v11 = v10 > 0x38;
    v12 = (1 << v10) & 0x100060000000001;
    if (!v11 && v12 != 0)
      v9 = (uint64_t)v43;
    v14 = *(_DWORD *)(a2 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = ((v43 >> 4) ^ (v43 >> 9)) & v15;
      v17 = (uint64_t *)(*(_QWORD *)a2 + 16 * v16);
      v18 = *v17;
      if (v43 == (llvm::BasicBlock *)*v17)
        goto LABEL_26;
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = (uint64_t *)(*(_QWORD *)a2 + 16 * v16);
        v18 = *v17;
        if (v43 == (llvm::BasicBlock *)*v17)
          goto LABEL_26;
      }
      if (v19)
        v23 = v19;
      else
        v23 = v17;
    }
    else
    {
      v23 = 0;
    }
    v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::InsertIntoBucket<llvm::BasicBlock * const&>(a2, v23, (uint64_t *)&v43);
LABEL_26:
    v26 = v17[1];
    v24 = (unint64_t *)(v17 + 1);
    v25 = v26;
    if ((v26 & 4) != 0)
    {
      v28 = *(unint64_t **)(v25 & 0xFFFFFFFFFFFFFFF8);
      v27 = &v28[*(unsigned int *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8)];
      if (v28 != v27)
      {
LABEL_30:
        while (*v28 != v9)
        {
          if (++v28 == v27)
          {
            v28 = v27;
            break;
          }
        }
      }
    }
    else
    {
      v27 = &v24[v25 > 7];
      v28 = v24;
      if (v24 != v27)
        goto LABEL_30;
    }
    if ((v25 & 4) != 0)
    {
      if (v28 != (unint64_t *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8)
                                     + 8 * *(unsigned int *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8)))
        goto LABEL_6;
    }
    else if (v28 != &v24[v25 > 7])
    {
      goto LABEL_6;
    }
    llvm::TinyPtrVector<llvm::BasicBlock *>::push_back(v24, v9);
    v29 = (llvm::BasicBlock *)*((_QWORD *)v43 + 6);
    if (v29 == (llvm::BasicBlock *)((char *)v43 + 48))
    {
LABEL_6:
      v6 = v45;
      continue;
    }
    v30 = (llvm::BasicBlock *)((char *)v29 - 24);
    if (v29)
      v31 = (uint64_t)v29 - 24;
    else
      v31 = 0;
    v32 = *(unsigned __int8 *)(v31 + 16) - 40;
    v33 = __CFADD__(v32, 11);
    if (v32 >= 0xFFFFFFF5)
      v34 = v30;
    else
      v34 = 0;
    if (v33 && *((_BYTE *)v34 + 16) == 37)
    {
      v35 = *(_QWORD *)(*((_QWORD *)v34 - 8) - 32);
      v36 = *(_DWORD *)(v35 + 20);
      if ((v36 & 0x40000000) != 0)
      {
        v37 = **(_QWORD **)(v35 - 8);
        v9 = v5;
        if (*(_BYTE *)(v37 + 16) == 20)
          goto LABEL_50;
LABEL_49:
        v9 = *(_QWORD *)(v37 + 40);
        goto LABEL_50;
      }
      v37 = *(_QWORD *)(v35 - 32 * (v36 & 0x7FFFFFF));
      v9 = v5;
      if (*(_BYTE *)(v37 + 16) != 20)
        goto LABEL_49;
    }
LABEL_50:
    if (*(unsigned __int8 *)(v31 + 16) - 29 >= 0xB)
      goto LABEL_6;
    NumSuccessors = llvm::Instruction::getNumSuccessors(v30);
    v6 = v45;
    if (NumSuccessors)
    {
      v39 = NumSuccessors;
      for (i = 0; i != v39; ++i)
      {
        Successor = llvm::Instruction::getSuccessor(v30);
        if (v6 >= v46)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v6 + 1, 16);
          v6 = v45;
        }
        v42 = (uint64_t *)((char *)v44 + 16 * v6);
        *v42 = Successor;
        v42[1] = v9;
        v6 = ++v45;
      }
    }
  }
  while (v6);
  if (v44 != v47)
    free(v44);
}

void llvm::TinyPtrVector<llvm::BasicBlock *>::push_back(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a1;
  if (*a1 > 7)
  {
    if ((v4 & 4) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      v6 = (unint64_t)operator new(0x30uLL);
      *(_QWORD *)v6 = v6 + 16;
      *(_QWORD *)(v6 + 8) = 0x400000000;
      *a1 = v6 | 4;
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      v8 = *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v8 >= *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v11 = v6 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 & 0xFFFFFFFFFFFFFFF8, (void *)(v7 + 16), v8 + 1, 8);
        v7 = v11;
        LODWORD(v8) = *(_DWORD *)(v11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v5;
      ++*(_DWORD *)(v7 + 8);
      v4 = *a1;
    }
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v10 >= *(_DWORD *)(v9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v9 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = a2;
    ++*(_DWORD *)(v9 + 8);
  }
  else
  {
    *a1 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::InsertIntoBucket<llvm::BasicBlock * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[2 * v6];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v22 = 0;
          v23 = 1;
          while (v19 != -4096)
          {
            if (v22)
              v24 = 0;
            else
              v24 = v19 == -8192;
            if (v24)
              v22 = v18;
            v25 = v17 + v23++;
            v17 = v25 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v25 & v16));
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_16;
          }
          if (v22)
            v18 = v22;
        }
LABEL_16:
        *v18 = v15;
        v18[1] = v4[1];
        v4[1] = 0;
        ++*(_DWORD *)(a1 + 8);
        v20 = v4[1];
        if ((v20 & 4) != 0)
        {
          v21 = (void **)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if (*v21 != v21 + 2)
              free(*v21);
            operator delete(v21);
          }
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::convertStrToRoundingMode(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = 0;
  switch(a2)
  {
    case 12:
      if (*a1 ^ 0x70752E646E756F72 | *((unsigned int *)a1 + 2) ^ 0x64726177)
        result = 0;
      else
        result = 258;
      break;
    case 13:
      v4 = *a1;
      v5 = *(uint64_t *)((char *)a1 + 5);
      if (v4 != 0x79642E646E756F72 || v5 != 0x63696D616E79642ELL)
        goto LABEL_37;
      result = 263;
      break;
    case 14:
      v7 = *a1;
      v8 = *(uint64_t *)((char *)a1 + 6);
      if (v7 != 0x6F642E646E756F72 || v8 != 0x647261776E776F64)
        goto LABEL_37;
      result = 259;
      break;
    case 15:
      v10 = *a1;
      v11 = *(uint64_t *)((char *)a1 + 7);
      if (v10 != 0x6F742E646E756F72 || v11 != 0x7473657261656E6FLL)
        goto LABEL_37;
      result = 257;
      break;
    case 16:
      v14 = *a1;
      v13 = a1[1];
      v16 = v14 == 0x6F742E646E756F72 && v13 == 0x6F72657A64726177;
      result = (v16 << 8);
      break;
    case 19:
      v17 = *a1;
      v18 = a1[1];
      v19 = *(uint64_t *)((char *)a1 + 11);
      if (v17 == 0x6F742E646E756F72 && v18 == 0x617473657261656ELL && v19 == 0x7961776174736572)
        result = 260;
      else
LABEL_37:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::convertRoundingModeToStr@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (result <= 7 && ((0x9Fu >> result) & 1) != 0)
  {
    v2 = (int)result;
    v3 = off_1E0E5B898[v2];
    v4 = *(_QWORD *)((char *)&unk_18126A750 + v2 * 8);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t llvm::convertStrToExceptionBehavior(_QWORD *a1, uint64_t a2)
{
  if (a2 == 16)
  {
    if (*a1 == 0x7470656378657066 && a1[1] == 0x7061727479616D2ELL)
      return 257;
    return 0;
  }
  if (a2 != 15)
    return 0;
  if (*a1 == 0x7470656378657066 && *(_QWORD *)((char *)a1 + 7) == 0x65726F6E67692E74)
    return 256;
  if (*a1 ^ 0x7470656378657066 | *(_QWORD *)((char *)a1 + 7) ^ 0x7463697274732E74)
    return 0;
  return 258;
}

uint64_t llvm::convertExceptionBehaviorToStr@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (result <= 2)
  {
    v2 = (char)result;
    v3 = off_1E0E5B8D8[v2];
    v4 = *(_QWORD *)((char *)&unk_18126A790 + v2 * 8);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  llvm::Function *v6;
  llvm::ValueSymbolTable *v7;
  llvm::ValueSymbolTable *v8;
  llvm::BasicBlock *v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  uint64_t ValueName;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  int v16;

  if (result != a2)
  {
    v5 = a3;
    v6 = (llvm::Function *)(result - 72);
    v7 = *(llvm::ValueSymbolTable **)(result + 32);
    v8 = *(llvm::ValueSymbolTable **)(a2 + 32);
    if (v7 == v8)
    {
      while (v5 != a4)
      {
        if (v5)
          v9 = (llvm::BasicBlock *)(v5 - 24);
        else
          v9 = 0;
        result = llvm::BasicBlock::setParent(v9, v6);
        v5 = *(_QWORD *)(v5 + 8);
      }
    }
    else if (a3 != a4)
    {
      if (v8)
      {
        if (v7)
        {
          do
          {
            while (1)
            {
              v12 = v5 ? (llvm::BasicBlock *)(v5 - 24) : 0;
              if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
                break;
              result = llvm::BasicBlock::setParent(v12, v6);
              v5 = *(_QWORD *)(v5 + 8);
              if (v5 == a4)
                return result;
            }
            ValueName = llvm::Value::getValueName(v12);
            llvm::ValueSymbolTable::removeValueName(v8, ValueName);
            llvm::BasicBlock::setParent(v12, v6);
            result = llvm::ValueSymbolTable::reinsertValue(v7, v12);
            v5 = *(_QWORD *)(v5 + 8);
          }
          while (v5 != a4);
        }
        else
        {
          do
          {
            if (v5)
              v10 = (llvm::Value *)(v5 - 24);
            else
              v10 = 0;
            if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
            {
              v11 = llvm::Value::getValueName(v10);
              llvm::ValueSymbolTable::removeValueName(v8, v11);
            }
            result = llvm::BasicBlock::setParent(v10, v6);
            v5 = *(_QWORD *)(v5 + 8);
          }
          while (v5 != a4);
        }
      }
      else if (v7)
      {
        do
        {
          if (v5)
            v15 = (llvm::BasicBlock *)(v5 - 24);
          else
            v15 = 0;
          v16 = *((_DWORD *)v15 + 5);
          result = llvm::BasicBlock::setParent(v15, v6);
          if ((v16 & 0x10000000) != 0)
            result = llvm::ValueSymbolTable::reinsertValue(v7, v15);
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != a4);
      }
      else
      {
        do
        {
          if (v5)
            v14 = (llvm::BasicBlock *)(v5 - 24);
          else
            v14 = 0;
          result = llvm::BasicBlock::setParent(v14, v6);
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
  }
  return result;
}

void llvm::Function::convertToNewDbgValues(llvm::Function *this)
{
  char *v1;
  _QWORD *v2;
  llvm::BasicBlock *v3;

  *((_BYTE *)this + 120) = 1;
  v1 = (char *)this + 72;
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2 != (_QWORD *)((char *)this + 72))
  {
    do
    {
      if (v2)
        v3 = (llvm::BasicBlock *)(v2 - 3);
      else
        v3 = 0;
      llvm::BasicBlock::convertToNewDbgValues(v3);
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != (_QWORD *)v1);
  }
}

void llvm::Function::convertFromNewDbgValues(llvm::Function *this)
{
  char *v1;
  _QWORD *v2;
  llvm::BasicBlock *v3;

  *((_BYTE *)this + 120) = 0;
  v1 = (char *)this + 72;
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2 != (_QWORD *)((char *)this + 72))
  {
    do
    {
      if (v2)
        v3 = (llvm::BasicBlock *)(v2 - 3);
      else
        v3 = 0;
      llvm::BasicBlock::convertFromNewDbgValues(v3);
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != (_QWORD *)v1);
  }
}

llvm::Argument *llvm::Argument::Argument(llvm::Argument *this, llvm::Type *a2, const char **a3, llvm::Function *a4, int a5)
{
  uint64_t v9;

  v9 = llvm::Value::Value((uint64_t)this, a2, 21);
  *(_QWORD *)(v9 + 24) = a4;
  *(_DWORD *)(v9 + 32) = a5;
  llvm::Value::setName((llvm::Value *)v9, a3);
  return this;
}

uint64_t llvm::Function::hasParamAttribute(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(a1 + 112), a2 + 1, a3);
}

BOOL llvm::NullPointerIsDefined(llvm *this, const Function *a2)
{
  int v2;

  v2 = (int)a2;
  return this && (llvm::AttributeSet::hasAttribute((_QWORD *)this + 14, 40) & 1) != 0 || v2 != 0;
}

uint64_t llvm::Argument::hasAttribute(uint64_t a1, int a2)
{
  return llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(*(_QWORD *)(a1 + 24) + 112), *(_DWORD *)(a1 + 32) + 1, a2);
}

uint64_t llvm::Argument::hasSwiftErrorAttr(llvm::Argument *this)
{
  return llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8) + 1, 66);
}

uint64_t llvm::Argument::hasPassPointeeByValueCopyAttr(llvm::Argument *this)
{
  uint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if ((llvm::AttributeList::hasAttributeAtIndex(&v3, *((_DWORD *)this + 8) + 1, 73) & 1) != 0)
    return 1;
  if ((llvm::AttributeList::hasAttributeAtIndex(&v3, *((_DWORD *)this + 8) + 1, 75) & 1) != 0)
    return 1;
  return llvm::AttributeList::hasAttributeAtIndex(&v3, *((_DWORD *)this + 8) + 1, 76);
}

Type *llvm::Argument::getPassPointeeByValueCopySize(llvm::Argument *this, const llvm::DataLayout *a2)
{
  Type *PreallocatedType;
  Type *result;
  uint64_t v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  char v9;
  const char *v10;
  _QWORD v11[2];

  v11[0] = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  v11[0] = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)v11, *((_DWORD *)this + 8));
  PreallocatedType = (Type *)llvm::AttributeSet::getByValType((llvm::AttributeSet *)v11);
  if (PreallocatedType
    || (PreallocatedType = (Type *)llvm::AttributeSet::getByRefType((llvm::AttributeSet *)v11)) != 0
    || (PreallocatedType = (Type *)llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)v11)) != 0
    || (PreallocatedType = (Type *)llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)v11)) != 0
    || (result = (Type *)llvm::AttributeSet::getStructRetType((llvm::AttributeSet *)v11),
        (PreallocatedType = result) != 0))
  {
    llvm::DataLayout::getTypeSizeInBits(a2, PreallocatedType);
    v6 = (unint64_t)(v5 + 7) >> 3;
    v8 = v7 != 0;
    llvm::DataLayout::getABITypeAlign(a2, (llvm::Type *)PreallocatedType);
    v11[0] = ((1 << v9) + v6 - 1) & -(1 << v9);
    v11[1] = v8;
    return (Type *)llvm::TypeSize::operator unsigned long long(v11, v10);
  }
  return result;
}

uint64_t llvm::Argument::getParamAlign(llvm::Argument *this)
{
  return llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamStructRetType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamStructRetType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::hasStructRetAttr(llvm::Argument *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
    return llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8) + 1, 77);
  else
    return 0;
}

uint64_t llvm::Argument::hasInRegAttr(llvm::Argument *this)
{
  return llvm::AttributeList::hasAttributeAtIndex((uint64_t *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8) + 1, 12);
}

uint64_t *llvm::Function::addParamAttr(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *result;
  int v5;

  v5 = a2;
  result = llvm::AttributeList::addParamAttribute((_QWORD *)(a1 + 112), **(uint64_t ***)a1, &v5, 1, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t *llvm::Function::removeParamAttr(uint64_t a1, int a2, int a3)
{
  uint64_t *result;

  result = llvm::AttributeList::removeAttributeAtIndex((_QWORD *)(a1 + 112), **(uint64_t ***)a1, a2 + 1, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t *llvm::Argument::removeAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v3 + 112);
  result = llvm::AttributeList::removeAttributesAtIndex(&v5, **(uint64_t ***)v3, *(_DWORD *)(a1 + 32) + 1, a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 112) = result;
  return result;
}

uint64_t llvm::Function::getParamAttribute(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2 + 1, a3);
}

void llvm::Function::eraseFromParent(llvm::Function *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ValueName;
  uint64_t v5;
  _QWORD *v6;
  llvm::Use *v7;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(v2 + 112);
    if (v3)
    {
      ValueName = llvm::Value::getValueName(this);
      llvm::ValueSymbolTable::removeValueName(v3, ValueName);
    }
  }
  v5 = *((_QWORD *)this + 7);
  v6 = (_QWORD *)*((_QWORD *)this + 8);
  *v6 = v5;
  *(_QWORD *)(v5 + 8) = v6;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  llvm::Function::~Function((llvm::Value **)this);
  llvm::User::operator delete(v7);
}

uint64_t llvm::Function::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 != a5 && a2 != a5)
  {
    result = llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(result + 72, a3 + 72, (uint64_t)a4, (uint64_t)a5);
    v8 = *a5;
    v9 = *a4;
    *(_QWORD *)(v9 + 8) = a5;
    *a5 = v9;
    v10 = *a2;
    *(_QWORD *)(v8 + 8) = a2;
    *a4 = v10;
    *(_QWORD *)(v10 + 8) = a4;
    *a2 = v8;
  }
  return result;
}

uint64_t llvm::Function::Function(uint64_t a1, uint64_t a2, char a3, llvm::Type *a4, const char **a5, uint64_t a6)
{
  llvm::Type *v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  llvm::ValueSymbolTable **v17;
  llvm::ValueSymbolTable *v18;
  int v19;
  uint64_t v20;
  llvm::ValueSymbolTable *v21;
  void *v22;
  uint64_t *v23;
  llvm::ValueSymbolTable *v24;
  uint64_t v25;
  const char *Name;
  unint64_t v27;
  llvm::LLVMContext *v28;
  unsigned int v29;
  int v30;

  if ((_DWORD)a4 == -1)
  {
    if (a6)
      a4 = (llvm::Type *)*(unsigned int *)(a6 + 268);
    else
      a4 = 0;
  }
  v11 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)a2, a4);
  v12 = (llvm::Value *)llvm::Value::Value(a1, v11, 0);
  *(_DWORD *)(a1 + 20) &= 0xF8000000;
  *(_QWORD *)(a1 + 24) = a2;
  v13 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v14 = v13 & 0xFFFE0000 | a3 & 0xF;
  if ((a3 & 0xFu) - 7 < 2)
    v14 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v14;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName(v12, a5);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v15 = a1 + 56;
  v16 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  *(_DWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = (*(_DWORD *)(a2 + 12) - 1);
  *(_QWORD *)(a1 + 104) = 0;
  v17 = (llvm::ValueSymbolTable **)(a1 + 104);
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 124) = -1;
  *(_DWORD *)(a1 + 32) = v16;
  if ((llvm::LLVMContext::shouldDiscardValueNames(**(llvm::LLVMContext ***)a1) & 1) == 0)
  {
    v18 = (llvm::ValueSymbolTable *)operator new(0x20uLL);
    v19 = dword_1ECD32AA0;
    v20 = llvm::StringMapImpl::StringMapImpl((uint64_t)v18, 0, 16);
    *(_DWORD *)(v20 + 24) = v19;
    *(_DWORD *)(v20 + 28) = 0;
    v21 = *v17;
    *v17 = v18;
    if (v21)
    {
      llvm::ValueSymbolTable::~ValueSymbolTable(v21);
      operator delete(v22);
    }
  }
  if (*(_DWORD *)(a2 + 12) != 1)
    *(_WORD *)(a1 + 18) = 1;
  if (a6)
  {
    v23 = (uint64_t *)(a6 + 24);
    *(_QWORD *)(a1 + 40) = a6;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v24 = *(llvm::ValueSymbolTable **)(a6 + 112);
      if (v24)
        llvm::ValueSymbolTable::reinsertValue(v24, (llvm::Value *)a1);
    }
    v25 = *v23;
    *(_QWORD *)(a1 + 56) = *v23;
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(v25 + 8) = v15;
    *v23 = v15;
  }
  Name = llvm::Value::getName((llvm::Value *)a1);
  if (v27 < 5)
  {
    v28 = (llvm::LLVMContext *)*(unsigned int *)(a1 + 36);
    *(_DWORD *)(a1 + 32) &= ~0x2000u;
    if (!(_DWORD)v28)
      return a1;
    goto LABEL_26;
  }
  v29 = bswap32(*(_DWORD *)Name);
  if (v29 == 1819047533)
  {
    v30 = *((unsigned __int8 *)Name + 4) - 46;
  }
  else if (v29 < 0x6C6C766D)
  {
    v30 = -1;
  }
  else
  {
    v30 = 1;
  }
  v28 = (llvm::LLVMContext *)*(unsigned int *)(a1 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFDFFF | ((v30 == 0) << 13);
  if ((_DWORD)v28)
LABEL_26:
    *(_QWORD *)(a1 + 112) = llvm::Intrinsic::getAttributes(**(llvm::Intrinsic ***)a1, v28);
  return a1;
}

uint64_t *llvm::Intrinsic::getAttributes(llvm::Intrinsic *this, llvm::LLVMContext *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  if ((_DWORD)a2)
    __asm { BR              X10 }
  return llvm::AttributeList::get((uint64_t *)this, (uint64_t)&v3, 0);
}

void llvm::Function::~Function(llvm::Value **this)
{
  llvm::Value *v2;
  llvm::Value *v3;
  uint64_t v4;
  llvm::Value *v5;
  llvm::ValueSymbolTable *v6;
  void *v7;
  const char *v8;
  __int16 v9;

  llvm::Function::deleteBodyImpl((llvm::Function *)this, 1);
  v2 = this[11];
  if (v2)
  {
    v3 = this[12];
    if (v3)
    {
      v4 = 40 * (_QWORD)v3;
      do
      {
        v9 = 257;
        llvm::Value::setName(v2, &v8);
        llvm::Value::~Value(v2, v5);
        v2 = (llvm::Value *)((char *)v2 + 40);
        v4 -= 40;
      }
      while (v4);
      v2 = this[11];
    }
    operator delete(v2);
    this[11] = 0;
  }
  if ((*((_WORD *)this + 9) & 0x4000) != 0)
  {
    llvm::LLVMContext::deleteGC(*(int32x2_t ***)*this, (const llvm::Function *)this);
    *((_WORD *)this + 9) &= ~0x4000u;
  }
  v6 = this[13];
  this[13] = 0;
  if (v6)
  {
    llvm::ValueSymbolTable::~ValueSymbolTable(v6);
    operator delete(v7);
  }
  llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::clear((uint64_t)(this + 9));
  llvm::GlobalObject::~GlobalObject((llvm::GlobalObject *)this);
}

void llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Type *v6;
  _DWORD *v7;
  llvm::Value *v8;
  const char *v9;
  __int16 v10;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (v2 >= 0x666666666666667)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v3 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 11) = operator new(40 * v2);
    if ((_DWORD)v2)
    {
      v4 = 0;
      v5 = 32;
      do
      {
        v6 = *(llvm::Type **)(*(_QWORD *)(v3 + 16) + 8 * v4 + 8);
        v7 = (_DWORD *)(*((_QWORD *)this + 11) + v5);
        v10 = 257;
        v8 = (llvm::Value *)llvm::Value::Value((uint64_t)(v7 - 8), v6, 21);
        *((_QWORD *)v7 - 1) = this;
        *v7 = v4;
        llvm::Value::setName(v8, &v9);
        v5 += 40;
        ++v4;
      }
      while (v2 != v4);
    }
  }
  *((_WORD *)this + 9) &= ~1u;
}

void llvm::Function::deleteBodyImpl(llvm::Function *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  int v9;
  uint64_t v10;
  char *v11;
  llvm::ConstantPointerNull *v12;
  llvm::PointerType *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;

  *((_DWORD *)this + 8) &= ~0x1000000u;
  v4 = (_QWORD *)((char *)this + 72);
  v5 = (_QWORD *)*((_QWORD *)this + 10);
  if (v5 != (_QWORD *)((char *)this + 72))
  {
    do
    {
      if (v5)
        v6 = (uint64_t)(v5 - 3);
      else
        v6 = 0;
      llvm::BasicBlock::dropAllReferences(v6);
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != v4);
  }
  if ((_QWORD *)*v4 != v4)
  {
    do
    {
      v7 = *((_QWORD *)this + 10);
      if (v7)
        v8 = (llvm::BasicBlock *)(v7 - 24);
      else
        v8 = 0;
      llvm::BasicBlock::eraseFromParent(v8);
    }
    while (*((_QWORD **)this + 9) != v4);
  }
  v9 = *((_DWORD *)this + 5);
  v10 = v9 & 0x7FFFFFF;
  if ((v9 & 0x7FFFFFF) != 0)
  {
    if (a2)
    {
      if ((v9 & 0x40000000) != 0)
      {
        v11 = (char *)*((_QWORD *)this - 1);
      }
      else
      {
        v10 = v10;
        v11 = (char *)this - 32 * v10;
      }
      v17 = 32 * v10;
      v18 = (_QWORD **)(v11 + 16);
      do
      {
        if (*(v18 - 2))
        {
          **v18 = *(v18 - 1);
          v19 = (uint64_t)*(v18 - 1);
          if (v19)
            *(_QWORD *)(v19 + 16) = *v18;
        }
        *(v18 - 2) = 0;
        v18 += 4;
        v17 -= 32;
      }
      while (v17);
      *((_DWORD *)this + 5) &= 0xF8000000;
LABEL_52:
      *((_WORD *)this + 9) &= 0xFFF1u;
      goto LABEL_53;
    }
    v12 = (llvm::ConstantPointerNull *)llvm::PointerType::get(**(llvm::PointerType ***)this, 0);
    v14 = llvm::ConstantPointerNull::get(v12, v13);
    v15 = *((_DWORD *)this + 5);
    if ((v15 & 0x40000000) != 0)
    {
      v16 = (char *)*((_QWORD *)this - 1);
      if (!*(_QWORD *)v16)
        goto LABEL_28;
    }
    else
    {
      v16 = (char *)this - 32 * (v15 & 0x7FFFFFF);
      if (!*(_QWORD *)v16)
        goto LABEL_28;
    }
    **((_QWORD **)v16 + 2) = *((_QWORD *)v16 + 1);
    v20 = *((_QWORD *)v16 + 1);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)v16 + 2);
LABEL_28:
    *(_QWORD *)v16 = v14;
    if (v14)
    {
      v21 = (_QWORD *)(v14 + 8);
      v22 = *(_QWORD *)(v14 + 8);
      *((_QWORD *)v16 + 1) = v22;
      if (v22)
        *(_QWORD *)(v22 + 16) = v16 + 8;
      *((_QWORD *)v16 + 2) = v21;
      *v21 = v16;
    }
    v23 = *((_DWORD *)this + 5);
    if ((v23 & 0x40000000) != 0)
    {
      v24 = (char *)*((_QWORD *)this - 1);
      v25 = (uint64_t *)(v24 + 32);
      if (!*((_QWORD *)v24 + 4))
        goto LABEL_38;
    }
    else
    {
      v24 = (char *)this - 32 * (v23 & 0x7FFFFFF);
      v25 = (uint64_t *)(v24 + 32);
      if (!*((_QWORD *)v24 + 4))
        goto LABEL_38;
    }
    **((_QWORD **)v24 + 6) = *((_QWORD *)v24 + 5);
    v26 = *((_QWORD *)v24 + 5);
    if (v26)
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v24 + 6);
LABEL_38:
    *v25 = v14;
    if (v14)
    {
      v27 = (uint64_t **)(v14 + 8);
      v28 = *(_QWORD *)(v14 + 8);
      *((_QWORD *)v24 + 5) = v28;
      if (v28)
        *(_QWORD *)(v28 + 16) = v24 + 40;
      *((_QWORD *)v24 + 6) = v27;
      *v27 = v25;
    }
    v29 = *((_DWORD *)this + 5);
    if ((v29 & 0x40000000) != 0)
    {
      v30 = (_QWORD *)*((_QWORD *)this - 1);
      v31 = v30 + 8;
      if (!v30[8])
        goto LABEL_48;
    }
    else
    {
      v30 = (_QWORD *)((char *)this - 32 * (v29 & 0x7FFFFFF));
      v31 = v30 + 8;
      if (!v30[8])
      {
LABEL_48:
        *v31 = v14;
        if (v14)
        {
          v35 = *(_QWORD *)(v14 + 8);
          v33 = (uint64_t **)(v14 + 8);
          v34 = v35;
          v30[9] = v35;
          if (v35)
            *(_QWORD *)(v34 + 16) = v30 + 9;
          v30[10] = v33;
          *v33 = v31;
        }
        goto LABEL_52;
      }
    }
    *(_QWORD *)v30[10] = v30[9];
    v32 = v30[9];
    if (v32)
      *(_QWORD *)(v32 + 16) = v30[10];
    goto LABEL_48;
  }
LABEL_53:
  llvm::Value::clearMetadata(this);
}

uint64_t *llvm::Function::removeRetAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  result = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)(a1 + 112), **(uint64_t ***)a1, 0, a2);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::hasFnAttribute(uint64_t a1, int a2)
{
  return llvm::AttributeSet::hasAttribute((_QWORD *)(a1 + 112), a2);
}

uint64_t *llvm::Function::getGC(llvm::LLVMContext ***this)
{
  return llvm::LLVMContext::getGC(**this, (const llvm::Function *)this);
}

void llvm::Function::setGC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
    v3 = *(_QWORD *)(a2 + 8);
  else
    v3 = *(unsigned __int8 *)(a2 + 23);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xBFFF | ((v3 != 0) << 14);
  v4 = **(uint64_t ***)a1;
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)__p = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  llvm::LLVMContext::setGC(v4, a1, (__int128 *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::Function::setPersonalityFn(llvm::Function *this, llvm::Constant *a2)
{
  __int16 v3;
  uint64_t result;

  v3 = a2 != 0;
  result = llvm::Function::setHungoffOperand<0>((uint64_t)this, (uint64_t)a2);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFF7 | (8 * v3);
  return result;
}

uint64_t llvm::Function::getPersonalityFn(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *(_QWORD *)v2;
}

uint64_t llvm::Function::setPrefixData(llvm::Function *this, llvm::Constant *a2)
{
  __int16 v3;
  uint64_t result;

  v3 = a2 != 0;
  result = llvm::Function::setHungoffOperand<1>((uint64_t)this, (uint64_t)a2);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFD | (2 * v3);
  return result;
}

uint64_t llvm::Function::getPrefixData(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *((_QWORD *)v2 + 4);
}

uint64_t llvm::Function::setPrologueData(llvm::Function *this, llvm::Constant *a2)
{
  __int16 v3;
  uint64_t result;

  v3 = a2 != 0;
  result = llvm::Function::setHungoffOperand<2>((uint64_t)this, (uint64_t)a2);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFB | (4 * v3);
  return result;
}

uint64_t llvm::Function::getPrologueData(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *((_QWORD *)v2 + 8);
}

uint64_t llvm::Function::getMemoryEffects(llvm::Function *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  return llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v2);
}

unint64_t llvm::Function::lookupIntrinsicID(const char *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  char **v11;
  size_t v12;
  size_t v13;
  int v14;
  const char **v15;
  int v16;
  unint64_t v17;
  const char *v19;
  size_t v20;
  char v21;

  v4 = 5;
  if (a2 < 5)
    v4 = a2;
  v19 = &a1[v4];
  v20 = a2 - v4;
  v21 = 46;
  v5 = llvm::StringRef::find((uint64_t *)&v19, &v21, 1uLL, 0);
  if (v5 == -1)
  {
    v6 = v19;
    v7 = v20;
  }
  else
  {
    v6 = v19;
    if (v5 >= v20)
      v7 = v20;
    else
      v7 = v5;
  }
  v8 = (char **)&TargetInfos;
  v9 = 19;
  do
  {
    v10 = v9 >> 1;
    v11 = &v8[4 * (v9 >> 1)];
    v12 = (size_t)v11[1];
    if (v7 >= v12)
      v13 = (size_t)v11[1];
    else
      v13 = v7;
    if (v13 && (v14 = memcmp(*v11, v6, v13)) != 0)
    {
      if (v14 < 0)
        goto LABEL_9;
    }
    else if (v12 < v7)
    {
LABEL_9:
      v8 = v11 + 4;
      v10 = v9 + ~v10;
    }
    v9 = v10;
  }
  while (v10);
  if (v8 == off_1E0E76138 || v8[1] != (char *)v7 || v7 && memcmp(*v8, v6, v7))
    v8 = (char **)&TargetInfos;
  v15 = (const char **)&IntrinsicNameTable[(_QWORD)v8[2] + 1];
  v16 = llvm::Intrinsic::lookupLLVMIntrinsicByName(v15, (uint64_t)v8[3], a1, a2);
  if (v16 == -1)
    return 0;
  v17 = v16 + ((unint64_t)((char *)v15 - (char *)IntrinsicNameTable) >> 3);
  if (a2 != strlen(v15[v16]) && ((llvm::Intrinsic::isOverloaded::OTable[v17 >> 3] >> (v17 & 7)) & 1) == 0)
    return 0;
  return v17;
}

unint64_t llvm::Function::updateAfterNameChange(llvm::Function *this)
{
  const char *Name;
  unint64_t v3;
  BOOL v4;
  unint64_t result;

  *((_DWORD *)this + 31) = -1;
  Name = llvm::Value::getName(this);
  if (v3 >= 5 && (*(_DWORD *)Name == 1836477548 ? (v4 = Name[4] == 46) : (v4 = 0), v4))
  {
    *((_DWORD *)this + 8) |= 0x2000u;
    result = llvm::Function::lookupIntrinsicID(Name, v3);
    *((_DWORD *)this + 9) = result;
  }
  else
  {
    result = 0;
    *((_QWORD *)this + 4) = *((_DWORD *)this + 8) & 0xFFFFDFFF;
  }
  return result;
}

double llvm::Intrinsic::getName@<D0>(int a1@<W0>, BOOL **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  return getIntrinsicNameImpl(a6, a1, a2, a3, a4, a5);
}

double getIntrinsicNameImpl(std::string *a1, int a2, BOOL **a3, uint64_t a4, uint64_t *a5, uint64_t Type)
{
  char *v12;
  size_t v13;
  std::string::size_type v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL **v19;
  std::string *v20;
  std::string::size_type v21;
  void **v22;
  std::string::size_type v23;
  int8x16_t *v24;
  std::string::size_type size;
  double result;
  std::string v27;
  void *__p[2];
  uint64_t v29;
  std::string __dst;
  char v31;

  v31 = 0;
  v12 = IntrinsicNameTable[a2];
  if (!v12)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    goto LABEL_7;
  }
  v13 = strlen(IntrinsicNameTable[a2]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_12:
    memmove(p_dst, v12, v14);
    p_dst->__r_.__value_.__s.__data_[v14] = 0;
    if (!a4)
      goto LABEL_26;
    goto LABEL_13;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
    goto LABEL_12;
LABEL_7:
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (a4)
  {
LABEL_13:
    v18 = 8 * a4;
    v19 = a3;
    do
    {
      getMangledTypeStr(&v27, *v19, &v31);
      v20 = std::string::insert(&v27, 0, ".");
      v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v29 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v29 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if (v29 >= 0)
        v23 = HIBYTE(v29);
      else
        v23 = (std::string::size_type)__p[1];
      std::string::append(&__dst, (const std::string::value_type *)v22, v23);
      if (SHIBYTE(v29) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
LABEL_25:
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_25;
      }
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
LABEL_26:
  if (v31)
  {
    if (!Type)
      Type = llvm::Intrinsic::getType(*a5, a2);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = (int8x16_t *)&__dst;
    else
      v24 = (int8x16_t *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    llvm::Module::getUniqueIntrinsicName((uint64_t)a5, v24, (const unsigned __int8 *)size, a2, Type, (uint64_t)a1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a1 = __dst;
  }
  return result;
}

void llvm::Intrinsic::getIntrinsicInfoTableEntries(int a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  void *v7;
  __int128 v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = IIT_Table[a1 - 1];
  v7 = v9;
  v8 = xmmword_1812349A0;
  if ((v1 & 0x80000000) != 0)
  {
    v4 = v1 & 0x7FFFFFFF;
    v5 = &IIT_LongEncodingTable;
    v2 = 14338;
  }
  else
  {
    v2 = 0;
    do
    {
      if ((unint64_t)(v2 + 1) > *((_QWORD *)&v8 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v7, v9, v2 + 1, 1);
        v2 = v8;
      }
      *((_BYTE *)v7 + v2) = v1 & 0xF;
      v2 = v8 + 1;
      *(_QWORD *)&v8 = v8 + 1;
      v3 = v1 > 0xF;
      v1 >>= 4;
    }
    while (v3);
    v4 = 0;
    v5 = v7;
  }
  v6 = v4;
  do
    DecodeIITType(&v6, (uint64_t)v5);
  while (v2 != v6 && v5[v6]);
  if (v7 != v9)
    free(v7);
}

void DecodeIITType(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = v2 + 1;
  __asm { BR              X12 }
}

void sub_180CEEC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 2;
  if ((v10 & 1) != 0)
    v13 = v12;
  LOBYTE(a10) = BYTE4(v13);
  llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(v11, __SPAIR64__(v13, 11), a10);
  JUMPOUT(0x180CEEC64);
}

void sub_180CEEDC0()
{
  int v0;
  _DWORD *v1;

  *v1 = v0 + 2;
  JUMPOUT(0x180CEEDB0);
}

void sub_180CEEDDC()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 15;
  v4 = *(unsigned int *)(v0 + 8);
  if (v4 >= *(_DWORD *)(v0 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v0, (void *)(v0 + 16), v4 + 1, 12);
    LODWORD(v4) = *(_DWORD *)(v0 + 8);
  }
  v5 = *(_QWORD *)v0 + 12 * v4;
  *(_QWORD *)v5 = 0xF0000000DLL;
  *(_DWORD *)(v5 + 8) = 0;
  ++*(_DWORD *)(v0 + 8);
  do
  {
    DecodeIITType(v2, v1);
    --v3;
  }
  while (v3);
}

uint64_t llvm::Intrinsic::getType(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[64];
  void *v17;
  uint64_t v18;
  _QWORD v19[13];

  v19[12] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2);
  v12 = (unsigned int *)v19;
  v13 = 0;
  DecodeFixedType(&v12);
  v3 = v2;
  v14 = v16;
  v15 = 0x800000000;
  if (v13)
  {
    do
    {
      DecodeFixedType(&v12);
      v5 = v4;
      v6 = v15;
      if (v15 >= (unint64_t)HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v15 + 1, 8);
        v6 = v15;
      }
      *((_QWORD *)v14 + v6) = v5;
      v7 = v15;
      v8 = (v15 + 1);
      LODWORD(v15) = v15 + 1;
    }
    while (v13);
    if ((_DWORD)v8)
    {
      if (*(_BYTE *)(*((_QWORD *)v14 + v8 - 1) + 8) == 7)
      {
        LODWORD(v15) = v7;
        v9 = llvm::FunctionType::get(v3, (uint64_t)v14, v7, 1);
        v10 = v14;
        if (v14 == v16)
          goto LABEL_14;
LABEL_13:
        free(v10);
        goto LABEL_14;
      }
    }
    else
    {
      v8 = 0;
    }
    v9 = llvm::FunctionType::get(v3, (uint64_t)v14, v8, 0);
    v10 = v14;
    if (v14 == v16)
      goto LABEL_14;
    goto LABEL_13;
  }
  v9 = llvm::FunctionType::get(v2, (uint64_t)v16, 0, 0);
  v10 = v14;
  if (v14 != v16)
    goto LABEL_13;
LABEL_14:
  if (v17 != v19)
    free(v17);
  return v9;
}

void DecodeFixedType(unsigned int **a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **a1;
  v2 = (uint64_t)a1[1] - 1;
  *a1 += 3;
  a1[1] = (unsigned int *)v2;
  __asm { BR              X10 }
}

uint64_t sub_180CEF470(uint64_t a1, llvm::LLVMContext *a2)
{
  llvm::Type *v2;

  return llvm::Type::getVoidTy(v2, a2);
}

void getIntrinsicFnAttributeSet(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_180CEFC0C()
{
  uint64_t *v0;
  unint64_t v2;

  v2 = llvm::Attribute::get(v0, 37, 0);
  return ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t))llvm::AttributeSet::get)(v0, &v2, 1);
}

void getIntrinsicArgAttributeSet(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_180CF1124()
{
  uint64_t *v0;
  unint64_t v2;

  v2 = llvm::Attribute::get(v0, 11, 0);
  return ((uint64_t (*)(uint64_t *, unint64_t *, uint64_t))llvm::AttributeSet::get)(v0, &v2, 1);
}

uint64_t llvm::Intrinsic::getDeclaration(uint64_t *a1, int a2, BOOL **a3, uint64_t a4)
{
  uint64_t Type;
  int8x16_t *p_p;
  std::string::size_type size;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  const unsigned __int8 *v14;
  uint64_t v15;
  std::string __p;

  Type = llvm::Intrinsic::getType(*a1, a2);
  if (a4)
  {
    getIntrinsicNameImpl(&__p, a2, a3, a4, a1, Type);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (int8x16_t *)&__p;
    else
      p_p = (int8x16_t *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::Module::getOrInsertFunction((uint64_t)a1, p_p, (const unsigned __int8 *)size, Type);
    v12 = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = (int8x16_t *)IntrinsicNameTable[a2];
    if (v13)
      v14 = (const unsigned __int8 *)strlen(IntrinsicNameTable[a2]);
    else
      v14 = 0;
    llvm::Module::getOrInsertFunction((uint64_t)a1, v13, v14, Type);
    return v15;
  }
  return v12;
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature(uint64_t a1, unsigned int **a2)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((matchIntrinsicType(**(_QWORD **)(a1 + 16), a2) & 1) != 0)
    return 1;
  v6 = 8 * *(unsigned int *)(a1 + 12) - 8;
  if (8 * *(unsigned int *)(a1 + 12) == 8)
    return 0;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
  v8 = 8 * (v6 >> 3);
  while ((matchIntrinsicType(*v7, a2) & 1) == 0)
  {
    ++v7;
    v8 -= 8;
    if (!v8)
      return 0;
  }
  return 2;
}

uint64_t matchIntrinsicType(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
  {
    v3 = **a2;
    *a2 += 3;
    a2[1] = (unsigned int *)((char *)v2 - 1);
    __asm { BR              X14 }
  }
  return 1;
}

void sub_180CF18CC(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;

  v7 = a1 >> 3;
  if (*(_DWORD *)(v4 + 8) <= a1 >> 3)
  {
    *v6 = v2 + 24;
    v6[1] = a2 - 2;
    if ((v5 & 1) == 0)
      JUMPOUT(0x180CF1B1CLL);
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8 * v7) + 8) & 0xFE) == 0x12)
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v7);
    else
      v8 = 0;
    if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
      v9 = v3;
    else
      v9 = 0;
    if ((v8 == 0) != (v9 != 0))
    {
      if (!v9
        || (v10 = *(_DWORD *)(v8 + 32), v11 = *(unsigned __int8 *)(v8 + 8) == 19, v10 == *(_DWORD *)(v9 + 32))
        && ((v11 ^ (*(_BYTE *)(v9 + 8) == 19)) & 1) == 0)
      {
        JUMPOUT(0x180CF1958);
      }
    }
  }
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1970(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*(_DWORD *)(v3 + 8) <= a2)
  {
    if ((v4 & 1) == 0)
    {
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(v3, v2);
      JUMPOUT(0x180CF1B1CLL);
    }
  }
  else if ((v4 & 1) == 0)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(v3, v2);
  }
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1A08(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (*(_DWORD *)(v2 + 8) > a2 >> 3)
  {
    v3 = *(_QWORD *)(*(_QWORD *)v2 + 8 * (a2 >> 3));
    if (v3)
      v4 = (*(_DWORD *)(v3 + 8) & 0xFE) == 18;
    else
      v4 = 0;
    if (!v4)
      JUMPOUT(0x180CF18B0);
    JUMPOUT(0x180CF1A38);
  }
  JUMPOUT(0x180CF1B18);
}

void sub_180CF1A44(uint64_t a1, llvm::VectorType *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(v3 + 8) > a2 >> 3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v3 + 8 * (a2 >> 3));
    if ((*(_DWORD *)(v4 + 8) & 0xFE) != 0x12)
      v4 = 0;
    if ((*(_DWORD *)(v2 + 8) & 0xFE) != 0x12)
      v2 = 0;
    if (v2)
    {
      if (v4)
        llvm::VectorType::getInteger((llvm::Type **)v4, a2);
    }
    JUMPOUT(0x180CF18B0);
  }
  JUMPOUT(0x180CF1B18);
}

void sub_180CF1A98()
{
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1AA8()
{
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1B9C()
{
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1BD0()
{
  uint64_t v0;
  int v1;

  v1 = *(_DWORD *)(v0 + 8);
  if ((v1 & 0xFE) == 0x12)
    v1 = *(_DWORD *)(**(_QWORD **)(v0 + 16) + 8);
  if (v1 < 6u && ((0x2Fu >> v1) & 1) != 0)
    JUMPOUT(0x180CF1B2CLL);
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1C18()
{
  JUMPOUT(0x180CF18B0);
}

void sub_180CF1C2C()
{
  JUMPOUT(0x180CF19FCLL);
}

uint64_t llvm::Intrinsic::matchIntrinsicVarArg(uint64_t result, int **a2)
{
  int *v2;
  int v3;

  v2 = a2[1];
  if (v2)
  {
    if (v2 == (int *)1)
    {
      v3 = **a2;
      *a2 += 3;
      a2[1] = 0;
      if (v3 == 1)
        return result ^ 1;
      else
        return 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

llvm::Value *llvm::Intrinsic::remangleIntrinsicFunction(llvm::Intrinsic *this, llvm::Function *a2)
{
  int v3;
  int v4;
  void *v5;
  int v6;
  const char *Name;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *p_p;
  char v11;
  size_t size;
  uint64_t NamedValue;
  llvm::Value *Declaration;
  int v15;
  size_t v16;
  unint64_t v17;
  unsigned int *p_dst;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string __p;
  unsigned int *__dst;
  size_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[32];
  void *v32;
  uint64_t v33;
  _WORD v34[48];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  v3 = *((_DWORD *)this + 9);
  if (!v3)
    goto LABEL_22;
  v32 = v34;
  v33 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v3);
  __dst = (unsigned int *)v32;
  v27 = v33;
  if (llvm::Intrinsic::matchIntrinsicSignature(*((_QWORD *)this + 3), &__dst))
  {
LABEL_3:
    v4 = 0;
    v5 = v32;
    if (v32 == v34)
      goto LABEL_5;
    goto LABEL_4;
  }
  v20 = *(_DWORD *)(*((_QWORD *)this + 3) + 8);
  if (v27)
  {
    if (v27 != 1)
      goto LABEL_3;
    if (v20 < 0x100 || *__dst != 1)
      goto LABEL_3;
  }
  else if (v20 >= 0x100)
  {
    goto LABEL_3;
  }
  v4 = 1;
  v5 = v32;
  if (v32 != v34)
LABEL_4:
    free(v5);
LABEL_5:
  if (!v4)
  {
LABEL_22:
    Declaration = 0;
    goto LABEL_23;
  }
  v6 = *((_DWORD *)this + 9);
  Name = llvm::Value::getName(this);
  v9 = v8;
  p_p = (int8x16_t *)&__p;
  getIntrinsicNameImpl(&__p, v6, (BOOL **)v29, v30, *((uint64_t **)this + 5), *((_QWORD *)this + 3));
  v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (int8x16_t *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9 != size || size && memcmp(Name, p_p, size))
  {
    NamedValue = llvm::Module::getNamedValue(*((_QWORD *)this + 5), p_p, (const unsigned __int8 *)size);
    if (!NamedValue)
    {
LABEL_48:
      Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), v6, (BOOL **)v29, v30);
      goto LABEL_49;
    }
    Declaration = (llvm::Value *)NamedValue;
    if (!*(_BYTE *)(NamedValue + 16) && *(_QWORD *)(NamedValue + 24) == *((_QWORD *)this + 3))
    {
LABEL_49:
      *((_WORD *)Declaration + 9) = *((_WORD *)Declaration + 9) & 0xC00F | *((_WORD *)this + 9) & 0x3FF0;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_23;
      goto LABEL_50;
    }
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v16 = __p.__r_.__value_.__l.__size_;
    v17 = v16 + 8;
    if (v16 + 8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v17 >= 0x17)
    {
      v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v22 = v17 | 7;
      v23 = v22 + 1;
      p_dst = (unsigned int *)operator new(v22 + 1);
      v27 = v16 + 8;
      v28 = v23 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      __dst = 0;
      p_dst = (unsigned int *)&__dst;
      HIBYTE(v28) = v16 + 8;
      if (!v16)
        goto LABEL_46;
    }
    if (v15 >= 0)
      v24 = &__p;
    else
      v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(p_dst, v24, v16);
LABEL_46:
    strcpy((char *)p_dst + v16, ".renamed");
    v34[8] = 260;
    v32 = &__dst;
    llvm::Value::setName(Declaration, (const char **)&v32);
    if (SHIBYTE(v28) < 0)
      operator delete(__dst);
    goto LABEL_48;
  }
  Declaration = 0;
  if ((v11 & 0x80) == 0)
    goto LABEL_23;
LABEL_50:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
  if (v29 != v31)
    free(v29);
  return Declaration;
}

uint64_t llvm::Function::hasAddressTaken(llvm::Function *this, const llvm::User **a2, int a3, int a4, int a5, int a6, char a7)
{
  const llvm::Use *v7;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v19;
  unsigned int OperandNo;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  BOOL v35;
  const char *Name;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  char *Descriptor;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  unsigned int v51;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;

  v7 = (const llvm::Use *)*((_QWORD *)this + 1);
  if (!v7)
    return 0;
  while (1)
  {
    v13 = *((_QWORD *)v7 + 3);
    v14 = *(unsigned __int8 *)(v13 + 16);
    if (v14 == 4)
      goto LABEL_7;
    if (a3)
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v56, v7);
      if (v56)
        v15 = v58 == 0;
      else
        v15 = 1;
      v16 = v15;
      if (v57 != &v59)
        free(v57);
      if (!v16)
        goto LABEL_7;
      v14 = *(unsigned __int8 *)(v13 + 16);
    }
    if (v14 < 0x1C)
      break;
    if (v14 - 33 > 0x33 || ((1 << (v14 - 33)) & 0x8000000000041) == 0)
    {
      if (v14 - 77 > 1 || (a4 & 1) == 0)
        goto LABEL_73;
      goto LABEL_48;
    }
    if (v14 == 84 && a4 != 0)
    {
      v19 = *(_QWORD *)(v13 - 32);
      if (v19)
      {
        if (!*(_BYTE *)(v19 + 16)
          && *(_QWORD *)(v19 + 24) == *(_QWORD *)(v13 + 80)
          && (*(_BYTE *)(v19 + 33) & 0x20) != 0)
        {
          v49 = *(_DWORD *)(v19 + 36);
          if (v49 > 259)
          {
            v12 = (v49 - 260) > 0x27 || ((1 << (v49 - 4)) & 0x8000000301) == 0;
            if (!v12 || v49 == 344)
              goto LABEL_7;
          }
          else
          {
            if ((v49 - 11) <= 0x35 && ((1 << (v49 - 11)) & 0x3C000000000001) != 0)
              goto LABEL_7;
            v51 = v49 - 139;
            if (v51 <= 0x34 && ((1 << v51) & 0x18600000000001) != 0)
              goto LABEL_7;
          }
        }
      }
    }
    if ((const llvm::Use *)(v13 - 32) != v7 || (a7 & 1) == 0 && *(_QWORD *)(v13 + 80) != *((_QWORD *)this + 3))
    {
      if (!a6)
        goto LABEL_125;
      OperandNo = llvm::Use::getOperandNo(v7);
      if ((*(_DWORD *)(v13 + 20) & 0x80000000) == 0)
        goto LABEL_125;
      Descriptor = llvm::User::getDescriptor((llvm::User *)v13);
      v44 = Descriptor;
      if ((*(_DWORD *)(v13 + 20) & 0x80000000) != 0)
      {
        v45 = llvm::User::getDescriptor((llvm::User *)v13);
        if (((&v45[v46] - v44) & 0xFFFFFFFF0) == 0)
          goto LABEL_125;
      }
      else if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
      {
        goto LABEL_125;
      }
      if (*((_DWORD *)llvm::User::getDescriptor((llvm::User *)v13) + 2) > OperandNo)
        goto LABEL_125;
      v47 = llvm::User::getDescriptor((llvm::User *)v13);
      if (*(_DWORD *)&v47[v48 - 4] <= OperandNo
        || *(_DWORD *)(*(_QWORD *)llvm::CallBase::getBundleOpInfoForOperand((llvm::CallBase *)v13, OperandNo) + 8) != 6)
      {
        goto LABEL_125;
      }
    }
LABEL_7:
    v7 = (const llvm::Use *)*((_QWORD *)v7 + 1);
    if (!v7)
      return 0;
  }
  v21 = v14 != 5 || a4 == 0;
  if (v21 || *(unsigned __int16 *)(v13 + 18) - 49 > 1)
    goto LABEL_73;
LABEL_48:
  v22 = *(_QWORD *)(v13 + 8);
  if (!v22)
    goto LABEL_7;
  while (1)
  {
    v24 = *(_QWORD *)(v22 + 24);
    if (*(_BYTE *)(v24 + 16) != 84)
      break;
    v25 = *(_QWORD *)(v24 - 32);
    if (!v25
      || *(_BYTE *)(v25 + 16)
      || *(_QWORD *)(v25 + 24) != *(_QWORD *)(v24 + 80)
      || (*(_BYTE *)(v25 + 33) & 0x20) == 0)
    {
      break;
    }
    v26 = *(_DWORD *)(v25 + 36);
    if (v26 > 259)
    {
      v23 = (v26 - 260) > 0x27 || ((1 << (v26 - 4)) & 0x8000000301) == 0;
      if (v23 && v26 != 344)
        break;
    }
    else if ((v26 - 11) > 0x35 || ((1 << (v26 - 11)) & 0x3C000000000001) == 0)
    {
      v28 = v26 - 139;
      v29 = v28 > 0x34;
      v30 = (1 << v28) & 0x18600000000001;
      if (v29 || v30 == 0)
        break;
    }
    v22 = *(_QWORD *)(v22 + 8);
    if (!v22)
      goto LABEL_7;
  }
LABEL_73:
  if (!a5)
    goto LABEL_125;
  v32 = *(_QWORD *)(v13 + 8);
  if (!v32)
    goto LABEL_125;
  if (v14 <= 0x1B)
  {
    if (v14 != 5 || *(unsigned __int16 *)(v13 + 18) - 49 > 1)
      goto LABEL_86;
  }
  else if (v14 - 77 >= 2)
  {
    goto LABEL_86;
  }
  if (!*(_QWORD *)(v32 + 8))
  {
    v33 = *(_QWORD *)(v32 + 24);
    if (!*(_QWORD *)(v33 + 8))
      v33 = v13;
    v32 = *(_QWORD *)(v33 + 8);
    if (!v32)
      goto LABEL_7;
  }
LABEL_86:
  while (1)
  {
    v34 = *(llvm::Value **)(v32 + 24);
    v35 = v34 && *((_BYTE *)v34 + 16) == 3;
    if (!v35 || (*((_BYTE *)v34 + 23) & 0x10) == 0)
      break;
    Name = llvm::Value::getName(*(llvm::Value **)(v32 + 24));
    if (v37 != 18
      || (*(_QWORD *)Name == 0x6D6F632E6D766C6CLL ? (v38 = *((_QWORD *)Name + 1) == 0x73752E72656C6970) : (v38 = 0),
          v38 ? (v39 = *((unsigned __int16 *)Name + 8) == 25701) : (v39 = 0),
          !v39))
    {
      v40 = llvm::Value::getName(v34);
      if (v41 != 9)
        break;
      if (*(_QWORD *)v40 != 0x6573752E6D766C6CLL || v40[8] != 100)
        break;
    }
    v32 = *(_QWORD *)(v32 + 8);
    if (!v32)
      goto LABEL_7;
  }
LABEL_125:
  if (a2)
    *a2 = (const llvm::User *)v13;
  return 1;
}

uint64_t llvm::Function::setHungoffOperand<0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::ConstantPointerNull *Int1PtrTy;
  llvm::PointerType *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v5 = *(_QWORD **)(v2 - 8);
      if (!*v5)
      {
LABEL_11:
        *v5 = a2;
        v11 = *(_QWORD *)(a2 + 8);
        v10 = (_QWORD *)(a2 + 8);
        v9 = v11;
        v5[1] = v11;
        if (v11)
          *(_QWORD *)(v9 + 16) = v5 + 1;
        v5[2] = v10;
        *v10 = v5;
        return result;
      }
    }
    else
    {
      v5 = (_QWORD *)(v2 - 32 * (v4 & 0x7FFFFFF));
      if (!*v5)
        goto LABEL_11;
    }
    *(_QWORD *)v5[2] = v5[1];
    v8 = v5[1];
    if (v8)
      *(_QWORD *)(v8 + 16) = v5[2];
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(result + 20);
  if ((v6 & 0x7FFFFFF) != 0)
  {
    if ((v6 & 0x40000000) != 0)
      v7 = *(_QWORD *)(result - 8);
    else
      v7 = result - 32 * (v6 & 0x7FFFFFF);
    Int1PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt1PtrTy(**(llvm::Type ***)result, 0);
    result = llvm::ConstantPointerNull::get(Int1PtrTy, v13);
    if (*(_QWORD *)v7)
    {
      **(_QWORD **)(v7 + 16) = *(_QWORD *)(v7 + 8);
      v14 = *(_QWORD *)(v7 + 8);
      if (v14)
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(v7 + 16);
    }
    *(_QWORD *)v7 = result;
    if (result)
    {
      v16 = *(_QWORD *)(result + 8);
      result += 8;
      v15 = v16;
      *(_QWORD *)(v7 + 8) = v16;
      if (v16)
        *(_QWORD *)(v15 + 16) = v7 + 8;
      *(_QWORD *)(v7 + 16) = result;
      *(_QWORD *)result = v7;
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<1>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::ConstantPointerNull *Int1PtrTy;
  llvm::PointerType *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v5 = *(_QWORD **)(v2 - 8);
      v6 = v5 + 4;
      if (!v5[4])
      {
LABEL_11:
        v5[4] = a2;
        v12 = *(_QWORD *)(a2 + 8);
        v11 = (_QWORD *)(a2 + 8);
        v10 = v12;
        v5[5] = v12;
        if (v12)
          *(_QWORD *)(v10 + 16) = v5 + 5;
        v5[6] = v11;
        *v11 = v6;
        return result;
      }
    }
    else
    {
      v5 = (_QWORD *)(v2 - 32 * (v4 & 0x7FFFFFF));
      v6 = v5 + 4;
      if (!v5[4])
        goto LABEL_11;
    }
    *(_QWORD *)v5[6] = v5[5];
    v9 = v5[5];
    if (v9)
      *(_QWORD *)(v9 + 16) = v5[6];
    goto LABEL_11;
  }
  v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x7FFFFFF) != 0)
  {
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(result - 8);
    else
      v8 = result - 32 * (v7 & 0x7FFFFFF);
    Int1PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt1PtrTy(**(llvm::Type ***)result, 0);
    result = llvm::ConstantPointerNull::get(Int1PtrTy, v14);
    v15 = (uint64_t *)(v8 + 32);
    if (*(_QWORD *)(v8 + 32))
    {
      **(_QWORD **)(v8 + 48) = *(_QWORD *)(v8 + 40);
      v16 = *(_QWORD *)(v8 + 40);
      if (v16)
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v8 + 48);
    }
    *v15 = result;
    if (result)
    {
      v18 = *(_QWORD *)(result + 8);
      result += 8;
      v17 = v18;
      *(_QWORD *)(v8 + 40) = v18;
      if (v18)
        *(_QWORD *)(v17 + 16) = v8 + 40;
      *(_QWORD *)(v8 + 48) = result;
      *(_QWORD *)result = v15;
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<2>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::ConstantPointerNull *Int1PtrTy;
  llvm::PointerType *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v5 = *(_QWORD **)(v2 - 8);
      v6 = v5 + 8;
      if (!v5[8])
      {
LABEL_11:
        v5[8] = a2;
        v12 = *(_QWORD *)(a2 + 8);
        v11 = (_QWORD *)(a2 + 8);
        v10 = v12;
        v5[9] = v12;
        if (v12)
          *(_QWORD *)(v10 + 16) = v5 + 9;
        v5[10] = v11;
        *v11 = v6;
        return result;
      }
    }
    else
    {
      v5 = (_QWORD *)(v2 - 32 * (v4 & 0x7FFFFFF));
      v6 = v5 + 8;
      if (!v5[8])
        goto LABEL_11;
    }
    *(_QWORD *)v5[10] = v5[9];
    v9 = v5[9];
    if (v9)
      *(_QWORD *)(v9 + 16) = v5[10];
    goto LABEL_11;
  }
  v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x7FFFFFF) != 0)
  {
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(result - 8);
    else
      v8 = result - 32 * (v7 & 0x7FFFFFF);
    Int1PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt1PtrTy(**(llvm::Type ***)result, 0);
    result = llvm::ConstantPointerNull::get(Int1PtrTy, v14);
    v15 = (uint64_t *)(v8 + 64);
    if (*(_QWORD *)(v8 + 64))
    {
      **(_QWORD **)(v8 + 80) = *(_QWORD *)(v8 + 72);
      v16 = *(_QWORD *)(v8 + 72);
      if (v16)
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v8 + 80);
    }
    *v15 = result;
    if (result)
    {
      v18 = *(_QWORD *)(result + 8);
      result += 8;
      v17 = v18;
      *(_QWORD *)(v8 + 72) = v18;
      if (v18)
        *(_QWORD *)(v17 + 16) = v8 + 72;
      *(_QWORD *)(v8 + 80) = result;
      *(_QWORD *)result = v15;
    }
  }
  return result;
}

uint64_t llvm::Function::allocHungoffUselist(uint64_t this)
{
  uint64_t v1;
  llvm::ConstantPointerNull *Int1PtrTy;
  llvm::PointerType *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) != 0)
    return this;
  v1 = this;
  llvm::User::allocHungoffUses((llvm::User *)this, 3u, 0);
  *(_DWORD *)(v1 + 20) = *(_DWORD *)(v1 + 20) & 0xF8000000 | 3;
  Int1PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt1PtrTy(**(llvm::Type ***)v1, 0);
  this = llvm::ConstantPointerNull::get(Int1PtrTy, v3);
  v4 = *(_DWORD *)(v1 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v5 = *(_QWORD *)(v1 - 8);
    if (!*(_QWORD *)v5)
      goto LABEL_9;
  }
  else
  {
    v5 = v1 - 32 * (v4 & 0x7FFFFFF);
    if (!*(_QWORD *)v5)
      goto LABEL_9;
  }
  **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
LABEL_9:
  *(_QWORD *)v5 = this;
  if (this)
  {
    v7 = (uint64_t *)(this + 8);
    v8 = *(_QWORD *)(this + 8);
    *(_QWORD *)(v5 + 8) = v8;
    if (v8)
      *(_QWORD *)(v8 + 16) = v5 + 8;
    *(_QWORD *)(v5 + 16) = v7;
    *v7 = v5;
  }
  v9 = *(_DWORD *)(v1 + 20);
  if ((v9 & 0x40000000) != 0)
  {
    v10 = *(_QWORD *)(v1 - 8);
    v11 = (_QWORD *)(v10 + 32);
    if (!*(_QWORD *)(v10 + 32))
      goto LABEL_19;
  }
  else
  {
    v10 = v1 - 32 * (v9 & 0x7FFFFFF);
    v11 = (_QWORD *)(v10 + 32);
    if (!*(_QWORD *)(v10 + 32))
      goto LABEL_19;
  }
  **(_QWORD **)(v10 + 48) = *(_QWORD *)(v10 + 40);
  v12 = *(_QWORD *)(v10 + 40);
  if (v12)
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 48);
LABEL_19:
  *v11 = this;
  if (this)
  {
    v13 = (_QWORD *)(this + 8);
    v14 = *(_QWORD *)(this + 8);
    *(_QWORD *)(v10 + 40) = v14;
    if (v14)
      *(_QWORD *)(v14 + 16) = v10 + 40;
    *(_QWORD *)(v10 + 48) = v13;
    *v13 = v11;
  }
  v15 = *(_DWORD *)(v1 + 20);
  if ((v15 & 0x40000000) != 0)
  {
    v16 = *(_QWORD *)(v1 - 8);
    v17 = (_QWORD *)(v16 + 64);
    if (!*(_QWORD *)(v16 + 64))
      goto LABEL_29;
LABEL_27:
    **(_QWORD **)(v16 + 80) = *(_QWORD *)(v16 + 72);
    v18 = *(_QWORD *)(v16 + 72);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v16 + 80);
    goto LABEL_29;
  }
  v16 = v1 - 32 * (v15 & 0x7FFFFFF);
  v17 = (_QWORD *)(v16 + 64);
  if (*(_QWORD *)(v16 + 64))
    goto LABEL_27;
LABEL_29:
  *v17 = this;
  if (this)
  {
    v20 = *(_QWORD *)(this + 8);
    this += 8;
    v19 = v20;
    *(_QWORD *)(v16 + 72) = v20;
    if (v20)
      *(_QWORD *)(v19 + 16) = v16 + 72;
    *(_QWORD *)(v16 + 80) = this;
    *(_QWORD *)this = v17;
  }
  return this;
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::clear(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ValueName;

  v1 = *(_QWORD *)(a1 + 8);
  while (v1 != a1)
  {
    v6 = v1 - 24;
    v7 = v1 == 0;
    v1 = *(_QWORD *)(v1 + 8);
    if (v7)
      v8 = 0;
    else
      v8 = v6;
    llvm::BasicBlock::setParent((llvm::BasicBlock *)v8, 0);
    if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (v9)
      {
        ValueName = llvm::Value::getValueName((llvm::Value *)v8);
        llvm::ValueSymbolTable::removeValueName(v9, ValueName);
      }
    }
    v3 = *(_QWORD *)(v8 + 24);
    v4 = *(_QWORD **)(v8 + 32);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    llvm::BasicBlock::~BasicBlock((llvm::BasicBlock *)v8);
    operator delete(v5);
  }
}

void getMangledTypeStr(std::string *a1, BOOL *a2, _BYTE *a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::string::size_type v13;
  const std::string::value_type *Name;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  void *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  const std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  unint64_t v45;
  uint64_t v46;
  BOOL **v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type size;
  uint64_t v51;
  BOOL **v52;
  uint64_t i;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  const std::string::value_type *v58;
  unint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  std::string *p_dst;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  std::string::size_type v75;
  void *__p[2];
  unsigned __int8 v77;
  std::string v78;
  std::string __dst;
  std::string v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v6 = *((unsigned int *)a2 + 2);
  v7 = *((_DWORD *)a2 + 2);
  if (!a2 || v7 != 15)
  {
    if (a2 && v7 == 17)
    {
      v9 = *((_QWORD *)a2 + 4);
      if (v9)
      {
        v10 = 20;
        do
        {
          v80.__r_.__value_.__s.__data_[v10--] = (v9 % 0xA) | 0x30;
          v11 = v9 > 9;
          v9 /= 0xAuLL;
        }
        while (v11);
        v12 = v10 + 1;
        v13 = 20 - v10;
        if ((unint64_t)(20 - v10) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_171;
      }
      else
      {
        v80.__r_.__value_.__s.__data_[20] = 48;
        v12 = 20;
        v13 = 1;
      }
      if (v13 > 0x16)
      {
        v34 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v34 = v13 | 7;
        v35 = v34 + 1;
        v33 = operator new(v34 + 1);
        v78.__r_.__value_.__l.__size_ = v13;
        v78.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        if (v12 == 21)
          goto LABEL_68;
      }
      else
      {
        *((_BYTE *)&v78.__r_.__value_.__s + 23) = v13;
        v33 = &v78;
        if (v12 == 21)
          goto LABEL_68;
      }
      memcpy(v33, (char *)&v80 + v12, v13);
      v33 += v13;
LABEL_68:
      *v33 = 0;
      v36 = "a";
      goto LABEL_69;
    }
    if (a2 && v7 == 16)
    {
      if ((v6 & 0x400) != 0)
      {
        std::string::append(a1, "sl_");
        v46 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v46)
        {
          v47 = (BOOL **)*((_QWORD *)a2 + 2);
          v48 = 8 * v46;
          do
          {
            getMangledTypeStr((llvm::Type *)&v80, *v47);
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v49 = &v80;
            else
              v49 = (std::string *)v80.__r_.__value_.__r.__words[0];
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
            else
              size = v80.__r_.__value_.__l.__size_;
            std::string::append(a1, (const std::string::value_type *)v49, size);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v80.__r_.__value_.__l.__data_);
            ++v47;
            v48 -= 8;
          }
          while (v48);
        }
      }
      else
      {
        std::string::append(a1, "s_");
        if (*((_QWORD *)a2 + 3))
        {
          Name = (const std::string::value_type *)llvm::StructType::getName((llvm::StructType *)a2);
          std::string::append(a1, Name, v15);
        }
        else
        {
          *a3 = 1;
        }
      }
      v58 = "s";
      goto LABEL_140;
    }
    if (a2 && v7 == 14)
    {
      getMangledTypeStr((llvm::Type *)&__dst, **((BOOL ***)a2 + 2));
      v29 = std::string::insert(&__dst, 0, "f_");
      v30 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v80;
      else
        v31 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v32 = v80.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v31, v32);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_58:
          if (*((_DWORD *)a2 + 3) != 1)
          {
LABEL_128:
            v59 = 0;
            do
            {
              getMangledTypeStr((llvm::Type *)&v80, *(BOOL **)(*((_QWORD *)a2 + 2) + 8 * v59 + 8));
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v60 = &v80;
              else
                v60 = (std::string *)v80.__r_.__value_.__r.__words[0];
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v61 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              else
                v61 = v80.__r_.__value_.__l.__size_;
              std::string::append(a1, (const std::string::value_type *)v60, v61);
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v80.__r_.__value_.__l.__data_);
              ++v59;
            }
            while (v59 < (*((_DWORD *)a2 + 3) - 1));
          }
LABEL_125:
          if (*((_DWORD *)a2 + 2) > 0xFFu)
            std::string::append(a1, "vararg");
          v58 = "f";
          goto LABEL_140;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_58;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (*((_DWORD *)a2 + 3) != 1)
        goto LABEL_128;
      goto LABEL_125;
    }
    if (a2 && (*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    {
      v45 = *((unsigned int *)a2 + 8);
      if (v7 == 19)
        std::string::append(a1, "nx");
      llvm::utostr(v45, 0, &v78);
      v36 = "v";
LABEL_69:
      v37 = std::string::insert(&v78, 0, v36);
      v38 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      getMangledTypeStr((llvm::Type *)__p, *((BOOL **)a2 + 3));
      if ((v77 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v77 & 0x80u) == 0)
        v40 = v77;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&__dst, (const std::string::value_type *)v39, v40);
      v42 = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v80;
      else
        v43 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v44 = v80.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v43, v44);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if (((char)v77 & 0x80000000) == 0)
        {
LABEL_83:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_84;
          goto LABEL_88;
        }
      }
      else if (((char)v77 & 0x80000000) == 0)
      {
        goto LABEL_83;
      }
      operator delete(__p[0]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_84:
        if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        goto LABEL_89;
      }
LABEL_88:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_89:
      v28 = (void *)v78.__r_.__value_.__r.__words[0];
      goto LABEL_90;
    }
    if (!a2 || v7 != 21)
      __asm { BR              X11 }
    std::string::append(a1, "t");
    std::string::append(a1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    v51 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v51)
    {
      v52 = (BOOL **)*((_QWORD *)a2 + 2);
      for (i = 8 * v51; i; i -= 8)
      {
        getMangledTypeStr((llvm::Type *)&__dst, *v52);
        v54 = std::string::insert(&__dst, 0, "_");
        v55 = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v80;
        else
          v56 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v57 = v80.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)v56, v57);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v80.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_122:
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_122;
        }
        ++v52;
      }
    }
    v62 = *((unsigned int *)a2 + 2);
    if (v62 < 0x100)
    {
LABEL_144:
      v58 = "t";
LABEL_140:
      std::string::append(a1, v58);
      return;
    }
    v63 = (unsigned int *)*((_QWORD *)a2 + 5);
    v64 = (unsigned int *)((char *)v63 + ((v62 >> 6) & 0x3FFFFFC));
    while (1)
    {
      v65 = *v63;
      if ((_DWORD)v65)
      {
        v66 = 20;
        do
        {
          v80.__r_.__value_.__s.__data_[v66--] = (v65 % 0xA) | 0x30;
          v11 = v65 > 9;
          v65 /= 0xAuLL;
        }
        while (v11);
        v67 = v66 + 1;
        v68 = 20 - v66;
        if ((unint64_t)(20 - v66) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_171;
      }
      else
      {
        v80.__r_.__value_.__s.__data_[20] = 48;
        v67 = 20;
        v68 = 1;
      }
      if (v68 > 0x16)
      {
        v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v68 | 7) != 0x17)
          v70 = v68 | 7;
        v71 = v70 + 1;
        p_dst = (std::string *)operator new(v70 + 1);
        __dst.__r_.__value_.__l.__size_ = v68;
        __dst.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        if (v67 != 21)
        {
LABEL_159:
          memcpy(p_dst, (char *)&v80 + v67, v68);
          p_dst = (std::string *)((char *)p_dst + v68);
        }
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v68;
        p_dst = &__dst;
        if (v67 != 21)
          goto LABEL_159;
      }
      p_dst->__r_.__value_.__s.__data_[0] = 0;
      v72 = std::string::insert(&__dst, 0, "_");
      v73 = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v80;
      else
        v74 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v75 = v80.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v74, v75);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_170:
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_170;
      }
      if (++v63 == v64)
        goto LABEL_144;
    }
  }
  if (v6 >= 0x100)
  {
    v16 = v6 >> 8;
    v17 = 20;
    do
    {
      v80.__r_.__value_.__s.__data_[v17--] = (v16 % 0xA) | 0x30;
      v11 = v16 > 9;
      v16 /= 0xAuLL;
    }
    while (v11);
    v8 = v17 + 1;
  }
  else
  {
    v80.__r_.__value_.__s.__data_[20] = 48;
    v8 = 20;
  }
  v18 = 21 - v8;
  if ((unint64_t)(21 - v8) > 0x7FFFFFFFFFFFFFF7)
LABEL_171:
    abort();
  if (v18 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 21 - v8;
    v19 = &__dst;
    if (v8 == 21)
      goto LABEL_28;
LABEL_27:
    memcpy(v19, (char *)&v80 + v8, 21 - v8);
    v19 = (std::string *)((char *)v19 + v18);
    goto LABEL_28;
  }
  v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v18 | 7) != 0x17)
    v20 = v18 | 7;
  v21 = v20 + 1;
  v19 = (std::string *)operator new(v20 + 1);
  __dst.__r_.__value_.__l.__size_ = 21 - v8;
  __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  if (v8 != 21)
    goto LABEL_27;
LABEL_28:
  v19->__r_.__value_.__s.__data_[0] = 0;
  v22 = std::string::insert(&__dst, 0, "p");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v80;
  else
    v24 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    v25 = v80.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v24, v25);
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
LABEL_39:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*((_QWORD *)a2 + 3))
      return;
    goto LABEL_40;
  }
  operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_39;
LABEL_36:
  if (!*((_QWORD *)a2 + 3))
    return;
LABEL_40:
  getMangledTypeStr((llvm::Type *)&v80, **((BOOL ***)a2 + 2));
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v80;
  else
    v26 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    v27 = v80.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    v28 = (void *)v80.__r_.__value_.__r.__words[0];
LABEL_90:
    operator delete(v28);
  }
}

void llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 12);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = *(_QWORD *)a1 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++*(_DWORD *)(a1 + 8);
}

double llvm::VectorType::getExtendedElementVectorType(llvm::VectorType *this, llvm::VectorType *a2)
{
  llvm::Type *v3;
  llvm::Type *v4;
  int ScalarSizeInBits;
  unsigned int v6;
  llvm::ScalableVectorType *IntNTy;

  v3 = (llvm::Type *)*((_QWORD *)this + 3);
  v4 = *(llvm::Type **)v3;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v3);
  IntNTy = (llvm::ScalableVectorType *)llvm::Type::getIntNTy(v4, (llvm::LLVMContext *)(2 * ScalarSizeInBits), v6);
  return llvm::VectorType::get(IntNTy, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
}

double llvm::VectorType::getTruncatedElementVectorType(llvm::VectorType *this, llvm::VectorType *a2)
{
  unsigned __int8 *v3;
  unsigned int v4;
  llvm::Type *v7;
  const char *v9;
  unsigned int v10;
  llvm::ScalableVectorType *FloatTy;
  _QWORD v12[2];

  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = v3[8];
  if (v4 < 4 || v4 == 5 || (v4 & 0xFFFFFFFD) == 4)
  {
    v7 = *(llvm::Type **)this;
    if (v4 == 3)
      FloatTy = (llvm::ScalableVectorType *)llvm::Type::getFloatTy(v7, a2);
    else
      FloatTy = (llvm::ScalableVectorType *)llvm::Type::getHalfTy(v7, a2);
  }
  else
  {
    v12[0] = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
    v12[1] = v9;
    v10 = llvm::TypeSize::operator unsigned long long(v12, v9);
    FloatTy = (llvm::ScalableVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)this, (llvm::LLVMContext *)(v10 >> 1));
  }
  return llvm::VectorType::get(FloatTy, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
}

void llvm::VectorType::getSubdividedVectorType(llvm::ScalableVectorType **this, llvm::VectorType *a2)
{
  int v2;
  llvm::VectorType *v3;
  llvm::VectorType *v4;

  if ((int)a2 >= 1)
  {
    v2 = (int)a2;
    do
    {
      llvm::VectorType::get(this[3], (llvm::Type *)((2 * *((_DWORD *)this + 8)) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
      llvm::VectorType::getTruncatedElementVectorType(v3, v4);
      --v2;
    }
    while (v2);
  }
}

double llvm::VectorType::getHalfElementsVectorType(llvm::ScalableVectorType **this, llvm::VectorType *a2)
{
  return llvm::VectorType::get(this[3], (llvm::Type *)(((unint64_t)*((unsigned int *)this + 8) >> 1) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
}

void matchIntrinsicType(llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor> &,llvm::SmallVectorImpl<llvm::Type *> &,llvm::SmallVectorImpl<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>> &,BOOL)::$_0::operator()(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  __int128 v14;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = a3;
    v14 = *a2;
    v6 = v4 + 1;
    v7 = *(_QWORD *)a1 + 24 * (unint64_t)v4 > (unint64_t)&v13;
    if (*(_QWORD *)a1 <= (unint64_t)&v13 && v7)
    {
      v12 = (char *)&v13 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 24);
      v8 = *(_QWORD *)a1;
      v9 = &v12[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 24);
      v8 = *(_QWORD *)a1;
      v9 = (char *)&v13;
    }
    v10 = v8 + 24 * *(unsigned int *)(a1 + 8);
    v11 = *(_OWORD *)v9;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v10 = v11;
  }
  else
  {
    v5 = *(_QWORD *)a1 + 24 * v4;
    *(_QWORD *)v5 = a3;
    *(_OWORD *)(v5 + 8) = *a2;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [31],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, int **a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  int v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23658;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23BC8;
  *(_QWORD *)(a1 + 160) = off_1E0E4FBE0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v15 = **a4;
  *(_DWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_Function_cpp()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 1024;
  v3 = &v2;
  *(_QWORD *)&v1 = "Maximum size for the name of non-global values.";
  *((_QWORD *)&v1 + 1) = 47;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [31],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((uint64_t)&NonGlobalValueMaxNameSize, (int8x16_t *)"non-global-value-max-name-size", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &NonGlobalValueMaxNameSize, &dword_18013D000);
}

uint64_t llvm::Registry<llvm::GCStrategy>::add_node(uint64_t result)
{
  uint64_t *v1;

  v1 = (uint64_t *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail)
    v1 = (uint64_t *)&llvm::Registry<llvm::GCStrategy>::Head;
  *v1 = result;
  llvm::Registry<llvm::GCStrategy>::Tail = result;
  return result;
}

uint64_t llvm::GCStrategy::GCStrategy(uint64_t this)
{
  *(_QWORD *)this = &unk_1E0E1F970;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t llvm::getGCStrategy(void *a1, const void *a2)
{
  _QWORD *v2;
  const void *v4;
  uint64_t v5;
  std::string v7;
  __int16 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  const void *v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v2 = llvm::Registry<llvm::GCStrategy>::Head;
  if (!llvm::Registry<llvm::GCStrategy>::Head)
  {
LABEL_8:
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a1);
    if (!llvm::Registry<llvm::GCStrategy>::Head)
    {
      std::string::basic_string[abi:nn180100]<0>(&v10, "unsupported GC: ");
      llvm::StringRef::str(v12, (uint64_t)&v9);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, (const std::string::value_type *)&v9, &v7);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, " (did you remember to link and initialize the library?)", &v11);
      std::string::~string(&v7);
      std::string::~string(&v9);
      std::string::~string(&v10);
      v8 = 260;
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
      llvm::report_fatal_error((llvm::Twine *)&v7, 1);
    }
    std::string::basic_string[abi:nn180100]<0>(&v10, "unsupported GC: ");
    llvm::StringRef::str(v12, (uint64_t)&v9);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, (const std::string::value_type *)&v9, &v11);
    v8 = 260;
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    llvm::report_fatal_error((llvm::Twine *)&v7, 1);
  }
  v4 = a1;
  while (1)
  {
    v5 = v2[1];
    if (*(const void **)(v5 + 8) == a2)
    {
      if (!a2)
        break;
      a1 = (void *)memcmp(*(const void **)v5, v4, (size_t)a2);
      if (!(_DWORD)a1)
        break;
    }
    v2 = (_QWORD *)*v2;
    if (!v2)
      goto LABEL_8;
  }
  return (*(uint64_t (**)(void))(v5 + 32))();
}

uint64_t llvm::GlobalPtrAuthInfo::tryAnalyze@<X0>(llvm::GlobalPtrAuthInfo *this@<X0>, uint64_t a2@<X8>)
{
  llvm::Type *DesiredBytecodeVersion;
  uint64_t result;
  llvm::GlobalValue *v7;
  uint64_t v8;
  BOOL v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  llvm::LLVMContext *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t Int64Ty;
  llvm::LLVMContext *v19;
  uint64_t Int32Ty;
  const void **v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  result = (uint64_t)llvm::Value::stripPointerCasts(this);
  if (!result || (v7 = (llvm::GlobalValue *)result, *(_BYTE *)(result + 16) != 3))
  {
    v10 = "value isn't a global";
    goto LABEL_11;
  }
  if ((*(_BYTE *)(result + 34) & 0x80) == 0
    || (result = (uint64_t)llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)result), v8 != 12)
    || (*(_QWORD *)result == 0x7274702E6D766C6CLL ? (v9 = *(_DWORD *)(result + 8) == 1752462689) : (v9 = 0), !v9))
  {
    v10 = "global isn't in section \"llvm.ptrauth\"";
LABEL_11:
    v31[0] = (uint64_t)v10;
    v32 = 259;
    v11 = llvm::inconvertibleErrorCode((llvm *)result);
    v13 = v12;
    v14 = operator new(0x38uLL);
    result = llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)v31, v11, v13);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  result = llvm::GlobalValue::isDeclaration(v7);
  if ((_DWORD)result)
  {
    v10 = "global doesn't have an initializer";
    goto LABEL_11;
  }
  v16 = (uint64_t *)*((_QWORD *)v7 - 4);
  v17 = *v16;
  if (!*v16 || *(_BYTE *)(v17 + 8) != 16)
  {
    v10 = "global isn't a struct";
    goto LABEL_11;
  }
  Int64Ty = llvm::Type::getInt64Ty(DesiredBytecodeVersion, v15);
  Int32Ty = llvm::Type::getInt32Ty(DesiredBytecodeVersion, v19);
  v31[0] = llvm::Type::getInt8PtrTy(DesiredBytecodeVersion, 0);
  v31[1] = Int32Ty;
  v31[2] = Int64Ty;
  v31[3] = Int64Ty;
  v21 = (const void **)llvm::StructType::get((uint64_t *)DesiredBytecodeVersion, v31, 4, 0);
  result = llvm::StructType::isLayoutIdentical((const void **)v17, v21);
  if ((result & 1) == 0)
  {
    v10 = "global doesn't have type '{ i8*, i32, i64, i64 }'";
    goto LABEL_11;
  }
  v22 = *((_DWORD *)v16 + 5);
  if ((v22 & 0x40000000) != 0)
    v23 = (uint64_t *)*(v16 - 1);
  else
    v23 = &v16[-4 * (v22 & 0x7FFFFFF)];
  v24 = v23[4];
  if (v24 && *(_BYTE *)(v24 + 16) == 16)
  {
    v25 = *(unsigned __int8 *)(v23[8] + 16);
    if (v25 == 5 || v25 == 16)
    {
      if ((v22 & 0x40000000) != 0)
        v26 = (uint64_t *)*(v16 - 1);
      else
        v26 = &v16[-4 * (v22 & 0x7FFFFFF)];
      v27 = v26[12];
      if (v27 && *(_BYTE *)(v27 + 16) == 16)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = v7;
      }
      else
      {
        v31[0] = (uint64_t)"discriminator isn't a constant integer";
        v32 = 259;
        result = llvm::createError((llvm *)&v28, (llvm::Twine *)v31);
        *(_BYTE *)(a2 + 8) |= 1u;
        *(_QWORD *)a2 = v28;
      }
    }
    else
    {
      v31[0] = (uint64_t)"address discriminator isn't a constant integer or expr";
      v32 = 259;
      result = llvm::createError((llvm *)&v29, (llvm::Twine *)v31);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v29;
    }
  }
  else
  {
    v31[0] = (uint64_t)"key isn't a constant integer";
    v32 = 259;
    result = llvm::createError((llvm *)&v30, (llvm::Twine *)v31);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v30;
  }
  return result;
}

uint64_t llvm::GlobalValue::isMaterializable(llvm::GlobalValue *this)
{
  uint64_t result;

  result = 0;
  if (this)
  {
    if (!*((_BYTE *)this + 16))
      return *((_BYTE *)this + 35) & 1;
  }
  return result;
}

mlir::BytecodeWriterConfig *llvm::GlobalValue::setPartition(mlir::BytecodeWriterConfig *result, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  mlir::BytecodeWriterConfig *v5;
  _QWORD *DesiredBytecodeVersion;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  mlir::BytecodeWriterConfig *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  mlir::BytecodeWriterConfig *v18;
  mlir::BytecodeWriterConfig *v19;

  v3 = a3;
  v5 = result;
  if ((*((_BYTE *)result + 33) & 0x80) != 0)
  {
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (a3)
  {
LABEL_5:
    DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(result);
    a2 = llvm::UniqueStringSaver::save(*DesiredBytecodeVersion + 2168, (uint64_t)a2, v3);
    v3 = v7;
LABEL_6:
    v8 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v5);
    v19 = v5;
    v9 = *(_DWORD *)(v8 + 2592);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2576);
      v11 = v9 - 1;
      v12 = v11 & ((v5 >> 4) ^ (v5 >> 9));
      result = (mlir::BytecodeWriterConfig *)(v10 + 24 * v12);
      v13 = *(_QWORD *)result;
      if (*(mlir::BytecodeWriterConfig **)result == v5)
      {
LABEL_19:
        *((_QWORD *)result + 1) = a2;
        *((_QWORD *)result + 2) = v3;
        *((_DWORD *)v5 + 8) = *((_DWORD *)v5 + 8) & 0xFFFF7FFF | ((v3 != 0) << 15);
        return result;
      }
      v14 = 0;
      v15 = 1;
      while (v13 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v13 == -8192;
        if (v16)
          v14 = result;
        v17 = v12 + v15++;
        v12 = v17 & v11;
        result = (mlir::BytecodeWriterConfig *)(v10 + 24 * v12);
        v13 = *(_QWORD *)result;
        if (*(mlir::BytecodeWriterConfig **)result == v5)
          goto LABEL_19;
      }
      if (v14)
        v18 = v14;
      else
        v18 = result;
    }
    else
    {
      v18 = 0;
    }
    result = (mlir::BytecodeWriterConfig *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(v8 + 2576, v18, (uint64_t *)&v19);
    goto LABEL_19;
  }
  return result;
}

const char *llvm::GlobalValue::getPartition(llvm::GlobalValue *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::GlobalValue **v8;
  llvm::GlobalValue *v9;
  llvm::GlobalValue **v10;
  llvm::GlobalValue **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  llvm::GlobalValue *v15;

  if ((*((_BYTE *)this + 33) & 0x80) == 0)
    return "";
  v3 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v15 = this;
  v4 = *(_DWORD *)(v3 + 2592);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2576);
    v6 = v4 - 1;
    v7 = v6 & ((this >> 4) ^ (this >> 9));
    v8 = (llvm::GlobalValue **)(v5 + 24 * v7);
    v9 = *v8;
    if (*v8 == this)
      return (const char *)v8[1];
    v11 = 0;
    v12 = 1;
    while (v9 != (llvm::GlobalValue *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v9 == (llvm::GlobalValue *)-8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = (llvm::GlobalValue **)(v5 + 24 * v7);
      v9 = *v8;
      if (*v8 == this)
        return (const char *)v8[1];
    }
    if (v11)
      v10 = v11;
    else
      v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  return (const char *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(v3 + 2576, v10, (uint64_t *)&v15)[1];
}

uint64_t llvm::GlobalValue::setSanitizerMetadata(mlir::BytecodeWriterConfig *a1, char a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  mlir::BytecodeWriterConfig *v16;

  v4 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  v16 = a1;
  v5 = *(_DWORD *)(v4 + 2616);
  if (!v5)
  {
    v15 = 0;
LABEL_13:
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucket<llvm::GlobalValue const*>(v4 + 2600, v15, (uint64_t *)&v16);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v4 + 2600);
  v7 = v5 - 1;
  v8 = v7 & ((a1 >> 4) ^ (a1 >> 9));
  result = v6 + 16 * v8;
  v10 = *(_QWORD *)result;
  if (*(mlir::BytecodeWriterConfig **)result != a1)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = result;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      result = v6 + 16 * v8;
      v10 = *(_QWORD *)result;
      if (*(mlir::BytecodeWriterConfig **)result == a1)
        goto LABEL_14;
    }
    if (v11)
      v15 = v11;
    else
      v15 = result;
    goto LABEL_13;
  }
LABEL_14:
  *(_BYTE *)(result + 8) = a2;
  *((_DWORD *)a1 + 8) |= 0x10000u;
  return result;
}

llvm::GlobalValue **llvm::GlobalValue::getSanitizerMetadata(llvm::GlobalValue *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::GlobalValue **v7;
  llvm::GlobalValue *v8;
  uint64_t v10;
  llvm::GlobalValue **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  llvm::GlobalValue *v15;

  v2 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v15 = this;
  v3 = *(_DWORD *)(v2 + 2616);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2600);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (llvm::GlobalValue **)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == this)
      return v7 + 1;
    v11 = 0;
    v12 = 1;
    while (v8 != (llvm::GlobalValue *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v8 == (llvm::GlobalValue *)-8192;
      if (v13)
        v11 = v7;
      v14 = v6 + v12++;
      v6 = v14 & v5;
      v7 = (llvm::GlobalValue **)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == this)
        return v7 + 1;
    }
    if (v11)
      v10 = (uint64_t)v11;
    else
      v10 = (uint64_t)v7;
  }
  else
  {
    v10 = 0;
  }
  return (llvm::GlobalValue **)(llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucket<llvm::GlobalValue const*>(v2 + 2600, v10, (uint64_t *)&v15)+ 8);
}

void llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
  char *v1;
  char *v2;
  BOOL v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  llvm::Use *v8;

  v1 = (char *)this + 56;
  if (!this)
    v1 = 0;
  v2 = v1 - 56;
  v3 = this == 0;
  v4 = *((_QWORD *)this + 5) + 8;
  if (v3)
    v5 = 0;
  else
    v5 = v2;
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(v4, (llvm::Value *)v5);
  v6 = *((_QWORD *)v5 + 7);
  v7 = (_QWORD *)*((_QWORD *)v5 + 8);
  *v7 = v6;
  *(_QWORD *)(v6 + 8) = v7;
  *((_QWORD *)v5 + 7) = 0;
  *((_QWORD *)v5 + 8) = 0;
  llvm::GlobalVariable::~GlobalVariable((llvm::GlobalVariable *)v5);
  *((_DWORD *)v5 + 5) = *((_DWORD *)v5 + 5) & 0xF8000000 | 1;
  llvm::User::operator delete(v8);
}

void llvm::GlobalObject::~GlobalObject(llvm::GlobalObject *this)
{
  uint64_t v2;
  llvm::Value *v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    llvm::Comdat::removeUser(v2, this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v3);
}

const void **llvm::GlobalObject::setComdat(llvm::GlobalObject *this, const void **a2)
{
  const void **result;

  result = (const void **)*((_QWORD *)this + 6);
  if (result)
    result = llvm::Comdat::removeUser((uint64_t)result, this);
  *((_QWORD *)this + 6) = a2;
  if (a2)
    return llvm::Comdat::addUser(a2, this);
  return result;
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  llvm::GlobalValue *Section;
  uint64_t v3;
  uint64_t result;

  if (*((_BYTE *)this + 16) == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v3 == 12 && *(_QWORD *)Section == 0x7274702E6D766C6CLL && *((_DWORD *)Section + 2) == 1752462689)
      return 1;
  }
  result = 1;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x1EB) != 0)
  {
    result = *((_QWORD *)this + 5);
    if (result)
    {
      result = llvm::Module::getSemanticInterposition((llvm::Module *)result);
      if ((_DWORD)result)
        return (*((_BYTE *)this + 33) & 0x40) == 0;
    }
  }
  return result;
}

llvm::GlobalValue *llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::GlobalValue **v8;
  llvm::GlobalValue *v9;
  llvm::GlobalValue **v10;
  llvm::GlobalValue **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int64x2_t v15;
  unsigned int v16;

  if (this && *((_BYTE *)this + 16) == 1)
  {
    v15 = 0uLL;
    v16 = 0;
    findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(*((_QWORD *)this - 4), &v15);
    llvm::deallocate_buffer((llvm *)v15.i64[0], (void *)(8 * v16));
  }
  if ((*((_BYTE *)this + 34) & 0x80) == 0)
    return 0;
  v3 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v15.i64[0] = (uint64_t)this;
  v4 = *(_DWORD *)(v3 + 2568);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2552);
    v6 = v4 - 1;
    v7 = v6 & ((this >> 4) ^ (this >> 9));
    v8 = (llvm::GlobalValue **)(v5 + 24 * v7);
    v9 = *v8;
    if (*v8 == this)
      return v8[1];
    v11 = 0;
    v12 = 1;
    while (v9 != (llvm::GlobalValue *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v9 == (llvm::GlobalValue *)-8192;
      if (v13)
        v11 = v8;
      v14 = v7 + v12++;
      v7 = v14 & v6;
      v8 = (llvm::GlobalValue **)(v5 + 24 * v7);
      v9 = *v8;
      if (*v8 == this)
        return v8[1];
    }
    if (v11)
      v10 = v11;
    else
      v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  return (llvm::GlobalValue *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(v3 + 2552, v10, v15.i64)[1];
}

BOOL llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  if (this && *((_BYTE *)this + 16) == 3)
    return (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  if (*((_BYTE *)this + 16))
    return 0;
  if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
    return (*((_BYTE *)this + 35) & 1) == 0;
  return 0;
}

uint64_t llvm::GlobalValue::getComdat(llvm::GlobalValue *this)
{
  int v1;
  int64x2_t v3;
  unsigned int v4;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 1)
  {
    v3 = 0uLL;
    v4 = 0;
    findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(*((_QWORD *)this - 4), &v3);
    llvm::deallocate_buffer((llvm *)v3.i64[0], (void *)(8 * v4));
  }
  if (v1 == 2)
    return 0;
  else
    return *((_QWORD *)this + 6);
}

uint64_t llvm::GlobalObject::setAlignment(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFF81FFFF | ((a2 << 17) + 0x20000);
  return result;
}

mlir::BytecodeWriterConfig *llvm::GlobalObject::setSection(mlir::BytecodeWriterConfig *result, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  mlir::BytecodeWriterConfig *v5;
  _QWORD *DesiredBytecodeVersion;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  mlir::BytecodeWriterConfig *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  mlir::BytecodeWriterConfig *v18;
  mlir::BytecodeWriterConfig *v19;

  v3 = a3;
  v5 = result;
  if ((*((_BYTE *)result + 34) & 0x80) != 0)
  {
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (a3)
  {
LABEL_5:
    DesiredBytecodeVersion = (_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(result);
    a2 = llvm::UniqueStringSaver::save(*DesiredBytecodeVersion + 2168, (uint64_t)a2, v3);
    v3 = v7;
LABEL_6:
    v8 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v5);
    v19 = v5;
    v9 = *(_DWORD *)(v8 + 2568);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2552);
      v11 = v9 - 1;
      v12 = v11 & ((v5 >> 4) ^ (v5 >> 9));
      result = (mlir::BytecodeWriterConfig *)(v10 + 24 * v12);
      v13 = *(_QWORD *)result;
      if (*(mlir::BytecodeWriterConfig **)result == v5)
      {
LABEL_19:
        *((_QWORD *)result + 1) = a2;
        *((_QWORD *)result + 2) = v3;
        *((_DWORD *)v5 + 8) = *((_DWORD *)v5 + 8) & 0xFF7FFFFF | ((v3 != 0) << 23);
        return result;
      }
      v14 = 0;
      v15 = 1;
      while (v13 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v13 == -8192;
        if (v16)
          v14 = result;
        v17 = v12 + v15++;
        v12 = v17 & v11;
        result = (mlir::BytecodeWriterConfig *)(v10 + 24 * v12);
        v13 = *(_QWORD *)result;
        if (*(mlir::BytecodeWriterConfig **)result == v5)
          goto LABEL_19;
      }
      if (v14)
        v18 = v14;
      else
        v18 = result;
    }
    else
    {
      v18 = 0;
    }
    result = (mlir::BytecodeWriterConfig *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(v8 + 2552, v18, (uint64_t *)&v19);
    goto LABEL_19;
  }
  return result;
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  llvm::GlobalValue *Section;
  uint64_t v3;
  uint64_t v4;
  uint64_t hasExternalWeakLinkage;
  uint64_t v8;
  int v9;
  llvm::GlobalValue **v10;
  llvm::GlobalValue *v11;
  llvm::DataLayout *v12;
  unsigned __int8 *v13;
  BOOL v14;
  void *__p;
  unsigned int v16;

  if (!this)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16) != 3)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  Section = llvm::GlobalValue::getSection(this);
  if (v4 != 12)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*(_QWORD *)Section != 0x7274702E6D766C6CLL || *((_DWORD *)Section + 2) != 1752462689)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 1;
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_DWORD *)this + 8) & 0x1000000) == 0)
  {
    return 1;
  }
  v8 = *((_QWORD *)this - 4);
  v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(llvm::GlobalValue ***)(v8 - 8);
  else
    v10 = (llvm::GlobalValue **)(v8 - 32 * (v9 & 0x7FFFFFF));
  v11 = *v10;
  v16 = 64;
  __p = 0;
  v12 = (llvm::DataLayout *)(*((_QWORD *)this + 5) + 256);
  hasExternalWeakLinkage = 1;
  v13 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets(v11, v12, (uint64_t)&__p, 1, 0, 0, v3);
  if (v13)
    v14 = v13[16] > 3u;
  else
    v14 = 1;
  if (!v14)
    hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
  if (v16 < 0x41 || !__p)
    return hasExternalWeakLinkage;
  operator delete[](__p);
  return hasExternalWeakLinkage;
}

llvm::GlobalObject *llvm::GlobalObject::getSectionImpl(llvm::GlobalObject *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::GlobalObject **v7;
  llvm::GlobalObject *v8;
  llvm::GlobalObject **v10;
  llvm::GlobalObject **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  llvm::GlobalObject *v15;

  v2 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v15 = this;
  v3 = *(_DWORD *)(v2 + 2568);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2552);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (llvm::GlobalObject **)(v4 + 24 * v6);
    v8 = *v7;
    if (*v7 == this)
      return v7[1];
    v11 = 0;
    v12 = 1;
    while (v8 != (llvm::GlobalObject *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v8 == (llvm::GlobalObject *)-8192;
      if (v13)
        v11 = v7;
      v14 = v6 + v12++;
      v6 = v14 & v5;
      v7 = (llvm::GlobalObject **)(v4 + 24 * v6);
      v8 = *v7;
      if (*v7 == this)
        return v7[1];
    }
    if (v11)
      v10 = v11;
    else
      v10 = v7;
  }
  else
  {
    v10 = 0;
  }
  return (llvm::GlobalObject *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(v2 + 2552, v10, (uint64_t *)&v15)[1];
}

void llvm::GlobalValue::getAliaseeObject(llvm::GlobalValue *this)
{
  int64x2_t v1;
  unsigned int v2;

  v1 = 0uLL;
  v2 = 0;
  findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>((uint64_t)this, &v1);
  llvm::deallocate_buffer((llvm *)v1.i64[0], (void *)(8 * v2));
}

uint64_t sub_180CF4AC4()
{
  uint64_t v0;

  return v0;
}

uint64_t findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(uint64_t result, int64x2_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[31];

  v2 = result;
  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 3 && v3 != 1)
    return result;
  if (v3 == 1)
    v6 = result;
  else
    v6 = 0;
  v10 = v6;
  if (v6)
  {
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2, &v10, (uint64_t)v11);
    if (v11[16])
    {
      v7 = *(_QWORD *)(v10 - 32);
      return findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(v7, a2);
    }
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3 == 5)
  {
    result = 0;
    switch(*(_WORD *)(v2 + 18))
    {
      case 0xD:
        v8 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), a2);
        result = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2);
        if (result)
          v9 = 0;
        else
          v9 = v8;
        if (v8)
          return v9;
        return result;
      case 0xF:
        if (findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2))
        {
          return 0;
        }
        goto LABEL_15;
      case 0x22:
      case 0x2F:
      case 0x30:
      case 0x31:
LABEL_15:
        v7 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
        return findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(v7, a2);
      default:
        return result;
    }
  }
  return 0;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, llvm::PointerType **a2, char a3, char a4, uint64_t a5, const char **a6, char a7, llvm::Type *a8, char a9)
{
  _BOOL4 v16;
  llvm::Type *v17;
  llvm::Value *v18;
  int v19;
  unsigned int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v16 = a5 != 0;
  v17 = (llvm::Type *)llvm::PointerType::get(a2, a8);
  v18 = (llvm::Value *)llvm::Value::Value(a1, v17, 3);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | v16;
  *(_QWORD *)(a1 + 24) = a2;
  v19 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v20 = v19 & 0xFFFE0000 | a4 & 0xF;
  if ((a4 & 0xFu) - 7 < 2)
    v20 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v20;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName(v18, a6);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v21 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a9)
    v22 = 2;
  else
    v22 = 0;
  *(_BYTE *)(a1 + 80) = v22 | a3 | *(_BYTE *)(a1 + 80) & 0xFC;
  *(_DWORD *)(a1 + 32) = v21 & 0x1E3FF | ((a7 & 7) << 10);
  if (a5)
  {
    if (*(_QWORD *)(a1 - 32))
    {
      **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
      v23 = *(_QWORD *)(a1 - 24);
      if (v23)
        *(_QWORD *)(v23 + 16) = *(_QWORD *)(a1 - 16);
    }
    *(_QWORD *)(a1 - 32) = a5;
    v26 = *(_QWORD *)(a5 + 8);
    v25 = (_QWORD *)(a5 + 8);
    v24 = v26;
    *(_QWORD *)(a1 - 24) = v26;
    if (v26)
      *(_QWORD *)(v24 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v25;
    *v25 = a1 - 32;
  }
  return a1;
}

{
  return llvm::GlobalVariable::GlobalVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, uint64_t a2, llvm::PointerType **a3, char a4, char a5, uint64_t a6, const char **a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  if ((a10 & 0xFF00000000) != 0)
    v14 = a10;
  else
    v14 = *(unsigned int *)(a2 + 272);
  llvm::GlobalVariable::GlobalVariable(a1, a3, a4, a5, a6, a7, a9, (llvm::Type *)v14, a11);
  if (a8)
  {
    llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList((llvm::ValueSymbolTable *)(*(_QWORD *)(a8 + 40) + 8), a1);
    v16 = *(_QWORD *)(a8 + 56);
    v15 = (_QWORD *)(a8 + 56);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(v16 + 8) = a1 + 56;
    *v15 = a1 + 56;
  }
  else
  {
    llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList((llvm::ValueSymbolTable *)(a2 + 8), a1);
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = a2 + 8;
    *(_QWORD *)(v18 + 8) = a1 + 56;
    *(_QWORD *)(a2 + 8) = a1 + 56;
  }
  return a1;
}

uint64_t llvm::GlobalVariable::setInitializer(uint64_t this, llvm::Constant *a2)
{
  BOOL v2;
  char v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (this)
    v2 = *(_BYTE *)(this + 16) == 3;
  else
    v2 = 0;
  v3 = !v2;
  if (a2)
  {
    if ((v3 & 1) != 0)
    {
      if (*(_BYTE *)(this + 16) || *(_QWORD *)(this + 72) != this + 72 || (*(_DWORD *)(this + 32) & 0x1000000) != 0)
        goto LABEL_19;
    }
    else if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) != 0)
    {
      goto LABEL_19;
    }
    *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xF8000000 | 1;
LABEL_19:
    if (*(_QWORD *)(this - 32))
    {
      **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
      v5 = *(_QWORD *)(this - 24);
      if (v5)
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 16);
    }
    *(_QWORD *)(this - 32) = a2;
    v8 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)((char *)a2 + 8);
    v7 = v8;
    *(_QWORD *)(this - 24) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v6;
    *v6 = this - 32;
    return this;
  }
  if ((v3 & 1) == 0)
  {
    v4 = *(_DWORD *)(this + 20) & 0x7FFFFFF;
LABEL_27:
    if (!v4)
      return this;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(this + 16) && *(_QWORD *)(this + 72) == this + 72)
  {
    v4 = *(_DWORD *)(this + 32) & 0x1000000;
    goto LABEL_27;
  }
LABEL_28:
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v9 = *(_QWORD *)(this - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)(this - 32) = 0;
  *(_DWORD *)(this + 20) &= 0xF8000000;
  return this;
}

void llvm::GlobalVariable::dropAllReferences(llvm::Value *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = (char *)*((_QWORD *)this - 1);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (char *)this - 32 * v2;
    if (!v2)
      goto LABEL_10;
  }
  v4 = 32 * v2;
  v5 = (_QWORD **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **v5 = *(v5 - 1);
      v6 = (uint64_t)*(v5 - 1);
      if (v6)
        *(_QWORD *)(v6 + 16) = *v5;
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
LABEL_10:
  llvm::Value::clearMetadata(this);
}

uint64_t llvm::GlobalAlias::GlobalAlias(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, char a4, const char **a5, uint64_t a6, uint64_t a7)
{
  llvm::Type *v13;
  llvm::Value *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v13 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  v14 = (llvm::Value *)llvm::Value::Value(a1, v13, 1);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 1;
  *(_QWORD *)(a1 + 24) = a2;
  v15 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v16 = v15 & 0xFFFE0000 | a4 & 0xF;
  if ((a4 & 0xFu) - 7 < 2)
    v16 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName(v14, a5);
  v17 = (_QWORD *)(a1 - 32);
  v18 = *(_QWORD *)(a1 - 32);
  *(_QWORD *)(a1 + 48) = 0;
  v19 = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  if (v18)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v17 = a6;
  if (a6)
  {
    v23 = *(_QWORD *)(a6 + 8);
    v22 = (_QWORD *)(a6 + 8);
    v21 = v23;
    *(_QWORD *)(a1 - 24) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v22;
    *v22 = v17;
  }
  if (a7)
  {
    llvm::SymbolTableListTraits<llvm::GlobalAlias>::addNodeToList((llvm::ValueSymbolTable *)(a7 + 40), a1);
    v24 = *(_QWORD *)(a7 + 40);
    *(_QWORD *)(a1 + 48) = v24;
    *(_QWORD *)(a1 + 56) = a7 + 40;
    *(_QWORD *)(v24 + 8) = v19;
    *(_QWORD *)(a7 + 40) = v19;
  }
  return a1;
}

uint64_t llvm::GlobalAlias::setAliasee(uint64_t this, llvm::Constant *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(this - 32);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v3 = *(_QWORD *)(this - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(this - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *((_QWORD *)a2 + 1);
    v4 = (_QWORD *)((char *)a2 + 8);
    v5 = v6;
    *(_QWORD *)(this - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v4;
    *v4 = v2;
  }
  return this;
}

uint64_t llvm::GlobalAlias::create(llvm::PointerType **a1, llvm::Type *a2, char a3, const char **a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = llvm::User::operator new((llvm::User *)0x40, 1u);
  return llvm::GlobalAlias::GlobalAlias((uint64_t)v10, a1, a2, a3, a4, 0, a5);
}

uint64_t findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(uint64_t result, int64x2_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[31];

  v2 = result;
  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 3 && v3 != 1)
    return result;
  if (v3 == 1)
    v6 = result;
  else
    v6 = 0;
  v10 = v6;
  if (v6)
  {
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2, &v10, (uint64_t)v11);
    if (v11[16])
    {
      v7 = *(_QWORD *)(v10 - 32);
      return findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(v7, a2);
    }
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3 == 5)
  {
    result = 0;
    switch(*(_WORD *)(v2 + 18))
    {
      case 0xD:
        v8 = findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), a2);
        result = findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2);
        if (result)
          v9 = 0;
        else
          v9 = v8;
        if (v8)
          return v9;
        return result;
      case 0xF:
        if (findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2))
        {
          return 0;
        }
        goto LABEL_15;
      case 0x22:
      case 0x2F:
      case 0x30:
      case 0x31:
LABEL_15:
        v7 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
        return findBaseObject<llvm::GlobalAlias::getAliaseeObject(void)::$_0>(v7, a2);
      default:
        return result;
    }
  }
  return 0;
}

uint64_t llvm::GlobalIFunc::GlobalIFunc(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, char a4, const char **a5, uint64_t a6, uint64_t a7)
{
  llvm::Type *v13;
  llvm::Value *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v13 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  v14 = (llvm::Value *)llvm::Value::Value(a1, v13, 2);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 1;
  *(_QWORD *)(a1 + 24) = a2;
  v15 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v16 = v15 & 0xFFFE0000 | a4 & 0xF;
  if ((a4 & 0xFu) - 7 < 2)
    v16 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName(v14, a5);
  v17 = (_QWORD *)(a1 - 32);
  v18 = *(_QWORD *)(a1 - 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v19 = a1 + 56;
  *(_DWORD *)(a1 + 32) &= 0x1FFFFu;
  *(_QWORD *)(a1 + 64) = 0;
  if (v18)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v20 = *(_QWORD *)(a1 - 24);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v17 = a6;
  if (a6)
  {
    v23 = *(_QWORD *)(a6 + 8);
    v22 = (_QWORD *)(a6 + 8);
    v21 = v23;
    *(_QWORD *)(a1 - 24) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v22;
    *v22 = v17;
  }
  if (a7)
  {
    llvm::SymbolTableListTraits<llvm::GlobalIFunc>::addNodeToList((llvm::ValueSymbolTable *)(a7 + 56), a1);
    v24 = *(_QWORD *)(a7 + 56);
    *(_QWORD *)(a1 + 56) = v24;
    *(_QWORD *)(a1 + 64) = a7 + 56;
    *(_QWORD *)(v24 + 8) = v19;
    *(_QWORD *)(a7 + 56) = v19;
  }
  return a1;
}

uint64_t llvm::GlobalIFunc::create(llvm::PointerType **a1, llvm::Type *a2, char a3, const char **a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = llvm::User::operator new((llvm::User *)0x48, 1u);
  return llvm::GlobalIFunc::GlobalIFunc((uint64_t)v12, a1, a2, a3, a4, a5, a6);
}

llvm::Value *llvm::GlobalIFunc::getResolverFunction(llvm::Value **this)
{
  llvm::Value *result;

  result = llvm::Value::stripPointerCastsAndAliases(*(this - 4));
  if (*((_BYTE *)result + 16))
    return 0;
  return result;
}

void llvm::GlobalVariable::~GlobalVariable(llvm::GlobalVariable *this)
{
  int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x40000000) != 0)
  {
    v4 = (char *)*((_QWORD *)this - 1);
    v3 = v2 & 0x7FFFFFF;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = (char *)this - 32 * v3;
    if (!v3)
      goto LABEL_10;
  }
  v5 = 32 * v3;
  v6 = (_QWORD **)(v4 + 16);
  do
  {
    if (*(v6 - 2))
    {
      **v6 = *(v6 - 1);
      v7 = (uint64_t)*(v6 - 1);
      if (v7)
        *(_QWORD *)(v7 + 16) = *v6;
    }
    *(v6 - 2) = 0;
    v6 += 4;
    v5 -= 32;
  }
  while (v5);
LABEL_10:
  llvm::Value::clearMetadata(this);
  v8 = *((_QWORD *)this + 6);
  if (v8)
    llvm::Comdat::removeUser(v8, this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v9);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucket<llvm::GlobalValue const*>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(a1, v7);
  v8 = *a3;
  v11 = *(_DWORD *)(a1 + 16) - 1;
  v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v12);
  v13 = *a2;
  if (*a3 != *a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = a2;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v17 & v11));
      v13 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v14)
      a2 = v14;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v9;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucket<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *(_QWORD *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = *(_QWORD *)a1 + 16 * v11;
  v12 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = *(_QWORD *)a1 + 16 * (v16 & v10);
      v12 = *(_QWORD *)a2;
      if (v8 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_BYTE *)(a2 + 8) &= 0xF0u;
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateIntrinsic(uint64_t a1, int a2, BOOL **a3, uint64_t a4, uint64_t *a5, uint64_t a6, const llvm::Instruction *a7, uint64_t a8)
{
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Module = (uint64_t *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  Declaration = llvm::Intrinsic::getDeclaration(Module, a2, a3, a4);
  if (Declaration)
    v18 = *(_QWORD *)(Declaration + 24);
  else
    v18 = 0;
  v19 = llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v18, Declaration, a5, a6, 0, 0, a8, 0);
  v20 = v19;
  if (a7)
    llvm::Instruction::copyFastMathFlags(v19, a7);
  return v20;
}

uint64_t llvm::IRBuilderBase::CreateMaskedLoad(uint64_t a1, llvm::PoisonValue *this, BOOL **a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  BOOL *v14;
  uint64_t Int32Ty;
  uint64_t Declaration;
  uint64_t v17;
  uint64_t v19[4];
  BOOL *v20[3];

  v8 = a6;
  v20[2] = *(BOOL **)MEMORY[0x1E0C80C00];
  v14 = *a3;
  if (!a6)
    v8 = llvm::PoisonValue::get(this, this);
  v20[0] = (BOOL *)this;
  v20[1] = v14;
  v19[0] = (uint64_t)a3;
  Int32Ty = llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 64), this);
  v19[1] = (uint64_t)llvm::ConstantInt::get(Int32Ty, (1 << a4), 0);
  v19[2] = a5;
  v19[3] = v8;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 40), 208, v20, 2);
  if (Declaration)
    v17 = *(_QWORD *)(Declaration + 24);
  else
    v17 = 0;
  return llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v17, Declaration, v19, 4, 0, 0, a7, 0);
}

uint64_t llvm::IRBuilderBase::CreateMaskedStore(uint64_t a1, llvm::LLVMContext *a2, BOOL **a3, char a4, uint64_t a5)
{
  BOOL *v7;
  uint64_t v8;
  uint64_t Int32Ty;
  uint64_t Declaration;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  uint64_t v15[4];
  BOOL *v16[3];

  v16[2] = *(BOOL **)MEMORY[0x1E0C80C00];
  v7 = *a3;
  v16[0] = *(BOOL **)a2;
  v16[1] = v7;
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)a3;
  v8 = 1 << a4;
  Int32Ty = llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 64), a2);
  v15[2] = (uint64_t)llvm::ConstantInt::get(Int32Ty, v8, 0);
  v15[3] = a5;
  v14 = 257;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 40), 210, v16, 2);
  if (Declaration)
    v11 = *(_QWORD *)(Declaration + 24);
  else
    v11 = 0;
  return llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v11, Declaration, v15, 4, 0, 0, (uint64_t)v13, 0);
}

uint64_t **llvm::IRBuilderBase::CreateConstrainedFPBinOp(uint64_t a1, int a2, int8x16_t *a3, const unsigned __int8 *a4, llvm::Instruction *a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  unsigned __int8 v16;
  char v17;
  llvm::LLVMContext *v18;
  llvm::Metadata *v19;
  unsigned __int8 *v20;
  llvm::LLVMContext *v21;
  llvm::Metadata *v22;
  unsigned __int8 *v23;
  BOOL *v24;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *DesiredBytecodeVersion;
  int8x16_t *v31;
  const unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  BOOL *v35[2];

  v16 = a9;
  v35[1] = *(BOOL **)MEMORY[0x1E0C80C00];
  v17 = *(_BYTE *)(a1 + 102);
  if ((a8 & 0xFF00) != 0)
    v17 = a8;
  llvm::convertRoundingModeToStr(v17, (uint64_t)&v31);
  v18 = (llvm::LLVMContext *)llvm::MDString::get(*(_QWORD **)(a1 + 64), v31, v32);
  v20 = llvm::MetadataAsValue::get(*(llvm::MetadataAsValue **)(a1 + 64), v18, v19);
  if ((a9 & 0xFF00) == 0)
    v16 = *(_BYTE *)(a1 + 101);
  llvm::convertExceptionBehaviorToStr(v16, (uint64_t)&v31);
  v21 = (llvm::LLVMContext *)llvm::MDString::get(*(_QWORD **)(a1 + 64), v31, v32);
  v23 = llvm::MetadataAsValue::get(*(llvm::MetadataAsValue **)(a1 + 64), v21, v22);
  if (a5)
    LOBYTE(a5) = llvm::Instruction::getFastMathFlags(a5);
  else
    LODWORD(a5) = *(_DWORD *)(a1 + 96);
  v24 = (BOOL *)a3->i64[0];
  v34 = v23;
  v35[0] = v24;
  v31 = a3;
  v32 = a4;
  v33 = v20;
  Module = (uint64_t *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  Declaration = llvm::Intrinsic::getDeclaration(Module, a2, v35, 1);
  if (Declaration)
    v27 = *(_QWORD *)(Declaration + 24);
  else
    v27 = 0;
  v28 = (uint64_t **)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v27, Declaration, (uint64_t *)&v31, 4, 0, 0, a6, 0);
  DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v28);
  v28[9] = llvm::AttributeList::addAttributeAtIndex(v28 + 9, DesiredBytecodeVersion, -1, 64);
  if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
    llvm::Instruction::setMetadata((unsigned __int8 **)v28, 3, a7);
  llvm::Instruction::setFastMathFlags((uint64_t)v28, (char)a5);
  return v28;
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast(uint64_t a1, int a2, BOOL *a3, BOOL *a4, llvm::Instruction *a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  unsigned __int8 v17;
  llvm::LLVMContext *v18;
  llvm::Metadata *v19;
  unsigned __int8 *v20;
  char v21;
  char v22;
  llvm::LLVMContext *v23;
  llvm::Metadata *v24;
  unsigned __int8 *v25;
  const unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  mlir::BytecodeWriterConfig *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *DesiredBytecodeVersion;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  int v41;
  const unsigned __int8 *v44;
  uint64_t *Module;
  uint64_t Declaration;
  uint64_t v47;
  BOOL *v48;
  unsigned __int8 *v49;
  int8x16_t *v50;
  const unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;

  v17 = a9;
  v53 = *MEMORY[0x1E0C80C00];
  if ((a9 & 0xFF00) == 0)
    v17 = *(_BYTE *)(a1 + 101);
  llvm::convertExceptionBehaviorToStr(v17, (uint64_t)&v50);
  v18 = (llvm::LLVMContext *)llvm::MDString::get(*(_QWORD **)(a1 + 64), v50, v51);
  v20 = llvm::MetadataAsValue::get(*(llvm::MetadataAsValue **)(a1 + 64), v18, v19);
  if (a5)
  {
    LOBYTE(a5) = llvm::Instruction::getFastMathFlags(a5);
    v21 = a2 - 87;
    if ((a2 - 87) > 0x27)
      goto LABEL_40;
  }
  else
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 96);
    v21 = a2 - 87;
    if ((a2 - 87) > 0x27)
    {
LABEL_40:
      v44 = *(const unsigned __int8 **)a3;
      v50 = (int8x16_t *)a4;
      v51 = v44;
      v48 = a3;
      v49 = v20;
      Module = (uint64_t *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
      Declaration = llvm::Intrinsic::getDeclaration(Module, a2, (BOOL **)&v50, 2);
      if (Declaration)
        v47 = *(_QWORD *)(Declaration + 24);
      else
        v47 = 0;
      v30 = (mlir::BytecodeWriterConfig *)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v47, Declaration, (uint64_t *)&v48, 2, 0, 0, a6, 0);
      goto LABEL_14;
    }
  }
  if (((1 << v21) & 0xB9E0F7C74FLL) == 0)
    goto LABEL_40;
  v22 = *(_BYTE *)(a1 + 102);
  if ((a8 & 0xFF00) != 0)
    v22 = a8;
  llvm::convertRoundingModeToStr(v22, (uint64_t)&v50);
  v23 = (llvm::LLVMContext *)llvm::MDString::get(*(_QWORD **)(a1 + 64), v50, v51);
  v25 = llvm::MetadataAsValue::get(*(llvm::MetadataAsValue **)(a1 + 64), v23, v24);
  v26 = *(const unsigned __int8 **)a3;
  v48 = a4;
  v49 = (unsigned __int8 *)v26;
  v50 = (int8x16_t *)a3;
  v51 = v25;
  v52 = v20;
  v27 = (uint64_t *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  v28 = llvm::Intrinsic::getDeclaration(v27, a2, &v48, 2);
  if (v28)
    v29 = *(_QWORD *)(v28 + 24);
  else
    v29 = 0;
  v30 = (mlir::BytecodeWriterConfig *)llvm::IRBuilderBase::CreateCall((uint64_t *)a1, v29, v28, (uint64_t *)&v50, 3, 0, 0, a6, 0);
LABEL_14:
  v31 = (uint64_t)v30;
  v32 = (uint64_t **)((char *)v30 + 72);
  DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v30);
  *(_QWORD *)(v31 + 72) = llvm::AttributeList::addAttributeAtIndex(v32, DesiredBytecodeVersion, -1, 64);
  v34 = *(unsigned __int8 *)(v31 + 16);
  v35 = v34 - 28;
  if (v34 < 0x1C)
  {
    if (v34 != 5)
      return v31;
    v35 = *(unsigned __int16 *)(v31 + 18);
  }
  if (v35 <= 0x39)
  {
    if (((1 << v35) & 0x40000001255000) != 0)
      goto LABEL_46;
    if (((1 << v35) & 0x380000000000000) != 0)
    {
      v36 = v31;
      do
      {
        v37 = *(_QWORD *)v36;
        v38 = *(unsigned __int8 *)(*(_QWORD *)v36 + 8);
        v36 = *(_QWORD *)v36 + 24;
        if (v37)
          v39 = v38 == 17;
        else
          v39 = 0;
      }
      while (v39);
      if ((v38 & 0xFE) == 0x12)
        v38 = *(_DWORD *)(**(_QWORD **)(v37 + 16) + 8);
      v40 = v38 < 4u || v38 == 5;
      v41 = v38 & 0xFD;
      if (v40 || v41 == 4)
      {
LABEL_46:
        if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
          llvm::Instruction::setMetadata((unsigned __int8 **)v31, 3, a7);
        llvm::Instruction::setFastMathFlags(v31, (char)a5);
      }
    }
  }
  return v31;
}

llvm::Instruction *llvm::IRBuilderBase::CreateSelect(llvm::IRBuilderBase *this, Value *a2, llvm::Type **a3, Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  llvm::Instruction *v12;
  llvm::Instruction *v13;
  uint64_t MetadataImpl;
  llvm::MDNode *v15;
  llvm::MDNode *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  BOOL v23;
  int v24;
  int v26;
  llvm::MDNode *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  const char *v32;
  __int16 v33;

  v12 = (llvm::Instruction *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
  if (v12)
    return v12;
  v33 = 257;
  v12 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 3u);
  v13 = llvm::Instruction::Instruction(v12, *a3, 57, (llvm::Instruction *)((char *)v12 - 96), 3, 0);
  llvm::SelectInst::init((uint64_t)v13, a2, (Value *)a3, a4);
  llvm::Value::setName(v12, &v32);
  if (a6 && (*((_BYTE *)a6 + 23) & 0x20) != 0)
  {
    MetadataImpl = llvm::Value::getMetadataImpl(a6, 2);
    v15 = (llvm::MDNode *)MetadataImpl;
    if ((*((_BYTE *)a6 + 23) & 0x20) != 0)
    {
      v16 = (llvm::MDNode *)llvm::Value::getMetadataImpl(a6, 15);
      if (!v15)
        goto LABEL_9;
    }
    else
    {
      v16 = 0;
      if (!MetadataImpl)
      {
LABEL_9:
        if (v16)
          llvm::Instruction::setMetadata((unsigned __int8 **)v12, 15, v16);
        goto LABEL_11;
      }
    }
    llvm::Instruction::setMetadata((unsigned __int8 **)v12, 2, v15);
    goto LABEL_9;
  }
LABEL_11:
  v17 = *((unsigned __int8 *)v12 + 16);
  v18 = v17 - 28;
  if (v17 >= 0x1C)
  {
LABEL_14:
    if (v18 <= 0x39)
    {
      if (((1 << v18) & 0x40000001255000) != 0)
        goto LABEL_32;
      if (((1 << v18) & 0x380000000000000) != 0)
      {
        v19 = (uint64_t)v12;
        do
        {
          v20 = *(_QWORD *)v19;
          v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 8);
          v19 = *(_QWORD *)v19 + 24;
          if (v20)
            v22 = v21 == 17;
          else
            v22 = 0;
        }
        while (v22);
        if ((v21 & 0xFE) == 0x12)
          v21 = *(_DWORD *)(**(_QWORD **)(v20 + 16) + 8);
        v23 = v21 < 4u || v21 == 5;
        v24 = v21 & 0xFD;
        if (v23 || v24 == 4)
        {
LABEL_32:
          v26 = *((_DWORD *)this + 24);
          v27 = (llvm::MDNode *)*((_QWORD *)this + 11);
          if (v27)
            llvm::Instruction::setMetadata((unsigned __int8 **)v12, 3, v27);
          llvm::Instruction::setFastMathFlags((uint64_t)v12, v26);
        }
      }
    }
    goto LABEL_35;
  }
  if (v17 == 5)
  {
    v18 = *((unsigned __int16 *)v12 + 9);
    goto LABEL_14;
  }
LABEL_35:
  (*(void (**)(_QWORD, llvm::Instruction *, const llvm::Twine *, _QWORD, _QWORD))(**((_QWORD **)this + 10)
                                                                                           + 16))(*((_QWORD *)this + 10), v12, a5, *((_QWORD *)this + 6), *((_QWORD *)this + 7));
  v28 = *((unsigned int *)this + 2);
  if ((_DWORD)v28)
  {
    v29 = *(_QWORD **)this;
    v30 = &v29[2 * v28];
    do
    {
      llvm::Instruction::setMetadata((unsigned __int8 **)v12, *(_DWORD *)v29, (llvm::MDNode *)v29[1]);
      v29 += 2;
    }
    while (v29 != v30);
  }
  return v12;
}

unsigned __int8 **llvm::IRBuilderBase::CreateVectorSplat(llvm::IRBuilderBase *this, unsigned int a2, llvm::ScalableVectorType **a3, const llvm::Twine *a4)
{
  return llvm::IRBuilderBase::CreateVectorSplat((uint64_t)this, (llvm::Type *)a2, a3, (uint64_t)a4);
}

unsigned __int8 **llvm::IRBuilderBase::CreateVectorSplat(uint64_t a1, llvm::Type *a2, llvm::ScalableVectorType **a3, uint64_t a4)
{
  int v6;
  unint64_t v8;
  llvm::PoisonValue *v9;
  llvm::Type *v10;
  llvm::Value *v11;
  llvm::LLVMContext *v12;
  uint64_t Int64Ty;
  llvm::Value *v14;
  int v15;
  uint64_t v16;
  const char *v17;
  llvm::InsertElementInst *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  const char *v27;
  unsigned __int8 **ShuffleVector;
  const char *v30;
  uint64_t v31;
  const char *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;
  _WORD v36[32];
  uint64_t v37;

  v6 = (int)a2;
  v37 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  llvm::VectorType::get(*a3, a2);
  v11 = (llvm::Value *)llvm::PoisonValue::get(v9, v10);
  Int64Ty = llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), v12);
  v14 = (llvm::Value *)llvm::ConstantInt::get(Int64Ty, 0, 0);
  v15 = *(unsigned __int8 *)(a4 + 32);
  if (v15 == 1)
  {
    v30 = ".splatinsert";
    v33 = 259;
  }
  else if (*(_BYTE *)(a4 + 32))
  {
    v16 = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(a4 + 33) == 1)
    {
      v17 = *(const char **)a4;
    }
    else
    {
      LOBYTE(v15) = 2;
      v17 = (const char *)a4;
    }
    v30 = v17;
    v31 = v16;
    v32 = ".splatinsert";
    LOBYTE(v33) = v15;
    HIBYTE(v33) = 3;
  }
  else
  {
    v33 = 256;
  }
  v18 = (llvm::InsertElementInst *)(*(uint64_t (**)(_QWORD, llvm::Value *, llvm::ScalableVectorType **, llvm::Value *))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72), v11, a3, v14);
  if (!v18)
  {
    v36[8] = 257;
    v18 = (llvm::InsertElementInst *)llvm::User::operator new((llvm::User *)0x48, 3u);
    llvm::InsertElementInst::InsertElementInst(v18, v11, (llvm::Value *)a3, v14, (const llvm::Twine *)&v34, 0);
    (*(void (**)(_QWORD, llvm::InsertElementInst *, const char **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80)
                                                                                             + 16))(*(_QWORD *)(a1 + 80), v18, &v30, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v19 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD *)a1 + 16 * v19;
      do
      {
        llvm::Instruction::setMetadata((unsigned __int8 **)v18, *(_DWORD *)v20, *(llvm::MDNode **)(v20 + 8));
        v20 += 16;
      }
      while (v20 != v21);
    }
  }
  v34 = v36;
  v35 = 0x1000000000;
  if (!v8)
  {
    v23 = v36;
    v25 = *(unsigned __int8 *)(a4 + 32);
    if (v25 != 1)
      goto LABEL_22;
    goto LABEL_18;
  }
  if (v8 < 0x11)
  {
    v22 = 0;
    v23 = v36;
    v24 = v8;
    goto LABEL_20;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v8, 4);
  v22 = v35;
  v23 = v34;
  v24 = v8 - v35;
  if (v8 != v35)
LABEL_20:
    bzero(&v23[2 * v22], 4 * v24);
  LODWORD(v35) = v6;
  v25 = *(unsigned __int8 *)(a4 + 32);
  if (v25 != 1)
  {
LABEL_22:
    if (v25)
    {
      v26 = *(_QWORD *)(a4 + 8);
      if (*(_BYTE *)(a4 + 33) == 1)
      {
        v27 = *(const char **)a4;
      }
      else
      {
        LOBYTE(v25) = 2;
        v27 = (const char *)a4;
      }
      v30 = v27;
      v31 = v26;
      v32 = ".splat";
      LOBYTE(v33) = v25;
      HIBYTE(v33) = 3;
    }
    else
    {
      v33 = 256;
    }
    goto LABEL_28;
  }
LABEL_18:
  v30 = ".splat";
  v33 = 259;
LABEL_28:
  ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t *)a1, (llvm::PoisonValue **)v18, (uint64_t)v23, v8, (uint64_t)&v30);
  if (v34 != v36)
    free(v34);
  return ShuffleVector;
}

void llvm::IRBuilderDefaultInserter::InsertHelper(uint64_t a1, llvm::MCSymbolXCOFF *a2, const char **a3, uint64_t a4, uint64_t ***a5)
{
  if (a4)
    llvm::Instruction::insertInto(a2, a4, a5);
  llvm::Value::setName(a2, a3);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldBinOp(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4)
{
  mlir::BytecodeWriterConfig *v4;
  llvm::Constant *v5;
  BOOL v6;
  llvm::Constant *v10;
  llvm::Type *v11;

  if (a3[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (mlir::BytecodeWriterConfig *)a3;
  if (a4[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a4;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if (llvm::ConstantExpr::isDesirableBinOp(this))
    return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, v4, v5, 0, 0, v11);
  else
    return llvm::ConstantFoldBinaryInstruction(this, (llvm::ConstantFP **)v4, (llvm::PoisonValue **)v5, v10);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldExactBinOp(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4, llvm::Constant *a5)
{
  mlir::BytecodeWriterConfig *v5;
  llvm::Constant *v6;
  BOOL v7;
  llvm::Constant *v12;
  llvm::Type *v13;

  if (a3[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (mlir::BytecodeWriterConfig *)a3;
  if (a4[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a4;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  if (llvm::ConstantExpr::isDesirableBinOp(this))
    return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, v5, v6, a5, 0, v13);
  else
    return llvm::ConstantFoldBinaryInstruction(this, (llvm::ConstantFP **)v5, (llvm::PoisonValue **)v6, v12);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldNoWrapBinOp(int a1, llvm::ConstantExpr *this, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  llvm::ConstantFP **v6;
  llvm::PoisonValue **v7;
  BOOL v8;
  llvm::Constant *v14;
  llvm::Type *v15;
  unint64_t v16;

  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::ConstantFP **)a3;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::PoisonValue **)a4;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (!llvm::ConstantExpr::isDesirableBinOp(this))
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, v14);
  if (a6)
    v16 = a5 | 2;
  else
    v16 = a5;
  return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, (mlir::BytecodeWriterConfig *)v6, (llvm::Constant *)v7, (llvm::Constant *)v16, 0, v15);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldBinOpFMF(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4)
{
  mlir::BytecodeWriterConfig *v4;
  llvm::Constant *v5;
  BOOL v6;
  llvm::Constant *v10;
  llvm::Type *v11;

  if (a3[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (mlir::BytecodeWriterConfig *)a3;
  if (a4[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a4;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if (llvm::ConstantExpr::isDesirableBinOp(this))
    return (llvm::APFloatBase *)llvm::ConstantExpr::get(this, v4, v5, 0, 0, v11);
  else
    return llvm::ConstantFoldBinaryInstruction(this, (llvm::ConstantFP **)v4, (llvm::PoisonValue **)v5, v10);
}

_QWORD *llvm::ConstantFolder::FoldUnOpFMF(int a1, llvm *this, unsigned __int8 *a3)
{
  if (a3 && a3[16] <= 0x14u)
    return llvm::ConstantFoldUnaryInstruction(this, a3, (llvm::Constant *)a3);
  else
    return 0;
}

llvm::APFloatBase *llvm::ConstantFolder::FoldICmp(uint64_t a1, unsigned __int16 a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  mlir::BytecodeWriterConfig *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (a3[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (mlir::BytecodeWriterConfig *)a3;
  if (a4[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a4;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, v4, v5, 0);
}

uint64_t llvm::ConstantFolder::FoldGEP(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t i;

  if (llvm::Type::isScalableTy(a2) || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
    return 0;
  if (a5)
  {
    v12 = 8 * a5;
    for (i = a4; *(unsigned __int8 *)(*(_QWORD *)i + 16) <= 0x14u; i += 8)
    {
      v12 -= 8;
      if (!v12)
        return llvm::ConstantExpr::getGetElementPtr((uint64_t)a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
    }
    return 0;
  }
  return llvm::ConstantExpr::getGetElementPtr((uint64_t)a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
}

llvm::Constant *llvm::ConstantFolder::FoldSelect(llvm::ConstantFolder *this, llvm::Value *a2, llvm::PoisonValue **a3, llvm::Value *a4)
{
  llvm *v4;
  llvm::PoisonValue **v5;
  llvm::Constant *v6;
  BOOL v7;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v4 = 0;
  else
    v4 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a3;
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = a4;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || v6 == 0)
    return 0;
  else
    return llvm::ConstantFoldSelectInstruction(v4, v5, v6, a4);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldExtractValue(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, uint64_t a4)
{
  if (a2 && a2[16] <= 0x14u)
    return llvm::ConstantFoldExtractValueInstruction((llvm::APFloatBase *)a2, a3, a4);
  else
    return 0;
}

_QWORD *llvm::ConstantFolder::FoldInsertValue(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  llvm::Constant *v5;
  _QWORD *v6;
  BOOL v7;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a2;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = (_QWORD *)a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  else
    return llvm::ConstantFoldInsertValueInstruction(v5, v6, a4, a5);
}

llvm::APFloatBase *llvm::ConstantFolder::FoldExtractElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Type *a4)
{
  llvm::ConstantExpr *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v4 = 0;
  else
    v4 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getExtractElement(v4, v5, 0, a4);
}

mlir::BytecodeWriterConfig *llvm::ConstantFolder::FoldInsertElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Type *a5)
{
  llvm::ConstantExpr *v5;
  llvm::Constant *v6;
  llvm::Constant *v7;
  BOOL v8;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = a3;
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u)
    v7 = 0;
  else
    v7 = a4;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8 || v7 == 0)
    return 0;
  else
    return llvm::ConstantExpr::getInsertElement(v5, v6, v7, 0, a5);
}

_QWORD *llvm::ConstantFolder::FoldShuffleVector(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4, uint64_t a5)
{
  mlir::BytecodeWriterConfig *v5;
  mlir::BytecodeWriterConfig *v6;
  BOOL v7;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (mlir::BytecodeWriterConfig *)a2;
  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (mlir::BytecodeWriterConfig *)a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  else
    return llvm::ConstantExpr::getShuffleVector(v5, v6, a4, a5, 0);
}

void llvm::ConstantFolder::FoldCast(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::Type *v7;

  if (a3 && a3[16] <= 0x14u)
  {
    if (llvm::ConstantExpr::isDesirableCastOp(this))
      llvm::ConstantExpr::getCast(this, a3, a4, 0);
    else
      llvm::ConstantFoldCastInstruction(this, (llvm::Type *)a3, (llvm::Type **)a4, v7);
  }
}

void llvm::ConstantFolder::CreatePointerCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3, llvm::Type *a4)
{
  llvm::ConstantExpr::getPointerCast(a2, a3, a3, a4);
}

void llvm::ConstantFolder::CreatePointerBitCastOrAddrSpaceCast(llvm::ConstantFolder *this, llvm::Constant **a2, llvm::Type *a3, llvm::Type *a4)
{
  llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(a2, a3, a3, a4);
}

llvm::APFloatBase *llvm::ConstantFolder::CreateFCmp(int a1, unsigned __int16 a2, mlir::BytecodeWriterConfig *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
}

uint64_t llvm::IRBuilderBase::CreateCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int8x16_t *a6, uint64_t a7, uint64_t a8, llvm::MDNode *a9)
{
  char *v11;
  uint64_t v12;
  uint64_t *DesiredBytecodeVersion;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  int v21;
  llvm::MDNode *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v29;
  __int16 v30;

  v30 = 257;
  v11 = llvm::CallInst::Create(a2, a3, a4, a5, a6, a7, &v29, 0);
  v12 = (uint64_t)v11;
  if (*((_BYTE *)a1 + 100))
  {
    DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v11);
    *(_QWORD *)(v12 + 72) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)(v12 + 72), DesiredBytecodeVersion, -1, 64);
  }
  v14 = *(unsigned __int8 *)(v12 + 16);
  v15 = v14 - 28;
  if (v14 < 0x1C)
  {
    if (v14 != 5)
      goto LABEL_28;
    v15 = *(unsigned __int16 *)(v12 + 18);
  }
  if (v15 <= 0x39)
  {
    if (((1 << v15) & 0x40000001255000) != 0)
      goto LABEL_24;
    if (((1 << v15) & 0x380000000000000) != 0)
    {
      v16 = v12;
      do
      {
        v17 = *(_QWORD *)v16;
        v18 = *(unsigned __int8 *)(*(_QWORD *)v16 + 8);
        v16 = *(_QWORD *)v16 + 24;
        if (v17)
          v19 = v18 == 17;
        else
          v19 = 0;
      }
      while (v19);
      if ((v18 & 0xFE) == 0x12)
        v18 = *(_DWORD *)(**(_QWORD **)(v17 + 16) + 8);
      v20 = v18 < 4u || v18 == 5;
      v21 = v18 & 0xFD;
      if (v20 || v21 == 4)
      {
LABEL_24:
        v23 = a9;
        v24 = *((_DWORD *)a1 + 24);
        if (a9 || (v23 = (llvm::MDNode *)a1[11]) != 0)
          llvm::Instruction::setMetadata((unsigned __int8 **)v12, 3, v23);
        llvm::Instruction::setFastMathFlags(v12, v24);
      }
    }
  }
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a8, a1[6], a1[7]);
  v25 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v25)
  {
    v26 = *a1;
    v27 = v26 + 16 * v25;
    do
    {
      llvm::Instruction::setMetadata((unsigned __int8 **)v12, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
      v26 += 16;
    }
    while (v26 != v27);
  }
  return v12;
}

uint64_t llvm::SelectInst::init(uint64_t this, Value *a2, Value *a3, Value *a4)
{
  ValueImpl *v4;
  uint64_t v5;
  Value *v6;
  ValueImpl *v7;
  ValueImpl *impl;
  ValueImpl *v9;
  uint64_t v10;
  Value *v11;
  ValueImpl *v12;
  ValueImpl *v13;
  ValueImpl *v14;
  uint64_t v15;
  Value *v16;
  ValueImpl *v17;
  ValueImpl *v18;

  v4 = (ValueImpl *)(this - 96);
  if (*(_QWORD *)(this - 96))
  {
    **(_QWORD **)(this - 80) = *(_QWORD *)(this - 88);
    v5 = *(_QWORD *)(this - 88);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 80);
  }
  *(_QWORD *)v4 = a2;
  if (a2)
  {
    impl = a2[1].impl;
    v6 = a2 + 1;
    v7 = impl;
    *(_QWORD *)(this - 88) = impl;
    if (impl)
      *((_QWORD *)v7 + 2) = this - 88;
    *(_QWORD *)(this - 80) = v6;
    v6->impl = v4;
  }
  v9 = (ValueImpl *)(this - 64);
  if (*(_QWORD *)(this - 64))
  {
    **(_QWORD **)(this - 48) = *(_QWORD *)(this - 56);
    v10 = *(_QWORD *)(this - 56);
    if (v10)
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(this - 48);
  }
  *(_QWORD *)v9 = a3;
  if (a3)
  {
    v13 = a3[1].impl;
    v11 = a3 + 1;
    v12 = v13;
    *(_QWORD *)(this - 56) = v13;
    if (v13)
      *((_QWORD *)v12 + 2) = this - 56;
    *(_QWORD *)(this - 48) = v11;
    v11->impl = v9;
  }
  v14 = (ValueImpl *)(this - 32);
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v15 = *(_QWORD *)(this - 24);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)v14 = a4;
  if (a4)
  {
    v18 = a4[1].impl;
    v16 = a4 + 1;
    v17 = v18;
    *(_QWORD *)(this - 24) = v18;
    if (v18)
      *((_QWORD *)v17 + 2) = this - 24;
    *(_QWORD *)(this - 16) = v16;
    v16->impl = v14;
  }
  return this;
}

uint64_t llvm::GenericSSAContext<llvm::Function>::getIntrinsicID(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;

  v1 = a1[16] - 33;
  v2 = v1 >= 0x33;
  v4 = v1 == 51;
  v3 = (1 << v1) & 0x8000000000041;
  v4 = !v4 && v2 || v3 == 0;
  if (v4)
    return 0;
  else
    return llvm::CallBase::getIntrinsicID((llvm::CallBase *)a1);
}

void llvm::GenericSSAContext<llvm::Function>::print(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = a2;
  *a2 = off_1E0E51AB0;
  a2[1] = a1;
}

{
  int v2;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 20);
    a2[3] = a2;
    if ((v2 & 0x10000000) != 0)
      *a2 = off_1E0E51A00;
    else
      *a2 = off_1E0E51A58;
    a2[1] = a1;
  }
  else
  {
    a2[3] = a2;
    *a2 = off_1E0E519A8;
  }
}

void llvm::GenericSSAContext<llvm::Function>::printAsOperand(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = a2;
  *a2 = off_1E0E51950;
  a2[1] = a1;
}

_QWORD *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51AB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51AB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::Value::print(*(Value **)(a1 + 8), a2, 0);
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_5ValueEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_5ValueEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_5ValueEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_5ValueEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::Value const*)::$_0>,void ()(llvm::raw_ostream &)>::target_type()
{
}

_QWORD *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E519A8;
  return result;
}

void std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E519A8;
}

llvm::raw_ostream *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::operator()(int a1, llvm::raw_ostream *this)
{
  uint64_t v2;
  llvm::raw_ostream *result;

  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v2) <= 8)
    return llvm::raw_ostream::write(this, "<nullptr>", 9uLL);
  *(_BYTE *)(v2 + 8) = 62;
  *(_QWORD *)v2 = *(_QWORD *)"<nullptr>";
  *((_QWORD *)this + 4) += 9;
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::target_type()
{
}

_QWORD *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51A00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1>,void ()(llvm::raw_ostream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51A00;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2)
{
  size_t v3;
  const char *Name;
  size_t v5;
  llvm::raw_ostream *result;

  Name = llvm::Value::getName(*(llvm::Value **)(a1 + 8));
  v5 = v3;
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v3 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, Name, v3);
  if (v3)
  {
    result = (llvm::raw_ostream *)memcpy(result, Name, v3);
    *((_QWORD *)a2 + 4) += v5;
  }
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_1>,void ()(llvm::raw_ostream &)>::target_type()
{
}

_QWORD *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2>,void ()(llvm::raw_ostream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51A58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2)
{
  int LocalSlot;
  const llvm::Function *v5[15];

  v5[14] = *(const llvm::Function **)MEMORY[0x1E0C80C00];
  llvm::ModuleSlotTracker::ModuleSlotTracker((uint64_t)v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 40), 0);
  llvm::ModuleSlotTracker::incorporateFunction(v5, *(const llvm::Function **)(*(_QWORD *)(a1 + 8) + 64));
  LocalSlot = llvm::ModuleSlotTracker::getLocalSlot((llvm::ModuleSlotTracker *)v5, *(const llvm::Value **)(a1 + 8));
  llvm::raw_ostream::operator<<(a2, LocalSlot);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v5);
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE5printEPKNS_10BasicBlockEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2,std::allocator<llvm::GenericSSAContext<llvm::Function>::print(llvm::BasicBlock const*)::$_2>,void ()(llvm::raw_ostream &)>::target_type()
{
}

_QWORD *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E51950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E51950;
  a2[1] = v2;
  return result;
}

void std::__function::__func<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::operator()(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::Value::printAsOperand(*(Value **)(a1 + 8), a2, 1, 0);
}

uint64_t std::__function::__func<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4llvm17GenericSSAContextINS_8FunctionEE14printAsOperandEPKNS_10BasicBlockEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE14printAsOperandEPKNS_10BasicBlockEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4llvm17GenericSSAContextINS_8FunctionEE14printAsOperandEPKNS_10BasicBlockEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4llvm17GenericSSAContextINS_8FunctionEE14printAsOperandEPKNS_10BasicBlockEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0,std::allocator<llvm::GenericSSAContext<llvm::Function>::printAsOperand(llvm::BasicBlock const*)::$_0>,void ()(llvm::raw_ostream &)>::target_type()
{
}

uint64_t llvm::InlineAsm::get(llvm::PointerType **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, char a9)
{
  uint64_t v17;
  llvm::PointerType *v18;
  _QWORD v20[5];
  char v21;
  char v22;
  int v23;
  char v24;

  v17 = *(_QWORD *)*a1 + 1568;
  v18 = (llvm::PointerType *)llvm::PointerType::get(a1, 0);
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a1;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  return llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(v17, v18, (uint64_t)v20);
}

uint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(uint64_t a1, llvm::PointerType *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  int HashValue;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  const void *v27;
  uint64_t v28;
  int v29;
  int v30;
  const void *v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _QWORD **v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  const void *v44;
  const void *v45;
  size_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  const void *v57;
  uint64_t v58;
  int v59;
  int v60;
  const void *v61;
  uint64_t v62;
  size_t v63;
  int v64;
  _QWORD **v65;
  int v67;
  uint64_t v68;
  size_t v69;
  size_t v70;
  const void *v71;
  int v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  int v77;
  const void *v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  size_t v83;
  int v84;
  size_t __n;
  int __na;
  _OWORD v87[3];
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[64];
  uint64_t v95;
  uint64_t v96;

  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v94[8] = *(_OWORD *)a3;
  *(_OWORD *)&v94[24] = v6;
  *(_OWORD *)&v94[40] = *(_OWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)v94 = a2;
  *(_QWORD *)&v94[56] = v7;
  HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue((uint64_t)v94);
  v9 = HashValue;
  v89 = HashValue;
  v90 = *(_OWORD *)v94;
  v91 = *(_OWORD *)&v94[16];
  v92 = *(_OWORD *)&v94[32];
  v93 = *(_OWORD *)&v94[48];
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = v93;
    v13 = BYTE1(v93);
    v14 = DWORD1(v93);
    v16 = (const void *)*((_QWORD *)&v90 + 1);
    v15 = v90;
    v18 = (const void *)*((_QWORD *)&v91 + 1);
    v17 = v91;
    v20 = *((_QWORD *)&v92 + 1);
    v19 = v92;
    v21 = 1;
    v22 = BYTE8(v93);
    v23 = HashValue & (v11 - 1);
    v24 = *(_QWORD *)(v10 + 8 * v23);
    if (v24 == -8192)
      goto LABEL_5;
    while (v24 != -4096)
    {
      if (v15 == *(_QWORD *)v24
        && v12 == *(unsigned __int8 *)(v24 + 80)
        && v13 == *(unsigned __int8 *)(v24 + 81)
        && v14 == *(_DWORD *)(v24 + 84))
      {
        v26 = *(char *)(v24 + 47);
        if (v26 >= 0)
          v27 = (const void *)(v24 + 24);
        else
          v27 = *(const void **)(v24 + 24);
        v28 = *(_QWORD *)(v24 + 32);
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(v24 + 47);
        if (v17 == v28)
        {
          v81 = v12;
          v79 = v13;
          v77 = v14;
          v73 = v16;
          v75 = v15;
          v83 = v19;
          __n = v17;
          v68 = v20;
          v71 = v18;
          v67 = v22;
          if (!v17)
            goto LABEL_18;
          v29 = memcmp(v16, v27, v17);
          v22 = v67;
          v20 = v68;
          v18 = v71;
          v19 = v83;
          v17 = __n;
          v16 = v73;
          v15 = v75;
          v14 = v77;
          v13 = v79;
          v12 = v81;
          if (!v29)
          {
LABEL_18:
            v30 = *(char *)(v24 + 71);
            if (v30 >= 0)
              v31 = (const void *)(v24 + 48);
            else
              v31 = *(const void **)(v24 + 48);
            v32 = *(_QWORD *)(v24 + 56);
            if (v30 >= 0)
              v32 = *(unsigned __int8 *)(v24 + 71);
            if (v19 == v32)
            {
              if (!v19)
                goto LABEL_27;
              v33 = memcmp(v18, v31, v83);
              v22 = v67;
              v20 = v68;
              v18 = v71;
              v19 = v83;
              v17 = __n;
              v16 = v73;
              v15 = v75;
              v14 = v77;
              v13 = v79;
              v12 = v81;
              if (!v33)
              {
LABEL_27:
                if (v20 == *(_QWORD *)(v24 + 72) && v22 == *(unsigned __int8 *)(v24 + 88))
                {
                  if (v23 == v11)
                    break;
                  return *(_QWORD *)(v10 + 8 * v23);
                }
              }
            }
          }
        }
      }
      do
      {
LABEL_5:
        v25 = v23 + v21++;
        v23 = v25 & (v11 - 1);
        v24 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v24 == -8192);
    }
  }
  v34 = *(_OWORD *)(a3 + 16);
  v87[0] = *(_OWORD *)a3;
  v87[1] = v34;
  v87[2] = *(_OWORD *)(a3 + 32);
  v88 = *(_QWORD *)(a3 + 48);
  v35 = llvm::InlineAsmKeyType::create((llvm::InlineAsmKeyType *)v87, a2);
  v95 = v35;
  v36 = *(_DWORD *)(a1 + 16);
  if (v36)
  {
    v37 = 0;
    v38 = *(_QWORD *)a1;
    v39 = v36 - 1;
    v40 = v93;
    v41 = BYTE1(v93);
    v42 = DWORD1(v93);
    v44 = (const void *)*((_QWORD *)&v90 + 1);
    v43 = v90;
    v45 = (const void *)*((_QWORD *)&v91 + 1);
    v46 = v91;
    v47 = *((_QWORD *)&v92 + 1);
    v48 = v92;
    v49 = 1;
    v50 = BYTE8(v93);
    v51 = v9 & (v36 - 1);
    v52 = (_QWORD *)(*(_QWORD *)a1 + 8 * v51);
    v53 = (_QWORD *)*v52;
    if (*v52 == -8192)
      goto LABEL_33;
    while (v53 != (_QWORD *)-4096)
    {
      if (v43 == *v53
        && v40 == *((unsigned __int8 *)v53 + 80)
        && v41 == *((unsigned __int8 *)v53 + 81)
        && v42 == *((_DWORD *)v53 + 21))
      {
        v56 = *((char *)v53 + 47);
        if (v56 >= 0)
          v57 = v53 + 3;
        else
          v57 = (const void *)v53[3];
        v58 = v53[4];
        if (v56 >= 0)
          v58 = *((unsigned __int8 *)v53 + 47);
        if (v46 == v58)
        {
          __na = v40;
          v82 = v42;
          v84 = v41;
          v78 = v44;
          v80 = v43;
          v74 = v47;
          v76 = v45;
          v72 = v50;
          if (!v46)
            goto LABEL_51;
          v69 = v48;
          v59 = memcmp(v44, v57, v46);
          v50 = v72;
          v47 = v74;
          v45 = v76;
          v48 = v69;
          v44 = v78;
          v43 = v80;
          v42 = v82;
          v41 = v84;
          v40 = __na;
          if (!v59)
          {
LABEL_51:
            v60 = *((char *)v53 + 71);
            if (v60 >= 0)
              v61 = v53 + 6;
            else
              v61 = (const void *)v53[6];
            v62 = v53[7];
            if (v60 >= 0)
              v62 = *((unsigned __int8 *)v53 + 71);
            if (v48 == v62)
            {
              if (!v48)
                goto LABEL_60;
              v70 = v46;
              v63 = v48;
              v64 = memcmp(v45, v61, v48);
              v50 = v72;
              v47 = v74;
              v45 = v76;
              v48 = v63;
              v46 = v70;
              v44 = v78;
              v43 = v80;
              v42 = v82;
              v41 = v84;
              v40 = __na;
              if (!v64)
              {
LABEL_60:
                if (v47 == v53[9] && v50 == *((unsigned __int8 *)v53 + 88))
                  return v35;
              }
            }
          }
        }
      }
      do
      {
LABEL_33:
        if (v37)
          v54 = 0;
        else
          v54 = v53 == (_QWORD *)-8192;
        if (v54)
          v37 = (_QWORD **)v52;
        v55 = v51 + v49++;
        v51 = v55 & v39;
        v52 = (_QWORD *)(v38 + 8 * v51);
        v53 = (_QWORD *)*v52;
      }
      while (*v52 == -8192);
    }
    if (v37)
      v65 = v37;
    else
      v65 = (_QWORD **)v52;
  }
  else
  {
    v65 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketWithLookup<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>> const>(a1, v65, &v95, (uint64_t)&v96, (uint64_t)&v89);
  return v35;
}

uint64_t llvm::InlineAsm::ConstraintInfo::Parse(uint64_t a1, int8x16_t *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  unint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint8x16_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  unint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x8_t *v33;
  unint64_t v34;
  int8x16_t v35;
  int8x8_t v36;
  uint16x8_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t result;
  unsigned int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  size_t v65;
  void *v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  const char *v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  size_t v95;
  char *v96;
  void *v97;
  unint64_t v98;
  __int128 v99;
  char *v100;
  unint64_t v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  __int128 v109;
  char *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  void *__p[2];
  unint64_t v114;

  v4 = a4;
  if (!a3)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v10 = (_BYTE *)(a1 + 40);
    v11 = a1 + 16;
    goto LABEL_36;
  }
  if (a3 < 8)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_14;
  }
  if (a3 >= 0x20)
  {
    v12 = 0uLL;
    v8 = a3 & 0xFFFFFFFFFFFFFFE0;
    v13.i64[0] = 0x7C7C7C7C7C7C7C7CLL;
    v13.i64[1] = 0x7C7C7C7C7C7C7C7CLL;
    v14 = a2 + 1;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    v16 = a3 & 0xFFFFFFFFFFFFFFE0;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = (uint8x16_t)vceqq_s8(v14[-1], v13);
      v25 = vmovl_u8(*(uint8x8_t *)v24.i8);
      v26 = vmovl_high_u8(v24);
      v27 = (uint8x16_t)vceqq_s8(*v14, v13);
      v28 = vmovl_u8(*(uint8x8_t *)v27.i8);
      v29 = vmovl_high_u8(v27);
      v19 = vaddq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v26), v15));
      v18 = vaddq_s32(v18, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v26.i8), v15));
      v17 = vaddq_s32(v17, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v25), v15));
      v12 = vaddq_s32(v12, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v25.i8), v15));
      v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v29), v15));
      v22 = vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8), v15));
      v21 = vaddq_s32(v21, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v15));
      v20 = vaddq_s32(v20, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v15));
      v14 += 2;
      v16 -= 32;
    }
    while (v16);
    v9 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v20, v12), vaddq_s32(v22, v18)), vaddq_s32(vaddq_s32(v21, v17), vaddq_s32(v23, v19))));
    if (a3 == v8)
      goto LABEL_18;
    if ((a3 & 0x18) == 0)
      goto LABEL_14;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v30 = v8;
  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v31 = 0uLL;
  v32 = (int32x4_t)v9;
  v33 = (int8x8_t *)&a2->i8[v30];
  v34 = v30 - (a3 & 0xFFFFFFFFFFFFFFF8);
  v35.i64[0] = 0x100000001;
  v35.i64[1] = 0x100000001;
  do
  {
    v36 = *v33++;
    v37 = vmovl_u8((uint8x8_t)vceq_s8(v36, (int8x8_t)0x7C7C7C7C7C7C7C7CLL));
    v31 = vaddq_s32(v31, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v37), v35));
    v32 = vaddq_s32(v32, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8), v35));
    v34 += 8;
  }
  while (v34);
  v9 = vaddvq_s32(vaddq_s32(v32, v31));
  if (a3 != v8)
  {
LABEL_14:
    v38 = a3 - v8;
    v39 = &a2->u8[v8];
    do
    {
      v40 = *v39++;
      if (v40 == 124)
        ++v9;
      --v38;
    }
    while (v38);
  }
LABEL_18:
  v41 = v9 + 1;
  *(_BYTE *)(a1 + 40) = v41 > 1;
  v10 = (_BYTE *)(a1 + 40);
  if (v41 < 2)
  {
    v11 = a1 + 16;
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 56);
    v44 = (_QWORD *)(a1 + 48);
    v45 = (v43 - v42) >> 5;
    if (v41 <= v45)
    {
      if (v41 < v45)
      {
        v47 = v42 + 32 * v41;
        while (v43 != v47)
        {
          v49 = *(_QWORD *)(v43 - 24);
          if (v49)
          {
            v50 = *(_QWORD *)(v43 - 16);
            v48 = *(void **)(v43 - 24);
            if (v50 != v49)
            {
              do
              {
                if (*(char *)(v50 - 1) < 0)
                  operator delete(*(void **)(v50 - 24));
                v50 -= 24;
              }
              while (v50 != v49);
              v48 = *(void **)(v43 - 24);
            }
            *(_QWORD *)(v43 - 16) = v49;
            operator delete(v48);
          }
          v43 -= 32;
        }
        *(_QWORD *)(a1 + 56) = v47;
        v4 = a4;
      }
    }
    else
    {
      std::vector<llvm::InlineAsm::SubConstraintInfo>::__append((void **)(a1 + 48), v41 - v45);
    }
    v11 = *v44 + 8;
  }
LABEL_36:
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v51 = a2->u8[0];
  if (v51 == 33)
  {
    v52 = 3;
LABEL_44:
    v53 = &a2->u8[1];
    *(_DWORD *)a1 = v52;
    goto LABEL_45;
  }
  if (v51 == 61)
  {
    v52 = 1;
    goto LABEL_44;
  }
  if (v51 != 126)
  {
    v52 = 0;
    v53 = (unsigned __int8 *)a2;
    if (v51 != 42)
      goto LABEL_47;
LABEL_46:
    *(_BYTE *)(a1 + 13) = 1;
    ++v53;
    goto LABEL_47;
  }
  v52 = 2;
  *(_DWORD *)a1 = 2;
  v53 = &a2->u8[1];
  if (a3 == 1)
  {
LABEL_45:
    if (*v53 != 42)
      goto LABEL_47;
    goto LABEL_46;
  }
  if (*v53 != 123)
    return 1;
  v52 = 2;
LABEL_47:
  v54 = &a2->u8[a3];
  if (v53 != (unsigned __int8 *)&a2->i8[a3])
  {
    if (v52 == 1)
    {
      v55 = 0;
      v56 = 0;
      while (2)
      {
        result = 1;
        switch(*v53)
        {
          case '#':
          case '*':
            return result;
          case '%':
            v58 = (_BYTE *)(a1 + 12);
            v57 = v55;
            if ((_DWORD)v56)
              return result;
            goto LABEL_51;
          case '&':
            v57 = 1;
            v58 = (_BYTE *)(a1 + 4);
            result = v56;
            if ((_DWORD)v55)
              return 1;
LABEL_51:
            *v58 = 1;
            ++v53;
            v55 = v57;
            v56 = result;
            if (v53 != v54)
              continue;
            return 1;
          default:
            goto LABEL_60;
        }
      }
    }
    result = 1;
    switch(*v53)
    {
      case '#':
      case '&':
      case '*':
        return result;
      case '%':
        if (v52 != 2)
        {
          *(_BYTE *)(a1 + 12) = 1;
          if (++v53 != v54)
          {
            v60 = (char)*v53 - 35;
            if (v60 >= 8 || ((0x8Du >> v60) & 1) == 0)
              goto LABEL_60;
          }
        }
        return result;
      default:
LABEL_60:
        if (v53 == v54)
          return 0;
        v111 = &a2->u8[a3];
        v112 = 0;
        break;
    }
    while (1)
    {
      v61 = *v53;
      if ((_DWORD)v61 == 123)
      {
        v62 = (unsigned __int8 *)memchr(v53 + 1, 125, v54 - (v53 + 1));
        if (v62)
          v63 = v62;
        else
          v63 = v54;
        if (v63 == v54)
          return 1;
        v64 = v63 + 1;
        v65 = v63 + 1 - v53;
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_150;
        if (v65 >= 0x17)
        {
          v70 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v70 = v65 | 7;
          v71 = v4;
          v72 = v70 + 1;
          v66 = operator new(v70 + 1);
          v73 = v72 | 0x8000000000000000;
          v4 = v71;
          __p[1] = (void *)v65;
          v114 = v73;
          __p[0] = v66;
        }
        else
        {
          HIBYTE(v114) = (_BYTE)v63 + 1 - (_BYTE)v53;
          v66 = __p;
          if (v64 == v53)
          {
            *((_BYTE *)__p + v65) = 0;
            v67 = *(_QWORD *)(v11 + 8);
            if (v67 < *(_QWORD *)(v11 + 16))
            {
LABEL_75:
              v68 = *(_OWORD *)__p;
              *(_QWORD *)(v67 + 16) = v114;
              *(_OWORD *)v67 = v68;
              __p[1] = 0;
              v114 = 0;
              __p[0] = 0;
              *(_QWORD *)(v11 + 8) = v67 + 24;
              if ((SHIBYTE(v114) & 0x80000000) == 0)
                goto LABEL_65;
              goto LABEL_64;
            }
LABEL_91:
            *(_QWORD *)(v11 + 8) = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v11, (uint64_t)__p);
            if ((SHIBYTE(v114) & 0x80000000) == 0)
              goto LABEL_65;
LABEL_64:
            operator delete(__p[0]);
            goto LABEL_65;
          }
        }
        memmove(v66, v53, v65);
        *((_BYTE *)v66 + v65) = 0;
        v67 = *(_QWORD *)(v11 + 8);
        if (v67 < *(_QWORD *)(v11 + 16))
          goto LABEL_75;
        goto LABEL_91;
      }
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v61 + 60) & 0x400) != 0)
        break;
      if ((_DWORD)v61 == 64)
      {
        v94 = v53[1];
        v95 = v94 - 48;
        if ((unint64_t)(v94 - 48) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_150;
        v96 = (char *)(v53 + 2);
        if (v95 >= 0x17)
        {
          v104 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v95 | 7) != 0x17)
            v104 = v95 | 7;
          v105 = v4;
          v106 = v104 + 1;
          v97 = operator new(v104 + 1);
          v107 = v106 | 0x8000000000000000;
          v4 = v105;
          __p[1] = (void *)v95;
          v114 = v107;
          __p[0] = v97;
        }
        else
        {
          HIBYTE(v114) = v94 - 48;
          v97 = __p;
          if (v94 == 48)
            goto LABEL_133;
        }
        memmove(v97, v96, v95);
LABEL_133:
        *((_BYTE *)v97 + v95) = 0;
        v108 = *(_QWORD *)(v11 + 8);
        if (v108 >= *(_QWORD *)(v11 + 16))
        {
          v110 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v11, (uint64_t)__p);
        }
        else
        {
          v109 = *(_OWORD *)__p;
          *(_QWORD *)(v108 + 16) = v114;
          *(_OWORD *)v108 = v109;
          __p[1] = 0;
          v114 = 0;
          __p[0] = 0;
          v110 = (char *)(v108 + 24);
        }
        *(_QWORD *)(v11 + 8) = v110;
        if (SHIBYTE(v114) < 0)
          operator delete(__p[0]);
        v64 = (unsigned __int8 *)&v96[v95];
        goto LABEL_65;
      }
      if ((_DWORD)v61 == 94)
      {
        HIBYTE(v114) = 2;
        LOWORD(__p[0]) = *(_WORD *)(v53 + 1);
        BYTE2(__p[0]) = 0;
        v98 = *(_QWORD *)(v11 + 8);
        if (v98 >= *(_QWORD *)(v11 + 16))
        {
          v100 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v11, (uint64_t)__p);
        }
        else
        {
          v99 = *(_OWORD *)__p;
          *(_QWORD *)(v98 + 16) = v114;
          *(_OWORD *)v98 = v99;
          __p[1] = 0;
          v114 = 0;
          __p[0] = 0;
          v100 = (char *)(v98 + 24);
        }
        *(_QWORD *)(v11 + 8) = v100;
        if (SHIBYTE(v114) < 0)
          operator delete(__p[0]);
        v64 = v53 + 3;
      }
      else
      {
        if ((_DWORD)v61 == 124)
        {
          v69 = *(_QWORD *)(a1 + 48);
          v112 = (v112 + 1);
          v11 = v69 + 32 * v112 + 8;
        }
        else
        {
          HIBYTE(v114) = 1;
          LOWORD(__p[0]) = *v53;
          v101 = *(_QWORD *)(v11 + 8);
          if (v101 >= *(_QWORD *)(v11 + 16))
          {
            v103 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v11, (uint64_t)__p);
          }
          else
          {
            v102 = *(_OWORD *)__p;
            *(_QWORD *)(v101 + 16) = v114;
            *(_OWORD *)v101 = v102;
            __p[1] = 0;
            v114 = 0;
            __p[0] = 0;
            v103 = (char *)(v101 + 24);
          }
          *(_QWORD *)(v11 + 8) = v103;
          if (SHIBYTE(v114) < 0)
            operator delete(__p[0]);
        }
        v64 = v53 + 1;
      }
LABEL_65:
      result = 0;
      v53 = v64;
      if (v64 == v54)
        return result;
    }
    if (v53 == v54)
    {
      v64 = v54;
    }
    else
    {
      v64 = v53;
      while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v64 + 60) & 0x400) != 0)
      {
        if (++v64 == v54)
        {
          v64 = v111;
          break;
        }
      }
    }
    v74 = v64 - v53;
    if ((unint64_t)(v64 - v53) > 0x7FFFFFFFFFFFFFF7)
LABEL_150:
      abort();
    if (v74 >= 0x17)
    {
      v78 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17)
        v78 = v74 | 7;
      v79 = v4;
      v80 = v78 + 1;
      v75 = operator new(v78 + 1);
      v81 = v80 | 0x8000000000000000;
      v4 = v79;
      __p[1] = (void *)(v64 - v53);
      v114 = v81;
      __p[0] = v75;
    }
    else
    {
      HIBYTE(v114) = (_BYTE)v64 - (_BYTE)v53;
      v75 = __p;
      if (v64 == v53)
      {
        *((_BYTE *)__p + v74) = 0;
        v76 = *(_QWORD *)(v11 + 8);
        if (v76 < *(_QWORD *)(v11 + 16))
          goto LABEL_98;
        goto LABEL_104;
      }
    }
    memmove(v75, v53, v64 - v53);
    *((_BYTE *)v75 + v74) = 0;
    v76 = *(_QWORD *)(v11 + 8);
    if (v76 < *(_QWORD *)(v11 + 16))
    {
LABEL_98:
      v77 = *(_OWORD *)__p;
      *(_QWORD *)(v76 + 16) = v114;
      *(_OWORD *)v76 = v77;
      __p[1] = 0;
      v114 = 0;
      __p[0] = 0;
      *(_QWORD *)(v11 + 8) = v76 + 24;
      if (SHIBYTE(v114) < 0)
        goto LABEL_105;
      goto LABEL_106;
    }
LABEL_104:
    *(_QWORD *)(v11 + 8) = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v11, (uint64_t)__p);
    if (SHIBYTE(v114) < 0)
LABEL_105:
      operator delete(__p[0]);
LABEL_106:
    v82 = *(_QWORD *)(v11 + 8);
    v83 = (const char *)(v82 - 24);
    if (*(char *)(v82 - 1) < 0)
      v83 = *(const char **)v83;
    v84 = atoi(v83);
    v85 = *v4;
    v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 4);
    if (v86 <= v84 || *(_DWORD *)(v85 + 80 * v84) != 1 || *(_DWORD *)a1)
      return 1;
    if (*v10)
    {
      v88 = (uint64_t *)(v85 + 80 * v84 + 48);
      v87 = *v88;
      if (v112 >= (unint64_t)((v88[1] - *v88) >> 5))
        return 1;
      v89 = (_DWORD *)(v87 + 32 * v112);
      if (*v89 != -1)
        return 1;
    }
    else
    {
      v90 = v85 + 80 * v84;
      v92 = *(int *)(v90 + 8);
      v89 = (_DWORD *)(v90 + 8);
      v91 = v92;
      if ((_DWORD)v92 != -1 && v86 != v91)
        return 1;
    }
    *v89 = v86;
    goto LABEL_65;
  }
  return 1;
}

void llvm::InlineAsm::ParseConstraints(int8x16_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int8x16_t *v3;
  int8x16_t *v5;
  void *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int v9;
  char *v10;
  char *v11;
  char v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  _QWORD *v31;
  int8x16_t *v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  void *__p;
  void **v37;
  uint64_t v38;
  char v39;
  void *v40;
  char *v41;
  uint64_t v42;
  int v43;

  v3 = a1;
  a3[2] = 0;
  v31 = a3 + 2;
  *a3 = 0;
  a3[1] = 0;
  v5 = (int8x16_t *)((char *)a1 + a2);
  v32 = (int8x16_t *)((char *)a1 + a2);
  while (v3 != v5)
  {
    LODWORD(v33) = 0;
    BYTE4(v33) = 0;
    v34 = -1;
    v35 = 0;
    v37 = 0;
    v38 = 0;
    __p = 0;
    v39 = 0;
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v43 = 0;
    v7 = (int8x16_t *)memchr(v3, 44, (char *)v5 - (char *)v3);
    if (v7)
      v8 = v7;
    else
      v8 = v5;
    if (v8 == v3)
    {
      v10 = (char *)a3[1];
LABEL_16:
      v13 = (char *)*a3;
      while (v10 != v13)
      {
        v15 = *((_QWORD *)v10 - 4);
        if (v15)
        {
          v16 = *((_QWORD *)v10 - 3);
          v17 = (void *)*((_QWORD *)v10 - 4);
          if (v16 != v15)
          {
            do
            {
              v19 = *(_QWORD *)(v16 - 24);
              if (v19)
              {
                v20 = *(_QWORD *)(v16 - 16);
                v18 = *(void **)(v16 - 24);
                if (v20 != v19)
                {
                  do
                  {
                    if (*(char *)(v20 - 1) < 0)
                      operator delete(*(void **)(v20 - 24));
                    v20 -= 24;
                  }
                  while (v20 != v19);
                  v18 = *(void **)(v16 - 24);
                }
                *(_QWORD *)(v16 - 16) = v19;
                operator delete(v18);
              }
              v16 -= 32;
            }
            while (v16 != v15);
            v17 = (void *)*((_QWORD *)v10 - 4);
          }
          *((_QWORD *)v10 - 3) = v15;
          operator delete(v17);
        }
        v21 = *((_QWORD *)v10 - 8);
        if (v21)
        {
          v22 = *((_QWORD *)v10 - 7);
          v14 = (void *)*((_QWORD *)v10 - 8);
          if (v22 != v21)
          {
            do
            {
              if (*(char *)(v22 - 1) < 0)
                operator delete(*(void **)(v22 - 24));
              v22 -= 24;
            }
            while (v22 != v21);
            v14 = (void *)*((_QWORD *)v10 - 8);
          }
          *((_QWORD *)v10 - 7) = v21;
          operator delete(v14);
        }
        v10 -= 80;
      }
LABEL_46:
      v12 = 0;
      a3[1] = v13;
      goto LABEL_47;
    }
    v9 = llvm::InlineAsm::ConstraintInfo::Parse((uint64_t)&v33, v3, (char *)v8 - (char *)v3, a3);
    v10 = (char *)a3[1];
    if (v9)
      goto LABEL_16;
    if ((unint64_t)v10 >= *v31)
    {
      v11 = std::vector<llvm::InlineAsm::ConstraintInfo>::__push_back_slow_path<llvm::InlineAsm::ConstraintInfo const&>((void **)a3, &v33);
      a3[1] = v11;
      if (v8 == v5)
      {
LABEL_42:
        v12 = 1;
        v3 = v5;
        goto LABEL_47;
      }
    }
    else
    {
      std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>((uint64_t)v31, (_QWORD *)a3[1], &v33);
      v11 = v10 + 80;
      a3[1] = v10 + 80;
      if (v8 == v5)
        goto LABEL_42;
    }
    v3 = (int8x16_t *)&v8->i8[1];
    if (&v8->i8[1] == (__int8 *)v5)
    {
      v13 = (char *)*a3;
      while (v11 != v13)
        llvm::InlineAsm::ConstraintInfo::~ConstraintInfo((llvm::InlineAsm::ConstraintInfo *)(v11 - 80));
      v3 = v32;
      goto LABEL_46;
    }
    v12 = 1;
LABEL_47:
    v23 = (char *)v40;
    if (v40)
    {
      v24 = v41;
      v25 = v40;
      if (v41 != v40)
      {
        do
        {
          v27 = *((_QWORD *)v24 - 3);
          if (v27)
          {
            v28 = *((_QWORD *)v24 - 2);
            v26 = (void *)*((_QWORD *)v24 - 3);
            if (v28 != v27)
            {
              do
              {
                if (*(char *)(v28 - 1) < 0)
                  operator delete(*(void **)(v28 - 24));
                v28 -= 24;
              }
              while (v28 != v27);
              v26 = (void *)*((_QWORD *)v24 - 3);
            }
            *((_QWORD *)v24 - 2) = v27;
            operator delete(v26);
          }
          v24 -= 32;
        }
        while (v24 != v23);
        v25 = v40;
      }
      v41 = v23;
      operator delete(v25);
    }
    v29 = (void **)__p;
    v5 = v32;
    if (__p)
    {
      v30 = v37;
      v6 = __p;
      if (v37 != __p)
      {
        do
        {
          if (*((char *)v30 - 1) < 0)
            operator delete(*(v30 - 3));
          v30 -= 3;
        }
        while (v30 != v29);
        v6 = __p;
      }
      v37 = v29;
      operator delete(v6);
    }
    if ((v12 & 1) == 0)
      return;
  }
}

void llvm::InlineAsm::ConstraintInfo::~ConstraintInfo(llvm::InlineAsm::ConstraintInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              if (*(char *)(v7 - 1) < 0)
                operator delete(*(void **)(v7 - 24));
              v7 -= 24;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v9 = *((_QWORD *)this + 3);
    v10 = (void *)*((_QWORD *)this + 2);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v8;
    operator delete(v10);
  }
}

unint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  {
    v6 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v6 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v6;
  }
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v10 = llvm::hash_value(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)&v10, 0, (_QWORD *)&v10 + 1, (char *)&v14, a1 + 24, (char *)(a1 + 48), (char *)(a1 + 49), (int *)(a1 + 52), (uint64_t *)(a1 + 40), (char *)(a1 + 56));
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  if ((v4 & 1) == 0)
  {
    v7 = v3;
    v3 = v7;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      v3 = v7;
    }
  }
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v10 = *(_QWORD *)a1;
  DWORD2(v10) = v3;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v10, 0, (char *)((unint64_t)&v10 | 0xC), (char *)&v14);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t a5, char *a6, char *a7, int *a8, uint64_t *a9, char *a10)
{
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v24 = a2;
  v16 = llvm::hash_value(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, a3, (unint64_t)a4, v16);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a6);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a7);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a8);
  v28 = v27;
  v21 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v28, v20, (unint64_t)a4, *a9);
  v29 = v28;
  v22 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(a1, (uint64_t *)&v29, v21, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v29, v22, a4);
}

BOOL llvm::InlineAsmKeyType::operator==(uint64_t a1, uint64_t a2)
{
  size_t v4;
  int v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  int v9;
  const void *v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 81)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 84))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(char *)(a2 + 47);
  if (v5 >= 0)
    v6 = (const void *)(a2 + 24);
  else
    v6 = *(const void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (v5 >= 0)
    v7 = v5;
  if (v4 != v7 || v4 && memcmp(*(const void **)a1, v6, v4))
    return 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(char *)(a2 + 71);
  if (v9 >= 0)
    v10 = (const void *)(a2 + 48);
  else
    v10 = *(const void **)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 71);
  return v8 == v11
      && (!v8 || !memcmp(*(const void **)(a1 + 16), v10, v8))
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 88);
}

uint64_t llvm::InlineAsmKeyType::create(llvm::InlineAsmKeyType *this, llvm::PointerType *a2)
{
  void *v3;
  size_t v4;
  uint64_t v5;
  llvm::PointerType **v6;
  const void *v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;
  char v19;
  llvm::Type *v20;
  std::string *v21;
  int v22;
  std::string *v23;
  void *__p[2];
  unint64_t v26;
  __int128 __dst;
  unint64_t v28;

  v3 = operator new(0x60uLL);
  v4 = *((_QWORD *)this + 1);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
LABEL_25:
    abort();
  v5 = (uint64_t)v3;
  v6 = (llvm::PointerType **)*((_QWORD *)this + 4);
  v7 = *(const void **)this;
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v28 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v28) = *((_QWORD *)this + 1);
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v7, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v11 = *((_QWORD *)this + 3);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_25;
  v12 = (const void *)*((_QWORD *)this + 2);
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = (void *)v11;
    v26 = v15 | 0x8000000000000000;
    __p[0] = v13;
    goto LABEL_16;
  }
  HIBYTE(v26) = *((_QWORD *)this + 3);
  v13 = __p;
  if (v11)
LABEL_16:
    memmove(v13, v12, v11);
  *((_BYTE *)v13 + v11) = 0;
  v16 = *((_BYTE *)this + 40);
  v17 = *((_BYTE *)this + 41);
  v18 = *((_DWORD *)this + 11);
  v19 = *((_BYTE *)this + 48);
  v20 = (llvm::Type *)llvm::PointerType::get(v6, 0);
  llvm::Value::Value(v5, v20, 24);
  v21 = (std::string *)(v5 + 24);
  v22 = SHIBYTE(v28);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = __dst;
    *(_QWORD *)(v5 + 40) = v28;
    v23 = (std::string *)(v5 + 48);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    *(_QWORD *)(v5 + 72) = v6;
    *(_BYTE *)(v5 + 80) = v16;
    *(_BYTE *)(v5 + 81) = v17;
    *(_DWORD *)(v5 + 84) = v18;
    *(_BYTE *)(v5 + 88) = v19;
    operator delete(__p[0]);
    if ((v22 & 0x80000000) == 0)
      return v5;
    goto LABEL_20;
  }
  std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  v23 = (std::string *)(v5 + 48);
  if (SHIBYTE(v26) < 0)
    goto LABEL_23;
LABEL_19:
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v23->__r_.__value_.__r.__words[2] = v26;
  *(_QWORD *)(v5 + 72) = v6;
  *(_BYTE *)(v5 + 80) = v16;
  *(_BYTE *)(v5 + 81) = v17;
  *(_DWORD *)(v5 + 84) = v18;
  *(_BYTE *)(v5 + 88) = v19;
  if (v22 < 0)
LABEL_20:
    operator delete((void *)__dst);
  return v5;
}

_QWORD **llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketWithLookup<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>> const>(uint64_t a1, _QWORD **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  unsigned int v10;
  int v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD **v28;

  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 12) > v10 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(a1, v10);
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    v13 = 0;
    v14 = *(_QWORD *)a1;
    v15 = a5 + 16;
    v16 = v12 - 1;
    v17 = 1;
    v18 = *(_DWORD *)a5 & v16;
    a2 = (_QWORD **)(*(_QWORD *)a1 + 8 * v18);
    v19 = *a2;
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_9;
LABEL_10:
    while (v19 != (_QWORD *)-4096)
    {
      while (1)
      {
        if (v13)
          v20 = 0;
        else
          v20 = v19 == (_QWORD *)-8192;
        if (v20)
          v13 = a2;
        v21 = v18 + v17++;
        v18 = v21 & v16;
        a2 = (_QWORD **)(v14 + 8 * (v21 & v16));
        v19 = *a2;
        if (((unint64_t)*a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
          break;
LABEL_9:
        if (*(_QWORD *)(a5 + 8) != *v19)
          goto LABEL_10;
        v26 = v17;
        v27 = v18;
        v25 = v16;
        v23 = v13;
        v24 = v14;
        v28 = a2;
        v22 = v15;
        if (llvm::InlineAsmKeyType::operator==(v15, (uint64_t)v19))
        {
          a2 = v28;
          goto LABEL_3;
        }
        a2 = v28;
        v19 = *v28;
        v15 = v22;
        v13 = v23;
        v14 = v24;
        v16 = v25;
        v17 = v26;
        v18 = v27;
        if (*v28 == (_QWORD *)-4096)
          goto LABEL_20;
      }
    }
LABEL_20:
    if (v13)
      a2 = v13;
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != (_QWORD *)-4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = (_QWORD *)*a3;
  return a2;
}

int64x2_t *llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t **v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t **)v4;
      do
      {
        if (((unint64_t)*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<llvm::InlineAsm *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<llvm::InlineAsm *>(uint64_t *a1, uint64_t **a2, _QWORD *a3)
{
  int v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  int HashValue;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD v36[6];
  __int16 v37;
  int v38;
  char v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[33];

  v42[32] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a2;
    v40 = v42;
    v41 = 0x2000000000;
    v7 = *v6;
    LODWORD(v8) = *((char *)v6 + 47);
    v9 = v6[4];
    LODWORD(v10) = *((char *)v6 + 71);
    v11 = v6;
    v12 = v6[7];
    v13 = v6[9];
    v14 = *((_WORD *)v6 + 40);
    v15 = *((_DWORD *)v6 + 21);
    v16 = *((_BYTE *)v6 + 88);
    v19 = (uint64_t *)v6[3];
    v18 = v6 + 3;
    v17 = v19;
    v20 = (int)v8 < 0;
    if ((int)v8 < 0)
      v18 = v17;
    v8 = v8;
    if (v20)
      v8 = v9;
    v23 = (uint64_t *)v11[6];
    v22 = v11 + 6;
    v21 = v23;
    v24 = (int)v10 < 0;
    if ((int)v10 >= 0)
      v21 = v22;
    v10 = v10;
    if (v24)
      v10 = v12;
    v25 = *a1;
    v36[0] = v7;
    v36[1] = v18;
    v36[2] = v8;
    v36[3] = v21;
    v36[4] = v10;
    v36[5] = v13;
    v37 = v14;
    v38 = v15;
    v39 = v16;
    HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue((uint64_t)v36);
    if (v40 != v42)
      free(v40);
    v27 = v4 - 1;
    v28 = HashValue & (v4 - 1);
    v29 = (_QWORD *)(v25 + 8 * v28);
    v30 = *v29;
    if (*a2 == (uint64_t *)*v29)
    {
      result = 1;
    }
    else
    {
      v32 = 0;
      v33 = 1;
      result = 1;
      while (v30 != -4096)
      {
        if (v32)
          v34 = 0;
        else
          v34 = v30 == -8192;
        if (v34)
          v32 = v29;
        v35 = v28 + v33++;
        v28 = v35 & v27;
        v29 = (_QWORD *)(v25 + 8 * (v35 & v27));
        v30 = *v29;
        if (*a2 == (uint64_t *)*v29)
          goto LABEL_15;
      }
      result = 0;
      if (v32)
        v29 = v32;
    }
  }
  else
  {
    v29 = 0;
    result = 0;
  }
LABEL_15:
  *a3 = v29;
  return result;
}

void std::vector<llvm::InlineAsm::SubConstraintInfo>::__append(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1[1];
  v5 = a1[2];
  if (a2 <= (v5 - (_BYTE *)v4) >> 5)
  {
    if (a2)
    {
      v11 = &v4[4 * a2];
      do
      {
        *v4 = 0xFFFFFFFFLL;
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = 0;
        v4 += 4;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = ((char *)v4 - (_BYTE *)*a1) >> 5;
    v7 = v6 + a2;
    if ((v6 + a2) >> 59)
      abort();
    v8 = v5 - (_BYTE *)*a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[32 * v6];
    v13 = &v12[32 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0xFFFFFFFFLL;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      v14 += 32;
    }
    while (v14 != v13);
    v15 = &v10[32 * v9];
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18];
        v20 = &v17[v18];
        *((_DWORD *)v19 - 8) = *(_DWORD *)&v17[v18 - 32];
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
        *((_QWORD *)v19 - 1) = *(_QWORD *)&v17[v18 - 8];
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v20 - 1) = 0;
        v18 -= 32;
      }
      while (&v17[v18] != v16);
      v17 = (char *)*a1;
      v21 = (char *)a1[1];
      *a1 = &v12[v18];
      a1[1] = v13;
      a1[2] = v15;
      while (v21 != v17)
      {
        v23 = *((_QWORD *)v21 - 3);
        if (v23)
        {
          v24 = *((_QWORD *)v21 - 2);
          v22 = (void *)*((_QWORD *)v21 - 3);
          if (v24 != v23)
          {
            do
            {
              if (*(char *)(v24 - 1) < 0)
                operator delete(*(void **)(v24 - 24));
              v24 -= 24;
            }
            while (v24 != v23);
            v22 = (void *)*((_QWORD *)v21 - 3);
          }
          *((_QWORD *)v21 - 2) = v23;
          operator delete(v22);
        }
        v21 -= 32;
      }
    }
    if (v17)
      operator delete(v17);
  }
}

char *std::vector<llvm::InlineAsm::ConstraintInfo>::__push_back_slow_path<llvm::InlineAsm::ConstraintInfo const&>(void **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = (char *)operator new(80 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[80 * v2];
  v10 = &v8[80 * v7];
  std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(v6, v9, a2);
  v11 = v9 + 80;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13)
      return v9 + 80;
    goto LABEL_17;
  }
  v14 = 0;
  do
  {
    v15 = &v9[v14];
    v16 = &v13[v14];
    v17 = *(_QWORD *)&v13[v14 - 80];
    *(_QWORD *)(v15 - 74) = *(_QWORD *)&v13[v14 - 74];
    *((_QWORD *)v15 - 10) = v17;
    *((_QWORD *)v15 - 7) = 0;
    *((_QWORD *)v15 - 6) = 0;
    *((_QWORD *)v15 - 8) = 0;
    *((_OWORD *)v15 - 4) = *(_OWORD *)&v13[v14 - 64];
    *((_QWORD *)v15 - 6) = *(_QWORD *)&v13[v14 - 48];
    *((_QWORD *)v16 - 7) = 0;
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 8) = 0;
    *(v15 - 40) = v13[v14 - 40];
    *((_QWORD *)v15 - 3) = 0;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 4) = 0;
    *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
    *((_QWORD *)v15 - 2) = *(_QWORD *)&v13[v14 - 16];
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *((_QWORD *)v16 - 4) = 0;
    *((_DWORD *)v15 - 2) = *(_DWORD *)&v13[v14 - 8];
    v14 -= 80;
  }
  while (&v13[v14] != v12);
  v13 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  while (v18 != v13)
    llvm::InlineAsm::ConstraintInfo::~ConstraintInfo((llvm::InlineAsm::ConstraintInfo *)(v18 - 80));
  if (v13)
LABEL_17:
    operator delete(v13);
  return v9 + 80;
}

void std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  __int128 v14;
  char v15;
  _QWORD *v16;

  v5 = *a3;
  *(_QWORD *)((char *)a2 + 6) = *(uint64_t *)((char *)a3 + 6);
  *a2 = v5;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  v6 = a3[2];
  v7 = a3[3];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v9 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v10 = (char *)operator new(v8);
    v11 = 0;
    a2[2] = v10;
    a2[3] = v10;
    a2[4] = &v10[24 * v9];
    do
    {
      while (1)
      {
        v12 = (__int128 *)(v6 + v11);
        v13 = (std::string *)&v10[v11];
        if ((*(char *)(v6 + v11 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        v11 += 24;
        if (v6 + v11 == v7)
          goto LABEL_7;
      }
      v14 = *v12;
      v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      v11 += 24;
    }
    while (v6 + v11 != v7);
LABEL_7:
    a2[3] = &v10[v11];
  }
  v15 = *((_BYTE *)a3 + 40);
  a2[6] = 0;
  v16 = a2 + 6;
  *((_BYTE *)v16 - 8) = v15;
  v16[1] = 0;
  v16[2] = 0;
  std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(v16, a3[6], a3[7], (a3[7] - a3[6]) >> 5);
  *((_DWORD *)v16 + 6) = *((_DWORD *)a3 + 18);
}

void std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;

  if (a4)
  {
    if (a4 >> 59)
LABEL_16:
      abort();
    v7 = 4 * a4;
    v8 = operator new(32 * a4);
    *a1 = v8;
    a1[1] = v8;
    v18 = a1;
    for (a1[2] = &v8[v7]; a2 != a3; v8 += 4)
    {
      *(_DWORD *)v8 = *(_DWORD *)a2;
      v8[2] = 0;
      v8[3] = 0;
      v8[1] = 0;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      v11 = v10 - v9;
      if (v10 != v9)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
        if (v12 >= 0xAAAAAAAAAAAAAABLL)
          goto LABEL_16;
        v13 = (char *)operator new(v11);
        v14 = 0;
        v8[1] = v13;
        v8[2] = v13;
        v8[3] = &v13[24 * v12];
        do
        {
          while (1)
          {
            v15 = (__int128 *)(v9 + v14);
            v16 = (std::string *)&v13[v14];
            if ((*(char *)(v9 + v14 + 23) & 0x80000000) == 0)
              break;
            std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            v14 += 24;
            if (v9 + v14 == v10)
              goto LABEL_5;
          }
          v17 = *v15;
          v16->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          v14 += 24;
        }
        while (v9 + v14 != v10);
LABEL_5:
        v8[2] = &v13[v14];
      }
      a2 += 32;
    }
    v18[1] = v8;
  }
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, llvm::Instruction *a6)
{
  uint64_t v9;

  v9 = llvm::Value::Value((uint64_t)this, a2, a3 + 28);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v9 + 20) & 0xF8000000 | a5 & 0x7FFFFFF;
  *(_QWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_DWORD *)(v9 + 56) = 0;
  if (a6)
    llvm::Instruction::insertBefore(this, *((_QWORD *)a6 + 5), (uint64_t ***)a6 + 3);
  return this;
}

char *llvm::Instruction::insertInto(llvm::MCSymbolXCOFF *a1, uint64_t a2, uint64_t ***a3)
{
  llvm::Instruction::insertBefore(a1, a2, a3);
  return (char *)a1 + 24;
}

llvm::Instruction *llvm::Instruction::Instruction(llvm::Instruction *this, llvm::Type *a2, char a3, llvm::Use *a4, int a5, uint64_t ***a6)
{
  uint64_t v9;

  v9 = llvm::Value::Value((uint64_t)this, a2, a3 + 28);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v9 + 20) & 0xF8000000 | a5 & 0x7FFFFFF;
  *(_QWORD *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_DWORD *)(v9 + 56) = 0;
  llvm::Instruction::insertBefore((llvm::MCSymbolXCOFF *)v9, (uint64_t)a6, a6 + 6);
  return this;
}

void llvm::Instruction::~Instruction(llvm::UndefValue **this, llvm::Type *a2)
{
  llvm::Value *v3;
  llvm::Value *v4;
  unsigned __int8 *v5;

  if ((*((_BYTE *)this + 23) & 8) != 0)
  {
    v3 = (llvm::Value *)llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((Value *)this, v3, v4);
  }
  llvm::Instruction::setMetadata((unsigned __int8 **)this, 38, 0);
  v5 = (unsigned __int8 *)this[6];
  if (v5)
    llvm::MetadataTracking::untrack((uint64_t)(this + 6), v5);
  llvm::Value::~Value((llvm::Value *)this, (llvm::Value *)v5);
}

uint64_t llvm::Instruction::getModule(llvm::BasicBlock **this)
{
  return llvm::BasicBlock::getModule(this[5]);
}

uint64_t llvm::Instruction::getFunction(llvm::Instruction *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 64);
}

uint64_t llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
  uint64_t v2;
  llvm::DPMarker *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v2 + 40))
  {
    v3 = (llvm::DPMarker *)*((_QWORD *)this + 8);
    if (v3)
    {
      llvm::DPMarker::removeMarker(v3);
      v2 = *((_QWORD *)this + 5);
    }
  }
  v4 = *((_QWORD *)this + 4);
  llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::removeNodeFromList(v2 + 48, this);
  v5 = *((_QWORD *)this + 3);
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  *v6 = v5;
  *(_QWORD *)(v5 + 8) = v6;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  llvm::Value::deleteValue(this);
  return v4;
}

uint64_t ***llvm::Instruction::insertBefore(llvm::Instruction *this, llvm::Instruction *a2)
{
  return llvm::Instruction::insertBefore(this, *((_QWORD *)a2 + 5), (uint64_t ***)a2 + 3);
}

uint64_t ***llvm::Instruction::insertBefore(llvm::MCSymbolXCOFF *this, uint64_t a2, uint64_t ***a3)
{
  uint64_t ***result;
  uint64_t **v7;
  void *Marker;

  result = (uint64_t ***)llvm::SymbolTableListTraits<llvm::Instruction,llvm::ilist_iterator_bits<true>>::addNodeToList(a2 + 48, this);
  v7 = *a3;
  *((_QWORD *)this + 3) = *a3;
  *((_QWORD *)this + 4) = a3;
  v7[1] = (uint64_t *)((char *)this + 24);
  *a3 = (uint64_t **)((char *)this + 24);
  if (*(_BYTE *)(a2 + 40))
  {
    llvm::BasicBlock::createMarker(a2, (uint64_t)this);
    Marker = llvm::BasicBlock::getMarker((uint64_t ***)a2, a3);
    if (!Marker)
      Marker = llvm::BasicBlock::createMarker((uint64_t ***)a2, a3);
    result = (uint64_t ***)llvm::DPMarker::absorbDebugValues(*((_QWORD *)this + 8), (uint64_t)Marker, 0);
    if (*((unsigned __int8 *)this + 16) - 29 <= 0xA)
      return llvm::BasicBlock::flushTerminatorDbgValues(*((uint64_t ****)this + 5));
  }
  return result;
}

void llvm::Instruction::dropDbgValues(llvm::Instruction *this)
{
  llvm::DPMarker *v1;

  v1 = (llvm::DPMarker *)*((_QWORD *)this + 8);
  if (v1)
    llvm::DPMarker::dropDPValues(v1);
}

BOOL llvm::Instruction::comesBefore(llvm::Instruction *this, const llvm::Instruction *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 5);
  if ((*(__int16 *)(v4 + 18) & 0x80000000) == 0)
    llvm::BasicBlock::renumberInstructions(v4);
  return *((_DWORD *)this + 14) < *((_DWORD *)a2 + 14);
}

uint64_t llvm::Instruction::setHasNoUnsignedWrap(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | v2;
  return this;
}

uint64_t llvm::Instruction::setHasNoSignedWrap(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFB | v2;
  return this;
}

uint64_t llvm::Instruction::hasNonNeg(llvm::Instruction *this)
{
  return (*((unsigned __int8 *)this + 17) >> 1) & 1;
}

uint64_t llvm::Instruction::setFastMathFlags(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) |= 2 * a2;
  return result;
}

uint64_t llvm::Instruction::getFastMathFlags(llvm::Instruction *this)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)this + 17) >> 1;
  if (v1 == 127)
    return 0xFFFFFFFFLL;
  else
    return v1;
}

uint64_t llvm::Instruction::copyFastMathFlags(uint64_t this, const llvm::Instruction *a2)
{
  *(_BYTE *)(this + 17) = *((_BYTE *)a2 + 17) & 0xFE | *(_BYTE *)(this + 17) & 1;
  return this;
}

uint64_t llvm::Instruction::copyIRFlags(uint64_t this, Value *a2, int a3)
{
  llvm::Instruction *v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int impl_low;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;
  unsigned int v22;
  unsigned int v23;
  Value *v24;
  ValueImpl *impl;
  int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  BOOL v37;
  int v38;
  int hasNonNeg;

  v4 = (llvm::Instruction *)this;
  if (a3)
  {
    HIDWORD(v6) = *(unsigned __int8 *)(this + 16) - 41;
    LODWORD(v6) = HIDWORD(v6);
    v5 = v6 >> 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      impl_low = LOBYTE(a2[2].impl);
      if (impl_low < 0x1C)
      {
        if (impl_low != 5)
          goto LABEL_15;
        v11 = WORD1(a2[2].impl) - 13;
      }
      else
      {
        v11 = impl_low - 41;
      }
      HIDWORD(v13) = v11;
      LODWORD(v13) = v11;
      v12 = v13 >> 1;
      v7 = v12 > 6;
      v14 = (1 << v12) & 0x47;
      if (!v7 && v14 != 0)
      {
        v16 = *(_BYTE *)(this + 17) & 0xFB | (4 * ((BYTE1(a2[2].impl) >> 2) & 1));
        *(_BYTE *)(this + 17) = v16;
        *(_BYTE *)(this + 17) = v16 & 0xFD | BYTE1(a2[2].impl) & 2;
      }
    }
  }
LABEL_15:
  v17 = LOBYTE(a2[2].impl);
  if (v17 < 0x1C)
  {
    if (v17 != 5)
      goto LABEL_34;
    v19 = WORD1(a2[2].impl);
    v7 = v19 > 0x1B;
    v20 = (1 << v19) & 0xC180000;
    if (v7 || v20 == 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  if (v17 <= 0x37 && ((1 << v17) & 0xC1800000000000) != 0)
  {
LABEL_28:
    v22 = *(unsigned __int8 *)(this + 16);
    if (v22 > 0x37)
      goto LABEL_34;
    if (((1 << v22) & 0xC1800000000000) == 0)
      goto LABEL_34;
    *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | BYTE1(a2[2].impl) & 2;
    v17 = LOBYTE(a2[2].impl);
    if (v17 != 57)
      goto LABEL_34;
    goto LABEL_31;
  }
  if (v17 != 57)
    goto LABEL_34;
LABEL_31:
  v17 = 57;
  if (!this || *(_BYTE *)(this + 16) != 57)
    goto LABEL_37;
  *(_BYTE *)(this + 17) = *(_BYTE *)(this + 17) & 0xFD | BYTE1(a2[2].impl) & 2;
  v17 = LOBYTE(a2[2].impl);
LABEL_34:
  if (v17 >= 0x1C)
  {
LABEL_37:
    v23 = v17 - 28;
    goto LABEL_38;
  }
  if (v17 != 5)
    return this;
  v23 = WORD1(a2[2].impl);
  v17 = 5;
LABEL_38:
  if (v23 <= 0x39)
  {
    if (((1 << v23) & 0x40000001255000) != 0)
      goto LABEL_56;
    if (((1 << v23) & 0x380000000000000) != 0)
    {
      v24 = a2;
      do
      {
        impl = v24->impl;
        v26 = *((unsigned __int8 *)v24->impl + 8);
        v24 = (Value *)((char *)v24->impl + 24);
        if (impl)
          v27 = v26 == 17;
        else
          v27 = 0;
      }
      while (v27);
      if ((v26 & 0xFE) == 0x12)
        v26 = *(_DWORD *)(**((_QWORD **)impl + 2) + 8);
      v28 = v26 < 4u || v26 == 5;
      v29 = v26 & 0xFD;
      if (v28 || v29 == 4)
      {
LABEL_56:
        v31 = *(unsigned __int8 *)(this + 16);
        v32 = v31 - 28;
        if (v31 < 0x1C)
        {
          if (v31 != 5)
            goto LABEL_78;
          v32 = *(unsigned __int16 *)(this + 18);
        }
        if (v32 <= 0x39)
        {
          if (((1 << v32) & 0x40000001255000) != 0)
            goto LABEL_77;
          if (((1 << v32) & 0x380000000000000) != 0)
          {
            v33 = this;
            do
            {
              v34 = *(_QWORD *)v33;
              v35 = *(unsigned __int8 *)(*(_QWORD *)v33 + 8);
              v33 = *(_QWORD *)v33 + 24;
              if (v34)
                v36 = v35 == 17;
              else
                v36 = 0;
            }
            while (v36);
            if ((v35 & 0xFE) == 0x12)
              v35 = *(_DWORD *)(**(_QWORD **)(v34 + 16) + 8);
            v37 = v35 < 4u || v35 == 5;
            v38 = v35 & 0xFD;
            if (v37 || v38 == 4)
            {
LABEL_77:
              *(_BYTE *)(this + 17) = BYTE1(a2[2].impl) & 0xFE | *(_BYTE *)(this + 17) & 1;
              v17 = LOBYTE(a2[2].impl);
            }
          }
        }
      }
    }
  }
LABEL_78:
  if (v17 == 62)
  {
    if (!this || *(_BYTE *)(this + 16) != 62)
      return this;
    if ((llvm::Instruction::hasNonNeg((llvm::Instruction *)a2) & 1) != 0)
      hasNonNeg = 1;
    else
      hasNonNeg = llvm::Instruction::hasNonNeg(v4);
    this = llvm::Instruction::setHasNoUnsignedWrap((uint64_t)v4, hasNonNeg);
    v17 = LOBYTE(a2[2].impl);
  }
  if (v17 == 67 && *((_BYTE *)v4 + 16) == 67)
    *((_BYTE *)v4 + 17) = *((_BYTE *)v4 + 17) & 0xFD | BYTE1(a2[2].impl) & 2;
  return this;
}

const char *llvm::Instruction::getOpcodeName(llvm::Instruction *this)
{
  if (((_DWORD)this - 1) > 0x42)
    return "<Invalid operator> ";
  else
    return off_1E0E76138[(int)this - 1];
}

BOOL llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if ((v1 - 63) < 3)
    return 1;
  if (v1 == 60 || v1 == 61)
    return (*((_WORD *)this + 9) & 0x380) != 0;
  return 0;
}

BOOL llvm::Instruction::isLaunderOrStripInvariantGroup(llvm::Instruction *this)
{
  uint64_t v1;
  int v3;

  if (*((_BYTE *)this + 16) != 84)
    return 0;
  v1 = *((_QWORD *)this - 4);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *((_QWORD *)this + 10) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 36);
  return v3 == 188 || v3 == 317;
}

uint64_t llvm::Instruction::getStableDebugLoc(llvm::Instruction *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 16) != 84)
    return (uint64_t)this + 48;
  v1 = *((_QWORD *)this - 4);
  if (!v1)
    return (uint64_t)this + 48;
  if (*(_BYTE *)(v1 + 16))
    return (uint64_t)this + 48;
  if (*(_QWORD *)(v1 + 24) != *((_QWORD *)this + 10))
    return (uint64_t)this + 48;
  if ((*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return (uint64_t)this + 48;
  if ((*(_DWORD *)(v1 + 36) - 61) > 3)
    return (uint64_t)this + 48;
  v3 = *((_QWORD *)this + 4);
  if (v3 == *((_QWORD *)this + 5) + 48 || !v3)
    return (uint64_t)this + 48;
  while (*(_BYTE *)(v3 - 8) == 84)
  {
    v4 = *(_QWORD *)(v3 - 56);
    if (!v4
      || *(_BYTE *)(v4 + 16)
      || *(_QWORD *)(v4 + 24) != *(_QWORD *)(v3 + 56)
      || (*(_BYTE *)(v4 + 33) & 0x20) == 0
      || (*(_DWORD *)(v4 + 36) - 61) > 3)
    {
      break;
    }
    v5 = v3 + 8;
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == *(_QWORD *)(v5 + 8) + 48 || !v3)
      return (uint64_t)this + 48;
  }
  return v3 + 24;
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_1 + 4 * byte_181282C6E[*((unsigned __int8 *)this + 16) - 29]))(0);
}

uint64_t sub_180CF9DB0@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
}

uint64_t sub_180CF9DC0@<X0>(uint64_t a1@<X8>)
{
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3)
    return 2;
  else
    return 1;
}

uint64_t sub_180CF9DD8@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFF;
}

uint64_t sub_180CF9DE4()
{
  return 2;
}

uint64_t sub_180CF9DEC@<X0>(uint64_t a1@<X8>)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t sub_180CF9DF8()
{
  return 1;
}

uint64_t sub_180CF9E00@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 88) + 1);
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this)
{
  return ((uint64_t (*)(void))((char *)sub_180CF9E2C + 4 * byte_181282C79[*((unsigned __int8 *)this + 16) - 30]))();
}

uint64_t sub_180CF9E2C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8) + 32 * (a2 + 1);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF) + 32 * (a2 + 1);
  return *(_QWORD *)v3;
}

uint64_t sub_180CF9ECC(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  else
    return 0;
}

uint64_t sub_180CF9EDC(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t llvm::Instruction::setSuccessor(llvm::Instruction *this, unsigned int a2, llvm::BasicBlock *a3)
{
  return ((uint64_t (*)(void))((char *)sub_180CF9F48 + 4 * byte_181282C83[*((unsigned __int8 *)this + 16) - 30]))();
}

uint64_t sub_180CF9F48(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (a2 + 1);
  v4 = *(_DWORD *)(result + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v5 = *(_QWORD *)(result - 8);
    v6 = v5 + 32 * v3;
    if (!*(_QWORD *)v6)
      goto LABEL_7;
  }
  else
  {
    v5 = result - 32 * (v4 & 0x7FFFFFF);
    v6 = v5 + 32 * v3;
    if (!*(_QWORD *)v6)
      goto LABEL_7;
  }
  **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
LABEL_7:
  *(_QWORD *)v6 = a3;
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v8 = (_QWORD *)(a3 + 8);
    v9 = v10;
    v11 = v5 + 32 * v3;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return result;
}

uint64_t sub_180CFA140(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v4 = *(_QWORD *)(result - 24);
    if (v4)
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(result - 16);
  }
  *v3 = a3;
  if (!a3)
    JUMPOUT(0x180CFA13CLL);
  v7 = *(_QWORD *)(a3 + 8);
  v5 = (_QWORD *)(a3 + 8);
  v6 = v7;
  *(_QWORD *)(result - 24) = v7;
  if (v7)
    *(_QWORD *)(v6 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v5;
  *v5 = v3;
  return result;
}

void llvm::Instruction::replaceSuccessorWith(llvm::Instruction *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  __asm { BR              X10 }
}

void sub_180CFA270(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  llvm::BasicBlock *v16;
  uint64_t v17;
  llvm::Instruction *v18;
  int v19;
  int v20;
  unsigned int v21;

  v19 = *((_DWORD *)v18 + 5) & 0x7FFFFFF;
  v20 = v19 - 1;
  if (v19 != 1)
  {
    v21 = 0;
    do
    {
      if (llvm::Instruction::getSuccessor(v18) == v17)
        llvm::Instruction::setSuccessor(v18, v21, v16);
      ++v21;
    }
    while (v20 != v21);
  }
}

unsigned __int8 **llvm::Instruction::copyMetadata(unsigned __int8 **result, uint64_t a2, int *a3, uint64_t a4)
{
  unsigned __int8 **v7;
  uint64_t v8;
  int v9;
  llvm::MDNode **v10;
  llvm::MDNode **v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  llvm *v28[2];
  unsigned int v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[9];

  v7 = result;
  v32[8] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
  {
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    if (a4)
    {
      v8 = 4 * a4;
      do
      {
        v9 = *a3++;
        v27 = v9;
        llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((char *)v28, &v27, (uint64_t)&v30);
        v8 -= 4;
      }
      while (v8);
    }
    v30 = v32;
    v31 = 0x400000000;
    llvm::Value::getAllMetadata((mlir::BytecodeWriterConfig *)a2, (uint64_t)&v30);
    if ((_DWORD)v31)
    {
      v10 = (llvm::MDNode **)v30;
      v11 = (llvm::MDNode **)((char *)v30 + 16 * v31);
      if (a4)
      {
        v12 = v29;
        if (!v29)
        {
LABEL_20:
          if (!v29)
            goto LABEL_31;
          v19 = *(_DWORD *)v28[0];
          if (*(_DWORD *)v28[0])
          {
            v23 = 0;
            v24 = 1;
            while (v19 != -1)
            {
              v25 = v23 + v24++;
              v23 = v25 & (v29 - 1);
              v19 = *((_DWORD *)v28[0] + v23);
              if (!v19)
                goto LABEL_22;
            }
LABEL_31:
            if (v30 != v32)
              free(v30);
            llvm::deallocate_buffer(v28[0], (void *)(4 * v29));
          }
LABEL_22:
          v20 = *(unsigned __int8 **)(a2 + 48);
          v26 = v20;
          if (v20)
            llvm::MetadataTracking::track((uint64_t)&v26, v20, 1);
          v21 = v7 + 6;
          if (v21 == &v26)
          {
            if (v26)
              llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
          }
          else
          {
            if (*v21)
              llvm::MetadataTracking::untrack((uint64_t)v21, *v21);
            v22 = v26;
            *v21 = v26;
            if (v22)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v26, v22, (uint64_t)v21);
              v26 = 0;
            }
          }
          goto LABEL_31;
        }
LABEL_9:
        v13 = *(_DWORD *)v10;
        v14 = v12 - 1;
        v15 = (37 * *(_DWORD *)v10) & v14;
        v16 = *((_DWORD *)v28[0] + v15);
        if (*(_DWORD *)v10 == v16)
        {
LABEL_10:
          llvm::Instruction::setMetadata(v7, v13, v10[1]);
          goto LABEL_11;
        }
        v17 = 1;
        while (v16 != -1)
        {
          v18 = v15 + v17++;
          v15 = v18 & v14;
          v16 = *((_DWORD *)v28[0] + v15);
          if (v13 == v16)
            goto LABEL_10;
        }
LABEL_11:
        while (1)
        {
          v10 += 2;
          if (v10 == v11)
            break;
          v12 = v29;
          if (v29)
            goto LABEL_9;
        }
      }
      else
      {
        do
        {
          llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, v10[1]);
          v10 += 2;
        }
        while (v10 != v11);
      }
    }
    if (!a4)
      goto LABEL_22;
    goto LABEL_20;
  }
  return result;
}

BOOL llvm::AllocaInst::isArrayAllocation(llvm::AllocaInst *this)
{
  uint64_t v1;
  BOOL v2;
  llvm::APInt *v4;
  unsigned int v5;

  v1 = *((_QWORD *)this - 4);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 16;
  else
    v2 = 0;
  if (!v2)
    return 1;
  v4 = (llvm::APInt *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  if (v5 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v4) != v5 - 1;
  else
    return *(_QWORD *)v4 != 1;
}

const char *llvm::SelectInst::areInvalidOperands(llvm::SelectInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  const char *result;
  uint64_t v5;
  BOOL v6;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v8;
  uint64_t v10;
  llvm::Type *v11;
  llvm::LLVMContext *v12;
  uint64_t v13;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return "both values to select must have same type";
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 12)
    return "select values cannot have token type";
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 = (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18;
  else
    v6 = 0;
  if (!v6)
  {
    DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    if (v5 != llvm::Type::getInt1Ty(DesiredBytecodeVersion, v8))
      return "select condition must be i1 or <n x i1>";
    return 0;
  }
  v10 = *(_QWORD *)(v5 + 24);
  v11 = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  if (v10 != llvm::Type::getInt1Ty(v11, v12))
    return "vector select condition element type must be i1";
  v13 = *(_QWORD *)a2;
  result = "selected values for vector select must be vectors";
  if (*(_QWORD *)a2 && (*(_DWORD *)(v13 + 8) & 0xFE) == 0x12)
  {
    if (*(_DWORD *)(v13 + 32) != *(_DWORD *)(v5 + 32)
      || (*(_BYTE *)(v5 + 8) == 19) != (*(_DWORD *)(v13 + 8) == 19))
    {
      return "vector select requires selected vectors to have the same vector length as select condition";
    }
    return 0;
  }
  return result;
}

void llvm::PHINode::growOperands(llvm::PHINode *this)
{
  unsigned int v1;

  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) + ((*((_DWORD *)this + 5) & 0x7FFFFFFu) >> 1) <= 2)
    v1 = 2;
  else
    v1 = (*((_DWORD *)this + 5) & 0x7FFFFFF) + ((*((_DWORD *)this + 5) & 0x7FFFFFFu) >> 1);
  *((_DWORD *)this + 18) = v1;
  llvm::User::growHungoffUses(this, v1, 1);
}

llvm::Instruction *llvm::LandingPadInst::Create(llvm::LandingPadInst *this, llvm::Type *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  unsigned int v7;
  llvm::Instruction *v9;
  llvm::Instruction *v10;

  v7 = a2;
  v9 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x50);
  v10 = llvm::Instruction::Instruction(v9, this, 66, 0, 0, a4);
  *((_DWORD *)v10 + 18) = v7;
  *((_DWORD *)v10 + 5) &= 0xF8000000;
  llvm::User::allocHungoffUses(v10, v7, 0);
  llvm::Value::setName(v9, a3);
  *((_WORD *)v9 + 9) &= ~1u;
  return v9;
}

void llvm::LandingPadInst::addClause(llvm::LandingPadInst *this, llvm::Constant *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  char *v13;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  if (*((_DWORD *)this + 18) <= (v4 & 0x7FFFFFFu))
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v4 & 0x7FFFFFF;
    *((_DWORD *)this + 18) = 2 * v6;
    llvm::User::growHungoffUses(this, 2 * v6, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | (v4 + 1) & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
  {
    v7 = (char *)*((_QWORD *)this - 1);
    v8 = &v7[32 * v5];
    if (!*(_QWORD *)v8)
      goto LABEL_12;
  }
  else
  {
    v7 = (char *)this - 32 * ((v4 + 1) & 0x7FFFFFF);
    v8 = &v7[32 * v5];
    if (!*(_QWORD *)v8)
      goto LABEL_12;
  }
  **((_QWORD **)v8 + 2) = *((_QWORD *)v8 + 1);
  v9 = *((_QWORD *)v8 + 1);
  if (v9)
    *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
LABEL_12:
  *(_QWORD *)v8 = a2;
  if (a2)
  {
    v12 = *((_QWORD *)a2 + 1);
    v11 = (char **)((char *)a2 + 8);
    v10 = v12;
    v13 = &v7[32 * v5];
    *((_QWORD *)v13 + 1) = v12;
    if (v12)
      *(_QWORD *)(v10 + 16) = v13 + 8;
    *((_QWORD *)v13 + 2) = v11;
    *v11 = v8;
  }
}

uint64_t llvm::CallBase::getNumSubclassExtraOperandsDynamic(llvm::CallBase *this)
{
  return (*((_DWORD *)this + 22) + 1);
}

BOOL llvm::CallBase::isMustTailCall(llvm::CallBase *this)
{
  _BOOL8 result;

  result = 0;
  if (this)
  {
    if (*((_BYTE *)this + 16) == 84)
      return (*((_WORD *)this + 9) & 3) == 2;
  }
  return result;
}

uint64_t llvm::CallBase::getIntrinsicID(llvm::CallBase *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this - 4);
  if (v1 && !*(_BYTE *)(v1 + 16) && *(_QWORD *)(v1 + 24) == *((_QWORD *)this + 10))
    return *(unsigned int *)(v1 + 36);
  else
    return 0;
}

uint64_t llvm::CallBase::getArgOperandWithAttribute(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = 0;
  if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(a1 + 72), a2, &v7))
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  v5 = *(_QWORD *)(a1 - 32);
  if (v5
    && !*(_BYTE *)(v5 + 16)
    && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 80)
    && (v6 = *(_QWORD *)(v5 + 112), llvm::AttributeList::hasAttrSomewhere(&v6, a2, &v7)))
  {
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::CallBase::paramHasAttr(uint64_t *a1, int a2, int a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = a2 + 1;
  if ((llvm::AttributeList::hasAttributeAtIndex(a1 + 9, a2 + 1, a3) & 1) != 0)
    return 1;
  v7 = *(a1 - 4);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != a1[10])
    return 0;
  v8 = *(_QWORD *)(v7 + 112);
  result = llvm::AttributeList::hasAttributeAtIndex(&v8, v5, a3);
  if ((_DWORD)result)
  {
    if (a3 == 70)
      return !llvm::CallBase::hasReadingOperandBundles((llvm::CallBase *)a1);
    if (a3 == 47)
      return !llvm::CallBase::hasClobberingOperandBundles((llvm::CallBase *)a1);
    if (a3 != 46)
      return 1;
    if (!llvm::CallBase::hasReadingOperandBundles((llvm::CallBase *)a1))
      return !llvm::CallBase::hasClobberingOperandBundles((llvm::CallBase *)a1);
    return 0;
  }
  return result;
}

BOOL llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  char *Descriptor;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int32 *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0x800000007;
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  Descriptor = llvm::User::getDescriptor(this);
  v3 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    v5 = llvm::User::getDescriptor(this);
    v4 = &v5[v6] - v3;
    if ((v4 & 0xFFFFFFFF0) == 0)
      return 0;
  }
  else
  {
    v4 = -(uint64_t)Descriptor;
    if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
      return 0;
  }
  v7 = 0;
  v8 = (v4 >> 4);
  while (1)
  {
    v9 = llvm::User::getDescriptor(this);
    v10 = wmemchr((__int32 *)&v14, *(_DWORD *)(*(_QWORD *)&v9[v7] + 8), 2uLL);
    v11 = v10 ? (char *)v10 : (char *)&v15;
    if (v11 - (char *)&v14 == 8)
      break;
    v7 += 16;
    if (!--v8)
      return 0;
  }
  v13 = *((_QWORD *)this - 4);
  return !v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *((_QWORD *)this + 10) || *(_DWORD *)(v13 + 36) != 11;
}

BOOL llvm::CallBase::hasClobberingOperandBundles(llvm::CallBase *this)
{
  char *Descriptor;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int32 *v10;
  char *v11;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = xmmword_181282CA0;
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    return 0;
  Descriptor = llvm::User::getDescriptor(this);
  v3 = Descriptor;
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    v5 = llvm::User::getDescriptor(this);
    v4 = &v5[v6] - v3;
    if ((v4 & 0xFFFFFFFF0) == 0)
      return 0;
  }
  else
  {
    v4 = -(uint64_t)Descriptor;
    if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
      return 0;
  }
  v7 = 0;
  v8 = (v4 >> 4);
  while (1)
  {
    v9 = llvm::User::getDescriptor(this);
    v10 = wmemchr((__int32 *)&v14, *(_DWORD *)(*(_QWORD *)&v9[v7] + 8), 4uLL);
    v11 = v10 ? (char *)v10 : (char *)v15;
    if (v11 - (char *)&v14 == 16)
      break;
    v7 += 16;
    if (!--v8)
      return 0;
  }
  v13 = *((_QWORD *)this - 4);
  return !v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *((_QWORD *)this + 10) || *(_DWORD *)(v13 + 36) != 11;
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 - 32);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4)
  {
    if (*(_WORD *)(v2 + 18) != 49)
      return 0;
    v2 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3)
    return 0;
  v6 = *(_QWORD *)(v2 + 112);
  return llvm::AttributeSet::hasAttribute(&v6, a2);
}

char *llvm::CallBase::populateBundleOperandInfos(mlir::BytecodeWriterConfig *this, int8x16_t *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int8x16_t *v5;
  char *v7;
  int8x16_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *Descriptor;
  char *v19;
  char *v20;
  int v21;
  int8x16_t *v22;
  const unsigned __int8 *v23;
  char *v25;
  uint64_t v26;

  v4 = a4;
  v5 = a2;
  v7 = (char *)this + 32 * a4 + -32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  if (a3)
  {
    v8 = a2;
    do
    {
      v9 = (uint64_t *)v8[1].i64[1];
      v10 = (uint64_t *)v8[2].i64[0];
      if (v9 != v10)
      {
        v11 = (_QWORD **)(v7 + 8);
        do
        {
          v12 = v11 - 1;
          v13 = *v9;
          if (*(v11 - 1))
          {
            *v11[1] = *v11;
            if (*v11)
              (*v11)[2] = v11[1];
          }
          *v12 = v13;
          if (v13)
          {
            v16 = *(_QWORD **)(v13 + 8);
            v14 = (_QWORD *)(v13 + 8);
            v15 = v16;
            *v11 = v16;
            if (v16)
              v15[2] = v11;
            v11[1] = v14;
            *v14 = v12;
          }
          ++v9;
          v11 += 4;
        }
        while (v9 != v10);
        v7 = (char *)(v11 - 1);
      }
      v8 += 3;
    }
    while (v8 != &a2[3 * a3]);
  }
  v17 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor(this);
    v19 = Descriptor;
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      v25 = llvm::User::getDescriptor(this);
      v20 = &v25[v26];
      if (&v25[v26] == v19)
        return v7;
    }
    else
    {
      v20 = 0;
      if (!Descriptor)
        return v7;
    }
    do
    {
      v21 = v5[1].i8[7];
      if (v21 >= 0)
        v22 = v5;
      else
        v22 = (int8x16_t *)v5->i64[0];
      if (v21 >= 0)
        v23 = (const unsigned __int8 *)v5[1].u8[7];
      else
        v23 = (const unsigned __int8 *)v5->i64[1];
      *(_QWORD *)v19 = llvm::LLVMContextImpl::getOrInsertBundleTag(v17, v22, v23);
      *((_DWORD *)v19 + 2) = v4;
      v4 += (unint64_t)(v5[2].i64[0] - v5[1].i64[1]) >> 3;
      *((_DWORD *)v19 + 3) = v4;
      v5 += 3;
      v19 += 16;
    }
    while (v19 != v20);
  }
  return v7;
}

char *llvm::CallBase::getBundleOpInfoForOperand(llvm::CallBase *this, unsigned int a2)
{
  uint64_t v4;
  int v5;
  char *Descriptor;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  char *v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;

  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor(this);
    v4 = (uint64_t)&Descriptor[v7];
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      v11 = llvm::User::getDescriptor(this);
      v5 = *((_DWORD *)this + 5);
      if (v4 - (uint64_t)v11 <= 127)
        goto LABEL_5;
    }
    else
    {
      v5 = *((_DWORD *)this + 5);
      if (v4 <= 127)
        goto LABEL_5;
    }
    if ((v5 & 0x80000000) == 0)
      return 0;
    v14 = llvm::User::getDescriptor(this);
    v12 = v14;
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      v20 = llvm::User::getDescriptor(this);
      v15 = &v20[v21];
      if (&v20[v21] == v12)
        return v12;
    }
    else
    {
      v15 = 0;
      if (!v14)
        return v12;
    }
    v22 = v12;
    do
    {
      if (&v22[16
              * (((a2 - *((_DWORD *)v22 + 2)) << 10)
               / (((*((_DWORD *)v15 - 1) - *((_DWORD *)v22 + 2)) << 10) / ((v15 - v22) >> 4)))] >= v15)
        v12 = v15 - 16;
      else
        v12 = &v22[16
                 * (((a2 - *((_DWORD *)v22 + 2)) << 10)
                  / (((*((_DWORD *)v15 - 1) - *((_DWORD *)v22 + 2)) << 10)
                                 / ((v15 - v22) >> 4)))];
      v23 = *((_DWORD *)v12 + 3);
      if (*((_DWORD *)v12 + 2) <= a2 && v23 > a2)
        break;
      if (v23 > a2)
        v15 = v12;
      else
        v22 = v12 + 16;
    }
    while (v22 != v15);
    return v12;
  }
  v4 = 0;
  v5 = *((_DWORD *)this + 5);
LABEL_5:
  if (v5 < 0)
  {
    v8 = llvm::User::getDescriptor(this);
    v9 = v8;
    if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
    {
      v10 = 0;
      if (v8)
        goto LABEL_19;
      return (char *)v4;
    }
    v16 = llvm::User::getDescriptor(this);
    v10 = &v16[v17];
    if (&v16[v17] != v9)
    {
      do
      {
LABEL_19:
        while (1)
        {
          v12 = v9;
          if (*((_DWORD *)v9 + 2) <= a2)
            break;
          v9 += 16;
          if (v12 + 16 == v10)
            return v12;
        }
        v18 = *((_DWORD *)v9 + 3);
        v9 += 16;
      }
      while (v18 <= a2 && v9 != v10);
      return v12;
    }
  }
  return (char *)v4;
}

uint64_t llvm::CallBase::getMemoryEffects(llvm::CallBase *this)
{
  uint64_t MemoryEffects;
  llvm::Function *v3;
  BOOL v4;
  int v5;
  char *Descriptor;
  char *v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *((_QWORD *)this + 9);
  MemoryEffects = llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v11);
  v3 = (llvm::Function *)*((_QWORD *)this - 4);
  if (v3)
    v4 = *((_BYTE *)v3 + 16) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v5 = llvm::Function::getMemoryEffects(v3);
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      Descriptor = llvm::User::getDescriptor(this);
      v7 = Descriptor;
      if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
      {
        v9 = llvm::User::getDescriptor(this);
        if (((&v9[v10] - v7) & 0xFFFFFFFF0) != 0)
          goto LABEL_9;
      }
      else if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) != 0)
      {
LABEL_9:
        if (llvm::CallBase::hasReadingOperandBundles(this))
          v5 |= 0x15u;
        if (llvm::CallBase::hasClobberingOperandBundles(this))
          v5 |= 0x2Au;
      }
    }
    return v5 & MemoryEffects;
  }
  return MemoryEffects;
}

BOOL llvm::CallBase::doesNotAccessMemory(llvm::CallBase *this)
{
  return llvm::CallBase::getMemoryEffects(this) == 0;
}

BOOL llvm::CallBase::onlyReadsMemory(llvm::CallBase *this)
{
  unsigned int MemoryEffects;

  MemoryEffects = llvm::CallBase::getMemoryEffects(this);
  return (((MemoryEffects >> 2) | (MemoryEffects >> 4) | MemoryEffects) & 2) == 0;
}

BOOL llvm::CallBase::onlyAccessesArgMemory(llvm::CallBase *this)
{
  return llvm::CallBase::getMemoryEffects(this) < 4;
}

void llvm::CallInst::init(mlir::BytecodeWriterConfig *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int8x16_t *a6, uint64_t a7, const char **a8)
{
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  *((_QWORD *)this + 10) = a2;
  if (a5)
  {
    v10 = (_QWORD **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF) + 8);
    v11 = 8 * a5;
    do
    {
      v12 = v10 - 1;
      v13 = *a4;
      if (*(v10 - 1))
      {
        *v10[1] = *v10;
        if (*v10)
          (*v10)[2] = v10[1];
      }
      *v12 = v13;
      if (v13)
      {
        v16 = *(_QWORD **)(v13 + 8);
        v14 = (_QWORD *)(v13 + 8);
        v15 = v16;
        *v10 = v16;
        if (v16)
          v15[2] = v10;
        v10[1] = v14;
        *v14 = v12;
      }
      ++a4;
      v10 += 4;
      v11 -= 8;
    }
    while (v11);
  }
  v17 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v18 = *((_QWORD *)this - 3);
    if (v18)
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this - 2);
  }
  *v17 = a3;
  if (a3)
  {
    v21 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a3 + 8);
    v20 = v21;
    *((_QWORD *)this - 3) = v21;
    if (v21)
      *(_QWORD *)(v20 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v19;
    *v19 = v17;
  }
  llvm::CallBase::populateBundleOperandInfos(this, a6, a7, a5);
  llvm::Value::setName(this, a8);
}

void llvm::InvokeInst::init(mlir::BytecodeWriterConfig *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, int a8, int8x16_t *a9, uint64_t a10, const char **a11)
{
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  *((_QWORD *)this + 10) = a2;
  if (a7)
  {
    v12 = (_QWORD **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF) + 8);
    v13 = 8 * a7;
    do
    {
      v14 = v12 - 1;
      v15 = *a6;
      if (*(v12 - 1))
      {
        *v12[1] = *v12;
        if (*v12)
          (*v12)[2] = v12[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v12 = v18;
        if (v18)
          v17[2] = v12;
        v12[1] = v16;
        *v16 = v14;
      }
      ++a6;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
  }
  v19 = (_QWORD *)((char *)this - 96);
  if (*((_QWORD *)this - 12))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v20 = *((_QWORD *)this - 11);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)this - 10);
  }
  *v19 = a4;
  if (a4)
  {
    v23 = *(_QWORD *)(a4 + 8);
    v21 = (_QWORD *)(a4 + 8);
    v22 = v23;
    *((_QWORD *)this - 11) = v23;
    if (v23)
      *(_QWORD *)(v22 + 16) = (char *)this - 88;
    *((_QWORD *)this - 10) = v21;
    *v21 = v19;
  }
  v24 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v25 = *((_QWORD *)this - 7);
    if (v25)
      *(_QWORD *)(v25 + 16) = *((_QWORD *)this - 6);
  }
  *v24 = a5;
  if (a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v26 = (_QWORD *)(a5 + 8);
    v27 = v28;
    *((_QWORD *)this - 7) = v28;
    if (v28)
      *(_QWORD *)(v27 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v26;
    *v26 = v24;
  }
  v29 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v30 = *((_QWORD *)this - 3);
    if (v30)
      *(_QWORD *)(v30 + 16) = *((_QWORD *)this - 2);
  }
  *v29 = a3;
  if (a3)
  {
    v31 = (_QWORD *)(a3 + 8);
    v32 = *(_QWORD *)(a3 + 8);
    *((_QWORD *)this - 3) = v32;
    if (v32)
      *(_QWORD *)(v32 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v31;
    *v31 = v29;
  }
  llvm::CallBase::populateBundleOperandInfos(this, a9, a10, a7);
  llvm::Value::setName(this, a11);
}

void llvm::CallBrInst::init(mlir::BytecodeWriterConfig *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t *a7, uint64_t a8, int8x16_t *a9, uint64_t a10, const char **a11)
{
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  *((_QWORD *)this + 10) = a2;
  if (a8)
  {
    v12 = (_QWORD **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF) + 8);
    v13 = 8 * a8;
    do
    {
      v14 = v12 - 1;
      v15 = *a7;
      if (*(v12 - 1))
      {
        *v12[1] = *v12;
        if (*v12)
          (*v12)[2] = v12[1];
      }
      *v14 = v15;
      if (v15)
      {
        v18 = *(_QWORD **)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        *v12 = v18;
        if (v18)
          v17[2] = v12;
        v12[1] = v16;
        *v16 = v14;
      }
      ++a7;
      v12 += 4;
      v13 -= 8;
    }
    while (v13);
  }
  *((_DWORD *)this + 22) = a6;
  v19 = (_QWORD *)((char *)this - 32);
  v20 = a6;
  v21 = (char *)this - 32 * a6 - 32;
  v22 = v21 - 32;
  if (*((_QWORD *)v21 - 4))
  {
    **((_QWORD **)v21 - 2) = *((_QWORD *)v21 - 3);
    v23 = *((_QWORD *)v21 - 3);
    if (v23)
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v21 - 2);
  }
  *(_QWORD *)v22 = a4;
  if (a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v24 = (char **)(a4 + 8);
    v25 = v26;
    *((_QWORD *)v21 - 3) = v26;
    if (v26)
      *(_QWORD *)(v25 + 16) = v21 - 24;
    *((_QWORD *)v21 - 2) = v24;
    *v24 = v22;
  }
  if (a6)
  {
    do
    {
      v30 = *a5;
      if (*(_QWORD *)v21)
      {
        **((_QWORD **)v21 + 2) = *((_QWORD *)v21 + 1);
        v31 = *((_QWORD *)v21 + 1);
        if (v31)
          *(_QWORD *)(v31 + 16) = *((_QWORD *)v21 + 2);
      }
      *(_QWORD *)v21 = v30;
      if (v30)
      {
        v34 = *(_QWORD *)(v30 + 8);
        v32 = (_QWORD *)(v30 + 8);
        v33 = v34;
        *((_QWORD *)v21 + 1) = v34;
        if (v34)
          *(_QWORD *)(v33 + 16) = v21 + 8;
        *((_QWORD *)v21 + 2) = v32;
        *v32 = v21;
      }
      ++a5;
      v21 += 32;
      --v20;
    }
    while (v20);
  }
  if (*v19)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v27 = *((_QWORD *)this - 3);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 2);
  }
  *v19 = a3;
  if (a3)
  {
    v28 = (_QWORD *)(a3 + 8);
    v29 = *(_QWORD *)(a3 + 8);
    *((_QWORD *)this - 3) = v29;
    if (v29)
      *(_QWORD *)(v29 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v28;
    *v28 = v19;
  }
  llvm::CallBase::populateBundleOperandInfos(this, a9, a10, a8);
  llvm::Value::setName(this, a11);
}

llvm::ReturnInst *llvm::ReturnInst::ReturnInst(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  llvm::Type *VoidTy;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;

  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(a2, a2);
  if (a3)
    v8 = -1;
  else
    v8 = 0;
  llvm::Instruction::Instruction(this, VoidTy, 1, (llvm::ReturnInst *)((char *)this + 32 * v8), a3 != 0, a4);
  if (a3)
  {
    v9 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    v10 = -v9;
    v11 = (_QWORD *)((char *)this - 32 * v9);
    if (*v11)
    {
      v12 = (char *)this + 32 * v10;
      v14 = (_QWORD *)*((_QWORD *)v12 + 2);
      v13 = v12 + 16;
      *v14 = *(v13 - 1);
      v15 = *(v13 - 1);
      if (v15)
        *(_QWORD *)(v15 + 16) = *v13;
    }
    *v11 = a3;
    v18 = *((_QWORD *)a3 + 1);
    v17 = (_QWORD *)((char *)a3 + 8);
    v16 = v18;
    v19 = (char *)this + 32 * v10;
    *((_QWORD *)v19 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v19 + 8;
    *((_QWORD *)v19 + 2) = v17;
    *v17 = v11;
  }
  return this;
}

llvm::ResumeInst *llvm::ResumeInst::ResumeInst(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v7;
  llvm::Type *VoidTy;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v7);
  v9 = (_QWORD *)((char *)this - 32);
  llvm::Instruction::Instruction(this, VoidTy, 6, (llvm::ResumeInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v10 = *((_QWORD *)this - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 2);
  }
  *v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)((char *)a2 + 8);
    v11 = v13;
    *((_QWORD *)this - 3) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v12;
    *v12 = v9;
  }
  return this;
}

uint64_t llvm::CleanupReturnInst::init(uint64_t this, Value *a2, llvm::BasicBlock *a3)
{
  uint64_t v3;
  uint64_t v4;
  ValueImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  Value *v10;
  ValueImpl *v11;
  ValueImpl *impl;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  ValueImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  Value *v26;
  ValueImpl *v27;
  ValueImpl *v28;
  uint64_t v29;

  if (a3)
  {
    *(_WORD *)(this + 18) |= 1u;
    v3 = *(_DWORD *)(this + 20) & 0x7FFFFFF;
    v4 = -v3;
    v5 = (ValueImpl *)(this - 32 * v3);
    if (*(_QWORD *)v5)
    {
      v6 = this + 32 * v4;
      v8 = *(_QWORD **)(v6 + 16);
      v7 = (_QWORD *)(v6 + 16);
      *v8 = *(v7 - 1);
      v9 = *(v7 - 1);
      if (v9)
        *(_QWORD *)(v9 + 16) = *v7;
    }
    *(_QWORD *)v5 = a2;
    if (a2)
    {
      impl = a2[1].impl;
      v10 = a2 + 1;
      v11 = impl;
      v13 = this + 32 * v4;
      *(_QWORD *)(v13 + 8) = impl;
      if (impl)
        *((_QWORD *)v11 + 2) = v13 + 8;
      *(_QWORD *)(v13 + 16) = v10;
      v10->impl = v5;
    }
    v14 = this - 32 * (*(_DWORD *)(this + 20) & 0x7FFFFFF);
    if (*(_QWORD *)(v14 + 32))
    {
      **(_QWORD **)(v14 + 48) = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 40);
      if (v15)
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 48);
    }
    *(_QWORD *)(v14 + 32) = a3;
    v18 = *((_QWORD *)a3 + 1);
    v16 = (_QWORD *)((char *)a3 + 8);
    v17 = v18;
    *(_QWORD *)(v14 + 40) = v18;
    if (v18)
      *(_QWORD *)(v17 + 16) = v14 + 40;
    *(_QWORD *)(v14 + 48) = v16;
    *v16 = v14 + 32;
  }
  else
  {
    v19 = *(_DWORD *)(this + 20) & 0x7FFFFFF;
    v20 = -v19;
    v21 = (ValueImpl *)(this - 32 * v19);
    if (*(_QWORD *)v21)
    {
      v22 = this + 32 * v20;
      v24 = *(_QWORD **)(v22 + 16);
      v23 = (_QWORD *)(v22 + 16);
      *v24 = *(v23 - 1);
      v25 = *(v23 - 1);
      if (v25)
        *(_QWORD *)(v25 + 16) = *v23;
    }
    *(_QWORD *)v21 = a2;
    if (a2)
    {
      v28 = a2[1].impl;
      v26 = a2 + 1;
      v27 = v28;
      v29 = this + 32 * v20;
      *(_QWORD *)(v29 + 8) = v28;
      if (v28)
        *((_QWORD *)v27 + 2) = v29 + 8;
      *(_QWORD *)(v29 + 16) = v26;
      v26->impl = v21;
    }
  }
  return this;
}

llvm::CleanupReturnInst *llvm::CleanupReturnInst::CleanupReturnInst(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, unsigned int a4, llvm::Instruction *a5)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v11;
  llvm::Type *VoidTy;
  llvm::Instruction *v13;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v11);
  v13 = llvm::Instruction::Instruction(this, VoidTy, 8, (llvm::CleanupReturnInst *)((char *)this - 32 * a4), a4, a5);
  llvm::CleanupReturnInst::init((uint64_t)v13, (Value *)a2, a3);
  return this;
}

llvm::CatchReturnInst *llvm::CatchReturnInst::CatchReturnInst(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v9;
  llvm::Type *VoidTy;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a3);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v9);
  v11 = (_QWORD *)((char *)this - 64);
  llvm::Instruction::Instruction(this, VoidTy, 9, (llvm::CatchReturnInst *)((char *)this - 64), 2, a4);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v12 = *((_QWORD *)this - 7);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)this - 6);
  }
  *v11 = a2;
  if (a2)
  {
    v15 = *((_QWORD *)a2 + 1);
    v14 = (_QWORD *)((char *)a2 + 8);
    v13 = v15;
    *((_QWORD *)this - 7) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v14;
    *v14 = v11;
  }
  v16 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v17 = *((_QWORD *)this - 3);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)this - 2);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)this - 3) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v19;
    *v19 = v16;
  }
  return this;
}

llvm::CatchSwitchInst *llvm::CatchSwitchInst::CatchSwitchInst(llvm::CatchSwitchInst *this, llvm::Type **a2, llvm::BasicBlock *a3, int a4, const char **a5, llvm::Instruction *a6)
{
  int v11;
  char *v12;
  uint64_t v13;
  llvm::Type *v14;
  _QWORD *v15;
  llvm::Type *v16;

  llvm::Instruction::Instruction(this, *a2, 10, 0, 0, a6);
  if (a3)
  {
    llvm::CatchSwitchInst::init(this, (llvm::Value *)a2, a3, a4 + 2);
    goto LABEL_12;
  }
  *((_DWORD *)this + 18) = a4 + 1;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | 1;
  llvm::User::allocHungoffUses(this, a4 + 1, 0);
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x40000000) == 0)
  {
    v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
    if (!*(_QWORD *)v12)
      goto LABEL_9;
LABEL_7:
    **((_QWORD **)v12 + 2) = *((_QWORD *)v12 + 1);
    v13 = *((_QWORD *)v12 + 1);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
    goto LABEL_9;
  }
  v12 = (char *)*((_QWORD *)this - 1);
  if (*(_QWORD *)v12)
    goto LABEL_7;
LABEL_9:
  *(_QWORD *)v12 = a2;
  v16 = a2[1];
  v15 = a2 + 1;
  v14 = v16;
  *((_QWORD *)v12 + 1) = v16;
  if (v16)
    *((_QWORD *)v14 + 2) = v12 + 8;
  *((_QWORD *)v12 + 2) = v15;
  *v15 = v12;
LABEL_12:
  llvm::Value::setName(this, a5);
  return this;
}

_QWORD *llvm::CatchSwitchInst::init(llvm::CatchSwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, unsigned int a4)
{
  int v7;
  _QWORD *result;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  *((_DWORD *)this + 18) = a4;
  if (a3)
    v7 = 2;
  else
    v7 = 1;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | v7;
  result = llvm::User::allocHungoffUses(this, a4, 0);
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
  {
    v10 = (char *)*((_QWORD *)this - 1);
    if (!*(_QWORD *)v10)
      goto LABEL_10;
  }
  else
  {
    v10 = (char *)this - 32 * (v9 & 0x7FFFFFF);
    if (!*(_QWORD *)v10)
      goto LABEL_10;
  }
  **((_QWORD **)v10 + 2) = *((_QWORD *)v10 + 1);
  v11 = *((_QWORD *)v10 + 1);
  if (v11)
    *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
LABEL_10:
  *(_QWORD *)v10 = a2;
  if (a2)
  {
    v14 = *((_QWORD *)a2 + 1);
    v13 = (_QWORD *)((char *)a2 + 8);
    v12 = v14;
    *((_QWORD *)v10 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v10 + 8;
    *((_QWORD *)v10 + 2) = v13;
    *v13 = v10;
  }
  if (a3)
  {
    *((_WORD *)this + 9) |= 1u;
    v15 = *((_DWORD *)this + 5);
    if ((v15 & 0x40000000) != 0)
    {
      v16 = (_QWORD *)*((_QWORD *)this - 1);
      v17 = v16 + 4;
      if (!v16[4])
      {
LABEL_21:
        v16[4] = a3;
        v21 = *((_QWORD *)a3 + 1);
        v20 = (_QWORD *)((char *)a3 + 8);
        v19 = v21;
        v16[5] = v21;
        if (v21)
          *(_QWORD *)(v19 + 16) = v16 + 5;
        v16[6] = v20;
        *v20 = v17;
        return result;
      }
    }
    else
    {
      v16 = (_QWORD *)((char *)this - 32 * (v15 & 0x7FFFFFF));
      v17 = v16 + 4;
      if (!v16[4])
        goto LABEL_21;
    }
    *(_QWORD *)v16[6] = v16[5];
    v18 = v16[5];
    if (v18)
      *(_QWORD *)(v18 + 16) = v16[6];
    goto LABEL_21;
  }
  return result;
}

void llvm::CatchSwitchInst::addHandler(llvm::CatchSwitchInst *this, llvm::BasicBlock *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  if (*((_DWORD *)this + 18) <= (v4 & 0x7FFFFFFu))
  {
    *((_DWORD *)this + 18) = 2 * v5;
    llvm::User::growHungoffUses(this, 2 * v5, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | (v4 + 1) & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)this - 1);
    v7 = &v6[32 * v5];
    if (!*(_QWORD *)v7)
      goto LABEL_9;
  }
  else
  {
    v6 = (char *)this - 32 * ((v4 + 1) & 0x7FFFFFF);
    v7 = &v6[32 * v5];
    if (!*(_QWORD *)v7)
      goto LABEL_9;
  }
  **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
  v8 = *((_QWORD *)v7 + 1);
  if (v8)
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
LABEL_9:
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v11 = *((_QWORD *)a2 + 1);
    v10 = (char **)((char *)a2 + 8);
    v9 = v11;
    v12 = &v6[32 * v5];
    *((_QWORD *)v12 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v10;
    *v10 = v7;
  }
}

llvm::Instruction *llvm::FuncletPadInst::FuncletPadInst(llvm::Instruction *a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, const char **a7, llvm::Instruction *a8)
{
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  llvm::Instruction::Instruction(a1, *(llvm::Type **)a3, a2, (llvm::Instruction *)((char *)a1 - 32 * a6), a6, a8);
  if (a5)
  {
    v13 = (_QWORD **)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 8);
    v14 = 8 * a5;
    do
    {
      v15 = v13 - 1;
      v16 = *a4;
      if (*(v13 - 1))
      {
        *v13[1] = *v13;
        if (*v13)
          (*v13)[2] = v13[1];
      }
      *v15 = v16;
      if (v16)
      {
        v19 = *(_QWORD **)(v16 + 8);
        v17 = (_QWORD *)(v16 + 8);
        v18 = v19;
        *v13 = v19;
        if (v19)
          v18[2] = v13;
        v13[1] = v17;
        *v17 = v15;
      }
      ++a4;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
  }
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v20 = *((_QWORD *)a1 - 3);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a1 - 2);
  }
  *((_QWORD *)a1 - 4) = a3;
  v23 = *(_QWORD *)(a3 + 8);
  v22 = (_QWORD *)(a3 + 8);
  v21 = v23;
  *((_QWORD *)a1 - 3) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = (char *)a1 - 24;
  *((_QWORD *)a1 - 2) = v22;
  *v22 = (char *)a1 - 32;
  llvm::Value::setName(a1, a7);
  return a1;
}

llvm::Instruction *llvm::UnreachableInst::UnreachableInst(llvm::UnreachableInst *this, llvm::LLVMContext *a2, llvm::Instruction *a3)
{
  llvm::Type *VoidTy;

  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(a2, a2);
  return llvm::Instruction::Instruction(this, VoidTy, 7, 0, 0, a3);
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v7;
  llvm::Type *VoidTy;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v7);
  v9 = (_QWORD *)((char *)this - 32);
  llvm::Instruction::Instruction(this, VoidTy, 2, (llvm::BranchInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v10 = *((_QWORD *)this - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 2);
  }
  *v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)((char *)a2 + 8);
    v11 = v13;
    *((_QWORD *)this - 3) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v12;
    *v12 = v9;
  }
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v11;
  llvm::Type *VoidTy;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v11);
  v13 = (_QWORD *)((char *)this - 96);
  llvm::Instruction::Instruction(this, VoidTy, 2, (llvm::BranchInst *)((char *)this - 96), 3, a5);
  if (*((_QWORD *)this - 12))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v14 = *((_QWORD *)this - 11);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)this - 10);
  }
  *v13 = a4;
  if (a4)
  {
    v17 = *((_QWORD *)a4 + 1);
    v16 = (_QWORD *)((char *)a4 + 8);
    v15 = v17;
    *((_QWORD *)this - 11) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = (char *)this - 88;
    *((_QWORD *)this - 10) = v16;
    *v16 = v13;
  }
  v18 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v19 = *((_QWORD *)this - 7);
    if (v19)
      *(_QWORD *)(v19 + 16) = *((_QWORD *)this - 6);
  }
  *v18 = a3;
  if (a3)
  {
    v22 = *((_QWORD *)a3 + 1);
    v21 = (_QWORD *)((char *)a3 + 8);
    v20 = v22;
    *((_QWORD *)this - 7) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v21;
    *v21 = v18;
  }
  v23 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v24 = *((_QWORD *)this - 3);
    if (v24)
      *(_QWORD *)(v24 + 16) = *((_QWORD *)this - 2);
  }
  *v23 = a2;
  if (a2)
  {
    v27 = *((_QWORD *)a2 + 1);
    v26 = (_QWORD *)((char *)a2 + 8);
    v25 = v27;
    *((_QWORD *)this - 3) = v27;
    if (v27)
      *(_QWORD *)(v25 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v26;
    *v26 = v23;
  }
  return this;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, uint64_t ***a3)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v7;
  llvm::Type *VoidTy;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v7);
  v9 = (_QWORD *)((char *)this - 32);
  llvm::Instruction::Instruction(this, VoidTy, 2, (llvm::BranchInst *)((char *)this - 32), 1, a3);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v10 = *((_QWORD *)this - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 2);
  }
  *v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)((char *)a2 + 8);
    v11 = v13;
    *((_QWORD *)this - 3) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v12;
    *v12 = v9;
  }
  return this;
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, _QWORD *a4, unsigned __int8 a5, const char **a6, llvm::Instruction *a7)
{
  llvm::LLVMContext *v13;
  llvm::Type *v14;
  uint64_t Int32Ty;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v14 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  if (!a4)
  {
    Int32Ty = llvm::Type::getInt32Ty(*a2, v13);
    a4 = llvm::ConstantInt::get(Int32Ty, 1, 0);
  }
  v16 = (_QWORD *)(a1 - 32);
  llvm::Instruction::Instruction((llvm::Instruction *)a1, v14, 31, (llvm::Use *)(a1 - 32), 1, a7);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v17 = *(_QWORD *)(a1 - 24);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a4;
  if (a4)
  {
    v20 = a4[1];
    v19 = a4 + 1;
    v18 = v20;
    *(_QWORD *)(a1 - 24) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v19;
    *v19 = v16;
  }
  *(_QWORD *)(a1 + 72) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName((llvm::Value *)a1, a6);
  return a1;
}

{
  return llvm::AllocaInst::AllocaInst(a1, a2, a3, a4, a5, a6, a7);
}

BOOL llvm::AllocaInst::isStaticAlloca(llvm::AllocaInst *this)
{
  _BOOL8 result;

  if (*(_BYTE *)(*((_QWORD *)this - 4) + 16) != 16)
    return 0;
  result = llvm::BasicBlock::isEntryBlock(*((llvm::BasicBlock **)this + 5));
  if ((_DWORD)result)
    return (*((_WORD *)this + 9) & 0x40) == 0;
  return result;
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, llvm::Type *a2, uint64_t a3, const char **a4, __int16 a5, char a6, llvm::Instruction *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v12 = (_QWORD *)(a1 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction((llvm::Instruction *)a1, a2, 32, (llvm::Use *)(a1 - 32), 1, a7) - 4))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v13 = *(_QWORD *)(a1 - 24);
    if (v13)
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v12 = a3;
  if (a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v15 = (_QWORD *)(a3 + 8);
    v14 = v16;
    *(_QWORD *)(a1 - 24) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v15;
    *v15 = v12;
  }
  *(_WORD *)(a1 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 72) = 1;
  llvm::Value::setName((llvm::Value *)a1, a4);
  return a1;
}

uint64_t llvm::LoadInst::LoadInst(uint64_t a1, llvm::Type *a2, uint64_t a3, const char **a4, __int16 a5, char a6, __int16 a7, char a8, llvm::Instruction *a9)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v16 = (_QWORD *)(a1 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction((llvm::Instruction *)a1, a2, 32, (llvm::Use *)(a1 - 32), 1, a9) - 4))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v17 = *(_QWORD *)(a1 - 24);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a3 + 8);
    v18 = v20;
    *(_QWORD *)(a1 - 24) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v19;
    *v19 = v16;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(a1 + 72) = a8;
  llvm::Value::setName((llvm::Value *)a1, a4);
  return a1;
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, mlir::BytecodeWriterConfig *a2, uint64_t a3, __int16 a4, char a5, llvm::Instruction *a6)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, 0, 1, a6);
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, mlir::BytecodeWriterConfig *this, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, llvm::Instruction *a8)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v17;
  llvm::Type *VoidTy;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v17);
  v19 = (_QWORD *)(a1 - 64);
  llvm::Instruction::Instruction((llvm::Instruction *)a1, VoidTy, 33, (llvm::Use *)(a1 - 64), 2, a8);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v20 = *(_QWORD *)(a1 - 56);
    if (v20)
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v19 = this;
  if (this)
  {
    v23 = *((_QWORD *)this + 1);
    v22 = (_QWORD *)((char *)this + 8);
    v21 = v23;
    *(_QWORD *)(a1 - 56) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v22;
    *v22 = v19;
  }
  v24 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v25 = *(_QWORD *)(a1 - 24);
    if (v25)
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v24 = a3;
  if (a3)
  {
    v28 = *(_QWORD *)(a3 + 8);
    v27 = (_QWORD *)(a3 + 8);
    v26 = v28;
    *(_QWORD *)(a1 - 24) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v27;
    *v27 = v24;
  }
  *(_WORD *)(a1 + 18) = a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7) | *(_WORD *)(a1 + 18) & 0xFC00;
  *(_BYTE *)(a1 + 72) = a7;
  return a1;
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, mlir::BytecodeWriterConfig *a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, llvm::Instruction *a8)
{
  return llvm::StoreInst::StoreInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t llvm::AtomicCmpXchgInst::Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  v8 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v9 = *(_QWORD *)(result - 88);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(result - 80);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v11 = v12;
    *(_QWORD *)(result - 88) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v10;
    *v10 = v8;
  }
  v13 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v14 = *(_QWORD *)(result - 56);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(result - 48);
  }
  *v13 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v15 = (_QWORD *)(a3 + 8);
    v16 = v17;
    *(_QWORD *)(result - 56) = v17;
    if (v17)
      *(_QWORD *)(v16 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v15;
    *v15 = v13;
  }
  v18 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v19 = *(_QWORD *)(result - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result - 16);
  }
  *v18 = a4;
  if (a4)
  {
    v22 = *(_QWORD *)(a4 + 8);
    v20 = (_QWORD *)(a4 + 8);
    v21 = v22;
    *(_QWORD *)(result - 24) = v22;
    if (v22)
      *(_QWORD *)(v21 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v20;
    *v20 = v18;
  }
  v23 = *(_WORD *)(result + 18) & 0xC003;
  *(_BYTE *)(result + 72) = a8;
  *(_WORD *)(result + 18) = (32 * a7) & 0xC0FF | (4 * a6) & 0xC01F | v23 | (a5 << 8);
  return result;
}

llvm::Instruction *llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(llvm::Instruction *a1, uint64_t a2, uint64_t ***this, uint64_t a4, unsigned __int8 a5, __int16 a6, __int16 a7, char a8, llvm::Instruction *a9)
{
  __int16 v16;
  uint64_t **v17;
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v19;
  uint64_t Int1Ty;
  uint64_t *v21;
  llvm::Type *v22;
  llvm::Instruction *v23;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v16 = a5;
  v17 = *this;
  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)this);
  Int1Ty = llvm::Type::getInt1Ty(DesiredBytecodeVersion, v19);
  v21 = *v17;
  v25[0] = (uint64_t)v17;
  v25[1] = Int1Ty;
  v22 = (llvm::Type *)llvm::StructType::get(v21, v25, 2, 0);
  v23 = llvm::Instruction::Instruction(a1, v22, 36, (llvm::Instruction *)((char *)a1 - 96), 3, a9);
  llvm::AtomicCmpXchgInst::Init((uint64_t)v23, a2, (uint64_t)this, a4, v16, a6, a7, a8);
  return a1;
}

llvm::Instruction *llvm::AtomicRMWInst::AtomicRMWInst(llvm::Instruction *a1, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, char a7, llvm::Instruction *a8)
{
  _QWORD *v14;
  llvm::Instruction *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int16 v24;

  v14 = (_QWORD *)((char *)a1 - 64);
  result = llvm::Instruction::Instruction(a1, *(llvm::Type **)a4, 37, (llvm::Instruction *)((char *)a1 - 64), 2, a8);
  if (*((_QWORD *)result - 8))
  {
    **((_QWORD **)result - 6) = *((_QWORD *)result - 7);
    v16 = *((_QWORD *)result - 7);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)result - 6);
  }
  *v14 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *((_QWORD *)result - 7) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = (char *)result - 56;
    *((_QWORD *)result - 6) = v18;
    *v18 = v14;
  }
  if (*((_QWORD *)result - 4))
  {
    **((_QWORD **)result - 2) = *((_QWORD *)result - 3);
    v20 = *((_QWORD *)result - 3);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)result - 2);
  }
  *((_QWORD *)result - 4) = a4;
  v23 = *(_QWORD *)(a4 + 8);
  v22 = (_QWORD *)(a4 + 8);
  v21 = v23;
  *((_QWORD *)result - 3) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = (char *)result - 24;
  *((_QWORD *)result - 2) = v22;
  *v22 = (char *)result - 32;
  v24 = *((_WORD *)result + 9) & 0x8001;
  *((_BYTE *)result + 72) = a7;
  *((_WORD *)result + 9) = ((2 * a6) | (16 * a2)) & 0x81FF | (a5 << 9) | v24;
  return result;
}

llvm::Instruction *llvm::AtomicRMWInst::AtomicRMWInst(llvm::Instruction *a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, __int16 a6, char a7, llvm::Instruction *a8)
{
  return llvm::AtomicRMWInst::AtomicRMWInst(a1, a2, a3, a4, a5, a6, a7, a8);
}

char *llvm::AtomicRMWInst::getOperationName(int a1)
{
  return off_1E0E76350[a1];
}

llvm::Instruction *llvm::FenceInst::FenceInst(uint64_t a1, llvm::Type *this, __int16 a3, char a4, llvm::Instruction *a5)
{
  llvm::Type *VoidTy;
  llvm::Instruction *result;

  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(this, this);
  result = llvm::Instruction::Instruction((llvm::Instruction *)a1, VoidTy, 35, 0, 0, a5);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF8 | a3;
  *(_BYTE *)(a1 + 72) = a4;
  return result;
}

void llvm::GetElementPtrInst::init(llvm::Value *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const char **a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  v6 = -v5;
  v7 = (_QWORD *)((char *)a1 - 32 * v5);
  if (*v7)
  {
    v8 = (_DWORD *)((char *)a1 + 32 * v6);
    v10 = (_QWORD *)*((_QWORD *)v8 + 2);
    v9 = v8 + 4;
    *v10 = *(v9 - 1);
    v11 = *(v9 - 1);
    if (v11)
      *(_QWORD *)(v11 + 16) = *v9;
  }
  *v7 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v13 = v14;
    v15 = (_DWORD *)((char *)a1 + 32 * v6);
    *((_QWORD *)v15 + 1) = v14;
    if (v14)
      *(_QWORD *)(v13 + 16) = v15 + 2;
    *((_QWORD *)v15 + 2) = v12;
    *v12 = v7;
  }
  if (a4)
  {
    v16 = 8 * a4;
    v17 = (uint64_t)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 32;
    do
    {
      v18 = *a3;
      if (*(_QWORD *)v17)
      {
        **(_QWORD **)(v17 + 16) = *(_QWORD *)(v17 + 8);
        v19 = *(_QWORD *)(v17 + 8);
        if (v19)
          *(_QWORD *)(v19 + 16) = *(_QWORD *)(v17 + 16);
      }
      *(_QWORD *)v17 = v18;
      if (v18)
      {
        v22 = *(_QWORD *)(v18 + 8);
        v20 = (uint64_t *)(v18 + 8);
        v21 = v22;
        *(_QWORD *)(v17 + 8) = v22;
        if (v22)
          *(_QWORD *)(v21 + 16) = v17 + 8;
        *(_QWORD *)(v17 + 16) = v20;
        *v20 = v17;
      }
      ++a3;
      v17 += 32;
      v16 -= 8;
    }
    while (v16);
  }
  llvm::Value::setName(a1, a5);
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(llvm::GetElementPtrInst *this, Type *a2)
{
  int v2;
  char *v3;
  uint64_t v4;

  v2 = *((unsigned __int8 *)this + 8);
  if (!this || v2 != 16)
  {
    if (!this || v2 != 17)
    {
      v4 = 0;
      if (!this || (v2 & 0xFE) != 0x12)
        return v4;
    }
    v3 = (char *)this + 24;
    return *(_QWORD *)v3;
  }
  if (*((unsigned int *)this + 3) > (unint64_t)a2)
  {
    v3 = (char *)(*((_QWORD *)this + 2) + 8 * a2);
    return *(_QWORD *)v3;
  }
  return 0;
}

uint64_t llvm::GetElementPtrInst::getIndexedType(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t TypeAtIndex;
  const llvm::Value **v4;
  uint64_t v5;
  const llvm::Value *v6;
  int v7;

  TypeAtIndex = result;
  if (a3)
  {
    v4 = (const llvm::Value **)(a2 + 8);
    v5 = 8 * a3 - 8;
    while (v5)
    {
      v6 = *v4;
      v7 = *(unsigned __int8 *)(TypeAtIndex + 8);
      if (TypeAtIndex && v7 == 16)
      {
        if (!llvm::StructType::indexValid((llvm::StructType *)TypeAtIndex, *v4))
          return 0;
        TypeAtIndex = llvm::StructType::getTypeAtIndex((llvm::StructType *)TypeAtIndex, v6);
        ++v4;
        v5 -= 8;
        if (!TypeAtIndex)
          return 0;
      }
      else
      {
        if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
        {
          if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8) != 13)
            return 0;
        }
        else if (*(_DWORD *)(*(_QWORD *)v6 + 8) != 13)
        {
          return 0;
        }
        if (!TypeAtIndex || v7 != 17)
        {
          result = 0;
          if (!TypeAtIndex || (v7 & 0xFE) != 0x12)
            return result;
        }
        TypeAtIndex = *(_QWORD *)(TypeAtIndex + 24);
        ++v4;
        v5 -= 8;
        if (!TypeAtIndex)
          return 0;
      }
    }
    return TypeAtIndex;
  }
  return result;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const char **a4, llvm::Instruction *a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v9 = (char *)this - 64;
  if (*((_QWORD *)llvm::Instruction::Instruction(this, *(llvm::Type **)(*(_QWORD *)a2 + 24), 61, (llvm::ExtractElementInst *)((char *)this - 64), 2, a5)- 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v10 = *((_QWORD *)this - 7);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v13 = *((_QWORD *)a2 + 1);
  v12 = (_QWORD *)((char *)a2 + 8);
  v11 = v13;
  *((_QWORD *)this - 7) = v13;
  if (v13)
    *(_QWORD *)(v11 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v12;
  *v12 = v9;
  v14 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v15 = *((_QWORD *)this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 2);
  }
  *v14 = a3;
  if (a3)
  {
    v18 = *((_QWORD *)a3 + 1);
    v17 = (_QWORD *)((char *)a3 + 8);
    v16 = v18;
    *((_QWORD *)this - 3) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v17;
    *v17 = v14;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const char **a4, uint64_t ***a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v9 = (char *)this - 64;
  if (*((_QWORD *)llvm::Instruction::Instruction(this, *(llvm::Type **)(*(_QWORD *)a2 + 24), 61, (llvm::ExtractElementInst *)((char *)this - 64), 2, a5)- 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v10 = *((_QWORD *)this - 7);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v13 = *((_QWORD *)a2 + 1);
  v12 = (_QWORD *)((char *)a2 + 8);
  v11 = v13;
  *((_QWORD *)this - 7) = v13;
  if (v13)
    *(_QWORD *)(v11 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v12;
  *v12 = v9;
  v14 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v15 = *((_QWORD *)this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 2);
  }
  *v14 = a3;
  if (a3)
  {
    v18 = *((_QWORD *)a3 + 1);
    v17 = (_QWORD *)((char *)a3 + 8);
    v16 = v18;
    *((_QWORD *)this - 3) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v17;
    *v17 = v14;
  }
  llvm::Value::setName(this, a4);
  return this;
}

BOOL llvm::ExtractElementInst::isValidOperands(llvm::ExtractElementInst *this, const Value *a2, const Value *a3)
{
  return (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12 && *((_BYTE *)a2->impl + 8) == 13;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::Instruction *a6)
{
  char *v11;
  uint64_t v12;
  llvm::Type *v13;
  _QWORD *v14;
  llvm::Type *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v11 = (char *)this - 96;
  if (*((_QWORD *)llvm::Instruction::Instruction(this, *a2, 62, (llvm::InsertElementInst *)((char *)this - 96), 3, a6)
       - 12))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v12 = *((_QWORD *)this - 11);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)this - 10);
  }
  *((_QWORD *)this - 12) = a2;
  v15 = a2[1];
  v14 = a2 + 1;
  v13 = v15;
  *((_QWORD *)this - 11) = v15;
  if (v15)
    *((_QWORD *)v13 + 2) = (char *)this - 88;
  *((_QWORD *)this - 10) = v14;
  *v14 = v11;
  v16 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v17 = *((_QWORD *)this - 7);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)this - 6);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)this - 7) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v19;
    *v19 = v16;
  }
  v21 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v22 = *((_QWORD *)this - 3);
    if (v22)
      *(_QWORD *)(v22 + 16) = *((_QWORD *)this - 2);
  }
  *v21 = a4;
  if (a4)
  {
    v25 = *((_QWORD *)a4 + 1);
    v24 = (_QWORD *)((char *)a4 + 8);
    v23 = v25;
    *((_QWORD *)this - 3) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v24;
    *v24 = v21;
  }
  llvm::Value::setName(this, a5);
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4, const char **a5, uint64_t ***a6)
{
  char *v11;
  uint64_t v12;
  llvm::Type *v13;
  _QWORD *v14;
  llvm::Type *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v11 = (char *)this - 96;
  if (*((_QWORD *)llvm::Instruction::Instruction(this, *a2, 62, (llvm::InsertElementInst *)((char *)this - 96), 3, a6)
       - 12))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v12 = *((_QWORD *)this - 11);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)this - 10);
  }
  *((_QWORD *)this - 12) = a2;
  v15 = a2[1];
  v14 = a2 + 1;
  v13 = v15;
  *((_QWORD *)this - 11) = v15;
  if (v15)
    *((_QWORD *)v13 + 2) = (char *)this - 88;
  *((_QWORD *)this - 10) = v14;
  *v14 = v11;
  v16 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v17 = *((_QWORD *)this - 7);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)this - 6);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)this - 7) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v19;
    *v19 = v16;
  }
  v21 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v22 = *((_QWORD *)this - 3);
    if (v22)
      *(_QWORD *)(v22 + 16) = *((_QWORD *)this - 2);
  }
  *v21 = a4;
  if (a4)
  {
    v25 = *((_QWORD *)a4 + 1);
    v24 = (_QWORD *)((char *)a4 + 8);
    v23 = v25;
    *((_QWORD *)this - 3) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v24;
    *v24 = v21;
  }
  llvm::Value::setName(this, a5);
  return this;
}

BOOL llvm::InsertElementInst::isValidOperands(llvm::InsertElementInst *this, const Value *a2, const Value *a3, const Value *a4)
{
  return (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12
      && a2->impl == *(ValueImpl **)(*(_QWORD *)this + 24)
      && *((_BYTE *)a3->impl + 8) == 13;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, llvm::Instruction *a6)
{
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  void *v27;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a4 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a4 + 8) == 19) << 32)));
  llvm::Instruction::Instruction(this, v12, 63, (llvm::ShuffleVectorInst *)((char *)this - 64), 2, a6);
  *((_QWORD *)this + 9) = (char *)this + 88;
  *((_QWORD *)this + 10) = 0x400000000;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v13 = *((_QWORD *)this - 7);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v16 = *((_QWORD *)a2 + 1);
  v15 = (_QWORD *)((char *)a2 + 8);
  v14 = v16;
  *((_QWORD *)this - 7) = v16;
  if (v16)
    *(_QWORD *)(v14 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v15;
  *v15 = (char *)this - 64;
  v17 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v18 = *((_QWORD *)this - 3);
    if (v18)
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this - 2);
  }
  *v17 = a3;
  if (a3)
  {
    v21 = *((_QWORD *)a3 + 1);
    v20 = (_QWORD *)((char *)a3 + 8);
    v19 = v21;
    *((_QWORD *)this - 3) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v20;
    *v20 = v17;
  }
  v27 = v29;
  v28 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&v27);
  v22 = v27;
  v23 = v28;
  *((_DWORD *)this + 20) = 0;
  if (v23 > *((_DWORD *)this + 21))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 72, (char *)this + 88, v23, 4);
    v24 = *((unsigned int *)this + 20);
LABEL_17:
    memcpy((void *)(*((_QWORD *)this + 9) + 4 * v24), v22, 4 * v23);
    v25 = *((_DWORD *)this + 20);
    goto LABEL_18;
  }
  if ((_DWORD)v23)
  {
    v24 = 0;
    goto LABEL_17;
  }
  v25 = 0;
LABEL_18:
  *((_DWORD *)this + 20) = v25 + v23;
  *((_QWORD *)this + 13) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v22, (llvm::LLVMContext *)v23, *(_QWORD *)this);
  llvm::Value::setName(this, a5);
  if (v27 != v29)
    free(v27);
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const char **a5, uint64_t ***a6)
{
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  void *v27;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  llvm::VectorType::get(*(llvm::ScalableVectorType **)(*(_QWORD *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a4 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a4 + 8) == 19) << 32)));
  llvm::Instruction::Instruction(this, v12, 63, (llvm::ShuffleVectorInst *)((char *)this - 64), 2, a6);
  *((_QWORD *)this + 9) = (char *)this + 88;
  *((_QWORD *)this + 10) = 0x400000000;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v13 = *((_QWORD *)this - 7);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v16 = *((_QWORD *)a2 + 1);
  v15 = (_QWORD *)((char *)a2 + 8);
  v14 = v16;
  *((_QWORD *)this - 7) = v16;
  if (v16)
    *(_QWORD *)(v14 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v15;
  *v15 = (char *)this - 64;
  v17 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v18 = *((_QWORD *)this - 3);
    if (v18)
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this - 2);
  }
  *v17 = a3;
  if (a3)
  {
    v21 = *((_QWORD *)a3 + 1);
    v20 = (_QWORD *)((char *)a3 + 8);
    v19 = v21;
    *((_QWORD *)this - 3) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v20;
    *v20 = v17;
  }
  v27 = v29;
  v28 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a4, (uint64_t)&v27);
  v22 = v27;
  v23 = v28;
  *((_DWORD *)this + 20) = 0;
  if (v23 > *((_DWORD *)this + 21))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 72, (char *)this + 88, v23, 4);
    v24 = *((unsigned int *)this + 20);
LABEL_17:
    memcpy((void *)(*((_QWORD *)this + 9) + 4 * v24), v22, 4 * v23);
    v25 = *((_DWORD *)this + 20);
    goto LABEL_18;
  }
  if ((_DWORD)v23)
  {
    v24 = 0;
    goto LABEL_17;
  }
  v25 = 0;
LABEL_18:
  *((_DWORD *)this + 20) = v25 + v23;
  *((_QWORD *)this + 13) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v22, (llvm::LLVMContext *)v23, *(_QWORD *)this);
  llvm::Value::setName(this, a5);
  if (v27 != v29)
    free(v27);
  return this;
}

uint64_t llvm::ShuffleVectorInst::ShuffleVectorInst(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, llvm::LLVMContext *a5, const char **a6, llvm::Instruction *a7)
{
  llvm::Type *v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;

  llvm::VectorType::get(*(llvm::ScalableVectorType **)(*a2 + 24), (llvm::Type *)(a5 | ((unint64_t)(*(_BYTE *)(*a2 + 8) == 19) << 32)));
  v15 = llvm::Instruction::Instruction((llvm::Instruction *)a1, v14, 63, (llvm::Use *)(a1 - 64), 2, a7);
  *((_QWORD *)v15 + 9) = a1 + 88;
  v16 = (uint64_t)v15 + 72;
  *(_QWORD *)(v16 + 8) = 0x400000000;
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v17 = *(_QWORD *)(a1 - 56);
    if (v17)
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 - 48);
  }
  *(_QWORD *)(a1 - 64) = a2;
  v20 = a2[1];
  v19 = a2 + 1;
  v18 = v20;
  *(_QWORD *)(a1 - 56) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = a1 - 56;
  *(_QWORD *)(a1 - 48) = v19;
  *v19 = a1 - 64;
  v21 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v22 = *(_QWORD *)(a1 - 24);
    if (v22)
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v21 = a3;
  if (a3)
  {
    v25 = *(_QWORD *)(a3 + 8);
    v24 = (_QWORD *)(a3 + 8);
    v23 = v25;
    *(_QWORD *)(a1 - 24) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v24;
    *v24 = v21;
  }
  v26 = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if ((unint64_t)(4 * (_QWORD)a5) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(a1 + 88), (4 * (uint64_t)a5) >> 2, 4);
    v26 = *(_DWORD *)(a1 + 80);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * v26), a4, 4 * (_QWORD)a5);
    v26 = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(a1 + 80) = v26 + ((unint64_t)(4 * (_QWORD)a5) >> 2);
  *(_QWORD *)(a1 + 104) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)a4, a5, *(_QWORD *)a1);
  llvm::Value::setName((llvm::Value *)a1, a6);
  return a1;
}

void llvm::ShuffleVectorInst::getShuffleMask(llvm::ConstantDataSequential *this, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  Type *v14;
  llvm::APFloatBase *AggregateElement;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  int i;

  v3 = *(unsigned int *)(*(_QWORD *)this + 32);
  if (*((_BYTE *)this + 16) == 13)
  {
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != (_DWORD)v3)
    {
      if (v4 <= v3)
      {
        v5 = *(unsigned int *)(a2 + 8);
        if (*(_DWORD *)(a2 + 12) < v3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v3, 4);
          v5 = *(unsigned int *)(a2 + 8);
        }
        bzero((void *)(*(_QWORD *)a2 + 4 * v5), 4 * (v3 - v4));
        LODWORD(v3) = *(_DWORD *)(a2 + 8) + v3 - v4;
      }
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (*(_DWORD *)(a2 + 12) < v3)
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v3, 4);
    if (v7 == 19)
    {
      if (*((unsigned __int8 *)this + 16) - 11 >= 2)
        v8 = 0;
      else
        v8 = -1;
      for (i = v8; (_DWORD)v3; LODWORD(v3) = v3 - 1)
      {
        while (1)
        {
          v9 = *(unsigned int *)(a2 + 8);
          if (v9 >= *(_DWORD *)(a2 + 12))
            break;
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = i;
          ++*(_DWORD *)(a2 + 8);
          LODWORD(v3) = v3 - 1;
          if (!(_DWORD)v3)
            return;
        }
        llvm::SmallVectorTemplateBase<int,true>::growAndEmplaceBack<int &>(a2, &i);
      }
    }
    else if ((*((_BYTE *)this + 16) & 0xFE) == 0xE)
    {
      if ((_DWORD)v3)
      {
        v10 = 0;
        do
        {
          llvm::ConstantDataSequential::getElementAsInteger(this);
          v12 = v11;
          v13 = *(unsigned int *)(a2 + 8);
          if (v13 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13 + 1, 4);
            v13 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v13) = v12;
          ++*(_DWORD *)(a2 + 8);
          ++v10;
        }
        while ((_DWORD)v3 != v10);
      }
    }
    else if ((_DWORD)v3)
    {
      v14 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(this, v14);
        if (*((unsigned __int8 *)AggregateElement + 16) - 11 >= 2)
        {
          v17 = (_QWORD *)((char *)AggregateElement + 24);
          if (*((_DWORD *)AggregateElement + 8) >= 0x41u)
            v17 = (_QWORD *)*v17;
          v16 = (_QWORD *)*v17;
        }
        else
        {
          LODWORD(v16) = -1;
        }
        v18 = *(unsigned int *)(a2 + 8);
        if (v18 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v18 + 1, 4);
          v18 = *(unsigned int *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = (_DWORD)v16;
        ++*(_DWORD *)(a2 + 8);
        v14 = (Type *)((_DWORD)v14 + 1);
      }
      while ((_DWORD)v3 != (_DWORD)v14);
    }
  }
}

BOOL llvm::ShuffleVectorInst::isValidOperands(uint64_t *a1, _QWORD *a2, int *__s2, uint64_t a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int *i;

  v4 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) != 0x12 || v4 != *a2)
    return 0;
  if (a4)
  {
    v6 = 2 * *(_DWORD *)(v4 + 32);
    v7 = 4 * a4;
    for (i = __s2; *i == -1 || *i < v6; ++i)
    {
      v7 -= 4;
      if (!v7)
        return *(_DWORD *)(*a1 + 8) != 19
            || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
    }
    return 0;
  }
  return *(_DWORD *)(*a1 + 8) != 19
      || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
}

uint64_t llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(int *a1, llvm::LLVMContext *a2, uint64_t a3)
{
  llvm::ScalableVectorType *Int32Ty;
  BOOL v7;
  llvm::PoisonValue *v8;
  llvm::UndefValue *v9;
  llvm::Type *v10;
  uint64_t v12;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  llvm::FixedVectorType **v21[17];

  v21[16] = *(llvm::FixedVectorType ***)MEMORY[0x1E0C80C00];
  Int32Ty = (llvm::ScalableVectorType *)llvm::Type::getInt32Ty(*(llvm::Type **)a3, a2);
  v8 = Int32Ty;
  if (*(_BYTE *)(a3 + 8) == 19)
  {
    llvm::VectorType::get(Int32Ty, (llvm::Type *)(a2 | 0x100000000));
    if (*a1)
      return llvm::UndefValue::get(v9, v10);
    else
      return llvm::Constant::getNullValue(v9, (Type *)v10);
  }
  v19 = v21;
  v20 = 0x1000000000;
  if (a2)
  {
    v12 = 4 * (_QWORD)a2;
    while (1)
    {
      v13 = (llvm::Type *)*a1;
      if ((_DWORD)v13 == -1)
      {
        v14 = llvm::PoisonValue::get(v8, v13);
        v15 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
LABEL_11:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v15 + 1, 8);
          v15 = v20;
        }
      }
      else
      {
        v14 = llvm::ConstantInt::get(v8, v13, 0, v7);
        v15 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
          goto LABEL_11;
      }
      *((_QWORD *)v19 + v15) = v14;
      v16 = (llvm::Type *)(v20 + 1);
      LODWORD(v20) = v20 + 1;
      ++a1;
      v12 -= 4;
      if (!v12)
      {
        v17 = llvm::ConstantVector::get((llvm::FixedVectorType ***)v19, v16);
        v18 = v19;
        if (v19 != v21)
          goto LABEL_13;
        return (uint64_t)v17;
      }
    }
  }
  v17 = llvm::ConstantVector::get(v21, 0);
  v18 = v19;
  if (v19 != v21)
LABEL_13:
    free(v18);
  return (uint64_t)v17;
}

void llvm::InsertValueInst::init(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, uint64_t a5, const char **a6)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v10 = (_QWORD *)(a1 - 64);
  if (*(_QWORD *)(a1 - 64))
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v11 = *(_QWORD *)(a1 - 56);
    if (v11)
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v10 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v12 = (_QWORD *)(a2 + 8);
    v13 = v14;
    *(_QWORD *)(a1 - 56) = v14;
    if (v14)
      *(_QWORD *)(v13 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v12;
    *v12 = v10;
  }
  v15 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v16 = *(_QWORD *)(a1 - 24);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v15 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v17 = (_QWORD *)(a3 + 8);
    v18 = v19;
    *(_QWORD *)(a1 - 24) = v19;
    if (v19)
      *(_QWORD *)(v18 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v17;
    *v17 = v15;
  }
  v20 = 4 * a5;
  v21 = *(unsigned int *)(a1 + 80);
  v22 = v21 + ((4 * a5) >> 2);
  if (v22 > *(unsigned int *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, (void *)(a1 + 88), v22, 4);
    LODWORD(v21) = *(_DWORD *)(a1 + 80);
  }
  if (a5)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * v21), __src, 4 * a5);
    LODWORD(v21) = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(a1 + 80) = v21 + (v20 >> 2);
  llvm::Value::setName((llvm::Value *)a1, a6);
}

void llvm::ExtractValueInst::init(uint64_t a1, void *__src, uint64_t a3, const char **a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;

  v8 = 4 * a3;
  v9 = *(unsigned int *)(a1 + 80);
  v10 = v9 + ((4 * a3) >> 2);
  if (v10 > *(unsigned int *)(a1 + 84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, (void *)(a1 + 88), v10, 4);
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
  }
  if (a3)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * v9), __src, v8);
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
  }
  *(_DWORD *)(a1 + 80) = v9 + (v8 >> 2);
  llvm::Value::setName((llvm::Value *)a1, a4);
}

uint64_t llvm::ExtractValueInst::getIndexedType(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  BOOL v7;

  if (a3)
  {
    v3 = 4 * a3;
    while (1)
    {
      while (1)
      {
        v4 = *a2;
        v5 = *(unsigned __int8 *)(result + 8);
        if (v5 != 17 || result == 0)
          break;
        if (*(_QWORD *)(result + 32) <= v4)
          return 0;
        result = *(_QWORD *)(result + 24);
        ++a2;
        v3 -= 4;
        if (!v3)
          return result;
      }
      v7 = v5 != 16 || result == 0;
      if (v7 || v4 >= *(_DWORD *)(result + 12))
        break;
      result = *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v4);
      ++a2;
      v3 -= 4;
      if (!v3)
        return result;
    }
    return 0;
  }
  return result;
}

llvm::Instruction *llvm::UnaryOperator::Create(char a1, uint64_t a2, const char **a3, llvm::Instruction *a4)
{
  llvm::Instruction *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
  v9 = (_QWORD *)((char *)v8 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(v8, *(llvm::Type **)a2, a1, (llvm::Instruction *)((char *)v8 - 32), 1, a4)- 4))
  {
    **((_QWORD **)v8 - 2) = *((_QWORD *)v8 - 3);
    v10 = *((_QWORD *)v8 - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 - 2);
  }
  *((_QWORD *)v8 - 4) = a2;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v8 - 3) = v12;
  v13 = (_QWORD *)((char *)v8 - 24);
  if (v12)
    *(_QWORD *)(v12 + 16) = v13;
  *((_QWORD *)v8 - 2) = v11;
  *v11 = v9;
  if (*((_QWORD *)v8 - 4))
  {
    **((_QWORD **)v8 - 2) = *((_QWORD *)v8 - 3);
    v14 = *((_QWORD *)v8 - 3);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v8 - 2);
  }
  *v9 = a2;
  v15 = *(_QWORD *)(a2 + 8);
  *v13 = v15;
  if (v15)
    *(_QWORD *)(v15 + 16) = v13;
  *((_QWORD *)v8 - 2) = v11;
  *v11 = v9;
  llvm::Value::setName(v8, a3);
  return v8;
}

llvm::MCSymbolXCOFF *llvm::UnaryOperator::Create(char a1, uint64_t a2, const char **a3, uint64_t a4)
{
  llvm::MCSymbolXCOFF *v5;

  v5 = llvm::UnaryOperator::Create(a1, a2, a3, 0);
  llvm::Instruction::insertInto(v5, a4, (uint64_t ***)(a4 + 48));
  return v5;
}

llvm::Instruction *llvm::BinaryOperator::Create(char a1, uint64_t a2, uint64_t a3, const char **a4, llvm::Instruction *a5)
{
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v10 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 2u);
  if (*((_QWORD *)llvm::Instruction::Instruction(v10, *(llvm::Type **)a2, a1, (llvm::Instruction *)((char *)v10 - 64), 2, a5)- 8))
  {
    **((_QWORD **)v10 - 6) = *((_QWORD *)v10 - 7);
    v11 = *((_QWORD *)v10 - 7);
    if (v11)
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 - 6);
  }
  *((_QWORD *)v10 - 8) = a2;
  v14 = *(_QWORD *)(a2 + 8);
  v13 = (_QWORD *)(a2 + 8);
  v12 = v14;
  *((_QWORD *)v10 - 7) = v14;
  if (v14)
    *(_QWORD *)(v12 + 16) = (char *)v10 - 56;
  *((_QWORD *)v10 - 6) = v13;
  *v13 = (char *)v10 - 64;
  v15 = (_QWORD *)((char *)v10 - 32);
  if (*((_QWORD *)v10 - 4))
  {
    **((_QWORD **)v10 - 2) = *((_QWORD *)v10 - 3);
    v16 = *((_QWORD *)v10 - 3);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v10 - 2);
  }
  *v15 = a3;
  if (a3)
  {
    v19 = *(_QWORD *)(a3 + 8);
    v18 = (_QWORD *)(a3 + 8);
    v17 = v19;
    *((_QWORD *)v10 - 3) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = (char *)v10 - 24;
    *((_QWORD *)v10 - 2) = v18;
    *v18 = v15;
  }
  llvm::Value::setName(v10, a4);
  return v10;
}

llvm::MCSymbolXCOFF *llvm::BinaryOperator::Create(char a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  llvm::MCSymbolXCOFF *v6;

  v6 = llvm::BinaryOperator::Create(a1, a2, a3, a4, 0);
  llvm::Instruction::insertInto(v6, a5, (uint64_t ***)(a5 + 48));
  return v6;
}

uint64_t llvm::CastInst::isEliminableCastPair(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;

  v5 = a1 == 49;
  if (a2 != 49)
    v5 = 0;
  if (a1 == 49 && ((*(_DWORD *)(a3 + 8) & 0xFE) == 18) != ((*(_DWORD *)(a4 + 8) & 0xFE) == 18))
  {
    if (!v5)
      return 0;
LABEL_9:
    __asm { BR              X9 }
  }
  if (a2 != 49 || v5 | ((*(_DWORD *)(a4 + 8) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18))
    goto LABEL_9;
  return 0;
}

void llvm::CastInst::Create(int a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

llvm::Instruction *sub_180CFE50C()
{
  const char **v0;
  uint64_t v1;
  llvm::Instruction *v2;
  llvm::Type *v3;
  llvm::Instruction *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
  v5 = (_QWORD *)((char *)v4 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(v4, v3, 38, (llvm::Instruction *)((char *)v4 - 32), 1, v2) - 4))
  {
    **((_QWORD **)v4 - 2) = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 3);
    if (v6)
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v4 - 2);
  }
  *v5 = v1;
  if (v1)
  {
    v9 = *(_QWORD *)(v1 + 8);
    v8 = (_QWORD *)(v1 + 8);
    v7 = v9;
    *((_QWORD *)v4 - 3) = v9;
    if (v9)
      *(_QWORD *)(v7 + 16) = (char *)v4 - 24;
    *((_QWORD *)v4 - 2) = v8;
    *v8 = v5;
  }
  llvm::Value::setName(v4, v0);
  return v4;
}

llvm::ZExtInst *llvm::ZExtInst::ZExtInst(llvm::ZExtInst *this, llvm::Value *a2, llvm::Type *a3, const char **a4, llvm::Instruction *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(this, a3, 39, (llvm::ZExtInst *)((char *)this - 32), 1, a5) - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v9 = *((_QWORD *)this - 3);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)this - 2);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *((_QWORD *)a2 + 1);
    v11 = (_QWORD *)((char *)a2 + 8);
    v10 = v12;
    *((_QWORD *)this - 3) = v12;
    if (v12)
      *(_QWORD *)(v10 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v11;
    *v11 = v8;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::Instruction *sub_180CFE91C()
{
  const char **v0;
  uint64_t v1;
  uint64_t ***v2;
  llvm::Type *v3;
  llvm::Instruction *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
  v5 = (_QWORD *)((char *)v4 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(v4, v3, 38, (llvm::Instruction *)((char *)v4 - 32), 1, v2) - 4))
  {
    **((_QWORD **)v4 - 2) = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 3);
    if (v6)
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v4 - 2);
  }
  *v5 = v1;
  if (v1)
  {
    v9 = *(_QWORD *)(v1 + 8);
    v8 = (_QWORD *)(v1 + 8);
    v7 = v9;
    *((_QWORD *)v4 - 3) = v9;
    if (v9)
      *(_QWORD *)(v7 + 16) = (char *)v4 - 24;
    *((_QWORD *)v4 - 2) = v8;
    *v8 = v5;
  }
  llvm::Value::setName(v4, v0);
  return v4;
}

llvm::Value *llvm::CastInst::CreatePointerCast(llvm::CastInst *this, llvm::Value *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::Instruction *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    if (*(_BYTE *)(**((_QWORD **)a2 + 2) + 8) != 13)
      return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(this, a2, a3, a4, a5);
  }
  else if (*((_DWORD *)a2 + 2) != 13)
  {
    return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(this, a2, a3, a4, a5);
  }
  v10 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
  v11 = (_QWORD *)((char *)v10 - 32);
  if (*((_QWORD *)llvm::Instruction::Instruction(v10, a2, 47, (llvm::Instruction *)((char *)v10 - 32), 1, a4) - 4))
  {
    **((_QWORD **)v10 - 2) = *((_QWORD *)v10 - 3);
    v12 = *((_QWORD *)v10 - 3);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 - 2);
  }
  *v11 = this;
  if (this)
  {
    v15 = *((_QWORD *)this + 1);
    v14 = (_QWORD *)((char *)this + 8);
    v13 = v15;
    *((_QWORD *)v10 - 3) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = (char *)v10 - 24;
    *((_QWORD *)v10 - 2) = v14;
    *v14 = v11;
  }
  llvm::Value::setName(v10, a3);
  return v10;
}

llvm::Value *llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(llvm::CastInst *this, llvm::Value *a2, const char **a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v9;
  int v10;
  unsigned int v11;
  llvm::Instruction *v12;
  llvm::Value *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v9 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8);
  v10 = *((_DWORD *)a2 + 2);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  v11 = v10 ^ v9;
  v12 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x48, 1u);
  v13 = v12;
  v14 = (char *)v12 - 32;
  if (v11 >= 0x100)
  {
    llvm::Instruction::Instruction(v12, a2, 50, (llvm::Instruction *)((char *)v12 - 32), 1, a4);
    if (!*((_QWORD *)v13 - 4))
      goto LABEL_11;
  }
  else
  {
    llvm::Instruction::Instruction(v12, a2, 49, (llvm::Instruction *)((char *)v12 - 32), 1, a4);
    if (!*((_QWORD *)v13 - 4))
      goto LABEL_11;
  }
  **((_QWORD **)v13 - 2) = *((_QWORD *)v13 - 3);
  v15 = *((_QWORD *)v13 - 3);
  if (v15)
    *(_QWORD *)(v15 + 16) = *((_QWORD *)v13 - 2);
LABEL_11:
  *((_QWORD *)v13 - 4) = this;
  v18 = *((_QWORD *)this + 1);
  v17 = (_QWORD *)((char *)this + 8);
  v16 = v18;
  *((_QWORD *)v13 - 3) = v18;
  if (v18)
    *(_QWORD *)(v16 + 16) = (char *)v13 - 24;
  *((_QWORD *)v13 - 2) = v17;
  *v17 = v14;
  llvm::Value::setName(v13, a3);
  return v13;
}

BOOL llvm::CastInst::castIsValid(int a1, llvm::Type *this, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v7;
  int v8;
  int v10;
  int v11;
  _BOOL8 result;
  unsigned int ScalarSizeInBits;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  llvm::Type *v25;
  uint64_t v26;
  unint64_t PrimitiveSizeInBits;
  char v28;
  char v29;
  char v30;

  v3 = *((_DWORD *)this + 2);
  v4 = v3;
  if (v3 == 7 || v3 == 14)
    return 0;
  v7 = *(_DWORD *)(a3 + 8);
  v8 = v7;
  if (v7 == 7 || v7 == 14)
    return 0;
  v10 = v3 & 0xFE;
  if (v10 == 16)
    return 0;
  v11 = v7 & 0xFE;
  if (v11 == 16)
    return 0;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  v16 = llvm::Type::getScalarSizeInBits((llvm::Type *)a3);
  if (v10 == 18)
    v17 = *((unsigned int *)this + 8) | ((unint64_t)(v3 == 19) << 32);
  else
    v17 = 0;
  if (v11 == 18)
    v18 = *(unsigned int *)(a3 + 32) | ((unint64_t)(v7 == 19) << 32);
  else
    v18 = 0;
  switch(a1)
  {
    case '&':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v17 == (_DWORD)v18 && HIDWORD(v17) == HIDWORD(v18) && ScalarSizeInBits > v16;
    case '\'':
    case '(':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v17 == (_DWORD)v18 && HIDWORD(v17) == HIDWORD(v18) && ScalarSizeInBits < v16;
    case ')':
    case '*':
      if (v10 == 18)
        v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      v19 = v8 == 13 && (_DWORD)v17 == (_DWORD)v18;
      return v19 && HIDWORD(v17) == HIDWORD(v18);
    case '+':
    case ',':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 < 4u || v7 == 5)
      {
        if ((_DWORD)v17 != (_DWORD)v18)
          return 0;
        return HIDWORD(v17) == HIDWORD(v18);
      }
      result = 0;
      if ((v7 & 0xFD) == 4 && (_DWORD)v17 == (_DWORD)v18)
        return HIDWORD(v17) == HIDWORD(v18);
      return result;
    case '-':
      if (v10 == 18)
        v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4)
        return 0;
      return (_DWORD)v17 == (_DWORD)v18 && HIDWORD(v17) == HIDWORD(v18) && ScalarSizeInBits > v16;
    case '.':
      if (v10 == 18)
        v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4)
        return 0;
      return (_DWORD)v17 == (_DWORD)v18 && HIDWORD(v17) == HIDWORD(v18) && ScalarSizeInBits < v16;
    case '/':
      result = 0;
      if (v17 != v18)
        return result;
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 15)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      return v8 == 13;
    case '0':
      result = 0;
      if (v17 != v18)
        return result;
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      return v8 == 15;
    case '1':
      v25 = this;
      if (v10 == 18)
      {
        v25 = (llvm::Type *)**((_QWORD **)this + 2);
        v4 = *((unsigned __int8 *)v25 + 8);
      }
      if (v4 != 15)
        v25 = 0;
      v26 = a3;
      if (v11 == 18)
      {
        v26 = **(_QWORD **)(a3 + 16);
        v8 = *(unsigned __int8 *)(v26 + 8);
      }
      if (v8 != 15)
        v26 = 0;
      if ((v25 == 0) == (v26 != 0))
        return 0;
      if (v25)
      {
        if ((*(_DWORD *)(v26 + 8) ^ *((_DWORD *)v25 + 2)) > 0xFF)
          return 0;
        if (v10 == 18 && v11 == 18)
        {
          v19 = (_DWORD)v17 == (_DWORD)v18;
          return v19 && HIDWORD(v17) == HIDWORD(v18);
        }
        else if (v10 == 18)
        {
          return (_DWORD)v17 == 1 && HIDWORD(v17) == 0;
        }
        else
        {
          if (v11 != 18)
            return 1;
          return (_DWORD)v18 == 1 && HIDWORD(v18) == 0;
        }
      }
      else
      {
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
        v29 = v28;
        if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3))
          return 0;
        return v29 == v30;
      }
    case '2':
      if (v10 == 18)
        v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
      if (v3 != 15)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 15)
        return 0;
      v19 = (v7 ^ v3) > 0xFF && (_DWORD)v17 == (_DWORD)v18;
      return v19 && HIDWORD(v17) == HIDWORD(v18);
    default:
      return 0;
  }
}

_WORD *llvm::CmpInst::CmpInst(_WORD *a1, llvm::Type *a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const char **a7, llvm::Instruction *a8, Value *a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v14 = a1 - 32;
  if (*((_QWORD *)llvm::Instruction::Instruction((llvm::Instruction *)a1, a2, a3, (llvm::Use *)(a1 - 32), 2, a8) - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v15 = *((_QWORD *)a1 - 7);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)a1 - 6);
  }
  *v14 = a5;
  if (a5)
  {
    v18 = *(_QWORD *)(a5 + 8);
    v17 = (_QWORD *)(a5 + 8);
    v16 = v18;
    *((_QWORD *)a1 - 7) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = a1 - 28;
    *((_QWORD *)a1 - 6) = v17;
    *v17 = v14;
  }
  v19 = a1 - 16;
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v20 = *((_QWORD *)a1 - 3);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a1 - 2);
  }
  *v19 = a6;
  if (a6)
  {
    v23 = *(_QWORD *)(a6 + 8);
    v22 = (_QWORD *)(a6 + 8);
    v21 = v23;
    *((_QWORD *)a1 - 3) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 12;
    *((_QWORD *)a1 - 2) = v22;
    *v22 = v19;
  }
  a1[9] = a1[9] & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  if (a9)
    llvm::Instruction::copyIRFlags((uint64_t)a1, a9, 1);
  return a1;
}

_WORD *llvm::CmpInst::CmpInst(_WORD *a1, llvm::Type *a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const char **a7, uint64_t ***a8)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v13 = a1 - 32;
  if (*((_QWORD *)llvm::Instruction::Instruction((llvm::Instruction *)a1, a2, a3, (llvm::Use *)(a1 - 32), 2, a8) - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v14 = *((_QWORD *)a1 - 7);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)a1 - 6);
  }
  *v13 = a5;
  if (a5)
  {
    v17 = *(_QWORD *)(a5 + 8);
    v16 = (_QWORD *)(a5 + 8);
    v15 = v17;
    *((_QWORD *)a1 - 7) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = a1 - 28;
    *((_QWORD *)a1 - 6) = v16;
    *v16 = v13;
  }
  v18 = a1 - 16;
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v19 = *((_QWORD *)a1 - 3);
    if (v19)
      *(_QWORD *)(v19 + 16) = *((_QWORD *)a1 - 2);
  }
  *v18 = a6;
  if (a6)
  {
    v22 = *(_QWORD *)(a6 + 8);
    v21 = (_QWORD *)(a6 + 8);
    v20 = v22;
    *((_QWORD *)a1 - 3) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 12;
    *((_QWORD *)a1 - 2) = v21;
    *v21 = v18;
  }
  a1[9] = a1[9] & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  return a1;
}

llvm::Instruction *llvm::ICmpInst::ICmpInst(llvm::Instruction *a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, const char **a5)
{
  __int16 v8;
  uint64_t v10;
  int v11;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v13;
  BOOL v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v8 = (__int16)a2;
  v10 = *a3;
  v11 = *(_DWORD *)(*a3 + 8) & 0xFE;
  Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)*a3, a2);
  v13 = Int1Ty;
  if (v10)
    v14 = v11 == 18;
  else
    v14 = 0;
  if (v14)
  {
    llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v10 + 32) | ((unint64_t)(*(_BYTE *)(v10 + 8) == 19) << 32)));
    v13 = v15;
  }
  llvm::Instruction::Instruction(a1, v13, 53, (llvm::Instruction *)((char *)a1 - 64), 2, 0);
  if (*((_QWORD *)a1 - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v16 = *((_QWORD *)a1 - 7);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)a1 - 6);
  }
  *((_QWORD *)a1 - 8) = a3;
  v19 = a3[1];
  v18 = a3 + 1;
  v17 = v19;
  *((_QWORD *)a1 - 7) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = (char *)a1 - 56;
  *((_QWORD *)a1 - 6) = v18;
  *v18 = (char *)a1 - 64;
  v20 = (_QWORD *)((char *)a1 - 32);
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v21 = *((_QWORD *)a1 - 3);
    if (v21)
      *(_QWORD *)(v21 + 16) = *((_QWORD *)a1 - 2);
  }
  *v20 = a4;
  if (a4)
  {
    v24 = *(_QWORD *)(a4 + 8);
    v23 = (_QWORD *)(a4 + 8);
    v22 = v24;
    *((_QWORD *)a1 - 3) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = (char *)a1 - 24;
    *((_QWORD *)a1 - 2) = v23;
    *v23 = v20;
  }
  *((_WORD *)a1 + 9) = *((_WORD *)a1 + 9) & 0xFFC0 | v8;
  llvm::Value::setName(a1, a5);
  return a1;
}

_QWORD *llvm::CmpInst::Create(int a1, __int16 a2, uint64_t a3, uint64_t a4, const char **a5, uint64_t ***a6)
{
  llvm::LLVMContext *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  llvm::ScalableVectorType *Int1Ty;
  llvm::Type *v18;
  llvm::Type *v19;
  _WORD *v20;
  llvm::Type *v21;
  char v22;
  llvm::Type *v23;

  v13 = llvm::User::operator new((llvm::User *)0x48, 2u);
  v14 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    v15 = (*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 18;
  else
    v15 = 0;
  v16 = !v15;
  Int1Ty = (llvm::ScalableVectorType *)llvm::Type::getInt1Ty(*(llvm::Type **)v14, v12);
  v18 = Int1Ty;
  if (a1 == 53)
  {
    if ((v16 & 1) == 0)
    {
      llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_BYTE *)(v14 + 8) == 19) << 32)));
      v18 = v19;
    }
    v20 = v13;
    v21 = v18;
    v22 = 53;
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      llvm::VectorType::get(Int1Ty, (llvm::Type *)(*(unsigned int *)(v14 + 32) | ((unint64_t)(*(_BYTE *)(v14 + 8) == 19) << 32)));
      v18 = v23;
    }
    v20 = v13;
    v21 = v18;
    v22 = 54;
  }
  llvm::CmpInst::CmpInst(v20, v21, v22, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t llvm::CmpInst::getInversePredicate(int a1)
{
  return dword_181282E48[a1];
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, unsigned int a2)
{
  uint64_t v3;
  size_t v4;
  const char *v5;
  void *v6;

  if (a2 > 0x29)
  {
    v5 = "unknown";
    v4 = 7;
    v6 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v6 >= 7uLL)
      goto LABEL_3;
  }
  else
  {
    v3 = (int)a2;
    v4 = *(_QWORD *)((char *)&unk_181282EF0 + v3 * 8);
    v5 = off_1E0E763E0[v3];
    v6 = (void *)*((_QWORD *)this + 4);
    if (v4 <= *((_QWORD *)this + 3) - (_QWORD)v6)
    {
LABEL_3:
      memcpy(v6, v5, v4);
      *((_QWORD *)this + 4) += v4;
      return this;
    }
  }
  llvm::raw_ostream::write(this, v5, v4);
  return this;
}

uint64_t llvm::CmpInst::getSwappedPredicate(int a1)
{
  return dword_181283040[a1];
}

void llvm::ICmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

BOOL sub_180CFF918(uint64_t a1, const void **a2)
{
  if (*(_DWORD *)(a1 + 8) > 0x40u)
    return llvm::APInt::equalSlowCase((const void **)a1, a2);
  else
    return *(_QWORD *)a1 == (_QWORD)*a2;
}

void llvm::FCmpInst::compare(_QWORD *a1, uint64_t a2, int a3)
{
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  void *v7;
  const llvm::detail::DoubleAPFloat *v8;

  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v6 = (void *)a1[1];
  v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  v8 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v7 == v6)
    llvm::detail::DoubleAPFloat::compare(v5, v8);
  else
    llvm::detail::IEEEFloat::compare(v5, v8);
  __asm { BR              X11 }
}

BOOL sub_180CFFA7C@<W0>(int a1@<W8>)
{
  return (a1 - 1) < 2;
}

BOOL sub_180CFFA98@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

BOOL sub_180CFFAB0@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFD) == 0;
}

BOOL sub_180CFFAC8@<W0>(int a1@<W8>)
{
  return a1 != 3;
}

BOOL sub_180CFFAE0@<W0>(int a1@<W8>)
{
  return a1 == 3;
}

BOOL sub_180CFFAF8@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFD) == 1;
}

BOOL sub_180CFFB14@<W0>(int a1@<W8>)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

BOOL sub_180CFFB30@<W0>(int a1@<W8>)
{
  return a1 != 0;
}

BOOL sub_180CFFB48@<W0>(int a1@<W8>)
{
  return a1 == 3 || a1 == 0;
}

BOOL sub_180CFFB64@<W0>(int a1@<W8>)
{
  return a1 != 2;
}

BOOL sub_180CFFB7C@<W0>(int a1@<W8>)
{
  return a1 != 1;
}

uint64_t sub_180CFFB94()
{
  return 1;
}

BOOL llvm::CmpInst::isUnordered(int a1)
{
  return (a1 - 8) < 7;
}

uint64_t llvm::CmpInst::isTrueWhenEqual(unsigned int a1)
{
  return (a1 < 0x2A) & (0x2A90000AA00uLL >> a1);
}

_QWORD *llvm::SwitchInst::init(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, unsigned int a4)
{
  _QWORD *result;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  *((_DWORD *)this + 18) = a4;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | 2;
  result = llvm::User::allocHungoffUses(this, a4, 0);
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v9 = (char *)*((_QWORD *)this - 1);
    if (!*(_QWORD *)v9)
      goto LABEL_7;
  }
  else
  {
    v9 = (char *)this - 32 * (v8 & 0x7FFFFFF);
    if (!*(_QWORD *)v9)
      goto LABEL_7;
  }
  **((_QWORD **)v9 + 2) = *((_QWORD *)v9 + 1);
  v10 = *((_QWORD *)v9 + 1);
  if (v10)
    *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
LABEL_7:
  *(_QWORD *)v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (_QWORD *)((char *)a2 + 8);
    v11 = v13;
    *((_QWORD *)v9 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v12;
    *v12 = v9;
  }
  v14 = *((_DWORD *)this + 5);
  if ((v14 & 0x40000000) != 0)
  {
    v15 = (char *)*((_QWORD *)this - 1);
    v16 = v15 + 32;
    if (!*((_QWORD *)v15 + 4))
      goto LABEL_17;
  }
  else
  {
    v15 = (char *)this - 32 * (v14 & 0x7FFFFFF);
    v16 = v15 + 32;
    if (!*((_QWORD *)v15 + 4))
      goto LABEL_17;
  }
  **((_QWORD **)v15 + 6) = *((_QWORD *)v15 + 5);
  v17 = *((_QWORD *)v15 + 5);
  if (v17)
    *(_QWORD *)(v17 + 16) = *((_QWORD *)v15 + 6);
LABEL_17:
  *v16 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)v15 + 5) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = v15 + 40;
    *((_QWORD *)v15 + 6) = v19;
    *v19 = v16;
  }
  return result;
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::Instruction *a5)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v11;
  llvm::Type *VoidTy;
  llvm::Instruction *v13;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v11);
  v13 = llvm::Instruction::Instruction(this, VoidTy, 3, 0, 0, a5);
  llvm::SwitchInst::init(v13, a2, a3, 2 * a4 + 2);
  return this;
}

void llvm::SwitchInst::addCase(llvm::SwitchInst *this, llvm::ConstantInt *a2, llvm::BasicBlock *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  char *v27;

  v6 = *((_DWORD *)this + 5);
  v7 = ((v6 >> 1) & 0x3FFFFFF) - 1;
  v8 = v6 & 0x7FFFFFF;
  v9 = (v6 & 0x7FFFFFF) + 2;
  if (v9 > *((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = 3 * v8;
    llvm::User::growHungoffUses(this, 3 * v8, 0);
    v6 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v9 & 0x7FFFFFF;
  v10 = 2 * v7 + 2;
  if ((v6 & 0x40000000) != 0)
  {
    v11 = (char *)*((_QWORD *)this - 1);
    v12 = v10 & 0xFFFFFFFE;
    v13 = &v11[32 * v12];
    if (!*(_QWORD *)v13)
      goto LABEL_9;
  }
  else
  {
    v11 = (char *)this - 32 * (v9 & 0x7FFFFFF);
    v12 = v10 & 0xFFFFFFFE;
    v13 = &v11[32 * v12];
    if (!*(_QWORD *)v13)
      goto LABEL_9;
  }
  **((_QWORD **)v13 + 2) = *((_QWORD *)v13 + 1);
  v14 = *((_QWORD *)v13 + 1);
  if (v14)
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
LABEL_9:
  *(_QWORD *)v13 = a2;
  if (a2)
  {
    v17 = *((_QWORD *)a2 + 1);
    v16 = (char **)((char *)a2 + 8);
    v15 = v17;
    v18 = &v11[32 * v12];
    *((_QWORD *)v18 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v18 + 8;
    *((_QWORD *)v18 + 2) = v16;
    *v16 = v13;
  }
  v19 = (2 * v7 + 3);
  v20 = *((_DWORD *)this + 5);
  if ((v20 & 0x40000000) != 0)
  {
    v21 = (char *)*((_QWORD *)this - 1);
    v22 = &v21[32 * v19];
    if (!*(_QWORD *)v22)
      goto LABEL_19;
  }
  else
  {
    v21 = (char *)this - 32 * (v20 & 0x7FFFFFF);
    v22 = &v21[32 * v19];
    if (!*(_QWORD *)v22)
      goto LABEL_19;
  }
  **((_QWORD **)v22 + 2) = *((_QWORD *)v22 + 1);
  v23 = *((_QWORD *)v22 + 1);
  if (v23)
    *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
LABEL_19:
  *(_QWORD *)v22 = a3;
  if (a3)
  {
    v26 = *((_QWORD *)a3 + 1);
    v25 = (char **)((char *)a3 + 8);
    v24 = v26;
    v27 = &v21[32 * v19];
    *((_QWORD *)v27 + 1) = v26;
    if (v26)
      *(_QWORD *)(v24 + 16) = v27 + 8;
    *((_QWORD *)v27 + 2) = v25;
    *v25 = v22;
  }
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::Instruction *a4)
{
  llvm::Type *DesiredBytecodeVersion;
  llvm::LLVMContext *v9;
  llvm::Type *VoidTy;
  llvm::Instruction *v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  DesiredBytecodeVersion = (llvm::Type *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2);
  VoidTy = (llvm::Type *)llvm::Type::getVoidTy(DesiredBytecodeVersion, v9);
  v11 = llvm::Instruction::Instruction(this, VoidTy, 4, 0, 0, a4);
  *((_DWORD *)this + 18) = a3 + 1;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xF8000000 | 1;
  llvm::User::allocHungoffUses(v11, a3 + 1, 0);
  v12 = *((_DWORD *)this + 5);
  if ((v12 & 0x40000000) != 0)
  {
    v13 = (char *)*((_QWORD *)this - 1);
    if (!*(_QWORD *)v13)
      goto LABEL_7;
  }
  else
  {
    v13 = (char *)this - 32 * (v12 & 0x7FFFFFF);
    if (!*(_QWORD *)v13)
      goto LABEL_7;
  }
  **((_QWORD **)v13 + 2) = *((_QWORD *)v13 + 1);
  v14 = *((_QWORD *)v13 + 1);
  if (v14)
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 + 2);
LABEL_7:
  *(_QWORD *)v13 = a2;
  if (a2)
  {
    v17 = *((_QWORD *)a2 + 1);
    v16 = (_QWORD *)((char *)a2 + 8);
    v15 = v17;
    *((_QWORD *)v13 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v13 + 8;
    *((_QWORD *)v13 + 2) = v16;
    *v16 = v13;
  }
  return this;
}

void llvm::IndirectBrInst::addDestination(llvm::IndirectBrInst *this, llvm::BasicBlock *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v14;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  v6 = v4 + 1;
  if ((v4 & 0x7FFFFFFu) >= *((_DWORD *)this + 18))
  {
    v7 = 2 * (v4 & 0x7FFFFFF);
    *((_DWORD *)this + 18) = v7;
    llvm::User::growHungoffUses(this, v7, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | v6 & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
  {
    v8 = (char *)*((_QWORD *)this - 1);
    v9 = &v8[32 * v5];
    if (!*(_QWORD *)v9)
      goto LABEL_9;
  }
  else
  {
    v8 = (char *)this - 32 * (v6 & 0x7FFFFFF);
    v9 = &v8[32 * v5];
    if (!*(_QWORD *)v9)
      goto LABEL_9;
  }
  **((_QWORD **)v9 + 2) = *((_QWORD *)v9 + 1);
  v10 = *((_QWORD *)v9 + 1);
  if (v10)
    *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
LABEL_9:
  *(_QWORD *)v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (char **)((char *)a2 + 8);
    v11 = v13;
    v14 = &v8[32 * v5];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v12;
    *v12 = v9;
  }
}

llvm::FreezeInst *llvm::FreezeInst::FreezeInst(llvm::FreezeInst *this, llvm::Type **a2, const char **a3, llvm::Instruction *a4)
{
  char *v7;
  uint64_t v8;
  llvm::Type *v9;
  _QWORD *v10;
  llvm::Type *v11;

  v7 = (char *)this - 32;
  if (*((_QWORD *)llvm::Instruction::Instruction(this, *a2, 67, (llvm::FreezeInst *)((char *)this - 32), 1, a4) - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v8 = *((_QWORD *)this - 3);
    if (v8)
      *(_QWORD *)(v8 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v11 = a2[1];
  v10 = a2 + 1;
  v9 = v11;
  *((_QWORD *)this - 3) = v11;
  if (v11)
    *((_QWORD *)v9 + 2) = (char *)this - 24;
  *((_QWORD *)this - 2) = v10;
  *v10 = v7;
  llvm::Value::setName(this, a3);
  return this;
}

uint64_t llvm::SmallVectorTemplateBase<int,true>::growAndEmplaceBack<int &>(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 4);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = v3;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 4 * v5 - 4;
}

uint64_t _GLOBAL__sub_I_Instructions_cpp()
{
  __int128 v1;
  char v2;
  _BYTE *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Disables inttoptr/ptrtoint roundtrip optimization";
  *((_QWORD *)&v1 + 1) = 49;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [21],llvm::cl::initializer<BOOL>,llvm::cl::desc>((uint64_t)&DisableI2pP2iOpt, (int8x16_t *)"disable-i2p-p2i-opt", &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &DisableI2pP2iOpt, &dword_18013D000);
}

uint64_t llvm::IntrinsicInst::mayLowerToFunctionCall(llvm::IntrinsicInst *this)
{
  return (((_DWORD)this - 232) < 0x1C) & (0xFFFFF9Fu >> ((_BYTE)this + 24));
}

uint64_t llvm::DbgVariableIntrinsic::getVariableLocationOp(llvm::DbgVariableIntrinsic *this, unsigned int a2)
{
  unsigned __int8 *v2;
  int v3;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
  v3 = *v2;
  if (v3 == 4)
  {
    v2 = *(unsigned __int8 **)(*((_QWORD *)v2 + 16) + 8 * a2);
  }
  else if ((v3 - 5) < 0x1F)
  {
    return 0;
  }
  return *((_QWORD *)v2 + 16);
}

uint64_t llvm::Intrinsic::lookupLLVMIntrinsicByName(const char **a1, uint64_t a2, const char *a3, unint64_t a4)
{
  size_t v4;
  const char *v5;
  uint64_t v6;
  const char **v7;
  uint64_t v8;
  const char **v9;
  _BYTE *v10;
  size_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  const char **v15;
  unint64_t v16;
  const char **v17;
  const char *v18;
  const char **v19;
  const char **v20;
  const char **v21;
  const char *v22;
  int v23;
  unint64_t v24;
  const char **v25;
  const char **v26;
  const char *v27;
  const char **v28;
  const char *v29;
  size_t v30;
  const char **v33;
  const char **v36;
  size_t v37;

  v4 = a4;
  v5 = a3;
  v6 = 8 * a2;
  v7 = &a1[a2];
  v33 = v7;
  if (a4 >= 5 && v6 >= 1)
  {
    v8 = 4;
    v9 = a1;
    while (1)
    {
      if (v4 <= v8 + 1
        || (v10 = memchr((void *)&v5[v8 + 1], 46, v4 - (v8 + 1))) == 0
        || (v11 = v10 - v5, v10 - v5 == -1))
      {
        v11 = v4;
        v36 = v9;
        v37 = v4;
        if (v7 != v9)
        {
LABEL_8:
          v12 = (unint64_t)v6 >> 3;
          v13 = &v5[v8];
          v14 = v11 - v8;
          v15 = v7;
          while (1)
          {
            while (1)
            {
              v16 = v12 >> 1;
              v17 = &v9[v12 >> 1];
              v18 = &(*v17)[v8];
              if ((strncmp(v18, &v5[v8], v14) & 0x80000000) == 0)
                break;
              v9 = v17 + 1;
              v12 += ~v16;
              v7 = v17 + 1;
              if (!v12)
                goto LABEL_16;
            }
            if ((strncmp(&v5[v8], v18, v14) & 0x80000000) == 0)
              break;
            v15 = &v9[v12 >> 1];
            v12 >>= 1;
            v7 = v9;
            if (!v16)
              goto LABEL_16;
          }
          v19 = &v9[v12 >> 1];
          if (v12 >= 2)
          {
            v19 = v9;
            do
            {
              v20 = &v19[v16 >> 1];
              v22 = *v20;
              v21 = v20 + 1;
              v23 = strncmp(&v22[v8], v13, v14);
              if (v23 >= 0)
                v16 >>= 1;
              else
                v16 += ~(v16 >> 1);
              if (v23 < 0)
                v19 = v21;
            }
            while (v16);
          }
          v7 = v17 + 1;
          if (v15 == v17 + 1)
          {
            v9 = v19;
            v7 = v15;
            v5 = a3;
            v4 = a4;
            v8 = v37;
            if (v37 >= a4)
              goto LABEL_38;
          }
          else
          {
            v24 = v15 - (v17 + 1);
            do
            {
              v25 = &v7[v24 >> 1];
              v27 = *v25;
              v26 = v25 + 1;
              if (strncmp(v13, &v27[v8], v14) < 0)
              {
                v24 >>= 1;
              }
              else
              {
                v7 = v26;
                v24 += ~(v24 >> 1);
              }
            }
            while (v24);
            v9 = v19;
            v5 = a3;
            v4 = a4;
            v8 = v37;
            if (v37 >= a4)
              goto LABEL_38;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v36 = v9;
        v37 = v10 - v5;
        if (v7 != v9)
          goto LABEL_8;
      }
      v9 = v7;
LABEL_16:
      v4 = a4;
      v8 = v37;
      if (v37 >= a4)
        goto LABEL_38;
LABEL_17:
      v6 = (char *)v7 - (char *)v9;
      if ((char *)v7 - (char *)v9 <= 0)
        goto LABEL_38;
    }
  }
  v9 = a1;
  v36 = a1;
LABEL_38:
  if ((char *)v7 - (char *)v9 <= 0)
    v28 = v36;
  else
    v28 = v9;
  if (v28 == v33)
    return 0xFFFFFFFFLL;
  v29 = *v28;
  if (!*v28)
  {
    v30 = 0;
    if (v4)
      goto LABEL_48;
LABEL_46:
    if (!v4 || !memcmp(v5, v29, v4))
      return (unint64_t)((char *)v28 - (char *)a1) >> 3;
    goto LABEL_48;
  }
  v30 = strlen(*v28);
  if (v4 == v30)
    goto LABEL_46;
LABEL_48:
  if (v4 >= v30 && (!v30 || !memcmp(v5, v29, v30)) && v5[v30] == 46)
    return (unint64_t)((char *)v28 - (char *)a1) >> 3;
  return 0xFFFFFFFFLL;
}

uint64_t llvm::ConstrainedFPIntrinsic::getRoundingMode(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  llvm::MDString *v6;
  uint64_t *String;
  uint64_t v9;
  __int16 v10;

  v2 = llvm::CallBase::arg_end(this);
  v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v4 = *(_QWORD *)&v3[32 * ((unint64_t)(v2 - (_QWORD)v3) >> 5) - 64];
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 23;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v6 = *(llvm::MDString **)(v4 + 24);
  if (!v6)
    return 0;
  if (*(_BYTE *)v6)
    return 0;
  String = (uint64_t *)llvm::MDString::getString(v6);
  v10 = llvm::convertStrToRoundingMode(String, v9);
  return v10 | (HIBYTE(v10) << 8);
}

uint64_t llvm::ConstrainedFPIntrinsic::getExceptionBehavior(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  llvm::MDString *v6;
  _QWORD *String;
  uint64_t v9;
  __int16 v10;

  v2 = llvm::CallBase::arg_end(this);
  v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v4 = *(_QWORD *)&v3[32 * ((unint64_t)(v2 - (_QWORD)v3) >> 5) - 32];
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 23;
  else
    v5 = 0;
  if (!v5)
    return 0;
  v6 = *(llvm::MDString **)(v4 + 24);
  if (!v6)
    return 0;
  if (*(_BYTE *)v6)
    return 0;
  String = (_QWORD *)llvm::MDString::getString(v6);
  v10 = llvm::convertStrToExceptionBehavior(String, v9);
  return v10 | (HIBYTE(v10) << 8);
}

uint64_t llvm::ConstrainedFPCmpIntrinsic::getPredicate(llvm::ConstrainedFPCmpIntrinsic *this)
{
  return getFPPredicateFromMD(*(const llvm::Value **)(((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8]
                                                    + 24));
}

uint64_t getFPPredicateFromMD(const llvm::Value *a1)
{
  uint64_t String;
  uint64_t v2;

  if (!a1)
    return 16;
  if (*(_BYTE *)a1)
    return 16;
  String = llvm::MDString::getString(a1);
  if (v2 != 3)
    return 16;
  if (*(_WORD *)String == 25967 && *(_BYTE *)(String + 2) == 113)
    return 1;
  if (*(_WORD *)String == 26479 && *(_BYTE *)(String + 2) == 116)
    return 2;
  if (*(_WORD *)String == 26479 && *(_BYTE *)(String + 2) == 101)
    return 3;
  if (*(_WORD *)String == 27759 && *(_BYTE *)(String + 2) == 116)
    return 4;
  if (*(_WORD *)String == 27759 && *(_BYTE *)(String + 2) == 101)
    return 5;
  if (*(_WORD *)String == 28271 && *(_BYTE *)(String + 2) == 101)
    return 6;
  if (*(_WORD *)String == 29295 && *(_BYTE *)(String + 2) == 100)
    return 7;
  if (*(_WORD *)String == 28277 && *(_BYTE *)(String + 2) == 111)
    return 8;
  if (*(_WORD *)String == 25973 && *(_BYTE *)(String + 2) == 113)
    return 9;
  if (*(_WORD *)String == 26485 && *(_BYTE *)(String + 2) == 116)
    return 10;
  if (*(_WORD *)String == 26485 && *(_BYTE *)(String + 2) == 101)
    return 11;
  if (*(_WORD *)String == 27765 && *(_BYTE *)(String + 2) == 116)
    return 12;
  if (*(_WORD *)String == 27765 && *(_BYTE *)(String + 2) == 101)
    return 13;
  if (*(_WORD *)String != 28277 || *(_BYTE *)(String + 2) != 101)
    return 16;
  return 14;
}

BOOL llvm::ConstrainedFPIntrinsic::classof(llvm::ConstrainedFPIntrinsic *this, const llvm::IntrinsicInst *a2)
{
  return (*(_DWORD *)(*((_QWORD *)this - 4) + 36) - 86) < 0x29;
}

uint64_t llvm::VPCastIntrinsic::isVPCast(llvm::VPCastIntrinsic *this)
{
  return (((_DWORD)this - 382) < 0x3A) & (0x2140A000010040FuLL >> (this
                                                                                             - 126));
}

uint64_t llvm::VPCmpIntrinsic::getPredicate(llvm::VPCmpIntrinsic *this)
{
  int v1;
  uint64_t v2;
  llvm::MDString *v4;
  unsigned __int16 *String;
  uint64_t v6;
  BOOL v7;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if (v1 != 391)
  {
    v7 = v1 == 375;
    v2 = 2;
    if (!v7)
      v2 = 0;
    return getFPPredicateFromMD(*(const llvm::Value **)(*((_QWORD *)this
                                                        + 4 * v2
                                                        + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))
                                                      + 24));
  }
  v4 = *(llvm::MDString **)(((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8] + 24);
  if (!v4 || *(_BYTE *)v4)
    return 42;
  String = (unsigned __int16 *)llvm::MDString::getString(v4);
  if (v6 != 3)
  {
    if (v6 == 2)
    {
      if (*String == 29029)
        return 32;
      if (*String == 25966)
        return 33;
    }
    return 42;
  }
  v7 = *String == 26485 && *((_BYTE *)String + 2) == 116;
  if (v7)
    return 34;
  if (*String == 26485 && *((_BYTE *)String + 2) == 101)
    return 35;
  if (*String == 27765 && *((_BYTE *)String + 2) == 116)
    return 36;
  if (*String == 27765 && *((_BYTE *)String + 2) == 101)
    return 37;
  if (*String == 26483 && *((_BYTE *)String + 2) == 116)
    return 38;
  if (*String == 26483 && *((_BYTE *)String + 2) == 101)
    return 39;
  if (*String == 27763 && *((_BYTE *)String + 2) == 116)
    return 40;
  if (*String ^ 0x6C73 | *((unsigned __int8 *)String + 2) ^ 0x65)
    return 42;
  return 41;
}

uint64_t llvm::GCProjectionInst::getStatepoint(llvm::GCProjectionInst *this, llvm::Type *a2)
{
  uint64_t result;
  int v3;
  uint64_t UniquePredecessor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v3 = *(unsigned __int8 *)(result + 16);
  if ((v3 - 11) >= 2)
  {
    if (v3 == 94)
    {
      UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(result + 40));
      v5 = *(_QWORD *)(UniquePredecessor + 48);
      if (v5 == UniquePredecessor + 48)
      {
        return 0;
      }
      else
      {
        v6 = v5 - 24;
        if (v5)
          v7 = v5 - 24;
        else
          v7 = 0;
        if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
          return 0;
        else
          return v6;
      }
    }
    else if (v3 == 20)
    {
      return llvm::UndefValue::get(*(llvm::UndefValue **)result, a2);
    }
  }
  return result;
}

uint64_t llvm::GCRelocateInst::getBasePtr(llvm::GCRelocateInst *this, llvm::Type *a2)
{
  uint64_t v3;
  int v4;
  uint64_t UniquePredecessor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *Descriptor;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;

  v3 = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v4 = *(unsigned __int8 *)(v3 + 16);
  if ((v4 - 11) < 2)
    goto LABEL_13;
  if (v4 == 94)
  {
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v3 + 40));
    v6 = *(_QWORD *)(UniquePredecessor + 48);
    if (v6 == UniquePredecessor + 48)
    {
      v3 = 0;
      if (MEMORY[0x10] - 11 > 1)
        goto LABEL_16;
      return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
    }
    v7 = v6 - 24;
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v3 = 0;
    else
      v3 = v7;
LABEL_13:
    if (*(unsigned __int8 *)(v3 + 16) - 11 > 1)
      goto LABEL_16;
    return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
  }
  if (v4 != 20)
    goto LABEL_13;
  v3 = llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
  if (*(unsigned __int8 *)(v3 + 16) - 11 <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
LABEL_16:
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)v3);
    v11 = Descriptor;
    if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0)
    {
      v12 = -(uint64_t)Descriptor;
      if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
        goto LABEL_24;
LABEL_21:
      v15 = 0;
      v16 = (v12 >> 4);
      while (1)
      {
        v17 = llvm::User::getDescriptor((llvm::User *)v3);
        if (*(_DWORD *)(*(_QWORD *)&v17[v15] + 8) == 5)
          break;
        v15 += 16;
        if (!--v16)
          goto LABEL_24;
      }
      v18 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)&v17[v15 + 8];
      goto LABEL_26;
    }
    v13 = llvm::User::getDescriptor((llvm::User *)v3);
    v12 = &v13[v14] - v11;
    if ((v12 & 0xFFFFFFFF0) != 0)
      goto LABEL_21;
  }
LABEL_24:
  v18 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
LABEL_26:
  v19 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
  v20 = (unsigned int *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u)
    v20 = *(unsigned int **)v20;
  return *(_QWORD *)(v18 + 32 * *v20);
}

uint64_t llvm::GCRelocateInst::getDerivedPtr(llvm::GCRelocateInst *this, llvm::Type *a2)
{
  uint64_t v3;
  int v4;
  uint64_t UniquePredecessor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *Descriptor;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;

  v3 = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v4 = *(unsigned __int8 *)(v3 + 16);
  if ((v4 - 11) < 2)
    goto LABEL_13;
  if (v4 == 94)
  {
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v3 + 40));
    v6 = *(_QWORD *)(UniquePredecessor + 48);
    if (v6 == UniquePredecessor + 48)
    {
      v3 = 0;
      if (MEMORY[0x10] - 11 > 1)
        goto LABEL_16;
      return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
    }
    v7 = v6 - 24;
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v3 = 0;
    else
      v3 = v7;
LABEL_13:
    if (*(unsigned __int8 *)(v3 + 16) - 11 > 1)
      goto LABEL_16;
    return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
  }
  if (v4 != 20)
    goto LABEL_13;
  v3 = llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
  if (*(unsigned __int8 *)(v3 + 16) - 11 <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)v3, a2);
LABEL_16:
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor((llvm::User *)v3);
    v11 = Descriptor;
    if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0)
    {
      v12 = -(uint64_t)Descriptor;
      if ((-(uint64_t)Descriptor & 0xFFFFFFFF0) == 0)
        goto LABEL_24;
LABEL_21:
      v15 = 0;
      v16 = (v12 >> 4);
      while (1)
      {
        v17 = llvm::User::getDescriptor((llvm::User *)v3);
        if (*(_DWORD *)(*(_QWORD *)&v17[v15] + 8) == 5)
          break;
        v15 += 16;
        if (!--v16)
          goto LABEL_24;
      }
      v18 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)&v17[v15 + 8];
      goto LABEL_26;
    }
    v13 = llvm::User::getDescriptor((llvm::User *)v3);
    v12 = &v13[v14] - v11;
    if ((v12 & 0xFFFFFFFF0) != 0)
      goto LABEL_21;
  }
LABEL_24:
  v18 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
LABEL_26:
  v19 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
  v20 = (unsigned int *)(v19 + 24);
  if (*(_DWORD *)(v19 + 32) >= 0x41u)
    v20 = *(unsigned int **)v20;
  return *(_QWORD *)(v18 + 32 * *v20);
}

llvm::LLVMContext *llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  llvm::LLVMContextImpl *v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v6;
  const unsigned __int8 *v7;
  int v8;
  _DWORD v9[2];
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  int v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  int v51;
  const char *v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  int v63;
  const char *v64;
  uint64_t v65;
  int v66;
  const char *v67;
  uint64_t v68;
  int v69;
  const char *v70;
  uint64_t v71;
  int v72;
  const char *v73;
  uint64_t v74;
  int v75;
  const char *v76;
  uint64_t v77;
  int v78;
  const char *v79;
  uint64_t v80;
  int v81;
  const char *v82;
  uint64_t v83;
  int v84;
  const char *v85;
  uint64_t v86;
  int v87;
  const char *v88;
  uint64_t v89;
  int v90;
  const char *v91;
  uint64_t v92;
  int v93;
  const char *v94;
  uint64_t v95;
  int v96;
  const char *v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  int v102;
  const char *v103;
  uint64_t v104;
  int v105;
  const char *v106;
  uint64_t v107;
  int v108;
  const char *v109;
  uint64_t v110;
  int v111;
  const char *v112;
  uint64_t v113;
  int v114;
  const char *v115;
  uint64_t v116;
  int v117;
  const char *v118;
  uint64_t v119;
  int v120;
  const char *v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t v125;
  int v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::LLVMContextImpl *)operator new(0xB00uLL);
  v3 = 0;
  *(_QWORD *)this = llvm::LLVMContextImpl::LLVMContextImpl(v2, this);
  v9[0] = 0;
  v10 = "dbg";
  v11 = 3;
  v12 = 1;
  v13 = "tbaa";
  v14 = 4;
  v15 = 2;
  v16 = "prof";
  v17 = 4;
  v18 = 3;
  v19 = "fpmath";
  v20 = 6;
  v21 = 4;
  v22 = "range";
  v23 = 5;
  v24 = 5;
  v25 = "tbaa.struct";
  v26 = 11;
  v27 = 6;
  v28 = "invariant.load";
  v29 = 14;
  v30 = 7;
  v31 = "alias.scope";
  v32 = 11;
  v33 = 8;
  v34 = "noalias";
  v35 = 7;
  v36 = 9;
  v37 = "nontemporal";
  v38 = 11;
  v39 = 10;
  v40 = "llvm.mem.parallel_loop_access";
  v41 = 29;
  v42 = 11;
  v43 = "nonnull";
  v44 = 7;
  v45 = 12;
  v46 = "dereferenceable";
  v47 = 15;
  v48 = 13;
  v49 = "dereferenceable_or_null";
  v50 = 23;
  v51 = 14;
  v52 = "make.implicit";
  v53 = 13;
  v54 = 15;
  v55 = "unpredictable";
  v56 = 13;
  v57 = 16;
  v58 = "invariant.group";
  v59 = 15;
  v60 = 17;
  v61 = "align";
  v62 = 5;
  v63 = 18;
  v64 = "llvm.loop";
  v65 = 9;
  v66 = 19;
  v67 = "type";
  v68 = 4;
  v69 = 20;
  v70 = "section_prefix";
  v71 = 14;
  v72 = 21;
  v73 = "absolute_symbol";
  v74 = 15;
  v75 = 22;
  v76 = "associated";
  v77 = 10;
  v78 = 23;
  v79 = "callees";
  v80 = 7;
  v81 = 24;
  v82 = "irr_loop";
  v83 = 8;
  v84 = 25;
  v85 = "llvm.access.group";
  v86 = 17;
  v87 = 26;
  v88 = "callback";
  v89 = 8;
  v90 = 27;
  v91 = "llvm.preserve.access.index";
  v92 = 26;
  v93 = 28;
  v94 = "vcall_visibility";
  v95 = 16;
  v96 = 29;
  v97 = "noundef";
  v98 = 7;
  v99 = 30;
  v100 = "annotation";
  v101 = 10;
  v102 = 31;
  v103 = "nosanitize";
  v104 = 10;
  v105 = 32;
  v106 = "func_sanitize";
  v107 = 13;
  v108 = 33;
  v109 = "exclude";
  v110 = 7;
  v111 = 34;
  v112 = "memprof";
  v113 = 7;
  v114 = 35;
  v115 = "callsite";
  v116 = 8;
  v117 = 36;
  v118 = "kcfi_type";
  v119 = 9;
  v120 = 37;
  v121 = "pcsections";
  v122 = 10;
  v123 = 38;
  v124 = "DIAssignID";
  v125 = 10;
  v126 = 39;
  v127 = "coro.outside.frame";
  v128 = 18;
  do
  {
    v4 = *(_QWORD *)this + 2480;
    v6 = *(int8x16_t **)&v9[v3 + 2];
    v7 = *(const unsigned __int8 **)((char *)&v11 + v3 * 4);
    v8 = *(_DWORD *)(*(_QWORD *)this + 2492);
    llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(v4, v6, v7, &v8);
    v3 += 6;
  }
  while (v3 != 240);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"deopt", (const unsigned __int8 *)5);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"funclet", (const unsigned __int8 *)7);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"gc-transition", (const unsigned __int8 *)0xD);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"cfguardtarget", (const unsigned __int8 *)0xD);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"preallocated", (const unsigned __int8 *)0xC);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"gc-live", (const unsigned __int8 *)7);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"clang.arc.attachedcall", (const unsigned __int8 *)0x16);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"ptrauth", (const unsigned __int8 *)7);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"kcfi", (const unsigned __int8 *)4);
  llvm::LLVMContextImpl::getOrInsertBundleTag(*(_QWORD *)this, (int8x16_t *)"convergencectrl", (const unsigned __int8 *)0xF);
  llvm::LLVMContextImpl::getOrInsertSyncScopeID(*(_QWORD *)this, (int8x16_t *)"singlethread", (const unsigned __int8 *)0xC);
  llvm::LLVMContextImpl::getOrInsertSyncScopeID(*(_QWORD *)this, (int8x16_t *)"", 0);
  return this;
}

uint64_t llvm::LLVMContext::getMDKindID(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *a1;
  v4 = *a1 + 2480;
  v6 = *(_DWORD *)(v3 + 2492);
  return *(unsigned int *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(v4, a2, a3, &v6)+ 8);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContextImpl **this)
{
  llvm::LLVMContextImpl *v1;
  void *v2;

  v1 = *this;
  if (v1)
  {
    llvm::LLVMContextImpl::~LLVMContextImpl(v1);
    operator delete(v2);
  }
}

const void **llvm::LLVMContext::addModule(const void ***this, llvm::Module *a2)
{
  const void **result;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  result = *this;
  v3 = result[1];
  if (v3 != *result)
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, a2);
  v4 = *((unsigned int *)result + 5);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 8 * v4;
    v7 = result[1];
    while ((llvm::Module *)*v7 != a2)
    {
      if (*v7 == -2)
        v5 = v7;
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        if (!v5)
          goto LABEL_11;
        *v5 = a2;
        --*((_DWORD *)result + 6);
        return result;
      }
    }
  }
  else
  {
LABEL_11:
    if (v4 >= *((_DWORD *)result + 4))
      return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, a2);
    *((_DWORD *)result + 5) = v4 + 1;
    v3[v4] = a2;
  }
  return result;
}

const void **llvm::LLVMContext::removeModule(llvm::SmallPtrSetImplBase **a1, void *a2)
{
  llvm::SmallPtrSetImplBase *v3;
  uint64_t v4;
  const void **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 1);
  if (v4 == *(_QWORD *)*a1)
  {
    v8 = *((unsigned int *)v3 + 5);
    result = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(void **)(v4 + v9) != a2)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_12;
      }
      result = (const void **)(v4 + v9);
    }
LABEL_12:
    v6 = v4;
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(*a1, a2);
    v4 = *(_QWORD *)v3;
    v6 = *((_QWORD *)v3 + 1);
    if (*result != a2)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      result = (const void **)(v6 + 8 * *(unsigned int *)((char *)v3 + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  if (result != (const void **)(v6 + 8 * *(unsigned int *)((char *)v3 + v12)))
  {
    *result = (const void *)-2;
    ++*((_DWORD *)v3 + 6);
  }
  return result;
}

uint64_t *llvm::LLVMContext::diagnose(uint64_t *this, const llvm::DiagnosticInfo *a2)
{
  uint64_t *v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  const char *v6;
  size_t v7;
  _WORD *v8;
  llvm *v9;
  _BYTE *v10;
  void *v11;
  llvm *v12;

  v3 = this;
  v4 = *this;
  if ((*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7)
  {
    this = *(uint64_t **)(v4 + 120);
    if (this)
    {
      llvm::LLVMRemarkStreamer::emit(this, (uint64_t)a2);
      v4 = *v3;
    }
  }
  if (!*(_QWORD *)(v4 + 72)
    || *(_BYTE *)(v4 + 80)
    && (*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7
    && ((this = (uint64_t *)(*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2),
         !(_DWORD)this)
     || *((_BYTE *)a2 + 352) && !*((_BYTE *)a2 + 72))
    || (this = (uint64_t *)(*(uint64_t (**)(_QWORD, const llvm::DiagnosticInfo *))(**(_QWORD **)(*v3 + 72)
                                                                                          + 16))(*(_QWORD *)(*v3 + 72), a2), (this & 1) == 0))
  {
    if ((*((_DWORD *)a2 + 2) - 18) < 0xFFFFFFF7
      || (this = (uint64_t *)(*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2),
          (_DWORD)this)
      && (!*((_BYTE *)a2 + 352) || *((_BYTE *)a2 + 72)))
    {
      v11 = &unk_1E0E22D78;
      v12 = (llvm *)llvm::errs((llvm *)this);
      v5 = (llvm::raw_ostream *)llvm::errs(v12);
      v6 = off_1E0E76530[*((char *)a2 + 12)];
      v7 = strlen(v6);
      v8 = (_WORD *)*((_QWORD *)v5 + 4);
      if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v8)
      {
        if (v7)
        {
          memcpy(v8, v6, v7);
          v8 = (_WORD *)(*((_QWORD *)v5 + 4) + v7);
          *((_QWORD *)v5 + 4) = v8;
        }
      }
      else
      {
        v5 = llvm::raw_ostream::write(v5, v6, v7);
        v8 = (_WORD *)*((_QWORD *)v5 + 4);
      }
      if (*((_QWORD *)v5 + 3) - (_QWORD)v8 > 1uLL)
      {
        *v8 = 8250;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ": ", 2uLL);
      }
      v9 = (llvm *)(*(uint64_t (**)(const llvm::DiagnosticInfo *, void **))(*(_QWORD *)a2 + 24))(a2, &v11);
      this = (uint64_t *)llvm::errs(v9);
      v10 = (_BYTE *)this[4];
      if ((_BYTE *)this[3] == v10)
      {
        this = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)this, "\n", 1uLL);
        if (*((_BYTE *)a2 + 12))
          return this;
      }
      else
      {
        *v10 = 10;
        ++this[4];
        if (*((_BYTE *)a2 + 12))
          return this;
      }
      exit(1);
    }
  }
  return this;
}

void llvm::LLVMContext::getMDKindNames(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  BOOL v20;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 2492);
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 != (_DWORD)v4)
  {
    if (v5 <= v4)
    {
      if (*(_DWORD *)(a2 + 12) < v4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v4, 16);
        v5 = *(_DWORD *)(a2 + 8);
      }
      if (v5 != (_DWORD)v4)
        bzero((void *)(*(_QWORD *)a2 + 16 * v5), 16 * (v4 - v5));
    }
    *(_DWORD *)(a2 + 8) = v4;
    v3 = *a1;
  }
  v7 = *(uint64_t ***)(v3 + 2480);
  v8 = *(unsigned int *)(v3 + 2488);
  if (!(_DWORD)v8)
  {
    v9 = v7;
    v14 = &v7[v8];
    if (v9 == v14)
      return;
    goto LABEL_21;
  }
  v9 = v7;
  if (*v7)
    v10 = *v7 + 1 == 0;
  else
    v10 = 1;
  if (v10)
  {
    do
    {
      v12 = v9[1];
      ++v9;
      v11 = v12;
      if (v12)
        v13 = v11 + 1 == 0;
      else
        v13 = 1;
    }
    while (v13);
  }
  v14 = &v7[v8];
  if (v9 != v14)
  {
LABEL_21:
    v15 = *v9;
    do
    {
      v16 = v15 + 2;
      v17 = (uint64_t *)*v15;
      v18 = (uint64_t **)(*(_QWORD *)a2 + 16 * *((unsigned int *)v15 + 2));
      *v18 = v16;
      v18[1] = v17;
      do
      {
        v19 = v9[1];
        ++v9;
        v15 = v19;
        if (v19)
          v20 = v15 + 1 == 0;
        else
          v20 = 1;
      }
      while (v20);
    }
    while (v9 != v14);
  }
}

uint64_t llvm::LLVMContext::getOrInsertSyncScopeID(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  return llvm::LLVMContextImpl::getOrInsertSyncScopeID(*a1, a2, a3);
}

void llvm::LLVMContext::getSyncScopeNames(uint64_t *a1, uint64_t a2)
{
  llvm::LLVMContextImpl::getSyncScopeNames(*a1, a2);
}

void llvm::LLVMContext::setGC(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  BOOL v23;
  int v24;
  char *v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 2696);
  v6 = *(unsigned int *)(*a1 + 2712);
  if ((_DWORD)v6)
  {
    v7 = v6 - 1;
    v8 = (uint64_t *)(v5 + 32 * (((_DWORD)v6 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    LODWORD(v11) = v7 & ((a2 >> 4) ^ (a2 >> 9));
    while (v9 != -4096)
    {
      v12 = v11 + v10++;
      v11 = v12 & v7;
      v9 = *(_QWORD *)(v5 + 32 * v11);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v5 + 32 * v11);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 32 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(v5 + 32 * v6))
  {
    v13 = v8 + 1;
    if (*((char *)v8 + 31) < 0)
      operator delete((void *)*v13);
    v14 = *a3;
    v13[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v13 = v14;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    return;
  }
  v26 = a2;
  *(_OWORD *)__p = *a3;
  v28 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v15 = *(_DWORD *)(v4 + 2712);
  if (v15)
  {
    v16 = *(_QWORD *)(v4 + 2696);
    v17 = v15 - 1;
    v18 = v17 & ((a2 >> 4) ^ (a2 >> 9));
    v19 = (char *)(v16 + 32 * v18);
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 == a2)
      goto LABEL_26;
    v21 = 0;
    v22 = 1;
    while (v20 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (char *)(v16 + 32 * v18);
      v20 = *(_QWORD *)v19;
      if (*(_QWORD *)v19 == a2)
        goto LABEL_26;
    }
    if (v21)
      v25 = v21;
    else
      v25 = v19;
  }
  else
  {
    v25 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucket<llvm::Function const*,std::string>(v4 + 2696, v25, &v26, (__int128 *)__p);
LABEL_26:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

uint64_t *llvm::LLVMContext::getGC(llvm::LLVMContext *this, const llvm::Function *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  const llvm::Function **v7;
  const llvm::Function *v8;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  const llvm::Function *v15;

  v2 = *(_QWORD *)this;
  v15 = a2;
  v3 = *(_DWORD *)(v2 + 2712);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 2696);
    v5 = v3 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (const llvm::Function **)(v4 + 32 * v6);
    v8 = *v7;
    if (*v7 == a2)
      return (uint64_t *)(v7 + 1);
    v11 = 0;
    v12 = 1;
    while (v8 != (const llvm::Function *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v8 == (const llvm::Function *)-8192;
      if (v13)
        v11 = (uint64_t *)v7;
      v14 = v6 + v12++;
      v6 = v14 & v5;
      v7 = (const llvm::Function **)(v4 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        return (uint64_t *)(v7 + 1);
    }
    if (v11)
      v10 = v11;
    else
      v10 = (uint64_t *)v7;
  }
  else
  {
    v10 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucket<llvm::Function const*>(v2 + 2696, v10, (uint64_t *)&v15)+ 1;
}

void llvm::LLVMContext::deleteGC(int32x2_t **this, const llvm::Function *a2)
{
  int32x2_t *v2;
  __int32 v3;
  int32x2_t v4;
  unsigned __int32 v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Function *v8;
  int v9;
  int v10;

  v2 = *this;
  v3 = (*this)[339].i32[0];
  if (v3)
  {
    v4 = v2[337];
    v5 = v3 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(_QWORD *)&v4 + 32 * v6;
    v8 = *(const llvm::Function **)v7;
    if (*(const llvm::Function **)v7 == a2)
    {
      if (*(char *)(v7 + 31) < 0)
LABEL_4:
        operator delete(*(void **)(v7 + 8));
LABEL_5:
      *(_QWORD *)v7 = -8192;
      v2[338] = vadd_s32(v2[338], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v9 = 1;
      while (v8 != (const llvm::Function *)-4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v8 = *(const llvm::Function **)(*(_QWORD *)&v4 + 32 * v6);
        if (v8 == a2)
        {
          v7 = *(_QWORD *)&v4 + 32 * v6;
          if ((*(char *)(v7 + 31) & 0x80000000) == 0)
            goto LABEL_5;
          goto LABEL_4;
        }
      }
    }
  }
}

uint64_t llvm::LLVMContext::shouldDiscardValueNames(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 2720);
}

uint64_t llvm::LLVMContext::isODRUniquingDebugTypes(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 1224);
}

BOOL llvm::LLVMContext::supportsTypedPointers(llvm::LLVMContextImpl **this)
{
  return !llvm::LLVMContextImpl::getOpaquePointers(*this);
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucket<llvm::Function const*,std::string>(uint64_t a1, char *a2, uint64_t *a3, __int128 *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *buffer;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  BOOL v30;
  int v31;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v9 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(uint64_t **)a1;
  v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40)
    v17 = v16 + 1;
  else
    v17 = 64;
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(32 * v17, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v13)
  {
    v19 = (char *)(32 * v8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::moveFromOldBuckets(a1, v13, (uint64_t *)&v19[(_QWORD)v13]);
    llvm::deallocate_buffer((llvm *)v13, v19);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  v21 = buffer;
  if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v22 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v21 = &buffer[4 * (v22 & 0xFFFFFFFFFFFFFFELL)];
  v23 = buffer + 4;
  v24 = v22 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 4) = -4096;
    *v23 = -4096;
    v23 += 8;
    v24 -= 2;
  }
  while (v24);
  if (v22 != (v22 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v21 = -4096;
      v21 += 4;
    }
    while (v21 != &buffer[4 * v20]);
  }
  v9 = *a3;
  v25 = v20 - 1;
  v26 = ((*a3 >> 4) ^ (*a3 >> 9)) & v25;
  a2 = (char *)&buffer[4 * v26];
  v27 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v28 = 0;
    v29 = 1;
    while (v27 != -4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v27 == -8192;
      if (v30)
        v28 = a2;
      v31 = v26 + v29++;
      v26 = v31 & v25;
      a2 = (char *)&buffer[4 * v26];
      v27 = *(_QWORD *)a2;
      if (v9 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v28)
      a2 = v28;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v9 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  v10 = *a4;
  *((_QWORD *)a2 + 3) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a2 + 8) = v10;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  __int128 v25;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = (v16 - 1) & ((v15 >> 4) ^ (v15 >> 9));
          v19 = *(_QWORD *)a1 + 32 * v18;
          v20 = *(_QWORD *)v19;
          if (v15 != *(_QWORD *)v19)
          {
            v21 = 0;
            v22 = 1;
            while (v20 != -4096)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v20 == -8192;
              if (v23)
                v21 = v19;
              v24 = v18 + v22++;
              v18 = v24 & v17;
              v19 = *(_QWORD *)a1 + 32 * v18;
              v20 = *(_QWORD *)v19;
              if (v15 == *(_QWORD *)v19)
                goto LABEL_26;
            }
            if (v21)
              v19 = v21;
          }
        }
        else
        {
          v19 = 0;
        }
LABEL_26:
        *(_QWORD *)v19 = v15;
        v25 = *(_OWORD *)(v4 + 1);
        *(_QWORD *)(v19 + 24) = v4[3];
        *(_OWORD *)(v19 + 8) = v25;
        v4[2] = 0;
        v4[3] = 0;
        v4[1] = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 31) < 0)
          operator delete((void *)v4[1]);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucket<llvm::Function const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(32 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[4 * (v19 & 0xFFFFFFFFFFFFFFELL)];
  v20 = buffer + 4;
  v21 = v19 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 4) = -4096;
    *v20 = -4096;
    v20 += 8;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 4;
    }
    while (v18 != &buffer[4 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[4 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[4 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return a2;
}

llvm::LLVMContextImpl *llvm::LLVMContextImpl::LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::LLVMContext *a2)
{
  char *v4;
  char v5;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  v4 = (char *)operator new(0x18uLL);
  *(_QWORD *)v4 = &unk_1E0E22A38;
  *(_OWORD *)(v4 + 8) = 0u;
  *((_QWORD *)this + 9) = v4;
  *((_WORD *)this + 40) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *((_DWORD *)this + 26) = 0;
  *((_BYTE *)this + 108) = 1;
  *((_BYTE *)this + 112) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 0;
  *((_DWORD *)this + 58) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  llvm::FoldingSetBase::FoldingSetBase((llvm::LLVMContextImpl *)((char *)this + 264), 6);
  llvm::FoldingSetBase::FoldingSetBase((llvm::LLVMContextImpl *)((char *)this + 280), 6);
  llvm::FoldingSetBase::FoldingSetBase((llvm::LLVMContextImpl *)((char *)this + 296), 6);
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0x1800000000;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = (char *)this + 368;
  *((_QWORD *)this + 45) = 0x400000000;
  *((_QWORD *)this + 50) = (char *)this + 416;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 53) = 1;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_DWORD *)this + 118) = 0;
  *((_DWORD *)this + 124) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 130) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 136) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 142) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 148) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 154) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_DWORD *)this + 160) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 166) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_DWORD *)this + 172) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_DWORD *)this + 178) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 0;
  *((_DWORD *)this + 190) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_DWORD *)this + 196) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_DWORD *)this + 202) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_DWORD *)this + 208) = 0;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 214) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_DWORD *)this + 220) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_DWORD *)this + 226) = 0;
  *(_OWORD *)((char *)this + 888) = 0u;
  *((_DWORD *)this + 232) = 0;
  *((_OWORD *)this + 57) = 0u;
  *((_DWORD *)this + 238) = 0;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_DWORD *)this + 244) = 0;
  *((_OWORD *)this + 60) = 0u;
  *((_DWORD *)this + 250) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 256) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_DWORD *)this + 262) = 0;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *((_DWORD *)this + 268) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_DWORD *)this + 274) = 0;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((_DWORD *)this + 280) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_DWORD *)this + 286) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *((_DWORD *)this + 292) = 0;
  *((_OWORD *)this + 72) = 0u;
  *((_DWORD *)this + 298) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *((_BYTE *)this + 1200) = 0;
  *((_BYTE *)this + 1224) = 0;
  *((_DWORD *)this + 324) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_DWORD *)this + 330) = 0;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 336) = 0;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 342) = 0;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *((_DWORD *)this + 348) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((_DWORD *)this + 354) = 0;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((_DWORD *)this + 360) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_DWORD *)this + 366) = 0;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1260) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_DWORD *)this + 367) = 16;
  *((_DWORD *)this + 372) = 0;
  *((_OWORD *)this + 92) = 0u;
  *((_DWORD *)this + 378) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_DWORD *)this + 384) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_DWORD *)this + 390) = 0;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 396) = 0;
  *((_OWORD *)this + 98) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *((_QWORD *)this + 201) = a2;
  *((_QWORD *)this + 202) = 7;
  *((_QWORD *)this + 203) = 0;
  *((_QWORD *)this + 204) = a2;
  *((_QWORD *)this + 205) = 8;
  *((_QWORD *)this + 206) = 0;
  *((_QWORD *)this + 207) = a2;
  *((_OWORD *)this + 104) = 0u;
  *((_QWORD *)this + 210) = a2;
  *((_QWORD *)this + 211) = 1;
  *((_QWORD *)this + 212) = 0;
  *((_QWORD *)this + 213) = a2;
  *((_QWORD *)this + 214) = 2;
  *((_QWORD *)this + 215) = 0;
  *((_QWORD *)this + 216) = a2;
  *((_QWORD *)this + 217) = 3;
  *((_QWORD *)this + 218) = 0;
  *((_QWORD *)this + 219) = a2;
  *((_QWORD *)this + 220) = 9;
  *((_QWORD *)this + 221) = 0;
  *((_QWORD *)this + 222) = a2;
  *((_QWORD *)this + 223) = 12;
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 225) = a2;
  *((_QWORD *)this + 226) = 4;
  *((_QWORD *)this + 227) = 0;
  *((_QWORD *)this + 228) = a2;
  *((_QWORD *)this + 229) = 5;
  *((_QWORD *)this + 230) = 0;
  *((_QWORD *)this + 231) = a2;
  *((_QWORD *)this + 232) = 6;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 234) = a2;
  *((_QWORD *)this + 235) = 10;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 237) = a2;
  *((_QWORD *)this + 238) = 11;
  *((_QWORD *)this + 239) = 0;
  *((_QWORD *)this + 240) = a2;
  *((_QWORD *)this + 242) = 0;
  *((_QWORD *)this + 241) = 269;
  *((_QWORD *)this + 243) = a2;
  *((_QWORD *)this + 245) = 0;
  *((_QWORD *)this + 244) = 2061;
  *((_QWORD *)this + 246) = a2;
  *((_QWORD *)this + 248) = 0;
  *((_QWORD *)this + 247) = 4109;
  *((_QWORD *)this + 249) = a2;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 250) = 8205;
  *((_QWORD *)this + 252) = a2;
  *((_QWORD *)this + 254) = 0;
  *((_QWORD *)this + 253) = 16397;
  *((_QWORD *)this + 255) = a2;
  *((_QWORD *)this + 257) = 0;
  *((_QWORD *)this + 256) = 32781;
  *((_OWORD *)this + 129) = 0u;
  *((_QWORD *)this + 260) = 0;
  *((_QWORD *)this + 261) = (char *)this + 2104;
  *((_QWORD *)this + 262) = 0x400000000;
  *((_QWORD *)this + 267) = (char *)this + 2152;
  *((_OWORD *)this + 134) = 0u;
  *((_QWORD *)this + 270) = 1;
  *((_QWORD *)this + 271) = (char *)this + 2072;
  *((_DWORD *)this + 548) = 0;
  *((_OWORD *)this + 136) = 0u;
  *((_DWORD *)this + 554) = 0;
  *(_OWORD *)((char *)this + 2200) = 0u;
  *((_DWORD *)this + 560) = 0;
  *((_OWORD *)this + 139) = 0u;
  *((_DWORD *)this + 566) = 0;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *((_DWORD *)this + 572) = 0;
  *((_OWORD *)this + 142) = 0u;
  *(_QWORD *)((char *)this + 2292) = 16;
  *((_OWORD *)this + 144) = 0u;
  *((_DWORD *)this + 580) = 0;
  *((_DWORD *)this + 586) = 0;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *((_DWORD *)this + 592) = 0;
  *((_OWORD *)this + 147) = 0u;
  *((_DWORD *)this + 606) = 0;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *((_DWORD *)this + 612) = 0;
  *((_OWORD *)this + 152) = 0u;
  *((_DWORD *)this + 618) = 0;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *((_DWORD *)this + 624) = 0;
  *((_OWORD *)this + 155) = 0u;
  *((_DWORD *)this + 600) = 0;
  *((_QWORD *)this + 299) = 0;
  *(_OWORD *)((char *)this + 2376) = 0u;
  *((_DWORD *)this + 625) = 16;
  *((_DWORD *)this + 630) = 0;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *((_DWORD *)this + 636) = 0;
  *((_OWORD *)this + 158) = 0u;
  *((_DWORD *)this + 642) = 0;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *((_DWORD *)this + 648) = 0;
  *((_OWORD *)this + 161) = 0u;
  *((_DWORD *)this + 654) = 0;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *((_DWORD *)this + 660) = 0;
  *((_OWORD *)this + 164) = 0u;
  *((_DWORD *)this + 666) = 0;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *((_DWORD *)this + 667) = 16;
  *((_DWORD *)this + 672) = 0;
  *((_OWORD *)this + 167) = 0u;
  *((_DWORD *)this + 673) = 16;
  *((_DWORD *)this + 678) = 0;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *((_BYTE *)this + 2720) = 0;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 342) = 1;
  *((_QWORD *)this + 343) = -4096;
  *((_QWORD *)this + 345) = -4096;
  *((_QWORD *)this + 347) = -4096;
  *((_QWORD *)this + 349) = -4096;
  *((_WORD *)this + 1404) = 0;
  if (word_1ECD32570)
  {
    v5 = byte_1ECD325E8;
    *((_BYTE *)this + 2809) = 1;
    *((_BYTE *)this + 2808) = v5;
  }
  return this;
}

void llvm::LLVMContextImpl::~LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::Constant *a2)
{
  int v3;
  int v4;
  llvm::MDNode **v5;
  llvm::MDNode **v6;
  llvm::MDNode *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  llvm::Module **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Module **v15;
  llvm::Module *v16;
  void *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::MDNode *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  llvm::MDNode *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  llvm::MDNode *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  llvm::MDNode *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  llvm::MDNode *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  llvm::MDNode *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  llvm::MDNode *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::MDNode *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  llvm::MDNode *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  llvm::MDNode *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  llvm::MDNode *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  llvm::MDNode *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  llvm::MDNode *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  llvm::MDNode *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  llvm::MDNode *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  llvm::MDNode *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  llvm::MDNode *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  llvm::MDNode *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  llvm::MDNode *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  llvm::MDNode *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  llvm::MDNode *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  llvm::MDNode *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  llvm::MDNode *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  llvm::MDNode *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  llvm::MDNode *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  llvm::MDNode *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  llvm::MDNode *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  llvm::MDNode *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  llvm::DIArgList **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  int64x2_t **v175;
  uint64_t v176;
  llvm::MDNode **v177;
  llvm::MDNode **v178;
  int64x2_t *v179;
  unint64_t v180;
  int64x2_t *v181;
  unint64_t v182;
  int64x2_t *v183;
  int64x2_t v184;
  uint64_t v185;
  int64x2_t *v186;
  llvm::MDNode *v187;
  uint64_t v188;
  uint64_t v189;
  llvm::MDNode **v190;
  uint64_t v191;
  uint64_t v192;
  llvm::MDNode **v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  llvm::MDNode **v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  llvm::MDNode *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  llvm::MDNode *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  void *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  llvm::MDNode *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD **v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD **v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD **v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD **v438;
  uint64_t v439;
  uint64_t v440;
  llvm *v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  llvm *v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  llvm *v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  llvm *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  void *v462;
  int v463;
  _DWORD *v464;
  uint64_t v465;
  int v466;
  llvm::Value **v467;
  uint64_t v468;
  uint64_t v469;
  llvm::Value *v470;
  llvm::Use *v471;
  _DWORD *v472;
  uint64_t v473;
  int v474;
  llvm::Value **v475;
  uint64_t v476;
  uint64_t v477;
  llvm::Value *v478;
  llvm::Use *v479;
  _DWORD *v480;
  uint64_t v481;
  int v482;
  llvm::Value **v483;
  uint64_t v484;
  uint64_t v485;
  llvm::Value *v486;
  llvm::Use *v487;
  _DWORD *v488;
  uint64_t v489;
  int v490;
  llvm::Value **v491;
  uint64_t v492;
  uint64_t v493;
  llvm::Value *v494;
  llvm::Use *v495;
  _DWORD *v496;
  uint64_t v497;
  llvm::Value **v498;
  uint64_t v499;
  uint64_t v500;
  llvm::Value *v501;
  llvm::Use *v502;
  llvm::Value *v503;
  llvm::Value *v504;
  llvm::Value *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  llvm *v509;
  llvm::ConstantDataSequential *v511;
  uint64_t v512;
  llvm::Use *v513;
  unint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  unsigned int v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  int32x2_t *****v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  void *v543;
  unint64_t *v544;
  void *v545;
  uint64_t v546;
  _QWORD v547[9];

  v547[8] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 6);
  while (v3 != v4)
  {
    v11 = (llvm::Module **)*((_QWORD *)this + 1);
    if (v11 == *(llvm::Module ***)this)
      v12 = 20;
    else
      v12 = 16;
    v13 = *(unsigned int *)((char *)this + v12);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      v15 = &v11[v13];
      do
      {
        v16 = *v11;
        if ((unint64_t)*v11 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_21;
        ++v11;
        v14 -= 8;
      }
      while (v14);
      v11 = v15;
    }
    v16 = *v11;
LABEL_21:
    if (v16)
    {
      llvm::Module::~Module(v16);
      operator delete(v17);
      v3 = *((_DWORD *)this + 5);
      v4 = *((_DWORD *)this + 6);
    }
  }
  v5 = (llvm::MDNode **)*((_QWORD *)this + 154);
  v6 = (llvm::MDNode **)*((_QWORD *)this + 155);
  while (v5 != v6)
  {
    v7 = *v5++;
    llvm::MDNode::dropAllReferences(v7);
  }
  if (*((_DWORD *)this + 128))
  {
    v8 = *((unsigned int *)this + 130);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = (_QWORD *)*((_QWORD *)this + 63);
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
          goto LABEL_29;
      }
    }
    else
    {
      v10 = (_QWORD *)*((_QWORD *)this + 63);
    }
    v18 = *((_QWORD *)this + 63) + 8 * v8;
    while (v10 != (_QWORD *)v18)
    {
      v19 = (llvm::MDNode *)*v10++;
      llvm::MDNode::dropAllReferences(v19);
      if (v10 == (_QWORD *)v18)
        break;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v10 == (_QWORD *)v18)
          goto LABEL_29;
      }
    }
  }
LABEL_29:
  if (*((_DWORD *)this + 134))
  {
    v20 = *((unsigned int *)this + 136);
    if ((_DWORD)v20)
    {
      v21 = 8 * v20;
      v22 = (_QWORD *)*((_QWORD *)this + 66);
      while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v22;
        v21 -= 8;
        if (!v21)
          goto LABEL_41;
      }
    }
    else
    {
      v22 = (_QWORD *)*((_QWORD *)this + 66);
    }
    v23 = *((_QWORD *)this + 66) + 8 * v20;
    while (v22 != (_QWORD *)v23)
    {
      v24 = (llvm::MDNode *)*v22++;
      llvm::MDNode::dropAllReferences(v24);
      if (v22 == (_QWORD *)v23)
        break;
      while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v22 == (_QWORD *)v23)
          goto LABEL_41;
      }
    }
  }
LABEL_41:
  if (*((_DWORD *)this + 140))
  {
    v25 = *((unsigned int *)this + 142);
    if ((_DWORD)v25)
    {
      v26 = 8 * v25;
      v27 = (_QWORD *)*((_QWORD *)this + 69);
      while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
          goto LABEL_53;
      }
    }
    else
    {
      v27 = (_QWORD *)*((_QWORD *)this + 69);
    }
    v28 = *((_QWORD *)this + 69) + 8 * v25;
    while (v27 != (_QWORD *)v28)
    {
      v29 = (llvm::MDNode *)*v27++;
      llvm::MDNode::dropAllReferences(v29);
      if (v27 == (_QWORD *)v28)
        break;
      while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v27 == (_QWORD *)v28)
          goto LABEL_53;
      }
    }
  }
LABEL_53:
  if (*((_DWORD *)this + 146))
  {
    v30 = *((unsigned int *)this + 148);
    if ((_DWORD)v30)
    {
      v31 = 8 * v30;
      v32 = (_QWORD *)*((_QWORD *)this + 72);
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_65;
      }
    }
    else
    {
      v32 = (_QWORD *)*((_QWORD *)this + 72);
    }
    v33 = *((_QWORD *)this + 72) + 8 * v30;
    while (v32 != (_QWORD *)v33)
    {
      v34 = (llvm::MDNode *)*v32++;
      llvm::MDNode::dropAllReferences(v34);
      if (v32 == (_QWORD *)v33)
        break;
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v32 == (_QWORD *)v33)
          goto LABEL_65;
      }
    }
  }
LABEL_65:
  if (*((_DWORD *)this + 152))
  {
    v35 = *((unsigned int *)this + 154);
    if ((_DWORD)v35)
    {
      v36 = 8 * v35;
      v37 = (_QWORD *)*((_QWORD *)this + 75);
      while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v37;
        v36 -= 8;
        if (!v36)
          goto LABEL_77;
      }
    }
    else
    {
      v37 = (_QWORD *)*((_QWORD *)this + 75);
    }
    v38 = *((_QWORD *)this + 75) + 8 * v35;
    while (v37 != (_QWORD *)v38)
    {
      v39 = (llvm::MDNode *)*v37++;
      llvm::MDNode::dropAllReferences(v39);
      if (v37 == (_QWORD *)v38)
        break;
      while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v37 == (_QWORD *)v38)
          goto LABEL_77;
      }
    }
  }
LABEL_77:
  if (*((_DWORD *)this + 158))
  {
    v40 = *((unsigned int *)this + 160);
    if ((_DWORD)v40)
    {
      v41 = 8 * v40;
      v42 = (_QWORD *)*((_QWORD *)this + 78);
      while ((*v42 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v42;
        v41 -= 8;
        if (!v41)
          goto LABEL_89;
      }
    }
    else
    {
      v42 = (_QWORD *)*((_QWORD *)this + 78);
    }
    v43 = *((_QWORD *)this + 78) + 8 * v40;
    while (v42 != (_QWORD *)v43)
    {
      v44 = (llvm::MDNode *)*v42++;
      llvm::MDNode::dropAllReferences(v44);
      if (v42 == (_QWORD *)v43)
        break;
      while ((*v42 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v42 == (_QWORD *)v43)
          goto LABEL_89;
      }
    }
  }
LABEL_89:
  if (*((_DWORD *)this + 164))
  {
    v45 = *((unsigned int *)this + 166);
    if ((_DWORD)v45)
    {
      v46 = 8 * v45;
      v47 = (_QWORD *)*((_QWORD *)this + 81);
      while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v47;
        v46 -= 8;
        if (!v46)
          goto LABEL_101;
      }
    }
    else
    {
      v47 = (_QWORD *)*((_QWORD *)this + 81);
    }
    v48 = *((_QWORD *)this + 81) + 8 * v45;
    while (v47 != (_QWORD *)v48)
    {
      v49 = (llvm::MDNode *)*v47++;
      llvm::MDNode::dropAllReferences(v49);
      if (v47 == (_QWORD *)v48)
        break;
      while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v47 == (_QWORD *)v48)
          goto LABEL_101;
      }
    }
  }
LABEL_101:
  if (*((_DWORD *)this + 170))
  {
    v50 = *((unsigned int *)this + 172);
    if ((_DWORD)v50)
    {
      v51 = 8 * v50;
      v52 = (_QWORD *)*((_QWORD *)this + 84);
      while ((*v52 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v52;
        v51 -= 8;
        if (!v51)
          goto LABEL_113;
      }
    }
    else
    {
      v52 = (_QWORD *)*((_QWORD *)this + 84);
    }
    v53 = *((_QWORD *)this + 84) + 8 * v50;
    while (v52 != (_QWORD *)v53)
    {
      v54 = (llvm::MDNode *)*v52++;
      llvm::MDNode::dropAllReferences(v54);
      if (v52 == (_QWORD *)v53)
        break;
      while ((*v52 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v52 == (_QWORD *)v53)
          goto LABEL_113;
      }
    }
  }
LABEL_113:
  if (*((_DWORD *)this + 176))
  {
    v55 = *((unsigned int *)this + 178);
    if ((_DWORD)v55)
    {
      v56 = 8 * v55;
      v57 = (_QWORD *)*((_QWORD *)this + 87);
      while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v57;
        v56 -= 8;
        if (!v56)
          goto LABEL_125;
      }
    }
    else
    {
      v57 = (_QWORD *)*((_QWORD *)this + 87);
    }
    v58 = *((_QWORD *)this + 87) + 8 * v55;
    while (v57 != (_QWORD *)v58)
    {
      v59 = (llvm::MDNode *)*v57++;
      llvm::MDNode::dropAllReferences(v59);
      if (v57 == (_QWORD *)v58)
        break;
      while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v57 == (_QWORD *)v58)
          goto LABEL_125;
      }
    }
  }
LABEL_125:
  if (*((_DWORD *)this + 182))
  {
    v60 = *((unsigned int *)this + 184);
    if ((_DWORD)v60)
    {
      v61 = 8 * v60;
      v62 = (_QWORD *)*((_QWORD *)this + 90);
      while ((*v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v62;
        v61 -= 8;
        if (!v61)
          goto LABEL_137;
      }
    }
    else
    {
      v62 = (_QWORD *)*((_QWORD *)this + 90);
    }
    v63 = *((_QWORD *)this + 90) + 8 * v60;
    while (v62 != (_QWORD *)v63)
    {
      v64 = (llvm::MDNode *)*v62++;
      llvm::MDNode::dropAllReferences(v64);
      if (v62 == (_QWORD *)v63)
        break;
      while ((*v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v62 == (_QWORD *)v63)
          goto LABEL_137;
      }
    }
  }
LABEL_137:
  if (*((_DWORD *)this + 188))
  {
    v65 = *((unsigned int *)this + 190);
    if ((_DWORD)v65)
    {
      v66 = 8 * v65;
      v67 = (_QWORD *)*((_QWORD *)this + 93);
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v67;
        v66 -= 8;
        if (!v66)
          goto LABEL_149;
      }
    }
    else
    {
      v67 = (_QWORD *)*((_QWORD *)this + 93);
    }
    v68 = *((_QWORD *)this + 93) + 8 * v65;
    while (v67 != (_QWORD *)v68)
    {
      v69 = (llvm::MDNode *)*v67++;
      llvm::MDNode::dropAllReferences(v69);
      if (v67 == (_QWORD *)v68)
        break;
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v67 == (_QWORD *)v68)
          goto LABEL_149;
      }
    }
  }
LABEL_149:
  if (*((_DWORD *)this + 194))
  {
    v70 = *((unsigned int *)this + 196);
    if ((_DWORD)v70)
    {
      v71 = 8 * v70;
      v72 = (_QWORD *)*((_QWORD *)this + 96);
      while ((*v72 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v72;
        v71 -= 8;
        if (!v71)
          goto LABEL_161;
      }
    }
    else
    {
      v72 = (_QWORD *)*((_QWORD *)this + 96);
    }
    v73 = *((_QWORD *)this + 96) + 8 * v70;
    while (v72 != (_QWORD *)v73)
    {
      v74 = (llvm::MDNode *)*v72++;
      llvm::MDNode::dropAllReferences(v74);
      if (v72 == (_QWORD *)v73)
        break;
      while ((*v72 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v72 == (_QWORD *)v73)
          goto LABEL_161;
      }
    }
  }
LABEL_161:
  if (*((_DWORD *)this + 200))
  {
    v75 = *((unsigned int *)this + 202);
    if ((_DWORD)v75)
    {
      v76 = 8 * v75;
      v77 = (_QWORD *)*((_QWORD *)this + 99);
      while ((*v77 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v77;
        v76 -= 8;
        if (!v76)
          goto LABEL_173;
      }
    }
    else
    {
      v77 = (_QWORD *)*((_QWORD *)this + 99);
    }
    v78 = *((_QWORD *)this + 99) + 8 * v75;
    while (v77 != (_QWORD *)v78)
    {
      v79 = (llvm::MDNode *)*v77++;
      llvm::MDNode::dropAllReferences(v79);
      if (v77 == (_QWORD *)v78)
        break;
      while ((*v77 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v77 == (_QWORD *)v78)
          goto LABEL_173;
      }
    }
  }
LABEL_173:
  if (*((_DWORD *)this + 206))
  {
    v80 = *((unsigned int *)this + 208);
    if ((_DWORD)v80)
    {
      v81 = 8 * v80;
      v82 = (_QWORD *)*((_QWORD *)this + 102);
      while ((*v82 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v82;
        v81 -= 8;
        if (!v81)
          goto LABEL_185;
      }
    }
    else
    {
      v82 = (_QWORD *)*((_QWORD *)this + 102);
    }
    v83 = *((_QWORD *)this + 102) + 8 * v80;
    while (v82 != (_QWORD *)v83)
    {
      v84 = (llvm::MDNode *)*v82++;
      llvm::MDNode::dropAllReferences(v84);
      if (v82 == (_QWORD *)v83)
        break;
      while ((*v82 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v82 == (_QWORD *)v83)
          goto LABEL_185;
      }
    }
  }
LABEL_185:
  if (*((_DWORD *)this + 212))
  {
    v85 = *((unsigned int *)this + 214);
    if ((_DWORD)v85)
    {
      v86 = 8 * v85;
      v87 = (_QWORD *)*((_QWORD *)this + 105);
      while ((*v87 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v87;
        v86 -= 8;
        if (!v86)
          goto LABEL_197;
      }
    }
    else
    {
      v87 = (_QWORD *)*((_QWORD *)this + 105);
    }
    v88 = *((_QWORD *)this + 105) + 8 * v85;
    while (v87 != (_QWORD *)v88)
    {
      v89 = (llvm::MDNode *)*v87++;
      llvm::MDNode::dropAllReferences(v89);
      if (v87 == (_QWORD *)v88)
        break;
      while ((*v87 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v87 == (_QWORD *)v88)
          goto LABEL_197;
      }
    }
  }
LABEL_197:
  if (*((_DWORD *)this + 218))
  {
    v90 = *((unsigned int *)this + 220);
    if ((_DWORD)v90)
    {
      v91 = 8 * v90;
      v92 = (_QWORD *)*((_QWORD *)this + 108);
      while ((*v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v92;
        v91 -= 8;
        if (!v91)
          goto LABEL_209;
      }
    }
    else
    {
      v92 = (_QWORD *)*((_QWORD *)this + 108);
    }
    v93 = *((_QWORD *)this + 108) + 8 * v90;
    while (v92 != (_QWORD *)v93)
    {
      v94 = (llvm::MDNode *)*v92++;
      llvm::MDNode::dropAllReferences(v94);
      if (v92 == (_QWORD *)v93)
        break;
      while ((*v92 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v92 == (_QWORD *)v93)
          goto LABEL_209;
      }
    }
  }
LABEL_209:
  if (*((_DWORD *)this + 224))
  {
    v95 = *((unsigned int *)this + 226);
    if ((_DWORD)v95)
    {
      v96 = 8 * v95;
      v97 = (_QWORD *)*((_QWORD *)this + 111);
      while ((*v97 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v97;
        v96 -= 8;
        if (!v96)
          goto LABEL_221;
      }
    }
    else
    {
      v97 = (_QWORD *)*((_QWORD *)this + 111);
    }
    v98 = *((_QWORD *)this + 111) + 8 * v95;
    while (v97 != (_QWORD *)v98)
    {
      v99 = (llvm::MDNode *)*v97++;
      llvm::MDNode::dropAllReferences(v99);
      if (v97 == (_QWORD *)v98)
        break;
      while ((*v97 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v97 == (_QWORD *)v98)
          goto LABEL_221;
      }
    }
  }
LABEL_221:
  if (*((_DWORD *)this + 230))
  {
    v100 = *((unsigned int *)this + 232);
    if ((_DWORD)v100)
    {
      v101 = 8 * v100;
      v102 = (_QWORD *)*((_QWORD *)this + 114);
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v102;
        v101 -= 8;
        if (!v101)
          goto LABEL_233;
      }
    }
    else
    {
      v102 = (_QWORD *)*((_QWORD *)this + 114);
    }
    v103 = *((_QWORD *)this + 114) + 8 * v100;
    while (v102 != (_QWORD *)v103)
    {
      v104 = (llvm::MDNode *)*v102++;
      llvm::MDNode::dropAllReferences(v104);
      if (v102 == (_QWORD *)v103)
        break;
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v102 == (_QWORD *)v103)
          goto LABEL_233;
      }
    }
  }
LABEL_233:
  if (*((_DWORD *)this + 236))
  {
    v105 = *((unsigned int *)this + 238);
    if ((_DWORD)v105)
    {
      v106 = 8 * v105;
      v107 = (_QWORD *)*((_QWORD *)this + 117);
      while ((*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v107;
        v106 -= 8;
        if (!v106)
          goto LABEL_245;
      }
    }
    else
    {
      v107 = (_QWORD *)*((_QWORD *)this + 117);
    }
    v108 = *((_QWORD *)this + 117) + 8 * v105;
    while (v107 != (_QWORD *)v108)
    {
      v109 = (llvm::MDNode *)*v107++;
      llvm::MDNode::dropAllReferences(v109);
      if (v107 == (_QWORD *)v108)
        break;
      while ((*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v107 == (_QWORD *)v108)
          goto LABEL_245;
      }
    }
  }
LABEL_245:
  if (*((_DWORD *)this + 242))
  {
    v110 = *((unsigned int *)this + 244);
    if ((_DWORD)v110)
    {
      v111 = 8 * v110;
      v112 = (_QWORD *)*((_QWORD *)this + 120);
      while ((*v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v112;
        v111 -= 8;
        if (!v111)
          goto LABEL_257;
      }
    }
    else
    {
      v112 = (_QWORD *)*((_QWORD *)this + 120);
    }
    v113 = *((_QWORD *)this + 120) + 8 * v110;
    while (v112 != (_QWORD *)v113)
    {
      v114 = (llvm::MDNode *)*v112++;
      llvm::MDNode::dropAllReferences(v114);
      if (v112 == (_QWORD *)v113)
        break;
      while ((*v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v112 == (_QWORD *)v113)
          goto LABEL_257;
      }
    }
  }
LABEL_257:
  if (*((_DWORD *)this + 248))
  {
    v115 = *((unsigned int *)this + 250);
    if ((_DWORD)v115)
    {
      v116 = 8 * v115;
      v117 = (_QWORD *)*((_QWORD *)this + 123);
      while ((*v117 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v117;
        v116 -= 8;
        if (!v116)
          goto LABEL_269;
      }
    }
    else
    {
      v117 = (_QWORD *)*((_QWORD *)this + 123);
    }
    v118 = *((_QWORD *)this + 123) + 8 * v115;
    while (v117 != (_QWORD *)v118)
    {
      v119 = (llvm::MDNode *)*v117++;
      llvm::MDNode::dropAllReferences(v119);
      if (v117 == (_QWORD *)v118)
        break;
      while ((*v117 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v117 == (_QWORD *)v118)
          goto LABEL_269;
      }
    }
  }
LABEL_269:
  if (*((_DWORD *)this + 254))
  {
    v120 = *((unsigned int *)this + 256);
    if ((_DWORD)v120)
    {
      v121 = 8 * v120;
      v122 = (_QWORD *)*((_QWORD *)this + 126);
      while ((*v122 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v122;
        v121 -= 8;
        if (!v121)
          goto LABEL_281;
      }
    }
    else
    {
      v122 = (_QWORD *)*((_QWORD *)this + 126);
    }
    v123 = *((_QWORD *)this + 126) + 8 * v120;
    while (v122 != (_QWORD *)v123)
    {
      v124 = (llvm::MDNode *)*v122++;
      llvm::MDNode::dropAllReferences(v124);
      if (v122 == (_QWORD *)v123)
        break;
      while ((*v122 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v122 == (_QWORD *)v123)
          goto LABEL_281;
      }
    }
  }
LABEL_281:
  if (*((_DWORD *)this + 260))
  {
    v125 = *((unsigned int *)this + 262);
    if ((_DWORD)v125)
    {
      v126 = 8 * v125;
      v127 = (_QWORD *)*((_QWORD *)this + 129);
      while ((*v127 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v127;
        v126 -= 8;
        if (!v126)
          goto LABEL_293;
      }
    }
    else
    {
      v127 = (_QWORD *)*((_QWORD *)this + 129);
    }
    v128 = *((_QWORD *)this + 129) + 8 * v125;
    while (v127 != (_QWORD *)v128)
    {
      v129 = (llvm::MDNode *)*v127++;
      llvm::MDNode::dropAllReferences(v129);
      if (v127 == (_QWORD *)v128)
        break;
      while ((*v127 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v127 == (_QWORD *)v128)
          goto LABEL_293;
      }
    }
  }
LABEL_293:
  if (*((_DWORD *)this + 266))
  {
    v130 = *((unsigned int *)this + 268);
    if ((_DWORD)v130)
    {
      v131 = 8 * v130;
      v132 = (_QWORD *)*((_QWORD *)this + 132);
      while ((*v132 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v132;
        v131 -= 8;
        if (!v131)
          goto LABEL_305;
      }
    }
    else
    {
      v132 = (_QWORD *)*((_QWORD *)this + 132);
    }
    v133 = *((_QWORD *)this + 132) + 8 * v130;
    while (v132 != (_QWORD *)v133)
    {
      v134 = (llvm::MDNode *)*v132++;
      llvm::MDNode::dropAllReferences(v134);
      if (v132 == (_QWORD *)v133)
        break;
      while ((*v132 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v132 == (_QWORD *)v133)
          goto LABEL_305;
      }
    }
  }
LABEL_305:
  if (*((_DWORD *)this + 272))
  {
    v135 = *((unsigned int *)this + 274);
    if ((_DWORD)v135)
    {
      v136 = 8 * v135;
      v137 = (_QWORD *)*((_QWORD *)this + 135);
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v137;
        v136 -= 8;
        if (!v136)
          goto LABEL_317;
      }
    }
    else
    {
      v137 = (_QWORD *)*((_QWORD *)this + 135);
    }
    v138 = *((_QWORD *)this + 135) + 8 * v135;
    while (v137 != (_QWORD *)v138)
    {
      v139 = (llvm::MDNode *)*v137++;
      llvm::MDNode::dropAllReferences(v139);
      if (v137 == (_QWORD *)v138)
        break;
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v137 == (_QWORD *)v138)
          goto LABEL_317;
      }
    }
  }
LABEL_317:
  if (*((_DWORD *)this + 278))
  {
    v140 = *((unsigned int *)this + 280);
    if ((_DWORD)v140)
    {
      v141 = 8 * v140;
      v142 = (_QWORD *)*((_QWORD *)this + 138);
      while ((*v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v142;
        v141 -= 8;
        if (!v141)
          goto LABEL_329;
      }
    }
    else
    {
      v142 = (_QWORD *)*((_QWORD *)this + 138);
    }
    v143 = *((_QWORD *)this + 138) + 8 * v140;
    while (v142 != (_QWORD *)v143)
    {
      v144 = (llvm::MDNode *)*v142++;
      llvm::MDNode::dropAllReferences(v144);
      if (v142 == (_QWORD *)v143)
        break;
      while ((*v142 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v142 == (_QWORD *)v143)
          goto LABEL_329;
      }
    }
  }
LABEL_329:
  if (*((_DWORD *)this + 284))
  {
    v145 = *((unsigned int *)this + 286);
    if ((_DWORD)v145)
    {
      v146 = 8 * v145;
      v147 = (_QWORD *)*((_QWORD *)this + 141);
      while ((*v147 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v147;
        v146 -= 8;
        if (!v146)
          goto LABEL_341;
      }
    }
    else
    {
      v147 = (_QWORD *)*((_QWORD *)this + 141);
    }
    v148 = *((_QWORD *)this + 141) + 8 * v145;
    while (v147 != (_QWORD *)v148)
    {
      v149 = (llvm::MDNode *)*v147++;
      llvm::MDNode::dropAllReferences(v149);
      if (v147 == (_QWORD *)v148)
        break;
      while ((*v147 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v147 == (_QWORD *)v148)
          goto LABEL_341;
      }
    }
  }
LABEL_341:
  if (*((_DWORD *)this + 290))
  {
    v150 = *((unsigned int *)this + 292);
    if ((_DWORD)v150)
    {
      v151 = 8 * v150;
      v152 = (_QWORD *)*((_QWORD *)this + 144);
      while ((*v152 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v152;
        v151 -= 8;
        if (!v151)
          goto LABEL_353;
      }
    }
    else
    {
      v152 = (_QWORD *)*((_QWORD *)this + 144);
    }
    v153 = *((_QWORD *)this + 144) + 8 * v150;
    while (v152 != (_QWORD *)v153)
    {
      v154 = (llvm::MDNode *)*v152++;
      llvm::MDNode::dropAllReferences(v154);
      if (v152 == (_QWORD *)v153)
        break;
      while ((*v152 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v152 == (_QWORD *)v153)
          goto LABEL_353;
      }
    }
  }
LABEL_353:
  if (*((_DWORD *)this + 296))
  {
    v155 = *((unsigned int *)this + 298);
    if ((_DWORD)v155)
    {
      v156 = 8 * v155;
      v157 = (_QWORD *)*((_QWORD *)this + 147);
      while ((*v157 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v157;
        v156 -= 8;
        if (!v156)
          goto LABEL_365;
      }
    }
    else
    {
      v157 = (_QWORD *)*((_QWORD *)this + 147);
    }
    v158 = *((_QWORD *)this + 147) + 8 * v155;
    while (v157 != (_QWORD *)v158)
    {
      v159 = (llvm::MDNode *)*v157++;
      llvm::MDNode::dropAllReferences(v159);
      if (v157 == (_QWORD *)v158)
        break;
      while ((*v157 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v157 == (_QWORD *)v158)
          goto LABEL_365;
      }
    }
  }
LABEL_365:
  if (*((_DWORD *)this + 110))
  {
    v160 = *((unsigned int *)this + 112);
    if ((_DWORD)v160)
    {
      v161 = 16 * v160;
      v162 = (_QWORD *)*((_QWORD *)this + 54);
      while ((*v162 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v162 += 2;
        v161 -= 16;
        if (!v161)
          goto LABEL_370;
      }
    }
    else
    {
      v162 = (_QWORD *)*((_QWORD *)this + 54);
    }
    v170 = *((_QWORD *)this + 54) + 16 * v160;
LABEL_383:
    if (v162 != (_QWORD *)v170)
    {
      llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v162[1] + 8), 0);
      while (1)
      {
        v162 += 2;
        if (v162 == (_QWORD *)v170)
          break;
        if ((*v162 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_383;
      }
    }
  }
LABEL_370:
  if (*((_DWORD *)this + 116))
  {
    v163 = *((unsigned int *)this + 118);
    if ((_DWORD)v163)
    {
      v164 = 16 * v163;
      v165 = (_QWORD *)*((_QWORD *)this + 57);
      while ((*v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v165 += 2;
        v164 -= 16;
        if (!v164)
          goto LABEL_375;
      }
    }
    else
    {
      v165 = (_QWORD *)*((_QWORD *)this + 57);
    }
    v171 = *((_QWORD *)this + 57) + 16 * v163;
LABEL_390:
    if (v165 != (_QWORD *)v171)
    {
      *(_QWORD *)(v165[1] + 24) = 0;
      while (1)
      {
        v165 += 2;
        if (v165 == (_QWORD *)v171)
          break;
        if ((*v165 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_390;
      }
    }
  }
LABEL_375:
  v166 = *((_DWORD *)this + 122);
  if (!v166)
    goto LABEL_408;
  v167 = *((unsigned int *)this + 124);
  if ((_DWORD)v167)
  {
    v168 = 8 * v167;
    v169 = (llvm::DIArgList **)*((_QWORD *)this + 60);
    while (((unint64_t)*v169 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v169;
      v168 -= 8;
      if (!v168)
        goto LABEL_407;
    }
  }
  else
  {
    v169 = (llvm::DIArgList **)*((_QWORD *)this + 60);
  }
  v172 = *((_QWORD *)this + 60) + 8 * v167;
  if (v169 != (llvm::DIArgList **)v172)
  {
    do
    {
      v173 = (uint64_t)*v169;
      llvm::DIArgList::dropAllReferences(*v169, 0);
      if (v173)
      {
        llvm::DIArgList::untrack(v173);
        v174 = *(void **)(v173 + 128);
        if (v174 != (void *)(v173 + 144))
          free(v174);
        if ((*(_BYTE *)(v173 + 24) & 1) == 0)
          llvm::deallocate_buffer(*(llvm **)(v173 + 32), (void *)(24 * *(unsigned int *)(v173 + 40)));
        operator delete((void *)v173);
      }
      do
      {
        if (++v169 == (llvm::DIArgList **)v172)
          goto LABEL_406;
      }
      while (((unint64_t)*v169 | 0x1000) == 0xFFFFFFFFFFFFF000);
    }
    while (v169 != (llvm::DIArgList **)v172);
LABEL_406:
    v166 = *((_DWORD *)this + 122);
  }
LABEL_407:
  if (!v166)
  {
LABEL_408:
    if (!*((_DWORD *)this + 123))
      goto LABEL_422;
    v166 = 0;
  }
  v175 = (int64x2_t **)((char *)this + 480);
  v176 = *((unsigned int *)this + 124);
  if (v176 > 4 * v166 && v176 >= 0x41)
  {
    llvm::DenseMap<llvm::MCSection *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::MCSection *,void>,llvm::detail::DenseSetPair<llvm::MCSection *>>::shrink_and_clear((uint64_t)v175);
    v177 = (llvm::MDNode **)*((_QWORD *)this + 154);
    v178 = (llvm::MDNode **)*((_QWORD *)this + 155);
    if (v177 == v178)
      goto LABEL_424;
    goto LABEL_423;
  }
  if ((_DWORD)v176)
  {
    v179 = *v175;
    v180 = (v176 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v181 = *v175;
    if (v180 < 3)
      goto LABEL_419;
    v182 = v180 + 1;
    v181 = (int64x2_t *)((char *)v179 + 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL));
    v183 = v179 + 1;
    v184 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v183[-1] = v184;
      *v183 = v184;
      v183 += 2;
      v185 -= 4;
    }
    while (v185);
    if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_419:
      v186 = (int64x2_t *)((char *)v179 + 8 * v176);
      do
      {
        v181->i64[0] = -4096;
        v181 = (int64x2_t *)((char *)v181 + 8);
      }
      while (v181 != v186);
    }
  }
  *((_QWORD *)this + 61) = 0;
LABEL_422:
  v177 = (llvm::MDNode **)*((_QWORD *)this + 154);
  v178 = (llvm::MDNode **)*((_QWORD *)this + 155);
  if (v177 == v178)
  {
LABEL_424:
    if (*((_DWORD *)this + 128))
    {
      v188 = *((unsigned int *)this + 130);
      if ((_DWORD)v188)
      {
        v189 = 8 * v188;
        v190 = (llvm::MDNode **)*((_QWORD *)this + 63);
        while (((unint64_t)*v190 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v190;
          v189 -= 8;
          if (!v189)
            goto LABEL_429;
        }
      }
      else
      {
        v190 = (llvm::MDNode **)*((_QWORD *)this + 63);
      }
      v290 = *((_QWORD *)this + 63) + 8 * v188;
LABEL_597:
      if (v190 != (llvm::MDNode **)v290)
      {
        v291 = *v190;
        if (*v190)
        {
          llvm::MDNode::dropAllReferences(*v190);
          v292 = *((_QWORD *)v291 + 1);
          if ((v292 & 4) != 0)
          {
            v293 = v292 & 0xFFFFFFFFFFFFFFF8;
            if ((v292 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v293 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v293 + 24), (void *)(24 * *(unsigned int *)(v293 + 32)));
              operator delete((void *)v293);
            }
          }
          llvm::MDNode::operator delete(v291);
        }
        while (++v190 != (llvm::MDNode **)v290)
        {
          if (((unint64_t)*v190 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_597;
        }
      }
    }
LABEL_429:
    if (*((_DWORD *)this + 134))
    {
      v191 = *((unsigned int *)this + 136);
      if ((_DWORD)v191)
      {
        v192 = 8 * v191;
        v193 = (llvm::MDNode **)*((_QWORD *)this + 66);
        while (((unint64_t)*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v193;
          v192 -= 8;
          if (!v192)
            goto LABEL_434;
        }
      }
      else
      {
        v193 = (llvm::MDNode **)*((_QWORD *)this + 66);
      }
      v294 = *((_QWORD *)this + 66) + 8 * v191;
LABEL_610:
      if (v193 != (llvm::MDNode **)v294)
      {
        v295 = *v193;
        if (*v193)
        {
          llvm::MDNode::dropAllReferences(*v193);
          v296 = *((_QWORD *)v295 + 1);
          if ((v296 & 4) != 0)
          {
            v297 = v296 & 0xFFFFFFFFFFFFFFF8;
            if ((v296 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v297 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v297 + 24), (void *)(24 * *(unsigned int *)(v297 + 32)));
              operator delete((void *)v297);
            }
          }
          llvm::MDNode::operator delete(v295);
        }
        while (++v193 != (llvm::MDNode **)v294)
        {
          if (((unint64_t)*v193 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_610;
        }
      }
    }
LABEL_434:
    if (*((_DWORD *)this + 140))
    {
      v194 = *((unsigned int *)this + 142);
      if ((_DWORD)v194)
      {
        v195 = 8 * v194;
        v196 = (_QWORD *)*((_QWORD *)this + 69);
        while ((*v196 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v196;
          v195 -= 8;
          if (!v195)
            goto LABEL_439;
        }
      }
      else
      {
        v196 = (_QWORD *)*((_QWORD *)this + 69);
      }
      v298 = *((_QWORD *)this + 69) + 8 * v194;
LABEL_623:
      if (v196 != (_QWORD *)v298)
      {
        v299 = (_QWORD *)*v196;
        if (*v196)
        {
          v300 = (void *)v299[2];
          if (v300)
          {
            v299[3] = v300;
            operator delete(v300);
          }
          v301 = v299[1];
          if ((v301 & 4) != 0)
          {
            v302 = v301 & 0xFFFFFFFFFFFFFFF8;
            if ((v301 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v302 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v302 + 24), (void *)(24 * *(unsigned int *)(v302 + 32)));
              operator delete((void *)v302);
            }
          }
          llvm::MDNode::operator delete(v299);
        }
        while (++v196 != (_QWORD *)v298)
        {
          if ((*v196 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_623;
        }
      }
    }
LABEL_439:
    if (*((_DWORD *)this + 146))
    {
      v197 = *((unsigned int *)this + 148);
      if ((_DWORD)v197)
      {
        v198 = 8 * v197;
        v199 = (_QWORD *)*((_QWORD *)this + 72);
        while ((*v199 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v199;
          v198 -= 8;
          if (!v198)
            goto LABEL_444;
        }
      }
      else
      {
        v199 = (_QWORD *)*((_QWORD *)this + 72);
      }
      v303 = *((_QWORD *)this + 72) + 8 * v197;
LABEL_638:
      if (v199 != (_QWORD *)v303)
      {
        v304 = (_QWORD *)*v199;
        if (*v199)
        {
          v305 = v304[1];
          if ((v305 & 4) != 0)
          {
            v306 = v305 & 0xFFFFFFFFFFFFFFF8;
            if ((v305 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v306 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v306 + 24), (void *)(24 * *(unsigned int *)(v306 + 32)));
              operator delete((void *)v306);
            }
          }
          llvm::MDNode::operator delete(v304);
        }
        while (++v199 != (_QWORD *)v303)
        {
          if ((*v199 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_638;
        }
      }
    }
LABEL_444:
    if (*((_DWORD *)this + 152))
    {
      v200 = *((unsigned int *)this + 154);
      if ((_DWORD)v200)
      {
        v201 = 8 * v200;
        v202 = (llvm::MDNode **)*((_QWORD *)this + 75);
        while (((unint64_t)*v202 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v202;
          v201 -= 8;
          if (!v201)
            goto LABEL_449;
        }
      }
      else
      {
        v202 = (llvm::MDNode **)*((_QWORD *)this + 75);
      }
      v307 = *((_QWORD *)this + 75) + 8 * v200;
LABEL_651:
      if (v202 != (llvm::MDNode **)v307)
      {
        v308 = *v202;
        if (*v202)
        {
          llvm::MDNode::dropAllReferences(*v202);
          v309 = *((_QWORD *)v308 + 1);
          if ((v309 & 4) != 0)
          {
            v310 = v309 & 0xFFFFFFFFFFFFFFF8;
            if ((v309 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v310 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v310 + 24), (void *)(24 * *(unsigned int *)(v310 + 32)));
              operator delete((void *)v310);
            }
          }
          llvm::MDNode::operator delete(v308);
        }
        while (++v202 != (llvm::MDNode **)v307)
        {
          if (((unint64_t)*v202 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_651;
        }
      }
    }
LABEL_449:
    if (*((_DWORD *)this + 158))
    {
      v203 = *((unsigned int *)this + 160);
      if ((_DWORD)v203)
      {
        v204 = 8 * v203;
        v205 = (_QWORD *)*((_QWORD *)this + 78);
        while ((*v205 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v205;
          v204 -= 8;
          if (!v204)
            goto LABEL_454;
        }
      }
      else
      {
        v205 = (_QWORD *)*((_QWORD *)this + 78);
      }
      v311 = *((_QWORD *)this + 78) + 8 * v203;
LABEL_664:
      if (v205 != (_QWORD *)v311)
      {
        v312 = (_QWORD *)*v205;
        if (*v205)
        {
          v313 = v312[1];
          if ((v313 & 4) != 0)
          {
            v314 = v313 & 0xFFFFFFFFFFFFFFF8;
            if ((v313 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v314 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v314 + 24), (void *)(24 * *(unsigned int *)(v314 + 32)));
              operator delete((void *)v314);
            }
          }
          llvm::MDNode::operator delete(v312);
        }
        while (++v205 != (_QWORD *)v311)
        {
          if ((*v205 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_664;
        }
      }
    }
LABEL_454:
    if (*((_DWORD *)this + 164))
    {
      v206 = *((unsigned int *)this + 166);
      if ((_DWORD)v206)
      {
        v207 = 8 * v206;
        v208 = (uint64_t *)*((_QWORD *)this + 81);
        while ((*v208 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v208;
          v207 -= 8;
          if (!v207)
            goto LABEL_459;
        }
      }
      else
      {
        v208 = (uint64_t *)*((_QWORD *)this + 81);
      }
      v315 = *((_QWORD *)this + 81) + 8 * v206;
LABEL_677:
      if (v208 != (uint64_t *)v315)
      {
        v316 = *v208;
        if (*v208)
        {
          if (*(_DWORD *)(v316 + 24) >= 0x41u)
          {
            v317 = *(void **)(v316 + 16);
            if (v317)
              operator delete[](v317);
          }
          v318 = *(_QWORD *)(v316 + 8);
          if ((v318 & 4) != 0)
          {
            v319 = v318 & 0xFFFFFFFFFFFFFFF8;
            if ((v318 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v319 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v319 + 24), (void *)(24 * *(unsigned int *)(v319 + 32)));
              operator delete((void *)v319);
            }
          }
          llvm::MDNode::operator delete((_QWORD *)v316);
        }
        while (++v208 != (uint64_t *)v315)
        {
          if ((*v208 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_677;
        }
      }
    }
LABEL_459:
    if (*((_DWORD *)this + 170))
    {
      v209 = *((unsigned int *)this + 172);
      if ((_DWORD)v209)
      {
        v210 = 8 * v209;
        v211 = (_QWORD *)*((_QWORD *)this + 84);
        while ((*v211 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v211;
          v210 -= 8;
          if (!v210)
            goto LABEL_464;
        }
      }
      else
      {
        v211 = (_QWORD *)*((_QWORD *)this + 84);
      }
      v320 = *((_QWORD *)this + 84) + 8 * v209;
LABEL_693:
      if (v211 != (_QWORD *)v320)
      {
        v321 = (_QWORD *)*v211;
        if (*v211)
        {
          v322 = v321[1];
          if ((v322 & 4) != 0)
          {
            v323 = v322 & 0xFFFFFFFFFFFFFFF8;
            if ((v322 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v323 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v323 + 24), (void *)(24 * *(unsigned int *)(v323 + 32)));
              operator delete((void *)v323);
            }
          }
          llvm::MDNode::operator delete(v321);
        }
        while (++v211 != (_QWORD *)v320)
        {
          if ((*v211 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_693;
        }
      }
    }
LABEL_464:
    if (*((_DWORD *)this + 176))
    {
      v212 = *((unsigned int *)this + 178);
      if ((_DWORD)v212)
      {
        v213 = 8 * v212;
        v214 = (_QWORD *)*((_QWORD *)this + 87);
        while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v214;
          v213 -= 8;
          if (!v213)
            goto LABEL_469;
        }
      }
      else
      {
        v214 = (_QWORD *)*((_QWORD *)this + 87);
      }
      v324 = *((_QWORD *)this + 87) + 8 * v212;
LABEL_706:
      if (v214 != (_QWORD *)v324)
      {
        v325 = (_QWORD *)*v214;
        if (*v214)
        {
          v326 = v325[1];
          if ((v326 & 4) != 0)
          {
            v327 = v326 & 0xFFFFFFFFFFFFFFF8;
            if ((v326 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v327 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v327 + 24), (void *)(24 * *(unsigned int *)(v327 + 32)));
              operator delete((void *)v327);
            }
          }
          llvm::MDNode::operator delete(v325);
        }
        while (++v214 != (_QWORD *)v324)
        {
          if ((*v214 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_706;
        }
      }
    }
LABEL_469:
    if (*((_DWORD *)this + 182))
    {
      v215 = *((unsigned int *)this + 184);
      if ((_DWORD)v215)
      {
        v216 = 8 * v215;
        v217 = (_QWORD *)*((_QWORD *)this + 90);
        while ((*v217 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v217;
          v216 -= 8;
          if (!v216)
            goto LABEL_474;
        }
      }
      else
      {
        v217 = (_QWORD *)*((_QWORD *)this + 90);
      }
      v328 = *((_QWORD *)this + 90) + 8 * v215;
LABEL_719:
      if (v217 != (_QWORD *)v328)
      {
        v329 = (_QWORD *)*v217;
        if (*v217)
        {
          v330 = v329[1];
          if ((v330 & 4) != 0)
          {
            v331 = v330 & 0xFFFFFFFFFFFFFFF8;
            if ((v330 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v331 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v331 + 24), (void *)(24 * *(unsigned int *)(v331 + 32)));
              operator delete((void *)v331);
            }
          }
          llvm::MDNode::operator delete(v329);
        }
        while (++v217 != (_QWORD *)v328)
        {
          if ((*v217 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_719;
        }
      }
    }
LABEL_474:
    if (*((_DWORD *)this + 188))
    {
      v218 = *((unsigned int *)this + 190);
      if ((_DWORD)v218)
      {
        v219 = 8 * v218;
        v220 = (_QWORD *)*((_QWORD *)this + 93);
        while ((*v220 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v220;
          v219 -= 8;
          if (!v219)
            goto LABEL_479;
        }
      }
      else
      {
        v220 = (_QWORD *)*((_QWORD *)this + 93);
      }
      v332 = *((_QWORD *)this + 93) + 8 * v218;
LABEL_732:
      if (v220 != (_QWORD *)v332)
      {
        v333 = (_QWORD *)*v220;
        if (*v220)
        {
          v334 = v333[1];
          if ((v334 & 4) != 0)
          {
            v335 = v334 & 0xFFFFFFFFFFFFFFF8;
            if ((v334 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v335 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v335 + 24), (void *)(24 * *(unsigned int *)(v335 + 32)));
              operator delete((void *)v335);
            }
          }
          llvm::MDNode::operator delete(v333);
        }
        while (++v220 != (_QWORD *)v332)
        {
          if ((*v220 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_732;
        }
      }
    }
LABEL_479:
    if (*((_DWORD *)this + 194))
    {
      v221 = *((unsigned int *)this + 196);
      if ((_DWORD)v221)
      {
        v222 = 8 * v221;
        v223 = (_QWORD *)*((_QWORD *)this + 96);
        while ((*v223 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v223;
          v222 -= 8;
          if (!v222)
            goto LABEL_484;
        }
      }
      else
      {
        v223 = (_QWORD *)*((_QWORD *)this + 96);
      }
      v336 = *((_QWORD *)this + 96) + 8 * v221;
LABEL_745:
      if (v223 != (_QWORD *)v336)
      {
        v337 = (_QWORD *)*v223;
        if (*v223)
        {
          v338 = v337[1];
          if ((v338 & 4) != 0)
          {
            v339 = v338 & 0xFFFFFFFFFFFFFFF8;
            if ((v338 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v339 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v339 + 24), (void *)(24 * *(unsigned int *)(v339 + 32)));
              operator delete((void *)v339);
            }
          }
          llvm::MDNode::operator delete(v337);
        }
        while (++v223 != (_QWORD *)v336)
        {
          if ((*v223 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_745;
        }
      }
    }
LABEL_484:
    if (*((_DWORD *)this + 200))
    {
      v224 = *((unsigned int *)this + 202);
      if ((_DWORD)v224)
      {
        v225 = 8 * v224;
        v226 = (_QWORD *)*((_QWORD *)this + 99);
        while ((*v226 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v226;
          v225 -= 8;
          if (!v225)
            goto LABEL_489;
        }
      }
      else
      {
        v226 = (_QWORD *)*((_QWORD *)this + 99);
      }
      v340 = *((_QWORD *)this + 99) + 8 * v224;
LABEL_758:
      if (v226 != (_QWORD *)v340)
      {
        v341 = (_QWORD *)*v226;
        if (*v226)
        {
          v342 = v341[1];
          if ((v342 & 4) != 0)
          {
            v343 = v342 & 0xFFFFFFFFFFFFFFF8;
            if ((v342 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v343 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v343 + 24), (void *)(24 * *(unsigned int *)(v343 + 32)));
              operator delete((void *)v343);
            }
          }
          llvm::MDNode::operator delete(v341);
        }
        while (++v226 != (_QWORD *)v340)
        {
          if ((*v226 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_758;
        }
      }
    }
LABEL_489:
    if (*((_DWORD *)this + 206))
    {
      v227 = *((unsigned int *)this + 208);
      if ((_DWORD)v227)
      {
        v228 = 8 * v227;
        v229 = (_QWORD *)*((_QWORD *)this + 102);
        while ((*v229 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v229;
          v228 -= 8;
          if (!v228)
            goto LABEL_494;
        }
      }
      else
      {
        v229 = (_QWORD *)*((_QWORD *)this + 102);
      }
      v344 = *((_QWORD *)this + 102) + 8 * v227;
LABEL_771:
      if (v229 != (_QWORD *)v344)
      {
        v345 = (_QWORD *)*v229;
        if (*v229)
        {
          v346 = v345[1];
          if ((v346 & 4) != 0)
          {
            v347 = v346 & 0xFFFFFFFFFFFFFFF8;
            if ((v346 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v347 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v347 + 24), (void *)(24 * *(unsigned int *)(v347 + 32)));
              operator delete((void *)v347);
            }
          }
          llvm::MDNode::operator delete(v345);
        }
        while (++v229 != (_QWORD *)v344)
        {
          if ((*v229 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_771;
        }
      }
    }
LABEL_494:
    if (*((_DWORD *)this + 212))
    {
      v230 = *((unsigned int *)this + 214);
      if ((_DWORD)v230)
      {
        v231 = 8 * v230;
        v232 = (_QWORD *)*((_QWORD *)this + 105);
        while ((*v232 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v232;
          v231 -= 8;
          if (!v231)
            goto LABEL_499;
        }
      }
      else
      {
        v232 = (_QWORD *)*((_QWORD *)this + 105);
      }
      v348 = *((_QWORD *)this + 105) + 8 * v230;
LABEL_784:
      if (v232 != (_QWORD *)v348)
      {
        v349 = (_QWORD *)*v232;
        if (*v232)
        {
          v350 = v349[1];
          if ((v350 & 4) != 0)
          {
            v351 = v350 & 0xFFFFFFFFFFFFFFF8;
            if ((v350 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v351 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v351 + 24), (void *)(24 * *(unsigned int *)(v351 + 32)));
              operator delete((void *)v351);
            }
          }
          llvm::MDNode::operator delete(v349);
        }
        while (++v232 != (_QWORD *)v348)
        {
          if ((*v232 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_784;
        }
      }
    }
LABEL_499:
    if (*((_DWORD *)this + 218))
    {
      v233 = *((unsigned int *)this + 220);
      if ((_DWORD)v233)
      {
        v234 = 8 * v233;
        v235 = (_QWORD *)*((_QWORD *)this + 108);
        while ((*v235 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v235;
          v234 -= 8;
          if (!v234)
            goto LABEL_504;
        }
      }
      else
      {
        v235 = (_QWORD *)*((_QWORD *)this + 108);
      }
      v352 = *((_QWORD *)this + 108) + 8 * v233;
LABEL_797:
      if (v235 != (_QWORD *)v352)
      {
        v353 = (_QWORD *)*v235;
        if (*v235)
        {
          v354 = v353[1];
          if ((v354 & 4) != 0)
          {
            v355 = v354 & 0xFFFFFFFFFFFFFFF8;
            if ((v354 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v355 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v355 + 24), (void *)(24 * *(unsigned int *)(v355 + 32)));
              operator delete((void *)v355);
            }
          }
          llvm::MDNode::operator delete(v353);
        }
        while (++v235 != (_QWORD *)v352)
        {
          if ((*v235 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_797;
        }
      }
    }
LABEL_504:
    if (*((_DWORD *)this + 224))
    {
      v236 = *((unsigned int *)this + 226);
      if ((_DWORD)v236)
      {
        v237 = 8 * v236;
        v238 = (_QWORD *)*((_QWORD *)this + 111);
        while ((*v238 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v238;
          v237 -= 8;
          if (!v237)
            goto LABEL_509;
        }
      }
      else
      {
        v238 = (_QWORD *)*((_QWORD *)this + 111);
      }
      v356 = *((_QWORD *)this + 111) + 8 * v236;
LABEL_810:
      if (v238 != (_QWORD *)v356)
      {
        v357 = (_QWORD *)*v238;
        if (*v238)
        {
          v358 = v357[1];
          if ((v358 & 4) != 0)
          {
            v359 = v358 & 0xFFFFFFFFFFFFFFF8;
            if ((v358 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v359 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v359 + 24), (void *)(24 * *(unsigned int *)(v359 + 32)));
              operator delete((void *)v359);
            }
          }
          llvm::MDNode::operator delete(v357);
        }
        while (++v238 != (_QWORD *)v356)
        {
          if ((*v238 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_810;
        }
      }
    }
LABEL_509:
    if (*((_DWORD *)this + 230))
    {
      v239 = *((unsigned int *)this + 232);
      if ((_DWORD)v239)
      {
        v240 = 8 * v239;
        v241 = (_QWORD *)*((_QWORD *)this + 114);
        while ((*v241 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v241;
          v240 -= 8;
          if (!v240)
            goto LABEL_514;
        }
      }
      else
      {
        v241 = (_QWORD *)*((_QWORD *)this + 114);
      }
      v360 = *((_QWORD *)this + 114) + 8 * v239;
LABEL_823:
      if (v241 != (_QWORD *)v360)
      {
        v361 = (_QWORD *)*v241;
        if (*v241)
        {
          v362 = v361[1];
          if ((v362 & 4) != 0)
          {
            v363 = v362 & 0xFFFFFFFFFFFFFFF8;
            if ((v362 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v363 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v363 + 24), (void *)(24 * *(unsigned int *)(v363 + 32)));
              operator delete((void *)v363);
            }
          }
          llvm::MDNode::operator delete(v361);
        }
        while (++v241 != (_QWORD *)v360)
        {
          if ((*v241 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_823;
        }
      }
    }
LABEL_514:
    if (*((_DWORD *)this + 236))
    {
      v242 = *((unsigned int *)this + 238);
      if ((_DWORD)v242)
      {
        v243 = 8 * v242;
        v244 = (_QWORD *)*((_QWORD *)this + 117);
        while ((*v244 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v244;
          v243 -= 8;
          if (!v243)
            goto LABEL_519;
        }
      }
      else
      {
        v244 = (_QWORD *)*((_QWORD *)this + 117);
      }
      v364 = *((_QWORD *)this + 117) + 8 * v242;
LABEL_836:
      if (v244 != (_QWORD *)v364)
      {
        v365 = (_QWORD *)*v244;
        if (*v244)
        {
          v366 = v365[1];
          if ((v366 & 4) != 0)
          {
            v367 = v366 & 0xFFFFFFFFFFFFFFF8;
            if ((v366 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v367 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v367 + 24), (void *)(24 * *(unsigned int *)(v367 + 32)));
              operator delete((void *)v367);
            }
          }
          llvm::MDNode::operator delete(v365);
        }
        while (++v244 != (_QWORD *)v364)
        {
          if ((*v244 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_836;
        }
      }
    }
LABEL_519:
    if (*((_DWORD *)this + 242))
    {
      v245 = *((unsigned int *)this + 244);
      if ((_DWORD)v245)
      {
        v246 = 8 * v245;
        v247 = (_QWORD *)*((_QWORD *)this + 120);
        while ((*v247 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v247;
          v246 -= 8;
          if (!v246)
            goto LABEL_524;
        }
      }
      else
      {
        v247 = (_QWORD *)*((_QWORD *)this + 120);
      }
      v368 = *((_QWORD *)this + 120) + 8 * v245;
LABEL_849:
      if (v247 != (_QWORD *)v368)
      {
        v369 = (_QWORD *)*v247;
        if (*v247)
        {
          v370 = v369[1];
          if ((v370 & 4) != 0)
          {
            v371 = v370 & 0xFFFFFFFFFFFFFFF8;
            if ((v370 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v371 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v371 + 24), (void *)(24 * *(unsigned int *)(v371 + 32)));
              operator delete((void *)v371);
            }
          }
          llvm::MDNode::operator delete(v369);
        }
        while (++v247 != (_QWORD *)v368)
        {
          if ((*v247 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_849;
        }
      }
    }
LABEL_524:
    if (*((_DWORD *)this + 248))
    {
      v248 = *((unsigned int *)this + 250);
      if ((_DWORD)v248)
      {
        v249 = 8 * v248;
        v250 = (_QWORD *)*((_QWORD *)this + 123);
        while ((*v250 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v250;
          v249 -= 8;
          if (!v249)
            goto LABEL_529;
        }
      }
      else
      {
        v250 = (_QWORD *)*((_QWORD *)this + 123);
      }
      v372 = *((_QWORD *)this + 123) + 8 * v248;
LABEL_862:
      if (v250 != (_QWORD *)v372)
      {
        v373 = (_QWORD *)*v250;
        if (*v250)
        {
          v374 = v373[1];
          if ((v374 & 4) != 0)
          {
            v375 = v374 & 0xFFFFFFFFFFFFFFF8;
            if ((v374 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v375 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v375 + 24), (void *)(24 * *(unsigned int *)(v375 + 32)));
              operator delete((void *)v375);
            }
          }
          llvm::MDNode::operator delete(v373);
        }
        while (++v250 != (_QWORD *)v372)
        {
          if ((*v250 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_862;
        }
      }
    }
LABEL_529:
    if (*((_DWORD *)this + 254))
    {
      v251 = *((unsigned int *)this + 256);
      if ((_DWORD)v251)
      {
        v252 = 8 * v251;
        v253 = (_QWORD *)*((_QWORD *)this + 126);
        while ((*v253 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v253;
          v252 -= 8;
          if (!v252)
            goto LABEL_534;
        }
      }
      else
      {
        v253 = (_QWORD *)*((_QWORD *)this + 126);
      }
      v376 = *((_QWORD *)this + 126) + 8 * v251;
LABEL_875:
      if (v253 != (_QWORD *)v376)
      {
        v377 = (_QWORD *)*v253;
        if (*v253)
        {
          v378 = v377[1];
          if ((v378 & 4) != 0)
          {
            v379 = v378 & 0xFFFFFFFFFFFFFFF8;
            if ((v378 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v379 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v379 + 24), (void *)(24 * *(unsigned int *)(v379 + 32)));
              operator delete((void *)v379);
            }
          }
          llvm::MDNode::operator delete(v377);
        }
        while (++v253 != (_QWORD *)v376)
        {
          if ((*v253 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_875;
        }
      }
    }
LABEL_534:
    if (*((_DWORD *)this + 260))
    {
      v254 = *((unsigned int *)this + 262);
      if ((_DWORD)v254)
      {
        v255 = 8 * v254;
        v256 = (_QWORD *)*((_QWORD *)this + 129);
        while ((*v256 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v256;
          v255 -= 8;
          if (!v255)
            goto LABEL_539;
        }
      }
      else
      {
        v256 = (_QWORD *)*((_QWORD *)this + 129);
      }
      v380 = *((_QWORD *)this + 129) + 8 * v254;
LABEL_888:
      if (v256 != (_QWORD *)v380)
      {
        v381 = (_QWORD *)*v256;
        if (*v256)
        {
          v382 = v381[1];
          if ((v382 & 4) != 0)
          {
            v383 = v382 & 0xFFFFFFFFFFFFFFF8;
            if ((v382 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v383 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v383 + 24), (void *)(24 * *(unsigned int *)(v383 + 32)));
              operator delete((void *)v383);
            }
          }
          llvm::MDNode::operator delete(v381);
        }
        while (++v256 != (_QWORD *)v380)
        {
          if ((*v256 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_888;
        }
      }
    }
LABEL_539:
    if (*((_DWORD *)this + 266))
    {
      v257 = *((unsigned int *)this + 268);
      if ((_DWORD)v257)
      {
        v258 = 8 * v257;
        v259 = (_QWORD *)*((_QWORD *)this + 132);
        while ((*v259 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v259;
          v258 -= 8;
          if (!v258)
            goto LABEL_544;
        }
      }
      else
      {
        v259 = (_QWORD *)*((_QWORD *)this + 132);
      }
      v384 = *((_QWORD *)this + 132) + 8 * v257;
LABEL_901:
      if (v259 != (_QWORD *)v384)
      {
        v385 = (_QWORD *)*v259;
        if (*v259)
        {
          v386 = v385[1];
          if ((v386 & 4) != 0)
          {
            v387 = v386 & 0xFFFFFFFFFFFFFFF8;
            if ((v386 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v387 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v387 + 24), (void *)(24 * *(unsigned int *)(v387 + 32)));
              operator delete((void *)v387);
            }
          }
          llvm::MDNode::operator delete(v385);
        }
        while (++v259 != (_QWORD *)v384)
        {
          if ((*v259 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_901;
        }
      }
    }
LABEL_544:
    if (*((_DWORD *)this + 272))
    {
      v260 = *((unsigned int *)this + 274);
      if ((_DWORD)v260)
      {
        v261 = 8 * v260;
        v262 = (_QWORD *)*((_QWORD *)this + 135);
        while ((*v262 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v262;
          v261 -= 8;
          if (!v261)
            goto LABEL_549;
        }
      }
      else
      {
        v262 = (_QWORD *)*((_QWORD *)this + 135);
      }
      v388 = *((_QWORD *)this + 135) + 8 * v260;
LABEL_914:
      if (v262 != (_QWORD *)v388)
      {
        v389 = (_QWORD *)*v262;
        if (*v262)
        {
          v390 = v389[1];
          if ((v390 & 4) != 0)
          {
            v391 = v390 & 0xFFFFFFFFFFFFFFF8;
            if ((v390 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v391 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v391 + 24), (void *)(24 * *(unsigned int *)(v391 + 32)));
              operator delete((void *)v391);
            }
          }
          llvm::MDNode::operator delete(v389);
        }
        while (++v262 != (_QWORD *)v388)
        {
          if ((*v262 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_914;
        }
      }
    }
LABEL_549:
    if (*((_DWORD *)this + 278))
    {
      v263 = *((unsigned int *)this + 280);
      if ((_DWORD)v263)
      {
        v264 = 8 * v263;
        v265 = (_QWORD *)*((_QWORD *)this + 138);
        while ((*v265 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v265;
          v264 -= 8;
          if (!v264)
            goto LABEL_554;
        }
      }
      else
      {
        v265 = (_QWORD *)*((_QWORD *)this + 138);
      }
      v392 = *((_QWORD *)this + 138) + 8 * v263;
LABEL_927:
      if (v265 != (_QWORD *)v392)
      {
        v393 = (_QWORD *)*v265;
        if (*v265)
        {
          v394 = v393[1];
          if ((v394 & 4) != 0)
          {
            v395 = v394 & 0xFFFFFFFFFFFFFFF8;
            if ((v394 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v395 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v395 + 24), (void *)(24 * *(unsigned int *)(v395 + 32)));
              operator delete((void *)v395);
            }
          }
          llvm::MDNode::operator delete(v393);
        }
        while (++v265 != (_QWORD *)v392)
        {
          if ((*v265 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_927;
        }
      }
    }
LABEL_554:
    if (*((_DWORD *)this + 284))
    {
      v266 = *((unsigned int *)this + 286);
      if ((_DWORD)v266)
      {
        v267 = 8 * v266;
        v268 = (_QWORD *)*((_QWORD *)this + 141);
        while ((*v268 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v268;
          v267 -= 8;
          if (!v267)
            goto LABEL_559;
        }
      }
      else
      {
        v268 = (_QWORD *)*((_QWORD *)this + 141);
      }
      v396 = *((_QWORD *)this + 141) + 8 * v266;
LABEL_940:
      if (v268 != (_QWORD *)v396)
      {
        v397 = (_QWORD *)*v268;
        if (*v268)
        {
          v398 = v397[1];
          if ((v398 & 4) != 0)
          {
            v399 = v398 & 0xFFFFFFFFFFFFFFF8;
            if ((v398 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v399 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v399 + 24), (void *)(24 * *(unsigned int *)(v399 + 32)));
              operator delete((void *)v399);
            }
          }
          llvm::MDNode::operator delete(v397);
        }
        while (++v268 != (_QWORD *)v396)
        {
          if ((*v268 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_940;
        }
      }
    }
LABEL_559:
    if (*((_DWORD *)this + 290))
    {
      v269 = *((unsigned int *)this + 292);
      if ((_DWORD)v269)
      {
        v270 = 8 * v269;
        v271 = (_QWORD *)*((_QWORD *)this + 144);
        while ((*v271 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v271;
          v270 -= 8;
          if (!v270)
            goto LABEL_564;
        }
      }
      else
      {
        v271 = (_QWORD *)*((_QWORD *)this + 144);
      }
      v400 = *((_QWORD *)this + 144) + 8 * v269;
LABEL_953:
      if (v271 != (_QWORD *)v400)
      {
        v401 = (_QWORD *)*v271;
        if (*v271)
        {
          v402 = v401[1];
          if ((v402 & 4) != 0)
          {
            v403 = v402 & 0xFFFFFFFFFFFFFFF8;
            if ((v402 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v403 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v403 + 24), (void *)(24 * *(unsigned int *)(v403 + 32)));
              operator delete((void *)v403);
            }
          }
          llvm::MDNode::operator delete(v401);
        }
        while (++v271 != (_QWORD *)v400)
        {
          if ((*v271 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_953;
        }
      }
    }
LABEL_564:
    if (*((_DWORD *)this + 296))
    {
      v272 = *((unsigned int *)this + 298);
      if ((_DWORD)v272)
      {
        v273 = 8 * v272;
        v274 = (_QWORD *)*((_QWORD *)this + 147);
        while ((*v274 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v274;
          v273 -= 8;
          if (!v273)
            goto LABEL_569;
        }
      }
      else
      {
        v274 = (_QWORD *)*((_QWORD *)this + 147);
      }
      v404 = *((_QWORD *)this + 147) + 8 * v272;
LABEL_966:
      if (v274 != (_QWORD *)v404)
      {
        v405 = (_QWORD *)*v274;
        if (*v274)
        {
          v406 = v405[1];
          if ((v406 & 4) != 0)
          {
            v407 = v406 & 0xFFFFFFFFFFFFFFF8;
            if ((v406 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((*(_BYTE *)(v407 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v407 + 24), (void *)(24 * *(unsigned int *)(v407 + 32)));
              operator delete((void *)v407);
            }
          }
          llvm::MDNode::operator delete(v405);
        }
        while (++v274 != (_QWORD *)v404)
        {
          if ((*v274 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_966;
        }
      }
    }
LABEL_569:
    v275 = *((_DWORD *)this + 388);
    v276 = *((unsigned int *)this + 390);
    if (v275)
    {
      if ((_DWORD)v276)
      {
        v277 = 8 * v276;
        v278 = (uint64_t *)*((_QWORD *)this + 193);
        while ((*v278 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v278;
          v277 -= 8;
          if (!v277)
            goto LABEL_574;
        }
      }
      else
      {
        v278 = (uint64_t *)*((_QWORD *)this + 193);
      }
      v408 = *((_QWORD *)this + 193) + 8 * v276;
LABEL_979:
      if (v278 != (uint64_t *)v408)
      {
        v409 = *v278;
        v410 = *(_DWORD *)(*v278 + 20);
        if ((v410 & 0x40000000) != 0)
        {
          v412 = *(_QWORD *)(v409 - 8);
          v411 = v410 & 0x7FFFFFF;
          if (!v411)
            goto LABEL_989;
        }
        else
        {
          v411 = v410 & 0x7FFFFFF;
          v412 = v409 - 32 * v411;
          if (!v411)
            goto LABEL_989;
        }
        v413 = 32 * v411;
        v414 = (_QWORD **)(v412 + 16);
        do
        {
          if (*(v414 - 2))
          {
            **v414 = *(v414 - 1);
            v415 = (uint64_t)*(v414 - 1);
            if (v415)
              *(_QWORD *)(v415 + 16) = *v414;
          }
          *(v414 - 2) = 0;
          v414 += 4;
          v413 -= 32;
        }
        while (v413);
LABEL_989:
        while (++v278 != (uint64_t *)v408)
        {
          if ((*v278 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_979;
        }
      }
    }
LABEL_574:
    if (*((_DWORD *)this + 322))
    {
      v279 = *((unsigned int *)this + 324);
      if ((_DWORD)v279)
      {
        v280 = 8 * v279;
        v281 = (uint64_t *)*((_QWORD *)this + 160);
        while ((*v281 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v281;
          v280 -= 8;
          if (!v280)
            goto LABEL_579;
        }
      }
      else
      {
        v281 = (uint64_t *)*((_QWORD *)this + 160);
      }
      v416 = *((_QWORD *)this + 160) + 8 * v279;
LABEL_994:
      if (v281 != (uint64_t *)v416)
      {
        v417 = *v281;
        v418 = *(_DWORD *)(*v281 + 20);
        if ((v418 & 0x40000000) != 0)
        {
          v420 = *(_QWORD *)(v417 - 8);
          v419 = v418 & 0x7FFFFFF;
          if (!v419)
            goto LABEL_1004;
        }
        else
        {
          v419 = v418 & 0x7FFFFFF;
          v420 = v417 - 32 * v419;
          if (!v419)
            goto LABEL_1004;
        }
        v421 = 32 * v419;
        v422 = (_QWORD **)(v420 + 16);
        do
        {
          if (*(v422 - 2))
          {
            **v422 = *(v422 - 1);
            v423 = (uint64_t)*(v422 - 1);
            if (v423)
              *(_QWORD *)(v423 + 16) = *v422;
          }
          *(v422 - 2) = 0;
          v422 += 4;
          v421 -= 32;
        }
        while (v421);
LABEL_1004:
        while (++v281 != (uint64_t *)v416)
        {
          if ((*v281 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_994;
        }
      }
    }
LABEL_579:
    if (*((_DWORD *)this + 328))
    {
      v282 = *((unsigned int *)this + 330);
      if ((_DWORD)v282)
      {
        v283 = 8 * v282;
        v284 = (uint64_t *)*((_QWORD *)this + 163);
        while ((*v284 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v284;
          v283 -= 8;
          if (!v283)
            goto LABEL_584;
        }
      }
      else
      {
        v284 = (uint64_t *)*((_QWORD *)this + 163);
      }
      v424 = *((_QWORD *)this + 163) + 8 * v282;
LABEL_1009:
      if (v284 != (uint64_t *)v424)
      {
        v425 = *v284;
        v426 = *(_DWORD *)(*v284 + 20);
        if ((v426 & 0x40000000) != 0)
        {
          v428 = *(_QWORD *)(v425 - 8);
          v427 = v426 & 0x7FFFFFF;
          if (!v427)
            goto LABEL_1019;
        }
        else
        {
          v427 = v426 & 0x7FFFFFF;
          v428 = v425 - 32 * v427;
          if (!v427)
            goto LABEL_1019;
        }
        v429 = 32 * v427;
        v430 = (_QWORD **)(v428 + 16);
        do
        {
          if (*(v430 - 2))
          {
            **v430 = *(v430 - 1);
            v431 = (uint64_t)*(v430 - 1);
            if (v431)
              *(_QWORD *)(v431 + 16) = *v430;
          }
          *(v430 - 2) = 0;
          v430 += 4;
          v429 -= 32;
        }
        while (v429);
LABEL_1019:
        while (++v284 != (uint64_t *)v424)
        {
          if ((*v284 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_1009;
        }
      }
    }
LABEL_584:
    if (*((_DWORD *)this + 334))
    {
      v285 = *((unsigned int *)this + 336);
      if ((_DWORD)v285)
      {
        v286 = 8 * v285;
        v287 = (uint64_t *)*((_QWORD *)this + 166);
        while ((*v287 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v287;
          v286 -= 8;
          if (!v286)
            goto LABEL_589;
        }
      }
      else
      {
        v287 = (uint64_t *)*((_QWORD *)this + 166);
      }
      v432 = *((_QWORD *)this + 166) + 8 * v285;
LABEL_1024:
      if (v287 != (uint64_t *)v432)
      {
        v433 = *v287;
        v434 = *(_DWORD *)(*v287 + 20);
        if ((v434 & 0x40000000) != 0)
        {
          v436 = *(_QWORD *)(v433 - 8);
          v435 = v434 & 0x7FFFFFF;
          if (!v435)
            goto LABEL_1034;
        }
        else
        {
          v435 = v434 & 0x7FFFFFF;
          v436 = v433 - 32 * v435;
          if (!v435)
            goto LABEL_1034;
        }
        v437 = 32 * v435;
        v438 = (_QWORD **)(v436 + 16);
        do
        {
          if (*(v438 - 2))
          {
            **v438 = *(v438 - 1);
            v439 = (uint64_t)*(v438 - 1);
            if (v439)
              *(_QWORD *)(v439 + 16) = *v438;
          }
          *(v438 - 2) = 0;
          v438 += 4;
          v437 -= 32;
        }
        while (v437);
LABEL_1034:
        while (++v287 != (uint64_t *)v432)
        {
          if ((*v287 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_1024;
        }
      }
    }
LABEL_589:
    if (v275)
    {
      if ((_DWORD)v276)
      {
        v288 = 8 * v276;
        v289 = (_QWORD *)*((_QWORD *)this + 193);
        while ((*v289 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v289;
          v288 -= 8;
          if (!v288)
            goto LABEL_1044;
        }
      }
      else
      {
        v289 = (_QWORD *)*((_QWORD *)this + 193);
      }
      v440 = *((_QWORD *)this + 193) + 8 * v276;
      if (v289 != (_QWORD *)v440)
      {
        v441 = (llvm *)*v289;
        do
        {
          llvm::deleteConstant(v441, a2);
          do
          {
            if (++v289 == (_QWORD *)v440)
              goto LABEL_1044;
            v441 = (llvm *)*v289;
          }
          while ((*v289 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v289 != (_QWORD *)v440);
      }
    }
LABEL_1044:
    if (*((_DWORD *)this + 322))
    {
      v442 = *((unsigned int *)this + 324);
      if ((_DWORD)v442)
      {
        v443 = 8 * v442;
        v444 = (_QWORD *)*((_QWORD *)this + 160);
        while ((*v444 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v444;
          v443 -= 8;
          if (!v443)
            goto LABEL_1057;
        }
      }
      else
      {
        v444 = (_QWORD *)*((_QWORD *)this + 160);
      }
      v445 = *((_QWORD *)this + 160) + 8 * v442;
      if (v444 != (_QWORD *)v445)
      {
        v446 = (llvm *)*v444;
        do
        {
          llvm::deleteConstant(v446, a2);
          do
          {
            if (++v444 == (_QWORD *)v445)
              goto LABEL_1057;
            v446 = (llvm *)*v444;
          }
          while ((*v444 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v444 != (_QWORD *)v445);
      }
    }
LABEL_1057:
    if (*((_DWORD *)this + 328))
    {
      v447 = *((unsigned int *)this + 330);
      if ((_DWORD)v447)
      {
        v448 = 8 * v447;
        v449 = (_QWORD *)*((_QWORD *)this + 163);
        while ((*v449 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v449;
          v448 -= 8;
          if (!v448)
            goto LABEL_1070;
        }
      }
      else
      {
        v449 = (_QWORD *)*((_QWORD *)this + 163);
      }
      v450 = *((_QWORD *)this + 163) + 8 * v447;
      if (v449 != (_QWORD *)v450)
      {
        v451 = (llvm *)*v449;
        do
        {
          llvm::deleteConstant(v451, a2);
          do
          {
            if (++v449 == (_QWORD *)v450)
              goto LABEL_1070;
            v451 = (llvm *)*v449;
          }
          while ((*v449 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v449 != (_QWORD *)v450);
      }
    }
LABEL_1070:
    if (*((_DWORD *)this + 334))
    {
      v452 = *((unsigned int *)this + 336);
      if ((_DWORD)v452)
      {
        v453 = 8 * v452;
        v454 = (_QWORD *)*((_QWORD *)this + 166);
        while ((*v454 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v454;
          v453 -= 8;
          if (!v453)
            goto LABEL_1083;
        }
      }
      else
      {
        v454 = (_QWORD *)*((_QWORD *)this + 166);
      }
      v455 = *((_QWORD *)this + 166) + 8 * v452;
      if (v454 != (_QWORD *)v455)
      {
        v456 = (llvm *)*v454;
        do
        {
          llvm::deleteConstant(v456, a2);
          do
          {
            if (++v454 == (_QWORD *)v455)
              goto LABEL_1083;
            v456 = (llvm *)*v454;
          }
          while ((*v454 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v454 != (_QWORD *)v455);
      }
    }
LABEL_1083:
    if (*((_DWORD *)this + 394))
    {
      v457 = *((unsigned int *)this + 396);
      if ((_DWORD)v457)
      {
        v458 = 8 * v457;
        v459 = (uint64_t *)*((_QWORD *)this + 196);
        while ((*v459 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v459;
          v458 -= 8;
          if (!v458)
            goto LABEL_1102;
        }
      }
      else
      {
        v459 = (uint64_t *)*((_QWORD *)this + 196);
      }
      v460 = *((_QWORD *)this + 196) + 8 * v457;
      if (v459 != (uint64_t *)v460)
      {
        v461 = *v459;
        do
        {
          if (!v461)
            goto LABEL_1096;
          if (*(char *)(v461 + 71) < 0)
          {
            operator delete(*(void **)(v461 + 48));
            if ((*(char *)(v461 + 47) & 0x80000000) == 0)
              goto LABEL_1095;
          }
          else if ((*(char *)(v461 + 47) & 0x80000000) == 0)
          {
            goto LABEL_1095;
          }
          operator delete(*(void **)(v461 + 24));
LABEL_1095:
          llvm::Value::~Value((llvm::Value *)v461, a2);
          operator delete(v462);
          do
          {
LABEL_1096:
            if (++v459 == (uint64_t *)v460)
              goto LABEL_1102;
            v461 = *v459;
          }
          while ((*v459 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v459 != (uint64_t *)v460);
      }
    }
LABEL_1102:
    v463 = *((_DWORD *)this + 316);
    if (!v463 && !*((_DWORD *)this + 317))
    {
LABEL_1107:
      v466 = *((_DWORD *)this + 340);
      if (!v466)
      {
LABEL_1118:
        if (!*((_DWORD *)this + 341))
          goto LABEL_1122;
      }
LABEL_1119:
      v472 = (_DWORD *)((char *)this + 1352);
      v473 = *((unsigned int *)this + 342);
      if (v473 > 4 * v466 && v473 >= 0x41)
      {
        llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(v472, a2);
LABEL_1122:
        v474 = *((_DWORD *)this + 346);
        if (!v474)
        {
LABEL_1133:
          if (!*((_DWORD *)this + 347))
            goto LABEL_1137;
        }
LABEL_1134:
        v480 = (_DWORD *)((char *)this + 1376);
        v481 = *((unsigned int *)this + 348);
        if (v481 > 4 * v474 && v481 >= 0x41)
        {
          llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(v480, a2);
LABEL_1137:
          v482 = *((_DWORD *)this + 352);
          if (!v482)
          {
LABEL_1148:
            if (!*((_DWORD *)this + 353))
              goto LABEL_1152;
          }
LABEL_1149:
          v488 = (_DWORD *)((char *)this + 1400);
          v489 = *((unsigned int *)this + 354);
          if (v489 > 4 * v482 && v489 >= 0x41)
          {
            llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(v488, a2);
LABEL_1152:
            v490 = *((_DWORD *)this + 358);
            if (!v490)
            {
LABEL_1163:
              if (!*((_DWORD *)this + 359))
              {
LABEL_1176:
                llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::clear((_DWORD *)this + 42, a2);
                llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::clear((_DWORD *)this + 48, v503);
                llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::clear((uint64_t)this + 216, v504);
                llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::clear((llvm::LLVMContextImpl *)((char *)this + 240));
                if (*((_DWORD *)this + 365))
                {
                  v506 = *((unsigned int *)this + 364);
                  if ((_DWORD)v506)
                  {
                    v507 = 0;
                    do
                    {
                      v508 = *((_QWORD *)this + 181);
                      v509 = *(llvm **)(v508 + v507);
                      if (v509 != (llvm *)-8 && v509 != 0)
                      {
                        v512 = *(_QWORD *)v509;
                        v511 = (llvm::ConstantDataSequential *)*((_QWORD *)v509 + 1);
                        *((_QWORD *)v509 + 1) = 0;
                        if (v511)
                        {
                          llvm::ConstantDataSequential::~ConstantDataSequential(v511, v505);
                          llvm::User::operator delete(v513);
                        }
                        llvm::deallocate_buffer(v509, (void *)(v512 + 17));
                      }
                      *(_QWORD *)(v508 + v507) = 0;
                      v507 += 8;
                    }
                    while (8 * v506 != v507);
                  }
                  *(_QWORD *)((char *)this + 1460) = 0;
                }
                llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((unint64_t *)&v545, *((void ***)this + 37));
                v544 = (unint64_t *)v545;
                llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((unint64_t *)&v545, (void **)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 76)));
                v514 = v544;
                if (v544 != v545)
                {
                  llvm::FoldingSetIteratorImpl::advance(&v544);
                  llvm::deallocate_buffer((llvm *)v514[3], (void *)(24 * *((unsigned int *)v514 + 10)));
                }
                v545 = v547;
                v546 = 0x800000000;
                v515 = *((unsigned int *)this + 116);
                if (v515 >= 9)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v545, v547, v515, 8);
                  LODWORD(v515) = *((_DWORD *)this + 116);
                }
                if (!(_DWORD)v515)
                  goto LABEL_1209;
                v516 = *((unsigned int *)this + 118);
                if ((_DWORD)v516)
                {
                  v517 = 16 * v516;
                  v518 = (_QWORD *)*((_QWORD *)this + 57);
                  while ((*v518 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v518 += 2;
                    v517 -= 16;
                    if (!v517)
                      goto LABEL_1208;
                  }
                }
                else
                {
                  v518 = (_QWORD *)*((_QWORD *)this + 57);
                }
                v519 = *((_QWORD *)this + 57) + 16 * v516;
                if (v518 != (_QWORD *)v519)
                {
                  v520 = v546;
                  do
                  {
                    v521 = v518[1];
                    if (v520 >= HIDWORD(v546))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v545, v547, v520 + 1, 8);
                      v520 = v546;
                    }
                    *((_QWORD *)v545 + v520) = v521;
                    v520 = v546 + 1;
                    LODWORD(v546) = v546 + 1;
                    do
                    {
                      v518 += 2;
                      if (v518 == (_QWORD *)v519)
                        goto LABEL_1207;
                    }
                    while ((*v518 | 0x1000) == 0xFFFFFFFFFFFFF000);
                  }
                  while (v518 != (_QWORD *)v519);
LABEL_1207:
                  LODWORD(v515) = *((_DWORD *)this + 116);
                }
LABEL_1208:
                if (!(_DWORD)v515)
                {
LABEL_1209:
                  if (!*((_DWORD *)this + 117))
                    goto LABEL_1214;
                  LODWORD(v515) = 0;
                }
                v522 = (_QWORD *)((char *)this + 456);
                v523 = *((unsigned int *)this + 118);
                if (v523 > 4 * (int)v515 && v523 >= 0x41)
                {
                  llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v522);
LABEL_1214:
                  v524 = (int32x2_t *****)v545;
                  v525 = v546;
                  if (!(_DWORD)v546)
                    goto LABEL_1215;
                  goto LABEL_1252;
                }
                if ((_DWORD)v523)
                {
                  v532 = (_QWORD *)*v522;
                  v533 = (v523 - 1) & 0xFFFFFFFFFFFFFFFLL;
                  if (v533)
                  {
                    v534 = v533 + 1;
                    v535 = (v533 + 1) & 0x1FFFFFFFFFFFFFFELL;
                    v536 = &v532[2 * v535];
                    v537 = v532 + 2;
                    v538 = v535;
                    do
                    {
                      *(v537 - 2) = -4096;
                      *v537 = -4096;
                      v537 += 4;
                      v538 -= 2;
                    }
                    while (v538);
                    if (v534 == v535)
                      goto LABEL_1251;
                  }
                  else
                  {
                    v536 = (_QWORD *)*v522;
                  }
                  v541 = &v532[2 * v523];
                  do
                  {
                    *v536 = -4096;
                    v536 += 2;
                  }
                  while (v536 != v541);
                }
LABEL_1251:
                *((_QWORD *)this + 58) = 0;
                v524 = (int32x2_t *****)v545;
                v525 = v546;
                if (!(_DWORD)v546)
                {
LABEL_1215:
                  if (v524 == v547)
                    goto LABEL_1217;
                  goto LABEL_1216;
                }
LABEL_1252:
                v542 = 8 * v525;
                do
                {
                  if (*v524)
                  {
                    llvm::MetadataAsValue::~MetadataAsValue(*v524);
                    operator delete(v543);
                  }
                  ++v524;
                  v542 -= 8;
                }
                while (v542);
                v524 = (int32x2_t *****)v545;
                if (v545 == v547)
                {
LABEL_1217:
                  if (*((_DWORD *)this + 110))
                  {
                    v526 = *((unsigned int *)this + 112);
                    if ((_DWORD)v526)
                    {
                      v527 = 16 * v526;
                      v528 = *((_QWORD *)this + 54);
                      while ((*(_QWORD *)v528 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v528 += 16;
                        v527 -= 16;
                        if (!v527)
                          goto LABEL_1222;
                      }
                    }
                    else
                    {
                      v528 = *((_QWORD *)this + 54);
                    }
                    v539 = *((_QWORD *)this + 54) + 16 * v526;
LABEL_1240:
                    if (v528 != v539)
                    {
                      v540 = *(_QWORD *)(v528 + 8);
                      if (v540)
                      {
                        if ((*(_BYTE *)(v540 + 24) & 1) == 0)
                          llvm::deallocate_buffer(*(llvm **)(v540 + 32), (void *)(24 * *(unsigned int *)(v540 + 40)));
                        operator delete(*(void **)(v528 + 8));
                      }
                      while (1)
                      {
                        v528 += 16;
                        if (v528 == v539)
                          break;
                        if ((*(_QWORD *)v528 | 0x1000) != 0xFFFFFFFFFFFFF000)
                          goto LABEL_1240;
                      }
                    }
                  }
LABEL_1222:
                  if ((*((_BYTE *)this + 2736) & 1) == 0)
                    llvm::deallocate_buffer(*((llvm **)this + 343), (void *)(16 * *((unsigned int *)this + 688)));
                  v529 = *((unsigned int *)this + 678);
                  v530 = *((_QWORD *)this + 337);
                  if ((_DWORD)v529)
                  {
                    v531 = 32 * v529;
                    while (1)
                    {
                      if ((*(_QWORD *)v530 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(char *)(v530 + 31) < 0)
                        operator delete(*(void **)(v530 + 8));
                      v530 += 32;
                      v531 -= 32;
                      if (!v531)
                        llvm::deallocate_buffer(*((llvm **)this + 337), (void *)(32 * *((unsigned int *)this + 678)));
                    }
                  }
                  llvm::deallocate_buffer(*((llvm **)this + 337), 0);
                }
LABEL_1216:
                free(v524);
                goto LABEL_1217;
              }
            }
LABEL_1164:
            v496 = (_DWORD *)((char *)this + 1424);
            v497 = *((unsigned int *)this + 360);
            if (v497 > 4 * v490 && v497 >= 0x41)
            {
              llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(v496, a2);
              goto LABEL_1176;
            }
            if (!(_DWORD)v497)
            {
LABEL_1175:
              *((_QWORD *)this + 179) = 0;
              goto LABEL_1176;
            }
            v498 = (llvm::Value **)(*(_QWORD *)v496 + 8);
            v499 = 16 * v497;
            while (1)
            {
              v500 = (uint64_t)*(v498 - 1);
              if (v500 != -8192)
              {
                if (v500 == -4096)
                  goto LABEL_1170;
                v501 = *v498;
                *v498 = 0;
                if (v501)
                {
                  llvm::Value::~Value(v501, a2);
                  llvm::User::operator delete(v502);
                }
              }
              *(v498 - 1) = (llvm::Value *)-4096;
LABEL_1170:
              v498 += 2;
              v499 -= 16;
              if (!v499)
                goto LABEL_1175;
            }
          }
          if (!(_DWORD)v489)
          {
LABEL_1162:
            *((_QWORD *)this + 176) = 0;
            v490 = *((_DWORD *)this + 358);
            if (!v490)
              goto LABEL_1163;
            goto LABEL_1164;
          }
          v491 = (llvm::Value **)(*(_QWORD *)v488 + 8);
          v492 = 16 * v489;
          while (1)
          {
            v493 = (uint64_t)*(v491 - 1);
            if (v493 != -8192)
            {
              if (v493 == -4096)
                goto LABEL_1157;
              v494 = *v491;
              *v491 = 0;
              if (v494)
              {
                llvm::Value::~Value(v494, a2);
                llvm::User::operator delete(v495);
              }
            }
            *(v491 - 1) = (llvm::Value *)-4096;
LABEL_1157:
            v491 += 2;
            v492 -= 16;
            if (!v492)
              goto LABEL_1162;
          }
        }
        if (!(_DWORD)v481)
        {
LABEL_1147:
          *((_QWORD *)this + 173) = 0;
          v482 = *((_DWORD *)this + 352);
          if (!v482)
            goto LABEL_1148;
          goto LABEL_1149;
        }
        v483 = (llvm::Value **)(*(_QWORD *)v480 + 8);
        v484 = 16 * v481;
        while (1)
        {
          v485 = (uint64_t)*(v483 - 1);
          if (v485 != -8192)
          {
            if (v485 == -4096)
              goto LABEL_1142;
            v486 = *v483;
            *v483 = 0;
            if (v486)
            {
              llvm::Value::~Value(v486, a2);
              llvm::User::operator delete(v487);
            }
          }
          *(v483 - 1) = (llvm::Value *)-4096;
LABEL_1142:
          v483 += 2;
          v484 -= 16;
          if (!v484)
            goto LABEL_1147;
        }
      }
      if (!(_DWORD)v473)
      {
LABEL_1132:
        *((_QWORD *)this + 170) = 0;
        v474 = *((_DWORD *)this + 346);
        if (!v474)
          goto LABEL_1133;
        goto LABEL_1134;
      }
      v475 = (llvm::Value **)(*(_QWORD *)v472 + 8);
      v476 = 16 * v473;
      while (1)
      {
        v477 = (uint64_t)*(v475 - 1);
        if (v477 != -8192)
        {
          if (v477 == -4096)
            goto LABEL_1127;
          v478 = *v475;
          *v475 = 0;
          if (v478)
          {
            llvm::Value::~Value(v478, a2);
            llvm::User::operator delete(v479);
          }
        }
        *(v475 - 1) = (llvm::Value *)-4096;
LABEL_1127:
        v475 += 2;
        v476 -= 16;
        if (!v476)
          goto LABEL_1132;
      }
    }
    v464 = (_DWORD *)((char *)this + 1256);
    v465 = *((unsigned int *)this + 318);
    if (v465 > 4 * v463 && v465 >= 0x41)
    {
      llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(v464, a2);
      goto LABEL_1107;
    }
    if (!(_DWORD)v465)
    {
LABEL_1117:
      *((_QWORD *)this + 158) = 0;
      v466 = *((_DWORD *)this + 340);
      if (!v466)
        goto LABEL_1118;
      goto LABEL_1119;
    }
    v467 = (llvm::Value **)(*(_QWORD *)v464 + 8);
    v468 = 16 * v465;
    while (1)
    {
      v469 = (uint64_t)*(v467 - 1);
      if (v469 != -8192)
      {
        if (v469 == -4096)
          goto LABEL_1112;
        v470 = *v467;
        *v467 = 0;
        if (v470)
        {
          llvm::Value::~Value(v470, a2);
          llvm::User::operator delete(v471);
        }
      }
      *(v467 - 1) = (llvm::Value *)-4096;
LABEL_1112:
      v467 += 2;
      v468 -= 16;
      if (!v468)
        goto LABEL_1117;
    }
  }
  do
  {
LABEL_423:
    v187 = *v177++;
    llvm::MDNode::deleteAsSubclass(v187);
  }
  while (v177 != v178);
  goto LABEL_424;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::clear(_DWORD *a1, llvm::Value *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::Use *v7;
  int v8;
  uint64_t v9;
  void *v10;

  v3 = a1[2];
  if (v3 || a1[3])
  {
    v4 = a1[4];
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::shrink_and_clear(a1, a2);
      return;
    }
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 8);
      do
      {
        v8 = *((_DWORD *)v6 - 2);
        if (v8 != -2)
        {
          if (v8 == -1)
            goto LABEL_10;
          v9 = *v6;
          *v6 = 0;
          if (v9)
          {
            if (*(_DWORD *)(v9 + 32) >= 0x41u)
            {
              v10 = *(void **)(v9 + 24);
              if (v10)
                operator delete[](v10);
            }
            llvm::Value::~Value((llvm::Value *)v9, a2);
            llvm::User::operator delete(v7);
          }
        }
        *((_DWORD *)v6 - 2) = -1;
LABEL_10:
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
    }
    *((_QWORD *)a1 + 1) = 0;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::clear(uint64_t a1, llvm::Value *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  llvm::Use *v11;
  unsigned int v12;
  void *__p;
  unsigned int v14;
  void *v15;
  unsigned int v16;

  v3 = *(_DWORD *)(a1 + 8);
  if (!v3 && !*(_DWORD *)(a1 + 12))
    return;
  v4 = *(unsigned int *)(a1 + 16);
  if (v4 > 4 * v3 && v4 >= 0x41)
  {
    llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::shrink_and_clear(a1, a2);
    return;
  }
  v16 = 0;
  v15 = (void *)-1;
  v14 = 0;
  __p = (void *)-2;
  if (!(_DWORD)v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_32;
  }
  v5 = *(_QWORD *)a1;
  v6 = 24 * v4;
  do
  {
    v7 = *(_DWORD *)(v5 + 8);
    v8 = v16;
    if (v7 == v16)
    {
      if (v7 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)v5, (const void **)&v15))
          goto LABEL_9;
      }
      else if (*(void **)v5 == v15)
      {
        goto LABEL_9;
      }
    }
    if (v7 != v14)
      goto LABEL_20;
    if (v7 > 0x40)
    {
      if (llvm::APInt::equalSlowCase((const void **)v5, (const void **)&__p))
        goto LABEL_8;
LABEL_20:
      v9 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 32) >= 0x41u)
        {
          v10 = *(void **)(v9 + 24);
          if (v10)
            operator delete[](v10);
        }
        llvm::Value::~Value((llvm::Value *)v9, a2);
        llvm::User::operator delete(v11);
        v7 = *(_DWORD *)(v5 + 8);
        v8 = v16;
      }
      goto LABEL_25;
    }
    if (*(void **)v5 != __p)
      goto LABEL_20;
LABEL_25:
    if (v7 > 0x40 || v8 > 0x40)
    {
LABEL_8:
      llvm::APInt::assignSlowCase((const void **)v5, (const void **)&v15);
      goto LABEL_9;
    }
    *(_QWORD *)v5 = v15;
    *(_DWORD *)(v5 + 8) = v8;
LABEL_9:
    v5 += 24;
    v6 -= 24;
  }
  while (v6);
  v12 = v14;
  *(_QWORD *)(a1 + 8) = 0;
  if (v12 >= 0x41 && __p)
    operator delete[](__p);
LABEL_32:
  if (v16 >= 0x41)
  {
    if (v15)
      operator delete[](v15);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::clear(llvm::APFloatBase *this)
{
  unsigned int v2;
  llvm::APFloatBase *v3;
  llvm::APFloatBase *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  llvm::Value *v8;
  llvm::Use *v9;
  llvm::APFloatBase *v10;
  void **v11;
  _QWORD *v12;
  llvm::detail::DoubleAPFloat *v13;
  llvm::detail::DoubleAPFloat *v14;
  llvm::detail::DoubleAPFloat *v15;
  _QWORD v16[3];
  uint64_t v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 1))
  {
    v2 = *((_DWORD *)this + 4);
    if (v2 > 4 * *((_DWORD *)this + 2) && v2 >= 0x41)
    {
      llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::shrink_and_clear((unsigned int *)this);
      return;
    }
    v3 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(this);
    v4 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v3);
    if (v4 == v3)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)v3, 1);
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)v3, 2);
      v5 = *((unsigned int *)this + 4);
      if (!(_DWORD)v5)
        goto LABEL_29;
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v17, (uint64_t)v3, (llvm::APInt *)1);
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v3, (llvm::APInt *)2);
      v5 = *((unsigned int *)this + 4);
      if (!(_DWORD)v5)
      {
LABEL_29:
        *((_QWORD *)this + 1) = 0;
        if (v4 == (llvm::APFloatBase *)v16[0])
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
          if (v4 != (llvm::APFloatBase *)v17[0])
            goto LABEL_31;
        }
        else
        {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
          if (v4 != (llvm::APFloatBase *)v17[0])
          {
LABEL_31:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
            return;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
        return;
      }
    }
    v6 = 40 * v5;
    v7 = (_QWORD **)(*(_QWORD *)this + 32);
    while (1)
    {
      v11 = (void **)(v7 - 3);
      v10 = (llvm::APFloatBase *)*(v7 - 3);
      if (v10 == (llvm::APFloatBase *)v17[0])
      {
        v14 = (llvm::detail::DoubleAPFloat *)(v7 - 3);
        if (v4 == v10)
        {
          if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v14, (const llvm::detail::DoubleAPFloat *)v17) & 1) != 0)
            goto LABEL_13;
        }
        else if (llvm::detail::IEEEFloat::bitwiseIsEqual(v14, (const llvm::detail::IEEEFloat *)v17))
        {
          goto LABEL_13;
        }
      }
      if (*v11 != (void *)v16[0])
        break;
      v15 = (llvm::detail::DoubleAPFloat *)(v7 - 3);
      if (v4 == *v11)
      {
        if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v15, (const llvm::detail::DoubleAPFloat *)v16) & 1) == 0)
          break;
      }
      else if (!llvm::detail::IEEEFloat::bitwiseIsEqual(v15, (const llvm::detail::IEEEFloat *)v16))
      {
        break;
      }
LABEL_12:
      llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v7 - 3), v17);
LABEL_13:
      v7 += 5;
      v6 -= 40;
      if (!v6)
        goto LABEL_29;
    }
    v12 = *v7;
    *v7 = 0;
    if (v12)
    {
      v13 = (llvm::detail::DoubleAPFloat *)(v12 + 4);
      if (v4 == (llvm::APFloatBase *)v12[4])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v13);
      else
        llvm::detail::IEEEFloat::~IEEEFloat(v13);
      llvm::Value::~Value((llvm::Value *)v12, v8);
      llvm::User::operator delete(v9);
    }
    goto LABEL_12;
  }
}

unint64_t llvm::MDNodeOpsKey::calculateHash(llvm::MDNodeOpsKey *this, llvm::MDNode *a2)
{
  unint64_t v2;
  char *v3;

  v2 = *((_QWORD *)this - 2);
  if ((v2 & 2) != 0)
    return llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>((_QWORD *)(*((_QWORD *)this - 4) + 8 * a2), (_QWORD *)(*((_QWORD *)this - 4) + 8 * *((unsigned int *)this - 6)));
  v3 = (char *)this - 8 * ((v2 >> 2) & 0xF) - 16;
  return llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(&v3[8 * a2], &v3[8 * ((v2 >> 6) & 0xF)]);
}

unint64_t llvm::MDNodeOpsKey::calculateHash(_QWORD *a1, uint64_t a2)
{
  return llvm::hashing::detail::hash_combine_range_impl<char const>(a1, (uint64_t)&a1[a2]);
}

uint64_t llvm::LLVMContextImpl::getOrInsertBundleTag(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 2660);
  return *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1 + 2648, a2, a3, &v4);
}

uint64_t llvm::LLVMContextImpl::getOrInsertSyncScopeID(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  char v4[8];

  v4[0] = *(_DWORD *)(a1 + 2684);
  return *(unsigned __int8 *)(*llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(a1 + 2672, a2, a3, v4)+ 8);
}

void llvm::LLVMContextImpl::getSyncScopeNames(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;

  v4 = *(unsigned int *)(a1 + 2684);
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 != (_DWORD)v4)
  {
    if (v5 <= v4)
    {
      if (*(_DWORD *)(a2 + 12) < v4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v4, 16);
        v5 = *(_DWORD *)(a2 + 8);
      }
      if (v5 != (_DWORD)v4)
        bzero((void *)(*(_QWORD *)a2 + 16 * v5), 16 * (v4 - v5));
    }
    *(_DWORD *)(a2 + 8) = v4;
  }
  v6 = *(_QWORD **)(a1 + 2672);
  v7 = *(unsigned int *)(a1 + 2680);
  if (!(_DWORD)v7)
  {
    v8 = *(uint64_t ***)(a1 + 2672);
    v13 = (uint64_t **)&v6[v7];
    if (v8 == v13)
      return;
    goto LABEL_21;
  }
  v8 = *(uint64_t ***)(a1 + 2672);
  if (*v6)
    v9 = *v6 == -8;
  else
    v9 = 1;
  if (v9)
  {
    do
    {
      v11 = v8[1];
      ++v8;
      v10 = v11;
      if (v11)
        v12 = v10 + 1 == 0;
      else
        v12 = 1;
    }
    while (v12);
  }
  v13 = (uint64_t **)&v6[v7];
  if (v8 != v13)
  {
LABEL_21:
    v14 = *v8;
    do
    {
      v15 = v14 + 2;
      v16 = (uint64_t *)*v14;
      v17 = (uint64_t **)(*(_QWORD *)a2 + 16 * *((unsigned __int8 *)v14 + 8));
      *v17 = v15;
      v17[1] = v16;
      do
      {
        v18 = v8[1];
        ++v8;
        v14 = v18;
        if (v18)
          v19 = v14 + 1 == 0;
        else
          v19 = 1;
      }
      while (v19);
    }
    while (v8 != v13);
  }
}

BOOL llvm::LLVMContextImpl::getOpaquePointers(llvm::LLVMContextImpl *this)
{
  int v3;

  if (*((_BYTE *)this + 2809))
    return *((_BYTE *)this + 2808) != 0;
  if (getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT"))
  {
    *((_WORD *)this + 1404) = 257;
    return 1;
  }
  else
  {
    v3 = byte_1ECD325E8;
    *((_BYTE *)this + 2809) = 1;
    *((_BYTE *)this + 2808) = v3;
    return v3 != 0;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::destroyAll(uint64_t *a1, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  llvm::Use *v8;
  void *__p;
  unsigned int v10;
  void *v11;
  unsigned int v12;

  v2 = *((unsigned int *)a1 + 4);
  if (!(_DWORD)v2)
    return;
  v12 = 0;
  v11 = (void *)-1;
  v10 = 0;
  __p = (void *)-2;
  v3 = *a1;
  v4 = 24 * v2;
  do
  {
    v5 = *(_DWORD *)(v3 + 8);
    if (v5 == v12)
    {
      if (v5 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)v3, (const void **)&v11))
          goto LABEL_20;
      }
      else if (*(void **)v3 == v11)
      {
        goto LABEL_3;
      }
    }
    if (v5 == v10)
    {
      if (v5 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((const void **)v3, (const void **)&__p))
          goto LABEL_20;
      }
      else if (*(void **)v3 == __p)
      {
        goto LABEL_3;
      }
    }
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 32) >= 0x41u)
      {
        v7 = *(void **)(v6 + 24);
        if (v7)
          operator delete[](v7);
      }
      llvm::Value::~Value((llvm::Value *)v6, a2);
      llvm::User::operator delete(v8);
      v5 = *(_DWORD *)(v3 + 8);
    }
    if (v5 >= 0x41)
    {
LABEL_20:
      if (*(_QWORD *)v3)
        operator delete[](*(void **)v3);
    }
LABEL_3:
    v3 += 24;
    v4 -= 24;
  }
  while (v4);
  if (v10 >= 0x41 && __p)
    operator delete[](__p);
  if (v12 >= 0x41)
  {
    if (v11)
      operator delete[](v11);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::destroyAll(unsigned int *a1)
{
  llvm::APFloatBase *v2;
  llvm::APFloatBase *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  llvm::APFloatBase *v7;
  void **v8;
  _QWORD *v9;
  llvm::detail::DoubleAPFloat *v10;
  llvm::Value *v11;
  llvm::detail::DoubleAPFloat *v12;
  llvm::detail::DoubleAPFloat *v13;
  llvm::Use *v14;
  llvm::detail::DoubleAPFloat *v15;
  _QWORD v16[3];
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  if (a1[4])
  {
    v2 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
    v3 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v2);
    if (v3 == v2)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)v2, 1);
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)v2, 2);
      v4 = a1[4];
      if (!(_DWORD)v4)
        goto LABEL_28;
    }
    else
    {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v17, (uint64_t)v2, (llvm::APInt *)1);
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v16, (uint64_t)v2, (llvm::APInt *)2);
      v4 = a1[4];
      if (!(_DWORD)v4)
      {
LABEL_28:
        if (v3 == (llvm::APFloatBase *)v16[0])
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v16);
          if (v3 != (llvm::APFloatBase *)v17[0])
            goto LABEL_30;
        }
        else
        {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
          if (v3 != (llvm::APFloatBase *)v17[0])
          {
LABEL_30:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v17);
            return;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v17);
        return;
      }
    }
    v5 = 40 * v4;
    v6 = (_QWORD **)(*(_QWORD *)a1 + 32);
    while (1)
    {
      v8 = (void **)(v6 - 3);
      v7 = (llvm::APFloatBase *)*(v6 - 3);
      if (v7 == (llvm::APFloatBase *)v17[0])
      {
        v12 = (llvm::detail::DoubleAPFloat *)(v6 - 3);
        if (v3 == v7)
        {
          if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v12, (const llvm::detail::DoubleAPFloat *)v17) & 1) != 0)
            goto LABEL_21;
        }
        else if (llvm::detail::IEEEFloat::bitwiseIsEqual(v12, (const llvm::detail::IEEEFloat *)v17))
        {
          goto LABEL_21;
        }
      }
      if (*v8 != (void *)v16[0])
        goto LABEL_10;
      v13 = (llvm::detail::DoubleAPFloat *)(v6 - 3);
      if (v3 == *v8)
      {
        if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual(v13, (const llvm::detail::DoubleAPFloat *)v16) & 1) == 0)
        {
LABEL_10:
          v9 = *v6;
          *v6 = 0;
          if (v9)
          {
            v10 = (llvm::detail::DoubleAPFloat *)(v9 + 4);
            if (v3 == (llvm::APFloatBase *)v9[4])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v10);
            else
              llvm::detail::IEEEFloat::~IEEEFloat(v10);
            llvm::Value::~Value((llvm::Value *)v9, v11);
            llvm::User::operator delete(v14);
          }
        }
      }
      else if (!llvm::detail::IEEEFloat::bitwiseIsEqual(v13, (const llvm::detail::IEEEFloat *)v16))
      {
        goto LABEL_10;
      }
LABEL_21:
      v15 = (llvm::detail::DoubleAPFloat *)(v6 - 3);
      if (v3 == *v8)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v15);
        v6 += 5;
        v5 -= 40;
        if (!v5)
          goto LABEL_28;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat(v15);
        v6 += 5;
        v5 -= 40;
        if (!v5)
          goto LABEL_28;
      }
    }
  }
}

void llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::shrink_and_clear(_DWORD *a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  llvm::Value **v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Use *v9;
  int v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm *v16;
  _QWORD *v17;
  uint64_t v18;
  llvm *v19;

  v3 = a1[4];
  v4 = a1[2];
  v5 = (void *)(16 * v3);
  if ((_DWORD)v3)
  {
    v6 = (llvm::Value **)(*(_QWORD *)a1 + 8);
    v7 = 16 * v3;
    do
    {
      if (((unint64_t)*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          llvm::Value::~Value(v8, a2);
          llvm::User::operator delete(v9);
        }
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (!v4)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
LABEL_18:
    llvm::deallocate_buffer(*(llvm **)a1, v5);
  }
  v10 = 1 << (33 - __clz(v4 - 1));
  if (v10 <= 64)
    v11 = 64;
  else
    v11 = v10;
  if ((_DWORD)v11 != a1[4])
    goto LABEL_18;
  *((_QWORD *)a1 + 1) = 0;
  v12 = *(llvm **)a1;
  v13 = (v11 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v13)
  {
    v16 = *(llvm **)a1;
LABEL_21:
    v19 = (llvm *)((char *)v12 + 16 * v11);
    do
    {
      *(_QWORD *)v16 = -4096;
      v16 = (llvm *)((char *)v16 + 16);
    }
    while (v16 != v19);
    return;
  }
  v14 = v13 + 1;
  v15 = (v13 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v16 = (llvm *)((char *)v12 + 16 * v15);
  v17 = (_QWORD *)((char *)v12 + 16);
  v18 = v15;
  do
  {
    *(v17 - 2) = -4096;
    *v17 = -4096;
    v17 += 4;
    v18 -= 2;
  }
  while (v18);
  if (v14 != v15)
    goto LABEL_21;
}

void llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::shrink_and_clear(_DWORD *a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::Use *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  llvm *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm *v17;
  _DWORD *v18;
  uint64_t v19;
  llvm *v20;

  v3 = a1[4];
  v4 = a1[2];
  v5 = (void *)(16 * v3);
  if ((_DWORD)v3)
  {
    v6 = (_QWORD *)(*(_QWORD *)a1 + 8);
    v7 = 16 * v3;
    do
    {
      if (*((_DWORD *)v6 - 2) <= 0xFFFFFFFD)
      {
        v9 = *v6;
        *v6 = 0;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 32) >= 0x41u)
          {
            v10 = *(void **)(v9 + 24);
            if (v10)
              operator delete[](v10);
          }
          llvm::Value::~Value((llvm::Value *)v9, a2);
          llvm::User::operator delete(v8);
        }
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (!v4)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
LABEL_21:
    llvm::deallocate_buffer(*(llvm **)a1, v5);
  }
  v11 = 1 << (33 - __clz(v4 - 1));
  if (v11 <= 64)
    v12 = 64;
  else
    v12 = v11;
  if ((_DWORD)v12 != a1[4])
    goto LABEL_21;
  *((_QWORD *)a1 + 1) = 0;
  v13 = *(llvm **)a1;
  v14 = (v12 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
  {
    v17 = *(llvm **)a1;
LABEL_24:
    v20 = (llvm *)((char *)v13 + 16 * v12);
    do
    {
      *(_DWORD *)v17 = -1;
      v17 = (llvm *)((char *)v17 + 16);
    }
    while (v17 != v20);
    return;
  }
  v15 = v14 + 1;
  v16 = (v14 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v17 = (llvm *)((char *)v13 + 16 * v16);
  v18 = (_DWORD *)((char *)v13 + 16);
  v19 = v16;
  do
  {
    *(v18 - 4) = -1;
    *v18 = -1;
    v18 += 8;
    v19 -= 2;
  }
  while (v19);
  if (v15 != v16)
    goto LABEL_24;
}

void llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::shrink_and_clear(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;
  void *__p;
  unsigned int v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::destroyAll((uint64_t *)a1, a2);
  v5 = 1 << (33 - __clz(v4 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 != *(_DWORD *)(a1 + 16))
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * v3));
  *(_QWORD *)(a1 + 8) = 0;
  v11 = 0;
  __p = (void *)-1;
  if ((_DWORD)v6)
  {
    v7 = *(llvm::APInt **)a1;
    v8 = 24 * v6;
    do
    {
      while (1)
      {
        v9 = v11;
        *((_DWORD *)v7 + 2) = v11;
        if (v9 <= 0x40)
          break;
        llvm::APInt::initSlowCase(v7, (const void **)&__p);
        v7 = (llvm::APInt *)((char *)v7 + 24);
        v8 -= 24;
        if (!v8)
          goto LABEL_12;
      }
      *(_QWORD *)v7 = __p;
      v7 = (llvm::APInt *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
LABEL_12:
    if (v11 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
  }
}

void llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::shrink_and_clear(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;

  v2 = a1[4];
  v3 = a1[2];
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::destroyAll(a1);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 != a1[4])
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((llvm::APFloatBase *)a1);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v50;
  __int128 *v51;
  char v52;
  char v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  BOOL v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  int v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];

  v88[1] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v78 = a1;
    v79 = a2;
    a2 = v79;
    v81 = v80;
    a1 = v78;
    if (v81)
    {
      v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v82 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v82;
      a1 = v78;
      a2 = v79;
    }
  }
  if (a1 == a2)
  {
    v72 = 0;
  }
  else
  {
    v3 = *a1;
    *(_QWORD *)&v84 = *a1;
    if (a1 + 1 == a2)
    {
      v72 = 8;
    }
    else
    {
      v4 = a1[1];
      *((_QWORD *)&v84 + 1) = v4;
      if (a1 + 2 == a2)
      {
        v72 = 16;
      }
      else
      {
        v5 = a1[2];
        *(_QWORD *)&v85 = v5;
        if (a1 + 3 == a2)
        {
          v72 = 24;
        }
        else
        {
          v6 = a1[3];
          *((_QWORD *)&v85 + 1) = v6;
          if (a1 + 4 == a2)
          {
            v72 = 32;
          }
          else
          {
            v7 = a1[4];
            *(_QWORD *)&v86 = v7;
            if (a1 + 5 == a2)
            {
              v72 = 40;
            }
            else
            {
              v8 = a1[5];
              *((_QWORD *)&v86 + 1) = v8;
              if (a1 + 6 == a2)
              {
                v72 = 48;
              }
              else
              {
                v9 = a1[6];
                *(_QWORD *)&v87 = v9;
                if (a1 + 7 == a2)
                {
                  v72 = 56;
                }
                else
                {
                  v10 = a1[7];
                  *((_QWORD *)&v87 + 1) = v10;
                  v11 = a1 + 8;
                  if (a1 + 8 != a2)
                  {
                    v12 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
                    v13 = 0x9DDFEA08EB382D69
                        * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                                    * (v12 ^ (0xB492B66FBE98F273
                                                                                            * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v12 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
                    v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
                    v15 = 0x9DDFEA08EB382D69
                        * ((0x9DDFEA08EB382D69
                          * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
                    v16 = __ROR8__(v12 - 0x622015F714C7D297 * (v15 ^ (v15 >> 47)), 33);
                    v17 = 0xB492B66FBE98F273 * v16;
                    v18 = v14 + v7 - 0x4B6D499041670D8DLL * v16;
                    v19 = v8 + v9 + v18 + v10;
                    v20 = __ROR8__(v8 + v9 + v18, 44) + v18;
                    v21 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
                    v22 = v21
                        + v8
                        - 0x4B6D499041670D8DLL
                        * __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed+ v9- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
                    v23 = v20 + __ROR8__(v22 + v5 + v10 + v18, 21);
                    v24 = v3 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
                    v25 = v24 + v4 + v5;
                    v26 = v25 + v6;
                    v27 = (0xB492B66FBE98F273
                         * __ROR8__(v21 + llvm::hashing::detail::get_execution_seed(void)::seed + v4, 37)) ^ v14;
                    v28 = __ROR8__(v25, 44) + v24 + __ROR8__(v27 + v12 + v24 + v6, 21);
                    v83 = (char *)&v86;
                    v29 = 64;
                    while (1)
                    {
                      *(_QWORD *)&v84 = *v11;
                      v37 = v11 + 1 == a2;
                      if (v11 + 1 == a2)
                      {
                        v39 = 0;
                        v40 = 8;
                        ++v11;
                        v41 = (char *)&v84 + 8;
                      }
                      else
                      {
                        *((_QWORD *)&v84 + 1) = v11[1];
                        v37 = v11 + 2 == a2;
                        if (v11 + 2 == a2)
                        {
                          v39 = 8;
                          v40 = 16;
                          v11 += 2;
                          v41 = (char *)&v85;
                        }
                        else
                        {
                          *(_QWORD *)&v85 = v11[2];
                          v37 = v11 + 3 == a2;
                          if (v11 + 3 == a2)
                          {
                            v39 = 16;
                            v40 = 24;
                            v11 += 3;
                            v41 = (char *)&v85 + 8;
                          }
                          else
                          {
                            *((_QWORD *)&v85 + 1) = v11[3];
                            v37 = v11 + 4 == a2;
                            if (v11 + 4 == a2)
                            {
                              v39 = 24;
                              v40 = 32;
                              v11 += 4;
                              v41 = v83;
                            }
                            else
                            {
                              *(_QWORD *)&v86 = v11[4];
                              v37 = v11 + 5 == a2;
                              if (v11 + 5 == a2)
                              {
                                v39 = 32;
                                v40 = 40;
                                v11 += 5;
                                v41 = (char *)&v86 + 8;
                              }
                              else
                              {
                                *((_QWORD *)&v86 + 1) = v11[5];
                                v37 = v11 + 6 == a2;
                                if (v11 + 6 == a2)
                                {
                                  v39 = 40;
                                  v40 = 48;
                                  v11 += 6;
                                  v41 = (char *)&v87;
                                }
                                else
                                {
                                  *(_QWORD *)&v87 = v11[6];
                                  v37 = v11 + 7 == a2;
                                  if (v11 + 7 == a2)
                                  {
                                    v39 = 48;
                                    v40 = 56;
                                    v11 += 7;
                                    v41 = (char *)&v87 + 8;
                                  }
                                  else
                                  {
                                    v38 = v11[7];
                                    v11 += 8;
                                    *((_QWORD *)&v87 + 1) = v38;
                                    v37 = v11 == a2;
                                    v39 = 56;
                                    v40 = 64;
                                    v41 = (char *)v88;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if ((v40 & 0x38) == 0)
                        goto LABEL_12;
                      v42 = 56 - v39;
                      v43 = v40;
                      if (v40 != 56 - v39)
                      {
                        do
                        {
                          v50 = v43;
                          v43 = v42;
                          v42 = v50 % v42;
                        }
                        while (v42);
                        if (v43)
                        {
                          v51 = (__int128 *)((char *)&v84 + v43);
                          do
                          {
                            v53 = *((_BYTE *)v51 - 1);
                            v51 = (__int128 *)((char *)v51 - 1);
                            v52 = v53;
                            v54 = (__int128 *)((char *)v51 + v40);
                            v55 = v51;
                            do
                            {
                              v56 = v55;
                              v55 = v54;
                              *(_BYTE *)v56 = *(_BYTE *)v54;
                              v57 = v40 < (char *)v88 - (char *)v54;
                              v58 = (char *)&v84 + v40 - ((char *)v88 - (char *)v54);
                              v54 = (__int128 *)((char *)v54 + v40);
                              if (!v57)
                                v54 = (__int128 *)v58;
                            }
                            while (v54 != v51);
                            *(_BYTE *)v55 = v52;
                          }
                          while (v51 != &v84);
                        }
                        goto LABEL_12;
                      }
                      v44 = v39 | 7;
                      if (55 - v39 < (v39 | 7uLL))
                        v44 = 55 - v39;
                      v45 = (char *)&v84;
                      if (&v84 < (__int128 *)((char *)&v84 + v39 + v44 + 9))
                      {
                        v46 = v40;
                        if (v41 < (char *)&v84 + v44 + 1)
                          goto LABEL_34;
                      }
                      if (v44 >= 0x1F)
                      {
                        v60 = v44 + 1;
                        v59 = (v44 + 1) & 0x60;
                        v61 = (__int128 *)((char *)&v84 + v40);
                        v62 = v84;
                        v63 = v85;
                        v64 = *(__int128 *)((char *)&v84 + v40 + 16);
                        v84 = *(__int128 *)((char *)&v84 + v40);
                        v85 = v64;
                        *v61 = v62;
                        v61[1] = v63;
                        if (v59 != 32)
                        {
                          v65 = (__int128 *)((char *)&v86 + v40);
                          v66 = v86;
                          v67 = v87;
                          v68 = *(__int128 *)((char *)&v86 + v40 + 16);
                          v86 = *(__int128 *)((char *)&v86 + v40);
                          v87 = v68;
                          *v65 = v66;
                          v65[1] = v67;
                        }
                        if (v60 == v59)
                          goto LABEL_12;
                        if ((v60 & 0x18) == 0)
                        {
                          v45 = (char *)&v84 + v59;
                          v46 = v40 + v59;
LABEL_34:
                          v47 = v45 + 1;
                          do
                          {
                            v48 = *(v47 - 1);
                            *(v47 - 1) = *((_BYTE *)&v84 + v46);
                            *((_BYTE *)&v84 + v46) = v48;
                            if (v47 == v41)
                              break;
                            ++v47;
                          }
                          while (v46++ != 63);
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v59 = 0;
                      }
                      v69 = (uint64_t *)((char *)&v84 + v59);
                      v70 = v44 - v59 + 1;
                      do
                      {
                        v71 = *v69;
                        *v69 = v69[(unint64_t)v40 / 8];
                        v69[(unint64_t)v40 / 8] = v71;
                        ++v69;
                        v70 -= 8;
                      }
                      while (v70);
LABEL_12:
                      v30 = v22 + v26 + v17 + *((_QWORD *)&v84 + 1);
                      v22 = *((_QWORD *)&v86 + 1) + v26 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v28 + v87, 42);
                      v31 = v84 - 0x4B6D499041670D8DLL * v28;
                      v32 = v31 + *((_QWORD *)&v84 + 1) + v85;
                      v33 = __ROR8__(v27 + v19, 33);
                      v34 = (0xB492B66FBE98F273 * __ROR8__(v30, 37)) ^ v23;
                      v28 = __ROR8__(v32, 44) + v31 + __ROR8__(v34 + v19 + v31 + *((_QWORD *)&v85 + 1), 21);
                      v17 = 0xB492B66FBE98F273 * v33;
                      v35 = 0xB492B66FBE98F273 * v33 + v23 + v86;
                      v36 = *((_QWORD *)&v86 + 1) + v87 + v35;
                      v26 = v32 + *((_QWORD *)&v85 + 1);
                      v23 = __ROR8__(v22 + v85 + v35 + *((_QWORD *)&v87 + 1), 21) + v35 + __ROR8__(v36, 44);
                      v19 = v36 + *((_QWORD *)&v87 + 1);
                      v29 += v40;
                      v27 = v34;
                      if (v37)
                      {
                        v73 = 0x9DDFEA08EB382D69
                            * (v19 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v19)));
                        v74 = 0x9DDFEA08EB382D69
                            * (v23 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v23)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v23)));
                        v75 = 0x9DDFEA08EB382D69 * (v74 ^ (v74 >> 47))
                            - 0x4B6D499041670D8DLL * ((v29 ^ (v29 >> 47)) + v33);
                        v76 = 0x9DDFEA08EB382D69
                            * (v75 ^ (v34
                                    - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
                                    - 0x622015F714C7D297 * (v73 ^ (v73 >> 47))));
                        return 0x9DDFEA08EB382D69
                             * ((0x9DDFEA08EB382D69 * (v75 ^ (v76 >> 47) ^ v76)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (v75 ^ (v76 >> 47) ^ v76)) >> 47));
                      }
                    }
                  }
                  v72 = 64;
                }
              }
            }
          }
        }
      }
    }
  }
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v84, v72, llvm::hashing::detail::get_execution_seed(void)::seed);
}

uint64_t *llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, char *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 16;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 16;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[8] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

uint64_t _GLOBAL__sub_I_LLVMContextImpl_cpp()
{
  char v1;
  _BYTE *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Use opaque pointers";
  *((_QWORD *)&v3 + 1) = 19;
  v1 = 0;
  v2 = &v1;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)&OpaquePointersCL, (int8x16_t *)"opaque-pointers", &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &OpaquePointersCL, &dword_18013D000);
}

llvm::MDString *llvm::LLVMRemarkStreamer::toRemark@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  size_t v9;
  const char *Name;
  uint64_t v11;
  __int128 v12;
  char v13;
  llvm::MDString *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MDString *RelativePath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  _OWORD v49[4];

  v3 = a1;
  v5 = 0;
  *(_QWORD *)(a2 + 104) = a2 + 120;
  v6 = (uint64_t *)(a2 + 104);
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 112) = 0x500000000;
  v7 = *(_DWORD *)(a1 + 8) - 9;
  if (v7 <= 8)
    v5 = dword_181283148[v7];
  *(_DWORD *)a2 = v5;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = strlen(*(const char **)(a1 + 40));
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 48);
    Name = llvm::Value::getName(*(llvm::Value **)(v3 + 16));
    if (!v11)
      goto LABEL_9;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 48);
    Name = llvm::Value::getName(*(llvm::Value **)(a1 + 16));
    if (!v11)
      goto LABEL_9;
  }
  if (*Name == 1)
  {
    ++Name;
    --v11;
  }
LABEL_9:
  *(_QWORD *)(a2 + 40) = Name;
  *(_QWORD *)(a2 + 48) = v11;
  v12 = *(_OWORD *)(v3 + 24);
  v49[0] = v12;
  v13 = v12;
  if ((_QWORD)v12)
  {
    result = llvm::DiagnosticLocation::getRelativePath((llvm::DiagnosticLocation *)v49);
    v13 = 1;
    *(_QWORD *)&v12 = *((_QWORD *)&v49[0] + 1);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  *(_BYTE *)(a2 + 80) = v13;
  v15 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(v3 + 64);
  *(_BYTE *)(a2 + 96) = v15;
  v16 = *(unsigned int *)(v3 + 88);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(v3 + 80);
    v20 = v16 << 6;
    do
    {
      v26 = *(unsigned int *)(a2 + 112);
      if (v26 >= *(_DWORD *)(a2 + 116))
      {
        memset(v49, 0, sizeof(v49));
        v40 = v26 + 1;
        v41 = *v6 + (v26 << 6) > (unint64_t)v49;
        if (*v6 <= (unint64_t)v49 && v41)
        {
          v48 = (char *)v49 - *v6;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 104, (void *)(a2 + 120), v40, 64);
          v42 = *v6;
          v43 = &v48[*v6];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 104, (void *)(a2 + 120), v40, 64);
          v42 = *v6;
          v43 = (char *)v49;
        }
        v44 = (_OWORD *)(v42 + ((unint64_t)*(unsigned int *)(a2 + 112) << 6));
        v45 = *(_OWORD *)v43;
        v46 = *((_OWORD *)v43 + 1);
        v47 = *((_OWORD *)v43 + 3);
        v44[2] = *((_OWORD *)v43 + 2);
        v44[3] = v47;
        *v44 = v45;
        v44[1] = v46;
      }
      else
      {
        v27 = (_OWORD *)(*(_QWORD *)(a2 + 104) + (v26 << 6));
        v27[2] = 0u;
        v27[3] = 0u;
        *v27 = 0u;
        v27[1] = 0u;
      }
      LODWORD(v23) = *(_DWORD *)(a2 + 112) + 1;
      *(_DWORD *)(a2 + 112) = v23;
      v28 = v19 + v17;
      v29 = v19 + v17;
      v30 = *(char *)(v19 + v17 + 23);
      v31 = v30 < 0;
      if (v30 < 0)
        v28 = *(_QWORD *)(v19 + v17);
      v32 = *(unsigned __int8 *)(v19 + v17 + 23);
      if (v31)
        v32 = *(_QWORD *)(v19 + v17 + 8);
      v33 = (unint64_t)v23 << 6;
      v34 = *v6 + v33;
      *(_QWORD *)(v34 - 64) = v28;
      *(_QWORD *)(v34 - 56) = v32;
      v35 = *(char *)(v29 + 47);
      v36 = v29 + 24;
      v37 = v35 < 0;
      if (v35 < 0)
        v36 = *(_QWORD *)(v29 + 24);
      v38 = *(unsigned __int8 *)(v29 + 47);
      if (v37)
        v38 = *(_QWORD *)(v29 + 32);
      v39 = *v6 + v33;
      *(_QWORD *)(v39 - 48) = v36;
      *(_QWORD *)(v39 - 40) = v38;
      v24 = *(_QWORD *)(v29 + 48);
      if (v24)
      {
        RelativePath = llvm::DiagnosticLocation::getRelativePath((llvm::DiagnosticLocation *)(v29 + 48));
        v3 = v22;
        v2 = *(_QWORD *)(v29 + 56);
        v18 = (unint64_t)RelativePath >> 8;
        v23 = *(unsigned int *)(a2 + 112);
        LOBYTE(v24) = 1;
      }
      else
      {
        LOBYTE(RelativePath) = 0;
        v23 = v23;
      }
      v25 = *v6 + (v23 << 6);
      result = (llvm::MDString *)(RelativePath | (v18 << 8));
      *(_QWORD *)(v25 - 32) = result;
      *(_QWORD *)(v25 - 24) = v3;
      *(_QWORD *)(v25 - 16) = v2;
      *(_BYTE *)(v25 - 8) = v24;
      v17 += 64;
    }
    while (v20 != v17);
  }
  return result;
}

void llvm::LLVMRemarkStreamer::emit(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  _BYTE v7[104];
  void *v8;
  _QWORD v9[41];

  v9[40] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(char **)(a2 + 40);
  if (v5)
  {
    v6 = strlen(*(const char **)(a2 + 40));
    if (!llvm::remarks::RemarkStreamer::matchesFilter(v4, v5, v6))
      return;
  }
  else if (!llvm::remarks::RemarkStreamer::matchesFilter(*a1, 0, 0))
  {
    return;
  }
  llvm::LLVMRemarkStreamer::toRemark(a2, (uint64_t)v7);
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*a1 + 24) + 16))(*(_QWORD *)(*a1 + 24), v7);
  if (v8 != v9)
    free(v8);
}

_QWORD *llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E0E23998;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;

  v7 = a1;
  v23 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    v13 = 0;
    v14 = (uint64_t *)(v12 + 8);
    if (a4)
    {
      v15 = (uint64_t *)(v12 + 8);
      while (1)
      {
        v16 = *v15;
        v15 += 6;
        if (v16 == a4)
        {
          a1 = memcmp((const void *)*(v14 - 1), a3, a4);
          if (!(_DWORD)a1)
            break;
        }
        ++v13;
        v14 = v15;
        if (v11 == v13)
          goto LABEL_17;
      }
    }
    else
    {
      while (1)
      {
        v17 = *v14;
        v14 += 6;
        if (!v17)
          break;
        if (v11 == ++v13)
          goto LABEL_17;
      }
    }
    v18 = *(_DWORD *)(v12 + 48 * v13 + 40);
    v23 = v18;
  }
  else
  {
LABEL_17:
    v25 = 1283;
    v24[0] = "Cannot find option named '";
    v24[2] = a3;
    v24[3] = a4;
    v26[0] = v24;
    v26[2] = "'!";
    v27 = 770;
    v19 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v26, 0, 0, v19) & 1) != 0)
      return 1;
    v18 = 0;
  }
  *(_DWORD *)(v7 + 128) = v18;
  *(_WORD *)(v7 + 12) = a2;
  v21 = *(_QWORD *)(v7 + 592);
  if (v21)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v21 + 48))(v21, &v23);
    return 0;
  }
  else
  {
    v22 = std::__throw_bad_function_call[abi:nn180100]();
  }
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  *(_QWORD *)__p = off_1E0E23110;
  v2 = __p + 568;
  v3 = (char *)*((_QWORD *)__p + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &off_1E0E23998;
  v5 = (char *)*((_QWORD *)__p + 21);
  if (v5 != __p + 184)
    free(v5);
  *(_QWORD *)__p = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)__p + 12);
  if (v6 != *((void **)__p + 11))
    free(v6);
  v7 = (char *)*((_QWORD *)__p + 8);
  if (v7 != __p + 80)
    free(v7);
  operator delete(__p);
}

unint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*((_BYTE *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    v3 = *((_DWORD *)result + 32);
    v4 = &off_1E0E22E48;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
  {
    v3 = a1 + 152;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v6);
        v9 = v8;
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          v10 = *(unsigned int *)(a2 + 8);
        }
        v11 = (uint64_t *)(*(_QWORD *)a2 + 16 * v10);
        *v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        v6 = (v6 + 1);
      }
      while (v5 != (_DWORD)v6);
    }
  }
}

void llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::~parser(_QWORD *__p)
{
  _QWORD *v2;

  *__p = &off_1E0E23998;
  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<`anonymous namespace'::PassDebugLevel>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F7B8;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F7B8;
}

uint64_t std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_114PassDebugLevelELb0ENS0_6parserIS3_EEEUlRKS3_E_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114PassDebugLevelELb0ENS0_6parserIS3_EEEUlRKS3_E_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_114PassDebugLevelELb0ENS0_6parserIS3_EEEUlRKS3_E_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114PassDebugLevelELb0ENS0_6parserIS3_EEEUlRKS3_E_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::target_type()
{
}

void getNameWithPrefixImpl(llvm::raw_ostream *this, uint64_t a2, int a3, uint64_t a4, char a5)
{
  size_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  size_t v18;
  unint64_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  int v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  _QWORD v28[33];

  v28[32] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = xmmword_181236410;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v9 = 0;
    v10 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v10 = *(const char **)a2;
        if (*(_QWORD *)a2)
          v9 = strlen(*(const char **)a2);
        else
          v9 = 0;
        break;
      case 4:
        v22 = *(const char **)a2;
        v23 = *(char *)(*(_QWORD *)a2 + 23);
        if (v23 >= 0)
          v10 = *(const char **)a2;
        else
          v10 = *(const char **)v22;
        if (v23 >= 0)
          v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
        else
          v9 = *((_QWORD *)v22 + 1);
        break;
      case 5:
      case 6:
        v10 = *(const char **)a2;
        v9 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector(a2, (uint64_t)&v26);
    v10 = (const char *)v26;
    v9 = v27;
  }
  v11 = *(unsigned __int8 *)v10;
  if (v11 == 1)
  {
    v12 = v9 != 0;
    if (v9)
      v13 = v10 + 1;
    else
      v13 = v10;
    v14 = v9 - v12;
    v15 = (void *)*((_QWORD *)this + 4);
    if (v9 - v12 > *((_QWORD *)this + 3) - (_QWORD)v15)
    {
      llvm::raw_ostream::write(this, v13, v9 - v12);
      goto LABEL_47;
    }
    if (v9 != v12)
    {
      memcpy(v15, v13, v9 - v12);
      v18 = *((_QWORD *)this + 4) + v14;
LABEL_46:
      *((_QWORD *)this + 4) = v18;
      goto LABEL_47;
    }
    goto LABEL_47;
  }
  v16 = *(unsigned int *)(a4 + 28);
  if ((v16 - 3) < 2 && v11 == 63)
    a5 = 0;
  if (a3 != 2)
  {
    if (a3 == 1)
      __asm { BR              X10 }
LABEL_37:
    if (!a5)
      goto LABEL_42;
    goto LABEL_38;
  }
  v19 = (_DWORD)v16 == 2;
  v20 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v20 < v19)
  {
    if ((_DWORD)v16 == 2)
      v21 = "l";
    else
      v21 = "";
    llvm::raw_ostream::write(this, v21, (_DWORD)v16 == 2);
    goto LABEL_37;
  }
  if ((_DWORD)v16 != 2)
    goto LABEL_37;
  memcpy(v20, "l", 1uLL);
  *((_QWORD *)this + 4) += v19;
  if (a5)
  {
LABEL_38:
    v24 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v24 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, a5);
    }
    else
    {
      *((_QWORD *)this + 4) = v24 + 1;
      *v24 = a5;
    }
  }
LABEL_42:
  v25 = (void *)*((_QWORD *)this + 4);
  if (v9 > *((_QWORD *)this + 3) - (_QWORD)v25)
  {
    llvm::raw_ostream::write(this, v10, v9);
    goto LABEL_47;
  }
  if (v9)
  {
    memcpy(v25, v10, v9);
    v18 = *((_QWORD *)this + 4) + v9;
    goto LABEL_46;
  }
LABEL_47:
  if (v26 != v28)
    free(v26);
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, int a4)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  const llvm::GlobalValue *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  const llvm::GlobalValue *v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  const llvm::GlobalValue *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD v29[4];
  __int16 v30;

  if (a4)
    v6 = 2;
  else
    v6 = 1;
  if ((*((_DWORD *)a3 + 8) & 0xF) == 8)
    v7 = v6;
  else
    v7 = 0;
  v8 = *((_QWORD *)a3 + 5);
  if ((*((_BYTE *)a3 + 23) & 0x10) != 0)
  {
    llvm::Value::getName(a3);
    llvm::GlobalValue::getAliaseeObject(a3);
  }
  v10 = *((_DWORD *)this + 4);
  if (!v10)
    goto LABEL_31;
  v11 = v10 - 1;
  v12 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = *(_QWORD *)this + 16 * v12;
  v14 = *(const llvm::GlobalValue **)v13;
  if (*(const llvm::GlobalValue **)v13 == a3)
    goto LABEL_25;
  v15 = 0;
  v16 = 1;
  while (v14 != (const llvm::GlobalValue *)-4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v14 == (const llvm::GlobalValue *)-8192;
    if (v17)
      v15 = v13;
    v18 = v12 + v16++;
    v12 = v18 & v11;
    v13 = *(_QWORD *)this + 16 * (v18 & v11);
    v14 = *(const llvm::GlobalValue **)v13;
    if (*(const llvm::GlobalValue **)v13 == a3)
      goto LABEL_25;
  }
  if (v15)
    v13 = v15;
  v21 = *((_DWORD *)this + 2);
  if (4 * v21 + 4 < 3 * v10)
  {
    if (v10 + ~v21 - *((_DWORD *)this + 3) > v10 >> 3)
      goto LABEL_22;
  }
  else
  {
LABEL_31:
    v10 *= 2;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this, v10);
  v22 = *((_DWORD *)this + 4) - 1;
  v23 = v22 & ((a3 >> 4) ^ (a3 >> 9));
  v13 = *(_QWORD *)this + 16 * v23;
  v24 = *(const llvm::GlobalValue **)v13;
  if (*(const llvm::GlobalValue **)v13 == a3)
  {
LABEL_33:
    ++*((_DWORD *)this + 2);
    if (a3 == (const llvm::GlobalValue *)-4096)
      goto LABEL_24;
    goto LABEL_23;
  }
  v25 = 0;
  v26 = 1;
  while (v24 != (const llvm::GlobalValue *)-4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v24 == (const llvm::GlobalValue *)-8192;
    if (v27)
      v25 = v13;
    v28 = v23 + v26++;
    v23 = v28 & v22;
    v13 = *(_QWORD *)this + 16 * (v28 & v22);
    v24 = *(const llvm::GlobalValue **)v13;
    if (*(const llvm::GlobalValue **)v13 == a3)
      goto LABEL_33;
  }
  if (v25)
    v13 = v25;
LABEL_22:
  v19 = *(const llvm::GlobalValue **)v13;
  ++*((_DWORD *)this + 2);
  if (v19 != (const llvm::GlobalValue *)-4096)
LABEL_23:
    --*((_DWORD *)this + 3);
LABEL_24:
  *(_QWORD *)v13 = a3;
  *(_DWORD *)(v13 + 8) = 0;
LABEL_25:
  v20 = *(_DWORD *)(v13 + 8);
  if (!v20)
  {
    v20 = *((_DWORD *)this + 2);
    *(_DWORD *)(v13 + 8) = v20;
  }
  v29[0] = "__unnamed_";
  v29[2] = v20;
  v30 = 2307;
  getNameWithPrefixImpl(a2, (uint64_t)v29, v7, v8 + 256, 0x5F005F0000uLL >> (8 * *(_DWORD *)(v8 + 284)));
}

uint64_t llvm::Function::hasStructRetAttr(llvm::Function *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)((char *)this + 112);
  if ((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)this + 14, 1, 77) & 1) != 0)
    return 1;
  else
    return llvm::AttributeList::hasAttributeAtIndex(v1, 2, 77);
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *a1, uint64_t a2, const llvm::GlobalValue *a3, int a4)
{
  void (**v7)(llvm::raw_svector_ostream *__hidden);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = off_1E0E22B88;
  v15 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v7, 0, 0, 0);
  llvm::Mangler::getNameWithPrefix(a1, (llvm::raw_ostream *)&v7, a3, a4);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

void llvm::MetadataAsValue::~MetadataAsValue(int32x2_t ****this)
{
  int32x2_t *v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  int v12;
  int v13;

  v2 = ***this;
  v5 = (unsigned __int8 *)this[3];
  v3 = (unsigned __int8 **)(this + 3);
  v4 = v5;
  v6 = v2[59].i32[0];
  if (v6)
  {
    v7 = v2[57];
    v8 = v6 - 1;
    LODWORD(v9) = ((v4 >> 4) ^ (v4 >> 9)) & (v6 - 1);
    v10 = (unsigned __int8 **)(*(_QWORD *)&v7 + 16 * v9);
    v11 = *v10;
    if (v4 == *v10)
    {
LABEL_3:
      *v10 = (unsigned __int8 *)-8192;
      v2[58] = vadd_s32(v2[58], (int32x2_t)0x1FFFFFFFFLL);
      v4 = *v3;
    }
    else
    {
      v12 = 1;
      while (v11 != (unsigned __int8 *)-4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & v8;
        v11 = *(unsigned __int8 **)(*(_QWORD *)&v7 + 16 * v9);
        if (v4 == v11)
        {
          v10 = (unsigned __int8 **)(*(_QWORD *)&v7 + 16 * v9);
          goto LABEL_3;
        }
      }
    }
  }
  if (v4)
    llvm::MetadataTracking::untrack((uint64_t)v3, v4);
  llvm::Value::~Value((llvm::Value *)this, (llvm::Value *)v4);
}

unsigned __int8 *llvm::MetadataAsValue::get(llvm::MetadataAsValue *this, llvm::LLVMContext *a2, llvm::Metadata *a3)
{
  unsigned __int8 *Impl;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v19;
  llvm::LLVMContext *v20;
  llvm::Type *MetadataTy;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  int v30;
  BOOL v31;
  unsigned int v32;

  if (!a2)
  {
LABEL_9:
    Impl = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)this, 0, 0, 0, 1);
    goto LABEL_10;
  }
  Impl = (unsigned __int8 *)a2;
  if (*(unsigned __int8 *)a2 - 5 <= 0x1E)
  {
    v5 = *((_QWORD *)a2 - 2);
    if ((v5 & 2) != 0)
    {
      if (*((_DWORD *)a2 - 6) != 1)
        goto LABEL_10;
      v6 = (unsigned __int8 *)**((_QWORD **)a2 - 4);
      if (v6)
      {
LABEL_6:
        if (*v6 == 1)
          Impl = v6;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if ((*((_QWORD *)a2 - 2) & 0x3C0) == 0x40)
    {
      v6 = (unsigned __int8 *)*((_QWORD *)a2 - ((v5 >> 2) & 0xF) - 2);
      if (v6)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
LABEL_10:
  v7 = *(_QWORD *)this;
  v8 = *(_DWORD *)(*(_QWORD *)this + 472);
  if (!v8)
    goto LABEL_37;
  v9 = *(_QWORD *)(v7 + 456);
  v10 = ((Impl >> 4) ^ (Impl >> 9)) & (v8 - 1);
  v11 = (unsigned __int8 **)(v9 + 16 * v10);
  v12 = *v11;
  if (Impl == *v11)
    goto LABEL_26;
  v13 = 0;
  v14 = 1;
  while (v12 != (unsigned __int8 *)-4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == (unsigned __int8 *)-8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & (v8 - 1);
    v11 = (unsigned __int8 **)(v9 + 16 * v10);
    v12 = *v11;
    if (Impl == *v11)
      goto LABEL_26;
  }
  if (v13)
    v11 = v13;
  v24 = *(_DWORD *)(v7 + 464);
  if (4 * v24 + 4 < 3 * v8)
  {
    if (v8 + ~v24 - *(_DWORD *)(v7 + 468) > v8 >> 3)
      goto LABEL_23;
  }
  else
  {
LABEL_37:
    v8 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v7 + 456, v8);
  v25 = *(_QWORD *)(v7 + 456);
  v26 = *(_DWORD *)(v7 + 472) - 1;
  v27 = v26 & ((Impl >> 4) ^ (Impl >> 9));
  v11 = (unsigned __int8 **)(v25 + 16 * v27);
  v28 = *v11;
  if (Impl == *v11)
  {
LABEL_39:
    ++*(_DWORD *)(v7 + 464);
    if (Impl == (unsigned __int8 *)-4096)
      goto LABEL_25;
    goto LABEL_24;
  }
  v29 = 0;
  v30 = 1;
  while (v28 != (unsigned __int8 *)-4096)
  {
    if (v29)
      v31 = 0;
    else
      v31 = v28 == (unsigned __int8 *)-8192;
    if (v31)
      v29 = v11;
    v32 = v27 + v30++;
    v27 = v32 & v26;
    v11 = (unsigned __int8 **)(v25 + 16 * v27);
    v28 = *v11;
    if (Impl == *v11)
      goto LABEL_39;
  }
  if (v29)
    v11 = v29;
LABEL_23:
  v17 = *v11;
  ++*(_DWORD *)(v7 + 464);
  if (v17 != (unsigned __int8 *)-4096)
LABEL_24:
    --*(_DWORD *)(v7 + 468);
LABEL_25:
  *v11 = Impl;
  v11[1] = 0;
LABEL_26:
  if (v11[1])
    return v11[1];
  v19 = (unsigned __int8 *)operator new(0x20uLL);
  MetadataTy = (llvm::Type *)llvm::Type::getMetadataTy(this, v20);
  v22 = llvm::Value::Value((uint64_t)v19, MetadataTy, 23);
  *(_QWORD *)(v22 + 24) = Impl;
  v23 = v22 + 24;
  if (Impl)
    llvm::MetadataTracking::track(v23, Impl, (uint64_t)v19);
  v11[1] = v19;
  return v19;
}

uint64_t llvm::MetadataAsValue::getIfExists(llvm::MetadataAsValue *this, llvm::LLVMContext *Impl, llvm::Metadata *a3)
{
  unint64_t v4;
  llvm::LLVMContext *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  llvm::LLVMContext *v10;
  int v12;
  int v13;

  if (!Impl)
    goto LABEL_9;
  if (*(unsigned __int8 *)Impl - 5 > 0x1E)
    goto LABEL_10;
  v4 = *((_QWORD *)Impl - 2);
  if ((v4 & 2) == 0)
  {
    if ((*((_QWORD *)Impl - 2) & 0x3C0) != 0x40)
      goto LABEL_10;
    v5 = (llvm::LLVMContext *)*((_QWORD *)Impl - ((v4 >> 2) & 0xF) - 2);
    if (v5)
      goto LABEL_6;
LABEL_9:
    Impl = (llvm::LLVMContext *)llvm::MDTuple::getImpl((uint64_t)this, 0, 0, 0, 1);
    goto LABEL_10;
  }
  if (*((_DWORD *)Impl - 6) != 1)
    goto LABEL_10;
  v5 = (llvm::LLVMContext *)**((_QWORD **)Impl - 4);
  if (!v5)
    goto LABEL_9;
LABEL_6:
  if (*(_BYTE *)v5 == 1)
    Impl = v5;
LABEL_10:
  v6 = *(_DWORD *)(*(_QWORD *)this + 472);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)this + 456);
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((Impl >> 4) ^ (Impl >> 9));
    v10 = *(llvm::LLVMContext **)(v7 + 16 * v9);
    if (v10 == Impl)
      return *(_QWORD *)(v7 + 16 * v9 + 8);
    v12 = 1;
    while (v10 != (llvm::LLVMContext *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & v8;
      v10 = *(llvm::LLVMContext **)(v7 + 16 * v9);
      if (v10 == Impl)
        return *(_QWORD *)(v7 + 16 * v9 + 8);
    }
  }
  return 0;
}

void llvm::MetadataAsValue::handleChangedMetadata(llvm::MetadataAsValue *this, llvm::Metadata *Impl)
{
  uint64_t DesiredBytecodeVersion;
  int32x2_t **v5;
  unint64_t v6;
  llvm::Metadata *v7;
  int32x2_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned int v11;
  int32x2_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  int32x2_t *v16;
  unsigned int v17;
  llvm::Metadata **v18;
  llvm::Metadata *v19;
  llvm::Metadata **v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  llvm::Metadata *v24;
  llvm::Value *v25;
  int32x2_t *v26;
  __int32 v27;
  unsigned __int8 *v28;
  int32x2_t v29;
  __int32 v30;
  uint64_t v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  void *v34;
  int v35;
  int v36;
  __int32 v37;
  int32x2_t v38;
  int v39;
  unsigned int v40;
  llvm::Metadata *v41;
  int v42;
  int v43;
  llvm::Metadata **v44;
  int v45;
  BOOL v46;
  unsigned int v47;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v5 = (int32x2_t **)DesiredBytecodeVersion;
  if (!Impl)
  {
LABEL_11:
    Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(DesiredBytecodeVersion, 0, 0, 0, 1);
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)Impl - 5 <= 0x1E)
  {
    v6 = *((_QWORD *)Impl - 2);
    if ((v6 & 2) != 0)
    {
      if (*((_DWORD *)Impl - 6) == 1)
      {
        v7 = (llvm::Metadata *)**((_QWORD **)Impl - 4);
        if (v7)
        {
LABEL_6:
          if (*(_BYTE *)v7 == 1)
            Impl = v7;
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
    else if ((*((_QWORD *)Impl - 2) & 0x3C0) == 0x40)
    {
      v7 = (llvm::Metadata *)*((_QWORD *)Impl - ((v6 >> 2) & 0xF) - 2);
      if (v7)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
LABEL_12:
  v8 = *v5;
  v10 = (unsigned __int8 **)((char *)this + 24);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v11 = v8[59].u32[0];
  if (v11)
  {
    v12 = v8[57];
    LODWORD(v13) = ((v9 >> 4) ^ (v9 >> 9)) & (v11 - 1);
    v14 = (unsigned __int8 **)(*(_QWORD *)&v12 + 16 * v13);
    v15 = *v14;
    if (v9 == *v14)
    {
LABEL_14:
      *v14 = (unsigned __int8 *)-8192;
      v8[58] = vadd_s32(v8[58], (int32x2_t)0x1FFFFFFFFLL);
      v9 = *v10;
    }
    else
    {
      v35 = 1;
      while (v15 != (unsigned __int8 *)-4096)
      {
        v36 = v13 + v35++;
        v13 = v36 & (v11 - 1);
        v15 = *(unsigned __int8 **)(*(_QWORD *)&v12 + 16 * v13);
        if (v9 == v15)
        {
          v14 = (unsigned __int8 **)(*(_QWORD *)&v12 + 16 * v13);
          goto LABEL_14;
        }
      }
    }
  }
  if (v9)
  {
    llvm::MetadataTracking::untrack((uint64_t)this + 24, v9);
    v11 = v8[59].u32[0];
  }
  v16 = v8 + 57;
  *v10 = 0;
  if (!v11)
    goto LABEL_52;
  v17 = (v11 - 1) & ((Impl >> 4) ^ (Impl >> 9));
  v18 = (llvm::Metadata **)(*(_QWORD *)v16 + 16 * v17);
  v19 = *v18;
  if (Impl == *v18)
    goto LABEL_33;
  v20 = 0;
  v21 = 1;
  while (v19 != (llvm::Metadata *)-4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v19 == (llvm::Metadata *)-8192;
    if (v22)
      v20 = v18;
    v23 = v17 + v21++;
    v17 = v23 & (v11 - 1);
    v18 = (llvm::Metadata **)(*(_QWORD *)v16 + 16 * v17);
    v19 = *v18;
    if (Impl == *v18)
      goto LABEL_33;
  }
  if (v20)
    v18 = v20;
  v37 = v8[58].i32[0];
  if (4 * v37 + 4 < 3 * v11)
  {
    if (v11 + ~v37 - v8[58].i32[1] > v11 >> 3)
      goto LABEL_30;
  }
  else
  {
LABEL_52:
    v11 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v16, v11);
  v38 = v8[57];
  v39 = v8[59].i32[0] - 1;
  v40 = v39 & ((Impl >> 4) ^ (Impl >> 9));
  v18 = (llvm::Metadata **)(*(_QWORD *)&v38 + 16 * v40);
  v41 = *v18;
  if (Impl == *v18)
  {
LABEL_54:
    ++v8[58].i32[0];
    if (Impl == (llvm::Metadata *)-4096)
      goto LABEL_32;
    goto LABEL_31;
  }
  v44 = 0;
  v45 = 1;
  while (v41 != (llvm::Metadata *)-4096)
  {
    if (v44)
      v46 = 0;
    else
      v46 = v41 == (llvm::Metadata *)-8192;
    if (v46)
      v44 = v18;
    v47 = v40 + v45++;
    v40 = v47 & v39;
    v18 = (llvm::Metadata **)(*(_QWORD *)&v38 + 16 * v40);
    v41 = *v18;
    if (Impl == *v18)
      goto LABEL_54;
  }
  if (v44)
    v18 = v44;
LABEL_30:
  v24 = *v18;
  ++v8[58].i32[0];
  if (v24 != (llvm::Metadata *)-4096)
LABEL_31:
    --v8[58].i32[1];
LABEL_32:
  *v18 = Impl;
  v18[1] = 0;
LABEL_33:
  v25 = v18[1];
  if (v25)
  {
    llvm::Value::replaceAllUsesWith((Value *)this, v25);
    if (this)
    {
      v26 = ***(int32x2_t ****)this;
      v27 = v26[59].i32[0];
      v28 = (unsigned __int8 *)*((_QWORD *)this + 3);
      if (v27)
      {
        v29 = v26[57];
        v30 = v27 - 1;
        LODWORD(v31) = ((v28 >> 4) ^ (v28 >> 9)) & (v27 - 1);
        v32 = (unsigned __int8 **)(*(_QWORD *)&v29 + 16 * v31);
        v33 = *v32;
        if (v28 == *v32)
        {
LABEL_37:
          *v32 = (unsigned __int8 *)-8192;
          v26[58] = vadd_s32(v26[58], (int32x2_t)0x1FFFFFFFFLL);
          v28 = *v10;
        }
        else
        {
          v42 = 1;
          while (v33 != (unsigned __int8 *)-4096)
          {
            v43 = v31 + v42++;
            v31 = v43 & v30;
            v33 = *(unsigned __int8 **)(*(_QWORD *)&v29 + 16 * v31);
            if (v28 == v33)
            {
              v32 = (unsigned __int8 **)(*(_QWORD *)&v29 + 16 * v31);
              goto LABEL_37;
            }
          }
        }
      }
      if (v28)
        llvm::MetadataTracking::untrack((uint64_t)this + 24, v28);
      llvm::Value::~Value(this);
      operator delete(v34);
    }
  }
  else
  {
    *v10 = (unsigned __int8 *)Impl;
    if (Impl)
      llvm::MetadataTracking::track((uint64_t)this + 24, (unsigned __int8 *)Impl, (uint64_t)this);
    v18[1] = this;
  }
}

uint64_t llvm::DebugValueUser::trackDebugValue(uint64_t this)
{
  if (*(_QWORD *)this)
    return llvm::MetadataTracking::track(this, *(unsigned __int8 **)this, this | 2);
  return this;
}

unsigned __int8 **llvm::DebugValueUser::untrackDebugValue(unsigned __int8 **this)
{
  if (*this)
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)this, *this);
  return this;
}

uint64_t llvm::MetadataTracking::track(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if ((v6 - 5) <= 0x1E)
  {
    if ((a2[1] & 0x7F) == 2 || *((_DWORD *)a2 - 2))
    {
      v7 = *((_QWORD *)a2 + 1);
      if ((v7 & 4) == 0)
      {
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        v9 = (unint64_t)operator new(0x78uLL);
        *(_QWORD *)v9 = v8;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 1;
        *(_QWORD *)(v9 + 24) = -4096;
        *(_QWORD *)(v9 + 48) = -4096;
        *(_QWORD *)(v9 + 72) = -4096;
        *(_QWORD *)(v9 + 96) = -4096;
        v7 = v9 | 4;
        *((_QWORD *)a2 + 1) = v9 | 4;
      }
      v10 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v11 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)&v29 = a3;
        *((_QWORD *)&v29 + 1) = v11;
        v12 = v10 + 16;
        v13 = *(_BYTE *)(v10 + 16);
        v28 = a1;
        if ((v13 & 1) == 0)
        {
LABEL_8:
          v14 = *(_DWORD *)(v10 + 32);
          if (!v14)
          {
            v23 = 0;
            goto LABEL_28;
          }
          v15 = *(_QWORD *)(v10 + 24);
LABEL_22:
          v18 = v14 - 1;
          v19 = v18 & ((a1 >> 4) ^ (a1 >> 9));
          v20 = (_QWORD *)(v15 + 24 * v19);
          v21 = *v20;
          if (*v20 == a1)
          {
LABEL_23:
            *(_QWORD *)(v10 + 8) = v11 + 1;
            return 1;
          }
          v24 = 0;
          v25 = 1;
          while (v21 != -4096)
          {
            if (v24)
              v26 = 0;
            else
              v26 = v21 == -8192;
            if (v26)
              v24 = v20;
            v27 = v19 + v25++;
            v19 = v27 & v18;
            v20 = (_QWORD *)(v15 + 24 * v19);
            v21 = *v20;
            if (*v20 == a1)
              goto LABEL_23;
          }
          if (v24)
            v23 = (uint64_t)v24;
          else
            v23 = (uint64_t)v20;
LABEL_28:
          llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::InsertIntoBucket<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>(v12, v23, &v28, &v29);
          v11 = *(_QWORD *)(v10 + 8);
          goto LABEL_23;
        }
LABEL_21:
        v15 = v12 + 8;
        v14 = 4;
        goto LABEL_22;
      }
    }
    return 0;
  }
  if (v6 == 4)
    v16 = a2;
  else
    v16 = 0;
  if (v6 == 4
    || ((v6 - 3) >= 0xFFFFFFFE ? (v16 = a2) : (v16 = 0), (v6 - 3) >= 0xFFFFFFFE))
  {
    v10 = (unint64_t)(v16 + 8);
    v11 = *((_QWORD *)v16 + 2);
    *(_QWORD *)&v29 = a3;
    *((_QWORD *)&v29 + 1) = v11;
    v12 = (uint64_t)(v16 + 24);
    v17 = v16[24];
    v28 = a1;
    if ((v17 & 1) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
  if (v6 != 3)
    return 0;
  *((_QWORD *)a2 + 1) = a1;
  return 1;
}

uint64_t llvm::MetadataTracking::untrack(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;

  v2 = *a2;
  if ((v2 - 5) > 0x1E)
  {
    if (v2 == 4)
      v7 = a2;
    else
      v7 = 0;
    if (v2 != 4)
    {
      v7 = (v2 - 3) >= 0xFFFFFFFE ? a2 : 0;
      if ((v2 - 3) < 0xFFFFFFFE)
      {
        if (v2 == 3)
          *((_QWORD *)a2 + 1) = 0;
        return result;
      }
    }
    v4 = (unint64_t)(v7 + 8);
    if ((v7[24] & 1) == 0)
      goto LABEL_7;
  }
  else
  {
    if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 - 2))
      return result;
    v3 = *((_QWORD *)a2 + 1);
    if ((v3 & 4) == 0)
      return result;
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return result;
    if ((*(_BYTE *)(v4 + 16) & 1) == 0)
    {
LABEL_7:
      v5 = *(_DWORD *)(v4 + 32);
      if (!v5)
        return result;
      v6 = *(_QWORD *)(v4 + 24);
      goto LABEL_22;
    }
  }
  v6 = v4 + 24;
  v5 = 4;
LABEL_22:
  v8 = v5 - 1;
  v9 = v8 & ((result >> 4) ^ (result >> 9));
  v10 = (uint64_t *)(v6 + 24 * v9);
  v11 = *v10;
  if (*v10 == result)
  {
LABEL_23:
    *v10 = -8192;
    v12 = *(_DWORD *)(v4 + 20) + 1;
    *(_DWORD *)(v4 + 16) -= 2;
    *(_DWORD *)(v4 + 20) = v12;
  }
  else
  {
    v13 = 1;
    while (v11 != -4096)
    {
      v14 = v9 + v13++;
      v9 = v14 & v8;
      v10 = (uint64_t *)(v6 + 24 * v9);
      v11 = *v10;
      if (*v10 == result)
        goto LABEL_23;
    }
  }
  return result;
}

uint64_t llvm::MetadataTracking::retrack(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int8 *v11;

  v4 = *a2;
  if ((v4 - 5) > 0x1E)
  {
    if (v4 == 4)
      v8 = a2;
    else
      v8 = 0;
    if (v4 == 4)
    {
      llvm::ReplaceableMetadataImpl::moveRef((uint64_t)(v8 + 8), a1, a3);
      return 1;
    }
    v9 = v4 - 3;
    v10 = __CFADD__(v9, 2);
    if (v9 >= 0xFFFFFFFE)
      v11 = a2;
    else
      v11 = 0;
    if (v10)
    {
      llvm::ReplaceableMetadataImpl::moveRef((uint64_t)(v11 + 8), a1, a3);
      return 1;
    }
    return 0;
  }
  if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 - 2))
    return 0;
  result = 0;
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 4) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      llvm::ReplaceableMetadataImpl::moveRef(v7, a1, a3);
      return 1;
    }
  }
  return result;
}

uint64_t llvm::ReplaceableMetadataImpl::moveRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 16);
  result = a1 + 16;
  v5 = v6;
  v7 = result + 8;
  if ((v6 & 1) != 0)
  {
    v9 = 4;
    v8 = result + 8;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_DWORD *)(a1 + 32);
    if (!v9)
    {
      v10 = 0;
LABEL_4:
      v11 = v8 + 24 * v10;
      goto LABEL_7;
    }
  }
  v12 = v9 - 1;
  v13 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v8 + 24 * v13;
  v14 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 != a2)
  {
    v23 = 1;
    while (v14 != -4096)
    {
      v24 = v13 + v23++;
      v13 = v24 & v12;
      v11 = v8 + 24 * v13;
      v14 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 == a2)
        goto LABEL_7;
    }
    if ((v5 & 1) == 0)
    {
      v8 = *(_QWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      goto LABEL_4;
    }
    v11 = a1 + 120;
  }
LABEL_7:
  v15 = *(_OWORD *)(v11 + 8);
  *(_QWORD *)v11 = -8192;
  v16 = *(_DWORD *)(a1 + 16);
  v17 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) = v16 - 2;
  *(_DWORD *)(a1 + 20) = v17;
  v29 = a3;
  v30[0] = v15;
  v30[1] = v15;
  if ((v16 & 1) != 0)
  {
    v18 = 4;
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 32);
    if (!v18)
    {
      v22 = 0;
      return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::InsertIntoBucket<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>(result, v22, &v29, v30);
    }
    v7 = *(_QWORD *)(a1 + 24);
  }
  v19 = (v18 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v20 = (_QWORD *)(v7 + 24 * v19);
  v21 = *v20;
  if (*v20 != a3)
  {
    v25 = 0;
    v26 = 1;
    while (v21 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v21 == -8192;
      if (v27)
        v25 = v20;
      v28 = v19 + v26++;
      v19 = v28 & (v18 - 1);
      v20 = (_QWORD *)(v7 + 24 * v19);
      v21 = *v20;
      if (*v20 == a3)
        return result;
    }
    if (v25)
      v22 = (uint64_t)v25;
    else
      v22 = (uint64_t)v20;
    return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::InsertIntoBucket<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>(result, v22, &v29, v30);
  }
  return result;
}

void llvm::ReplaceableMetadataImpl::SalvageDebugInfo(llvm::ReplaceableMetadataImpl *this, const llvm::Constant *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::ReplaceableMetadataImpl *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  llvm::ValueAsMetadata *v35;
  llvm::Value *v36;
  llvm::ValueAsMetadata *v37;
  BOOL v38;
  llvm::MDNode *v39;
  int v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[25];

  v44[24] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 8) == 0)
    return;
  v3 = ***(_QWORD ***)this;
  v4 = *(_QWORD *)(v3 + 432);
  v5 = *(unsigned int *)(v3 + 448);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((this >> 4) ^ (this >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(llvm::ReplaceableMetadataImpl **)v7;
    if (*(llvm::ReplaceableMetadataImpl **)v7 == this)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (llvm::ReplaceableMetadataImpl *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(llvm::ReplaceableMetadataImpl **)(v4 + 16 * v6);
      if (v8 == this)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_9;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_9:
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_DWORD *)(v11 + 24);
  if (v12 > 1)
  {
    if ((v12 & 1) == 0)
    {
      v14 = *(_QWORD **)(v11 + 32);
      v16 = *(_DWORD *)(v11 + 40);
      v17 = &v14[3 * v16];
      if (v16)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = (_QWORD *)(v11 + 32);
    v17 = (_QWORD *)(v11 + 128);
LABEL_16:
    while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v14 += 3;
      if (v14 == v17)
      {
        v14 = v17;
        break;
      }
    }
    if ((*(_DWORD *)(v11 + 24) & 1) == 0)
      goto LABEL_23;
LABEL_20:
    v18 = v11 + 128;
    goto LABEL_24;
  }
  if (v12)
  {
    v13 = v11 + 32;
    v14 = (_QWORD *)(v11 + 128);
    v15 = 4;
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 32);
    v15 = *(_DWORD *)(v11 + 40);
    v14 = (_QWORD *)(v13 + 24 * v15);
  }
  v17 = (_QWORD *)(v13 + 24 * v15);
  if (v12)
    goto LABEL_20;
LABEL_23:
  v18 = *(_QWORD *)(v11 + 32) + 24 * *(unsigned int *)(v11 + 40);
LABEL_24:
  v42 = v44;
  v43 = 0x800000000;
  if (v14 != (_QWORD *)v18)
  {
    v19 = 0;
    v20 = 1;
    v21 = v14;
    do
    {
      v22 = v19;
      v23 = v20;
      v24 = v21 + 3;
      v21 = v17;
      if (v24 != v17)
      {
        v21 = v24;
        while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v21 += 3;
          if (v21 == v17)
          {
            v21 = v17;
            break;
          }
        }
      }
      ++v19;
      v20 = v23 + 1;
    }
    while (v21 != (_QWORD *)v18);
    if (v22 < 8)
    {
      v25 = 0;
      v26 = v44;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, v22 + 1, 24);
      v25 = v43;
      v26 = v42;
    }
    v27 = &v26[3 * v25];
    do
    {
      v28 = *(_OWORD *)v14;
      v27[2] = v14[2];
      *(_OWORD *)v27 = v28;
      v29 = v14 + 3;
      v14 = v17;
      if (v29 != v17)
      {
        v14 = v29;
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v14 += 3;
          if (v14 == v17)
          {
            v14 = v17;
            break;
          }
        }
      }
      v27 += 3;
    }
    while (v14 != (_QWORD *)v18);
    v30 = v43;
    v31 = v42;
    LODWORD(v43) = v43 + v19;
    if ((_DWORD)v43)
    {
      v32 = 24 * (v30 + v23);
      v33 = (char *)v42 + 8;
      do
      {
        v38 = *v33 >= 4uLL && (*v33 & 3) == 1;
        v39 = (llvm::MDNode *)(*v33 & 0xFFFFFFFFFFFFFFFCLL);
        if (v38 && v39 != 0)
        {
          v41 = *(unsigned __int8 *)v39;
          if ((v41 - 9) < 0x16 || (v41 - 33) <= 2)
          {
            v34 = *(v33 - 1);
            v35 = (llvm::ValueAsMetadata *)llvm::UndefValue::get(*(llvm::UndefValue **)this, a2);
            v37 = llvm::ValueAsMetadata::get(v35, v36);
            llvm::MDNode::handleChangedOperand(v39, v34, v37);
          }
        }
        v33 += 3;
        v32 -= 24;
      }
      while (v32);
      v31 = v42;
    }
    if (v31 != v44)
      free(v31);
  }
}

void llvm::MDNode::handleChangedOperand(llvm::MDNode *this, unint64_t a2, llvm::Metadata *a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  _QWORD *v12;
  llvm::Metadata *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  llvm::MDNode *v19;
  int v20;
  llvm::Metadata *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v27;

  v6 = (_QWORD *)((char *)this - 16);
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
  {
    v9 = (char *)this + 1;
    v7 = (_QWORD *)*((_QWORD *)this - 4);
    v8 = (a2 - (unint64_t)v7) >> 3;
    if ((*((_BYTE *)this + 1) & 0x7F) != 0)
      goto LABEL_3;
  }
  else
  {
    v7 = &v6[-((v5 >> 2) & 0xF)];
    v8 = (a2 - (unint64_t)v7) >> 3;
    v9 = (char *)this + 1;
    if ((*((_BYTE *)this + 1) & 0x7F) != 0)
    {
LABEL_3:
      v10 = (unsigned __int8 **)&v7[v8];
      if (*v10)
        llvm::MetadataTracking::untrack((uint64_t)&v7[v8], *v10);
      *v10 = (unsigned __int8 *)a3;
      if (a3)
        llvm::MetadataTracking::track((uint64_t)v10, (unsigned __int8 *)a3, 1);
      return;
    }
  }
  llvm::MDNode::eraseFromStore(this);
  v11 = *((_QWORD *)this - 2);
  if ((v11 & 2) != 0)
    v12 = (_QWORD *)*((_QWORD *)this - 4);
  else
    v12 = &v6[-((v11 >> 2) & 0xF)];
  v13 = (llvm::Metadata *)v12[v8];
  v14 = (unsigned __int8 **)&v12[v8];
  v15 = *((_BYTE *)this + 1);
  if (*v14)
    llvm::MetadataTracking::untrack((uint64_t)v14, *v14);
  *v14 = (unsigned __int8 *)a3;
  if (a3)
  {
    if ((v15 & 0x7F) != 0)
      v16 = 1;
    else
      v16 = (unint64_t)this | 1;
    llvm::MetadataTracking::track((uint64_t)v14, (unsigned __int8 *)a3, v16);
  }
  if (a3 == this || !a3 && v13 && *(_BYTE *)v13 == 1)
  {
    if ((*v9 & 0x7F) == 2 || *((_DWORD *)this - 2))
    {
      *((_DWORD *)this - 2) = 0;
      v17 = *((_QWORD *)this + 1);
      if ((v17 & 4) != 0)
      {
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)this + 1) = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
        llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v17 & 0xFFFFFFFFFFFFFFF8), 1);
        if ((*(_BYTE *)(v18 + 16) & 1) == 0)
          llvm::deallocate_buffer(*(llvm **)(v18 + 24), (void *)(24 * *(unsigned int *)(v18 + 32)));
        operator delete((void *)v18);
      }
    }
    goto LABEL_33;
  }
  llvm::MDNode::uniquify(this);
  v20 = *((_BYTE *)this + 1) & 0x7F;
  if (v19 == this)
  {
    if (v20 == 2 || *((_DWORD *)this - 2))
      llvm::MDNode::resolveAfterOperandChange(this, v13, a3);
  }
  else
  {
    v21 = v19;
    if (v20 != 2 && !*((_DWORD *)this - 2))
    {
LABEL_33:
      llvm::MDNode::storeDistinctInContext(this);
      return;
    }
    if ((*v6 & 2) != 0)
      v22 = *((_DWORD *)this - 6);
    else
      v22 = (*v6 >> 6) & 0xF;
    if (v22)
    {
      v23 = 0;
      v24 = 8 * v22;
      while ((*v6 & 2) != 0)
      {
        v25 = (unsigned __int8 **)(*((_QWORD *)this - 4) + v23);
        v26 = *v25;
        if (*v25)
          goto LABEL_46;
LABEL_41:
        *v25 = 0;
        v23 += 8;
        if (v24 == v23)
          goto LABEL_47;
      }
      v25 = (unsigned __int8 **)&v6[v23 / 8 - ((*v6 >> 2) & 0xFLL)];
      v26 = *v25;
      if (!*v25)
        goto LABEL_41;
LABEL_46:
      llvm::MetadataTracking::untrack((uint64_t)v25, v26);
      goto LABEL_41;
    }
LABEL_47:
    v27 = *((_QWORD *)this + 1);
    if ((v27 & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v27 & 0xFFFFFFFFFFFFFFF8), v21);
    llvm::MDNode::deleteAsSubclass(this);
  }
}

llvm::ValueAsMetadata *llvm::ValueAsMetadata::get(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  llvm::ValueAsMetadata **v8;
  llvm::ValueAsMetadata *v9;
  llvm::ValueAsMetadata **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::ValueAsMetadata *v14;
  unsigned int v16;
  llvm::ValueAsMetadata *v17;
  llvm::ValueAsMetadata *v18;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  llvm::ValueAsMetadata *v25;
  llvm::ValueAsMetadata **v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v4 = *(_QWORD *)DesiredBytecodeVersion;
  v5 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 448);
  if (!v5)
    goto LABEL_29;
  v6 = *(_QWORD *)(v4 + 432);
  v7 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::ValueAsMetadata **)(v6 + 16 * v7);
  v9 = *v8;
  if (*v8 == this)
    goto LABEL_17;
  v10 = 0;
  v11 = 1;
  while (v9 != (llvm::ValueAsMetadata *)-4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == (llvm::ValueAsMetadata *)-8192;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & (v5 - 1);
    v8 = (llvm::ValueAsMetadata **)(v6 + 16 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_17;
  }
  if (v10)
    v8 = v10;
  v21 = *(_DWORD *)(v4 + 440);
  if (4 * v21 + 4 < 3 * v5)
  {
    if (v5 + ~v21 - *(_DWORD *)(v4 + 444) > v5 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_29:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4 + 432, v5);
  v22 = *(_QWORD *)(v4 + 432);
  v23 = *(_DWORD *)(v4 + 448) - 1;
  v24 = v23 & ((this >> 4) ^ (this >> 9));
  v8 = (llvm::ValueAsMetadata **)(v22 + 16 * v24);
  v25 = *v8;
  if (*v8 == this)
  {
LABEL_31:
    ++*(_DWORD *)(v4 + 440);
    if (this == (llvm::ValueAsMetadata *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != (llvm::ValueAsMetadata *)-4096)
  {
    if (v26)
      v28 = 0;
    else
      v28 = v25 == (llvm::ValueAsMetadata *)-8192;
    if (v28)
      v26 = v8;
    v29 = v24 + v27++;
    v24 = v29 & v23;
    v8 = (llvm::ValueAsMetadata **)(v22 + 16 * v24);
    v25 = *v8;
    if (*v8 == this)
      goto LABEL_31;
  }
  if (v26)
    v8 = v26;
LABEL_14:
  v14 = *v8;
  ++*(_DWORD *)(v4 + 440);
  if (v14 != (llvm::ValueAsMetadata *)-4096)
LABEL_15:
    --*(_DWORD *)(v4 + 444);
LABEL_16:
  *v8 = this;
  v8[1] = 0;
LABEL_17:
  if (v8[1])
    return v8[1];
  *((_DWORD *)this + 5) |= 0x8000000u;
  v16 = *((unsigned __int8 *)this + 16);
  v17 = (llvm::ValueAsMetadata *)operator new(0x88uLL);
  v18 = v17;
  if (v16 > 0x14 || this == 0)
    v20 = 2;
  else
    v20 = 1;
  *(_BYTE *)v17 = v20;
  *((_BYTE *)v17 + 1) = 0;
  *((_WORD *)v17 + 1) = 0;
  *((_DWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 1) = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 1;
  *((_QWORD *)v18 + 4) = -4096;
  *((_QWORD *)v18 + 7) = -4096;
  *((_QWORD *)v18 + 10) = -4096;
  *((_QWORD *)v18 + 13) = -4096;
  *((_QWORD *)v18 + 16) = this;
  v8[1] = v18;
  return v18;
}

void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::ReplaceableMetadataImpl *this, llvm::Metadata *a2)
{
  unsigned int v2;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unint64_t v31;
  llvm::MetadataAsValue *v32;
  int v33;
  char *v34;
  int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[25];

  v46[24] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 4);
  if (v2 < 2)
    return;
  v5 = (char *)this + 24;
  if ((v2 & 1) != 0)
  {
    v8 = (char *)this + 120;
    v6 = (char *)this + 24;
LABEL_6:
    while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v6 += 24;
      if (v6 == v8)
      {
        v6 = v8;
        break;
      }
    }
    if ((v2 & 1) != 0)
    {
      v9 = (char *)this + 120;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = (char *)*((_QWORD *)this + 3);
    v7 = *((_DWORD *)this + 8);
    v8 = &v6[24 * v7];
    if (v7)
      goto LABEL_6;
  }
  v9 = (char *)(*((_QWORD *)this + 3) + 24 * *((unsigned int *)this + 8));
LABEL_12:
  v44 = v46;
  v45 = 0x800000000;
  if (v6 == v9)
  {
    v16 = 0;
    v17 = v46;
  }
  else
  {
    v10 = 0;
    v11 = v6;
    do
    {
      v12 = v10;
      v13 = v11 + 24;
      v11 = v8;
      if (v13 != v8)
      {
        v11 = v13;
        while ((*(_QWORD *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 24;
          if (v11 == v8)
          {
            v11 = v8;
            break;
          }
        }
      }
      ++v10;
    }
    while (v11 != v9);
    if (v12 < 8)
    {
      v14 = 0;
      v15 = v46;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v12 + 1, 24);
      v14 = v45;
      v15 = v44;
    }
    v18 = &v15[3 * v14];
    do
    {
      v19 = *(_OWORD *)v6;
      v18[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v18 = v19;
      v20 = v6 + 24;
      v6 = v8;
      if (v20 != v8)
      {
        v6 = v20;
        while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 24;
          if (v6 == v8)
          {
            v6 = v8;
            break;
          }
        }
      }
      v18 += 3;
    }
    while (v6 != v9);
    v16 = v45 + v10;
    v17 = v44;
  }
  LODWORD(v45) = v16;
  v21 = 126 - 2 * __clz(v16);
  if (v16)
    v22 = v21;
  else
    v22 = 0;
  std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>((unint64_t)v17, &v17[3 * v16], v22, 1);
  v23 = (char *)v44;
  if ((_DWORD)v45)
  {
    v24 = (char *)v44 + 24 * v45;
    while (1)
    {
      v25 = *(_QWORD **)v23;
      if ((*((_BYTE *)this + 16) & 1) != 0)
      {
        v26 = 4;
        v27 = v5;
      }
      else
      {
        v26 = *((_DWORD *)this + 8);
        if (!v26)
          goto LABEL_38;
        v27 = (char *)*((_QWORD *)this + 3);
      }
      v28 = v26 - 1;
      v29 = v28 & ((v25 >> 4) ^ (v25 >> 9));
      v30 = *(_QWORD **)&v27[24 * v29];
      if (v30 != v25)
      {
        v40 = 1;
        while (v30 != (_QWORD *)-4096)
        {
          v41 = v29 + v40++;
          v29 = v41 & v28;
          v30 = *(_QWORD **)&v27[24 * v29];
          if (v30 == v25)
            goto LABEL_44;
        }
        goto LABEL_38;
      }
LABEL_44:
      v31 = *((_QWORD *)v23 + 1);
      if (v31 <= 3)
      {
        *v25 = a2;
        if (a2)
          llvm::MetadataTracking::track((uint64_t)v25, (unsigned __int8 *)a2, 1);
        if ((*((_BYTE *)this + 16) & 1) != 0)
        {
          v33 = 4;
          v34 = v5;
LABEL_54:
          v35 = v33 - 1;
          v36 = ((*(_QWORD *)v23 >> 4) ^ (*(_QWORD *)v23 >> 9)) & v35;
          v37 = &v34[24 * v36];
          v38 = *(_QWORD *)v37;
          if (*(_QWORD *)v23 == *(_QWORD *)v37)
          {
LABEL_55:
            *(_QWORD *)v37 = -8192;
            v39 = *((_DWORD *)this + 5) + 1;
            *((_DWORD *)this + 4) -= 2;
            *((_DWORD *)this + 5) = v39;
          }
          else
          {
            v42 = 1;
            while (v38 != -4096)
            {
              v43 = v36 + v42++;
              v36 = v43 & v35;
              v37 = &v34[24 * v36];
              v38 = *(_QWORD *)v37;
              if (*(_QWORD *)v23 == *(_QWORD *)v37)
                goto LABEL_55;
            }
          }
          goto LABEL_38;
        }
        v33 = *((_DWORD *)this + 8);
        if (v33)
        {
          v34 = (char *)*((_QWORD *)this + 3);
          goto LABEL_54;
        }
      }
      else if ((*((_QWORD *)v23 + 1) & 3) == 2)
      {
        llvm::DPValue::handleChangedLocation((v31 & 0xFFFFFFFFFFFFFFFCLL) - 16, (uint64_t)a2);
      }
      else
      {
        v32 = (llvm::MetadataAsValue *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v31 & 3) != 0)
          __asm { BR              X9 }
        llvm::MetadataAsValue::handleChangedMetadata(v32, a2);
      }
LABEL_38:
      v23 += 24;
      if (v23 == v24)
      {
        v23 = (char *)v44;
        break;
      }
    }
  }
  if (v23 != (char *)v46)
    free(v23);
}

void llvm::ReplaceableMetadataImpl::resolveAllUses(llvm::ReplaceableMetadataImpl *this, char a2)
{
  unsigned int v2;
  char *v3;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unsigned __int8 *v46;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[25];

  v54[24] = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 16;
  v2 = *((_DWORD *)this + 4);
  if (v2 < 2)
    return;
  if ((a2 & 1) == 0)
  {
    if ((v2 & 1) != 0)
    {
      v12 = (char *)this + 24;
      v13 = (char *)this + 120;
      v14 = 72;
    }
    else
    {
      v9 = (2 * v2) & 0xFFFFFFFC;
      v10 = *((_DWORD *)this + 8);
      if (v9 < v10 && v10 >= 0x41)
      {
        llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::shrink_and_clear((char *)this + 16);
        return;
      }
      if (!v10)
        goto LABEL_57;
      v12 = (char *)*((_QWORD *)this + 3);
      v13 = &v12[24 * v10];
      v14 = v13 - v12 - 24;
      if (v14 < 0x18)
      {
        v15 = (char *)*((_QWORD *)this + 3);
        do
        {
LABEL_55:
          *(_QWORD *)v15 = -4096;
          v15 += 24;
        }
        while (v15 != v13);
LABEL_56:
        v10 = *(_DWORD *)v3 & 1;
LABEL_57:
        *((_DWORD *)this + 4) = v10;
        *((_DWORD *)this + 5) = 0;
        return;
      }
    }
    v35 = v14 / 0x18 + 1;
    v15 = &v12[24 * (v35 & 0x1FFFFFFFFFFFFFFELL)];
    v36 = v35 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)v12 = -4096;
      *((_QWORD *)v12 + 3) = -4096;
      v12 += 48;
      v36 -= 2;
    }
    while (v36);
    if (v35 == (v35 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_56;
    goto LABEL_55;
  }
  v5 = (char *)this + 24;
  if ((v2 & 1) == 0)
  {
    v6 = (char *)*((_QWORD *)this + 3);
    v7 = *((_DWORD *)this + 8);
    v8 = &v6[24 * v7];
    if (v7)
      goto LABEL_11;
LABEL_15:
    v11 = (char *)(*((_QWORD *)this + 3) + 24 * *((unsigned int *)this + 8));
    goto LABEL_19;
  }
  v8 = (char *)this + 120;
  v6 = (char *)this + 24;
LABEL_11:
  while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v6 += 24;
    if (v6 == v8)
    {
      v6 = v8;
      break;
    }
  }
  if ((v2 & 1) == 0)
    goto LABEL_15;
  v11 = (char *)this + 120;
LABEL_19:
  v52 = v54;
  v53 = 0x800000000;
  if (v6 == v11)
  {
    v22 = 0;
    v23 = v54;
  }
  else
  {
    v16 = 0;
    v17 = v6;
    do
    {
      v18 = v16;
      v19 = v17 + 24;
      v17 = v8;
      if (v19 != v8)
      {
        v17 = v19;
        while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v17 += 24;
          if (v17 == v8)
          {
            v17 = v8;
            break;
          }
        }
      }
      ++v16;
    }
    while (v17 != v11);
    if (v18 < 8)
    {
      v20 = 0;
      v21 = v54;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, v18 + 1, 24);
      v20 = v53;
      v21 = v52;
    }
    v24 = &v21[3 * v20];
    do
    {
      v25 = *(_OWORD *)v6;
      v24[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)v24 = v25;
      v26 = v6 + 24;
      v6 = v8;
      if (v26 != v8)
      {
        v6 = v26;
        while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 24;
          if (v6 == v8)
          {
            v6 = v8;
            break;
          }
        }
      }
      v24 += 3;
    }
    while (v6 != v11);
    v22 = v53 + v16;
    v23 = v52;
  }
  LODWORD(v53) = v22;
  v27 = 126 - 2 * __clz(v22);
  if (v22)
    v28 = v27;
  else
    v28 = 0;
  std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>((unint64_t)v23, &v23[3 * v22], v28, 1);
  v29 = *(_DWORD *)v3;
  if (*(_DWORD *)v3 <= 1u && !*((_DWORD *)this + 5))
    goto LABEL_66;
  if ((v29 & 1) != 0)
  {
    v32 = (char *)this + 120;
    v33 = 72;
    goto LABEL_60;
  }
  v30 = (2 * v29) & 0xFFFFFFFC;
  v31 = *((_DWORD *)this + 8);
  if (v30 >= v31 || v31 < 0x41)
  {
    if (!v31)
    {
LABEL_65:
      *((_DWORD *)this + 4) = v31;
      *((_DWORD *)this + 5) = 0;
      goto LABEL_66;
    }
    v5 = *(char **)v5;
    v32 = &v5[24 * v31];
    v33 = v32 - v5 - 24;
    if (v33 < 0x18)
    {
      v34 = v5;
      do
      {
LABEL_63:
        *(_QWORD *)v34 = -4096;
        v34 += 24;
      }
      while (v34 != v32);
LABEL_64:
      v31 = *(_DWORD *)v3 & 1;
      goto LABEL_65;
    }
LABEL_60:
    v37 = v33 / 0x18 + 1;
    v34 = &v5[24 * (v37 & 0x1FFFFFFFFFFFFFFELL)];
    v38 = v37 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)v5 = -4096;
      *((_QWORD *)v5 + 3) = -4096;
      v5 += 48;
      v38 -= 2;
    }
    while (v38);
    if (v37 == (v37 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_64;
    goto LABEL_63;
  }
  llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::shrink_and_clear(v3);
LABEL_66:
  v39 = v52;
  if ((_DWORD)v53)
  {
    v40 = 24 * v53;
    v41 = (unint64_t *)((char *)v52 + 8);
    do
    {
      v43 = *v41;
      v41 += 3;
      v42 = v43;
      v44 = v43 & 3;
      v45 = v43 >= 4 && v44 == 1;
      v46 = (unsigned __int8 *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
      if (v45 && v46 != 0 && *v46 - 5 <= 0x1E && (v46[1] & 0x7F) != 2)
      {
        v48 = *((_DWORD *)v46 - 2);
        if (v48)
        {
          v49 = v48 - 1;
          *((_DWORD *)v46 - 2) = v49;
          if (!v49)
          {
            v50 = *((_QWORD *)v46 + 1);
            if ((v50 & 4) != 0)
            {
              v51 = v50 & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)v46 + 1) = *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
              llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v50 & 0xFFFFFFFFFFFFFFF8), 1);
              if ((*(_BYTE *)(v51 + 16) & 1) == 0)
                llvm::deallocate_buffer(*(llvm **)(v51 + 24), (void *)(24 * *(unsigned int *)(v51 + 32)));
              operator delete((void *)v51);
            }
          }
        }
      }
      v40 -= 24;
    }
    while (v40);
    v39 = v52;
  }
  if (v39 != v54)
    free(v39);
}

void llvm::ValueAsMetadata::handleDeletion(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ValueAsMetadata *v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = ***(int32x2_t ****)this;
  v3 = v2[54];
  v4 = v2[56].u32[0];
  if (!(_DWORD)v4)
  {
LABEL_7:
    v6 = *(_QWORD *)&v3 + 16 * v4;
    goto LABEL_8;
  }
  LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = *(_QWORD *)&v3 + 16 * v5;
  v7 = *(llvm::ValueAsMetadata **)v6;
  if (*(llvm::ValueAsMetadata **)v6 != this)
  {
    v8 = 1;
    while (v7 != (llvm::ValueAsMetadata *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm::ValueAsMetadata **)(*(_QWORD *)&v3 + 16 * v5);
      if (v7 == this)
      {
        v6 = *(_QWORD *)&v3 + 16 * v5;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v6 != *(_QWORD *)&v3 + 16 * v4)
  {
    v10 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)v6 = -8192;
    v2[55] = vadd_s32(v2[55], (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v10 + 8), 0);
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 24) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v10 + 32), (void *)(24 * *(unsigned int *)(v10 + 40)));
      operator delete((void *)v10);
    }
  }
}

void llvm::ValueAsMetadata::handleRAUW(Value *this, llvm::Value *a2, llvm::Value *a3)
{
  int32x2_t *v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Value *v10;
  int v11;
  int v12;
  char *v13;
  unsigned int v14;
  llvm::ValueAsMetadata *v15;
  llvm::ReplaceableMetadataImpl *v16;
  uint64_t LocalFunctionMetadata;
  unsigned int v18;
  int32x2_t v19;
  unsigned int v20;
  unsigned int v21;
  llvm::Value **v22;
  llvm::Value *v23;
  llvm::Value **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  llvm::Value *v28;
  llvm::Metadata *v29;
  __int32 v30;
  int32x2_t v31;
  int v32;
  unsigned int v33;
  llvm::Value *v34;
  llvm::Value **v35;
  int v36;
  BOOL v37;
  unsigned int v38;

  v5 = **(int32x2_t ***)this->impl;
  v6 = v5[54];
  v7 = v5[56].u32[0];
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
    v9 = *(_QWORD *)&v6 + 16 * v8;
    v10 = *(Value **)v9;
    if (*(Value **)v9 == this)
      goto LABEL_8;
    v11 = 1;
    while (v10 != (Value *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(Value **)(*(_QWORD *)&v6 + 16 * v8);
      if (v10 == this)
      {
        v9 = *(_QWORD *)&v6 + 16 * v8;
        goto LABEL_8;
      }
    }
  }
  v9 = *(_QWORD *)&v6 + 16 * v7;
LABEL_8:
  if (v9 == *(_QWORD *)&v6 + 16 * v7)
    return;
  HIDWORD(this[2].impl) &= ~0x8000000u;
  v13 = *(char **)(v9 + 8);
  *(_QWORD *)v9 = -8192;
  v5[55] = vadd_s32(v5[55], (int32x2_t)0x1FFFFFFFFLL);
  v14 = *((unsigned __int8 *)a2 + 16);
  if (*v13 != 2)
  {
    if (v14 < 0x15)
      goto LABEL_19;
LABEL_14:
    v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
    v15 = 0;
    goto LABEL_15;
  }
  if (a2 && v14 <= 0x14)
  {
    v15 = llvm::ValueAsMetadata::get(a2, a2);
    v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
LABEL_15:
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v16, v15);
    goto LABEL_37;
  }
  if (getLocalFunctionMetadata(this))
  {
    if (getLocalFunctionMetadata((Value *)a2))
    {
      LocalFunctionMetadata = getLocalFunctionMetadata(this);
      if (LocalFunctionMetadata != getLocalFunctionMetadata((Value *)a2))
        goto LABEL_14;
    }
  }
LABEL_19:
  v18 = v5[56].u32[0];
  if (!v18)
    goto LABEL_45;
  v19 = v5[54];
  v20 = v18 - 1;
  v21 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = (llvm::Value **)(*(_QWORD *)&v19 + 16 * v21);
  v23 = *v22;
  if (*v22 != a2)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != (llvm::Value *)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == (llvm::Value *)-8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (llvm::Value **)(*(_QWORD *)&v19 + 16 * (v27 & v20));
      v23 = *v22;
      if (*v22 == a2)
        goto LABEL_35;
    }
    if (v24)
      v22 = v24;
    v30 = v5[55].i32[0];
    if (4 * v30 + 4 < 3 * v18)
    {
      if (v18 + ~v30 - v5[55].i32[1] > v18 >> 3)
        goto LABEL_32;
      goto LABEL_46;
    }
LABEL_45:
    v18 *= 2;
LABEL_46:
    llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v5[54], v18);
    v31 = v5[54];
    v32 = v5[56].i32[0] - 1;
    v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
    v22 = (llvm::Value **)(*(_QWORD *)&v31 + 16 * v33);
    v34 = *v22;
    if (*v22 == a2)
    {
LABEL_47:
      ++v5[55].i32[0];
      if (a2 == (llvm::Value *)-4096)
        goto LABEL_34;
      goto LABEL_33;
    }
    v35 = 0;
    v36 = 1;
    while (v34 != (llvm::Value *)-4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v34 == (llvm::Value *)-8192;
      if (v37)
        v35 = v22;
      v38 = v33 + v36++;
      v33 = v38 & v32;
      v22 = (llvm::Value **)(*(_QWORD *)&v31 + 16 * (v38 & v32));
      v34 = *v22;
      if (*v22 == a2)
        goto LABEL_47;
    }
    if (v35)
      v22 = v35;
LABEL_32:
    v28 = *v22;
    ++v5[55].i32[0];
    if (v28 == (llvm::Value *)-4096)
    {
LABEL_34:
      *v22 = a2;
      v22[1] = 0;
      goto LABEL_35;
    }
LABEL_33:
    --v5[55].i32[1];
    goto LABEL_34;
  }
LABEL_35:
  v29 = v22[1];
  if (!v29)
  {
    *((_DWORD *)a2 + 5) |= 0x8000000u;
    *((_QWORD *)v13 + 16) = a2;
    v22[1] = (llvm::Value *)v13;
    return;
  }
  llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v13 + 8), v29);
  if (!v13)
    return;
LABEL_37:
  if ((v13[24] & 1) == 0)
    llvm::deallocate_buffer(*((llvm **)v13 + 4), (void *)(24 * *((unsigned int *)v13 + 10)));
  operator delete(v13);
}

uint64_t getLocalFunctionMetadata(Value *a1)
{
  ValueImpl *v1;
  uint64_t result;
  ValueImpl *impl;
  mlir::BytecodeWriterConfig *v4;
  uint64_t DesiredBytecodeVersion;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  mlir::BytecodeWriterConfig *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  ValueImpl *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a1 || LOBYTE(a1[2].impl) != 21)
  {
    impl = a1[5].impl;
    if (!impl)
      return 0;
    v4 = (mlir::BytecodeWriterConfig *)*((_QWORD *)impl + 8);
    if (!v4 || (*((_BYTE *)v4 + 23) & 0x20) == 0)
      return 0;
    DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(v4);
    v6 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
    v7 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
    if (v7)
    {
      v8 = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v9 = v6 + 40 * v8;
      v10 = *(mlir::BytecodeWriterConfig **)v9;
      if (*(mlir::BytecodeWriterConfig **)v9 == v4)
        goto LABEL_28;
      v11 = 1;
      while (v10 != (mlir::BytecodeWriterConfig *)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v9 = v6 + 40 * v8;
        v10 = *(mlir::BytecodeWriterConfig **)v9;
        if (*(mlir::BytecodeWriterConfig **)v9 == v4)
          goto LABEL_28;
      }
    }
    v9 = v6 + 40 * v7;
LABEL_28:
    v24 = *(unsigned int *)(v9 + 16);
    if ((_DWORD)v24)
    {
      v22 = *(_QWORD *)(v9 + 8);
      v25 = 16 * v24;
      result = 0;
      while (*(_DWORD *)v22)
      {
        v22 += 16;
        v25 -= 16;
        if (!v25)
          return result;
      }
      return *(_QWORD *)(v22 + 8);
    }
    return 0;
  }
  v1 = a1[3].impl;
  if (!v1)
    return 0;
  if ((*((_BYTE *)v1 + 23) & 0x20) == 0)
    return 0;
  v13 = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1[3].impl);
  v14 = *(_QWORD *)(*(_QWORD *)v13 + 2504);
  v15 = *(_DWORD *)(*(_QWORD *)v13 + 2520);
  if (v15)
  {
    v16 = (v15 - 1) & ((v1 >> 4) ^ (v1 >> 9));
    v17 = v14 + 40 * v16;
    v18 = *(ValueImpl **)v17;
    if (*(ValueImpl **)v17 == v1)
      goto LABEL_22;
    v19 = 1;
    while (v18 != (ValueImpl *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v17 = v14 + 40 * v16;
      v18 = *(ValueImpl **)v17;
      if (*(ValueImpl **)v17 == v1)
        goto LABEL_22;
    }
  }
  v17 = v14 + 40 * v15;
LABEL_22:
  v21 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v21)
    return 0;
  v22 = *(_QWORD *)(v17 + 8);
  v23 = 16 * v21;
  while (*(_DWORD *)v22)
  {
    v22 += 16;
    v23 -= 16;
    if (!v23)
      return 0;
  }
  return *(_QWORD *)(v22 + 8);
}

uint64_t llvm::MDString::get(_QWORD *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v3;
  char v4;

  v3 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>(*a1 + 312, a2, a3);
  if (v4)
    *(_QWORD *)(v3 + 16) = v3;
  return v3 + 8;
}

uint64_t *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = v7[1];
      ++v7;
      v8 = v9;
    }
    return v7;
  }
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(a1 + 24), (uint64_t)(a3 + 25), 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, (size_t)a3);
  a3[v12] = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *v7 = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v13 = *v7 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v7[1];
      ++v7;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v7;
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return *((_QWORD *)this + 1) + 24;
}

char *llvm::MDNode::operator new(uint64_t a1, unint64_t a2, int a3)
{
  _BOOL8 v4;
  _BOOL8 v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;

  v4 = a2 > 0xF;
  v5 = a3 != 0;
  if (2 * v5 <= a2)
    v6 = a2;
  else
    v6 = 2 * v5;
  if (a2 >= 0x10)
    v7 = 32;
  else
    v7 = 8 * v6 + 16;
  v8 = (char *)operator new(v7 + a1) + v7;
  v9 = (unint64_t *)(v8 - 16);
  v10 = *((_QWORD *)v8 - 2);
  *((_DWORD *)v8 - 2) = 0;
  v11 = v10 & 0xFFFFFFFFFFFFFFC0;
  v12 = 4 * (v6 & 0xF);
  if (a2 >= 0x10)
    v12 = 8;
  v13 = (v5 || 2 * v4) | (unint64_t)v12 | v11;
  if (a2 >= 0x10)
  {
    *((_QWORD *)v8 - 4) = v9;
    v15 = v8 - 32;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13 & 0xFFFFFFFFFFFFFC3FLL;
    llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>((uint64_t)(v8 - 32), a2);
    return v8;
  }
  else
  {
    *v9 = v13 & 0xFFFFFFFFFFFFFC3FLL | ((a2 & 0xF) << 6);
    if ((v6 & 0xF) != 0)
      bzero(&v9[-(v6 & 0xF)], 8 * (v6 & 0xF));
    return v8;
  }
}

void llvm::MDNode::operator delete(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;

  v2 = (char *)(a1 - 2);
  v3 = *(a1 - 2);
  if ((v3 & 2) != 0)
  {
    v7 = (char *)*(a1 - 4);
    v8 = *((unsigned int *)a1 - 6);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = v7 - 8;
      do
      {
        v11 = *(unsigned __int8 **)&v10[v9];
        if (v11)
          llvm::MetadataTracking::untrack((uint64_t)&v10[v9], v11);
        v9 -= 8;
      }
      while (v9);
      v7 = (char *)*(a1 - 4);
    }
    if (v7 != v2)
      free(v7);
  }
  else
  {
    v4 = (v3 >> 2) & 0xF;
    if (v4)
    {
      v5 = -8 * v4;
      v6 = (unsigned __int8 **)(a1 - 3);
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
        --v6;
        v5 += 8;
      }
      while (v5);
    }
  }
  operator delete((char *)a1 - ((2 * (int)v3) & 0x78) - 16);
}

uint64_t llvm::MDNode::MDNode(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 **v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v33;

  *(_BYTE *)a1 = a3;
  *(_BYTE *)(a1 + 1) = a4 & 0x7F;
  *(_WORD *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  if (!a6)
  {
    LODWORD(v11) = 0;
    if (!a8)
      goto LABEL_29;
    goto LABEL_17;
  }
  v33 = a8;
  v11 = 0;
  v12 = (_QWORD *)(a1 - 16);
  v13 = 8 * a6;
  do
  {
    if ((*v12 & 2) != 0)
    {
      v14 = *(unsigned __int8 **)(a5 + 8 * v11);
      v15 = (unsigned __int8 **)(*(_QWORD *)(a1 - 32) + 8 * v11);
      v16 = *(_BYTE *)(a1 + 1);
      v17 = *v15;
      if (!*v15)
        goto LABEL_9;
LABEL_8:
      llvm::MetadataTracking::untrack((uint64_t)v15, v17);
      goto LABEL_9;
    }
    v14 = *(unsigned __int8 **)(a5 + 8 * v11);
    v15 = (unsigned __int8 **)&v12[v11 - ((*v12 >> 2) & 0xFLL)];
    v16 = *(_BYTE *)(a1 + 1);
    v17 = *v15;
    if (*v15)
      goto LABEL_8;
LABEL_9:
    *v15 = v14;
    if (v14)
    {
      if ((v16 & 0x7F) != 0)
        v18 = 1;
      else
        v18 = a1 | 1;
      llvm::MetadataTracking::track((uint64_t)v15, v14, v18);
    }
    ++v11;
    v13 -= 8;
  }
  while (v13);
  a8 = v33;
  if (v33)
  {
LABEL_17:
    v19 = (_QWORD *)(a1 - 16);
    v20 = 8 * a8;
    while ((*v19 & 2) != 0)
    {
      v21 = *a7;
      v22 = (unsigned __int8 **)(*(_QWORD *)(a1 - 32) + 8 * v11);
      v23 = *(_BYTE *)(a1 + 1);
      v24 = *v22;
      if (*v22)
        goto LABEL_23;
LABEL_24:
      *v22 = v21;
      if (v21)
      {
        if ((v23 & 0x7F) != 0)
          v25 = 1;
        else
          v25 = a1 | 1;
        llvm::MetadataTracking::track((uint64_t)v22, v21, v25);
      }
      ++a7;
      LODWORD(v11) = v11 + 1;
      v20 -= 8;
      if (!v20)
        goto LABEL_29;
    }
    v21 = *a7;
    v22 = (unsigned __int8 **)&v19[v11 - ((*v19 >> 2) & 0xFLL)];
    v23 = *(_BYTE *)(a1 + 1);
    v24 = *v22;
    if (!*v22)
      goto LABEL_24;
LABEL_23:
    llvm::MetadataTracking::untrack((uint64_t)v22, v24);
    goto LABEL_24;
  }
LABEL_29:
  if ((*(_BYTE *)(a1 + 1) & 0x7F) == 0)
  {
    v26 = *(_QWORD *)(a1 - 16);
    if ((v26 & 2) != 0)
    {
      v27 = *(unsigned __int8 ***)(a1 - 32);
      v28 = *(unsigned int *)(a1 - 24);
      v29 = 0;
      if (!*(_DWORD *)(a1 - 24))
        goto LABEL_42;
    }
    else
    {
      v27 = (unsigned __int8 **)(a1 - 16 - 8 * ((v26 >> 2) & 0xF));
      v28 = (v26 >> 6) & 0xF;
      v29 = 0;
      if (!v28)
        goto LABEL_42;
    }
    v30 = 8 * v28;
    do
    {
      v31 = *v27;
      if (*v27)
      {
        if (*v31 - 5 > 0x1E)
          LODWORD(v31) = 0;
        else
          LODWORD(v31) = (v31[1] & 0x7F) == 2 || *((_DWORD *)v31 - 2) != 0;
      }
      v29 += (int)v31;
      ++v27;
      v30 -= 8;
    }
    while (v30);
LABEL_42:
    *(_DWORD *)(a1 - 8) = v29;
  }
  return a1;
}

uint64_t llvm::MDNode::setOperand(uint64_t result, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 **v6;
  char v7;
  unsigned __int8 *v8;
  uint64_t v9;

  v4 = result;
  v5 = *(_QWORD *)(result - 16);
  if ((v5 & 2) != 0)
  {
    v6 = (unsigned __int8 **)(*(_QWORD *)(result - 32) + 8 * a2);
    v7 = *(_BYTE *)(result + 1);
    v8 = *v6;
    if (!*v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = (unsigned __int8 **)(result - 16 - 8 * ((v5 >> 2) & 0xF) + 8 * a2);
  v7 = *(_BYTE *)(result + 1);
  v8 = *v6;
  if (*v6)
LABEL_5:
    result = llvm::MetadataTracking::untrack((uint64_t)v6, v8);
LABEL_6:
  *v6 = a3;
  if (a3)
  {
    if ((v7 & 0x7F) != 0)
      v9 = 1;
    else
      v9 = v4 | 1;
    return llvm::MetadataTracking::track((uint64_t)v6, a3, v9);
  }
  return result;
}

void llvm::MDNode::storeDistinctInContext(llvm::MDNode *this)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  *((_BYTE *)this + 1) = *((_BYTE *)this + 1) & 0x80 | 1;
  v2 = *(unsigned __int8 *)this;
  if ((v2 - 10) >= 0x1A && (v2 - 6) >= 3)
    *((_DWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = *(_QWORD **)v4;
  v6 = *(char **)(*(_QWORD *)v4 + 1240);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 1248);
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = this;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_26;
  }
  v9 = (char *)v5[154];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    abort();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = this;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_24;
    goto LABEL_17;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = this;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_17:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_33;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_33;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v6[-v20];
    v15 -= v20;
    v22 = &v14[8 * v10 - 16];
    v23 = v6 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v6 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v26 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v26;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)v5[154];
  }
LABEL_24:
  v5[154] = v15;
  v5[155] = v8;
  v5[156] = v16;
  if (v6)
    operator delete(v6);
LABEL_26:
  v5[155] = v8;
}

void llvm::MDNode::resolveAfterOperandChange(llvm::MDNode *this, llvm::Metadata *a2, llvm::Metadata *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;

  if (a2
    && *(unsigned __int8 *)a2 - 5 <= 0x1E
    && ((*((_BYTE *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 - 2)))
  {
    if ((!a3
       || *(unsigned __int8 *)a3 - 5 > 0x1E
       || (*((_BYTE *)a3 + 1) & 0x7F) != 2 && !*((_DWORD *)a3 - 2))
      && (*((_BYTE *)this + 1) & 0x7F) != 2)
    {
      v3 = *((_DWORD *)this - 2) - 1;
      *((_DWORD *)this - 2) = v3;
      if (!v3)
      {
        v4 = *((_QWORD *)this + 1);
        if ((v4 & 4) != 0)
        {
          v5 = v4 & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)this + 1) = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
          llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v4 & 0xFFFFFFFFFFFFFFF8), 1);
          if ((*(_BYTE *)(v5 + 16) & 1) == 0)
            llvm::deallocate_buffer(*(llvm **)(v5 + 24), (void *)(24 * *(unsigned int *)(v5 + 32)));
          operator delete((void *)v5);
        }
      }
    }
  }
  else if (a3
         && *(unsigned __int8 *)a3 - 5 <= 0x1E
         && ((*((_BYTE *)a3 + 1) & 0x7F) == 2 || *((_DWORD *)a3 - 2)))
  {
    ++*((_DWORD *)this - 2);
  }
}

void llvm::MDNode::resolveCycles(llvm::MDNode *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  llvm::MDNode **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MDNode *v8;

  if ((*((_BYTE *)this + 1) & 0x7F) == 2 || *((_DWORD *)this - 2))
  {
    *((_DWORD *)this - 2) = 0;
    v2 = *((_QWORD *)this + 1);
    if ((v2 & 4) != 0)
    {
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)this + 1) = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
      llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v2 & 0xFFFFFFFFFFFFFFF8), 1);
      if ((*(_BYTE *)(v3 + 16) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v3 + 24), (void *)(24 * *(unsigned int *)(v3 + 32)));
      operator delete((void *)v3);
    }
    v4 = *((_QWORD *)this - 2);
    if ((v4 & 2) != 0)
    {
      v5 = (llvm::MDNode **)*((_QWORD *)this - 4);
      v6 = *((unsigned int *)this - 6);
      if (!*((_DWORD *)this - 6))
        return;
    }
    else
    {
      v5 = (llvm::MDNode **)((char *)this - 8 * ((v4 >> 2) & 0xF) - 16);
      v6 = (v4 >> 6) & 0xF;
      if (!v6)
        return;
    }
    v7 = 8 * v6;
    do
    {
      v8 = *v5;
      if (*v5
        && *(unsigned __int8 *)v8 - 5 <= 0x1E
        && ((*((_BYTE *)v8 + 1) & 0x7F) == 2 || *((_DWORD *)v8 - 2)))
      {
        llvm::MDNode::resolveCycles(v8);
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
}

void llvm::MDNode::uniquify(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

uint64_t sub_180D0C064(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, __int128 a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v47 = llvm::MDNodeOpsKey::calculateHash((llvm::MDNodeOpsKey *)v45, 0);
  *(_DWORD *)(v45 + 4) = v47;
  v48 = *(_QWORD *)(v45 + 8);
  v49 = (_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
  if ((v48 & 4) != 0)
    v49 = (_QWORD *)*v49;
  v50 = (_QWORD *)*v49;
  *(_QWORD *)(v46 - 96) = v45;
  v51 = *(_QWORD *)(v45 - 16);
  if ((v51 & 2) != 0)
  {
    v52 = *(_QWORD *)(v45 - 32);
    v53 = *(unsigned int *)(v45 - 24);
  }
  else
  {
    v52 = v45 - 16 - 8 * ((v51 >> 2) & 0xF);
    v53 = (v51 >> 6) & 0xF;
  }
  v54 = v50[63];
  v55 = *((unsigned int *)v50 + 130);
  if ((_DWORD)v55)
  {
    v59 = v55 - 1;
    LODWORD(v60) = (v55 - 1) & v47;
    v57 = (uint64_t *)(v54 + 8 * v60);
    v61 = *v57;
    if (*v57 == -8192)
      goto LABEL_27;
    if (v61 == -4096)
    {
LABEL_14:
      v56 = *((unsigned int *)v50 + 130);
      goto LABEL_8;
    }
    if (v47 != *(_DWORD *)(v61 + 4))
      goto LABEL_27;
    v63 = *(_QWORD *)(v61 - 16);
    if ((v63 & 2) != 0)
    {
      if (v53 == *(_DWORD *)(v61 - 24))
      {
        v64 = *(_QWORD **)(v61 - 32);
        goto LABEL_22;
      }
    }
    else if (v53 == ((v63 >> 6) & 0xF))
    {
      v64 = (_QWORD *)(v61 - 16 - 8 * ((v63 >> 2) & 0xF));
LABEL_22:
      if (!v53)
        goto LABEL_9;
      v65 = 8 * v53;
      v66 = (_QWORD *)v52;
      while (*v66 == *v64)
      {
        ++v66;
        ++v64;
        v65 -= 8;
        if (!v65)
          goto LABEL_9;
      }
    }
LABEL_27:
    if (!v53)
    {
      v74 = 1;
      v60 = ((_DWORD)v60 + 1) & v59;
      v75 = *(_QWORD *)(v54 + 8 * v60);
      if (v75 != -4096)
      {
        while (1)
        {
          if (v75 != -8192 && v47 == *(_DWORD *)(v75 + 4))
          {
            v76 = *(_QWORD *)(v75 - 16);
            if ((v76 & 2) != 0)
            {
              if (!*(_DWORD *)(v75 - 24))
              {
LABEL_52:
                v57 = (uint64_t *)(v54 + 8 * v60);
                goto LABEL_9;
              }
            }
            else if ((v76 & 0x3C0) == 0)
            {
              goto LABEL_52;
            }
          }
          ++v74;
          v60 = ((_DWORD)v60 + v74) & v59;
          v75 = *(_QWORD *)(v54 + 8 * v60);
          if (v75 == -4096)
            goto LABEL_14;
        }
      }
      goto LABEL_14;
    }
    v67 = 1;
    while (1)
    {
      while (1)
      {
        do
        {
          do
          {
            v68 = v60 + v67++;
            v60 = v68 & v59;
            v69 = *(_QWORD *)(v54 + 8 * v60);
          }
          while (v69 == -8192);
          if (v69 == -4096)
            goto LABEL_14;
        }
        while (v47 != *(_DWORD *)(v69 + 4));
        v70 = *(_QWORD *)(v69 - 16);
        if ((v70 & 2) != 0)
          break;
        if (v53 == ((v70 >> 6) & 0xF))
        {
          v71 = (_QWORD *)(v69 - 16 - 8 * ((v70 >> 2) & 0xF));
LABEL_37:
          v72 = 8 * v53;
          v73 = (_QWORD *)v52;
          while (*v73 == *v71)
          {
            ++v73;
            ++v71;
            v72 -= 8;
            if (!v72)
              goto LABEL_52;
          }
        }
      }
      if (v53 == *(_DWORD *)(v69 - 24))
      {
        v71 = *(_QWORD **)(v69 - 32);
        goto LABEL_37;
      }
    }
  }
  v56 = 0;
LABEL_8:
  v57 = (uint64_t *)(v54 + 8 * v56);
LABEL_9:
  if (v57 == (uint64_t *)(v54 + 8 * v55) || (v58 = *v57) == 0)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)(v50 + 63), (uint64_t *)(v46 - 96), (uint64_t)&v77);
    return *(_QWORD *)(v46 - 96);
  }
  return v58;
}

void llvm::MDNode::deleteAsSubclass(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

void sub_180D0E38C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  v13 = v12[1];
  if ((v13 & 4) != 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_BYTE *)(v14 + 16) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v14 + 24), (void *)(24 * *(unsigned int *)(v14 + 32)));
      operator delete((void *)v14);
    }
  }
  llvm::MDNode::operator delete(v12);
}

void sub_180D0E3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::MDNode *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  llvm::MDNode::dropAllReferences(v12);
  sub_180D0E38C(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

void sub_180D0E3E0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;

  v13 = *(void **)(v12 + 16);
  if (v13)
  {
    *(_QWORD *)(v12 + 24) = v13;
    operator delete(v13);
  }
  sub_180D0E38C((int)v13, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void llvm::MDNode::dropAllReferences(llvm::MDNode *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  llvm **v21;

  v3 = (_QWORD *)((char *)this - 16);
  v2 = *((_QWORD *)this - 2);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)this - 6);
    if (!v4)
      goto LABEL_12;
    goto LABEL_5;
  }
  v4 = (v2 >> 6) & 0xF;
  if (v4)
  {
LABEL_5:
    v5 = 0;
    v6 = 8 * v4;
    while ((*v3 & 2) != 0)
    {
      v7 = (unsigned __int8 **)(*((_QWORD *)this - 4) + v5);
      v8 = *v7;
      if (*v7)
        goto LABEL_11;
LABEL_6:
      *v7 = 0;
      v5 += 8;
      if (v6 == v5)
        goto LABEL_12;
    }
    v7 = (unsigned __int8 **)&v3[v5 / 8 - ((*v3 >> 2) & 0xFLL)];
    v8 = *v7;
    if (!*v7)
      goto LABEL_6;
LABEL_11:
    llvm::MetadataTracking::untrack((uint64_t)v7, v8);
    goto LABEL_6;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 4) == 0)
    return;
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v11 = (char *)(v10 + 16);
  v12 = *(_DWORD *)(v10 + 16);
  if (v12 >= 2)
  {
    if ((v12 & 1) != 0)
    {
      v15 = (char *)(v10 + 24);
      v16 = (char *)(v10 + 120);
      v17 = 72;
    }
    else
    {
      v13 = (2 * v12) & 0xFFFFFFFC;
      v14 = *(_DWORD *)(v10 + 32);
      if (v13 < v14 && v14 >= 0x41)
      {
        llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::shrink_and_clear(v11);
        goto LABEL_28;
      }
      if (!v14)
      {
LABEL_27:
        *(_DWORD *)(v10 + 16) = v14;
        *(_DWORD *)(v10 + 20) = 0;
        goto LABEL_28;
      }
      v15 = *(char **)(v10 + 24);
      v16 = &v15[24 * v14];
      v17 = v16 - v15 - 24;
      if (v17 < 0x18)
      {
        v18 = *(char **)(v10 + 24);
        do
        {
LABEL_25:
          *(_QWORD *)v18 = -4096;
          v18 += 24;
        }
        while (v18 != v16);
LABEL_26:
        v14 = *(_DWORD *)v11 & 1;
        goto LABEL_27;
      }
    }
    v19 = v17 / 0x18 + 1;
    v18 = &v15[24 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)v15 = -4096;
      *((_QWORD *)v15 + 3) = -4096;
      v15 += 48;
      v20 -= 2;
    }
    while (v20);
    if (v19 == (v19 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_28:
  v21 = (llvm **)(*((_QWORD *)this + 1) & ((uint64_t)(*((_QWORD *)this + 1) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
  *((_QWORD *)this + 1) = (unint64_t)*v21 & 0xFFFFFFFFFFFFFFFBLL;
  if (((_BYTE)v21[2] & 1) == 0)
    llvm::deallocate_buffer(v21[3], (void *)(24 * *((unsigned int *)v21 + 8)));
  operator delete(v21);
}

void llvm::MDNode::eraseFromStore(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

void sub_180D0E628()
{
  uint64_t v0;
  uint64_t v1;
  int32x2_t **v2;
  int32x2_t *v3;
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = (int32x2_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (int32x2_t **)*v2;
  v3 = *v2;
  v4 = v3[65].i32[0];
  if (v4)
  {
    v5 = v3[63];
    v6 = v4 - 1;
    LODWORD(v7) = *(_DWORD *)(v0 + 4) & (v4 - 1);
    v8 = (uint64_t *)(*(_QWORD *)&v5 + 8 * v7);
    v9 = *v8;
    if (*v8 == v0)
    {
LABEL_5:
      *v8 = -8192;
      v3[64] = vadd_s32(v3[64], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 8 * v7);
        if (v9 == v0)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 8 * v7);
          goto LABEL_5;
        }
      }
    }
  }
}

uint64_t llvm::MDTuple::getImpl(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, int a5)
{
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int64x2_t *v33;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _BYTE v54[31];

  if (a4)
  {
    if (a3 <= 2)
      v9 = 2;
    else
      v9 = a3;
    if (a3 >= 0x10)
      v10 = 32;
    else
      v10 = 8 * v9 + 16;
    v11 = (char *)operator new(v10 + 16) + v10;
    v12 = (unint64_t *)(v11 - 4);
    v13 = *((_QWORD *)v11 - 2);
    *(v11 - 2) = 0;
    v14 = v13 & 0xFFFFFFFFFFFFFFC0;
    v15 = 11;
    if (a3 < 0x10)
      v15 = (4 * (v9 & 0xF)) | 1;
    v16 = v14 | v15;
    if (a3 >= 0x10)
    {
      *((_QWORD *)v11 - 4) = v12;
      v24 = v11 - 8;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v16 & 0xFFFFFFFFFFFFFC3FLL;
      llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>((uint64_t)(v11 - 8), a3);
    }
    else
    {
      *v12 = v16 & 0xFFFFFFFFFFFFFC3FLL | ((a3 & 0xF) << 6);
      if ((v9 & 0xF) != 0)
        bzero(&v12[-(v9 & 0xF)], 8 * (v9 & 0xF));
    }
    llvm::MDNode::MDNode((uint64_t)v11, a1, 5, a4, (uint64_t)a2, a3, 0, 0);
    v11[1] = 0;
    if (a4 == 1)
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v11);
    return (uint64_t)v11;
  }
  v18 = llvm::MDNodeOpsKey::calculateHash(a2, a3);
  v19 = v18;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 504);
  v21 = *(unsigned int *)(*(_QWORD *)a1 + 520);
  if ((_DWORD)v21)
  {
    v35 = v21 - 1;
    LODWORD(v36) = (v21 - 1) & v18;
    v23 = (_QWORD *)(v20 + 8 * v36);
    v37 = (_DWORD *)*v23;
    if (*v23 == -8192)
      goto LABEL_53;
    if (v37 == (_DWORD *)-4096)
    {
LABEL_37:
      v22 = *(unsigned int *)(*(_QWORD *)a1 + 520);
      goto LABEL_15;
    }
    if (v18 != v37[1])
      goto LABEL_53;
    if (!a3)
    {
      v40 = *((_QWORD *)v37 - 2);
      if ((v40 & 2) != 0)
      {
        if (!*(v37 - 6))
          goto LABEL_16;
      }
      else if ((v40 & 0x3C0) == 0)
      {
        goto LABEL_16;
      }
      goto LABEL_53;
    }
    v38 = *((_QWORD *)v37 - 2);
    if ((v38 & 2) != 0)
    {
      if (a3 == *(v37 - 6))
      {
        v39 = (_QWORD *)*((_QWORD *)v37 - 4);
LABEL_48:
        v41 = 8 * a3;
        v42 = a2;
        while (*v42 == *v39)
        {
          ++v42;
          ++v39;
          v41 -= 8;
          if (!v41)
            goto LABEL_16;
        }
      }
    }
    else if (a3 == ((v38 >> 6) & 0xF))
    {
      v39 = &v37[-2 * ((v38 >> 2) & 0xF) - 4];
      goto LABEL_48;
    }
LABEL_53:
    if (!a3)
    {
      v50 = 1;
      v36 = ((_DWORD)v36 + 1) & v35;
      v51 = *(_QWORD *)(v20 + 8 * v36);
      if (v51 == -8192)
        goto LABEL_75;
      while (v51 != -4096)
      {
        if (v18 == *(_DWORD *)(v51 + 4))
        {
          v52 = *(_QWORD *)(v51 - 16);
          if ((v52 & 2) != 0)
          {
            if (!*(_DWORD *)(v51 - 24))
            {
LABEL_77:
              v23 = (_QWORD *)(v20 + 8 * v36);
              goto LABEL_16;
            }
          }
          else if ((v52 & 0x3C0) == 0)
          {
            goto LABEL_77;
          }
        }
        do
        {
LABEL_75:
          ++v50;
          v36 = ((_DWORD)v36 + v50) & v35;
          v51 = *(_QWORD *)(v20 + 8 * v36);
        }
        while (v51 == -8192);
      }
      goto LABEL_37;
    }
    v43 = 1;
    while (1)
    {
      while (1)
      {
        do
        {
          do
          {
            v44 = v43 + v36;
            ++v43;
            v36 = v44 & v35;
            v45 = *(_QWORD *)(v20 + 8 * v36);
          }
          while (v45 == -8192);
          if (v45 == -4096)
            goto LABEL_37;
        }
        while (v18 != *(_DWORD *)(v45 + 4));
        v46 = *(_QWORD *)(v45 - 16);
        if ((v46 & 2) != 0)
          break;
        if (a3 == ((v46 >> 6) & 0xF))
        {
          v47 = (_QWORD *)(v45 - 16 - 8 * ((v46 >> 2) & 0xF));
LABEL_63:
          v48 = 8 * a3;
          v49 = a2;
          while (*v49 == *v47)
          {
            ++v49;
            ++v47;
            v48 -= 8;
            if (!v48)
              goto LABEL_77;
          }
        }
      }
      if (a3 == *(_DWORD *)(v45 - 24))
      {
        v47 = *(_QWORD **)(v45 - 32);
        goto LABEL_63;
      }
    }
  }
  v22 = 0;
LABEL_15:
  v23 = (_QWORD *)(v20 + 8 * v22);
LABEL_16:
  if (v23 == (_QWORD *)(v20 + 8 * v21))
  {
    v11 = 0;
  }
  else
  {
    v11 = (_DWORD *)*v23;
    if (*v23)
      return (uint64_t)v11;
  }
  if (a5)
  {
    if (a3 >= 0x10)
      v25 = 32;
    else
      v25 = ((8 * a3) & 0x7FFFFFFF8) + 16;
    v26 = (char *)operator new(v25 + 16) + v25;
    v27 = (unint64_t *)(v26 - 16);
    v28 = *((_QWORD *)v26 - 2);
    *((_DWORD *)v26 - 2) = 0;
    v29 = v28 & 0xFFFFFFFFFFFFFFC0;
    v30 = 4 * (a3 & 0xF);
    if (a3 >= 0x10)
      v30 = 10;
    v31 = v29 | v30;
    if (a3 >= 0x10)
    {
      *((_QWORD *)v26 - 4) = v27;
      v32 = v26 - 32;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = v31 & 0xFFFFFFFFFFFFFC3ELL;
      llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>((uint64_t)(v26 - 32), a3);
    }
    else
    {
      *v27 = v31 & 0xFFFFFFFFFFFFFC3ELL | ((a3 & 0xF) << 6);
      if (a3)
        bzero(&v27[-a3], 8 * a3);
    }
    llvm::MDNode::MDNode((uint64_t)v26, a1, 5, 0, (uint64_t)a2, a3, 0, 0);
    *((_DWORD *)v26 + 1) = v19;
    v33 = (int64x2_t *)(*(_QWORD *)a1 + 504);
    v53 = v26;
    llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, (uint64_t *)&v53, (uint64_t)v54);
    return (uint64_t)v53;
  }
  return (uint64_t)v11;
}

void llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((v3 & 4) != 0)
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v3 & 0xFFFFFFFFFFFFFFF8), 0);
  llvm::MDNode::deleteAsSubclass(this);
}

void llvm::MDNode::replaceOperandWith(llvm::MDNode *this, unsigned int a2, llvm::Metadata *a3)
{
  char *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  char *v8;

  v4 = (char *)this - 16;
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
  {
    if (*(llvm::Metadata **)(*((_QWORD *)this - 4) + 8 * a2) == a3)
      return;
  }
  else if (*(llvm::Metadata **)&v4[8 * a2 + -8 * ((v5 >> 2) & 0xF)] == a3)
  {
    return;
  }
  if ((*((_BYTE *)this + 1) & 0x7F) != 0)
  {
    if ((v5 & 2) != 0)
    {
      v6 = (unsigned __int8 **)(*((_QWORD *)this - 4) + 8 * a2);
      v7 = *v6;
      if (!*v6)
        goto LABEL_14;
    }
    else
    {
      v6 = (unsigned __int8 **)&v4[8 * a2 + -8 * ((v5 >> 2) & 0xF)];
      v7 = *v6;
      if (!*v6)
      {
LABEL_14:
        *v6 = (unsigned __int8 *)a3;
        if (a3)
          llvm::MetadataTracking::track((uint64_t)v6, (unsigned __int8 *)a3, 1);
        return;
      }
    }
    llvm::MetadataTracking::untrack((uint64_t)v6, v7);
    goto LABEL_14;
  }
  if ((v5 & 2) != 0)
    v8 = (char *)*((_QWORD *)this - 4);
  else
    v8 = &v4[-8 * ((v5 >> 2) & 0xF)];
  llvm::MDNode::handleChangedOperand(this, (unint64_t)&v8[8 * a2], a3);
}

llvm::NamedMDNode *llvm::NamedMDNode::NamedMDNode(llvm::NamedMDNode *this, const llvm::Twine *a2)
{
  _QWORD *v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  llvm::Twine::str(a2, (std::string *)((char *)this + 16));
  *((_QWORD *)this + 5) = 0;
  v3 = operator new(0x30uLL);
  *v3 = v3 + 2;
  v3[1] = 0x400000000;
  *((_QWORD *)this + 6) = v3;
  return this;
}

void llvm::NamedMDNode::~NamedMDNode(llvm::NamedMDNode *this)
{
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;

  v2 = (void **)*((_QWORD *)this + 6);
  v3 = (void **)*v2;
  v4 = *((unsigned int *)v2 + 2);
  if (!(_DWORD)v4)
  {
    v8 = v2;
    *((_DWORD *)v2 + 2) = 0;
    v9 = *((unsigned int *)v2 + 2);
    if (!(_DWORD)v9)
      goto LABEL_14;
    goto LABEL_9;
  }
  v5 = 8 * v4;
  v6 = (char *)(v3 - 1);
  do
  {
    v7 = *(unsigned __int8 **)&v6[v5];
    if (v7)
      llvm::MetadataTracking::untrack((uint64_t)&v6[v5], v7);
    v5 -= 8;
  }
  while (v5);
  v8 = (void **)*((_QWORD *)this + 6);
  v3 = (void **)*v8;
  *((_DWORD *)v2 + 2) = 0;
  v9 = *((unsigned int *)v8 + 2);
  if ((_DWORD)v9)
  {
LABEL_9:
    v10 = 8 * v9;
    v11 = (char *)(v3 - 1);
    do
    {
      v12 = *(unsigned __int8 **)&v11[v10];
      if (v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[v10], v12);
      v10 -= 8;
    }
    while (v10);
    v3 = (void **)*v8;
  }
LABEL_14:
  if (v3 != v8 + 2)
    free(v3);
  operator delete(v8);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 6) + 8);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this, unsigned int a2)
{
  return *(_QWORD *)(**((_QWORD **)this + 6) + 8 * a2);
}

void llvm::NamedMDNode::addOperand(llvm::NamedMDNode *this, llvm::MDNode *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;

  v3 = *((_QWORD *)this + 6);
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v9 = 0;
    v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(v3, (void *)(v3 + 16), 0, 8, &v9);
    v7 = &v6[*(unsigned int *)(v3 + 8)];
    *v7 = a2;
    if (a2)
      llvm::MetadataTracking::track((uint64_t)v7, (unsigned __int8 *)a2, 1);
    llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(v3, v6);
    v8 = v9;
    if (*(_QWORD *)v3 != v3 + 16)
      free(*(void **)v3);
    *(_QWORD *)v3 = v6;
    ++*(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 12) = v8;
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)v3 + 8 * v4);
    *v5 = a2;
    if (a2)
    {
      llvm::MetadataTracking::track((uint64_t)v5, (unsigned __int8 *)a2, 1);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(_DWORD *)(v3 + 8) = v4 + 1;
  }
}

uint64_t llvm::NamedMDNode::setOperand(uint64_t this, unsigned int a2, llvm::MDNode *a3)
{
  unsigned __int8 **v4;

  v4 = (unsigned __int8 **)(**(_QWORD **)(this + 48) + 8 * a2);
  if (*v4)
    this = llvm::MetadataTracking::untrack((uint64_t)v4, *v4);
  *v4 = (unsigned __int8 *)a3;
  if (a3)
    return llvm::MetadataTracking::track((uint64_t)v4, (unsigned __int8 *)a3, 1);
  return this;
}

void llvm::NamedMDNode::eraseFromParent(llvm::Module **this)
{
  llvm::Module::eraseNamedMetadata(this[5], (llvm::NamedMDNode *)this);
}

char *llvm::NamedMDNode::getName(llvm::NamedMDNode *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  v1 = (char *)this + 16;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

void llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>(uint64_t a1)
{
  __int128 *v1;
  unint64_t v2;
  __int128 *v3;
  const std::nothrow_t *v4;
  unint64_t v5;
  __int128 *v6;
  BOOL v7;
  __int128 *v8;
  char v9;

  v1 = *(__int128 **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  v3 = (__int128 *)(*(_QWORD *)a1 + 16 * v2);
  if ((_DWORD)v2)
  {
    v4 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v5 = *(unsigned int *)(a1 + 8);
    while (1)
    {
      v6 = (__int128 *)operator new(16 * v5, v4);
      if (v6)
        break;
      v7 = v5 > 1;
      v5 >>= 1;
      if (!v7)
        goto LABEL_5;
    }
    v8 = v6;
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v1, v3, (uint64_t)&v9, v2, v6, v5);
    operator delete(v8);
  }
  else
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v1, v3, (uint64_t)&v9, v2, 0, 0);
  }
}

BOOL llvm::MDAttachments::erase(llvm::MDAttachments *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  unint64_t v29;
  char v30;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0;
  if ((_DWORD)v2 == 1)
  {
    v5 = *(_QWORD *)this;
    if (**(_DWORD **)this == a2)
    {
      *((_DWORD *)this + 2) = 0;
      v8 = *(unsigned __int8 **)(v5 + 8);
      v6 = v5 + 8;
      v7 = v8;
      if (v8)
        llvm::MetadataTracking::untrack(v6, v7);
      return 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)this;
  }
  v10 = 0;
  v11 = 16 * v2;
  v12 = (_DWORD *)(v5 + 16 * v2);
  while (*(_DWORD *)(v5 + v10) != a2)
  {
    v10 += 16;
    if (v11 == v10)
      goto LABEL_16;
  }
  v12 = (_DWORD *)(v5 + v10);
  if (v11 == v10 || v11 - 16 == v10)
  {
LABEL_16:
    v15 = v2;
    goto LABEL_40;
  }
  v13 = v11 - v10 - 16;
  v14 = v12 + 6;
  do
  {
    v17 = *((_DWORD *)v14 - 2);
    if (v17 != a2)
    {
      *v12 = v17;
      v18 = (unsigned __int8 **)(v12 + 2);
      if (v14 - 1 == (_QWORD *)v12)
        goto LABEL_20;
      if (*v18)
        llvm::MetadataTracking::untrack((uint64_t)(v12 + 2), *v18);
      *v18 = (unsigned __int8 *)*v14;
      v19 = (unsigned __int8 *)*v14;
      if (!*v14)
        goto LABEL_20;
      v20 = *v19;
      if ((v20 - 5) > 0x1E)
      {
        if (v20 == 4)
          v22 = *v14;
        else
          v22 = 0;
        if (v20 == 4)
        {
          v16 = v22 + 8;
        }
        else
        {
          if ((v20 - 3) < 0xFFFFFFFE)
            goto LABEL_19;
          v16 = (unint64_t)(v19 + 8);
        }
      }
      else
      {
        if ((v19[1] & 0x7F) != 2 && !*((_DWORD *)v19 - 2))
          goto LABEL_19;
        v21 = *((_QWORD *)v19 + 1);
        if ((v21 & 4) == 0)
          goto LABEL_19;
        v16 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_19;
      }
      llvm::ReplaceableMetadataImpl::moveRef(v16, (uint64_t)v14, (uint64_t)(v12 + 2));
LABEL_19:
      *v14 = 0;
LABEL_20:
      v12 += 4;
    }
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  v5 = *(_QWORD *)this;
  v15 = *((unsigned int *)this + 2);
LABEL_40:
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *>((uint64_t)&v30, v5 + 16 * v15, (_QWORD *)(v5 + 16 * v15), (uint64_t)v12);
  v24 = v23;
  v25 = *(_QWORD *)this;
  v26 = *(_QWORD *)this + 16 * *((unsigned int *)this + 2);
  if ((unsigned __int8 **)v26 != v23)
  {
    v27 = (unsigned __int8 **)(v26 - 8);
    do
    {
      if (*v27)
        llvm::MetadataTracking::untrack((uint64_t)v27, *v27);
      v28 = v27 - 1;
      v27 -= 2;
    }
    while (v28 != v24);
    v25 = *(_QWORD *)this;
  }
  v29 = ((unint64_t)v24 - v25) >> 4;
  *((_DWORD *)this + 2) = v29;
  return (_DWORD)v2 != (_DWORD)v29;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::reserveForParamAndGetAddress(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v4 + 16 * v5) = *(_DWORD *)result;
  v6 = v4 + 16 * v5;
  v7 = (_QWORD *)(result + 8);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(result + 8);
  v8 = v6 + 8;
  v9 = *(unsigned __int8 **)(result + 8);
  if (v9)
  {
    v10 = *v9;
    if ((v10 - 5) > 0x1E)
    {
      if (v10 == 4)
        v12 = *(_QWORD *)(result + 8);
      else
        v12 = 0;
      if (v10 == 4)
      {
        result = v12 + 8;
      }
      else
      {
        if ((v10 - 3) < 0xFFFFFFFE)
        {
LABEL_16:
          *v7 = 0;
          goto LABEL_17;
        }
        result = (uint64_t)(v9 + 8);
      }
    }
    else
    {
      if ((v9[1] & 0x7F) != 2 && !*((_DWORD *)v9 - 2))
        goto LABEL_16;
      v11 = *((_QWORD *)v9 + 1);
      if ((v11 & 4) == 0)
        goto LABEL_16;
      result = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_16;
    }
    result = llvm::ReplaceableMetadataImpl::moveRef(result, (uint64_t)v7, v8);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  return result;
}

uint64_t llvm::Value::getMetadataImpl(llvm::Value *this, int a2)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v5 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v6 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (v6)
  {
    v7 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    v8 = v5 + 40 * v7;
    v9 = *(llvm::Value **)v8;
    if (*(llvm::Value **)v8 == this)
      goto LABEL_8;
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 40 * v7;
      v9 = *(llvm::Value **)v8;
      if (*(llvm::Value **)v8 == this)
        goto LABEL_8;
    }
  }
  v8 = v5 + 40 * v6;
LABEL_8:
  v12 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v12)
    return 0;
  v13 = *(_QWORD *)(v8 + 8) + 8;
  v14 = 16 * v12;
  while (*(_DWORD *)(v13 - 8) != a2)
  {
    v13 += 16;
    v14 -= 16;
    if (!v14)
      return 0;
  }
  return *(_QWORD *)v13;
}

void llvm::Value::getMetadata(mlir::BytecodeWriterConfig *a1, int a2, uint64_t a3)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  mlir::BytecodeWriterConfig *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    return;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  v7 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v8 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (v8)
  {
    v9 = (v8 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v10 = v7 + 40 * v9;
    v11 = *(mlir::BytecodeWriterConfig **)v10;
    if (*(mlir::BytecodeWriterConfig **)v10 == a1)
      goto LABEL_9;
    v12 = 1;
    while (v11 != (mlir::BytecodeWriterConfig *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = v7 + 40 * v9;
      v11 = *(mlir::BytecodeWriterConfig **)v10;
      if (*(mlir::BytecodeWriterConfig **)v10 == a1)
        goto LABEL_9;
    }
  }
  v10 = v7 + 40 * v8;
LABEL_9:
  v14 = *(unsigned int *)(v10 + 16);
  if ((_DWORD)v14)
  {
    v15 = (_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
    v16 = 16 * v14;
    do
    {
      if (*((_DWORD *)v15 - 2) == a2)
      {
        v17 = *v15;
        v18 = *(unsigned int *)(a3 + 8);
        if (v18 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18 + 1, 8);
          v18 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v17;
        ++*(_DWORD *)(a3 + 8);
      }
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
  }
}

void llvm::Value::getAllMetadata(mlir::BytecodeWriterConfig *a1, uint64_t a2)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  mlir::BytecodeWriterConfig *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    return;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  v5 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v6 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (!v6)
    goto LABEL_8;
  v7 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v8 = v5 + 40 * v7;
  v9 = *(mlir::BytecodeWriterConfig **)v8;
  if (*(mlir::BytecodeWriterConfig **)v8 != a1)
  {
    v10 = 1;
    while (v9 != (mlir::BytecodeWriterConfig *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v8 = v5 + 40 * v7;
      v9 = *(mlir::BytecodeWriterConfig **)v8;
      if (*(mlir::BytecodeWriterConfig **)v8 == a1)
        goto LABEL_9;
    }
LABEL_8:
    v8 = v5 + 40 * v6;
  }
LABEL_9:
  v12 = *(unsigned int *)(v8 + 16);
  if ((_DWORD)v12)
  {
    v13 = *(_DWORD *)(a2 + 8);
    v14 = (_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
    v15 = 16 * v12;
    do
    {
      while (v13 < *(_DWORD *)(a2 + 12))
      {
        v16 = *(_QWORD *)a2 + 16 * v13;
        *(_DWORD *)v16 = *((_DWORD *)v14 - 2);
        v17 = *v14;
        v14 += 2;
        *(_QWORD *)(v16 + 8) = v17;
        *(_DWORD *)(a2 + 8) = ++v13;
        v15 -= 16;
        if (!v15)
          goto LABEL_17;
      }
      v18 = *((unsigned int *)v14 - 2);
      v19 = *v14;
      v14 += 2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13 + 1, 16);
      v20 = (_QWORD *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 8));
      *v20 = v18;
      v20[1] = v19;
      v13 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v13;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 8);
  }
LABEL_17:
  if (v13 > 1)
    llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>(a2);
}

void llvm::Value::setMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  llvm::Value **v11;
  llvm::Value *v12;
  llvm::Value **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t DesiredBytecodeVersion;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Value *v22;
  int v23;
  unsigned int v24;
  llvm::Value **v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t *v28;
  int v29;
  int32x2_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  llvm::Value *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  unsigned int v41;
  llvm::Value *v42;
  unsigned __int8 *v43;

  if (a3)
  {
    v6 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v42 = this;
    v7 = *(_DWORD *)(v6 + 2520);
    if (v7)
    {
      v8 = *(_QWORD *)(v6 + 2504);
      v9 = v7 - 1;
      v10 = v9 & ((this >> 4) ^ (this >> 9));
      v11 = (llvm::Value **)(v8 + 40 * v10);
      v12 = *v11;
      if (*v11 == this)
      {
LABEL_22:
        v26 = (uint64_t)(v11 + 1);
        if (!*((_DWORD *)v11 + 4))
          *((_DWORD *)this + 5) |= 0x20000000u;
        llvm::MDAttachments::erase((llvm::MDAttachments *)(v11 + 1), a2);
        LODWORD(v42) = a2;
        v43 = (unsigned __int8 *)a3;
        llvm::MetadataTracking::track((uint64_t)&v43, (unsigned __int8 *)a3, 1);
        llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back(v26, (unint64_t)&v42);
        if (v43)
          llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
        return;
      }
      v13 = 0;
      v14 = 1;
      while (v12 != (llvm::Value *)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == (llvm::Value *)-8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = (llvm::Value **)(v8 + 40 * v10);
        v12 = *v11;
        if (*v11 == this)
          goto LABEL_22;
      }
      if (v13)
        v25 = v13;
      else
        v25 = v11;
    }
    else
    {
      v25 = 0;
    }
    v11 = (llvm::Value **)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucket<llvm::Value const*>(v6 + 2504, v25, (uint64_t *)&v42);
    goto LABEL_22;
  }
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v18 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v19 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (v19)
  {
    v20 = (v19 - 1) & ((this >> 4) ^ (this >> 9));
    v21 = v18 + 40 * v20;
    v22 = *(llvm::Value **)v21;
    if (*(llvm::Value **)v21 == this)
      goto LABEL_28;
    v23 = 1;
    while (v22 != (llvm::Value *)-4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v21 = v18 + 40 * v20;
      v22 = *(llvm::Value **)v21;
      if (*(llvm::Value **)v21 == this)
        goto LABEL_28;
    }
  }
  v21 = v18 + 40 * v19;
LABEL_28:
  llvm::MDAttachments::erase((llvm::MDAttachments *)(v21 + 8), a2);
  if (!*(_DWORD *)(v21 + 16))
  {
    v27 = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v28 = *(int32x2_t **)v27;
    v29 = *(_DWORD *)(*(_QWORD *)v27 + 2520);
    if (v29)
    {
      v30 = v28[313];
      v31 = v29 - 1;
      v32 = v31 & ((this >> 4) ^ (this >> 9));
      v33 = *(_QWORD *)&v30 + 40 * v32;
      v34 = *(llvm::Value **)v33;
      if (*(llvm::Value **)v33 == this)
      {
LABEL_31:
        v35 = *(char **)(v33 + 8);
        v36 = *(unsigned int *)(v33 + 16);
        if ((_DWORD)v36)
        {
          v37 = v35 - 8;
          v38 = 16 * v36;
          do
          {
            v39 = *(unsigned __int8 **)&v37[v38];
            if (v39)
              llvm::MetadataTracking::untrack((uint64_t)&v37[v38], v39);
            v38 -= 16;
          }
          while (v38);
          v35 = *(char **)(v33 + 8);
        }
        if (v35 != (char *)(v33 + 24))
          free(v35);
        *(_QWORD *)v33 = -8192;
        v28[314] = vadd_s32(v28[314], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v40 = 1;
        while (v34 != (llvm::Value *)-4096)
        {
          v41 = v32 + v40++;
          v32 = v41 & v31;
          v33 = *(_QWORD *)&v30 + 40 * v32;
          v34 = *(llvm::Value **)v33;
          if (*(llvm::Value **)v33 == this)
            goto LABEL_31;
        }
      }
    }
    *((_DWORD *)this + 5) &= ~0x20000000u;
  }
}

uint64_t llvm::Value::addMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  llvm::Value **v12;
  llvm::Value *v13;
  llvm::Value **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  llvm::Value **v18;
  uint64_t v19;
  uint64_t result;
  llvm::Value *v21;
  int v22;
  unsigned __int8 *v23;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x20000000) == 0)
    *((_DWORD *)this + 5) = v6 | 0x20000000;
  v7 = *(_QWORD *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v21 = this;
  v8 = *(_DWORD *)(v7 + 2520);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 2504);
    v10 = v8 - 1;
    v11 = v10 & ((this >> 4) ^ (this >> 9));
    v12 = (llvm::Value **)(v9 + 40 * v11);
    v13 = *v12;
    if (*v12 == this)
      goto LABEL_16;
    v14 = 0;
    v15 = 1;
    while (v13 != (llvm::Value *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (llvm::Value *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (llvm::Value **)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == this)
        goto LABEL_16;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v12;
  }
  else
  {
    v18 = 0;
  }
  v12 = (llvm::Value **)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucket<llvm::Value const*>(v7 + 2504, v18, (uint64_t *)&v21);
LABEL_16:
  v19 = (uint64_t)(v12 + 1);
  v22 = a2;
  v23 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v23, (unsigned __int8 *)a3, 1);
  result = llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back(v19, (unint64_t)&v22);
  if (v23)
    return llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  return result;
}

BOOL llvm::Value::eraseMetadata(llvm::Value *this, int a2)
{
  _BOOL8 v2;
  uint64_t DesiredBytecodeVersion;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  llvm::Value *v11;
  int v12;
  unsigned int v13;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v7 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v8 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (v8)
  {
    v9 = (v8 - 1) & ((this >> 4) ^ (this >> 9));
    v10 = v7 + 40 * v9;
    v11 = *(llvm::Value **)v10;
    if (*(llvm::Value **)v10 == this)
      goto LABEL_11;
    v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v10 = v7 + 40 * v9;
      v11 = *(llvm::Value **)v10;
      if (*(llvm::Value **)v10 == this)
        goto LABEL_11;
    }
  }
  v10 = v7 + 40 * v8;
LABEL_11:
  v2 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v10 + 8), a2);
  if (*(_DWORD *)(v10 + 16))
    return v2;
  llvm::Value::clearMetadata(this);
  return v2;
}

void llvm::Value::clearMetadata(llvm::Value *this)
{
  uint64_t DesiredBytecodeVersion;
  int32x2_t *v3;
  int v4;
  int32x2_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  llvm::Value *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;

  if ((*((_BYTE *)this + 23) & 0x20) != 0)
  {
    DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
    v3 = *(int32x2_t **)DesiredBytecodeVersion;
    v4 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
    if (v4)
    {
      v5 = v3[313];
      v6 = v4 - 1;
      v7 = v6 & ((this >> 4) ^ (this >> 9));
      v8 = *(_QWORD *)&v5 + 40 * v7;
      v9 = *(llvm::Value **)v8;
      if (*(llvm::Value **)v8 == this)
      {
LABEL_4:
        v10 = *(char **)(v8 + 8);
        v11 = *(unsigned int *)(v8 + 16);
        if ((_DWORD)v11)
        {
          v12 = v10 - 8;
          v13 = 16 * v11;
          do
          {
            v14 = *(unsigned __int8 **)&v12[v13];
            if (v14)
              llvm::MetadataTracking::untrack((uint64_t)&v12[v13], v14);
            v13 -= 16;
          }
          while (v13);
          v10 = *(char **)(v8 + 8);
        }
        if (v10 != (char *)(v8 + 24))
          free(v10);
        *(_QWORD *)v8 = -8192;
        v3[314] = vadd_s32(v3[314], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v15 = 1;
        while (v9 != (llvm::Value *)-4096)
        {
          v16 = v7 + v15++;
          v7 = v16 & v6;
          v8 = *(_QWORD *)&v5 + 40 * v7;
          v9 = *(llvm::Value **)v8;
          if (*(llvm::Value **)v8 == this)
            goto LABEL_4;
        }
      }
    }
    *((_DWORD *)this + 5) &= ~0x20000000u;
  }
}

void llvm::Instruction::setMetadata(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, llvm::MDNode *a4)
{
  uint64_t *DesiredBytecodeVersion;
  int MDKindID;

  if (a4 || *(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
  {
    DesiredBytecodeVersion = (uint64_t *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)a1);
    MDKindID = llvm::LLVMContext::getMDKindID(DesiredBytecodeVersion, a2, a3);
    llvm::Instruction::setMetadata((unsigned __int8 **)a1, MDKindID, a4);
  }
}

void llvm::Instruction::setMetadata(unsigned __int8 **this, int a2, llvm::MDNode *a3)
{
  llvm::MDNode *v3;
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = a3;
  v4 = this;
  if (!a3 && !this[6] && (*((_BYTE *)this + 23) & 0x20) == 0)
    return;
  if (a2 == 38)
  {
    llvm::Instruction::updateDIAssignIDMapping((mlir::BytecodeWriterConfig *)this, (uint64_t)a3);
    this = v4;
    a2 = 38;
    a3 = v3;
LABEL_17:
    llvm::Value::setMetadata((llvm::Value *)this, a2, a3);
    return;
  }
  if (a2)
    goto LABEL_17;
  llvm::DebugLoc::DebugLoc(&v11, (unsigned __int8 *)a3);
  v5 = v4 + 6;
  if (&v11 == v4 + 6)
  {
    if (v11)
      llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  }
  else
  {
    if (*v5)
      llvm::MetadataTracking::untrack((uint64_t)(v4 + 6), *v5);
    v6 = v11;
    *v5 = v11;
    if (v6)
    {
      v7 = *v6;
      if ((v7 - 5) > 0x1E)
      {
        if (v7 == 4)
          v10 = v6;
        else
          v10 = 0;
        if (v7 == 4)
        {
          v9 = (unint64_t)(v10 + 8);
        }
        else
        {
          if ((v7 - 3) < 0xFFFFFFFE)
            return;
          v9 = (unint64_t)(v6 + 8);
        }
      }
      else
      {
        if ((v6[1] & 0x7F) != 2 && !*((_DWORD *)v6 - 2))
          return;
        v8 = *((_QWORD *)v6 + 1);
        if ((v8 & 4) == 0)
          return;
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0)
          return;
      }
      llvm::ReplaceableMetadataImpl::moveRef(v9, (uint64_t)&v11, (uint64_t)(v4 + 6));
    }
  }
}

void llvm::Instruction::updateDIAssignIDMapping(mlir::BytecodeWriterConfig *a1, uint64_t a2)
{
  int32x2_t *v4;
  uint64_t DesiredBytecodeVersion;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  mlir::BytecodeWriterConfig *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int32 v29;
  int32x2_t v30;
  __int32 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  v4 = *(int32x2_t **)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
    goto LABEL_37;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a1);
  v6 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v7 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (!v7)
    goto LABEL_8;
  v8 = (v7 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v9 = v6 + 40 * v8;
  v10 = *(mlir::BytecodeWriterConfig **)v9;
  if (*(mlir::BytecodeWriterConfig **)v9 != a1)
  {
    v11 = 1;
    while (v10 != (mlir::BytecodeWriterConfig *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = v6 + 40 * v8;
      v10 = *(mlir::BytecodeWriterConfig **)v9;
      if (*(mlir::BytecodeWriterConfig **)v9 == a1)
        goto LABEL_9;
    }
LABEL_8:
    v9 = v6 + 40 * v7;
  }
LABEL_9:
  v13 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v13)
    goto LABEL_37;
  v14 = (_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  v15 = 16 * v13;
  while (*((_DWORD *)v14 - 2) != 38)
  {
    v14 += 2;
    v15 -= 16;
    if (!v15)
      goto LABEL_37;
  }
  v16 = *v14;
  if (!v16)
    goto LABEL_37;
  if (v16 == a2)
    return;
  v17 = v4[316];
  v18 = v4[318].u32[0];
  if (!(_DWORD)v18)
    goto LABEL_22;
  v19 = ((_DWORD)v18 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  v20 = *(_QWORD *)&v17 + 32 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20 != v16)
  {
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(_QWORD *)(*(_QWORD *)&v17 + 32 * v19);
      if (v21 == v16)
      {
        v20 = *(_QWORD *)&v17 + 32 * v19;
        goto LABEL_23;
      }
    }
LABEL_22:
    v20 = *(_QWORD *)&v17 + 32 * v18;
  }
LABEL_23:
  v24 = *(char **)(v20 + 8);
  v25 = *(unsigned int *)(v20 + 16);
  v26 = &v24[8 * v25];
  if ((_DWORD)v25)
  {
    v27 = 0;
    while (*(mlir::BytecodeWriterConfig **)&v24[v27] != a1)
    {
      v27 += 8;
      if (8 * v25 == v27)
      {
        v28 = &v24[8 * v25];
        goto LABEL_30;
      }
    }
    v28 = &v24[v27];
LABEL_30:
    if ((_DWORD)v25 == 1)
    {
      if (v24 != (char *)(v20 + 24))
        free(v24);
      *(_QWORD *)v20 = -8192;
      v4[317] = vadd_s32(v4[317], (int32x2_t)0x1FFFFFFFFLL);
      goto LABEL_37;
    }
  }
  else
  {
    v28 = *(char **)(v20 + 8);
  }
  if (v26 != v28 + 8)
  {
    memmove(v28, v28 + 8, v26 - (v28 + 8));
    LODWORD(v25) = *(_DWORD *)(v20 + 16);
  }
  *(_DWORD *)(v20 + 16) = v25 - 1;
LABEL_37:
  if (!a2)
    return;
  v29 = v4[318].i32[0];
  if (!v29)
  {
    v39 = 0;
LABEL_50:
    v33 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)&v4[316], v39, &v41);
    goto LABEL_51;
  }
  v30 = v4[316];
  v31 = v29 - 1;
  v32 = v31 & ((a2 >> 4) ^ (a2 >> 9));
  v33 = (uint64_t *)(*(_QWORD *)&v30 + 32 * v32);
  v34 = *v33;
  if (*v33 != a2)
  {
    v35 = 0;
    v36 = 1;
    while (v34 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v34 == -8192;
      if (v37)
        v35 = v33;
      v38 = v32 + v36++;
      v32 = v38 & v31;
      v33 = (uint64_t *)(*(_QWORD *)&v30 + 32 * v32);
      v34 = *v33;
      if (*v33 == a2)
        goto LABEL_51;
    }
    if (v35)
      v39 = v35;
    else
      v39 = v33;
    goto LABEL_50;
  }
LABEL_51:
  v40 = *((unsigned int *)v33 + 4);
  if (v40 >= *((_DWORD *)v33 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v33 + 1), v33 + 3, v40 + 1, 8);
    LODWORD(v40) = *((_DWORD *)v33 + 4);
  }
  *(_QWORD *)(v33[1] + 8 * v40) = a1;
  ++*((_DWORD *)v33 + 4);
}

void llvm::Instruction::getAllMetadataImpl(mlir::BytecodeWriterConfig *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_DWORD *)(a2 + 8) = 0;
  v4 = *((_QWORD *)a1 + 6);
  if (v4)
  {
    if (*(_DWORD *)(a2 + 12))
    {
      v5 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), 1uLL, 16);
      v5 = *(unsigned int *)(a2 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)a2 + 16 * v5);
    *v6 = 0;
    v6[1] = v4;
    ++*(_DWORD *)(a2 + 8);
  }
  llvm::Value::getAllMetadata(a1, a2);
}

void llvm::Function::setSubprogram(llvm::Function *this, llvm::DISubprogram *a2)
{
  llvm::Value::setMetadata(this, 0, a2);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  uint64_t DesiredBytecodeVersion;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  llvm::Function *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  v3 = *(_QWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2504);
  v4 = *(_DWORD *)(*(_QWORD *)DesiredBytecodeVersion + 2520);
  if (v4)
  {
    v5 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v6 = v3 + 40 * v5;
    v7 = *(llvm::Function **)v6;
    if (*(llvm::Function **)v6 == this)
      goto LABEL_9;
    v8 = 1;
    while (v7 != (llvm::Function *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v6 = v3 + 40 * v5;
      v7 = *(llvm::Function **)v6;
      if (*(llvm::Function **)v6 == this)
        goto LABEL_9;
    }
  }
  v6 = v3 + 40 * v4;
LABEL_9:
  v10 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v10)
    return 0;
  v11 = *(_QWORD *)(v6 + 8) + 8;
  v12 = 16 * v10;
  while (*(_DWORD *)(v11 - 8))
  {
    v11 += 16;
    v12 -= 16;
    if (!v12)
      return 0;
  }
  return *(_QWORD *)v11;
}

uint64_t llvm::GlobalVariable::addDebugInfo(llvm::Value *a1, llvm::MDNode *a2)
{
  return llvm::Value::addMetadata(a1, 0, a2);
}

int *llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[10];

  v17[9] = *MEMORY[0x1E0C80C00];
  v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40)
    v6 = v5 + 1;
  else
    v6 = 64;
  if (a2 >= 5)
    v7 = v6;
  else
    v7 = a2;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v8 = *(uint64_t **)(a1 + 8);
    v9 = *(unsigned int *)(a1 + 16);
    if (v7 > 4)
    {
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::moveFromOldBuckets((int *)a1, v8, &v8[3 * v9]);
    llvm::deallocate_buffer((llvm *)v8, (void *)(24 * v9));
  }
  v10 = &v15;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_OWORD *)(a1 + 16);
    v10 = v17;
    v11 = *(_QWORD *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_12:
      v12 = *(_QWORD *)(a1 + 56);
      if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  *v10 = v11;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 40);
  v10 += 3;
  v12 = *(_QWORD *)(a1 + 56);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 80);
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
LABEL_22:
    *v10 = v13;
    *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 88);
    v10 += 3;
    if (v7 < 5)
      return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::moveFromOldBuckets((int *)a1, &v15, v10);
    goto LABEL_15;
  }
LABEL_21:
  *v10 = v12;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 64);
  v10 += 3;
  v13 = *(_QWORD *)(a1 + 80);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_22;
LABEL_14:
  if (v7 >= 5)
  {
LABEL_15:
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v7;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::moveFromOldBuckets((int *)a1, &v15, v10);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = (char *)(result + 26);
    v5 = (char *)(result + 2);
    v7 = 72;
  }
  else
  {
    v4 = result[4];
    if (!v4)
      goto LABEL_11;
    v5 = (char *)*((_QWORD *)result + 1);
    v6 = &v5[24 * v4];
    v7 = v6 - v5 - 24;
    if (v7 < 0x18)
    {
      v9 = (char *)*((_QWORD *)result + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v9 = -4096;
        v9 += 24;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  v8 = v7 / 0x18 + 1;
  v9 = &v5[24 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)v5 = -4096;
    *((_QWORD *)v5 + 3) = -4096;
    v5 += 48;
    v10 -= 2;
  }
  while (v10);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  if (a2 != a3)
  {
    while (1)
    {
      v17 = *a2;
      if ((*a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_16;
      if ((*(_BYTE *)result & 1) != 0)
        break;
      v11 = result[4];
      if (v11)
      {
        v12 = (int *)*((_QWORD *)result + 1);
LABEL_14:
        v13 = v11 - 1;
        v14 = (v11 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v15 = (uint64_t *)&v12[6 * v14];
        v16 = *v15;
        if (v17 != *v15)
        {
          v18 = 0;
          v19 = 1;
          while (v16 != -4096)
          {
            if (v18)
              v20 = 0;
            else
              v20 = v16 == -8192;
            if (v20)
              v18 = v15;
            v21 = v14 + v19++;
            v14 = v21 & v13;
            v15 = (uint64_t *)&v12[6 * (v21 & v13)];
            v16 = *v15;
            if (v17 == *v15)
              goto LABEL_15;
          }
          if (v18)
            v15 = v18;
        }
        goto LABEL_15;
      }
      v15 = 0;
LABEL_15:
      *v15 = v17;
      *(_OWORD *)(v15 + 1) = *(_OWORD *)(a2 + 1);
      *result += 2;
LABEL_16:
      a2 += 3;
      if (a2 == a3)
        return result;
    }
    v11 = 4;
    v12 = result + 2;
    goto LABEL_14;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::InsertIntoBucket<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 4;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = v13 + 24 * v16;
  v17 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = v13 + 24 * (v21 & v15);
      v17 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*(_QWORD *)a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = *a4;
  return a2;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  BOOL v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int64_t v174;
  int64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t *v223;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v222 = a2 - 2;
  v223 = a2 - 4;
  v9 = a2 - 7;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < (unint64_t)v10[2])
        {
          v137 = *v10;
          *v10 = *(a2 - 3);
          *(a2 - 3) = v137;
          v138 = v10[1];
          v10[1] = *(a2 - 2);
          *(a2 - 2) = v138;
          v139 = v10[2];
          v10[2] = *(a2 - 1);
          *(a2 - 1) = v139;
        }
        return result;
      case 3:
        v140 = v10 + 2;
        v141 = v10[2];
        v142 = v10 + 5;
        v143 = v10[5];
        v144 = *(a2 - 1);
        if (v143 < v141)
        {
          v145 = v10 + 1;
          v146 = *v10;
          if (v144 >= v143)
          {
            v145 = v10 + 4;
            v218 = v10[4];
            v219 = v10[1];
            *v10 = v10[3];
            v10[1] = v218;
            v10[4] = v219;
            v10[2] = v143;
            v10[3] = v146;
            v10[5] = v141;
            if (*(a2 - 1) >= v141)
              return result;
            v10[3] = *(a2 - 3);
            *(a2 - 3) = v146;
            v140 = v10 + 5;
          }
          else
          {
            *v10 = *(a2 - 3);
            *(a2 - 3) = v146;
          }
          v142 = a2 - 1;
          goto LABEL_179;
        }
        if (v144 < v143)
        {
          v206 = v10[3];
          v10[3] = *(a2 - 3);
          *(a2 - 3) = v206;
          v207 = v10[4];
          v10[4] = *(a2 - 2);
          *(a2 - 2) = v207;
          v208 = v10[5];
          v10[5] = *(a2 - 1);
          *(a2 - 1) = v208;
          v222 = v10 + 4;
          if (v10[5] < (unint64_t)v10[2])
          {
            v209 = *v10;
            *v10 = v10[3];
            v10[3] = v209;
            v145 = v10 + 1;
LABEL_179:
            v220 = *v145;
            *v145 = *v222;
            *v222 = v220;
            v221 = *v140;
            *v140 = *v142;
            *v142 = v221;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, v10 + 9);
        if (*(a2 - 1) < (unint64_t)v10[11])
        {
          v147 = v10[9];
          v10[9] = *(a2 - 3);
          *(a2 - 3) = v147;
          v148 = v10[10];
          v10[10] = *(a2 - 2);
          *(a2 - 2) = v148;
          v149 = v10[11];
          v10[11] = *(a2 - 1);
          *(a2 - 1) = v149;
          v150 = v10[11];
          v151 = v10[8];
          if (v150 < v151)
          {
            v153 = v10[6];
            v152 = v10[7];
            v154 = v10[9];
            v155 = v10[10];
            v156 = v10[5];
            v10[6] = v154;
            v10[7] = v155;
            v10[8] = v150;
            v10[9] = v153;
            v10[10] = v152;
            v10[11] = v151;
            if (v150 < v156)
            {
              v158 = v10[3];
              v157 = v10[4];
              v159 = v10[2];
              v10[3] = v154;
              v10[4] = v155;
              v10[5] = v150;
              v10[6] = v158;
              v10[7] = v157;
              v10[8] = v156;
              if (v150 < v159)
              {
                v160 = *v10;
                v161 = v10[1];
                *v10 = v154;
                v10[1] = v155;
                v10[2] = v150;
                v10[3] = v160;
                v10[4] = v161;
                v10[5] = v159;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 575)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v174 = (unint64_t)(v12 - 2) >> 1;
              v175 = v174;
              do
              {
                if (v174 >= v175)
                {
                  v177 = (2 * v175) | 1;
                  v178 = &v10[3 * v177];
                  if (2 * v175 + 2 < v12)
                  {
                    v179 = v178[2];
                    v180 = v178[5];
                    v178 += 3 * (v179 < v180);
                    if (v179 < v180)
                      v177 = 2 * v175 + 2;
                  }
                  v181 = &v10[3 * v175];
                  v182 = v181[2];
                  if (v178[2] >= v182)
                  {
                    v184 = *v181;
                    v183 = v181[1];
                    do
                    {
                      v185 = v181;
                      v181 = v178;
                      *v185 = *v178;
                      v185[1] = v178[1];
                      v185[2] = v178[2];
                      if (v174 < v177)
                        break;
                      v186 = (2 * v177) | 1;
                      v178 = &v10[3 * v186];
                      v187 = 2 * v177 + 2;
                      if (v187 < v12)
                      {
                        v188 = v178[2];
                        v189 = v178[5];
                        v178 += 3 * (v188 < v189);
                        if (v188 < v189)
                          v186 = v187;
                      }
                      v177 = v186;
                    }
                    while (v178[2] >= v182);
                    *v181 = v184;
                    v181[1] = v183;
                    v181[2] = v182;
                  }
                }
                v176 = v175-- <= 0;
              }
              while (!v176);
              v190 = v11 / 0x18uLL;
              do
              {
                result = 0;
                v191 = *v10;
                v192 = v10[1];
                v193 = v10[2];
                v194 = v10;
                do
                {
                  v195 = &v194[3 * result + 3];
                  v196 = (2 * result) | 1;
                  v197 = 2 * result + 2;
                  if (v197 < v190)
                  {
                    v198 = v195[2];
                    v199 = v195[5];
                    v195 += 3 * (v198 < v199);
                    if (v198 < v199)
                      v196 = v197;
                  }
                  *v194 = *v195;
                  v194[1] = v195[1];
                  v194[2] = v195[2];
                  v194 = v195;
                  result = v196;
                }
                while (v196 <= (uint64_t)((unint64_t)(v190 - 2) >> 1));
                if (v195 == a2 - 3)
                {
                  *v195 = v191;
                  v195[1] = v192;
                  v195[2] = v193;
                }
                else
                {
                  *v195 = *(a2 - 3);
                  v195[1] = *(a2 - 2);
                  v195[2] = *(a2 - 1);
                  *(a2 - 3) = v191;
                  *(a2 - 2) = v192;
                  *(a2 - 1) = v193;
                  v200 = (char *)v195 - (char *)v10 + 24;
                  if (v200 >= 25)
                  {
                    v201 = (v200 / 0x18uLL - 2) >> 1;
                    v202 = &v10[3 * v201];
                    v203 = v195[2];
                    if (v202[2] < v203)
                    {
                      v204 = *v195;
                      v205 = v195[1];
                      do
                      {
                        result = (unint64_t)v195;
                        v195 = v202;
                        *(_QWORD *)result = *v202;
                        *(_QWORD *)(result + 8) = v202[1];
                        *(_QWORD *)(result + 16) = v202[2];
                        if (!v201)
                          break;
                        v201 = (v201 - 1) >> 1;
                        v202 = &v10[3 * v201];
                        result = v202[2];
                      }
                      while (result < v203);
                      *v195 = v204;
                      v195[1] = v205;
                      v195[2] = v203;
                    }
                  }
                }
                a2 -= 3;
                v176 = v190-- <= 2;
              }
              while (!v176);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          if ((unint64_t)v11 < 0xC01)
          {
            v23 = v10 + 2;
            v24 = v10[2];
            v25 = v14 + 2;
            v26 = v14[2];
            if (v24 < v26)
            {
              v27 = *v14;
              v28 = &v10[3 * v13 + 1];
              if (v15 >= v24)
              {
                *v14 = *v10;
                *v10 = v27;
                v58 = *v28;
                *v28 = v10[1];
                v10[1] = v58;
                v14[2] = v24;
                v10[2] = v26;
                if (*v8 >= v26)
                  goto LABEL_33;
                *v10 = *(a2 - 3);
                *(a2 - 3) = v27;
                v28 = v10 + 1;
                v29 = a2 - 2;
                v25 = v10 + 2;
              }
              else
              {
                *v14 = *(a2 - 3);
                *(a2 - 3) = v27;
                v29 = a2 - 2;
              }
              v23 = a2 - 1;
              goto LABEL_32;
            }
            if (v15 < v24)
            {
              v36 = *v10;
              *v10 = *(a2 - 3);
              *(a2 - 3) = v36;
              v29 = v10 + 1;
              v37 = v10[1];
              v10[1] = *(a2 - 2);
              *(a2 - 2) = v37;
              v38 = v10[2];
              v10[2] = *(a2 - 1);
              *(a2 - 1) = v38;
              if (v10[2] < (unint64_t)*v25)
              {
                v39 = *v14;
                *v14 = *v10;
                *v10 = v39;
                v28 = &v10[3 * v13 + 1];
LABEL_32:
                v59 = *v28;
                *v28 = *v29;
                *v29 = v59;
                v60 = *v25;
                *v25 = *v23;
                *v23 = v60;
              }
            }
LABEL_33:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_34;
LABEL_60:
            v61 = *v10;
            v62 = v10[2];
            if (*(v10 - 1) < v62)
              goto LABEL_61;
            if (v62 >= *v8)
            {
              v126 = v10 + 3;
              do
              {
                v10 = v126;
                if (v126 >= a2)
                  break;
                v127 = v126[2];
                v126 += 3;
              }
              while (v62 >= v127);
            }
            else
            {
              v124 = v10;
              do
              {
                v10 = v124 + 3;
                v125 = v124[5];
                v124 += 3;
              }
              while (v62 >= v125);
            }
            v128 = a2;
            if (v10 < a2)
            {
              v129 = a2;
              do
              {
                v128 = v129 - 3;
                v130 = *(v129 - 1);
                v129 -= 3;
              }
              while (v62 < v130);
            }
            v131 = v7[1];
            while (v10 < v128)
            {
              v132 = *v10;
              *v10 = *v128;
              *v128 = v132;
              v133 = v10[1];
              v10[1] = v128[1];
              v128[1] = v133;
              v134 = v10[2];
              v10[2] = v128[2];
              v128[2] = v134;
              do
              {
                v135 = v10[5];
                v10 += 3;
              }
              while (v62 >= v135);
              do
              {
                v136 = *(v128 - 1);
                v128 -= 3;
              }
              while (v62 < v136);
            }
            if (v10 - 3 != v7)
            {
              *v7 = *(v10 - 3);
              v7[1] = *(v10 - 2);
              v7[2] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 3) = v61;
            *(v10 - 2) = v131;
            *(v10 - 1) = v62;
            continue;
          }
          v16 = (unint64_t *)(v14 + 2);
          v17 = v14[2];
          v18 = v10 + 2;
          v19 = v10[2];
          if (v17 < v19)
          {
            v20 = v10 + 1;
            v21 = *v10;
            if (v15 >= v17)
            {
              *v10 = *v14;
              *v14 = v21;
              v40 = v10[1];
              v20 = &v10[3 * v13 + 1];
              v10[1] = *v20;
              *v20 = v40;
              v10[2] = v17;
              v14[2] = v19;
              if (*v8 >= v19)
                goto LABEL_23;
              *v14 = *(a2 - 3);
              *(a2 - 3) = v21;
              v22 = a2 - 2;
              v18 = v14 + 2;
            }
            else
            {
              *v10 = *(a2 - 3);
              *(a2 - 3) = v21;
              v22 = a2 - 2;
            }
            v35 = a2 - 1;
            goto LABEL_22;
          }
          if (v15 < v17)
          {
            v30 = *v14;
            *v14 = *(a2 - 3);
            *(a2 - 3) = v30;
            v31 = &v10[3 * v13];
            v32 = v31[1];
            v22 = v31 + 1;
            *v22 = *(a2 - 2);
            *(a2 - 2) = v32;
            v33 = v14[2];
            v14[2] = *(a2 - 1);
            *(a2 - 1) = v33;
            if (v14[2] < (unint64_t)v10[2])
            {
              v34 = *v10;
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v34;
              v35 = v14 + 2;
LABEL_22:
              v41 = *v20;
              *v20 = *v22;
              *v22 = v41;
              v42 = *v18;
              *v18 = *v35;
              *v35 = v42;
            }
          }
LABEL_23:
          v43 = v13 - 1;
          v44 = &v10[3 * v13 - 3];
          v45 = (uint64_t **)(v44 + 2);
          v46 = v44[2];
          v47 = v10 + 5;
          v48 = *v223;
          if (v46 < v10[5])
          {
            v49 = v10[3];
            if (v48 >= v46)
            {
              v10[3] = *v44;
              *v44 = v49;
              v63 = &v10[3 * v43];
              v64 = v63[1];
              v50 = v63 + 1;
              v65 = v10[4];
              v10[4] = v64;
              *v50 = v65;
              v66 = v10[5];
              v10[5] = v44[2];
              v44[2] = v66;
              if (*v223 >= v66)
                goto LABEL_39;
              v67 = *v44;
              *v44 = *(a2 - 6);
              *(a2 - 6) = v67;
              v51 = a2 - 5;
              v47 = v44 + 2;
            }
            else
            {
              v50 = v10 + 4;
              v10[3] = *(a2 - 6);
              *(a2 - 6) = v49;
              v51 = a2 - 5;
            }
            v57 = a2 - 4;
            goto LABEL_38;
          }
          if (v48 < v46)
          {
            v52 = *v44;
            *v44 = *(a2 - 6);
            *(a2 - 6) = v52;
            v53 = &v10[3 * v43];
            v54 = v53[1];
            v51 = v53 + 1;
            *v51 = *(a2 - 5);
            *(a2 - 5) = v54;
            v55 = v44[2];
            v44[2] = *(a2 - 4);
            *(a2 - 4) = v55;
            if (v44[2] < (unint64_t)v10[5])
            {
              v56 = v10[3];
              v10[3] = *v44;
              *v44 = v56;
              v50 = v10 + 4;
              v57 = v44 + 2;
LABEL_38:
              v68 = *v50;
              *v50 = *v51;
              *v51 = v68;
              v69 = *v47;
              *v47 = *v57;
              *v57 = v69;
            }
          }
LABEL_39:
          v70 = v13 + 1;
          v71 = &v10[3 * v13 + 3];
          v72 = (uint64_t *)v71[2];
          v73 = v10 + 8;
          v74 = *v9;
          if ((unint64_t)v72 < v10[8])
          {
            v75 = v10[6];
            if (v74 >= (unint64_t)v72)
            {
              v10[6] = *v71;
              *v71 = v75;
              v84 = &v10[3 * v70];
              v85 = v84[1];
              v76 = v84 + 1;
              v86 = v10[7];
              v10[7] = v85;
              *v76 = v86;
              v72 = (uint64_t *)v10[8];
              v10[8] = v71[2];
              v71[2] = (uint64_t)v72;
              if (*v9 >= (unint64_t)v72)
                goto LABEL_49;
              v87 = *v71;
              *v71 = *(a2 - 9);
              *(a2 - 9) = v87;
              v77 = a2 - 8;
              v73 = v71 + 2;
            }
            else
            {
              v76 = v10 + 7;
              v10[6] = *(a2 - 9);
              *(a2 - 9) = v75;
              v77 = a2 - 8;
            }
            v83 = a2 - 7;
            goto LABEL_48;
          }
          if (v74 < (unint64_t)v72)
          {
            v78 = *v71;
            *v71 = *(a2 - 9);
            *(a2 - 9) = v78;
            v79 = &v10[3 * v70];
            v80 = v79[1];
            v77 = v79 + 1;
            *v77 = *(a2 - 8);
            *(a2 - 8) = v80;
            v81 = v71[2];
            v71[2] = *(a2 - 7);
            *(a2 - 7) = v81;
            v72 = (uint64_t *)v71[2];
            if ((unint64_t)v72 < v10[8])
            {
              v82 = v10[6];
              v10[6] = *v71;
              *v71 = v82;
              v76 = v10 + 7;
              v83 = v71 + 2;
LABEL_48:
              v88 = *v76;
              *v76 = *v77;
              *v77 = v88;
              v89 = *v73;
              *v73 = *v83;
              *v83 = v89;
              v72 = (uint64_t *)v71[2];
            }
          }
LABEL_49:
          v90 = *v16;
          result = (unint64_t)*v45;
          if (*v16 >= (unint64_t)*v45)
          {
            v91 = *v14;
            if ((unint64_t)v72 >= v90)
              goto LABEL_59;
            v94 = *v71;
            *v14 = *v71;
            *v71 = v91;
            v95 = &v10[3 * v13];
            v96 = v95[1];
            v93 = v95 + 1;
            v97 = &v10[3 * v70];
            *v93 = v97[1];
            v97[1] = v96;
            v14[2] = (uint64_t)v72;
            v71[2] = v90;
            if ((unint64_t)v72 < result)
            {
              v98 = *v44;
              *v44 = v94;
              *v14 = v98;
              v92 = &v10[3 * v43 + 1];
LABEL_58:
              v103 = *v92;
              *v92 = *v93;
              *v93 = v103;
              *v45 = v72;
              *v16 = result;
              v91 = *v14;
              v90 = v10[3 * v13 + 2];
              goto LABEL_59;
            }
            v90 = (unint64_t)v72;
            v91 = v94;
          }
          else
          {
            v91 = *v44;
            v92 = &v10[3 * v43 + 1];
            if ((unint64_t)v72 < v90)
            {
              *v44 = *v71;
              *v71 = v91;
              v93 = &v10[3 * v70 + 1];
LABEL_57:
              v16 = (unint64_t *)(v71 + 2);
              goto LABEL_58;
            }
            *v44 = *v14;
            *v14 = v91;
            v99 = &v10[3 * v13];
            v101 = v99[1];
            v100 = v99 + 1;
            v102 = *v92;
            *v92 = v101;
            *v100 = v102;
            v44[2] = v90;
            v14[2] = result;
            if ((unint64_t)v72 < result)
            {
              *v14 = *v71;
              *v71 = v91;
              v93 = &v10[3 * v70 + 1];
              v92 = v100;
              v45 = (uint64_t **)(v14 + 2);
              goto LABEL_57;
            }
            v90 = result;
          }
LABEL_59:
          v104 = *v10;
          v105 = &v10[3 * v13];
          v106 = v105[1];
          v107 = *(_OWORD *)(v10 + 1);
          *v10 = v91;
          v10[1] = v106;
          *v14 = v104;
          v10[2] = v90;
          *(_OWORD *)(v105 + 1) = v107;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_60;
LABEL_34:
          v61 = *v10;
          v62 = v10[2];
LABEL_61:
          v108 = 0;
          v109 = v10[1];
          do
          {
            v110 = v10[v108 + 5];
            v108 += 3;
          }
          while (v110 < v62);
          v111 = &v10[v108];
          v112 = a2;
          if (v108 == 3)
          {
            v115 = a2;
            while (v111 < v115)
            {
              v113 = v115 - 3;
              v116 = *(v115 - 1);
              v115 -= 3;
              if (v116 < v62)
                goto LABEL_69;
            }
            v113 = v115;
            v10 = v111;
          }
          else
          {
            do
            {
              v113 = v112 - 3;
              v114 = *(v112 - 1);
              v112 -= 3;
            }
            while (v114 >= v62);
LABEL_69:
            v10 = v111;
            if (v111 < v113)
            {
              v117 = v113;
              do
              {
                v118 = *v10;
                *v10 = *v117;
                *v117 = v118;
                v119 = v10[1];
                v10[1] = v117[1];
                v117[1] = v119;
                v120 = v10[2];
                v10[2] = v117[2];
                v117[2] = v120;
                do
                {
                  v121 = v10[5];
                  v10 += 3;
                }
                while (v121 < v62);
                do
                {
                  v122 = *(v117 - 1);
                  v117 -= 3;
                }
                while (v122 >= v62);
              }
              while (v10 < v117);
            }
          }
          if (v10 - 3 != v7)
          {
            *v7 = *(v10 - 3);
            v7[1] = *(v10 - 2);
            v7[2] = *(v10 - 1);
          }
          *(v10 - 3) = v61;
          *(v10 - 2) = v109;
          *(v10 - 1) = v62;
          if (v111 < v113)
            goto LABEL_80;
          v123 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v7, v10 - 3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v123)
              continue;
LABEL_80:
            result = std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v123)
            return result;
          goto LABEL_2;
        }
        v162 = v10 + 3;
        v164 = v10 == a2 || v162 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v164)
          {
            v165 = 0;
            v166 = v10;
            do
            {
              v168 = v162;
              v169 = v166[5];
              if (v169 < v166[2])
              {
                v170 = *v168;
                v171 = v166[4];
                v172 = v165;
                do
                {
                  v173 = (char *)v10 + v172;
                  *(_OWORD *)(v173 + 24) = *(_OWORD *)((char *)v10 + v172);
                  *((_QWORD *)v173 + 5) = *(uint64_t *)((char *)v10 + v172 + 16);
                  if (!v172)
                  {
                    v167 = v10;
                    goto LABEL_127;
                  }
                  v172 -= 24;
                }
                while (v169 < *((_QWORD *)v173 - 1));
                v167 = (uint64_t *)((char *)v10 + v172 + 24);
LABEL_127:
                *v167 = v170;
                v167[1] = v171;
                v167[2] = v169;
              }
              v162 = v168 + 3;
              v165 += 24;
              v166 = v168;
            }
            while (v168 + 3 != a2);
          }
        }
        else if (!v164)
        {
          v210 = v10 + 5;
          do
          {
            v211 = v162;
            v212 = v7[5];
            if (v212 < v7[2])
            {
              v213 = *v211;
              v214 = v7[4];
              v215 = v210;
              do
              {
                v216 = v215;
                *((_OWORD *)v215 - 1) = *(_OWORD *)(v215 - 5);
                v217 = *(v215 - 3);
                v215 -= 3;
                *v216 = v217;
              }
              while (v212 < *(v216 - 6));
              *(v215 - 2) = v213;
              *(v215 - 1) = v214;
              *v215 = v212;
            }
            v162 = v211 + 3;
            v210 += 3;
            v7 = v211;
          }
          while (v211 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      v9 = a1 + 2;
      v10 = a1[2];
      v11 = a1 + 5;
      v12 = a1[5];
      v13 = *(a2 - 1);
      if (v12 < v10)
      {
        v14 = a1 + 1;
        v15 = *a1;
        if (v13 >= v12)
        {
          v14 = a1 + 4;
          v49 = a1[4];
          v50 = a1[1];
          *a1 = a1[3];
          a1[1] = v49;
          a1[4] = v50;
          a1[2] = v12;
          a1[3] = v15;
          a1[5] = v10;
          if (*(a2 - 1) >= v10)
            return result;
          a1[3] = *(a2 - 3);
          *(a2 - 3) = v15;
          v16 = a2 - 2;
          v9 = a1 + 5;
        }
        else
        {
          *a1 = *(a2 - 3);
          *(a2 - 3) = v15;
          v16 = a2 - 2;
        }
        v11 = a2 - 1;
        goto LABEL_27;
      }
      if (v13 < v12)
      {
        v40 = a1[3];
        a1[3] = *(a2 - 3);
        *(a2 - 3) = v40;
        v16 = a1 + 4;
        v41 = a1[4];
        a1[4] = *(a2 - 2);
        *(a2 - 2) = v41;
        v42 = a1[5];
        a1[5] = *(a2 - 1);
        *(a2 - 1) = v42;
        if (a1[5] < (unint64_t)a1[2])
        {
          v43 = *a1;
          *a1 = a1[3];
          a1[3] = v43;
          v14 = a1 + 1;
LABEL_27:
          v51 = *v14;
          *v14 = *v16;
          *v16 = v51;
          v52 = *v9;
          *v9 = *v11;
          *v11 = v52;
          return result;
        }
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) >= (unint64_t)a1[11])
        return 1;
      v25 = a1[9];
      a1[9] = *(a2 - 3);
      *(a2 - 3) = v25;
      v26 = a1[10];
      a1[10] = *(a2 - 2);
      *(a2 - 2) = v26;
      v27 = a1[11];
      a1[11] = *(a2 - 1);
      *(a2 - 1) = v27;
      v28 = a1[11];
      v29 = a1[8];
      if (v28 >= v29)
        return 1;
      v31 = a1[6];
      v30 = a1[7];
      v32 = a1[9];
      v33 = a1[10];
      v34 = a1[5];
      a1[6] = v32;
      a1[7] = v33;
      a1[8] = v28;
      a1[9] = v31;
      a1[10] = v30;
      a1[11] = v29;
      if (v28 >= v34)
        return 1;
      v36 = a1[3];
      v35 = a1[4];
      v37 = a1[2];
      a1[3] = v32;
      a1[4] = v33;
      a1[5] = v28;
      a1[6] = v36;
      a1[7] = v35;
      a1[8] = v34;
      if (v28 >= v37)
        return 1;
      v38 = *a1;
      v39 = a1[1];
      *a1 = v32;
      a1[1] = v33;
      a1[2] = v28;
      a1[3] = v38;
      a1[4] = v39;
      a1[5] = v37;
      return 1;
    default:
      v17 = a1[2];
      v18 = (unint64_t *)(a1 + 5);
      v19 = a1[5];
      v20 = a1[8];
      if (v19 < v17)
      {
        v21 = a1 + 1;
        v22 = *a1;
        if (v20 >= v19)
        {
          v21 = a1 + 4;
          v53 = a1[4];
          v54 = a1[1];
          *a1 = a1[3];
          a1[1] = v53;
          a1[4] = v54;
          a1[2] = v19;
          a1[3] = v22;
          a1[5] = v17;
          if (v20 >= v17)
            goto LABEL_32;
          a1[3] = a1[6];
          a1[6] = v22;
          v23 = a1 + 7;
          v24 = (unint64_t *)(a1 + 5);
        }
        else
        {
          *a1 = a1[6];
          a1[6] = v22;
          v23 = a1 + 7;
          v24 = (unint64_t *)(a1 + 2);
        }
        v18 = (unint64_t *)(a1 + 8);
        goto LABEL_31;
      }
      if (v20 < v19)
      {
        v23 = a1 + 4;
        v44 = a1[4];
        v45 = a1[3];
        v46 = a1[6];
        v47 = a1[7];
        a1[3] = v46;
        a1[4] = v47;
        a1[6] = v45;
        a1[7] = v44;
        a1[5] = v20;
        a1[8] = v19;
        if (v20 < v17)
        {
          v48 = *a1;
          *a1 = v46;
          a1[3] = v48;
          v21 = a1 + 1;
          v24 = (unint64_t *)(a1 + 2);
LABEL_31:
          v55 = *v21;
          *v21 = *v23;
          *v23 = v55;
          *v24 = v20;
          *v18 = v17;
        }
      }
LABEL_32:
      v56 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v57 = 0;
      v58 = 0;
      v59 = a1 + 6;
      while (1)
      {
        v60 = v56[2];
        if (v60 < v59[2])
          break;
LABEL_41:
        v59 = v56;
        v57 += 24;
        v56 += 3;
        if (v56 == a2)
          return 1;
      }
      v61 = *v56;
      v62 = v56[1];
      v63 = v57;
      do
      {
        v64 = (char *)a1 + v63;
        *(_OWORD *)(v64 + 72) = *(_OWORD *)((char *)a1 + v63 + 48);
        *((_QWORD *)v64 + 11) = *(uint64_t *)((char *)a1 + v63 + 64);
        if (v63 == -48)
        {
          *a1 = v61;
          a1[1] = v62;
          a1[2] = v60;
          if (++v58 != 8)
            goto LABEL_41;
          return v56 + 3 == a2;
        }
        v63 -= 24;
      }
      while (v60 < *((_QWORD *)v64 + 5));
      v65 = (uint64_t *)((char *)a1 + v63);
      v65[9] = v61;
      v65[10] = v62;
      v65[11] = v60;
      if (++v58 != 8)
        goto LABEL_41;
      return v56 + 3 == a2;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(uint64_t *result, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a2[2];
  v5 = result + 2;
  v6 = a3 + 2;
  v7 = a3[2];
  if (v4 >= result[2])
  {
    if (v7 < v4)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v10 = a2 + 1;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v7 = a2[2];
      a2[2] = a3[2];
      a3[2] = v7;
      if ((unint64_t)a2[2] < *v5)
      {
        v14 = *result;
        *result = *a2;
        v8 = result + 1;
        *a2 = v14;
        v11 = result + 2;
        v15 = a2 + 2;
LABEL_10:
        v19 = *v8;
        *v8 = *v10;
        *v10 = v19;
        v20 = *v11;
        *v11 = *v15;
        *v15 = v20;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = result + 1;
    v9 = *result;
    if (v7 < v4)
    {
      *result = *a3;
      *a3 = v9;
      v10 = a3 + 1;
      v11 = result + 2;
LABEL_9:
      v15 = a3 + 2;
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v9;
    v8 = a2 + 1;
    v16 = result[1];
    result[1] = a2[1];
    a2[1] = v16;
    v17 = result[2];
    result[2] = a2[2];
    a2[2] = v17;
    v7 = *v6;
    if (*v6 < v17)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v10 = a3 + 1;
      v11 = a2 + 2;
      goto LABEL_9;
    }
  }
  if (a4[2] < v7)
  {
    v21 = *a3;
    *a3 = *a4;
    *a4 = v21;
    v22 = a3[1];
    a3[1] = a4[1];
    a4[1] = v22;
    v23 = a3[2];
    a3[2] = a4[2];
    a4[2] = v23;
    if (a3[2] < (unint64_t)a2[2])
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      if ((unint64_t)a2[2] < *v5)
      {
        v27 = *result;
        *result = *a2;
        *a2 = v27;
        v28 = result[1];
        result[1] = a2[1];
        a2[1] = v28;
        v29 = result[2];
        result[2] = a2[2];
        a2[2] = v29;
      }
    }
  }
  return result;
}

char *llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>>>::shrink_and_clear(char *result)
{
  char *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_DWORD *)result &= 1u;
    *((_DWORD *)result + 1) = 0;
    v6 = result + 8;
    v7 = result + 104;
    v8 = 72;
    goto LABEL_15;
  }
  if ((v2 & 1) != 0)
  {
    if (v5 <= 4)
    {
      *(_QWORD *)result = 1;
    }
    else
    {
      *(_DWORD *)result &= ~1u;
      result = (char *)llvm::allocate_buffer(8 * (v5 + 2 * v5), (std::align_val_t)8uLL);
      *((_QWORD *)v1 + 1) = result;
      *((_QWORD *)v1 + 2) = v5;
      v13 = *(_DWORD *)v1;
      *(_QWORD *)v1 = *(_DWORD *)v1 & 1;
      if ((v13 & 1) == 0)
      {
        v14 = &result[24 * v5];
        v15 = 24 * v5 - 24;
        if (v15 < 0x18)
        {
          v17 = result;
          goto LABEL_31;
        }
LABEL_24:
        v16 = v15 / 0x18 + 1;
        v17 = &result[24 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
        v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)result = -4096;
          *((_QWORD *)result + 3) = -4096;
          result += 48;
          v18 -= 2;
        }
        while (v18);
        if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
          return result;
        do
        {
LABEL_31:
          *(_QWORD *)v17 = -4096;
          v17 += 24;
        }
        while (v17 != v14);
        return result;
      }
    }
    result = v1 + 8;
    v14 = v1 + 104;
    v15 = 72;
    goto LABEL_24;
  }
  v10 = *((unsigned int *)result + 4);
  if ((_DWORD)v5 != (_DWORD)v10)
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(24 * v10));
  *(_QWORD *)result = 0;
  if (!(_DWORD)v5)
    return result;
  v6 = (_QWORD *)*((_QWORD *)result + 1);
  v7 = &v6[3 * v5];
  v8 = 24 * v5 - 24;
  if (v8 < 0x18)
  {
    v9 = (_QWORD *)*((_QWORD *)result + 1);
    do
    {
LABEL_18:
      *v9 = -4096;
      v9 += 3;
    }
    while (v9 != v7);
    return result;
  }
LABEL_15:
  v11 = v8 / 0x18 + 1;
  v9 = &v6[3 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  v12 = v11 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *v6 = -4096;
    v6[3] = -4096;
    v6 += 6;
    v12 -= 2;
  }
  while (v12);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_18;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  BOOL v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int64_t v174;
  int64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t *v223;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v222 = a2 - 2;
  v223 = a2 - 4;
  v9 = a2 - 7;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(a2 - 1) < (unint64_t)v10[2])
        {
          v137 = *v10;
          *v10 = *(a2 - 3);
          *(a2 - 3) = v137;
          v138 = v10[1];
          v10[1] = *(a2 - 2);
          *(a2 - 2) = v138;
          v139 = v10[2];
          v10[2] = *(a2 - 1);
          *(a2 - 1) = v139;
        }
        return result;
      case 3:
        v140 = v10 + 2;
        v141 = v10[2];
        v142 = v10 + 5;
        v143 = v10[5];
        v144 = *(a2 - 1);
        if (v143 < v141)
        {
          v145 = v10 + 1;
          v146 = *v10;
          if (v144 >= v143)
          {
            v145 = v10 + 4;
            v218 = v10[4];
            v219 = v10[1];
            *v10 = v10[3];
            v10[1] = v218;
            v10[4] = v219;
            v10[2] = v143;
            v10[3] = v146;
            v10[5] = v141;
            if (*(a2 - 1) >= v141)
              return result;
            v10[3] = *(a2 - 3);
            *(a2 - 3) = v146;
            v140 = v10 + 5;
          }
          else
          {
            *v10 = *(a2 - 3);
            *(a2 - 3) = v146;
          }
          v142 = a2 - 1;
          goto LABEL_179;
        }
        if (v144 < v143)
        {
          v206 = v10[3];
          v10[3] = *(a2 - 3);
          *(a2 - 3) = v206;
          v207 = v10[4];
          v10[4] = *(a2 - 2);
          *(a2 - 2) = v207;
          v208 = v10[5];
          v10[5] = *(a2 - 1);
          *(a2 - 1) = v208;
          v222 = v10 + 4;
          if (v10[5] < (unint64_t)v10[2])
          {
            v209 = *v10;
            *v10 = v10[3];
            v10[3] = v209;
            v145 = v10 + 1;
LABEL_179:
            v220 = *v145;
            *v145 = *v222;
            *v222 = v220;
            v221 = *v140;
            *v140 = *v142;
            *v142 = v221;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, v10 + 3, v10 + 6, v10 + 9);
        if (*(a2 - 1) < (unint64_t)v10[11])
        {
          v147 = v10[9];
          v10[9] = *(a2 - 3);
          *(a2 - 3) = v147;
          v148 = v10[10];
          v10[10] = *(a2 - 2);
          *(a2 - 2) = v148;
          v149 = v10[11];
          v10[11] = *(a2 - 1);
          *(a2 - 1) = v149;
          v150 = v10[11];
          v151 = v10[8];
          if (v150 < v151)
          {
            v153 = v10[6];
            v152 = v10[7];
            v154 = v10[9];
            v155 = v10[10];
            v156 = v10[5];
            v10[6] = v154;
            v10[7] = v155;
            v10[8] = v150;
            v10[9] = v153;
            v10[10] = v152;
            v10[11] = v151;
            if (v150 < v156)
            {
              v158 = v10[3];
              v157 = v10[4];
              v159 = v10[2];
              v10[3] = v154;
              v10[4] = v155;
              v10[5] = v150;
              v10[6] = v158;
              v10[7] = v157;
              v10[8] = v156;
              if (v150 < v159)
              {
                v160 = *v10;
                v161 = v10[1];
                *v10 = v154;
                v10[1] = v155;
                v10[2] = v150;
                v10[3] = v160;
                v10[4] = v161;
                v10[5] = v159;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 575)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v174 = (unint64_t)(v12 - 2) >> 1;
              v175 = v174;
              do
              {
                if (v174 >= v175)
                {
                  v177 = (2 * v175) | 1;
                  v178 = &v10[3 * v177];
                  if (2 * v175 + 2 < v12)
                  {
                    v179 = v178[2];
                    v180 = v178[5];
                    v178 += 3 * (v179 < v180);
                    if (v179 < v180)
                      v177 = 2 * v175 + 2;
                  }
                  v181 = &v10[3 * v175];
                  v182 = v181[2];
                  if (v178[2] >= v182)
                  {
                    v184 = *v181;
                    v183 = v181[1];
                    do
                    {
                      v185 = v181;
                      v181 = v178;
                      *v185 = *v178;
                      v185[1] = v178[1];
                      v185[2] = v178[2];
                      if (v174 < v177)
                        break;
                      v186 = (2 * v177) | 1;
                      v178 = &v10[3 * v186];
                      v187 = 2 * v177 + 2;
                      if (v187 < v12)
                      {
                        v188 = v178[2];
                        v189 = v178[5];
                        v178 += 3 * (v188 < v189);
                        if (v188 < v189)
                          v186 = v187;
                      }
                      v177 = v186;
                    }
                    while (v178[2] >= v182);
                    *v181 = v184;
                    v181[1] = v183;
                    v181[2] = v182;
                  }
                }
                v176 = v175-- <= 0;
              }
              while (!v176);
              v190 = v11 / 0x18uLL;
              do
              {
                result = 0;
                v191 = *v10;
                v192 = v10[1];
                v193 = v10[2];
                v194 = v10;
                do
                {
                  v195 = &v194[3 * result + 3];
                  v196 = (2 * result) | 1;
                  v197 = 2 * result + 2;
                  if (v197 < v190)
                  {
                    v198 = v195[2];
                    v199 = v195[5];
                    v195 += 3 * (v198 < v199);
                    if (v198 < v199)
                      v196 = v197;
                  }
                  *v194 = *v195;
                  v194[1] = v195[1];
                  v194[2] = v195[2];
                  v194 = v195;
                  result = v196;
                }
                while (v196 <= (uint64_t)((unint64_t)(v190 - 2) >> 1));
                if (v195 == a2 - 3)
                {
                  *v195 = v191;
                  v195[1] = v192;
                  v195[2] = v193;
                }
                else
                {
                  *v195 = *(a2 - 3);
                  v195[1] = *(a2 - 2);
                  v195[2] = *(a2 - 1);
                  *(a2 - 3) = v191;
                  *(a2 - 2) = v192;
                  *(a2 - 1) = v193;
                  v200 = (char *)v195 - (char *)v10 + 24;
                  if (v200 >= 25)
                  {
                    v201 = (v200 / 0x18uLL - 2) >> 1;
                    v202 = &v10[3 * v201];
                    v203 = v195[2];
                    if (v202[2] < v203)
                    {
                      v204 = *v195;
                      v205 = v195[1];
                      do
                      {
                        result = (unint64_t)v195;
                        v195 = v202;
                        *(_QWORD *)result = *v202;
                        *(_QWORD *)(result + 8) = v202[1];
                        *(_QWORD *)(result + 16) = v202[2];
                        if (!v201)
                          break;
                        v201 = (v201 - 1) >> 1;
                        v202 = &v10[3 * v201];
                        result = v202[2];
                      }
                      while (result < v203);
                      *v195 = v204;
                      v195[1] = v205;
                      v195[2] = v203;
                    }
                  }
                }
                a2 -= 3;
                v176 = v190-- <= 2;
              }
              while (!v176);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *v8;
          if ((unint64_t)v11 < 0xC01)
          {
            v23 = v10 + 2;
            v24 = v10[2];
            v25 = v14 + 2;
            v26 = v14[2];
            if (v24 < v26)
            {
              v27 = *v14;
              v28 = &v10[3 * v13 + 1];
              if (v15 >= v24)
              {
                *v14 = *v10;
                *v10 = v27;
                v58 = *v28;
                *v28 = v10[1];
                v10[1] = v58;
                v14[2] = v24;
                v10[2] = v26;
                if (*v8 >= v26)
                  goto LABEL_33;
                *v10 = *(a2 - 3);
                *(a2 - 3) = v27;
                v28 = v10 + 1;
                v29 = a2 - 2;
                v25 = v10 + 2;
              }
              else
              {
                *v14 = *(a2 - 3);
                *(a2 - 3) = v27;
                v29 = a2 - 2;
              }
              v23 = a2 - 1;
              goto LABEL_32;
            }
            if (v15 < v24)
            {
              v36 = *v10;
              *v10 = *(a2 - 3);
              *(a2 - 3) = v36;
              v29 = v10 + 1;
              v37 = v10[1];
              v10[1] = *(a2 - 2);
              *(a2 - 2) = v37;
              v38 = v10[2];
              v10[2] = *(a2 - 1);
              *(a2 - 1) = v38;
              if (v10[2] < (unint64_t)*v25)
              {
                v39 = *v14;
                *v14 = *v10;
                *v10 = v39;
                v28 = &v10[3 * v13 + 1];
LABEL_32:
                v59 = *v28;
                *v28 = *v29;
                *v29 = v59;
                v60 = *v25;
                *v25 = *v23;
                *v23 = v60;
              }
            }
LABEL_33:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_34;
LABEL_60:
            v61 = *v10;
            v62 = v10[2];
            if (*(v10 - 1) < v62)
              goto LABEL_61;
            if (v62 >= *v8)
            {
              v126 = v10 + 3;
              do
              {
                v10 = v126;
                if (v126 >= a2)
                  break;
                v127 = v126[2];
                v126 += 3;
              }
              while (v62 >= v127);
            }
            else
            {
              v124 = v10;
              do
              {
                v10 = v124 + 3;
                v125 = v124[5];
                v124 += 3;
              }
              while (v62 >= v125);
            }
            v128 = a2;
            if (v10 < a2)
            {
              v129 = a2;
              do
              {
                v128 = v129 - 3;
                v130 = *(v129 - 1);
                v129 -= 3;
              }
              while (v62 < v130);
            }
            v131 = v7[1];
            while (v10 < v128)
            {
              v132 = *v10;
              *v10 = *v128;
              *v128 = v132;
              v133 = v10[1];
              v10[1] = v128[1];
              v128[1] = v133;
              v134 = v10[2];
              v10[2] = v128[2];
              v128[2] = v134;
              do
              {
                v135 = v10[5];
                v10 += 3;
              }
              while (v62 >= v135);
              do
              {
                v136 = *(v128 - 1);
                v128 -= 3;
              }
              while (v62 < v136);
            }
            if (v10 - 3 != v7)
            {
              *v7 = *(v10 - 3);
              v7[1] = *(v10 - 2);
              v7[2] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 3) = v61;
            *(v10 - 2) = v131;
            *(v10 - 1) = v62;
            continue;
          }
          v16 = (unint64_t *)(v14 + 2);
          v17 = v14[2];
          v18 = v10 + 2;
          v19 = v10[2];
          if (v17 < v19)
          {
            v20 = v10 + 1;
            v21 = *v10;
            if (v15 >= v17)
            {
              *v10 = *v14;
              *v14 = v21;
              v40 = v10[1];
              v20 = &v10[3 * v13 + 1];
              v10[1] = *v20;
              *v20 = v40;
              v10[2] = v17;
              v14[2] = v19;
              if (*v8 >= v19)
                goto LABEL_23;
              *v14 = *(a2 - 3);
              *(a2 - 3) = v21;
              v22 = a2 - 2;
              v18 = v14 + 2;
            }
            else
            {
              *v10 = *(a2 - 3);
              *(a2 - 3) = v21;
              v22 = a2 - 2;
            }
            v35 = a2 - 1;
            goto LABEL_22;
          }
          if (v15 < v17)
          {
            v30 = *v14;
            *v14 = *(a2 - 3);
            *(a2 - 3) = v30;
            v31 = &v10[3 * v13];
            v32 = v31[1];
            v22 = v31 + 1;
            *v22 = *(a2 - 2);
            *(a2 - 2) = v32;
            v33 = v14[2];
            v14[2] = *(a2 - 1);
            *(a2 - 1) = v33;
            if (v14[2] < (unint64_t)v10[2])
            {
              v34 = *v10;
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v34;
              v35 = v14 + 2;
LABEL_22:
              v41 = *v20;
              *v20 = *v22;
              *v22 = v41;
              v42 = *v18;
              *v18 = *v35;
              *v35 = v42;
            }
          }
LABEL_23:
          v43 = v13 - 1;
          v44 = &v10[3 * v13 - 3];
          v45 = (uint64_t **)(v44 + 2);
          v46 = v44[2];
          v47 = v10 + 5;
          v48 = *v223;
          if (v46 < v10[5])
          {
            v49 = v10[3];
            if (v48 >= v46)
            {
              v10[3] = *v44;
              *v44 = v49;
              v63 = &v10[3 * v43];
              v64 = v63[1];
              v50 = v63 + 1;
              v65 = v10[4];
              v10[4] = v64;
              *v50 = v65;
              v66 = v10[5];
              v10[5] = v44[2];
              v44[2] = v66;
              if (*v223 >= v66)
                goto LABEL_39;
              v67 = *v44;
              *v44 = *(a2 - 6);
              *(a2 - 6) = v67;
              v51 = a2 - 5;
              v47 = v44 + 2;
            }
            else
            {
              v50 = v10 + 4;
              v10[3] = *(a2 - 6);
              *(a2 - 6) = v49;
              v51 = a2 - 5;
            }
            v57 = a2 - 4;
            goto LABEL_38;
          }
          if (v48 < v46)
          {
            v52 = *v44;
            *v44 = *(a2 - 6);
            *(a2 - 6) = v52;
            v53 = &v10[3 * v43];
            v54 = v53[1];
            v51 = v53 + 1;
            *v51 = *(a2 - 5);
            *(a2 - 5) = v54;
            v55 = v44[2];
            v44[2] = *(a2 - 4);
            *(a2 - 4) = v55;
            if (v44[2] < (unint64_t)v10[5])
            {
              v56 = v10[3];
              v10[3] = *v44;
              *v44 = v56;
              v50 = v10 + 4;
              v57 = v44 + 2;
LABEL_38:
              v68 = *v50;
              *v50 = *v51;
              *v51 = v68;
              v69 = *v47;
              *v47 = *v57;
              *v57 = v69;
            }
          }
LABEL_39:
          v70 = v13 + 1;
          v71 = &v10[3 * v13 + 3];
          v72 = (uint64_t *)v71[2];
          v73 = v10 + 8;
          v74 = *v9;
          if ((unint64_t)v72 < v10[8])
          {
            v75 = v10[6];
            if (v74 >= (unint64_t)v72)
            {
              v10[6] = *v71;
              *v71 = v75;
              v84 = &v10[3 * v70];
              v85 = v84[1];
              v76 = v84 + 1;
              v86 = v10[7];
              v10[7] = v85;
              *v76 = v86;
              v72 = (uint64_t *)v10[8];
              v10[8] = v71[2];
              v71[2] = (uint64_t)v72;
              if (*v9 >= (unint64_t)v72)
                goto LABEL_49;
              v87 = *v71;
              *v71 = *(a2 - 9);
              *(a2 - 9) = v87;
              v77 = a2 - 8;
              v73 = v71 + 2;
            }
            else
            {
              v76 = v10 + 7;
              v10[6] = *(a2 - 9);
              *(a2 - 9) = v75;
              v77 = a2 - 8;
            }
            v83 = a2 - 7;
            goto LABEL_48;
          }
          if (v74 < (unint64_t)v72)
          {
            v78 = *v71;
            *v71 = *(a2 - 9);
            *(a2 - 9) = v78;
            v79 = &v10[3 * v70];
            v80 = v79[1];
            v77 = v79 + 1;
            *v77 = *(a2 - 8);
            *(a2 - 8) = v80;
            v81 = v71[2];
            v71[2] = *(a2 - 7);
            *(a2 - 7) = v81;
            v72 = (uint64_t *)v71[2];
            if ((unint64_t)v72 < v10[8])
            {
              v82 = v10[6];
              v10[6] = *v71;
              *v71 = v82;
              v76 = v10 + 7;
              v83 = v71 + 2;
LABEL_48:
              v88 = *v76;
              *v76 = *v77;
              *v77 = v88;
              v89 = *v73;
              *v73 = *v83;
              *v83 = v89;
              v72 = (uint64_t *)v71[2];
            }
          }
LABEL_49:
          v90 = *v16;
          result = (unint64_t)*v45;
          if (*v16 >= (unint64_t)*v45)
          {
            v91 = *v14;
            if ((unint64_t)v72 >= v90)
              goto LABEL_59;
            v94 = *v71;
            *v14 = *v71;
            *v71 = v91;
            v95 = &v10[3 * v13];
            v96 = v95[1];
            v93 = v95 + 1;
            v97 = &v10[3 * v70];
            *v93 = v97[1];
            v97[1] = v96;
            v14[2] = (uint64_t)v72;
            v71[2] = v90;
            if ((unint64_t)v72 < result)
            {
              v98 = *v44;
              *v44 = v94;
              *v14 = v98;
              v92 = &v10[3 * v43 + 1];
LABEL_58:
              v103 = *v92;
              *v92 = *v93;
              *v93 = v103;
              *v45 = v72;
              *v16 = result;
              v91 = *v14;
              v90 = v10[3 * v13 + 2];
              goto LABEL_59;
            }
            v90 = (unint64_t)v72;
            v91 = v94;
          }
          else
          {
            v91 = *v44;
            v92 = &v10[3 * v43 + 1];
            if ((unint64_t)v72 < v90)
            {
              *v44 = *v71;
              *v71 = v91;
              v93 = &v10[3 * v70 + 1];
LABEL_57:
              v16 = (unint64_t *)(v71 + 2);
              goto LABEL_58;
            }
            *v44 = *v14;
            *v14 = v91;
            v99 = &v10[3 * v13];
            v101 = v99[1];
            v100 = v99 + 1;
            v102 = *v92;
            *v92 = v101;
            *v100 = v102;
            v44[2] = v90;
            v14[2] = result;
            if ((unint64_t)v72 < result)
            {
              *v14 = *v71;
              *v71 = v91;
              v93 = &v10[3 * v70 + 1];
              v92 = v100;
              v45 = (uint64_t **)(v14 + 2);
              goto LABEL_57;
            }
            v90 = result;
          }
LABEL_59:
          v104 = *v10;
          v105 = &v10[3 * v13];
          v106 = v105[1];
          v107 = *(_OWORD *)(v10 + 1);
          *v10 = v91;
          v10[1] = v106;
          *v14 = v104;
          v10[2] = v90;
          *(_OWORD *)(v105 + 1) = v107;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_60;
LABEL_34:
          v61 = *v10;
          v62 = v10[2];
LABEL_61:
          v108 = 0;
          v109 = v10[1];
          do
          {
            v110 = v10[v108 + 5];
            v108 += 3;
          }
          while (v110 < v62);
          v111 = &v10[v108];
          v112 = a2;
          if (v108 == 3)
          {
            v115 = a2;
            while (v111 < v115)
            {
              v113 = v115 - 3;
              v116 = *(v115 - 1);
              v115 -= 3;
              if (v116 < v62)
                goto LABEL_69;
            }
            v113 = v115;
            v10 = v111;
          }
          else
          {
            do
            {
              v113 = v112 - 3;
              v114 = *(v112 - 1);
              v112 -= 3;
            }
            while (v114 >= v62);
LABEL_69:
            v10 = v111;
            if (v111 < v113)
            {
              v117 = v113;
              do
              {
                v118 = *v10;
                *v10 = *v117;
                *v117 = v118;
                v119 = v10[1];
                v10[1] = v117[1];
                v117[1] = v119;
                v120 = v10[2];
                v10[2] = v117[2];
                v117[2] = v120;
                do
                {
                  v121 = v10[5];
                  v10 += 3;
                }
                while (v121 < v62);
                do
                {
                  v122 = *(v117 - 1);
                  v117 -= 3;
                }
                while (v122 >= v62);
              }
              while (v10 < v117);
            }
          }
          if (v10 - 3 != v7)
          {
            *v7 = *(v10 - 3);
            v7[1] = *(v10 - 2);
            v7[2] = *(v10 - 1);
          }
          *(v10 - 3) = v61;
          *(v10 - 2) = v109;
          *(v10 - 1) = v62;
          if (v111 < v113)
            goto LABEL_80;
          v123 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v7, v10 - 3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v123)
              continue;
LABEL_80:
            result = std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *,false>(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v123)
            return result;
          goto LABEL_2;
        }
        v162 = v10 + 3;
        v164 = v10 == a2 || v162 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v164)
          {
            v165 = 0;
            v166 = v10;
            do
            {
              v168 = v162;
              v169 = v166[5];
              if (v169 < v166[2])
              {
                v170 = *v168;
                v171 = v166[4];
                v172 = v165;
                do
                {
                  v173 = (char *)v10 + v172;
                  *(_OWORD *)(v173 + 24) = *(_OWORD *)((char *)v10 + v172);
                  *((_QWORD *)v173 + 5) = *(uint64_t *)((char *)v10 + v172 + 16);
                  if (!v172)
                  {
                    v167 = v10;
                    goto LABEL_127;
                  }
                  v172 -= 24;
                }
                while (v169 < *((_QWORD *)v173 - 1));
                v167 = (uint64_t *)((char *)v10 + v172 + 24);
LABEL_127:
                *v167 = v170;
                v167[1] = v171;
                v167[2] = v169;
              }
              v162 = v168 + 3;
              v165 += 24;
              v166 = v168;
            }
            while (v168 + 3 != a2);
          }
        }
        else if (!v164)
        {
          v210 = v10 + 5;
          do
          {
            v211 = v162;
            v212 = v7[5];
            if (v212 < v7[2])
            {
              v213 = *v211;
              v214 = v7[4];
              v215 = v210;
              do
              {
                v216 = v215;
                *((_OWORD *)v215 - 1) = *(_OWORD *)(v215 - 5);
                v217 = *(v215 - 3);
                v215 -= 3;
                *v216 = v217;
              }
              while (v212 < *(v216 - 6));
              *(v215 - 2) = v213;
              *(v215 - 1) = v214;
              *v215 = v212;
            }
            v162 = v211 + 3;
            v210 += 3;
            v7 = v211;
          }
          while (v211 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      v9 = a1 + 2;
      v10 = a1[2];
      v11 = a1 + 5;
      v12 = a1[5];
      v13 = *(a2 - 1);
      if (v12 < v10)
      {
        v14 = a1 + 1;
        v15 = *a1;
        if (v13 >= v12)
        {
          v14 = a1 + 4;
          v49 = a1[4];
          v50 = a1[1];
          *a1 = a1[3];
          a1[1] = v49;
          a1[4] = v50;
          a1[2] = v12;
          a1[3] = v15;
          a1[5] = v10;
          if (*(a2 - 1) >= v10)
            return result;
          a1[3] = *(a2 - 3);
          *(a2 - 3) = v15;
          v16 = a2 - 2;
          v9 = a1 + 5;
        }
        else
        {
          *a1 = *(a2 - 3);
          *(a2 - 3) = v15;
          v16 = a2 - 2;
        }
        v11 = a2 - 1;
        goto LABEL_27;
      }
      if (v13 < v12)
      {
        v40 = a1[3];
        a1[3] = *(a2 - 3);
        *(a2 - 3) = v40;
        v16 = a1 + 4;
        v41 = a1[4];
        a1[4] = *(a2 - 2);
        *(a2 - 2) = v41;
        v42 = a1[5];
        a1[5] = *(a2 - 1);
        *(a2 - 1) = v42;
        if (a1[5] < (unint64_t)a1[2])
        {
          v43 = *a1;
          *a1 = a1[3];
          a1[3] = v43;
          v14 = a1 + 1;
LABEL_27:
          v51 = *v14;
          *v14 = *v16;
          *v16 = v51;
          v52 = *v9;
          *v9 = *v11;
          *v11 = v52;
          return result;
        }
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::Metadata *)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *,llvm::DebugValueUser *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) >= (unint64_t)a1[11])
        return 1;
      v25 = a1[9];
      a1[9] = *(a2 - 3);
      *(a2 - 3) = v25;
      v26 = a1[10];
      a1[10] = *(a2 - 2);
      *(a2 - 2) = v26;
      v27 = a1[11];
      a1[11] = *(a2 - 1);
      *(a2 - 1) = v27;
      v28 = a1[11];
      v29 = a1[8];
      if (v28 >= v29)
        return 1;
      v31 = a1[6];
      v30 = a1[7];
      v32 = a1[9];
      v33 = a1[10];
      v34 = a1[5];
      a1[6] = v32;
      a1[7] = v33;
      a1[8] = v28;
      a1[9] = v31;
      a1[10] = v30;
      a1[11] = v29;
      if (v28 >= v34)
        return 1;
      v36 = a1[3];
      v35 = a1[4];
      v37 = a1[2];
      a1[3] = v32;
      a1[4] = v33;
      a1[5] = v28;
      a1[6] = v36;
      a1[7] = v35;
      a1[8] = v34;
      if (v28 >= v37)
        return 1;
      v38 = *a1;
      v39 = a1[1];
      *a1 = v32;
      a1[1] = v33;
      a1[2] = v28;
      a1[3] = v38;
      a1[4] = v39;
      a1[5] = v37;
      return 1;
    default:
      v17 = a1[2];
      v18 = (unint64_t *)(a1 + 5);
      v19 = a1[5];
      v20 = a1[8];
      if (v19 < v17)
      {
        v21 = a1 + 1;
        v22 = *a1;
        if (v20 >= v19)
        {
          v21 = a1 + 4;
          v53 = a1[4];
          v54 = a1[1];
          *a1 = a1[3];
          a1[1] = v53;
          a1[4] = v54;
          a1[2] = v19;
          a1[3] = v22;
          a1[5] = v17;
          if (v20 >= v17)
            goto LABEL_32;
          a1[3] = a1[6];
          a1[6] = v22;
          v23 = a1 + 7;
          v24 = (unint64_t *)(a1 + 5);
        }
        else
        {
          *a1 = a1[6];
          a1[6] = v22;
          v23 = a1 + 7;
          v24 = (unint64_t *)(a1 + 2);
        }
        v18 = (unint64_t *)(a1 + 8);
        goto LABEL_31;
      }
      if (v20 < v19)
      {
        v23 = a1 + 4;
        v44 = a1[4];
        v45 = a1[3];
        v46 = a1[6];
        v47 = a1[7];
        a1[3] = v46;
        a1[4] = v47;
        a1[6] = v45;
        a1[7] = v44;
        a1[5] = v20;
        a1[8] = v19;
        if (v20 < v17)
        {
          v48 = *a1;
          *a1 = v46;
          a1[3] = v48;
          v21 = a1 + 1;
          v24 = (unint64_t *)(a1 + 2);
LABEL_31:
          v55 = *v21;
          *v21 = *v23;
          *v23 = v55;
          *v24 = v20;
          *v18 = v17;
        }
      }
LABEL_32:
      v56 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v57 = 0;
      v58 = 0;
      v59 = a1 + 6;
      while (1)
      {
        v60 = v56[2];
        if (v60 < v59[2])
          break;
LABEL_41:
        v59 = v56;
        v57 += 24;
        v56 += 3;
        if (v56 == a2)
          return 1;
      }
      v61 = *v56;
      v62 = v56[1];
      v63 = v57;
      do
      {
        v64 = (char *)a1 + v63;
        *(_OWORD *)(v64 + 72) = *(_OWORD *)((char *)a1 + v63 + 48);
        *((_QWORD *)v64 + 11) = *(uint64_t *)((char *)a1 + v63 + 64);
        if (v63 == -48)
        {
          *a1 = v61;
          a1[1] = v62;
          a1[2] = v60;
          if (++v58 != 8)
            goto LABEL_41;
          return v56 + 3 == a2;
        }
        v63 -= 24;
      }
      while (v60 < *((_QWORD *)v64 + 5));
      v65 = (uint64_t *)((char *)a1 + v63);
      v65[9] = v61;
      v65[10] = v62;
      v65[11] = v60;
      if (++v58 != 8)
        goto LABEL_41;
      return v56 + 3 == a2;
  }
}

void llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = 8 * v2;
      v6 = 8 * a2 - v5;
      v7 = (unsigned __int8 **)(v5 + *(_QWORD *)a1 - 8);
      do
      {
        if (*v7)
          llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
        --v7;
        v6 += 8;
      }
      while (v6);
      goto LABEL_18;
    }
    if (*(unsigned int *)(a1 + 12) >= a2)
    {
      v9 = *(_QWORD **)a1;
      if (v2 == a2)
      {
LABEL_18:
        *(_DWORD *)(a1 + 8) = a2;
        return;
      }
    }
    else
    {
      v17 = 0;
      v8 = a1 + 16;
      v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v17);
      llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(a1, v9);
      v10 = v17;
      if (*(_QWORD *)a1 != v8)
        free(*(void **)a1);
      *(_QWORD *)a1 = v9;
      *(_DWORD *)(a1 + 12) = v10;
      v2 = *(unsigned int *)(a1 + 8);
      if (v2 == a2)
        goto LABEL_18;
    }
    v11 = v2;
    v12 = &v9[v2];
    v13 = 8 * a2 - v11 * 8 - 8;
    if (v13 < 0x18)
      goto LABEL_21;
    v14 = (v13 >> 3) + 1;
    v12 += v14 & 0x3FFFFFFFFFFFFFFCLL;
    v15 = &v9[v11 + 2];
    v16 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      *(v15 - 1) = 0uLL;
      *v15 = 0uLL;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      do
        *v12++ = 0;
      while (v12 != &v9[a2]);
    }
    goto LABEL_18;
  }
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 ***)result;
  v6 = 8 * v2;
  do
  {
    *a2 = 0;
    v7 = (uint64_t)*v5;
    *a2 = *v5;
    if (v7)
    {
      v8 = (uint64_t)*v5;
      v9 = **v5;
      if ((v9 - 5) > 0x1E)
      {
        if (v9 == 4)
          v11 = (uint64_t)*v5;
        else
          v11 = 0;
        if (v9 == 4)
        {
          result = v11 + 8;
LABEL_4:
          result = llvm::ReplaceableMetadataImpl::moveRef(result, (uint64_t)v5, (uint64_t)a2);
          goto LABEL_5;
        }
        if ((v9 - 3) >= 0xFFFFFFFE)
        {
          result = v8 + 8;
          goto LABEL_4;
        }
      }
      else if ((*(_BYTE *)(v8 + 1) & 0x7F) == 2 || *(_DWORD *)(v8 - 8))
      {
        v10 = *(_QWORD *)(v8 + 8);
        if ((v10 & 4) != 0)
        {
          result = v10 & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
            goto LABEL_4;
        }
      }
    }
LABEL_5:
    *v5++ = 0;
    ++a2;
    v6 -= 8;
  }
  while (v6);
  v12 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)v4;
    v14 = 8 * v12;
    v15 = v13 - 8;
    do
    {
      result = v15 + v14;
      v16 = *(unsigned __int8 **)(v15 + v14);
      if (v16)
        result = llvm::MetadataTracking::untrack(result, v16);
      v14 -= 8;
    }
    while (v14);
  }
  return result;
}

int64x2_t *llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(int64x2_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64x2_t *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int32 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = result;
  v6 = result[1].u32[0];
  if (!v6)
    goto LABEL_23;
  v7 = result->i64[0];
  v8 = v6 - 1;
  v9 = *(_DWORD *)(*a2 + 4) & (v6 - 1);
  v10 = (_QWORD *)(result->i64[0] + 8 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = 1;
  while (v11 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8192;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (_QWORD *)(v7 + 8 * (v17 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v14)
    v10 = v14;
  v18 = result->i32[2];
  if (4 * v18 + 4 < 3 * v6)
  {
    if (v6 + ~v18 - result->i32[3] > v6 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v6 *= 2;
  }
  result = llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow((uint64_t)result, v6);
  v6 = v4[1].u32[0];
  v13 = *a2;
  v19 = v6 - 1;
  v20 = *(_DWORD *)(*a2 + 4) & (v6 - 1);
  v10 = (_QWORD *)(v4->i64[0] + 8 * v20);
  v21 = *v10;
  if (*a2 == *v10)
    goto LABEL_7;
  v22 = 0;
  v23 = 1;
  while (v21 != -4096)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -8192;
    if (v24)
      v22 = v10;
    v25 = v20 + v23++;
    v20 = v25 & v19;
    v10 = (_QWORD *)(v4->i64[0] + 8 * (v25 & v19));
    v21 = *v10;
    if (v13 == *v10)
      goto LABEL_7;
  }
  if (v22)
    v10 = v22;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++v4->i32[2];
  if (v13 != -4096)
    --v4->i32[3];
  *v10 = *a2;
  v7 = v4->i64[0];
  v12 = 1;
LABEL_10:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v7 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

int64x2_t *llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  int v17;
  int v18;
  llvm *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_39;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != (char *)result + 8 * v11);
      }
    }
    if ((_DWORD)v3)
    {
      v17 = 0;
      v18 = v11 - 1;
      v19 = v4;
      do
      {
        v28 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v29 = *(_DWORD *)(v28 + 4) & v18;
          v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
          v30 = *v27;
          if (v28 != *v27)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -4096)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -8192;
              if (v33)
                v31 = v27;
              v34 = v29 + v32++;
              v29 = v34 & v18;
              v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v34 & v18));
              v30 = *v27;
              if (v28 == *v27)
                goto LABEL_23;
            }
            if (v31)
              v27 = v31;
          }
LABEL_23:
          *v27 = v28;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v19 = (llvm *)((char *)v19 + 8);
      }
      while (v19 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v21 < 3)
      goto LABEL_18;
    v22 = v21 + 1;
    v10 = &result->i8[8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = result + 1;
    v24 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23[-1] = v24;
      *v23 = v24;
      v23 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v26 = &result->i8[8 * v20];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v26);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>(uint64_t *a1, llvm::DINode **a2, llvm::DINode ***a3)
{
  int v4;
  uint64_t v6;
  llvm::DINode *v7;
  unint64_t v8;
  uint64_t v9;
  llvm::DINode **v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  llvm::DINode *v17;
  llvm::DINode **v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int Tag;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26[3];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    Tag = llvm::DINode::getTag(*a2);
    v8 = *((_QWORD *)v7 - 2);
    if ((v8 & 2) != 0)
      v9 = *((_QWORD *)v7 - 4);
    else
      v9 = (uint64_t)v7 - 8 * ((v8 >> 2) & 0xF) - 16;
    v12 = *((_QWORD *)v7 + 3);
    v23 = *(_QWORD *)(v9 + 16);
    v24 = v12;
    v13 = *((_DWORD *)v7 + 10);
    v25 = *((_DWORD *)v7 + 1);
    v26[0] = v13;
    v26[1] = *((_DWORD *)v7 + 5);
    v14 = llvm::hash_combine<unsigned int,llvm::MDString *,unsigned long long,unsigned int,unsigned int>(&Tag, &v23, &v24, &v25, v26);
    v15 = v4 - 1;
    v16 = (v4 - 1) & v14;
    v10 = (llvm::DINode **)(v6 + 8 * v16);
    v17 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      result = 1;
      while (v17 != (llvm::DINode *)-4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == (llvm::DINode *)-8192;
        if (v20)
          v18 = v10;
        v21 = v16 + v19++;
        v16 = v21 & v15;
        v10 = (llvm::DINode **)(v6 + 8 * (v21 & v15));
        v17 = *v10;
        if (*a2 == *v10)
          goto LABEL_8;
      }
      result = 0;
      if (v18)
        v10 = v18;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v10;
  return result;
}

llvm::DINode **llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucketImpl<llvm::DIBasicType *>(uint64_t a1, uint64_t a2, llvm::DINode **a3, llvm::DINode **a4)
{
  int v6;
  unsigned int v7;
  llvm::DINode **v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == (llvm::DINode *)-4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (llvm::DINode *)-4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm::DINode **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  llvm::DINode **v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (llvm::DINode **)v4;
      do
      {
        if (((unint64_t)*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(uint64_t a1, uint64_t this)
{
  _BYTE *v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  llvm::DINode *v11;

  if ((this | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v5 = *(_BYTE **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  if (v5)
    v7 = *(_DWORD *)a1 == 13;
  else
    v7 = 0;
  v8 = !v7 || v6 == 0;
  if (v8 || *v5 != 14)
    return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, this);
  v9 = *((_QWORD *)v5 - 2);
  if ((v9 & 2) != 0)
  {
    if (!*(_QWORD *)(*((_QWORD *)v5 - 4) + 56))
      return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, this);
  }
  else if (!*(_QWORD *)&v5[-8 * ((v9 >> 2) & 0xF) + 40])
  {
    return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, this);
  }
  if (llvm::DINode::getTag((llvm::DINode *)this) != 13)
    return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, this);
  v10 = *(_QWORD *)(this - 16);
  v11 = (v10 & 2) != 0 ? *(llvm::DINode **)(this - 32) : (llvm::DINode *)(this - 16 - 8 * ((v10 >> 2) & 0xF));
  if (*((_QWORD *)v11 + 2) != v6 || *((_BYTE **)v11 + 1) != v5)
    return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, this);
  return 1;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isSubsetEqual(llvm::DINode *a1, llvm::DINode *a2)
{
  int Tag;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  Tag = llvm::DINode::getTag(a1);
  v5 = *((_QWORD *)a1 - 2);
  if ((v5 & 2) != 0)
  {
    v11 = *((_QWORD *)a1 - 4);
    v7 = *(_BYTE **)(v11 + 8);
    v8 = *(_QWORD *)(v11 + 16);
    if (v7)
      v12 = Tag == 13;
    else
      v12 = 0;
    if (!v12 || v8 == 0)
      return 0;
  }
  else
  {
    v6 = (uint64_t)a1 - 8 * ((v5 >> 2) & 0xF) - 16;
    v7 = *(_BYTE **)(v6 + 8);
    v8 = *(_QWORD *)(v6 + 16);
    if (v7)
      v9 = Tag == 13;
    else
      v9 = 0;
    if (!v9 || v8 == 0)
      return 0;
  }
  if (*v7 == 14)
  {
    v14 = *((_QWORD *)v7 - 2);
    if ((v14 & 2) != 0)
    {
      if (!*(_QWORD *)(*((_QWORD *)v7 - 4) + 56))
        return 0;
    }
    else if (!*(_QWORD *)&v7[-8 * ((v14 >> 2) & 0xF) + 40])
    {
      return 0;
    }
    if (llvm::DINode::getTag(a2) == 13)
    {
      v15 = *((_QWORD *)a2 - 2);
      if ((v15 & 2) != 0)
      {
        v16 = *((_QWORD *)a2 - 4);
        if (*(_QWORD *)(v16 + 16) == v8)
          return *(_QWORD *)(v16 + 8) == (_QWORD)v7;
      }
      else
      {
        v16 = (uint64_t)a2 - 8 * ((v15 >> 2) & 0xF) - 16;
        if (*((_QWORD *)a2 - ((v15 >> 2) & 0xF)) == v8)
          return *(_QWORD *)(v16 + 8) == (_QWORD)v7;
      }
    }
  }
  return 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>(uint64_t *a1, llvm::DINode **a2, llvm::DINode ***a3)
{
  int v4;
  uint64_t v6;
  llvm::DINode *v7;
  unint64_t v8;
  uint64_t v9;
  llvm::DINode **v10;
  uint64_t result;
  int v12;
  int v13;
  unsigned int v14;
  llvm::DINode *v15;
  llvm::DINode **v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int Tag;
  __int128 v21;
  char v22[8];
  uint64_t v23;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    Tag = llvm::DINode::getTag(*a2);
    v8 = *((_QWORD *)v7 - 2);
    if ((v8 & 2) != 0)
      v9 = *((_QWORD *)v7 - 4);
    else
      v9 = (uint64_t)v7 - 8 * ((v8 >> 2) & 0xF) - 16;
    v21 = *(_OWORD *)v9;
    v22[0] = *((_BYTE *)v7 + 1) >> 7;
    v23 = *(_QWORD *)(v9 + 16);
    v12 = llvm::hash_combine<unsigned int,llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(&Tag, (uint64_t *)&v21, (uint64_t *)&v21 + 1, v22, &v23);
    v13 = v4 - 1;
    v14 = (v4 - 1) & v12;
    v10 = (llvm::DINode **)(v6 + 8 * v14);
    v15 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v15 != (llvm::DINode *)-4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == (llvm::DINode *)-8192;
        if (v18)
          v16 = v10;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        v10 = (llvm::DINode **)(v6 + 8 * (v19 & v13));
        v15 = *v10;
        if (*a2 == *v10)
          goto LABEL_8;
      }
      result = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v10;
  return result;
}

llvm::DINode **llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucketImpl<llvm::DITemplateValueParameter *>(uint64_t a1, uint64_t a2, llvm::DINode **a3, llvm::DINode **a4)
{
  int v6;
  unsigned int v7;
  llvm::DINode **v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == (llvm::DINode *)-4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (llvm::DINode *)-4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  llvm::DINode **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  llvm::DINode **v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (llvm::DINode **)v4;
      do
      {
        if (((unint64_t)*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2)
    return result;
  v4 = result;
  v5 = *(_QWORD **)result;
  v6 = 8 * v2;
  do
  {
    *a2 = *v5;
    v7 = (unsigned __int8 *)*v5;
    if (*v5)
    {
      v8 = *v7;
      if ((v8 - 5) > 0x1E)
      {
        if (v8 == 4)
          v10 = *v5;
        else
          v10 = 0;
        if (v8 == 4)
        {
          result = v10 + 8;
        }
        else
        {
          if ((v8 - 3) < 0xFFFFFFFE)
            goto LABEL_5;
          result = (uint64_t)(v7 + 8);
        }
      }
      else
      {
        if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 - 2))
          goto LABEL_5;
        v9 = *((_QWORD *)v7 + 1);
        if ((v9 & 4) == 0)
          goto LABEL_5;
        result = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_5;
      }
      result = llvm::ReplaceableMetadataImpl::moveRef(result, (uint64_t)v5, (uint64_t)a2);
LABEL_5:
      *v5 = 0;
    }
    ++a2;
    ++v5;
    v6 -= 8;
  }
  while (v6);
  v11 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)v4;
    v13 = 8 * v11;
    v14 = v12 - 8;
    do
    {
      result = v14 + v13;
      v15 = *(unsigned __int8 **)(v14 + v13);
      if (v15)
        result = llvm::MetadataTracking::untrack(result, v15);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

__int128 *std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__int128 *result, __int128 *a2, uint64_t a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  __int128 *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  char *v13;
  unint64_t v15;
  __int128 *v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  char *v29;
  __int128 *v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  unint64_t v37;
  __int128 *v38;
  char *v39;

  if (a4 >= 2)
  {
    v7 = result;
    if (a4 == 2)
    {
      v8 = *((_DWORD *)a2 - 4);
      v9 = *(_DWORD *)result;
      if (v8 < *(_DWORD *)result)
      {
        *(_DWORD *)result = v8;
        *((_DWORD *)a2 - 4) = v9;
        v10 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (result != a2)
      {
        v18 = result + 1;
        if (result + 1 != a2)
        {
          v19 = 0;
          v20 = result;
          do
          {
            v22 = v18;
            v23 = *((_DWORD *)v20 + 4);
            v24 = *(_DWORD *)v20;
            if (v23 < *(_DWORD *)v20)
            {
              v25 = *((_QWORD *)v20 + 3);
              v26 = v19;
              do
              {
                v27 = (char *)result + v26;
                *((_DWORD *)v27 + 4) = v24;
                *((_QWORD *)v27 + 3) = *(_QWORD *)((char *)result + v26 + 8);
                if (!v26)
                {
                  v21 = (uint64_t)result;
                  goto LABEL_13;
                }
                v24 = *((_DWORD *)v27 - 4);
                v26 -= 16;
              }
              while (v23 < v24);
              v21 = (uint64_t)result + v26 + 16;
LABEL_13:
              *(_DWORD *)v21 = v23;
              *(_QWORD *)(v21 + 8) = v25;
            }
            v18 = v22 + 1;
            v19 += 16;
            v20 = v22;
          }
          while (v22 + 1 != a2);
        }
      }
    }
    else
    {
      v13 = (char *)a5;
      v15 = a4 >> 1;
      v16 = &result[a4 >> 1];
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(result, v16, a3, v17, a5);
        v28 = (__int128 *)&v13[16 * v15];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), v28);
        v29 = &v13[16 * a4];
        v30 = v28;
        while (v30 != (__int128 *)v29)
        {
          v31 = *(_DWORD *)v30;
          if (*(_DWORD *)v30 < *(_DWORD *)v13)
          {
            v32 = (char *)v30;
          }
          else
          {
            v31 = *(_DWORD *)v13;
            v32 = v13;
          }
          v33 = *((_QWORD *)v32 + 1);
          if (*(_DWORD *)v30 < *(_DWORD *)v13)
            ++v30;
          else
            v13 += 16;
          *(_DWORD *)v7 = v31;
          *((_QWORD *)v7++ + 1) = v33;
          if (v13 == (char *)v28)
          {
            if (v30 != (__int128 *)v29)
            {
              v34 = 0;
              do
              {
                v35 = &v30[v34];
                v36 = &v7[v34];
                *(_DWORD *)v36 = v30[v34];
                *((_QWORD *)v36 + 1) = *((_QWORD *)&v30[v34++] + 1);
              }
              while (v35 + 1 != (__int128 *)v29);
            }
            return result;
          }
        }
        if (v13 != (char *)v28)
        {
          v37 = 0;
          do
          {
            v38 = &v7[v37 / 0x10];
            v39 = &v13[v37];
            *(_DWORD *)v38 = *(_DWORD *)&v13[v37];
            *((_QWORD *)v38 + 1) = *(_QWORD *)&v13[v37 + 8];
            v37 += 16;
          }
          while (v39 + 16 != (char *)v28);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(result, v16, a3, v17, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), v13, a6);
        return (__int128 *)std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>((char *)v7, (char *)&v7[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v13, a6);
      }
    }
  }
  return result;
}

__int128 *std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__int128 *result, __int128 *a2, uint64_t a3, unint64_t a4, __int128 *a5)
{
  __int128 *v5;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;

  if (a4)
  {
    v5 = a5;
    v8 = result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      if (*((_DWORD *)a2 - 4) >= *(_DWORD *)result)
      {
        *a5 = *result;
        v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        v10 = *result;
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v21 = a4 >> 1;
      v22 = a4 >> 1;
      v23 = &result[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(result, &result[v22], a3, a4 >> 1, a5, a4 >> 1);
      result = (__int128 *)std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v8[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      v24 = &v8[v22];
      while (v24 != a2)
      {
        if (*(_DWORD *)v24 >= *(_DWORD *)v8)
        {
          v25 = *v8++;
          *v5++ = v25;
          if (v8 == v23)
            goto LABEL_28;
        }
        else
        {
          v26 = *v24++;
          *v5++ = v26;
          if (v8 == v23)
          {
LABEL_28:
            if (v24 != a2)
            {
              v27 = 0;
              do
              {
                v5[v27] = v24[v27];
                ++v27;
              }
              while (&v24[v27] != a2);
            }
            return result;
          }
        }
      }
      if (v8 != v23)
      {
        v28 = 0;
        do
        {
          v5[v28] = v8[v28];
          ++v28;
        }
        while (&v8[v28] != v23);
      }
    }
    else if (result != a2)
    {
      *a5 = *result;
      v11 = (unsigned int *)(result + 1);
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = (unsigned int *)a5;
        v14 = (unsigned int *)a5;
        do
        {
          while (1)
          {
            v15 = v11;
            v16 = *v14;
            v14 += 4;
            if (*((_DWORD *)v8 + 4) < v16)
              break;
            *(_OWORD *)v14 = *(_OWORD *)v11;
            v11 += 4;
            v12 += 16;
            v13 = v14;
            v8 = (__int128 *)v15;
            if (v15 + 4 == (unsigned int *)a2)
              return result;
          }
          *(_OWORD *)v14 = *(_OWORD *)v13;
          v17 = (char *)a5;
          if (v13 != (unsigned int *)a5)
          {
            v18 = v12;
            while (1)
            {
              v17 = (char *)a5 + v18;
              v19 = *(_DWORD *)((char *)a5 + v18 - 16);
              if (*v15 >= v19)
                break;
              *(_DWORD *)v17 = v19;
              *((_QWORD *)v17 + 1) = *((_QWORD *)v17 - 1);
              v18 -= 16;
              if (!v18)
              {
                v17 = (char *)a5;
                break;
              }
            }
          }
          *(_DWORD *)v17 = *v15;
          *((_QWORD *)v17 + 1) = *((_QWORD *)v8 + 3);
          v11 = v15 + 4;
          v12 += 16;
          v13 = v14;
          v8 = (__int128 *)v15;
        }
        while (v15 + 4 != (unsigned int *)a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  char *i;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;

  if (!a6)
    return result;
  while (a6 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v10 = 0;
    v11 = *(_DWORD *)a2;
    v12 = -a5;
    while (1)
    {
      v13 = *(_DWORD *)&result[v10];
      if (v11 < v13)
        break;
      v10 += 16;
      v54 = __CFADD__(v12++, 1);
      if (v54)
        return result;
    }
    v14 = &result[v10];
    if (-v12 >= a6)
    {
      if (v12 == -1)
      {
        v63 = &result[v10];
        *(_DWORD *)v63 = v11;
        *(_DWORD *)a2 = v13;
        v64 = *(_QWORD *)&result[v10 + 8];
        *((_QWORD *)v63 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v64;
        return result;
      }
      if (v12 <= 0)
        v26 = -v12;
      else
        v26 = 1 - v12;
      v24 = v26 >> 1;
      v18 = &result[16 * (v26 >> 1) + v10];
      v17 = a3;
      if (a3 != a2)
      {
        v27 = (a3 - a2) >> 4;
        v17 = a2;
        do
        {
          v28 = v27 >> 1;
          v29 = &v17[16 * (v27 >> 1)];
          v31 = *(_DWORD *)v29;
          v30 = v29 + 16;
          v27 += ~(v27 >> 1);
          if (v31 < *(_DWORD *)v18)
            v17 = v30;
          else
            v27 = v28;
        }
        while (v27);
      }
      v16 = (v17 - a2) >> 4;
      v25 = v17;
      if (v18 != a2)
      {
LABEL_33:
        v25 = v18;
        if (a2 != v17)
        {
          v32 = *(_DWORD *)v18;
          *(_DWORD *)v18 = v11;
          *(_DWORD *)a2 = v32;
          v33 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v33;
          v25 = v18 + 16;
          for (i = a2 + 16; i != v17; i += 16)
          {
            if (v25 == a2)
              a2 = i;
            v35 = *(_DWORD *)v25;
            *(_DWORD *)v25 = *(_DWORD *)i;
            *(_DWORD *)i = v35;
            v36 = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v36;
            v25 += 16;
          }
          if (v25 != a2)
          {
            v37 = v25;
            v38 = a2;
            while (1)
            {
              v39 = *(_DWORD *)v37;
              *(_DWORD *)v37 = *(_DWORD *)a2;
              *(_DWORD *)a2 = v39;
              v40 = *((_QWORD *)v37 + 1);
              *((_QWORD *)v37 + 1) = *((_QWORD *)a2 + 1);
              *((_QWORD *)a2 + 1) = v40;
              v37 += 16;
              a2 += 16;
              v41 = v37 == v38;
              if (a2 == v17)
              {
                if (v37 == v38)
                  goto LABEL_49;
                a2 = v38 + 16;
                while (1)
                {
                  v42 = *(_DWORD *)v37;
                  *(_DWORD *)v37 = *(_DWORD *)v38;
                  *(_DWORD *)v38 = v42;
                  v43 = *((_QWORD *)v37 + 1);
                  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
                  *((_QWORD *)v38 + 1) = v43;
                  v37 += 16;
                  v41 = v37 == v38;
                  if (a2 != v17)
                    break;
                  if (v37 == v38)
                    goto LABEL_49;
                }
              }
              if (v41)
                v38 = a2;
            }
          }
          v25 = a2;
        }
      }
    }
    else
    {
      if (a6 >= 0)
        v15 = a6;
      else
        v15 = a6 + 1;
      v16 = v15 >> 1;
      v17 = &a2[16 * (v15 >> 1)];
      v18 = a2;
      if (v14 != a2)
      {
        v19 = (a2 - result - v10) >> 4;
        v18 = &result[v10];
        do
        {
          v20 = v19 >> 1;
          v21 = (unsigned int *)&v18[16 * (v19 >> 1)];
          v23 = *v21;
          v22 = (char *)(v21 + 4);
          v19 += ~(v19 >> 1);
          if (*(_DWORD *)v17 < v23)
            v19 = v20;
          else
            v18 = v22;
        }
        while (v19);
      }
      v24 = (v18 - result - v10) >> 4;
      v25 = &a2[16 * (v15 >> 1)];
      if (v18 != a2)
        goto LABEL_33;
    }
LABEL_49:
    a5 = -(v24 + v12);
    v44 = a6 - v16;
    if (v24 + v16 >= a6 - (v24 + v16) - v12)
    {
      v47 = a4;
      v48 = a7;
      v44 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v25, v17, a3, a4, a5, a6 - v16, a7, a8);
      v17 = v18;
      a5 = v24;
      a3 = v25;
    }
    else
    {
      v45 = v14;
      v46 = a3;
      v47 = a4;
      v48 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v45, v18, v25, a4, v24, v16, a7, a8);
      a3 = v46;
      v14 = v25;
    }
    a6 = v44;
    result = v14;
    a2 = v17;
    a4 = v47;
    a7 = v48;
    if (!v44)
      return result;
  }
  if (a5 <= a6)
  {
    if (result != a2)
    {
      v57 = 0;
      do
      {
        *(_OWORD *)&a7[v57] = *(_OWORD *)&result[v57];
        v57 += 16;
      }
      while (&result[v57] != a2);
      if (v57)
      {
        v58 = &a7[v57];
        v59 = (uint64_t)&a7[v57 - 16];
        while (a2 != a3)
        {
          v60 = *(_DWORD *)a2;
          if (*(_DWORD *)a2 < *(_DWORD *)a7)
          {
            v61 = a2;
          }
          else
          {
            v60 = *(_DWORD *)a7;
            v61 = a7;
          }
          v62 = *((_QWORD *)v61 + 1);
          if (*(_DWORD *)a2 < *(_DWORD *)a7)
            a2 += 16;
          else
            a7 += 16;
          *(_DWORD *)result = v60;
          *((_QWORD *)result + 1) = v62;
          result += 16;
          if (v58 == a7)
            return result;
        }
        v67 = 0;
        do
        {
          v68 = &result[v67];
          v69 = &a7[v67];
          *(_DWORD *)v68 = *(_DWORD *)&a7[v67];
          *((_QWORD *)v68 + 1) = *(_QWORD *)&a7[v67 + 8];
          v67 += 16;
        }
        while ((char *)v59 != v69);
      }
    }
  }
  else if (a2 != a3)
  {
    v49 = 0;
    do
    {
      *(_OWORD *)&a7[v49] = *(_OWORD *)&a2[v49];
      v49 += 16;
    }
    while (&a2[v49] != a3);
    if (v49)
    {
      v50 = &a7[v49];
      v51 = a3 - 8;
      while (a2 != result)
      {
        v52 = *((_DWORD *)a2 - 4);
        v53 = *((_DWORD *)v50 - 4);
        v54 = v53 >= v52;
        if (v53 < v52)
        {
          v55 = a2;
        }
        else
        {
          v52 = *((_DWORD *)v50 - 4);
          v55 = v50;
        }
        if (!v54)
          a2 -= 16;
        v56 = *((_QWORD *)v55 - 1);
        if (v54)
          v50 -= 16;
        *((_DWORD *)v51 - 2) = v52;
        *(_QWORD *)v51 = v56;
        v51 -= 16;
        if (v50 == a7)
          return result;
      }
      v65 = 0;
      do
      {
        v66 = &v51[v65];
        *((_DWORD *)v66 - 2) = *(_DWORD *)&v50[v65 - 16];
        *(_QWORD *)v66 = *(_QWORD *)&v50[v65 - 8];
        v65 -= 16;
      }
      while (&v50[v65] != a7);
    }
  }
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 16 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v13 = (uint64_t)(a2 - *(_QWORD *)a1) >> 4;
      v17 = 0;
      v14 = a1 + 16;
      v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v17);
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(a1, (uint64_t)v15);
      v16 = v17;
      if (*(_QWORD *)a1 != v14)
        free(*(void **)a1);
      *(_QWORD *)a1 = v15;
      *(_DWORD *)(a1 + 12) = v16;
      return &v15[16 * v13];
    }
    else
    {
      v17 = 0;
      v10 = a1 + 16;
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v17);
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(a1, (uint64_t)v11);
      v12 = v17;
      if (*(_QWORD *)a1 != v10)
        free(*(void **)a1);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v12;
    }
  }
  return (char *)v3;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;

  v2 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v2)
    return result;
  v3 = result;
  v4 = (_QWORD *)(a2 + 8);
  v5 = 16 * v2;
  v6 = (_QWORD *)(*(_QWORD *)result + 8);
  do
  {
    *((_DWORD *)v4 - 2) = *((_DWORD *)v6 - 2);
    *v4 = *v6;
    v7 = (unsigned __int8 *)*v6;
    if (*v6)
    {
      v8 = *v7;
      if ((v8 - 5) > 0x1E)
      {
        if (v8 == 4)
          v10 = *v6;
        else
          v10 = 0;
        if (v8 == 4)
        {
          result = v10 + 8;
        }
        else
        {
          if ((v8 - 3) < 0xFFFFFFFE)
            goto LABEL_5;
          result = (uint64_t)(v7 + 8);
        }
      }
      else
      {
        if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 - 2))
          goto LABEL_5;
        v9 = *((_QWORD *)v7 + 1);
        if ((v9 & 4) == 0)
          goto LABEL_5;
        result = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_5;
      }
      result = llvm::ReplaceableMetadataImpl::moveRef(result, (uint64_t)v6, (uint64_t)v4);
LABEL_5:
      *v6 = 0;
    }
    v4 += 2;
    v6 += 2;
    v5 -= 16;
  }
  while (v5);
  v11 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)v3 - 8;
    v13 = 16 * v11;
    do
    {
      result = v12 + v13;
      v14 = *(unsigned __int8 **)(v12 + v13);
      if (v14)
        result = llvm::MetadataTracking::untrack(result, v14);
      v13 -= 16;
    }
    while (v13);
  }
  return result;
}

_QWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unsigned __int8 **v5;
  unsigned __int8 **i;
  unint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;

  if ((_QWORD *)a2 != a3)
  {
    v5 = (unsigned __int8 **)(a4 + 8);
    for (i = (unsigned __int8 **)(a2 + 8); ; i += 2)
    {
      *((_DWORD *)v5 - 2) = *((_DWORD *)i - 2);
      if (i == v5)
        goto LABEL_6;
      if (*v5)
        llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
      *v5 = *i;
      v9 = *i;
      if (!*i)
        goto LABEL_6;
      v10 = *v9;
      if ((v10 - 5) > 0x1E)
      {
        if (v10 == 4)
          v12 = *i;
        else
          v12 = 0;
        if (v10 == 4)
        {
          v7 = (unint64_t)(v12 + 8);
        }
        else
        {
          if ((v10 - 3) < 0xFFFFFFFE)
            goto LABEL_5;
          v7 = (unint64_t)(v9 + 8);
        }
      }
      else
      {
        if ((v9[1] & 0x7F) != 2 && !*((_DWORD *)v9 - 2))
          goto LABEL_5;
        v11 = *((_QWORD *)v9 + 1);
        if ((v11 & 4) == 0)
          goto LABEL_5;
        v7 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_5;
      }
      llvm::ReplaceableMetadataImpl::moveRef(v7, (uint64_t)i, (uint64_t)v5);
LABEL_5:
      *i = 0;
LABEL_6:
      v5 += 2;
      v8 = i + 1;
      if (v8 == a3)
        return a3;
    }
  }
  return (_QWORD *)a2;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucket<llvm::Value const*>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *buffer;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v10 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v10 = *(_DWORD *)(a1 + 16);
  }
  v11 = *(uint64_t **)a1;
  v12 = (v10 - 1) | ((unint64_t)(v10 - 1) >> 1);
  v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
  v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
  if ((v14 + 1) > 0x40)
    v15 = v14 + 1;
  else
    v15 = 64;
  *(_DWORD *)(a1 + 16) = v15;
  buffer = llvm::allocate_buffer(40 * v15, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v11)
  {
    v17 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::moveFromOldBuckets(a1, v11, &v11[v17]);
    llvm::deallocate_buffer((llvm *)v11, (void *)(v17 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  v19 = 40 * v18 - 40;
  v20 = buffer;
  if (v19 < 0x28)
    goto LABEL_34;
  v21 = v19 / 0x28 + 1;
  v20 = &buffer[5 * (v21 & 0xFFFFFFFFFFFFFFELL)];
  v22 = v21 & 0xFFFFFFFFFFFFFFELL;
  v23 = buffer;
  do
  {
    *v23 = -4096;
    v23[5] = -4096;
    v23 += 10;
    v22 -= 2;
  }
  while (v22);
  if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v20 = -4096;
      v20 += 5;
    }
    while (v20 != &buffer[5 * v18]);
  }
  v7 = *a3;
  v24 = v18 - 1;
  v25 = ((*a3 >> 4) ^ (*a3 >> 9)) & v24;
  a2 = &buffer[5 * v25];
  v26 = *a2;
  if (*a3 != *a2)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = a2;
      v30 = v25 + v28++;
      v25 = v30 & v24;
      a2 = &buffer[5 * v25];
      v26 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v27)
      a2 = v27;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  v8 = *a3;
  a2[4] = 0;
  a2[3] = 0;
  *a2 = v8;
  a2[1] = a2 + 3;
  a2[2] = 0x100000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  char **v26;
  char *v27;
  int v28;
  char *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[5 * v6];
      do
      {
        *v9 = -4096;
        v9 += 5;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = &v7[5 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[5] = -4096;
      v12 += 10;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16) - 1;
        v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v38 = 0;
          v39 = 1;
          while (v18 != -4096)
          {
            if (v38)
              v40 = 0;
            else
              v40 = v18 == -8192;
            if (v40)
              v38 = v17;
            v41 = v16 + v39++;
            v16 = v41 & v15;
            v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * (v41 & v15));
            v18 = *v17;
            if (v14 == *v17)
              goto LABEL_14;
          }
          if (v38)
            v17 = v38;
        }
LABEL_14:
        *v17 = v14;
        v17[1] = v17 + 3;
        v17[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4))
        {
          llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::operator=((uint64_t)(v17 + 1), (uint64_t)(v4 + 1));
          v19 = *((unsigned int *)v4 + 4);
          ++*(_DWORD *)(a1 + 8);
          v20 = (char *)v4[1];
          if ((_DWORD)v19)
          {
            v21 = &v20[16 * v19];
            while (1)
            {
              v31 = (unsigned __int8 *)*((_QWORD *)v21 - 1);
              v29 = v21 - 8;
              v30 = v31;
              if (v31)
              {
                v32 = *v30;
                if ((v32 - 5) > 0x1E)
                {
                  if (v32 == 4)
                    v35 = v30;
                  else
                    v35 = 0;
                  if (v32 != 4)
                  {
                    v35 = (v32 - 3) >= 0xFFFFFFFE ? v30 : 0;
                    if ((v32 - 3) < 0xFFFFFFFE)
                    {
                      if (v32 == 3)
                        *((_QWORD *)v30 + 1) = 0;
                      goto LABEL_20;
                    }
                  }
                  v34 = (unint64_t)(v35 + 8);
                  if ((v35[24] & 1) != 0)
                  {
LABEL_17:
                    v22 = v34 + 24;
                    v23 = 4;
                    goto LABEL_18;
                  }
                }
                else
                {
                  if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 - 2))
                    goto LABEL_20;
                  v33 = *((_QWORD *)v30 + 1);
                  if ((v33 & 4) == 0)
                    goto LABEL_20;
                  v34 = v33 & 0xFFFFFFFFFFFFFFF8;
                  if (!v34)
                    goto LABEL_20;
                  if ((*(_BYTE *)(v34 + 16) & 1) != 0)
                    goto LABEL_17;
                }
                v23 = *(_DWORD *)(v34 + 32);
                if (v23)
                {
                  v22 = *(_QWORD *)(v34 + 24);
LABEL_18:
                  v24 = v23 - 1;
                  v25 = v24 & ((v29 >> 4) ^ (v29 >> 9));
                  v26 = (char **)(v22 + 24 * v25);
                  v27 = *v26;
                  if (*v26 == v29)
                  {
LABEL_19:
                    *v26 = (char *)-8192;
                    v28 = *(_DWORD *)(v34 + 20) + 1;
                    *(_DWORD *)(v34 + 16) -= 2;
                    *(_DWORD *)(v34 + 20) = v28;
                  }
                  else
                  {
                    v36 = 1;
                    while (v27 != (char *)-4096)
                    {
                      v37 = v25 + v36++;
                      v25 = v37 & v24;
                      v26 = (char **)(v22 + 24 * v25);
                      v27 = *v26;
                      if (*v26 == v29)
                        goto LABEL_19;
                    }
                  }
                }
              }
LABEL_20:
              v21 = v29 - 8;
              if (v21 == v20)
                goto LABEL_47;
            }
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 8);
LABEL_47:
          v20 = (char *)v4[1];
        }
        if (v20 != (char *)(v4 + 3))
          free(v20);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _DWORD *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char v44;
  unint64_t v45;
  char v46;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (v4 != v5)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = v6 - 8;
        v9 = 16 * v7;
        do
        {
          v10 = *(unsigned __int8 **)&v8[v9];
          if (v10)
            llvm::MetadataTracking::untrack((uint64_t)&v8[v9], v10);
          v9 -= 16;
        }
        while (v9);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v11 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v11 = 0;
      return a1;
    }
    v11 = (_DWORD *)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 8);
    v14 = *(unsigned int *)(a1 + 8);
    if (v14 < v13)
    {
      if (*(_DWORD *)(a1 + 12) >= v13)
      {
        v22 = *(_QWORD *)a1;
        if ((_DWORD)v14)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *>((uint64_t)&v46, v4, (_QWORD *)(v4 + 16 * v14), *(_QWORD *)a1);
          v22 = *(_QWORD *)a1;
          v23 = *(_QWORD *)a2;
          v24 = *(unsigned int *)(a2 + 8);
          if (v14 == v24)
            goto LABEL_61;
        }
        else
        {
          v14 = 0;
          v23 = *(_QWORD *)a2;
          v24 = *(unsigned int *)(a2 + 8);
          if (!*(_DWORD *)(a2 + 8))
          {
LABEL_61:
            *(_DWORD *)(a1 + 8) = v13;
            v40 = *v11;
            if ((_DWORD)v40)
            {
              v41 = v23 - 8;
              v42 = 16 * v40;
              do
              {
                v43 = *(unsigned __int8 **)(v41 + v42);
                if (v43)
                  llvm::MetadataTracking::untrack(v41 + v42, v43);
                v42 -= 16;
              }
              while (v42);
            }
            goto LABEL_12;
          }
        }
      }
      else
      {
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)a1 - 8;
          v16 = 16 * v14;
          do
          {
            v17 = *(unsigned __int8 **)(v15 + v16);
            if (v17)
              llvm::MetadataTracking::untrack(v15 + v16, v17);
            v16 -= 16;
          }
          while (v16);
        }
        *(_DWORD *)(a1 + 8) = 0;
        v45 = 0;
        v22 = (uint64_t)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v13, 16, &v45);
        llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(a1, v22);
        v25 = v45;
        if (*(_QWORD *)a1 != a1 + 16)
          free(*(void **)a1);
        v14 = 0;
        *(_QWORD *)a1 = v22;
        *(_DWORD *)(a1 + 12) = v25;
        v23 = *(_QWORD *)a2;
        v24 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8))
          goto LABEL_61;
      }
      v32 = 16 * v14;
      v33 = 16 * v24;
      while (1)
      {
        *(_DWORD *)(v22 + v32) = *(_DWORD *)(v23 + v32);
        v35 = (_QWORD *)(v23 + v32 + 8);
        *(_QWORD *)(v22 + v32 + 8) = *v35;
        v36 = (unsigned __int8 *)*v35;
        if (!*v35)
          goto LABEL_46;
        v37 = *v36;
        if ((v37 - 5) > 0x1E)
        {
          if (v37 == 4)
            v39 = *v35;
          else
            v39 = 0;
          if (v37 == 4)
          {
            v34 = v39 + 8;
          }
          else
          {
            if ((v37 - 3) < 0xFFFFFFFE)
              goto LABEL_45;
            v34 = (unint64_t)(v36 + 8);
          }
        }
        else
        {
          if ((v36[1] & 0x7F) != 2 && !*((_DWORD *)v36 - 2))
            goto LABEL_45;
          v38 = *((_QWORD *)v36 + 1);
          if ((v38 & 4) == 0)
            goto LABEL_45;
          v34 = v38 & 0xFFFFFFFFFFFFFFF8;
          if ((v38 & 0xFFFFFFFFFFFFFFF8) == 0)
            goto LABEL_45;
        }
        llvm::ReplaceableMetadataImpl::moveRef(v34, v23 + v32 + 8, v22 + v32 + 8);
LABEL_45:
        *v35 = 0;
LABEL_46:
        v22 += 16;
        v33 -= 16;
        v23 += 16;
        if (v32 == v33)
        {
          v23 = *(_QWORD *)a2;
          goto LABEL_61;
        }
      }
    }
    v18 = *(_QWORD *)a1;
    if ((_DWORD)v13)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *>((uint64_t)&v44, v4, (_QWORD *)(v4 + 16 * v13), v18);
      v20 = v19;
      v21 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8);
      if (v21 == v19)
      {
LABEL_36:
        *(_DWORD *)(a1 + 8) = v13;
        v28 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v28)
        {
          v29 = *(_QWORD *)a2 - 8;
          v30 = 16 * v28;
          do
          {
            v31 = *(unsigned __int8 **)(v29 + v30);
            if (v31)
              llvm::MetadataTracking::untrack(v29 + v30, v31);
            v30 -= 16;
          }
          while (v30);
        }
        goto LABEL_12;
      }
    }
    else
    {
      v20 = *(_QWORD *)a1;
      v21 = v18 + 16 * v14;
      if (v21 == v18)
        goto LABEL_36;
    }
    v26 = (unsigned __int8 **)(v21 - 8);
    do
    {
      if (*v26)
        llvm::MetadataTracking::untrack((uint64_t)v26, *v26);
      v27 = v26 - 1;
      v26 -= 2;
    }
    while (v27 != (unsigned __int8 **)v20);
    goto LABEL_36;
  }
  return a1;
}

llvm::ValueSymbolTable *llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList(llvm::ValueSymbolTable *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = (char *)result - 8;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    result = (llvm::ValueSymbolTable *)*((_QWORD *)result + 13);
    if (result)
      return (llvm::ValueSymbolTable *)llvm::ValueSymbolTable::reinsertValue(result, (llvm::Value *)a2);
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  uint64_t ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 104);
    if (v2)
    {
      ValueName = llvm::Value::getValueName(this);
      return llvm::ValueSymbolTable::removeValueName(v2, ValueName);
    }
  }
  return result;
}

llvm::ValueSymbolTable *llvm::SymbolTableListTraits<llvm::GlobalAlias>::addNodeToList(llvm::ValueSymbolTable *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = (char *)result - 40;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    result = (llvm::ValueSymbolTable *)*((_QWORD *)result + 9);
    if (result)
      return (llvm::ValueSymbolTable *)llvm::ValueSymbolTable::reinsertValue(result, (llvm::Value *)a2);
  }
  return result;
}

llvm::ValueSymbolTable *llvm::SymbolTableListTraits<llvm::GlobalIFunc>::addNodeToList(llvm::ValueSymbolTable *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = (char *)result - 56;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    result = (llvm::ValueSymbolTable *)*((_QWORD *)result + 7);
    if (result)
      return (llvm::ValueSymbolTable *)llvm::ValueSymbolTable::reinsertValue(result, (llvm::Value *)a2);
  }
  return result;
}

uint64_t llvm::Module::Module(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = operator new(0x20uLL);
  v8 = llvm::StringMapImpl::StringMapImpl((uint64_t)v7, 0, 16);
  *(_QWORD *)(v8 + 24) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x4800000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 > 0x16)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v13 = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 168) = a3;
    *(_QWORD *)(a1 + 176) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 160) = v12;
    memmove(v12, a2, a3);
    *((_BYTE *)v12 + a3) = 0;
    v9 = operator new(v11);
    *(_QWORD *)(a1 + 192) = a3;
    *(_QWORD *)(a1 + 200) = v13;
    *(_QWORD *)(a1 + 184) = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 183) = a3;
    if (!a3)
    {
      *(_BYTE *)(a1 + 160) = 0;
      v9 = (void *)(a1 + 184);
      *(_BYTE *)(a1 + 207) = 0;
      goto LABEL_9;
    }
    memmove((void *)(a1 + 160), a2, a3);
    *(_BYTE *)(a1 + 160 + a3) = 0;
    v9 = (void *)(a1 + 184);
    *(_BYTE *)(a1 + 207) = a3;
  }
  memmove(v9, a2, a3);
LABEL_9:
  *((_BYTE *)v9 + a3) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 252) = 16;
  *(_WORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 288) = a1 + 312;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 8;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_QWORD *)(a1 + 328) = 0x400000000;
  *(_QWORD *)(a1 + 368) = a1 + 384;
  *(_QWORD *)(a1 + 376) = 0x400000000;
  *(_QWORD *)(a1 + 416) = a1 + 432;
  *(_QWORD *)(a1 + 424) = 0x400000000;
  *(_WORD *)(a1 + 468) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0x800000000;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = a1 + 664;
  *(_QWORD *)(a1 + 656) = 0x800000000;
  llvm::DataLayout::reset(a1 + 256, "", 0);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 712) = 0x1000000000;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  llvm::LLVMContext::addModule(*(const void ****)a1, (llvm::Module *)a1);
  return a1;
}

void llvm::Module::~Module(llvm::Module *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  llvm::Use *v5;
  llvm::Value *v6;
  BOOL v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t ValueName;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  llvm::Use *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;

  llvm::LLVMContext::removeModule(*(llvm::SmallPtrSetImplBase ***)this, this);
  llvm::Module::dropAllReferences(this);
  llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase((uint64_t)this + 8, *((_QWORD *)this + 2), (uint64_t)this + 8);
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  while (v2 != (_QWORD *)((char *)this + 24))
  {
    v6 = (llvm::Value *)(v2 - 7);
    v7 = v2 == 0;
    v2 = (_QWORD *)v2[1];
    if (v7)
      v8 = 0;
    else
      v8 = v6;
    *((_QWORD *)v8 + 5) = 0;
    if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
    {
      v9 = *((_QWORD *)this + 14);
      if (v9)
      {
        ValueName = llvm::Value::getValueName(v8);
        llvm::ValueSymbolTable::removeValueName(v9, ValueName);
      }
    }
    v3 = *((_QWORD *)v8 + 7);
    v4 = (_QWORD *)*((_QWORD *)v8 + 8);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 8) = 0;
    llvm::Function::~Function(v8);
    llvm::User::operator delete(v5);
  }
  llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::clear((uint64_t)this + 40);
  v11 = (_QWORD *)*((_QWORD *)this + 8);
  while (v11 != (_QWORD *)((char *)this + 56))
  {
    v15 = (llvm::Value *)(v11 - 7);
    v7 = v11 == 0;
    v11 = (_QWORD *)v11[1];
    if (v7)
      v16 = 0;
    else
      v16 = v15;
    *((_QWORD *)v16 + 5) = 0;
    if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
    {
      v17 = *((_QWORD *)this + 14);
      if (v17)
      {
        v18 = llvm::Value::getValueName(v16);
        llvm::ValueSymbolTable::removeValueName(v17, v18);
      }
    }
    v12 = *((_QWORD *)v16 + 7);
    v13 = (_QWORD *)*((_QWORD *)v16 + 8);
    *v13 = v12;
    *(_QWORD *)(v12 + 8) = v13;
    *((_QWORD *)v16 + 7) = 0;
    *((_QWORD *)v16 + 8) = 0;
    llvm::GlobalObject::~GlobalObject(v16);
    llvm::User::operator delete(v14);
  }
  llvm::deallocate_buffer(*((llvm **)this + 90), (void *)(24 * *((unsigned int *)this + 184)));
}

void llvm::Module::dropAllReferences(llvm::Module *this)
{
  char *v2;
  char *v3;
  llvm::Function *v4;
  _QWORD *i;
  llvm::Value *v6;
  _QWORD *j;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *k;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t v22;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 24)
  {
    do
    {
      if (v3)
        v4 = (llvm::Function *)(v3 - 56);
      else
        v4 = 0;
      llvm::Function::deleteBodyImpl(v4, 1);
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 2); i != (_QWORD *)((char *)this + 8); i = (_QWORD *)i[1])
  {
    if (i)
      v6 = (llvm::Value *)(i - 7);
    else
      v6 = 0;
    llvm::GlobalVariable::dropAllReferences(v6);
  }
  for (j = (_QWORD *)*((_QWORD *)this + 6); j != (_QWORD *)((char *)this + 40); j = (_QWORD *)j[1])
  {
    if (j)
      v8 = j - 6;
    else
      v8 = 0;
    v9 = *((_DWORD *)v8 + 5);
    if ((v9 & 0x40000000) != 0)
    {
      v11 = (_QWORD *)*(v8 - 1);
      v10 = v9 & 0x7FFFFFF;
      if (!v10)
        continue;
    }
    else
    {
      v10 = v9 & 0x7FFFFFF;
      v11 = &v8[-4 * v10];
      if (!v10)
        continue;
    }
    v12 = 32 * v10;
    v13 = (_QWORD **)(v11 + 2);
    do
    {
      if (*(v13 - 2))
      {
        **v13 = *(v13 - 1);
        v14 = (uint64_t)*(v13 - 1);
        if (v14)
          *(_QWORD *)(v14 + 16) = *v13;
      }
      *(v13 - 2) = 0;
      v13 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  for (k = (_QWORD *)*((_QWORD *)this + 8); k != (_QWORD *)((char *)this + 56); k = (_QWORD *)k[1])
  {
    if (k)
      v16 = k - 7;
    else
      v16 = 0;
    v17 = *((_DWORD *)v16 + 5);
    if ((v17 & 0x40000000) != 0)
    {
      v19 = (_QWORD *)*(v16 - 1);
      v18 = v17 & 0x7FFFFFF;
      if (!v18)
        continue;
    }
    else
    {
      v18 = v17 & 0x7FFFFFF;
      v19 = &v16[-4 * v18];
      if (!v18)
        continue;
    }
    v20 = 32 * v18;
    v21 = (_QWORD **)(v19 + 2);
    do
    {
      if (*(v21 - 2))
      {
        **v21 = *(v21 - 1);
        v22 = (uint64_t)*(v21 - 1);
        if (v22)
          *(_QWORD *)(v22 + 16) = *v21;
      }
      *(v21 - 2) = 0;
      v21 += 4;
      v20 -= 32;
    }
    while (v20);
  }
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::clear(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  llvm::Value *v5;
  llvm::Use *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ValueName;

  v1 = *(_QWORD *)(a1 + 8);
  while (v1 != a1)
  {
    v7 = v1 - 48;
    v8 = v1 == 0;
    v1 = *(_QWORD *)(v1 + 8);
    if (v8)
      v9 = 0;
    else
      v9 = v7;
    *(_QWORD *)(v9 + 40) = 0;
    if ((*(_BYTE *)(v9 + 23) & 0x10) != 0)
    {
      v10 = *(_QWORD *)(a1 + 72);
      if (v10)
      {
        ValueName = llvm::Value::getValueName((llvm::Value *)v9);
        llvm::ValueSymbolTable::removeValueName(v10, ValueName);
      }
    }
    v3 = *(_QWORD *)(v9 + 48);
    v4 = *(_QWORD **)(v9 + 56);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    llvm::Constant::removeDeadConstantUsers(v9);
    llvm::Value::~Value((llvm::Value *)v9, v5);
    llvm::User::operator delete(v6);
  }
}

uint64_t llvm::Module::getNamedValue(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  int Key;

  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(unsigned int *)(v3 + 24);
  if ((v4 & 0x80000000) == 0 && (unint64_t)a3 > v4)
  {
    v4 = v4 <= 1 ? 1 : v4;
    if ((unint64_t)a3 >= v4)
      a3 = (const unsigned __int8 *)v4;
  }
  Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 112), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v3 + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * Key) + 8);
}

uint64_t llvm::Module::getMDKindID(uint64_t **a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  return llvm::LLVMContext::getMDKindID(*a1, a2, a3);
}

uint64_t llvm::Module::getOrInsertFunction(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  const unsigned __int8 *v7;
  uint64_t v10;
  unint64_t v11;
  int Key;
  uint64_t v13;
  _DWORD *v14;
  uint64_t *v15;
  llvm::ValueSymbolTable *v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;

  v7 = a3;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(unsigned int *)(v10 + 24);
  if ((v11 & 0x80000000) == 0 && (unint64_t)a3 > v11)
  {
    if (v11 <= 1)
      v11 = 1;
    else
      v11 = v11;
    if ((unint64_t)a3 >= v11)
      a3 = (const unsigned __int8 *)v11;
    Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 112), a2, a3);
    if (Key == -1)
      goto LABEL_13;
LABEL_11:
    if (Key != (unint64_t)*(unsigned int *)(v10 + 8)
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8 * Key) + 8))
    {
      return a4;
    }
    goto LABEL_13;
  }
  Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 112), a2, a3);
  if (Key != -1)
    goto LABEL_11;
LABEL_13:
  v13 = *(unsigned int *)(a1 + 268);
  v20 = 261;
  v19[0] = a2;
  v19[1] = v7;
  v14 = llvm::User::operator new((llvm::User *)0x80);
  if ((*(_BYTE *)(llvm::Function::Function(v14, a4, 0, v13, v19, 0) + 33) & 0x20) == 0)
    *((_QWORD *)v14 + 14) = a5;
  v15 = (uint64_t *)(a1 + 24);
  *((_QWORD *)v14 + 5) = a1;
  if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
  {
    v16 = *(llvm::ValueSymbolTable **)(a1 + 112);
    if (v16)
      llvm::ValueSymbolTable::reinsertValue(v16, (llvm::Value *)v14);
  }
  v17 = *v15;
  *((_QWORD *)v14 + 7) = *v15;
  *((_QWORD *)v14 + 8) = v15;
  *(_QWORD *)(v17 + 8) = v14 + 14;
  *v15 = (uint64_t)(v14 + 14);
  return a4;
}

uint64_t llvm::Module::getOrInsertFunction(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  return llvm::Module::getOrInsertFunction(a1, a2, a3, a4, 0);
}

uint64_t llvm::Module::getFunction(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  int Key;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(unsigned int *)(v3 + 24);
  if ((v4 & 0x80000000) == 0 && (unint64_t)a3 > v4)
  {
    v4 = v4 <= 1 ? 1 : v4;
    if ((unint64_t)a3 >= v4)
      a3 = (const unsigned __int8 *)v4;
  }
  Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 112), a2, a3);
  if (Key == -1)
    return 0;
  if (Key == (unint64_t)*(unsigned int *)(v3 + 8))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * Key) + 8);
  if (!v6)
    return 0;
  if (*(_BYTE *)(v6 + 16))
    return 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * Key) + 8);
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const char **a2)
{
  size_t v3;
  int8x16_t *v4;
  int Key;
  uint64_t v6;
  void *v7;
  int v9;
  void *v10;
  __int128 v11;
  _QWORD v12[33];

  v12[32] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_181236410;
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (int8x16_t *)*a2;
        if (*a2)
          v3 = strlen(*a2);
        else
          v3 = 0;
        break;
      case 4:
        v9 = (*a2)[23];
        if (v9 >= 0)
          v4 = (int8x16_t *)*a2;
        else
          v4 = *(int8x16_t **)*a2;
        if (v9 >= 0)
          v3 = *((unsigned __int8 *)*a2 + 23);
        else
          v3 = *((_QWORD *)*a2 + 1);
        break;
      case 5:
      case 6:
        v4 = (int8x16_t *)*a2;
        v3 = (size_t)a2[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v10);
    v4 = (int8x16_t *)v10;
    v3 = v11;
  }
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 29, v4, (const unsigned __int8 *)v3);
  if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 60))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * Key) + 8);
    v7 = v10;
    if (v10 == v12)
      return v6;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = v10;
  if (v10 != v12)
LABEL_8:
    free(v7);
  return v6;
}

uint64_t llvm::Module::getOrInsertNamedMetadata(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  llvm::NamedMDNode *v9;
  llvm::NamedMDNode *v10;
  llvm::NamedMDNode **v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  v6 = llvm::StringMap<mlir::Attribute,llvm::MallocAllocator>::try_emplace<>(a1 + 232, a2, a3);
  v7 = *v6;
  result = *(_QWORD *)(*v6 + 8);
  if (!result)
  {
    v9 = (llvm::NamedMDNode *)operator new(0x38uLL);
    v14 = 261;
    v13[0] = a2;
    v13[1] = a3;
    v10 = llvm::NamedMDNode::NamedMDNode(v9, (const llvm::Twine *)v13);
    *(_QWORD *)(v7 + 8) = v10;
    *((_QWORD *)v10 + 5) = a1;
    v12 = *(_QWORD *)(a1 + 72);
    v11 = (llvm::NamedMDNode **)(a1 + 72);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    return *(_QWORD *)(v7 + 8);
  }
  return result;
}

void llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  uint64_t *v4;
  int8x16_t *Name;
  const unsigned __int8 *v6;
  int Key;
  const unsigned __int8 **v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  v4 = (uint64_t *)((char *)this + 232);
  Name = (int8x16_t *)llvm::NamedMDNode::getName(a2);
  Key = llvm::StringMapImpl::FindKey(v4, Name, v6);
  if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 60))
  {
    v8 = *(const unsigned __int8 ***)(*((_QWORD *)this + 29) + 8 * Key);
    llvm::StringMapImpl::RemoveKey((uint64_t)v4, v8);
    llvm::deallocate_buffer((llvm *)v8, (void *)(*v8 + 17));
  }
  v10 = *(_QWORD *)a2;
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  *v9 = *(_QWORD *)a2;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  llvm::NamedMDNode::~NamedMDNode(a2);
  operator delete(v11);
}

uint64_t llvm::Module::isValidModFlagBehavior(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned int v5;

  if (result)
  {
    if (*(_BYTE *)result == 1)
    {
      v2 = *(_QWORD *)(result + 128);
      if (*(_BYTE *)(v2 + 16) == 16)
      {
        v4 = (_QWORD *)(v2 + 24);
        v5 = *(_DWORD *)(v2 + 32);
        if (v5 < 0x41)
          goto LABEL_7;
        if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v2 + 24)) <= 0x40)
        {
          v4 = (_QWORD *)*v4;
LABEL_7:
          if ((unint64_t)(*v4 - 9) >= 0xFFFFFFFFFFFFFFF8)
          {
            *a2 = *v4;
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::Module::isValidModuleFlag(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v17;

  v9 = (_QWORD *)(a1 - 16);
  v8 = *(_QWORD *)(a1 - 16);
  if ((v8 & 2) != 0)
  {
    if (*(_DWORD *)(a1 - 24) < 3u)
      return 0;
    v10 = **(_QWORD **)(a1 - 32);
    if (!v10)
      return 0;
  }
  else
  {
    if ((*(_QWORD *)(a1 - 16) & 0x3C0uLL) < 0xC0)
      return 0;
    v10 = v9[-((v8 >> 2) & 0xF)];
    if (!v10)
      return 0;
  }
  if (*(_BYTE *)v10 != 1)
    return 0;
  v11 = *(_QWORD *)(v10 + 128);
  if (*(_BYTE *)(v11 + 16) != 16)
    return 0;
  v12 = (_QWORD *)(v11 + 24);
  v13 = *(_DWORD *)(v11 + 32);
  if (v13 >= 0x41)
  {
    if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v11 + 24)) <= 0x40)
    {
      v12 = (_QWORD *)*v12;
      goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  if ((unint64_t)(*v12 - 9) < 0xFFFFFFFFFFFFFFF8)
    return 0;
  *a2 = *v12;
  v14 = (*v9 & 2) != 0 ? *(_QWORD **)(a1 - 32) : &v9[-((*v9 >> 2) & 0xFLL)];
  v15 = (_BYTE *)v14[1];
  if (!v15 || *v15)
    return 0;
  *a3 = v15;
  if ((*v9 & 2) != 0)
    v17 = *(_QWORD **)(a1 - 32);
  else
    v17 = &v9[-((*v9 >> 2) & 0xFLL)];
  *a4 = v17[2];
  return 1;
}

void llvm::Module::getModuleFlagsMetadata(llvm::Module *a1, uint64_t a2)
{
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v4;
  int NumOperands;
  int v6;
  unsigned int i;
  unint64_t v8;
  const char **v9;
  uint64_t v10;
  __int128 v11;
  uint64_t Operand;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  const char *v17;
  const char *v18;
  int v19;
  const char *v20[4];
  __int16 v21;

  v20[0] = "llvm.module.flags";
  v21 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, v20);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v6 = NumOperands;
      for (i = 0; v6 != i; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v4, i);
        v19 = 0;
        v17 = 0;
        v18 = 0;
        if (!llvm::Module::isValidModuleFlag(Operand, &v19, &v18, &v17))
          continue;
        LODWORD(v20[0]) = v19;
        v20[1] = v18;
        v20[2] = v17;
        v13 = *(unsigned int *)(a2 + 8);
        v8 = *(_QWORD *)a2;
        if (v13 >= *(_DWORD *)(a2 + 12))
        {
          v14 = v13 + 1;
          v15 = v8 + 24 * v13 > (unint64_t)v20;
          if (v8 <= (unint64_t)v20 && v15)
          {
            v16 = (char *)v20 - v8;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v14, 24);
            v8 = *(_QWORD *)a2;
            v9 = (const char **)&v16[*(_QWORD *)a2];
            goto LABEL_6;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v14, 24);
          v8 = *(_QWORD *)a2;
        }
        v9 = v20;
LABEL_6:
        v10 = v8 + 24 * *(unsigned int *)(a2 + 8);
        v11 = *(_OWORD *)v9;
        *(_QWORD *)(v10 + 16) = v9[2];
        *(_OWORD *)v10 = v11;
        ++*(_DWORD *)(a2 + 8);
      }
    }
  }
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *this)
{
  const char *v2;
  __int16 v3;

  v2 = "llvm.module.flags";
  v3 = 259;
  return llvm::Module::getNamedMetadata(this, &v2);
}

uint64_t llvm::Module::getModuleFlag(llvm::Module *a1, const void *a2, size_t a3)
{
  char *v5;
  uint64_t v6;
  const void *String;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[25];

  v14[24] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v12);
  if ((_DWORD)v13)
  {
    v5 = (char *)v12;
    if (a3)
    {
      v6 = 24 * v13;
      while (1)
      {
        String = (const void *)llvm::MDString::getString(*((llvm::MDString **)v5 + 1));
        if (a3 == v8 && !memcmp(a2, String, a3))
          break;
        v5 += 24;
        v6 -= 24;
        if (!v6)
          goto LABEL_8;
      }
    }
    else
    {
      v9 = 24 * v13;
      while (1)
      {
        llvm::MDString::getString(*((llvm::MDString **)v5 + 1));
        if (!v11)
          break;
        v5 += 24;
        v9 -= 24;
        if (!v9)
          goto LABEL_9;
      }
    }
    v9 = *((_QWORD *)v5 + 2);
  }
  else
  {
LABEL_8:
    v9 = 0;
  }
LABEL_9:
  if (v12 != v14)
    free(v12);
  return v9;
}

void llvm::Module::addModuleFlag(uint64_t *a1, llvm::LLVMContext *a2, int8x16_t *a3, const unsigned __int8 *a4, uint64_t a5)
{
  unsigned int v8;
  llvm::ConstantInt *Int32Ty;
  llvm::ValueAsMetadata *v11;
  llvm::Value *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::NamedMDNode *v17;
  llvm::NamedMDNode *v18;
  llvm::NamedMDNode *v19;
  _QWORD *v20;
  llvm::MDNode *Impl;
  char *buffer;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];

  v8 = a2;
  v29[3] = *MEMORY[0x1E0C80C00];
  Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty((llvm::Type *)*a1, a2);
  v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int32Ty, v8, 0);
  v29[0] = llvm::ValueAsMetadata::get(v11, v12);
  v29[1] = llvm::MDString::get((_QWORD *)*a1, a3, a4);
  v29[2] = a5;
  v13 = llvm::StringMapImpl::LookupBucketFor(a1 + 29, (int8x16_t *)"llvm.module.flags", (const unsigned __int8 *)0x11);
  v14 = (_QWORD *)a1[29];
  v15 = v13;
  v16 = v14[v13];
  if (v16 == -8)
  {
    --*((_DWORD *)a1 + 62);
  }
  else if (v16)
  {
    goto LABEL_3;
  }
  buffer = (char *)llvm::allocate_buffer(0x22uLL, (std::align_val_t)8uLL);
  strcpy(buffer + 16, "llvm.module.flags");
  *(_QWORD *)buffer = 17;
  *((_QWORD *)buffer + 1) = 0;
  v14[v15] = buffer;
  ++*((_DWORD *)a1 + 61);
  v23 = (uint64_t *)(a1[29] + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 29), v15));
  v16 = *v23;
  if (*v23)
    v24 = v16 == -8;
  else
    v24 = 1;
  if (v24)
  {
    do
    {
      v25 = v23[1];
      ++v23;
      v16 = v25;
      if (v25)
        v26 = v16 == -8;
      else
        v26 = 1;
    }
    while (v26);
  }
LABEL_3:
  v17 = *(llvm::NamedMDNode **)(v16 + 8);
  if (!v17)
  {
    v18 = (llvm::NamedMDNode *)operator new(0x38uLL);
    v28 = 261;
    v27[0] = "llvm.module.flags";
    v27[1] = 17;
    v19 = llvm::NamedMDNode::NamedMDNode(v18, (const llvm::Twine *)v27);
    *(_QWORD *)(v16 + 8) = v19;
    v20 = (_QWORD *)a1[9];
    *((_QWORD *)v19 + 5) = a1;
    *(_QWORD *)v19 = v20;
    *((_QWORD *)v19 + 1) = a1 + 9;
    v20[1] = v19;
    a1[9] = (uint64_t)v19;
    v17 = *(llvm::NamedMDNode **)(v16 + 8);
  }
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*a1, v29, 3uLL, 0, 1);
  llvm::NamedMDNode::addOperand(v17, Impl);
}

void llvm::Module::addModuleFlag(uint64_t *a1, llvm::Value *a2, int8x16_t *a3, const unsigned __int8 *a4, llvm::ValueAsMetadata *this)
{
  llvm::ValueAsMetadata *v9;

  v9 = llvm::ValueAsMetadata::get(this, a2);
  llvm::Module::addModuleFlag(a1, a2, a3, a4, (uint64_t)v9);
}

void llvm::Module::addModuleFlag(llvm::Type **a1, llvm::LLVMContext *a2, int8x16_t *a3, const unsigned __int8 *a4, unsigned int a5)
{
  llvm::ConstantInt *Int32Ty;
  llvm::ValueAsMetadata *v11;
  llvm::Value *v12;
  llvm::ValueAsMetadata *v13;

  Int32Ty = (llvm::ConstantInt *)llvm::Type::getInt32Ty(*a1, a2);
  v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int32Ty, a5, 0);
  v13 = llvm::ValueAsMetadata::get(v11, v12);
  llvm::Module::addModuleFlag((uint64_t *)a1, a2, a3, a4, (uint64_t)v13);
}

uint64_t llvm::Module::setDataLayout(llvm::Module *this, const llvm::DataLayout *a2)
{
  return llvm::DataLayout::operator=((uint64_t)this + 256, (uint64_t)a2);
}

uint64_t llvm::Module::global_objects@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 32);
  a2[1] = v2;
  a2[2] = this + 24;
  a2[3] = this + 8;
  a2[4] = this + 24;
  a2[5] = this + 8;
  a2[6] = this + 24;
  a2[7] = this + 8;
  return this;
}

_QWORD *llvm::Module::global_values@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this[2];
  v3 = this[6];
  v4 = this[8];
  *a2 = this[4];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = this + 3;
  a2[5] = this + 1;
  a2[6] = this + 5;
  a2[7] = this + 7;
  a2[8] = this + 3;
  a2[9] = this + 1;
  a2[10] = this + 5;
  a2[11] = this + 7;
  a2[12] = this + 3;
  a2[13] = this + 1;
  a2[14] = this + 5;
  a2[15] = this + 7;
  return this;
}

uint64_t llvm::Module::setMaterializer(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = a2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::Module::materializeAll@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 152);
  if (v2)
  {
    *(_QWORD *)(this + 152) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void llvm::Module::getUniqueIntrinsicName(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int8x16_t *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  int Key;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  std::string v31;
  int8x16_t *v32;
  const unsigned __int8 *v33;
  int v34;
  int8x16_t *v35;
  const unsigned __int8 *v36;
  const char *v37;
  __int16 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;

  LODWORD(v39) = a4;
  v40 = a5;
  v12 = (uint64_t *)(a1 + 720);
  LODWORD(v41) = 0;
  v35 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t *)(a1 + 720), (uint64_t)&v39, (uint64_t *)&v35))
  {
    v13 = v35[1].u32[0];
    v35 = a2;
    v36 = a3;
    v37 = ".";
    v38 = 773;
    v39 = (uint64_t *)&v35;
    v41 = v13;
    v42 = 2306;
    llvm::Twine::str((llvm::Twine *)&v39, (std::string *)a6);
  }
  else
  {
    v14 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t)v12, (uint64_t)&v39, (uint64_t)&v39, (uint64_t)v35);
    *(_DWORD *)v14 = (_DWORD)v39;
    *(_QWORD *)(v14 + 8) = v40;
    *(_DWORD *)(v14 + 16) = v41;
    v32 = a2;
    v33 = a3;
    v34 = 0;
    v30 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1 + 696, a2, a3, &v34);
    v15 = *(_DWORD *)(*v30 + 8);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    while (1)
    {
      v35 = a2;
      v36 = a3;
      v37 = ".";
      v38 = 773;
      v39 = (uint64_t *)&v35;
      v41 = v15;
      v42 = 2306;
      llvm::Twine::str((llvm::Twine *)&v39, &v31);
      if (*(char *)(a6 + 23) < 0)
        operator delete(*(void **)a6);
      *(std::string *)a6 = v31;
      v16 = *(char *)(a6 + 23);
      if (v16 >= 0)
        v17 = (int8x16_t *)a6;
      else
        v17 = *(int8x16_t **)a6;
      if (v16 >= 0)
        v18 = (const unsigned __int8 *)*(unsigned __int8 *)(a6 + 23);
      else
        v18 = *(const unsigned __int8 **)(a6 + 8);
      v19 = *(_QWORD *)(a1 + 112);
      v20 = *(unsigned int *)(v19 + 24);
      if ((v20 & 0x80000000) == 0 && (unint64_t)v18 > v20)
      {
        v20 = v20 <= 1 ? 1 : v20;
        if ((unint64_t)v18 >= v20)
          v18 = (const unsigned __int8 *)v20;
      }
      Key = llvm::StringMapImpl::FindKey(*(uint64_t **)(a1 + 112), v17, v18);
      if (Key == -1)
        break;
      if (Key == (unint64_t)*(unsigned int *)(v19 + 8))
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8 * Key) + 8);
      if (!v22)
        break;
      v23 = *(_QWORD *)(v22 + 24);
      if (*(_BYTE *)(v23 + 8) == 14)
        v24 = v23;
      else
        v24 = 0;
      LODWORD(v39) = a4;
      v40 = v24;
      LODWORD(v41) = v15;
      v35 = 0;
      v25 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(v12, (uint64_t)&v39, (uint64_t *)&v35);
      v26 = (uint64_t)v35;
      if ((v25 & 1) == 0)
      {
        v26 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t)v12, (uint64_t)&v39, (uint64_t)&v39, (uint64_t)v35);
        *(_DWORD *)v26 = (_DWORD)v39;
        *(_QWORD *)(v26 + 8) = v40;
        *(_DWORD *)(v26 + 16) = v41;
      }
      if (v24 == a5)
      {
        *(_DWORD *)(v26 + 16) = v15;
        v29 = v30;
        goto LABEL_33;
      }
      ++v15;
    }
    LODWORD(v39) = a4;
    v40 = a5;
    v35 = 0;
    v27 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(v12, (uint64_t)&v39, (uint64_t *)&v35);
    v28 = (uint64_t)v35;
    if ((v27 & 1) == 0)
    {
      v28 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t)v12, (uint64_t)&v39, (uint64_t)&v39, (uint64_t)v35);
      *(_DWORD *)v28 = (_DWORD)v39;
      *(_QWORD *)(v28 + 8) = v40;
      *(_DWORD *)(v28 + 16) = 0;
    }
    v29 = v30;
    *(_DWORD *)(v28 + 16) = v15;
LABEL_33:
    *(_DWORD *)(*v29 + 8) = v15 + 1;
  }
}

uint64_t llvm::Module::getOrInsertComdat(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];
  void *v9;
  int8x16_t *v10;
  const unsigned __int8 *v11;
  _QWORD v12[3];
  void *v13;

  v5 = a1 + 120;
  llvm::Comdat::Comdat((llvm::Comdat *)v8);
  v10 = a2;
  v11 = a3;
  llvm::Comdat::Comdat((uint64_t)v12, (uint64_t)v8);
  v6 = *llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>(v5, v10, v11, (uint64_t)v12);
  if (v13 != (void *)v12[2])
    free(v13);
  if (v9 != (void *)v8[2])
    free(v9);
  result = v6 + 8;
  *(_QWORD *)(v6 + 8) = v6;
  return result;
}

uint64_t llvm::Module::getSemanticInterposition(llvm::Module *this)
{
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;

  result = llvm::Module::getModuleFlag(this, "SemanticInterposition", 0x15uLL);
  if (result)
  {
    v2 = *(_QWORD *)(result + 128);
    v3 = (_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
    return *v3 != 0;
  }
  return result;
}

uint64_t llvm::Module::getSDKVersion(llvm::Module *this)
{
  llvm::Metadata *ModuleFlag;

  ModuleFlag = (llvm::Metadata *)llvm::Module::getModuleFlag(this, "SDK Version", 0xBuLL);
  return getSDKVersionMD(ModuleFlag);
}

uint64_t getSDKVersionMD(llvm::Metadata *a1)
{
  llvm::ConstantDataSequential *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 0;
  if (*(_BYTE *)a1 != 1)
    return 0;
  v1 = (llvm::ConstantDataSequential *)*((_QWORD *)a1 + 16);
  if (!v1
    || *((_BYTE *)v1 + 16) != 14
    || !llvm::ConstantDataSequential::getNumElements(*((llvm::ConstantDataSequential **)a1 + 16)))
  {
    return 0;
  }
  llvm::ConstantDataSequential::getElementAsInteger(v1);
  v3 = v2;
  if (llvm::ConstantDataSequential::getNumElements(v1) >= 2)
  {
    llvm::ConstantDataSequential::getElementAsInteger(v1);
    v3 |= (v4 << 32) | 0x8000000000000000;
    if (llvm::ConstantDataSequential::getNumElements(v1) >= 3)
    {
      llvm::ConstantDataSequential::getElementAsInteger(v1);
      return v3;
    }
  }
  return v3;
}

void llvm::Module::setPtrAuthABIVersion(llvm::Type **a1, llvm::LLVMContext *a2)
{
  llvm::Type *v4;
  uint64_t Int32Ty;
  llvm::ValueAsMetadata *v6;
  llvm::Value *v7;
  llvm::ValueAsMetadata *v8;
  llvm::LLVMContext *v9;
  uint64_t Int1Ty;
  llvm::ValueAsMetadata *v11;
  llvm::Value *v12;
  uint64_t Impl;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  Int32Ty = llvm::Type::getInt32Ty(*a1, a2);
  v6 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int32Ty, (int)a2, 0);
  v8 = llvm::ValueAsMetadata::get(v6, v7);
  Int1Ty = llvm::Type::getInt1Ty(v4, v9);
  v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(Int1Ty, ((unint64_t)a2 >> 32) & 1, 0);
  v14[0] = v8;
  v14[1] = llvm::ValueAsMetadata::get(v11, v12);
  v14[0] = llvm::MDTuple::getImpl((uint64_t)v4, v14, 2uLL, 0, 1);
  Impl = llvm::MDTuple::getImpl((uint64_t)v4, v14, 1uLL, 0, 1);
  llvm::Module::addModuleFlag((uint64_t *)a1, (llvm::LLVMContext *)6, (int8x16_t *)"ptrauth.abi-version", (const unsigned __int8 *)0x13, Impl);
}

const char *llvm::Module::getDarwinTargetVariantTriple(llvm::Module *this)
{
  llvm::MDString *ModuleFlag;

  ModuleFlag = (llvm::MDString *)llvm::Module::getModuleFlag(this, "darwin.target_variant.triple", 0x1CuLL);
  if (ModuleFlag)
    return (const char *)llvm::MDString::getString(ModuleFlag);
  else
    return "";
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  llvm::Use *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ValueName;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v9 = v4 - 56;
      v10 = v4 == 0;
      v4 = *(_QWORD *)(v4 + 8);
      if (v10)
        v11 = 0;
      else
        v11 = v9;
      *(_QWORD *)(v11 + 40) = 0;
      if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
      {
        v12 = *(_QWORD *)(a1 + 104);
        if (v12)
        {
          ValueName = llvm::Value::getValueName((llvm::Value *)v11);
          llvm::ValueSymbolTable::removeValueName(v12, ValueName);
        }
      }
      v6 = *(_QWORD *)(v11 + 56);
      v7 = *(_QWORD **)(v11 + 64);
      *v7 = v6;
      *(_QWORD *)(v6 + 8) = v7;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      llvm::GlobalVariable::dropAllReferences((llvm::Value *)v11);
      llvm::GlobalObject::~GlobalObject((llvm::GlobalObject *)v11);
      *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xF8000000 | 1;
      llvm::User::operator delete(v8);
    }
    while (v4 != a3);
  }
  return a3;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)(37 * *(_DWORD *)a2) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_DWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -1 || v14 != -4096)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -8192;
        if (v19 && v13 == -2)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_DWORD *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        if (*(_DWORD *)a2 == *(_DWORD *)v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*(_DWORD *)a4 != -1)
      goto LABEL_8;
    goto LABEL_4;
  }
  llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a4 != -1)
    goto LABEL_8;
LABEL_4:
  if (*(_QWORD *)(a4 + 8) == -4096)
    return a4;
LABEL_8:
  --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  _DWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_1812834F0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_1812834F0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            v23 = *(_QWORD *)(v21 + 8);
            if ((*(_DWORD *)v21 != -1 || v23 != -4096) && (*(_DWORD *)v21 != -2 || v23 != -8192))
            {
              v28 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>((uint64_t *)a1, v21, (uint64_t *)&v28);
              v22 = v28;
              *v28 = *(_DWORD *)v21;
              *((_QWORD *)v22 + 1) = *(_QWORD *)(v21 + 8);
              v22[4] = *(_DWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_1812834F0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_29:
      v27 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_1812834F0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v27);
      return result;
    }
    v24 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v24 & 0x1FFFFFFFFFFFFFFELL));
    v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    v26 = result;
    do
    {
      *v26 = xmmword_1812834F0;
      *(_OWORD *)((char *)v26 + 24) = xmmword_1812834F0;
      v26 += 3;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_29;
  }
  return result;
}

uint64_t *llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 73), (std::align_val_t)8uLL);
    v12 = buffer + 9;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 73), (std::align_val_t)8uLL);
    v12 = buffer + 9;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *buffer = a3;
  llvm::Comdat::Comdat((uint64_t)(buffer + 1), a4);
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void llvm::FunctionSummary::makeDummyFunctionSummary(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  void *__p;
  char *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35[3];
  void *v36[3];
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v46 = 0uLL;
  v47 = 0;
  v44 = *a1;
  v45 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0uLL;
  v37 = 0uLL;
  v38 = 0;
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  llvm::FunctionSummary::FunctionSummary(a2, 193, 0, 0, 0, &v46, (uint64_t)&v44, (uint64_t *)&v41, &v39, &v37, (__int128 *)v36, (__int128 *)v35, (uint64_t *)&v32, (uint64_t *)&v29, (uint64_t *)&__p);
  v2 = (char *)__p;
  if (__p)
  {
    v3 = v27;
    v4 = __p;
    if (v27 != __p)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            do
            {
              v8 = *(void **)(v6 - 64);
              if ((void *)(v6 - 48) != v8)
                free(v8);
              v6 -= 72;
            }
            while (v6 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v9 = (char *)*((_QWORD *)v3 - 11);
        if (v9 != v3 - 64)
          free(v9);
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = __p;
    }
    v27 = v2;
    operator delete(v4);
  }
  v10 = (char *)v29;
  if (v29)
  {
    v11 = v30;
    v12 = v29;
    if (v30 != v29)
    {
      do
      {
        v13 = (char *)*((_QWORD *)v11 - 8);
        if (v11 - 48 != v13)
          free(v13);
        v14 = (char *)*((_QWORD *)v11 - 16);
        if (v11 - 112 != v14)
          free(v14);
        v11 -= 136;
      }
      while (v11 != v10);
      v12 = v29;
    }
    v30 = v10;
    operator delete(v12);
  }
  v15 = v32;
  if (v32)
  {
    v16 = (uint64_t)v33;
    v17 = v32;
    if (v33 != v32)
    {
      do
      {
        v16 -= 64;
        std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100]((uint64_t)&v34, v16);
      }
      while ((void *)v16 != v15);
      v17 = v32;
    }
    v33 = v15;
    operator delete(v17);
  }
  v18 = (char *)v35[0];
  if (v35[0])
  {
    v19 = (char *)v35[1];
    v20 = v35[0];
    if (v35[1] != v35[0])
    {
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 3);
        if (v21)
        {
          *((_QWORD *)v19 - 2) = v21;
          operator delete(v21);
        }
        v19 -= 40;
      }
      while (v19 != v18);
      v20 = v35[0];
    }
    v35[1] = v18;
    operator delete(v20);
  }
  v22 = (char *)v36[0];
  if (v36[0])
  {
    v23 = (char *)v36[1];
    v24 = v36[0];
    if (v36[1] != v36[0])
    {
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        if (v25)
        {
          *((_QWORD *)v23 - 2) = v25;
          operator delete(v25);
        }
        v23 -= 40;
      }
      while (v23 != v22);
      v24 = v36[0];
    }
    v36[1] = v22;
    operator delete(v24);
  }
  if ((_QWORD)v37)
  {
    *((_QWORD *)&v37 + 1) = v37;
    operator delete((void *)v37);
  }
  if ((_QWORD)v39)
  {
    *((_QWORD *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if ((_QWORD)v44)
  {
    *((_QWORD *)&v44 + 1) = v44;
    operator delete((void *)v44);
  }
  if ((_QWORD)v46)
  {
    *((_QWORD *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
}

uint64_t llvm::FunctionSummary::FunctionSummary(uint64_t a1, int a2, int a3, int a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8, __int128 *a9, __int128 *a10, __int128 *a11, __int128 *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15)
{
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  llvm::FunctionSummary::TypeIdInfo *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void **v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void **v42;
  char *v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void **v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[16];

  v16 = a14;
  v17 = *((_QWORD *)a6 + 2);
  v18 = *a6;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)a1 = &unk_1E0E20B88;
  *(_DWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 68) = a4;
  *(_QWORD *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a7 + 16);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v19 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  v20 = *a8;
  v21 = a8[1];
  if (*a8 != v21
    || *(_QWORD *)a9 != *((_QWORD *)a9 + 1)
    || *(_QWORD *)a10 != *((_QWORD *)a10 + 1)
    || *(_QWORD *)a11 != *((_QWORD *)a11 + 1)
    || *(_QWORD *)a12 != *((_QWORD *)a12 + 1))
  {
    v22 = a8[2];
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    v23 = *((_QWORD *)a9 + 2);
    v24 = *a9;
    *((_QWORD *)a9 + 1) = 0;
    *((_QWORD *)a9 + 2) = 0;
    *(_QWORD *)a9 = 0;
    v25 = *((_QWORD *)a10 + 2);
    v55 = v24;
    v56 = *a10;
    *((_QWORD *)a10 + 1) = 0;
    *((_QWORD *)a10 + 2) = 0;
    *(_QWORD *)a10 = 0;
    v26 = *((_QWORD *)a11 + 2);
    v27 = *a11;
    *((_QWORD *)a11 + 1) = 0;
    *((_QWORD *)a11 + 2) = 0;
    *(_QWORD *)a11 = 0;
    v28 = *((_QWORD *)a12 + 2);
    v53 = *a12;
    v54 = v27;
    *((_QWORD *)a12 + 1) = 0;
    *((_QWORD *)a12 + 2) = 0;
    *(_QWORD *)a12 = 0;
    v29 = (char *)operator new(0x78uLL);
    *(_QWORD *)v29 = v20;
    *((_QWORD *)v29 + 1) = v21;
    *((_QWORD *)v29 + 2) = v22;
    v57[0] = 0;
    v57[1] = 0;
    *(_OWORD *)(v29 + 24) = v55;
    *((_QWORD *)v29 + 5) = v23;
    memset(&v57[2], 0, 32);
    *((_OWORD *)v29 + 3) = v56;
    *((_QWORD *)v29 + 8) = v25;
    v57[6] = 0;
    v57[7] = 0;
    *(_OWORD *)(v29 + 72) = v54;
    *((_QWORD *)v29 + 11) = v26;
    memset(&v57[8], 0, 32);
    *((_OWORD *)v29 + 6) = v53;
    *((_QWORD *)v29 + 14) = v28;
    memset(&v57[12], 0, 24);
    v30 = *(llvm::FunctionSummary::TypeIdInfo **)v19;
    *(_QWORD *)v19 = v29;
    if (v30)
    {
      llvm::FunctionSummary::TypeIdInfo::~TypeIdInfo(v30);
      operator delete(v31);
    }
    llvm::FunctionSummary::TypeIdInfo::~TypeIdInfo((llvm::FunctionSummary::TypeIdInfo *)v57);
    v16 = a14;
  }
  v32 = *a13;
  v33 = a13[1];
  if (*a13 != v33)
  {
    v34 = operator new(0x18uLL);
    *v34 = v32;
    v34[1] = v33;
    v34[2] = a13[2];
    *a13 = 0;
    a13[1] = 0;
    a13[2] = 0;
    v35 = *(void ***)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v34;
    if (v35)
    {
      v36 = *v35;
      if (*v35)
      {
        v37 = (uint64_t)v35[1];
        v38 = *v35;
        if ((void *)v37 != v36)
        {
          do
          {
            v37 -= 64;
            std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100]((uint64_t)(v35 + 2), v37);
          }
          while ((void *)v37 != v36);
          v38 = *v35;
        }
        v35[1] = v36;
        operator delete(v38);
      }
      operator delete(v35);
    }
  }
  v39 = *v16;
  v40 = v16[1];
  if (*v16 != v40)
  {
    v41 = operator new(0x18uLL);
    *v41 = v39;
    v41[1] = v40;
    v41[2] = v16[2];
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    v42 = *(void ***)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v41;
    if (v42)
    {
      v43 = (char *)*v42;
      if (*v42)
      {
        v44 = (char *)v42[1];
        v45 = *v42;
        if (v44 != v43)
        {
          do
          {
            v46 = (char *)*((_QWORD *)v44 - 8);
            if (v44 - 48 != v46)
              free(v46);
            v47 = (char *)*((_QWORD *)v44 - 16);
            if (v44 - 112 != v47)
              free(v47);
            v44 -= 136;
          }
          while (v44 != v43);
          v45 = *v42;
        }
        v42[1] = v43;
        operator delete(v45);
      }
      operator delete(v42);
    }
  }
  v48 = *a15;
  v49 = a15[1];
  if (*a15 != v49)
  {
    v50 = operator new(0x18uLL);
    *v50 = v48;
    v50[1] = v49;
    v50[2] = a15[2];
    *a15 = 0;
    a15[1] = 0;
    a15[2] = 0;
    v51 = *(void ***)(v19 + 24);
    *(_QWORD *)(v19 + 24) = v50;
    if (v51)
      std::default_delete<std::vector<llvm::AllocInfo>>::operator()[abi:nn180100](v19 + 24, v51);
  }
  return a1;
}

void llvm::FunctionSummary::~FunctionSummary(llvm::FunctionSummary *this)
{
  void *v1;

  llvm::FunctionSummary::~FunctionSummary(this);
  operator delete(v1);
}

{
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  llvm::FunctionSummary::TypeIdInfo *v15;
  void *v16;
  void *v17;
  void *v18;

  *(_QWORD *)this = &unk_1E0E20B88;
  v4 = (void **)*((_QWORD *)this + 16);
  v2 = (_QWORD *)((char *)this + 128);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<llvm::AllocInfo>>::operator()[abi:nn180100]((int)v2, v3);
  v5 = (void **)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    v6 = (char *)*v5;
    if (*v5)
    {
      v7 = (char *)v5[1];
      v8 = *v5;
      if (v7 != v6)
      {
        do
        {
          v9 = (char *)*((_QWORD *)v7 - 8);
          if (v7 - 48 != v9)
            free(v9);
          v10 = (char *)*((_QWORD *)v7 - 16);
          if (v7 - 112 != v10)
            free(v10);
          v7 -= 136;
        }
        while (v7 != v6);
        v8 = *v5;
      }
      v5[1] = v6;
      operator delete(v8);
    }
    operator delete(v5);
  }
  v11 = (void **)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = (uint64_t)v11[1];
      v14 = *v11;
      if ((void *)v13 != v12)
      {
        do
        {
          v13 -= 64;
          std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100]((uint64_t)(v11 + 2), v13);
        }
        while ((void *)v13 != v12);
        v14 = *v11;
      }
      v11[1] = v12;
      operator delete(v14);
    }
    operator delete(v11);
  }
  v15 = (llvm::FunctionSummary::TypeIdInfo *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
  {
    llvm::FunctionSummary::TypeIdInfo::~TypeIdInfo(v15);
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 10);
  if (v17)
  {
    *((_QWORD *)this + 11) = v17;
    operator delete(v17);
  }
  *(_QWORD *)this = &unk_1E0E22AF0;
  v18 = (void *)*((_QWORD *)this + 5);
  if (v18)
  {
    *((_QWORD *)this + 6) = v18;
    operator delete(v18);
  }
}

void llvm::GlobalValueSummary::~GlobalValueSummary(llvm::GlobalValueSummary *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E0E22AF0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E0E22AF0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  operator delete(this);
}

void llvm::FunctionSummary::TypeIdInfo::~TypeIdInfo(llvm::FunctionSummary::TypeIdInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = *((_QWORD *)this + 10);
    v8 = (void *)*((_QWORD *)this + 9);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(_QWORD *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v6;
    operator delete(v8);
  }
  v10 = (void *)*((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 7) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 4) = v11;
    operator delete(v11);
  }
  v12 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v12;
    operator delete(v12);
  }
}

void std::default_delete<std::vector<llvm::AllocInfo>>::operator()[abi:nn180100](int a1, void **__p)
{
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;

  if (__p)
  {
    v3 = (char *)*__p;
    if (*__p)
    {
      v4 = (char *)__p[1];
      v5 = *__p;
      if (v4 != v3)
      {
        do
        {
          v6 = *((_QWORD *)v4 - 3);
          if (v6)
          {
            v7 = *((_QWORD *)v4 - 2);
            v8 = (void *)*((_QWORD *)v4 - 3);
            if (v7 != v6)
            {
              do
              {
                v9 = *(void **)(v7 - 64);
                if ((void *)(v7 - 48) != v9)
                  free(v9);
                v7 -= 72;
              }
              while (v7 != v6);
              v8 = (void *)*((_QWORD *)v4 - 3);
            }
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v8);
          }
          v10 = (char *)*((_QWORD *)v4 - 11);
          if (v10 != v4 - 64)
            free(v10);
          v4 -= 88;
        }
        while (v4 != v3);
        v5 = *__p;
      }
      __p[1] = v3;
      operator delete(v5);
    }
    operator delete(__p);
  }
}

void std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v5 = *(void **)(a2 + 40);
    if (v4 != v3)
    {
      do
      {
        if (*(_DWORD *)(v4 - 8) >= 0x41u)
        {
          v6 = *(void **)(v4 - 16);
          if (v6)
            operator delete[](v6);
        }
        if (*(_DWORD *)(v4 - 24) >= 0x41u)
        {
          v7 = *(void **)(v4 - 32);
          if (v7)
            operator delete[](v7);
        }
        v4 -= 48;
      }
      while (v4 != v3);
      v5 = *(void **)(a2 + 40);
    }
    *(_QWORD *)(a2 + 48) = v3;
    operator delete(v5);
  }
  if (*(_DWORD *)(a2 + 32) >= 0x41u)
  {
    v8 = *(void **)(a2 + 24);
    if (v8)
      operator delete[](v8);
  }
  if (*(_DWORD *)(a2 + 16) >= 0x41u)
  {
    v9 = *(void **)(a2 + 8);
    if (v9)
      operator delete[](v9);
  }
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [16],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _WORD *a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  _BYTE *v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  v15 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  if (this && *((_BYTE *)this + 16) == 62)
    return *((_QWORD *)this + 9);
  else
    return mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxisAttr(this);
}

uint64_t llvm::GEPOperator::getResultElementType(llvm::GEPOperator *this)
{
  if (this && *((_BYTE *)this + 16) == 62)
    return *((_QWORD *)this + 10);
  else
    return llvm::GetElementPtrConstantExpr::getResultElementType(this);
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const double *v23;
  unsigned __int128 *v24;
  const double *v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t AxisAttr;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(_QWORD *)(a1 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = a1 - 32 * v11;
  }
  v33 = v35;
  v34 = 0x600000000;
  v13 = 32 * v11 - 32;
  if ((unint64_t)v13 < 0xC1)
  {
    v14 = 0;
    v15 = 0;
    if (v11 == 1)
      goto LABEL_19;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v13 >> 5, 8);
    v14 = v34;
    v15 = v34;
    if (v11 == 1)
      goto LABEL_19;
  }
  v16 = (uint64_t *)(v12 + 32);
  v17 = (char *)v33 + 8 * v14;
  v18 = (v11 + 0x7FFFFFFFFFFFFFELL) & 0x7FFFFFFFFFFFFFFLL;
  if (v18 >= 0x18
    && ((unint64_t)v17 >= v12 + 32 * (v11 + 0x7FFFFFFFFFFFFFELL) + 40
     || v16 >= (uint64_t *)((char *)v33 + 8 * v14 + 8 * v18 + 8)))
  {
    v20 = v18 + 1;
    v21 = v20 & 3;
    if ((v20 & 3) == 0)
      v21 = 4;
    v22 = v20 - v21;
    v17 += v22;
    v16 += 4 * v22;
    v23 = (const double *)(v12 + 96);
    v24 = (unsigned __int128 *)((char *)v33 + 8 * v14 + 16);
    do
    {
      v25 = v23 - 8;
      v26 = (unsigned __int128)vld4q_f64(v25);
      v27 = (unsigned __int128)vld4q_f64(v23);
      *(v24 - 1) = v26;
      *v24 = v27;
      v23 += 16;
      v24 += 2;
      v22 -= 4;
    }
    while (v22);
  }
  do
  {
    v28 = *v16;
    v16 += 4;
    *v17++ = v28;
  }
  while (v16 != (uint64_t *)(v12 + 32 * v11));
LABEL_19:
  v29 = v15 + ((unint64_t)v13 >> 5);
  LODWORD(v34) = v29;
  if (a1 && *(_BYTE *)(a1 + 16) == 62)
  {
    AxisAttr = *(_QWORD *)(a1 + 72);
  }
  else
  {
    AxisAttr = mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxisAttr((mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *)a1);
    v29 = v34;
  }
  v31 = llvm::GEPOperator::accumulateConstantOffset(AxisAttr, (const llvm::Value **)v33, v29, a2, a3, a4, a5);
  if (v33 != v35)
    free(v33);
  return v31;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, const llvm::Value **a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v7;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  llvm::Type *TypeAtIndex;
  BOOL isScalableTy;
  BOOL v17;
  const llvm::Value *v18;
  llvm::StructType *v19;
  BOOL v20;
  BOOL v21;
  char v22;
  int v23;
  Type *v24;
  const void **v25;
  unsigned int v26;
  _BOOL4 v27;
  BOOL v28;
  uint64_t v29;
  llvm::StructLayout *StructLayout;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  char v39;
  const char *v40;
  uint64_t v41;
  int v42;
  Type *v43;
  char v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  BOOL v49;
  char v50;
  const char *v51;
  uint64_t v52;
  int v53;
  _QWORD v57[2];
  void *__p;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  void *v62[2];
  void *v63;
  unsigned int v64;
  _QWORD v65[2];
  char v66;

  v66 = 0;
  v65[0] = a5;
  v65[1] = &v66;
  v7 = 1;
  if (a3)
  {
    v11 = a1 | 4;
    v12 = 8 * a3;
    while (1)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFF8;
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) == 0 || (v11 & 4) == 0;
      TypeAtIndex = (llvm::Type *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if (v14)
        TypeAtIndex = (llvm::Type *)llvm::StructType::getTypeAtIndex((llvm::StructType *)(v11 & 0xFFFFFFFFFFFFFFF8), *a2);
      isScalableTy = llvm::Type::isScalableTy(TypeAtIndex);
      v17 = isScalableTy;
      v18 = *a2;
      if ((v11 & 4) != 0)
        v19 = 0;
      else
        v19 = (llvm::StructType *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if (v18)
        v20 = *((_BYTE *)v18 + 16) == 16;
      else
        v20 = 0;
      if (!v20)
      {
        if (a6)
          v21 = v19 == 0;
        else
          v21 = 0;
        v22 = !v21 || isScalableTy;
        if ((v22 & 1) != 0)
          return 0;
        v23 = 1;
        LODWORD(v62[1]) = 1;
        v62[0] = 0;
        if (a6(a7))
        {
          v66 = 1;
          v59 = v62[1];
          if (LODWORD(v62[1]) > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v62);
            v24 = (Type *)v13;
            if (v14)
              goto LABEL_45;
          }
          else
          {
            __p = v62[0];
            v24 = (Type *)v13;
            if (!v14)
              goto LABEL_46;
LABEL_45:
            v24 = (Type *)llvm::StructType::getTypeAtIndex((llvm::StructType *)v13, *a2);
          }
LABEL_46:
          llvm::DataLayout::getTypeSizeInBits(a4, v24);
          v36 = (unint64_t)(v35 + 7) >> 3;
          v38 = v37 != 0;
          llvm::DataLayout::getABITypeAlign(a4, (llvm::Type *)v24);
          v57[0] = ((1 << v39) + v36 - 1) & -(1 << v39);
          v57[1] = v38;
          v41 = llvm::TypeSize::operator unsigned long long(v57, v40);
          v42 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v65, (llvm::APInt *)&__p, v41);
          if (v59 >= 0x41 && __p)
            operator delete[](__p);
          v23 = v42 ^ 1;
        }
        if (LODWORD(v62[1]) >= 0x41 && v62[0])
          operator delete[](v62[0]);
LABEL_53:
        if ((v23 | 4) != 4)
          return 0;
        goto LABEL_68;
      }
      v25 = (const void **)((char *)v18 + 24);
      v26 = *((_DWORD *)v18 + 8);
      if (v26 > 0x40)
      {
        v27 = llvm::APInt::countLeadingZerosSlowCase((const llvm::Value *)((char *)v18 + 24)) == v26;
        v28 = v27 || v17;
        if (v27)
          v23 = 4;
        else
          v23 = 1;
        if (v28)
          goto LABEL_53;
      }
      else
      {
        if (*v25)
          v23 = 1;
        else
          v23 = 4;
        if (*v25 == 0 || isScalableTy)
          goto LABEL_53;
      }
      if (!v19)
        break;
      if (v26 >= 0x41)
        v25 = (const void **)*v25;
      v29 = *(unsigned int *)v25;
      StructLayout = llvm::DataLayout::getStructLayout(a4, v19);
      v31 = *(_DWORD *)(a5 + 8);
      *(_OWORD *)v62 = *(_OWORD *)((char *)StructLayout + 16 * v29 + 24);
      v33 = llvm::TypeSize::operator unsigned long long(v62, v32);
      v64 = v31;
      if (v31 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v63, v33, 0);
      }
      else
      {
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
        if (!v31)
          v34 = 0;
        v63 = (void *)(v34 & v33);
      }
      v44 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v65, (llvm::APInt *)&v63, 1);
      if (v64 >= 0x41)
      {
        v45 = v63;
        if (v63)
LABEL_66:
          operator delete[](v45);
      }
LABEL_67:
      if ((v44 & 1) == 0)
        return 0;
LABEL_68:
      if (v14)
        v13 = llvm::StructType::getTypeAtIndex((llvm::StructType *)v13, *a2);
      v53 = *(unsigned __int8 *)(v13 + 8);
      if (v13 && v53 == 17 || v13 && (v53 & 0xFE) == 0x12)
      {
        v11 = *(_QWORD *)(v13 + 24) | 4;
        ++a2;
        v12 -= 8;
        if (!v12)
          return 1;
      }
      else
      {
        if (v53 == 16)
          v11 = v13 & 0xFFFFFFFFFFFFFFFBLL;
        else
          v11 = 0;
        ++a2;
        v12 -= 8;
        if (!v12)
          return 1;
      }
    }
    v61 = v26;
    if (v26 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v60, v25);
      v43 = (Type *)v13;
      if (!v14)
      {
LABEL_64:
        llvm::DataLayout::getTypeSizeInBits(a4, v43);
        v47 = (unint64_t)(v46 + 7) >> 3;
        v49 = v48 != 0;
        llvm::DataLayout::getABITypeAlign(a4, (llvm::Type *)v43);
        v62[0] = (void *)(((1 << v50) + v47 - 1) & -(1 << v50));
        v62[1] = (void *)v49;
        v52 = llvm::TypeSize::operator unsigned long long(v62, v51);
        v44 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v65, (llvm::APInt *)&v60, v52);
        if (v61 >= 0x41)
        {
          v45 = v60;
          if (v60)
            goto LABEL_66;
        }
        goto LABEL_67;
      }
    }
    else
    {
      v60 = (void *)*v25;
      v43 = (Type *)v13;
      if (!v14)
        goto LABEL_64;
    }
    v43 = (Type *)llvm::StructType::getTypeAtIndex((llvm::StructType *)v13, *a2);
    goto LABEL_64;
  }
  return v7;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()(uint64_t a1, llvm::APInt *this, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  const void **v9;
  _BOOL4 v10;
  const void *v12;
  int v13;
  BOOL v14;
  void *__p;
  unsigned int v16;
  void *v17;
  unsigned int v18;

  llvm::APInt::sextOrTrunc((char *)this, *(_DWORD *)(*(_QWORD *)a1 + 8), (uint64_t)&v17);
  if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    operator delete[](*(void **)this);
  *(_QWORD *)this = v17;
  *((_DWORD *)this + 2) = v18;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v18 = v6;
  if (v6 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, a3, 0);
    if (**(_BYTE **)(a1 + 8))
    {
LABEL_9:
      v14 = 0;
      llvm::APInt::smul_ov((unint64_t **)this, (size_t)&v17, &v14, (uint64_t)&__p);
      if (v14)
      {
        if (v16 >= 0x41 && __p)
        {
          operator delete[](__p);
          v8 = 0;
          if (v18 >= 0x41)
            goto LABEL_29;
          return v8;
        }
LABEL_26:
        v8 = 0;
        if (v18 >= 0x41)
          goto LABEL_29;
        return v8;
      }
      llvm::APInt::sadd_ov(*(const void ***)a1, (const llvm::APInt *)&__p, &v14, (uint64_t)&v12);
      v9 = *(const void ***)a1;
      if (*((_DWORD *)v9 + 2) >= 0x41u && *v9)
        operator delete[]((void *)*v9);
      *v9 = v12;
      *((_DWORD *)v9 + 2) = v13;
      v10 = v14;
      if (v16 >= 0x41 && __p)
        operator delete[](__p);
      if (v10)
        goto LABEL_26;
LABEL_28:
      v8 = 1;
      if (v18 >= 0x41)
        goto LABEL_29;
      return v8;
    }
  }
  else
  {
    if (v6)
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    else
      v7 = 0;
    v17 = (void *)(v7 & a3);
    if (**(_BYTE **)(a1 + 8))
      goto LABEL_9;
  }
  llvm::APInt::operator*((uint64_t)this, (const unint64_t **)&v17, (uint64_t)&__p);
  llvm::APInt::operator+=(*(_QWORD *)a1, (_QWORD **)&__p);
  if (v16 < 0x41 || !__p)
    goto LABEL_28;
  operator delete[](__p);
  v8 = 1;
  if (v18 < 0x41)
    return v8;
LABEL_29:
  if (!v17)
    return v8;
  operator delete[](v17);
  return v8;
}

llvm::raw_ostream *llvm::FastMathFlags::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  if (*(_DWORD *)this != -1)
  {
    v3 = this;
    if ((*(_DWORD *)this & 1) == 0)
    {
      if ((*(_BYTE *)this & 2) == 0)
        goto LABEL_4;
LABEL_17:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) > 4)
      {
        *(_BYTE *)(v6 + 4) = 110;
        *(_DWORD *)v6 = 1634627104;
        *((_QWORD *)a2 + 4) += 5;
        if ((*(_BYTE *)v3 & 4) != 0)
          goto LABEL_21;
      }
      else
      {
        this = llvm::raw_ostream::write(a2, " nnan", 5uLL);
        if ((*(_BYTE *)v3 & 4) != 0)
          goto LABEL_21;
      }
LABEL_5:
      if ((*(_BYTE *)v3 & 8) == 0)
        goto LABEL_6;
LABEL_25:
      v8 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 3uLL)
      {
        *v8 = 2054385184;
        *((_QWORD *)a2 + 4) += 4;
        if ((*(_BYTE *)v3 & 0x10) != 0)
          goto LABEL_29;
      }
      else
      {
        this = llvm::raw_ostream::write(a2, " nsz", 4uLL);
        if ((*(_BYTE *)v3 & 0x10) != 0)
          goto LABEL_29;
      }
LABEL_7:
      if ((*(_BYTE *)v3 & 0x20) == 0)
        goto LABEL_8;
LABEL_33:
      v10 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 8)
      {
        *(_BYTE *)(v10 + 8) = 116;
        *(_QWORD *)v10 = *(_QWORD *)" contract";
        *((_QWORD *)a2 + 4) += 9;
        if ((*(_BYTE *)v3 & 0x40) == 0)
          return this;
      }
      else
      {
        this = llvm::raw_ostream::write(a2, " contract", 9uLL);
        if ((*(_BYTE *)v3 & 0x40) == 0)
          return this;
      }
      goto LABEL_37;
    }
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 7uLL)
    {
      *v5 = 0x636F737361657220;
      *((_QWORD *)a2 + 4) += 8;
      if ((*(_BYTE *)this & 2) != 0)
        goto LABEL_17;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " reassoc", 8uLL);
      if ((*(_BYTE *)v3 & 2) != 0)
        goto LABEL_17;
    }
LABEL_4:
    if ((*(_BYTE *)v3 & 4) == 0)
      goto LABEL_5;
LABEL_21:
    v7 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) > 4)
    {
      *(_BYTE *)(v7 + 4) = 102;
      *(_DWORD *)v7 = 1852403232;
      *((_QWORD *)a2 + 4) += 5;
      if ((*(_BYTE *)v3 & 8) != 0)
        goto LABEL_25;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " ninf", 5uLL);
      if ((*(_BYTE *)v3 & 8) != 0)
        goto LABEL_25;
    }
LABEL_6:
    if ((*(_BYTE *)v3 & 0x10) == 0)
      goto LABEL_7;
LABEL_29:
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 112;
      *(_DWORD *)v9 = 1668440352;
      *((_QWORD *)a2 + 4) += 5;
      if ((*(_BYTE *)v3 & 0x20) != 0)
        goto LABEL_33;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " arcp", 5uLL);
      if ((*(_BYTE *)v3 & 0x20) != 0)
        goto LABEL_33;
    }
LABEL_8:
    if ((*(_BYTE *)v3 & 0x40) == 0)
      return this;
LABEL_37:
    v11 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 3uLL)
      return llvm::raw_ostream::write(a2, " afn", 4uLL);
    *v11 = 1852203296;
    *((_QWORD *)a2 + 4) += 4;
    return this;
  }
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) <= 4)
    return llvm::raw_ostream::write(a2, " fast", 5uLL);
  *(_BYTE *)(v4 + 4) = 116;
  *(_DWORD *)v4 = 1935762976;
  *((_QWORD *)a2 + 4) += 5;
  return this;
}

BOOL llvm::OptBisect::shouldRunPass(llvm *a1, const char *a2, size_t a3, const void *a4, size_t a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 v13;
  const char *v14;
  size_t v15;
  llvm::raw_ostream *v16;
  _QWORD *v17;
  _DWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  _DWORD *v25;
  _BYTE *v26;

  v9 = *((_DWORD *)a1 + 2);
  v10 = *((int *)a1 + 3);
  v11 = v10 + 1;
  *((_DWORD *)a1 + 3) = v10 + 1;
  v13 = v9 == -1 || (int)v10 < v9;
  if (v13)
    v14 = "";
  else
    v14 = "NOT ";
  if (v13)
    v15 = 0;
  else
    v15 = 4;
  v16 = (llvm::raw_ostream *)llvm::errs(a1);
  v17 = (_QWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 <= 7uLL)
  {
    v16 = llvm::raw_ostream::write(v16, "BISECT: ", 8uLL);
    v18 = (_DWORD *)*((_QWORD *)v16 + 4);
    if (v15 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_15;
LABEL_21:
    v16 = llvm::raw_ostream::write(v16, v14, v15);
    v18 = (_DWORD *)*((_QWORD *)v16 + 4);
    if (*((_QWORD *)v16 + 3) - (_QWORD)v18 <= 0xCuLL)
      goto LABEL_18;
LABEL_22:
    qmemcpy(v18, "running pass ", 13);
    v21 = (_BYTE *)*((_QWORD *)v16 + 3);
    v19 = (_BYTE *)(*((_QWORD *)v16 + 4) + 13);
    *((_QWORD *)v16 + 4) = v19;
    if (v21 != v19)
      goto LABEL_19;
    goto LABEL_23;
  }
  *v17 = 0x203A544345534942;
  v20 = *((_QWORD *)v16 + 3);
  v18 = (_DWORD *)(*((_QWORD *)v16 + 4) + 8);
  *((_QWORD *)v16 + 4) = v18;
  if (v15 > v20 - (uint64_t)v18)
    goto LABEL_21;
LABEL_15:
  if (!v13)
  {
    *v18 = 542396238;
    v18 = (_DWORD *)(*((_QWORD *)v16 + 4) + 4);
    *((_QWORD *)v16 + 4) = v18;
  }
  if (*((_QWORD *)v16 + 3) - (_QWORD)v18 > 0xCuLL)
    goto LABEL_22;
LABEL_18:
  v16 = llvm::raw_ostream::write(v16, "running pass ", 0xDuLL);
  v19 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) != v19)
  {
LABEL_19:
    *v19 = 40;
    ++*((_QWORD *)v16 + 4);
    goto LABEL_24;
  }
LABEL_23:
  v16 = llvm::raw_ostream::write(v16, "(", 1uLL);
LABEL_24:
  v22 = llvm::raw_ostream::operator<<(v16, v11);
  v23 = v22;
  v24 = (_WORD *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v24 <= 1uLL)
  {
    v23 = llvm::raw_ostream::write(v22, ") ", 2uLL);
    v25 = (_DWORD *)*((_QWORD *)v23 + 4);
    if (a3 <= *((_QWORD *)v23 + 3) - (_QWORD)v25)
      goto LABEL_26;
LABEL_35:
    v23 = llvm::raw_ostream::write(v23, a2, a3);
    v25 = (_DWORD *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v25 <= 3uLL)
      goto LABEL_29;
    goto LABEL_36;
  }
  *v24 = 8233;
  v25 = (_DWORD *)(*((_QWORD *)v22 + 4) + 2);
  *((_QWORD *)v23 + 4) = v25;
  if (a3 > *((_QWORD *)v23 + 3) - (_QWORD)v25)
    goto LABEL_35;
LABEL_26:
  if (a3)
  {
    memcpy(v25, a2, a3);
    v25 = (_DWORD *)(*((_QWORD *)v23 + 4) + a3);
    *((_QWORD *)v23 + 4) = v25;
  }
  if (*((_QWORD *)v23 + 3) - (_QWORD)v25 <= 3uLL)
  {
LABEL_29:
    v23 = llvm::raw_ostream::write(v23, " on ", 4uLL);
    v26 = (_BYTE *)*((_QWORD *)v23 + 4);
    if (a5 <= *((_QWORD *)v23 + 3) - (_QWORD)v26)
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_36:
  *v25 = 544108320;
  v26 = (_BYTE *)(*((_QWORD *)v23 + 4) + 4);
  *((_QWORD *)v23 + 4) = v26;
  if (a5 <= *((_QWORD *)v23 + 3) - (_QWORD)v26)
  {
LABEL_30:
    if (a5)
    {
      memcpy(v26, a4, a5);
      v26 = (_BYTE *)(*((_QWORD *)v23 + 4) + a5);
      *((_QWORD *)v23 + 4) = v26;
    }
    if (*((_BYTE **)v23 + 3) != v26)
      goto LABEL_33;
LABEL_38:
    llvm::raw_ostream::write(v23, "\n", 1uLL);
    return v13;
  }
LABEL_37:
  v23 = llvm::raw_ostream::write(v23, (const char *)a4, a5);
  v26 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (*((_BYTE **)v23 + 3) == v26)
    goto LABEL_38;
LABEL_33:
  *v26 = 10;
  ++*((_QWORD *)v23 + 4);
  return v13;
}

BOOL llvm::OptBisect::isEnabled(llvm::OptBisect *this)
{
  return *((_DWORD *)this + 2) != 0x7FFFFFFF;
}

_QWORD *std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F658;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F658;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;

  v2 = *a2;
  if ((v3 & 1) != 0
  {
    dword_1EDC04C10 = v2;
    *(_DWORD *)algn_1EDC04C14 = 0;
  }
  else
  {
    dword_1EDC04C10 = v5;
    *(_DWORD *)algn_1EDC04C14 = 0;
  }
}

uint64_t std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::target_type()
{
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::opt<char [17],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::NumOccurrencesFlag,llvm::cl::cb<void,int>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, _DWORD **a4, _WORD *a5, _QWORD *a6, _OWORD *a7)
{
  void *v14;
  uint64_t v15;
  uint64_t *GeneralCategory;
  uint64_t v17;
  const unsigned __int8 *v18;
  __int16 v19;
  _DWORD *v20;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v14 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v15 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v17 = *(unsigned int *)(a1 + 72);
  if (v17 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v14, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v17) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F88;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E235F0;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23B98;
  *(_QWORD *)(a1 + 160) = &unk_1E0E4FB88;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v18 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v18);
  v19 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v19;
  v20 = *a4;
  *(_DWORD *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v20;
  *(_WORD *)(a1 + 10) = v19 & 0xFFF8 | *a5 & 7;
  llvm::cl::cb<void,int>::apply<llvm::cl::opt<int,false,llvm::cl::parser<int>>>(a6, a1);
  *(_OWORD *)(a1 + 32) = *a7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4FB88;
  return result;
}

void std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4FB88;
}

uint64_t std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018128367ALL)
    return a1 + 8;
  if (((v3 & 0x800000018128367ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018128367ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018128367ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::target_type()
{
}

_QWORD *llvm::cl::cb<void,int>::apply<llvm::cl::opt<int,false,llvm::cl::parser<int>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (**v8)(_QWORD);
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v14 = 0;
    goto LABEL_6;
  }
  if (v3 == a1)
  {
    v14 = v13;
    (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v13);
    v4 = v14;
    if (v14)
      goto LABEL_8;
LABEL_6:
    v5 = 0;
    v6 = 0;
    goto LABEL_12;
  }
  v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
  v14 = v4;
  if (!v4)
    goto LABEL_6;
LABEL_8:
  v7 = operator new(0x28uLL);
  v6 = v7;
  v8 = (uint64_t (**)(_QWORD))&unk_1E0E4FEA8;
  *v7 = &unk_1E0E4FEA8;
  if (v4 == v13)
  {
    v7[4] = v7 + 1;
    (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
    v8 = (uint64_t (**)(_QWORD))*v6;
  }
  else
  {
    v7[4] = v4;
    v14 = 0;
  }
  v5 = ((uint64_t (**)(_QWORD *))v8)[2](v6);
LABEL_12:
  v16 = (_QWORD *)v5;
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](v15, (_QWORD *)(a2 + 160));
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 40))(v6);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

_QWORD *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E0E4FEA8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)__p = &unk_1E0E4FEA8;
  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &unk_1E0E4FEA8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
    return v2;
  }
  else
  {
    v2[4] = 0;
    return v2;
  }
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &unk_1E0E4FEA8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::target(v4);
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001812836F0)
    return a1 + 8;
  if (((v3 & 0x80000001812836F0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001812836F0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001812836F0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::target_type()
{
}

_QWORD *std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FDB0;
  return result;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::operator()()
{
  llvm::TimePassesIsEnabled = 1;
}

uint64_t std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm3$_0E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm3$_0E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm3$_0E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm3$_0E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::target_type()
{
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::cb<void,BOOL const&>>(uint64_t a1, int8x16_t *a2, _BYTE **a3, _WORD *a4, _OWORD *a5, _QWORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 145) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)a1 = &off_1E0E23588;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FB40;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [20],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::cb<void,BOOL const&>>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [20],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::cb<void,BOOL const&>>(uint64_t a1, int8x16_t *__s, _BYTE **a3, _WORD *a4, _OWORD *a5, _QWORD *a6)
{
  const unsigned __int8 *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  const char *v17;
  __int16 v18;

  v12 = (const unsigned __int8 *)strlen(__s->i8);
  llvm::cl::Option::setArgStr(a1, __s, v12);
  if (*(_QWORD *)(a1 + 128))
  {
    v17 = "cl::location(x) specified more than once!";
    v18 = 259;
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v17, 0, 0, v14);
  }
  else
  {
    v15 = *a3;
    *(_QWORD *)(a1 + 128) = *a3;
    *(_BYTE *)(a1 + 145) = 1;
    *(_BYTE *)(a1 + 144) = *v15;
  }
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  return llvm::cl::cb<void,BOOL const&>::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>>(a6, a1);
}

_QWORD *llvm::cl::cb<void,BOOL const&>::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v11 = 0;
    v5 = (_QWORD *)(a2 + 160);
    v13 = 0;
    goto LABEL_10;
  }
  if (v3 != a1)
  {
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    v11 = v4;
    v5 = (_QWORD *)(a2 + 160);
    if (v4)
      goto LABEL_4;
LABEL_8:
    v13 = 0;
    goto LABEL_10;
  }
  v11 = v10;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v10);
  v4 = v11;
  v5 = (_QWORD *)(a2 + 160);
  if (!v11)
    goto LABEL_8;
LABEL_4:
  if (v4 == v10)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
  }
  else
  {
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  }
LABEL_10:
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v12, v5);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

_QWORD *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = &unk_1E0E233E8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &unk_1E0E23AE8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_1E0E23930;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

_QWORD *llvm::cl::parser<llvm::ChangePrinter>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E0E23AE8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;

  v7 = a1;
  v23 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    v13 = 0;
    v14 = (uint64_t *)(v12 + 8);
    if (a4)
    {
      v15 = (uint64_t *)(v12 + 8);
      while (1)
      {
        v16 = *v15;
        v15 += 6;
        if (v16 == a4)
        {
          a1 = memcmp((const void *)*(v14 - 1), a3, a4);
          if (!(_DWORD)a1)
            break;
        }
        ++v13;
        v14 = v15;
        if (v11 == v13)
          goto LABEL_17;
      }
    }
    else
    {
      while (1)
      {
        v17 = *v14;
        v14 += 6;
        if (!v17)
          break;
        if (v11 == ++v13)
          goto LABEL_17;
      }
    }
    v18 = *(_DWORD *)(v12 + 48 * v13 + 40);
    v23 = v18;
  }
  else
  {
LABEL_17:
    v25 = 1283;
    v24[0] = "Cannot find option named '";
    v24[2] = a3;
    v24[3] = a4;
    v26[0] = v24;
    v26[2] = "'!";
    v27 = 770;
    v19 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v26, 0, 0, v19) & 1) != 0)
      return 1;
    v18 = 0;
  }
  *(_DWORD *)(v7 + 128) = v18;
  *(_WORD *)(v7 + 12) = a2;
  v21 = *(_QWORD *)(v7 + 592);
  if (v21)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v21 + 48))(v21, &v23);
    return 0;
  }
  else
  {
    v22 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(v22);
  }
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  *(_QWORD *)__p = &unk_1E0E233E8;
  v2 = __p + 568;
  v3 = (char *)*((_QWORD *)__p + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &unk_1E0E23AE8;
  v5 = (char *)*((_QWORD *)__p + 21);
  if (v5 != __p + 184)
    free(v5);
  *(_QWORD *)__p = &unk_1E0E23930;
  v6 = (void *)*((_QWORD *)__p + 12);
  if (v6 != *((void **)__p + 11))
    free(v6);
  v7 = (char *)*((_QWORD *)__p + 8);
  if (v7 != __p + 80)
    free(v7);
  operator delete(__p);
}

unint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*((_BYTE *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    v3 = *((_DWORD *)result + 32);
    v4 = &unk_1E0E22F28;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
  {
    v3 = a1 + 152;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v6);
        v9 = v8;
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          v10 = *(unsigned int *)(a2 + 8);
        }
        v11 = (uint64_t *)(*(_QWORD *)a2 + 16 * v10);
        *v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        v6 = (v6 + 1);
      }
      while (v5 != (_DWORD)v6);
    }
  }
}

void llvm::cl::parser<llvm::ChangePrinter>::~parser(_QWORD *__p)
{
  _QWORD *v2;

  *__p = &unk_1E0E23AE8;
  v2 = (_QWORD *)__p[2];
  if (v2 != __p + 4)
    free(v2);
  operator delete(__p);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::ChangePrinter>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [13],llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _WORD *a4, _WORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  __int16 v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0x8000 | 1;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)a1 = &off_1E0E23860;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 216) = off_1E0E4FD68;
  *(_QWORD *)(a1 + 240) = a1 + 216;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  v15 = ((*a4 & 0x1F) << 9) | *(_WORD *)(a1 + 10);
  *(_WORD *)(a1 + 10) = v15;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | v15 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::opt<char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::ValueExpected,llvm::cl::initializer<llvm::ChangePrinter>,llvm::cl::ValuesClass>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _WORD *a4, _WORD *a5, _DWORD **a6, uint64_t *a7)
{
  void *v14;
  uint64_t v15;
  uint64_t *GeneralCategory;
  uint64_t v17;
  const unsigned __int8 *v18;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v14 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v15 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v17 = *(unsigned int *)(a1 + 72);
  if (v17 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v14, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v17) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E0E22F28;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E233E8;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23AE8;
  *(_QWORD *)(a1 + 160) = a1;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x800000000;
  *(_QWORD *)(a1 + 568) = &unk_1E0E4F9A8;
  *(_QWORD *)(a1 + 592) = a1 + 568;
  v18 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v18);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::apply<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>,llvm::cl::ValueExpected,llvm::cl::initializer<llvm::ChangePrinter>,llvm::cl::ValuesClass>(a1, a5, a6, a7);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4F9A8;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4F9A8;
}

uint64_t std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001812839DFLL)
    return a1 + 8;
  if (((v3 & 0x80000001812839DFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001812839DFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001812839DFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::target_type()
{
}

void llvm::cl::apply<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>,llvm::cl::ValueExpected,llvm::cl::initializer<llvm::ChangePrinter>,llvm::cl::ValuesClass>(uint64_t a1, _WORD *a2, _DWORD **a3, uint64_t *a4)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  const unsigned __int8 *v11;
  __int128 v12;
  int v13;
  char *Address;
  uint64_t v15;
  __int128 v16;
  char v17;
  _QWORD v18[2];
  __int128 v19;
  void *v20;
  int v21;
  char v22;

  *(_WORD *)(a1 + 10) = (8 * (*a2 & 3)) | *(_WORD *)(a1 + 10) & 0xFFE7;
  v4 = *a3;
  *(_DWORD *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v4;
  v5 = *((_DWORD *)a4 + 2);
  if (v5)
  {
    v7 = *a4;
    v8 = *a4 + 40 * v5;
    v9 = a1 + 168;
    do
    {
      v11 = *(const unsigned __int8 **)(v7 + 8);
      v12 = *(_OWORD *)(v7 + 24);
      v13 = *(_DWORD *)(v7 + 16);
      v18[0] = *(_QWORD *)v7;
      v10 = (int8x16_t *)v18[0];
      v18[1] = v11;
      v19 = v12;
      v20 = &unk_1E0E22F28;
      v22 = 1;
      v21 = v13;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::reserveForParamAndGetAddress(v9, (unint64_t)v18, 1);
      v15 = *(_QWORD *)(a1 + 168) + 48 * *(unsigned int *)(a1 + 176);
      v16 = *((_OWORD *)Address + 1);
      *(_OWORD *)v15 = *(_OWORD *)Address;
      *(_OWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v15 + 32) = &unk_1E0E23068;
      v17 = Address[44];
      *(_DWORD *)(v15 + 40) = *((_DWORD *)Address + 10);
      *(_BYTE *)(v15 + 44) = v17;
      *(_QWORD *)(v15 + 32) = &unk_1E0E22F28;
      ++*(_DWORD *)(a1 + 176);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 160), v10, v11);
      v7 += 40;
    }
    while (v7 != v8);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  _OWORD *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v19 = (uint64_t)(a2 - *(_QWORD *)a1) >> 4;
      v30 = 0;
      v20 = (char *)(a1 + 16);
      v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v22 = *(char **)a1;
      v23 = *(_DWORD *)(a1 + 8);
      if (v23)
      {
        v24 = &v22[48 * v23];
        v25 = v21;
        do
        {
          v26 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v25 = *(_OWORD *)v22;
          *((_OWORD *)v25 + 1) = v26;
          *((_QWORD *)v25 + 4) = &unk_1E0E23068;
          v27 = *((_DWORD *)v22 + 10);
          v25[44] = v22[44];
          *((_DWORD *)v25 + 10) = v27;
          *((_QWORD *)v25 + 4) = &unk_1E0E22F28;
          v22 += 48;
          v25 += 48;
        }
        while (v22 != v24);
        v22 = *(char **)a1;
      }
      v28 = 0xAAAAAAAAAAAAAAABLL * v19;
      v29 = v30;
      if (v22 != v20)
        free(v22);
      *(_QWORD *)a1 = v21;
      *(_DWORD *)(a1 + 12) = v29;
      return &v21[48 * v28];
    }
    else
    {
      v30 = 0;
      v10 = (char *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v12 = *(char **)a1;
      v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        v14 = &v12[48 * v13];
        v15 = v11;
        do
        {
          v16 = *((_OWORD *)v12 + 1);
          *v15 = *(_OWORD *)v12;
          v15[1] = v16;
          *((_QWORD *)v15 + 4) = &unk_1E0E23068;
          v17 = *((_DWORD *)v12 + 10);
          *((_BYTE *)v15 + 44) = v12[44];
          *((_DWORD *)v15 + 10) = v17;
          *((_QWORD *)v15 + 4) = &unk_1E0E22F28;
          v12 += 48;
          v15 += 3;
        }
        while (v12 != v14);
        v12 = *(char **)a1;
      }
      v18 = v30;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v18;
    }
  }
  return (char *)v3;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [24],llvm::cl::OptionHidden,llvm::cl::initializer<char [5]>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, const char **a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = &unk_1E0E22F48;
  *(_QWORD *)a1 = &unk_1E0E23450;
  *(_QWORD *)(a1 + 192) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 200) = off_1E0E4FA58;
  *(_QWORD *)(a1 + 224) = a1 + 200;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::initializer<char [13]>::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>>(a4, a1);
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::value_desc,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::OptionHidden>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _OWORD *a4, _WORD *a5, _WORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;
  const unsigned __int8 *v16;
  __int16 v17;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0x8000 | 1;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)a1 = &off_1E0E23860;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 216) = off_1E0E4FD68;
  *(_QWORD *)(a1 + 240) = a1 + 216;
  v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 32) = *a4;
  v17 = ((*a5 & 0x1F) << 9) | *(_WORD *)(a1 + 10);
  *(_WORD *)(a1 + 10) = v17;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | v17 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1608;
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1656;
}

uint64_t llvm::Type::getBFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1680;
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1704;
}

uint64_t llvm::Type::getDoubleTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1728;
}

uint64_t llvm::Type::getX86_FP80Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1800;
}

uint64_t llvm::Type::getFP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1824;
}

uint64_t llvm::Type::getPPC_FP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1848;
}

uint64_t llvm::Type::getLabelTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1632;
}

uint64_t llvm::Type::getMetadataTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1752;
}

uint64_t llvm::Type::getX86_MMXTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1872;
}

uint64_t llvm::Type::getX86_AMXTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1896;
}

uint64_t llvm::Type::getTokenTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1776;
}

BOOL llvm::Type::isIntegerTy(llvm::Type *this, int a2)
{
  return *((_DWORD *)this + 2) == 13 && a2 == *((_DWORD *)this + 2) >> 8;
}

BOOL llvm::Type::isOpaquePointerTy(llvm::Type *this)
{
  _BOOL8 result;

  result = 0;
  if (this)
  {
    if (*((_BYTE *)this + 8) == 15)
      return *((_QWORD *)this + 3) == 0;
  }
  return result;
}

BOOL llvm::Type::isScalableTy(llvm::Type *this)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[32];

  v1 = *((unsigned __int8 *)this + 8);
  if (this && v1 == 17)
  {
    do
    {
      this = (llvm::Type *)*((_QWORD *)this + 3);
      v1 = *((unsigned __int8 *)this + 8);
      if (this)
        v2 = v1 == 17;
      else
        v2 = 0;
    }
    while (v2);
  }
  switch(v1)
  {
    case 16:
      v6 = v10;
      v7 = v10;
      v8 = 4;
      v9 = 0;
      v3 = llvm::StructType::containsScalableVectorType((uint64_t)this, (uint64_t)&v6);
      if (v7 != v6)
        free(v7);
      return v3;
    case 19:
      return 1;
    case 21:
      getTargetTypeInfo(this);
      return *(_BYTE *)(v5 + 8) == 19;
    default:
      return 0;
  }
}

uint64_t llvm::StructType::containsScalableVectorType(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x1000) != 0)
    return 1;
  if ((v2 & 0x2000) != 0)
    return 0;
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 != *(_QWORD *)a2)
      goto LABEL_5;
    v12 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      v15 = *(_QWORD **)(a2 + 8);
      while (*v15 != a1)
      {
        if (*v15 == -2)
          v13 = v15;
        ++v15;
        v14 -= 8;
        if (!v14)
        {
          if (!v13)
            goto LABEL_25;
          *v13 = a1;
          --*(_DWORD *)(a2 + 24);
          goto LABEL_6;
        }
      }
      return 0;
    }
LABEL_25:
    if (v12 < *(_DWORD *)(a2 + 16))
    {
      *(_DWORD *)(a2 + 20) = v12 + 1;
      *(_QWORD *)(v4 + 8 * v12) = a1;
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a2, (const void *)a1);
      if (!v5)
        return 0;
    }
  }
LABEL_6:
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    for (i = 8 * v6; i; i -= 8)
    {
      v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 8);
      if (v9 == 16)
      {
        if (llvm::StructType::containsScalableVectorType())
          goto LABEL_12;
      }
      else if (v9 == 19)
      {
LABEL_12:
        result = 1;
        *(_DWORD *)(a1 + 8) |= 0x1000u;
        return result;
      }
      v7 += 8;
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  if ((v11 & 0x100) == 0)
    return 0;
  result = 0;
  *(_DWORD *)(a1 + 8) = v11 | 0x2000;
  return result;
}

uint64_t llvm::Type::getFltSemantics(llvm::Type *this)
{
  return ((uint64_t (*)(void))((char *)llvm::APFloatBase::IEEEhalf + 4 * byte_181283A21[*((unsigned __int8 *)this + 8)]))();
}

uint64_t llvm::Type::getFloatingPointTy(llvm::APFloatBase *a1, void *a2)
{
  llvm::APFloatBase *v4;
  llvm::APFloatBase *v5;
  llvm::APFloatBase *v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *v8;

  v4 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(a1);
  if (v4 == a2)
    return *(_QWORD *)a1 + 1656;
  v5 = (llvm::APFloatBase *)llvm::APFloatBase::BFloat(v4);
  if (v5 == a2)
    return *(_QWORD *)a1 + 1680;
  v6 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEsingle(v5);
  if (v6 == a2)
    return *(_QWORD *)a1 + 1704;
  v7 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(v6);
  if (v7 == a2)
    return *(_QWORD *)a1 + 1728;
  v8 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v7);
  if (v8 == a2)
    return *(_QWORD *)a1 + 1800;
  if (llvm::APFloatBase::IEEEquad(v8) == a2)
    return *(_QWORD *)a1 + 1824;
  return *(_QWORD *)a1 + 1848;
}

BOOL llvm::Type::canLosslesslyBitCastTo(llvm::Type *this, llvm::Type *a2)
{
  unsigned int v2;
  int v6;
  unint64_t PrimitiveSizeInBits;
  char v10;
  char v11;
  char v12;
  _BOOL4 v13;

  if (this == a2)
    return 1;
  v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 14)
    return 0;
  v6 = *((_DWORD *)a2 + 2);
  if (v6 == 7 || v6 == 14)
    return 0;
  if ((v2 & 0xFE) == 0x12 && (v6 & 0xFE) == 18)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
    v11 = v10;
    return PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(a2) && v11 == v12;
  }
  else
  {
    switch(v2)
    {
      case 0xAu:
        if (v6 == 18 && llvm::Type::getPrimitiveSizeInBits(a2) == 64)
          return 1;
        break;
      case 0xBu:
        if (v6 == 18 && llvm::Type::getPrimitiveSizeInBits(a2) == 0x2000)
          return 1;
        break;
      case 0x12u:
        if (v6 == 11)
        {
          if (llvm::Type::getPrimitiveSizeInBits(this) == 0x2000)
            return 1;
        }
        else if (v6 == 10 && llvm::Type::getPrimitiveSizeInBits(this) == 64)
        {
          return 1;
        }
        break;
    }
    v13 = (v6 ^ v2) < 0x100;
    if (v6 != 15)
      v13 = 0;
    return v2 == 15 && v13;
  }
}

unint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  unint64_t v1;
  int v2;
  unint64_t result;
  uint64_t v5;

  v1 = *((unsigned int *)this + 2);
  v2 = *((_DWORD *)this + 2);
  result = 16;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 2:
      result = 32;
      break;
    case 3:
    case 10:
      result = 64;
      break;
    case 4:
      result = 80;
      break;
    case 5:
    case 6:
      result = 128;
      break;
    case 11:
      result = 0x2000;
      break;
    case 13:
      result = v1 >> 8;
      break;
    case 18:
    case 19:
      v5 = *((unsigned int *)this + 8);
      result = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type **)this + 3)) * v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::isEmptyTy@<X0>(llvm::Type *this@<X0>, int a2@<W8>)
{
  int v2;
  BOOL v3;
  unint64_t v4;
  llvm::Type **v5;
  uint64_t v6;
  unint64_t v7;
  char isEmptyTy;

  v2 = *((unsigned __int8 *)this + 8);
  if (this && v2 == 17)
  {
    while (1)
    {
      a2 = *((_DWORD *)this + 8);
      if (!a2)
        return 1;
      this = (llvm::Type *)*((_QWORD *)this + 3);
      v2 = *((unsigned __int8 *)this + 8);
      if (this)
        v3 = v2 == 17;
      else
        v3 = 0;
      if (!v3)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (v2 == 16)
    {
      v4 = *((unsigned int *)this + 3);
      if ((_DWORD)v4)
      {
        v5 = (llvm::Type **)*((_QWORD *)this + 2);
        if (llvm::Type::isEmptyTy(*v5))
        {
          v6 = 1;
          do
          {
            v7 = v6;
            if (v4 == v6)
              break;
            isEmptyTy = llvm::Type::isEmptyTy(v5[v6]);
            v6 = v7 + 1;
          }
          while ((isEmptyTy & 1) != 0);
          LOBYTE(a2) = v7 >= v4;
        }
        else
        {
          LOBYTE(a2) = 0;
        }
      }
      else
      {
        LOBYTE(a2) = 1;
      }
    }
    return (v2 == 16) & a2;
  }
}

unint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    this = (llvm::Type *)**((_QWORD **)this + 2);
  return llvm::Type::getPrimitiveSizeInBits(this);
}

uint64_t llvm::Type::isSizedDerivedType(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v2 == 17 || a1 && (v2 & 0xFE) == 0x12)
  {
    v3 = *(_QWORD *)(a1 + 24);
    return llvm::Type::isSized(v3);
  }
  if (a1 && v2 == 21)
  {
    getTargetTypeInfo((const llvm::TargetExtType *)a1);
    return llvm::Type::isSized(v3);
  }
  return llvm::StructType::isSized((uint64_t **)a1, a2);
}

uint64_t llvm::Type::isSized(uint64_t a1)
{
  unsigned int v1;
  int v2;
  BOOL v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 == 13 || v1 < 6 && ((0x2Fu >> v1) & 1) != 0)
    return 1;
  v2 = v1 & 0xFE;
  v3 = v2 == 10 || (v1 & 0xFFFFFFFD) == 4;
  if (v3 || v1 == 15)
    return 1;
  if (v2 == 16 || v2 == 18 || v1 == 21)
    return llvm::Type::isSizedDerivedType();
  else
    return 0;
}

uint64_t llvm::StructType::isSized(uint64_t **a1, llvm::SmallPtrSetImplBase *this)
{
  int v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t ***v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];

  v2 = *((_DWORD *)a1 + 2);
  if ((v2 & 0x800) == 0)
  {
    if ((v2 & 0x100) == 0)
      return 0;
    if (this)
    {
      v5 = *((_QWORD *)this + 1);
      if (v5 != *(_QWORD *)this)
        goto LABEL_6;
      v20 = *((unsigned int *)this + 5);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = 8 * v20;
        v23 = (uint64_t ***)*((_QWORD *)this + 1);
        while (*v23 != a1)
        {
          if (*v23 == (uint64_t **)-2)
            v21 = v23;
          ++v23;
          v22 -= 8;
          if (!v22)
          {
            if (!v21)
              goto LABEL_46;
            *v21 = a1;
            --*((_DWORD *)this + 6);
            goto LABEL_7;
          }
        }
        return 0;
      }
LABEL_46:
      if (v20 < *((_DWORD *)this + 4))
      {
        *((_DWORD *)this + 5) = v20 + 1;
        *(_QWORD *)(v5 + 8 * v20) = a1;
      }
      else
      {
LABEL_6:
        llvm::SmallPtrSetImplBase::insert_imp_big(this, a1);
        if (!v6)
          return 0;
      }
    }
LABEL_7:
    v7 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v7)
    {
      v8 = a1[2];
      v9 = *v8;
      if (*v8 && *(_BYTE *)(v9 + 8) == 19)
      {
        v10 = 8 * v7;
        v11 = a1[2];
        while (*v11 == v9)
        {
          ++v11;
          v10 -= 8;
          if (!v10)
            goto LABEL_36;
        }
      }
      v12 = &v8[v7];
      do
      {
        v13 = *v8;
        v14 = *(unsigned __int8 *)(*v8 + 8);
        if (*v8)
          v15 = v14 == 17;
        else
          v15 = 0;
        v16 = *v8;
        if (v15)
        {
          v16 = *v8;
          do
          {
            v16 = *(_QWORD *)(v16 + 24);
            v14 = *(unsigned __int8 *)(v16 + 8);
            if (v16)
              v17 = v14 == 17;
            else
              v17 = 0;
          }
          while (v17);
        }
        switch(v14)
        {
          case 16:
            v24 = v28;
            v25 = v28;
            v26 = 4;
            v27 = 0;
            v18 = llvm::StructType::containsScalableVectorType(v16, (uint64_t)&v24);
            if (v25 != v24)
              free(v25);
            if ((v18 & 1) != 0)
              return 0;
            break;
          case 21:
            getTargetTypeInfo((const llvm::TargetExtType *)v16);
            if (*(_BYTE *)(v19 + 8) == 19)
              return 0;
            break;
          case 19:
            return 0;
        }
        if ((llvm::Type::isSized(v13) & 1) == 0)
          return 0;
        ++v8;
      }
      while (v8 != v12);
    }
LABEL_36:
    *((_DWORD *)a1 + 2) |= 0x800u;
  }
  return 1;
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1920;
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1944;
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1968;
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 1992;
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(_QWORD *)this + 2016;
}

_QWORD *llvm::IntegerType::get(llvm::IntegerType *this, llvm::LLVMContext *a2)
{
  int v2;
  _QWORD *result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  char *buffer;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  char *v32;

  v2 = (int)a2;
  switch((int)a2)
  {
    case 1:
      return (_QWORD *)(*(_QWORD *)this + 1920);
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_7;
    case 8:
      return (_QWORD *)(*(_QWORD *)this + 1944);
    case 16:
      return (_QWORD *)(*(_QWORD *)this + 1968);
    case 32:
      return (_QWORD *)(*(_QWORD *)this + 1992);
    default:
      if ((_DWORD)a2 == 64)
        return (_QWORD *)(*(_QWORD *)this + 2016);
      if ((_DWORD)a2 == 128)
        return (_QWORD *)(*(_QWORD *)this + 2040);
LABEL_7:
      v5 = *(_QWORD *)this;
      v6 = *(_DWORD *)(*(_QWORD *)this + 2216);
      if (!v6)
        goto LABEL_42;
      v7 = *(_QWORD *)(v5 + 2200);
      v8 = (v6 - 1) & (37 * v2);
      v9 = (int *)(v7 + 16 * v8);
      v10 = *v9;
      if (*v9 == v2)
        goto LABEL_27;
      v11 = 0;
      v12 = 1;
      break;
  }
  while (v10 != -1)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == -2;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & (v6 - 1);
    v9 = (int *)(v7 + 16 * v8);
    v10 = *v9;
    if (*v9 == v2)
      goto LABEL_27;
  }
  if (v11)
    v9 = v11;
  v22 = *(_DWORD *)(v5 + 2208);
  if (4 * v22 + 4 >= 3 * v6)
  {
LABEL_42:
    v6 *= 2;
LABEL_43:
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow(v5 + 2200, v6);
    v23 = *(_DWORD *)(v5 + 2216);
    if (v23)
    {
      v24 = *(_QWORD *)(v5 + 2200);
      v25 = v23 - 1;
      v26 = v25 & (37 * v2);
      v9 = (int *)(v24 + 16 * v26);
      v27 = *v9;
      if (*v9 != v2)
      {
        v28 = 0;
        v29 = 1;
        while (v27 != -1)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == -2;
          if (v30)
            v28 = v9;
          v31 = v26 + v29++;
          v26 = v31 & v25;
          v9 = (int *)(v24 + 16 * v26);
          v27 = *v9;
          if (*v9 == v2)
            goto LABEL_24;
        }
        if (v28)
          v9 = v28;
      }
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_24;
  }
  if (v6 + ~v22 - *(_DWORD *)(v5 + 2212) <= v6 >> 3)
    goto LABEL_43;
LABEL_24:
  ++*(_DWORD *)(v5 + 2208);
  if (*v9 != -1)
    --*(_DWORD *)(v5 + 2212);
  *v9 = v2;
  *((_QWORD *)v9 + 1) = 0;
LABEL_27:
  result = (_QWORD *)*((_QWORD *)v9 + 1);
  if (!result)
  {
    v15 = *(_QWORD *)this;
    *(_QWORD *)(v15 + 2152) = *(_QWORD *)(*(_QWORD *)this + 2152) + 24;
    v16 = *(_QWORD *)(v15 + 2072);
    if (v16)
      v17 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) - v16 + 24 > *(_QWORD *)(v15 + 2080) - v16;
    else
      v17 = 1;
    if (v17)
    {
      v18 = *(_DWORD *)(v15 + 2096) >> 7;
      if (v18 >= 0x1E)
        LOBYTE(v18) = 30;
      v19 = 4096 << v18;
      buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
      v21 = *(unsigned int *)(v15 + 2096);
      if (v21 >= *(_DWORD *)(v15 + 2100))
      {
        v32 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 2088, (void *)(v15 + 2104), v21 + 1, 8);
        buffer = v32;
        LODWORD(v21) = *(_DWORD *)(v15 + 2096);
      }
      *(_QWORD *)(*(_QWORD *)(v15 + 2088) + 8 * v21) = buffer;
      ++*(_DWORD *)(v15 + 2096);
      *(_QWORD *)(v15 + 2080) = &buffer[v19];
      result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      result = (_QWORD *)((v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(_QWORD *)(v15 + 2072) = result + 3;
    *result = this;
    result[2] = 0;
    result[1] = (v2 << 8) | 0xDu;
    *((_QWORD *)v9 + 1) = result;
  }
  return result;
}

unint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  int v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t result;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  char *buffer;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  int *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  char *v33;

  v2 = (int)a2;
  v4 = *(_QWORD *)this;
  if ((_DWORD)a2)
  {
    v5 = *(_DWORD *)(v4 + 2400);
    if (!v5)
      goto LABEL_35;
    v6 = *(_QWORD *)(v4 + 2384);
    v7 = v5 - 1;
    v8 = (v5 - 1) & (37 * v2);
    v9 = (int *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == v2)
      goto LABEL_20;
    v11 = 0;
    v12 = 1;
    while (v10 != -1)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -2;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (int *)(v6 + 16 * (v14 & v7));
      v10 = *v9;
      if (*v9 == v2)
        goto LABEL_20;
    }
    if (v11)
      v9 = v11;
    v23 = *(_DWORD *)(v4 + 2392);
    if (4 * v23 + 4 < 3 * v5)
    {
      if (v5 + ~v23 - *(_DWORD *)(v4 + 2396) > v5 >> 3)
      {
LABEL_17:
        ++*(_DWORD *)(v4 + 2392);
        if (*v9 != -1)
          --*(_DWORD *)(v4 + 2396);
        *v9 = v2;
        *((_QWORD *)v9 + 1) = 0;
LABEL_20:
        v15 = (unint64_t *)(v9 + 2);
        result = *((_QWORD *)v9 + 1);
        if (result)
          return result;
        goto LABEL_21;
      }
    }
    else
    {
LABEL_35:
      v5 *= 2;
    }
    llvm::DenseMap<unsigned int,mlir::Value,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,mlir::Value>>::grow(v4 + 2384, v5);
    v24 = *(_DWORD *)(v4 + 2400);
    if (v24)
    {
      v25 = *(_QWORD *)(v4 + 2384);
      v26 = v24 - 1;
      v27 = (v24 - 1) & (37 * v2);
      v9 = (int *)(v25 + 16 * v27);
      v28 = *v9;
      if (*v9 != v2)
      {
        v29 = 0;
        v30 = 1;
        while (v28 != -1)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == -2;
          if (v31)
            v29 = v9;
          v32 = v27 + v30++;
          v27 = v32 & v26;
          v9 = (int *)(v25 + 16 * (v32 & v26));
          v28 = *v9;
          if (*v9 == v2)
            goto LABEL_17;
        }
        if (v29)
          v9 = v29;
      }
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_17;
  }
  v15 = (unint64_t *)(v4 + 2376);
  result = *(_QWORD *)(v4 + 2376);
  if (result)
    return result;
LABEL_21:
  *(_QWORD *)(v4 + 2152) += 32;
  v17 = *(_QWORD *)(v4 + 2072);
  if (v17)
    v18 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 32 > *(_QWORD *)(v4 + 2080) - v17;
  else
    v18 = 1;
  if (v18)
  {
    v19 = *(_DWORD *)(v4 + 2096) >> 7;
    if (v19 >= 0x1E)
      LOBYTE(v19) = 30;
    v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    v22 = *(unsigned int *)(v4 + 2096);
    if (v22 >= *(_DWORD *)(v4 + 2100))
    {
      v33 = buffer;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 2088, (void *)(v4 + 2104), v22 + 1, 8);
      buffer = v33;
      LODWORD(v22) = *(_DWORD *)(v4 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 2088) + 8 * v22) = buffer;
    ++*(_DWORD *)(v4 + 2096);
    *(_QWORD *)(v4 + 2080) = &buffer[v20];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v4 + 2072) = result + 32;
  *(_QWORD *)result = this;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 8) = (v2 << 8) | 0xF;
  *v15 = result;
  return result;
}

unint64_t llvm::Type::getInt1PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  if (llvm::LLVMContext::supportsTypedPointers((llvm::LLVMContextImpl **)this))
    return llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)this + 1920), a2);
  else
    return llvm::PointerType::get(this, a2);
}

unint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  if (llvm::LLVMContext::supportsTypedPointers((llvm::LLVMContextImpl **)this))
    return llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)this + 1944), a2);
  else
    return llvm::PointerType::get(this, a2);
}

uint64_t llvm::FunctionType::get(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  _QWORD *v25;

  v8 = **a1;
  v22[0] = a1;
  v22[1] = a2;
  v22[2] = a3;
  v23 = a4;
  v24 = 0;
  v25 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)(v8 + 2224), (char *)v22, &v25) & 1) != 0)return *v25;
  v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(v8 + 2224, (uint64_t)&v24, (char *)v22, v25);
  *v10 = v24;
  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v8 + 2072), 8 * a3 + 32, 3);
  *(_QWORD *)result = *a1;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 16) = 0;
  if (a4)
    v11 = 270;
  else
    v11 = 14;
  *(_DWORD *)(result + 8) = v11;
  if ((_DWORD)a3)
  {
    if (a3 >= 6uLL && (unint64_t)(result - a2) < 0xFFFFFFFFFFFFFFE0)
    {
      v12 = a3 - (unint64_t)(a3 & 3);
      v18 = (_OWORD *)(result + 48);
      v19 = (__int128 *)(a2 + 16);
      v20 = v12;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if ((a3 & 3) == 0)
        goto LABEL_12;
    }
    else
    {
      v12 = 0;
    }
    v13 = a3 - v12;
    v14 = 8 * v12;
    v15 = (_QWORD *)(8 * v12 + result + 32);
    v16 = (uint64_t *)(a2 + v14);
    do
    {
      v17 = *v16++;
      *v15++ = v17;
      --v13;
    }
    while (v13);
  }
LABEL_12:
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a3 + 1;
  *v10 = result;
  return result;
}

uint64_t llvm::FunctionType::get(uint64_t **this, llvm::Type *a2)
{
  return llvm::FunctionType::get(this, 0, 0, (int)a2);
}

BOOL llvm::FunctionType::isValidArgumentType(llvm::FunctionType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 8);
  return v2 != 14 && v2 != 7;
}

unint64_t llvm::StructType::get(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  char *buffer;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  char *v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  _QWORD *v36;

  v8 = *a1;
  v33[0] = a2;
  v33[1] = a3;
  v34 = a4;
  v9 = v8 + 2248;
  v35 = 0;
  v36 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)(v8 + 2248), (uint64_t)v33, &v36) & 1) == 0)
  {
    v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(v9, (uint64_t)&v35, (uint64_t)v33, v36);
    *v11 = v35;
    v12 = *a1;
    *(_QWORD *)(v12 + 2152) = *(_QWORD *)(*a1 + 2152) + 32;
    v13 = *(_QWORD *)(v12 + 2072);
    if (v13)
      v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 32 > *(_QWORD *)(v12 + 2080) - v13;
    else
      v14 = 1;
    if (v14)
    {
      v15 = *(_DWORD *)(v12 + 2096) >> 7;
      if (v15 >= 0x1E)
        LOBYTE(v15) = 30;
      v16 = 4096 << v15;
      buffer = (char *)llvm::allocate_buffer(4096 << v15, (std::align_val_t)8uLL);
      v18 = *(unsigned int *)(v12 + 2096);
      if (v18 >= *(_DWORD *)(v12 + 2100))
      {
        v32 = buffer;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 2088, (void *)(v12 + 2104), v18 + 1, 8);
        buffer = v32;
        LODWORD(v18) = *(_DWORD *)(v12 + 2096);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 2088) + 8 * v18) = buffer;
      ++*(_DWORD *)(v12 + 2096);
      *(_QWORD *)(v12 + 2080) = &buffer[v16];
      v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v10 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v12 + 2072) = v10 + 32;
    *(_QWORD *)v10 = a1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    if (a4)
      v19 = 1808;
    else
      v19 = 1296;
    *(_DWORD *)(v10 + 8) = v19;
    *(_DWORD *)(v10 + 12) = a3;
    if (a3)
    {
      v20 = a2;
      v21 = 8 * a3;
      v22 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(*a1 + 2072), v21, 3);
      if ((unint64_t)(v21 - 8) < 0x18)
      {
        v23 = (_QWORD *)v22;
      }
      else
      {
        v23 = (_QWORD *)v22;
        if ((unint64_t)(v22 - (_QWORD)a2) >= 0x20)
        {
          v24 = 0;
          v25 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v26 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          v23 = (_QWORD *)(v22 + v26 * 8);
          v20 = &a2[v26];
          v27 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = (_OWORD *)(v22 + v24 * 8);
            v29 = *(_OWORD *)&a2[v24 + 2];
            *v28 = *(_OWORD *)&a2[v24];
            v28[1] = v29;
            v24 += 4;
            v27 -= 4;
          }
          while (v27);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
        }
      }
      do
      {
        v30 = *v20++;
        *v23++ = v30;
      }
      while (v20 != &a2[(unint64_t)v21 / 8]);
    }
    else
    {
      v22 = 0;
    }
LABEL_26:
    *(_QWORD *)(v10 + 16) = v22;
    *v11 = v10;
    return v10;
  }
  return *v36;
}

uint64_t llvm::StructType::setBody(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;

  if (a4)
    v5 = 768;
  else
    v5 = 256;
  *(_DWORD *)(a1 + 8) |= v5;
  *(_DWORD *)(a1 + 12) = a3;
  if (a3)
  {
    v7 = 8 * a3;
    result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(**(_QWORD **)a1 + 2072), 8 * a3, 3);
    if ((unint64_t)(v7 - 8) < 0x18)
    {
      v9 = (_QWORD *)result;
      v10 = a2;
    }
    else
    {
      v9 = (_QWORD *)result;
      v10 = a2;
      if ((unint64_t)(result - (_QWORD)a2) >= 0x20)
      {
        v11 = 0;
        v12 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v13 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        v9 = (_QWORD *)(result + v13 * 8);
        v10 = &a2[v13];
        v14 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v15 = (_OWORD *)(result + v11 * 8);
          v16 = *(_OWORD *)&a2[v11 + 2];
          *v15 = *(_OWORD *)&a2[v11];
          v15[1] = v16;
          v11 += 4;
          v14 -= 4;
        }
        while (v14);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_10;
      }
    }
    do
    {
      v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != &a2[(unint64_t)v7 / 8]);
LABEL_10:
    *(_QWORD *)(a1 + 16) = result;
    return result;
  }
  result = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t llvm::StructType::setName(uint64_t result, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v5;
  const unsigned __int8 **v6;
  const void *v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  const unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  int8x16_t *v22;
  const unsigned __int8 *v23;
  uint64_t v24;
  void (**v25)(llvm::raw_svector_ostream *__hidden);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  int8x16_t *v34;
  const unsigned __int8 *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  _QWORD v39[9];

  v5 = result;
  v39[8] = *MEMORY[0x1E0C80C00];
  v6 = *(const unsigned __int8 ***)(result + 24);
  if (v6)
  {
    v7 = v6 + 2;
    if (a3 != *v6)
      goto LABEL_7;
LABEL_5:
    if (!a3)
      return result;
    result = memcmp(a2, v7, (size_t)a3);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  v7 = 0;
  if (!a3)
    goto LABEL_5;
LABEL_7:
  if (v6)
    llvm::StringMapImpl::RemoveKey(**(_QWORD **)v5 + 2272, v6);
  if (a3)
  {
    v8 = **(_QWORD **)v5 + 2272;
    v34 = a2;
    v35 = a3;
    v36 = v5;
    v9 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(v8, a2, a3, &v36);
    if (v10)
    {
      v11 = v9;
    }
    else
    {
      v37 = v39;
      v38 = xmmword_181236C00;
      if ((unint64_t)a3 < 0x41)
      {
        v12 = 0;
        v13 = v39;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v37, v39, (unint64_t)a3, 1);
        v13 = v37;
        v12 = v38;
      }
      memcpy((char *)v13 + v12, a2, (size_t)a3);
      v14 = &a3[v38];
      *(_QWORD *)&v38 = v14;
      if ((unint64_t)(v14 + 1) > *((_QWORD *)&v38 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v37, v39, (unint64_t)(v14 + 1), 1);
        v14 = (const unsigned __int8 *)v38;
      }
      v14[(_QWORD)v37] = 46;
      *(_QWORD *)&v38 = v38 + 1;
      v26 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v25 = off_1E0E22B88;
      v33 = &v37;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v25, 0, 0, 0);
      v15 = ((_DWORD)a3 + 1);
      do
      {
        v21 = v38;
        if ((_QWORD)v38 != v15)
        {
          if ((unint64_t)v38 <= v15)
          {
            if (*((_QWORD *)&v38 + 1) < v15)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v37, v39, v15, 1);
              v21 = v38;
            }
            if (v15 != v21)
              bzero((char *)v37 + v21, v15 - v21);
          }
          *(_QWORD *)&v38 = v15;
        }
        v16 = **(_QWORD **)v5;
        v17 = *(unsigned int *)(v16 + 2296);
        *(_DWORD *)(v16 + 2296) = v17 + 1;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v25, v17);
        v18 = **(_QWORD **)v5 + 2272;
        v22 = (int8x16_t *)*v33;
        v23 = (const unsigned __int8 *)v33[1];
        v24 = v5;
        v19 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(v18, v22, v23, &v24);
      }
      while (!v20);
      v11 = v19;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v25);
      if (v37 != v39)
        free(v37);
    }
    result = *(_QWORD *)(v5 + 24);
    if (result)
      llvm::deallocate_buffer((llvm *)result, (void *)(*(_QWORD *)result + 17));
    *(_QWORD *)(v5 + 24) = *v11;
  }
  else
  {
    result = *(_QWORD *)(v5 + 24);
    if (result)
      llvm::deallocate_buffer((llvm *)result, (void *)(*(_QWORD *)result + 17));
  }
  return result;
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result += 16;
  return result;
}

unint64_t llvm::StructType::create(uint64_t *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  char *buffer;
  uint64_t v12;
  unint64_t v13;

  v6 = *a1;
  *(_QWORD *)(v6 + 2152) = *(_QWORD *)(*a1 + 2152) + 32;
  v7 = *(_QWORD *)(v6 + 2072);
  if (v7)
    v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 32 > *(_QWORD *)(v6 + 2080) - v7;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_DWORD *)(v6 + 2096) >> 7;
    if (v9 >= 0x1E)
      LOBYTE(v9) = 30;
    v10 = 4096 << v9;
    buffer = (char *)llvm::allocate_buffer(4096 << v9, (std::align_val_t)8uLL);
    v12 = *(unsigned int *)(v6 + 2096);
    if (v12 >= *(_DWORD *)(v6 + 2100))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 2088, (void *)(v6 + 2104), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(v6 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 2088) + 8 * v12) = buffer;
    ++*(_DWORD *)(v6 + 2096);
    *(_QWORD *)(v6 + 2080) = &buffer[v10];
    v13 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v13 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v6 + 2072) = v13 + 32;
  *(_QWORD *)v13 = a1;
  *(_DWORD *)(v13 + 8) = 16;
  *(_QWORD *)(v13 + 20) = 0;
  *(_QWORD *)(v13 + 12) = 0;
  *(_DWORD *)(v13 + 28) = 0;
  if (a3)
    llvm::StructType::setName(v13, a2, a3);
  return v13;
}

unint64_t llvm::StructType::create(llvm::StructType *this, llvm::LLVMContext *a2)
{
  return llvm::StructType::create((uint64_t *)this, 0, 0);
}

BOOL llvm::StructType::isLayoutIdentical(const void **this, const void **a2)
{
  uint64_t v2;

  if (this == a2)
    return 1;
  if (((*((unsigned __int8 *)this + 9) ^ *((unsigned __int8 *)a2 + 9)) & 2) != 0)
    return 0;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 3))
    return 0;
  return memcmp(this[2], a2[2], 8 * v2) == 0;
}

uint64_t llvm::StructType::getTypeAtIndex(llvm::StructType *this, const llvm::Value *a2)
{
  uint64_t UniqueInteger;
  unsigned int *v4;

  UniqueInteger = llvm::Constant::getUniqueInteger(a2);
  if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
    v4 = *(unsigned int **)UniqueInteger;
  else
    v4 = (unsigned int *)UniqueInteger;
  return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * *v4);
}

unsigned __int8 *llvm::StructType::indexValid(llvm::StructType *this, const llvm::Value *a2)
{
  int v3;
  int v4;
  int v5;
  unsigned __int8 *result;
  unsigned int v8;
  _QWORD *v9;

  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v4 = v3 & 0xFE;
  v5 = v3;
  if (v4 == 18)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v3 == 19 || v5 != 8205)
    return 0;
  v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 > 0x14)
    return 0;
  if (v4 == 18)
  {
    result = (unsigned __int8 *)llvm::Constant::getSplatValue(a2, 0);
    if (!result)
      return result;
    a2 = (const llvm::Value *)result;
    v8 = result[16];
  }
  if (v8 != 16)
    return 0;
  v9 = (_QWORD *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u)
    v9 = (_QWORD *)*v9;
  return (unsigned __int8 *)(*v9 < (unint64_t)*((unsigned int *)this + 3));
}

double llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  uint64_t v4;
  char v5;
  double result;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  _QWORD *v14;
  llvm::ArrayType *v15;
  llvm::Type *v16;
  _QWORD *v17;

  v4 = **(_QWORD **)this;
  v15 = this;
  v16 = a2;
  v17 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)(v4 + 2328), &v15, &v17);
  v7 = v17;
  if ((v5 & 1) != 0)
  {
    if (v17[2])
      return result;
  }
  else
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>(v4 + 2328, (uint64_t)&v15, &v15, v17);
    *v7 = v15;
    v7[1] = v16;
    v7[2] = 0;
  }
  *(_QWORD *)(v4 + 2152) += 40;
  v8 = *(_QWORD *)(v4 + 2072);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 40 > *(_QWORD *)(v4 + 2080) - v8;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(v4 + 2096) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(v4 + 2096);
    if (v13 >= *(_DWORD *)(v4 + 2100))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 2088, (void *)(v4 + 2104), v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(v4 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 2088) + 8 * v13) = buffer;
    ++*(_DWORD *)(v4 + 2096);
    *(_QWORD *)(v4 + 2080) = &buffer[v11];
    v14 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v14 = (_QWORD *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)(v4 + 2072) = v14 + 5;
  *v14 = *(_QWORD *)this;
  v14[3] = this;
  v14[4] = a2;
  v14[2] = v14 + 3;
  *(_QWORD *)&result = 0x100000011;
  v14[1] = 0x100000011;
  v7[2] = v14;
  return result;
}

BOOL llvm::ArrayType::isValidElementType(llvm::ArrayType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 8u || ((0xA7u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

double llvm::VectorType::get(llvm::ScalableVectorType *this, llvm::Type *a2)
{
  if (((unint64_t)a2 & 0xFF00000000) != 0)
    return llvm::ScalableVectorType::get(this, a2);
  else
    return llvm::FixedVectorType::get(this, a2);
}

double llvm::ScalableVectorType::get(llvm::ScalableVectorType *this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  char *buffer;
  uint64_t v14;
  unint64_t v15;
  llvm::ScalableVectorType *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (int)a2;
  v4 = **(_QWORD **)this;
  v16 = this;
  v17 = a2 | 0x100000000;
  v18 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)(v4 + 2352), (uint64_t)&v16, &v18);
  v7 = v18;
  if ((v5 & 1) != 0)
  {
    if (*(_QWORD *)(v18 + 16))
      return result;
  }
  else
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>(v4 + 2352, (uint64_t)&v16, (uint64_t)&v16, v18);
    *(_QWORD *)v7 = v16;
    v8 = v17;
    *(_BYTE *)(v7 + 12) = BYTE4(v17);
    *(_DWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_QWORD *)(v4 + 2152) += 40;
  v9 = *(_QWORD *)(v4 + 2072);
  if (v9)
    v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 40 > *(_QWORD *)(v4 + 2080) - v9;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_DWORD *)(v4 + 2096) >> 7;
    if (v11 >= 0x1E)
      LOBYTE(v11) = 30;
    v12 = 4096 << v11;
    buffer = (char *)llvm::allocate_buffer(4096 << v11, (std::align_val_t)8uLL);
    v14 = *(unsigned int *)(v4 + 2096);
    if (v14 >= *(_DWORD *)(v4 + 2100))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 2088, (void *)(v4 + 2104), v14 + 1, 8);
      LODWORD(v14) = *(_DWORD *)(v4 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 2088) + 8 * v14) = buffer;
    ++*(_DWORD *)(v4 + 2096);
    *(_QWORD *)(v4 + 2080) = &buffer[v12];
    v15 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v15 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v4 + 2072) = v15 + 40;
  *(_QWORD *)v15 = *(_QWORD *)this;
  *(_QWORD *)(v15 + 24) = this;
  *(_DWORD *)(v15 + 32) = v2;
  *(_QWORD *)(v15 + 16) = v15 + 24;
  *(_QWORD *)&result = 0x100000013;
  *(_QWORD *)(v15 + 8) = 0x100000013;
  *(_QWORD *)(v7 + 16) = v15;
  return result;
}

double llvm::FixedVectorType::get(llvm::FixedVectorType *this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  char *buffer;
  uint64_t v14;
  unint64_t v15;
  llvm::FixedVectorType *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (int)a2;
  v4 = **(_QWORD **)this;
  v16 = this;
  v17 = a2;
  v18 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)(v4 + 2352), (uint64_t)&v16, &v18);
  v7 = v18;
  if ((v5 & 1) != 0)
  {
    if (*(_QWORD *)(v18 + 16))
      return result;
  }
  else
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>(v4 + 2352, (uint64_t)&v16, (uint64_t)&v16, v18);
    *(_QWORD *)v7 = v16;
    v8 = v17;
    *(_BYTE *)(v7 + 12) = BYTE4(v17);
    *(_DWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_QWORD *)(v4 + 2152) += 40;
  v9 = *(_QWORD *)(v4 + 2072);
  if (v9)
    v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 40 > *(_QWORD *)(v4 + 2080) - v9;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(_DWORD *)(v4 + 2096) >> 7;
    if (v11 >= 0x1E)
      LOBYTE(v11) = 30;
    v12 = 4096 << v11;
    buffer = (char *)llvm::allocate_buffer(4096 << v11, (std::align_val_t)8uLL);
    v14 = *(unsigned int *)(v4 + 2096);
    if (v14 >= *(_DWORD *)(v4 + 2100))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 2088, (void *)(v4 + 2104), v14 + 1, 8);
      LODWORD(v14) = *(_DWORD *)(v4 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 2088) + 8 * v14) = buffer;
    ++*(_DWORD *)(v4 + 2096);
    *(_QWORD *)(v4 + 2080) = &buffer[v12];
    v15 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v15 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v4 + 2072) = v15 + 40;
  *(_QWORD *)v15 = *(_QWORD *)this;
  *(_QWORD *)(v15 + 24) = this;
  *(_DWORD *)(v15 + 32) = v2;
  *(_QWORD *)(v15 + 16) = v15 + 24;
  *(_QWORD *)&result = 0x100000012;
  *(_QWORD *)(v15 + 8) = 0x100000012;
  *(_QWORD *)(v7 + 16) = v15;
  return result;
}

BOOL llvm::VectorType::isValidElementType(llvm::VectorType *this, llvm::Type *a2)
{
  unsigned int v2;

  v2 = *((unsigned __int8 *)this + 8);
  if (v2 == 13 || v2 < 6 && ((0x2Fu >> v2) & 1) != 0)
    return 1;
  return (v2 & 0xFFFFFFFD) == 4 || v2 == 15 || v2 == 20;
}

uint64_t llvm::PointerType::get(llvm::PointerType **this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  char *buffer;
  uint64_t v13;
  char *v14;
  llvm::PointerType **v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)*this;
  if (llvm::LLVMContextImpl::getOpaquePointers((llvm::LLVMContextImpl *)v4))
    return llvm::PointerType::get(*this, a2);
  v15 = this;
  v16 = a2;
  v17 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)(v4 + 2408), (uint64_t)&v15, &v17);
  v7 = v17;
  if ((v6 & 1) != 0)
  {
    result = *(_QWORD *)(v17 + 16);
    if (result)
      return result;
  }
  else
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(v4 + 2408, (uint64_t)&v15, (uint64_t)&v15, v17);
    *(_QWORD *)v7 = v15;
    *(_DWORD *)(v7 + 8) = v16;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_QWORD *)(v4 + 2152) += 32;
  v8 = *(_QWORD *)(v4 + 2072);
  if (v8)
    v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 32 > *(_QWORD *)(v4 + 2080) - v8;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(v4 + 2096) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 4096 << v10;
    buffer = (char *)llvm::allocate_buffer(4096 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(v4 + 2096);
    if (v13 >= *(_DWORD *)(v4 + 2100))
    {
      v14 = buffer;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 2088, (void *)(v4 + 2104), v13 + 1, 8);
      buffer = v14;
      LODWORD(v13) = *(_DWORD *)(v4 + 2096);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 2088) + 8 * v13) = buffer;
    ++*(_DWORD *)(v4 + 2096);
    *(_QWORD *)(v4 + 2080) = &buffer[v11];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v4 + 2072) = result + 32;
  *(_QWORD *)result = *this;
  *(_QWORD *)(result + 24) = this;
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 8) = ((_DWORD)a2 << 8) | 0xF;
  *(_DWORD *)(result + 12) = 1;
  *(_QWORD *)(v7 + 16) = result;
  return result;
}

BOOL llvm::PointerType::isValidElementType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 6u || ((0x27u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

BOOL llvm::PointerType::isLoadableOrStorableType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 2);
  if ((v2 - 7) < 6u && ((0x27u >> (v2 - 7)) & 1) != 0)
    return 0;
  v3 = *((_DWORD *)this + 2);
  return v3 != 11 && v3 != 14;
}

uint64_t llvm::TargetExtType::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  _QWORD v39[6];
  uint64_t v40;
  uint64_t *v41;

  v39[0] = a2;
  v39[1] = a3;
  v39[2] = a4;
  v39[3] = a5;
  v39[4] = a6;
  v39[5] = a7;
  v14 = (uint64_t *)(*(_QWORD *)a1 + 2304);
  v40 = 0;
  v41 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>(v14, (uint64_t)v39, &v41) & 1) == 0)
  {
    v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t)v14, (uint64_t)&v40, (uint64_t)v39, v41);
    *v16 = v40;
    v15 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(*(_QWORD *)a1 + 2072), 8 * a5 + 4 * a7 + 48, 3);
    *(_QWORD *)v15 = a1;
    *(_QWORD *)(v15 + 8) = 21;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = llvm::UniqueStringSaver::save(*(_QWORD *)a1 + 2168, a2, a3);
    *(_QWORD *)(v15 + 32) = v17;
    *(_DWORD *)(v15 + 12) = a5;
    v18 = (_QWORD *)(v15 + 48);
    *(_QWORD *)(v15 + 16) = v15 + 48;
    if (!a5)
      goto LABEL_11;
    v19 = (a5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19 >= 5)
    {
      v20 = (uint64_t *)a4;
      if ((unint64_t)(v15 - a4 + 48) >= 0x20)
      {
        v21 = v19 + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v18 = (_QWORD *)((char *)v18 + v22);
        v20 = (uint64_t *)(a4 + v22);
        v23 = (__int128 *)(a4 + 16);
        v24 = (_OWORD *)(v15 + 64);
        v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *v24 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_11:
          *(_DWORD *)(v15 + 8) = *(unsigned __int8 *)(v15 + 8) | ((_DWORD)a7 << 8);
          *(_QWORD *)(v15 + 40) = v18;
          if (a7)
          {
            v28 = (int *)a6;
            v29 = (a7 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v29 < 7 || (unint64_t)v18 - a6 < 0x20)
            {
              v32 = v18;
            }
            else
            {
              v30 = v29 + 1;
              v31 = (v29 + 1) & 0x7FFFFFFFFFFFFFF8;
              v28 = (int *)(a6 + 4 * v31);
              v32 = (_DWORD *)v18 + v31;
              v33 = v18 + 2;
              v34 = (__int128 *)(a6 + 16);
              v35 = v31;
              do
              {
                v36 = *v34;
                *(v33 - 1) = *(v34 - 1);
                *v33 = v36;
                v33 += 2;
                v34 += 2;
                v35 -= 8;
              }
              while (v35);
              if (v30 == v31)
                goto LABEL_20;
            }
            do
            {
              v37 = *v28++;
              *v32++ = v37;
            }
            while (v28 != (int *)(a6 + 4 * a7));
          }
LABEL_20:
          *v16 = v15;
          return v15;
        }
      }
    }
    else
    {
      v20 = (uint64_t *)a4;
    }
    do
    {
      v27 = *v20++;
      *v18++ = v27;
    }
    while (v20 != (uint64_t *)(a4 + 8 * a5));
    goto LABEL_11;
  }
  return *v41;
}

double getTargetTypeInfo(const llvm::TargetExtType *a1)
{
  llvm::PointerType *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  double result;

  v1 = *(llvm::PointerType **)a1;
  v2 = *((_QWORD *)a1 + 4);
  if (v2 >= 6)
  {
    v3 = (uint64_t *)*((_QWORD *)a1 + 3);
    if (*(_DWORD *)v3 == 1919512691 && *((_WORD *)v3 + 2) == 11894)
    {
      if (llvm::LLVMContext::supportsTypedPointers(*(llvm::LLVMContextImpl ***)a1))
        llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)v1 + 1944), 0);
      else
        llvm::PointerType::get(v1, 0);
    }
    else if (v2 == 15)
    {
      v5 = *v3;
      v6 = *(uint64_t *)((char *)v3 + 7);
      if (v5 == 0x2E34366863726161 && v6 == 0x746E756F6376732ELL)
        return llvm::ScalableVectorType::get((llvm::ScalableVectorType *)(*(_QWORD *)v1 + 1920), (llvm::Type *)0x10);
    }
  }
  return result;
}

BOOL llvm::TargetExtType::hasProperty(const llvm::TargetExtType *a1, int a2)
{
  int v3;

  getTargetTypeInfo(a1);
  return (~v3 & a2) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>(uint64_t *a1, char *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  const void *v18;
  uint64_t v19;
  int64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t result;
  const void *v26;
  uint64_t v27;
  unint64_t v28;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v28 = llvm::hashing::detail::hash_combine_range_impl<char const>(*((_QWORD **)a2 + 1), *((_QWORD *)a2 + 1) + 8 * *((_QWORD *)a2 + 2));
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(a2, (uint64_t *)&v28, a2 + 24);
    v10 = a2[24];
    v12 = (const void *)*((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a2 + 2);
    v13 = *(_QWORD *)a2;
    v14 = 1;
    v15 = (_QWORD *)(v6 + 8 * v9);
    v16 = *v15;
    if (*v15 == -8192)
      goto LABEL_11;
    while (v16 != -4096)
    {
      v17 = *(uint64_t **)(v16 + 16);
      v19 = *v17;
      v18 = v17 + 1;
      if (v13 == v19 && v10 == *(_DWORD *)(v16 + 8) > 0xFFu)
      {
        v21 = 8 * *(unsigned int *)(v16 + 12) - 8;
        if (v11 == v21 >> 3)
        {
          v26 = v12;
          v27 = v11;
          v22 = memcmp(v12, v18, v21);
          v12 = v26;
          v11 = v27;
          if (!v22)
          {
            result = 1;
            goto LABEL_22;
          }
        }
      }
      do
      {
LABEL_11:
        if (v7)
          v23 = 0;
        else
          v23 = v16 == -8192;
        if (v23)
          v7 = v15;
        v24 = v9 + v14++;
        v9 = v24 & v8;
        v15 = (_QWORD *)(v6 + 8 * (v24 & v8));
        v16 = *v15;
      }
      while (*v15 == -8192);
    }
    result = 0;
    if (v7)
      v15 = v7;
  }
  else
  {
    v15 = 0;
    result = 0;
  }
LABEL_22:
  *a3 = v15;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(unint64_t a1, uint64_t a2, char *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(unint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  uint64_t v17;
  char *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = (char *)(8 * v3);
    llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::moveFromOldBuckets(a1, v4, (uint64_t *)&v10[(_QWORD)v4]);
    llvm::deallocate_buffer((llvm *)v4, v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v13 = (char *)result;
    if (v12 < 3)
      goto LABEL_11;
    v14 = v12 + 1;
    v13 = &result->i8[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
    v15 = result + 1;
    v16 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v16;
      *v15 = v16;
      v15 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      v18 = &result->i8[8 * v11];
      do
      {
        *(_QWORD *)v13 = -4096;
        v13 += 8;
      }
      while (v13 != v18);
    }
  }
  return result;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::moveFromOldBuckets(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32[8];
  unint64_t v33;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v9 = *(int64x2_t **)result;
    if (v8 < 3)
      goto LABEL_6;
    v10 = v8 + 1;
    v9 = (int64x2_t *)((char *)v7 + 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL));
    v11 = v7 + 1;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v12;
      *v11 = v12;
      v11 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_6:
      v14 = (int64x2_t *)((char *)v7 + 8 * v6);
      do
      {
        v9->i64[0] = -4096;
        v9 = (int64x2_t *)((char *)v9 + 8);
      }
      while (v9 != v14);
    }
  }
  if (a2 != a3)
  {
    do
    {
      v16 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = *(_QWORD *)v5;
        v18 = *(_DWORD *)(v5 + 16);
        v19 = *(uint64_t **)(v16 + 16);
        v20 = 8 * *(unsigned int *)(v16 + 12) - 8;
        v29 = *v19;
        v30 = v19 + 1;
        v31 = v20 >> 3;
        v32[0] = *(_DWORD *)(v16 + 8) > 0xFFu;
        v33 = llvm::hashing::detail::hash_combine_range_impl<char const>(v30, (uint64_t)v30 + v20);
        result = llvm::hash_combine<llvm::MDString *,llvm::Metadata *,BOOL>(&v29, (uint64_t *)&v33, v32);
        v21 = v18 - 1;
        v22 = (v18 - 1) & result;
        v23 = *v4;
        v15 = (_QWORD *)(v17 + 8 * v22);
        v24 = *v15;
        if (*v4 != *v15)
        {
          v25 = 0;
          v26 = 1;
          while (v24 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v24 == -8192;
            if (v27)
              v25 = v15;
            v28 = v22 + v26++;
            v22 = v28 & v21;
            v15 = (_QWORD *)(v17 + 8 * (v28 & v21));
            v24 = *v15;
            if (v23 == *v15)
              goto LABEL_12;
          }
          if (v25)
            v15 = v25;
        }
LABEL_12:
        *v15 = v23;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  const void *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t result;
  unint64_t v25;
  const void *v26;
  size_t v27;
  __int128 v28;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
    if ((v8 & 1) == 0
    {
      v25 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v25 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v25;
    }
    v9 = 0;
    *(_QWORD *)&v28 = v7;
    v10 = *(unsigned __int8 *)(a2 + 16);
    BYTE8(v28) = *(_BYTE *)(a2 + 16);
    v11 = __ROR8__(*(_QWORD *)((char *)&v28 + 1) + 9, 9);
    v12 = 0x9DDFEA08EB382D69
        * (v11 ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ v7 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ v7 ^ v11)));
    v13 = v4 - 1;
    v14 = v13 & ((-348639895 * ((v12 >> 47) ^ v12)) ^ (v7 >> 8));
    v15 = *(const void **)a2;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = 8 * v16;
    v18 = 1;
    v19 = (_QWORD *)(v6 + 8 * v14);
    v20 = *v19;
    if (*v19 == -8192)
      goto LABEL_8;
    while (v20 != -4096)
    {
      if (v10 == ((*(_DWORD *)(v20 + 8) >> 9) & 1) && v16 == *(_DWORD *)(v20 + 12))
      {
        v26 = v15;
        v27 = v17;
        v21 = memcmp(v15, *(const void **)(v20 + 16), v17);
        v15 = v26;
        v17 = v27;
        if (!v21)
        {
          result = 1;
          goto LABEL_19;
        }
      }
      do
      {
LABEL_8:
        if (v9)
          v22 = 0;
        else
          v22 = v20 == -8192;
        if (v22)
          v9 = v19;
        v23 = v14 + v18++;
        v14 = v23 & v13;
        v19 = (_QWORD *)(v6 + 8 * (v23 & v13));
        v20 = *v19;
      }
      while (*v19 == -8192);
    }
    result = 0;
    if (v9)
      v19 = v9;
  }
  else
  {
    v19 = 0;
    result = 0;
  }
LABEL_19:
  *a3 = v19;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  llvm *v27;
  int v28;
  int HashValue;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if ((_DWORD)v3)
    {
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v27 = *(llvm **)a1;
          v28 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::getHashValue((uint64_t)v18);
          v30 = v28 - 1;
          v31 = *(_QWORD *)v18;
          v32 = HashValue & (v28 - 1);
          v26 = (_QWORD *)((char *)v27 + 8 * v32);
          v33 = *v26;
          if (*(_QWORD *)v18 != *v26)
          {
            v34 = 0;
            v35 = 1;
            while (v33 != -4096)
            {
              if (v34)
                v36 = 0;
              else
                v36 = v33 == -8192;
              if (v36)
                v34 = v26;
              v37 = v32 + v35++;
              v32 = v37 & v30;
              v26 = (_QWORD *)((char *)v27 + 8 * (v37 & v30));
              v33 = *v26;
              if (v31 == *v26)
                goto LABEL_24;
            }
            if (v34)
              v26 = v34;
          }
LABEL_24:
          *v26 = v31;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 8);
      }
      while (v18 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3)
      goto LABEL_19;
    v21 = v20 + 1;
    v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 = result + 1;
    v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      v25 = &result->i8[8 * v19];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

unint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::getHashValue(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v2 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * *(unsigned int *)(*(_QWORD *)a1 + 12));
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v11 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v8;
    v2 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v11;
    }
  }
  *(_QWORD *)&v12 = v2;
  BYTE8(v12) = (v1 & 0x200) != 0;
  v5 = __ROR8__(*(_QWORD *)((char *)&v12 + 1) + 9, 9);
  v6 = 0x9DDFEA08EB382D69
     * (v5 ^ ((0x9DDFEA08EB382D69 * (v4[19] ^ v5 ^ v2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4[19] ^ v5 ^ v2)));
  return (-348639895 * ((v6 >> 47) ^ v6)) ^ (v2 >> 8);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = (37 * v5)
       + ~((unint64_t)(37 * v5) << 32)
       + ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 24 * v11);
    v14 = *v12;
    v13 = v12[1];
    if (*a2 == *v12 && v5 == v13)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096 || v13 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v13 == -2;
        if (v19 && v14 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
        v14 = *v12;
        v13 = v12[1];
        if (*a2 == *v12 && v5 == v13)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  _QWORD *v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181283A80;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181283A80;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            v22 = *((_QWORD *)v21 + 1);
            if ((*(_QWORD *)v21 != -4096 || v22 != -1) && (*(_QWORD *)v21 != -8192 || v22 != -2))
            {
              v31 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, v21, &v31);
              v25 = v31;
              v26 = *((_QWORD *)v21 + 1);
              *v31 = *(_QWORD *)v21;
              v25[1] = v26;
              v25[2] = *((_QWORD *)v21 + 2);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181283A80;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_32:
      v30 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181283A80;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v30);
      return result;
    }
    v27 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v27 & 0x1FFFFFFFFFFFFFFELL));
    v28 = v27 & 0x1FFFFFFFFFFFFFFELL;
    v29 = result;
    do
    {
      *v29 = xmmword_181283A80;
      *(_OWORD *)((char *)v29 + 24) = xmmword_181283A80;
      v29 += 3;
      v28 -= 2;
    }
    while (v28);
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_32;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v20;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v4 = 0;
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = (37 * v6 - *(char *)(a2 + 12));
  v8 = (v7 | ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32))
     + ~(v7 << 32);
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = v3 - 1;
  v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
  v13 = 1;
  v14 = *a1 + 24 * v12;
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)a2 != *(_QWORD *)v14)
    goto LABEL_7;
LABEL_3:
  if (v6 == *(_DWORD *)(v14 + 8) && *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(v14 + 12))
  {
    result = 1;
    *a3 = v14;
    return result;
  }
  while (1)
  {
LABEL_7:
    if (v15 != -4096)
    {
      LOBYTE(result) = v15 == -8192 && *(_DWORD *)(v14 + 8) == -2 && *(_BYTE *)(v14 + 12) == 0;
      goto LABEL_22;
    }
    result = 0;
    if (*(_DWORD *)(v14 + 8) == -1 && *(_BYTE *)(v14 + 12) != 0)
      break;
LABEL_22:
    if ((result & (v4 == 0)) != 0)
      v4 = v14;
    v20 = v12 + v13++;
    v12 = v20 & v11;
    v14 = v5 + 24 * v12;
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)a2 == *(_QWORD *)v14)
      goto LABEL_3;
  }
  if (v4)
    v14 = v4;
  *a3 = v14;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*(_QWORD *)a4 == -4096)
      goto LABEL_4;
LABEL_9:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
  llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096)
    goto LABEL_9;
LABEL_4:
  if (*(_DWORD *)(a4 + 8) != -1 || *(_BYTE *)(a4 + 12) == 0)
    goto LABEL_9;
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 24 * v10 - 24;
      if (v11 >= 0x18)
      {
        v16 = v11 / 0x18 + 1;
        v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
        v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
        v18 = result;
        do
        {
          *v18 = xmmword_181283A90;
          *(_OWORD *)((char *)v18 + 24) = xmmword_181283A90;
          v18 += 3;
          v17 -= 2;
        }
        while (v17);
        if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_16;
      }
      else
      {
        v12 = result;
      }
      v19 = (_OWORD *)((char *)result + 24 * v10);
      do
      {
        *v12 = xmmword_181283A90;
        v12 = (_OWORD *)((char *)v12 + 24);
      }
      while (v12 != v19);
    }
LABEL_16:
    if (!(_DWORD)v3)
LABEL_33:
      llvm::deallocate_buffer(v4, (void *)(24 * v3));
    v20 = 24 * v3;
    v21 = (uint64_t)v4;
    while (1)
    {
      if (*(_QWORD *)v21 == -8192)
      {
        if (*(_DWORD *)(v21 + 8) == -2 && *(_BYTE *)(v21 + 12) == 0)
          goto LABEL_19;
      }
      else if (*(_QWORD *)v21 == -4096 && *(_DWORD *)(v21 + 8) == -1 && *(_BYTE *)(v21 + 12) != 0)
      {
        goto LABEL_19;
      }
      v30 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, v21, (uint64_t *)&v30);
      v22 = v30;
      *v30 = *(_QWORD *)v21;
      v23 = *(_DWORD *)(v21 + 8);
      *((_BYTE *)v22 + 12) = *(_BYTE *)(v21 + 12);
      *((_DWORD *)v22 + 2) = v23;
      v22[2] = *(_QWORD *)(v21 + 16);
      ++*(_DWORD *)(a1 + 8);
LABEL_19:
      v21 += 24;
      v20 -= 24;
      if (!v20)
        goto LABEL_33;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_37:
      v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181283A90;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v28 = result;
    do
    {
      *v28 = xmmword_181283A90;
      *(_OWORD *)((char *)v28 + 24) = xmmword_181283A90;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_37;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -2;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  _QWORD *v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181283AA0;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181283AA0;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = (uint64_t)v4;
          do
          {
            v22 = *(_DWORD *)(v21 + 8);
            if ((*(_QWORD *)v21 != -4096 || v22 != -1) && (*(_QWORD *)v21 != -8192 || v22 != -2))
            {
              v30 = 0;
              llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, v21, (uint64_t *)&v30);
              v25 = v30;
              *v30 = *(_QWORD *)v21;
              *((_DWORD *)v25 + 2) = *(_DWORD *)(v21 + 8);
              v25[2] = *(_QWORD *)(v21 + 16);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181283AA0;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_32:
      v29 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181283AA0;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v29);
      return result;
    }
    v26 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
    v27 = v26 & 0x1FFFFFFFFFFFFFFELL;
    v28 = result;
    do
    {
      *v28 = xmmword_181283AA0;
      *(_OWORD *)((char *)v28 + 24) = xmmword_181283AA0;
      v28 += 3;
      v27 -= 2;
    }
    while (v27);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_32;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v19 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(a2 + 16), *(_QWORD *)(a2 + 16) + 8 * *(_QWORD *)(a2 + 24));
    v18 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)(a2 + 32), *(_QWORD *)(a2 + 32) + 4 * *(_QWORD *)(a2 + 40));
    v7 = v4 - 1;
    v8 = (v4 - 1) & llvm::hash_combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>(a2, (uint64_t *)&v19, (uint64_t *)&v18);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (llvm::TargetExtTypeKeyInfo::isEqual(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        isEqual = llvm::TargetExtTypeKeyInfo::isEqual(a2, *v9);
        v11 = v17;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::TargetExtTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  size_t v4;
  const void *v5;
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 8) != v4)
    return 0;
  v5 = *(const void **)(a2 + 16);
  v6 = *(const void **)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    v9 = memcmp(*(const void **)a1, *(const void **)(a2 + 24), v4);
    result = 0;
    if (v9 || *(_QWORD *)(a1 + 24) != v8)
      return result;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 24) != v8)
    return 0;
LABEL_9:
  v10 = memcmp(*(const void **)(a1 + 16), v5, 8 * v8);
  result = 0;
  if (!v10 && *(_QWORD *)(a1 + 40) == v7 >> 8)
    return memcmp(*(const void **)(a1 + 32), v6, 4 * (v7 >> 8)) == 0;
  return result;
}

unint64_t llvm::hash_combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 v5;
  char *v6;
  char *v7;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if ((v5 & 1) == 0)
  {
    v11 = a1;
    a1 = v11;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
    }
  }
  v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v14[0] = llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  v12 = 0;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (_QWORD *)v14 + 1, (unint64_t)v15, *a2);
  v13 = v12;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v6, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v7, (char *)v15);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_10;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        v17 = &result->i8[8 * v11];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    v18 = (void *)(8 * v3);
    if ((_DWORD)v3)
    {
      v19 = 8 * v3;
      v20 = (uint64_t *)v4;
      do
      {
        if ((*v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtType *>((uint64_t *)a1, v20, &v28);
          *v28 = *v20;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3)
      goto LABEL_23;
    v23 = v22 + 1;
    v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    v24 = result + 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      v27 = &result->i8[8 * v21];
      do
      {
        *(_QWORD *)v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v20 = *(_OWORD *)(*a2 + 24);
    v8 = *(unsigned int *)(v7 + 12);
    v21 = *(_QWORD **)(v7 + 16);
    v22 = v8;
    v9 = (unint64_t)*(unsigned int *)(v7 + 8) >> 8;
    v23 = *(_QWORD **)(v7 + 40);
    v24 = v9;
    v26 = llvm::hashing::detail::hash_combine_range_impl<char const>(v21, (uint64_t)&v21[v8]);
    v25 = llvm::hashing::detail::hash_combine_range_impl<char const>(v23, (uint64_t)v23 + 4 * v9);
    v10 = llvm::hash_combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>((uint64_t)&v20, (uint64_t *)&v26, (uint64_t *)&v25);
    v11 = v4 - 1;
    v12 = (v4 - 1) & v10;
    v13 = (_QWORD *)(v6 + 8 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v6 + 8 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v13;
  return result;
}

void llvm::TypeFinder::run(int64x2_t *this, const llvm::Module *a2, __int8 a3)
{
  char *v4;
  uint64_t i;
  llvm::Type **v6;
  _QWORD *j;
  _QWORD *v8;
  const llvm::Value *v9;
  _QWORD *k;
  _QWORD *v11;
  const llvm::Module *v12;
  char *v13;
  int v14;
  uint64_t v15;
  const llvm::Value **v16;
  uint64_t v17;
  const llvm::Value *v18;
  const llvm::Value *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t m;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  const llvm::MDNode **v44;
  const llvm::MDNode *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t n;
  llvm::Type *ValueAsInt;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  __int32 v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  llvm::NamedMDNode *ii;
  int NumOperands;
  int v69;
  unsigned int jj;
  const llvm::MDNode *Operand;
  const llvm::Module *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[10];

  v80[8] = *MEMORY[0x1E0C80C00];
  this[7].i8[8] = a3;
  v4 = (char *)a2 + 8;
  for (i = *((_QWORD *)a2 + 2); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = (llvm::Type **)(i - 56);
    else
      v6 = 0;
    llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, v6[3]);
    if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
      llvm::TypeFinder::incorporateValue(this, *(v6 - 4));
  }
  for (j = (_QWORD *)*((_QWORD *)a2 + 6); j != (_QWORD *)((char *)a2 + 40); j = (_QWORD *)j[1])
  {
    if (j)
      v8 = j - 6;
    else
      v8 = 0;
    llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, (llvm::Type *)v8[3]);
    v9 = (const llvm::Value *)*(v8 - 4);
    if (v9)
      llvm::TypeFinder::incorporateValue(this, v9);
  }
  for (k = (_QWORD *)*((_QWORD *)a2 + 8); k != (_QWORD *)((char *)a2 + 56); k = (_QWORD *)k[1])
  {
    v11 = k - 7;
    if (!k)
      v11 = 0;
    llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, (llvm::Type *)v11[3]);
  }
  v78 = v80;
  v79 = 0x400000000;
  v12 = (const llvm::Module *)*((_QWORD *)a2 + 4);
  if (v12 == (const llvm::Module *)((char *)a2 + 24))
    goto LABEL_118;
  while (2)
  {
    if (v12)
      v13 = (char *)v12 - 56;
    else
      v13 = 0;
    llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, *((llvm::Type **)v13 + 3));
    llvm::TypeFinder::incorporateAttributes(this, *((_QWORD *)v13 + 14));
    v14 = *((_DWORD *)v13 + 5);
    if ((v14 & 0x40000000) != 0)
    {
      v16 = (const llvm::Value **)*((_QWORD *)v13 - 1);
      v15 = v14 & 0x7FFFFFF;
      if (!v15)
        goto LABEL_33;
    }
    else
    {
      v15 = v14 & 0x7FFFFFF;
      v16 = (const llvm::Value **)&v13[-32 * v15];
      if (!v15)
        goto LABEL_33;
    }
    v17 = 32 * v15;
    do
    {
      v18 = *v16;
      v16 += 4;
      llvm::TypeFinder::incorporateValue(this, v18);
      v17 -= 32;
    }
    while (v17);
LABEL_33:
    v73 = v12;
    if ((*((_WORD *)v13 + 9) & 1) == 0)
    {
      v19 = (const llvm::Value *)*((_QWORD *)v13 + 11);
      v20 = (uint64_t)v19 + 40 * *((_QWORD *)v13 + 12);
      if (v19 == (const llvm::Value *)v20)
        goto LABEL_41;
      do
      {
LABEL_40:
        llvm::TypeFinder::incorporateValue(this, v19);
        v19 = (const llvm::Value *)((char *)v19 + 40);
      }
      while (v19 != (const llvm::Value *)v20);
      goto LABEL_41;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
    v19 = (const llvm::Value *)*((_QWORD *)v13 + 11);
    if ((*((_WORD *)v13 + 9) & 1) == 0)
    {
      v20 = (uint64_t)v19 + 40 * *((_QWORD *)v13 + 12);
      if (v19 == (const llvm::Value *)v20)
        goto LABEL_41;
      goto LABEL_40;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
    v20 = *((_QWORD *)v13 + 11) + 40 * *((_QWORD *)v13 + 12);
    if (v19 != (const llvm::Value *)v20)
      goto LABEL_40;
LABEL_41:
    v21 = v13 + 72;
    v22 = *((_QWORD *)v13 + 10);
    v74 = v13 + 72;
    while ((char *)v22 != v21)
    {
      v23 = v22 - 24;
      if (!v22)
        v23 = 0;
      v24 = v23 + 48;
      for (m = *(_QWORD *)(v23 + 56); m != v24; m = *(_QWORD *)(m + 8))
      {
        if (m)
          v26 = m - 24;
        else
          v26 = 0;
        llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, *(llvm::Type **)v26);
        v27 = *(_DWORD *)(v26 + 20);
        if ((v27 & 0x40000000) != 0)
        {
          v29 = *(unsigned __int8 ***)(v26 - 8);
          v28 = v27 & 0x7FFFFFF;
          if (!v28)
            goto LABEL_61;
        }
        else
        {
          v28 = v27 & 0x7FFFFFF;
          v29 = (unsigned __int8 **)(v26 - 32 * v28);
          if (!v28)
            goto LABEL_61;
        }
        v30 = 32 * v28;
        do
        {
          v31 = *v29;
          if (*v29 && v31[16] <= 0x1Bu)
            llvm::TypeFinder::incorporateValue(this, (const llvm::Value *)v31);
          v29 += 4;
          v30 -= 32;
        }
        while (v30);
LABEL_61:
        v32 = *(unsigned __int8 *)(v26 + 16);
        if (m && v32 == 62)
        {
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, *(llvm::Type **)(v26 + 72));
          v32 = *(unsigned __int8 *)(v26 + 16);
        }
        if (m && v32 == 59)
        {
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, *(llvm::Type **)(v26 + 72));
          v32 = *(unsigned __int8 *)(v26 + 16);
        }
        v33 = v32 - 33;
        v34 = v33 > 0x33;
        v35 = (1 << v33) & 0x8000000000041;
        if (!v34 && v35 != 0)
        {
          v37 = *(_QWORD *)(v26 + 72);
          v77 = v37;
          v38 = this[4].u32[0];
          if (!v38)
            goto LABEL_102;
          v39 = this[3].i64[0];
          v40 = (v38 - 1) & ((v37 >> 4) ^ (v37 >> 9));
          v41 = (_QWORD *)(v39 + 8 * v40);
          v42 = *v41;
          if (v37 == *v41)
            goto LABEL_73;
          v53 = 0;
          v54 = 1;
          while (v42 != -4)
          {
            if (v53)
              v55 = 0;
            else
              v55 = v42 == -8;
            if (v55)
              v53 = v41;
            v56 = v40 + v54++;
            v40 = v56 & (v38 - 1);
            v41 = (_QWORD *)(v39 + 8 * v40);
            v42 = *v41;
            if (v37 == *v41)
              goto LABEL_73;
          }
          v57 = v53 ? v53 : v41;
          v58 = this[3].i32[2];
          if (4 * v58 + 4 < 3 * v38)
          {
            if (v38 + ~v58 - this[3].i32[3] <= v38 >> 3)
              goto LABEL_103;
          }
          else
          {
LABEL_102:
            v38 *= 2;
LABEL_103:
            llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow((uint64_t)this[3].i64, v38);
            v59 = this[3].i64[0];
            v37 = v77;
            v60 = this[4].i32[0] - 1;
            v61 = ((v77 >> 4) ^ (v77 >> 9)) & v60;
            v57 = (_QWORD *)(v59 + 8 * v61);
            v62 = *v57;
            if (v77 == *v57)
            {
LABEL_104:
              ++this[3].i32[2];
              if (v37 == -4)
              {
LABEL_81:
                *v57 = v37;
                v47 = (uint64_t *)llvm::AttributeList::begin((llvm::AttributeList *)&v77);
                v48 = llvm::AttributeList::end((llvm::AttributeList *)&v77);
                if (v47 != (uint64_t *)v48)
                {
                  v49 = (uint64_t *)v48;
                  do
                  {
                    v76 = *v47;
                    v50 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)&v76);
                    for (n = llvm::AttributeSet::end((llvm::AttributeSet *)&v76); v50 != (uint64_t *)n; ++v50)
                    {
                      v75 = *v50;
                      if (llvm::Attribute::isTypeAttribute((llvm::Attribute *)&v75))
                      {
                        ValueAsInt = (llvm::Type *)llvm::Attribute::getValueAsInt((llvm::Attribute *)&v75);
                        llvm::TypeFinder::incorporateType((llvm::TypeFinder *)this, ValueAsInt);
                      }
                    }
                    ++v47;
                  }
                  while (v47 != v49);
                }
                goto LABEL_73;
              }
LABEL_80:
              --this[3].i32[3];
              goto LABEL_81;
            }
            v63 = 0;
            v64 = 1;
            while (v62 != -4)
            {
              if (v63)
                v65 = 0;
              else
                v65 = v62 == -8;
              if (v65)
                v63 = v57;
              v66 = v61 + v64++;
              v61 = v66 & v60;
              v57 = (_QWORD *)(v59 + 8 * (v66 & v60));
              v62 = *v57;
              if (v77 == *v57)
                goto LABEL_104;
            }
            if (v63)
              v57 = v63;
          }
          v46 = *v57;
          ++this[3].i32[2];
          if (v46 == -4)
            goto LABEL_81;
          goto LABEL_80;
        }
LABEL_73:
        llvm::Value::getAllMetadata((mlir::BytecodeWriterConfig *)v26, (uint64_t)&v78);
        if ((_DWORD)v79)
        {
          v43 = 16 * v79;
          v44 = (const llvm::MDNode **)((char *)v78 + 8);
          do
          {
            v45 = *v44;
            v44 += 2;
            llvm::TypeFinder::incorporateMDNode((llvm::TypeFinder *)this, v45);
            v43 -= 16;
          }
          while (v43);
        }
        LODWORD(v79) = 0;
      }
      v22 = *(_QWORD *)(v22 + 8);
      v21 = v74;
    }
    v12 = (const llvm::Module *)*((_QWORD *)v73 + 1);
    if (v12 != (const llvm::Module *)((char *)a2 + 24))
      continue;
    break;
  }
LABEL_118:
  for (ii = (llvm::NamedMDNode *)*((_QWORD *)a2 + 10);
        ii != (const llvm::Module *)((char *)a2 + 72);
        ii = (llvm::NamedMDNode *)*((_QWORD *)ii + 1))
  {
    NumOperands = llvm::NamedMDNode::getNumOperands(ii);
    if (NumOperands)
    {
      v69 = NumOperands;
      for (jj = 0; jj != v69; ++jj)
      {
        Operand = (const llvm::MDNode *)llvm::NamedMDNode::getOperand(ii, jj);
        llvm::TypeFinder::incorporateMDNode((llvm::TypeFinder *)this, Operand);
      }
    }
  }
  if (v78 != v80)
    free(v78);
}

void llvm::TypeFinder::incorporateType(llvm::TypeFinder *this, llvm::Type *a2)
{
  char *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  llvm::Type *v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD v57[5];

  v57[4] = *MEMORY[0x1E0C80C00];
  v53 = a2;
  v3 = (char *)this + 72;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)((char *)this + 72), (uint64_t *)&v53, (uint64_t)&v54);
  if (LOBYTE(v57[0]))
  {
    v52 = (uint64_t)v3;
    v54 = v57;
    v56 = 4;
    v57[0] = v53;
    v4 = 1;
    while (1)
    {
      v5 = *((_QWORD *)v54 + v4 - 1);
      v55 = v4 - 1;
      v53 = (llvm::Type *)v5;
      if (v5)
        v6 = *(_BYTE *)(v5 + 8) == 16;
      else
        v6 = 0;
      if (!v6 || *((_BYTE *)this + 120) && !*(_QWORD *)(v5 + 24))
        goto LABEL_34;
      v8 = (uint64_t *)*((_QWORD *)this + 13);
      v7 = *((_QWORD *)this + 14);
      if ((unint64_t)v8 >= v7)
        break;
      *v8 = v5;
      v9 = (uint64_t)(v8 + 1);
LABEL_33:
      *((_QWORD *)this + 13) = v9;
      v5 = (uint64_t)v53;
LABEL_34:
      v26 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v5 + 16);
        v28 = v27 + 8 * v26;
        while (1)
        {
          v34 = *(_QWORD *)(v28 - 8);
          v28 -= 8;
          v33 = v34;
          v35 = *((_DWORD *)this + 22);
          if (!v35)
            goto LABEL_59;
          v29 = *((_QWORD *)this + 9);
          v30 = ((v33 >> 4) ^ (v33 >> 9)) & (v35 - 1);
          v31 = (_QWORD *)(v29 + 8 * v30);
          v32 = *v31;
          if (v33 != *v31)
            break;
LABEL_37:
          if (v28 == v27)
            goto LABEL_3;
        }
        v38 = 0;
        v39 = 1;
        while (v32 != -4096)
        {
          if (v38)
            v40 = 0;
          else
            v40 = v32 == -8192;
          if (v40)
            v38 = v31;
          v41 = v30 + v39++;
          v30 = v41 & (v35 - 1);
          v31 = (_QWORD *)(v29 + 8 * v30);
          v32 = *v31;
          if (v33 == *v31)
            goto LABEL_37;
        }
        if (v38)
          v42 = v38;
        else
          v42 = v31;
        v43 = *((_DWORD *)this + 20);
        if (4 * v43 + 4 < 3 * v35)
        {
          if (v35 + ~v43 - *((_DWORD *)this + 21) <= v35 >> 3)
            goto LABEL_60;
        }
        else
        {
LABEL_59:
          v35 *= 2;
LABEL_60:
          llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(v52, v35);
          v44 = *((_QWORD *)this + 9);
          v45 = *((_DWORD *)this + 22) - 1;
          v46 = v45 & ((v33 >> 4) ^ (v33 >> 9));
          v42 = (_QWORD *)(v44 + 8 * v46);
          v47 = *v42;
          if (v33 == *v42)
          {
LABEL_61:
            ++*((_DWORD *)this + 20);
            if (v33 == -4096)
              goto LABEL_43;
LABEL_42:
            --*((_DWORD *)this + 21);
LABEL_43:
            *v42 = v33;
            v37 = v55;
            if (v55 >= (unint64_t)v56)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v55 + 1, 8);
              v37 = v55;
            }
            *((_QWORD *)v54 + v37) = v33;
            ++v55;
            goto LABEL_37;
          }
          v48 = 0;
          v49 = 1;
          while (v47 != -4096)
          {
            if (v48)
              v50 = 0;
            else
              v50 = v47 == -8192;
            if (v50)
              v48 = v42;
            v51 = v46 + v49++;
            v46 = v51 & v45;
            v42 = (_QWORD *)(v44 + 8 * (v51 & v45));
            v47 = *v42;
            if (v33 == *v42)
              goto LABEL_61;
          }
          if (v48)
            v42 = v48;
        }
        v36 = *v42;
        ++*((_DWORD *)this + 20);
        if (v36 != -4096)
          goto LABEL_42;
        goto LABEL_43;
      }
LABEL_3:
      v4 = v55;
      if (!v55)
      {
        if (v54 != v57)
          free(v54);
        return;
      }
    }
    v10 = (char *)*((_QWORD *)this + 12);
    v11 = ((char *)v8 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = (char *)operator new(8 * v14);
      v16 = (uint64_t *)&v15[8 * v11];
      *v16 = v5;
      v9 = (uint64_t)(v16 + 1);
      if (v8 == (uint64_t *)v10)
        goto LABEL_31;
    }
    else
    {
      v15 = 0;
      v16 = (uint64_t *)(8 * v11);
      *(_QWORD *)(8 * v11) = v5;
      v9 = 8 * v11 + 8;
      if (v8 == (uint64_t *)v10)
      {
LABEL_31:
        *((_QWORD *)this + 12) = v16;
        *((_QWORD *)this + 13) = v9;
        *((_QWORD *)this + 14) = &v15[8 * v14];
        if (v8)
          operator delete(v8);
        goto LABEL_33;
      }
    }
    v17 = (char *)(v8 - 1) - v10;
    if (v17 < 0x58)
      goto LABEL_82;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_82;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v8[v19 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v19);
    v21 = &v15[8 * v11 - 16];
    v22 = v8 - 2;
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    v8 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_82:
      do
      {
        v25 = *--v8;
        *--v16 = v25;
      }
      while (v8 != (uint64_t *)v10);
    }
    v8 = (uint64_t *)*((_QWORD *)this + 12);
    goto LABEL_31;
  }
}

int64x2_t *llvm::TypeFinder::incorporateValue(int64x2_t *this, const llvm::Value *a2)
{
  llvm::TypeFinder *v2;
  const llvm::MDNode *v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  llvm::Type *SourceElementType;
  __int32 v8;
  uint64_t v9;
  const llvm::Value **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::Value *v16;
  llvm::GEPOperator *v17;
  _BYTE v18[31];

  v2 = (llvm::TypeFinder *)this;
  if (a2 && *((_BYTE *)a2 + 16) == 23)
  {
    while (1)
    {
      v3 = (const llvm::MDNode *)*((_QWORD *)a2 + 3);
      v4 = *(unsigned __int8 *)v3;
      if ((v4 - 5) <= 0x1E)
        return llvm::TypeFinder::incorporateMDNode((llvm::TypeFinder *)this, v3);
      if ((v4 - 3) < 0xFFFFFFFE)
        break;
      a2 = (const llvm::Value *)*((_QWORD *)v3 + 16);
      if (a2)
        v5 = *((_BYTE *)a2 + 16) == 23;
      else
        v5 = 0;
      if (!v5)
        goto LABEL_9;
    }
    if (v4 == 4)
    {
      v11 = *((unsigned int *)v3 + 34);
      if ((_DWORD)v11)
      {
        v12 = (uint64_t *)*((_QWORD *)v3 + 16);
        v13 = 8 * v11;
        do
        {
          v14 = *v12++;
          this = (int64x2_t *)llvm::TypeFinder::incorporateValue(v2, *(const llvm::Value **)(v14 + 128));
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
  else
  {
LABEL_9:
    v17 = a2;
    if (*((unsigned __int8 *)a2 + 16) - 21 >= 0xFFFFFFEF)
    {
      this = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(this, (uint64_t *)&v17, (uint64_t)v18);
      if (v18[16])
      {
        llvm::TypeFinder::incorporateType(v2, *(llvm::Type **)v17);
        this = (int64x2_t *)v17;
        v6 = *((unsigned __int8 *)v17 + 16);
        if (v6 <= 0x1B)
        {
          if (v6 == 5 && *((_WORD *)v17 + 9) == 34)
          {
            SourceElementType = (llvm::Type *)llvm::GEPOperator::getSourceElementType(v17);
            llvm::TypeFinder::incorporateType(v2, SourceElementType);
            this = (int64x2_t *)v17;
          }
          v8 = this[1].i32[1];
          if ((v8 & 0x40000000) != 0)
          {
            v10 = (const llvm::Value **)this[-1].i64[1];
            v9 = v8 & 0x7FFFFFF;
          }
          else
          {
            v9 = v8 & 0x7FFFFFF;
            v10 = (const llvm::Value **)&this[-2 * v9];
          }
          if (v9)
          {
            v15 = 32 * v9;
            do
            {
              v16 = *v10;
              v10 += 4;
              this = (int64x2_t *)llvm::TypeFinder::incorporateValue(v2, v16);
              v15 -= 32;
            }
            while (v15);
          }
        }
      }
    }
  }
  return this;
}

void llvm::TypeFinder::incorporateAttributes(int64x2_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t i;
  llvm::Type *ValueAsInt;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;

  v10 = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 3, &v10, (uint64_t)v11);
  if (v12)
  {
    v3 = (_QWORD *)llvm::AttributeList::begin((llvm::AttributeList *)&v10);
    v4 = llvm::AttributeList::end((llvm::AttributeList *)&v10);
    if (v3 != (_QWORD *)v4)
    {
      v5 = (_QWORD *)v4;
      do
      {
        v11[0] = *v3;
        v6 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)v11);
        for (i = llvm::AttributeSet::end((llvm::AttributeSet *)v11); v6 != (uint64_t *)i; ++v6)
        {
          v9 = *v6;
          if (llvm::Attribute::isTypeAttribute((llvm::Attribute *)&v9))
          {
            ValueAsInt = (llvm::Type *)llvm::Attribute::getValueAsInt((llvm::Attribute *)&v9);
            llvm::TypeFinder::incorporateType((llvm::TypeFinder *)a1, ValueAsInt);
          }
        }
        ++v3;
      }
      while (v3 != v5);
    }
  }
}

int64x2_t *llvm::TypeFinder::incorporateMDNode(llvm::TypeFinder *this, const llvm::MDNode *a2)
{
  int64x2_t *result;
  unint64_t v4;
  const llvm::Value ***v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Value **v8;
  int v9;
  const llvm::MDNode *v10;
  _BYTE v11[31];

  v10 = a2;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>((int64x2_t *)((char *)this + 24), (uint64_t *)&v10, (uint64_t)v11);
  if (v11[16])
  {
    v4 = *((_QWORD *)v10 - 2);
    if ((v4 & 2) != 0)
    {
      v5 = (const llvm::Value ***)*((_QWORD *)v10 - 4);
      v6 = *((unsigned int *)v10 - 6);
      if (!*((_DWORD *)v10 - 6))
        return result;
    }
    else
    {
      v5 = (const llvm::Value ***)((char *)v10 - 8 * ((v4 >> 2) & 0xF) - 16);
      v6 = (v4 >> 6) & 0xF;
      if (!v6)
        return result;
    }
    v7 = 8 * v6;
    do
    {
      v8 = *v5;
      if (*v5)
      {
        v9 = *(unsigned __int8 *)v8;
        if ((v9 - 5) <= 0x1E)
        {
          result = (int64x2_t *)llvm::TypeFinder::incorporateMDNode(this, (const llvm::MDNode *)v8);
        }
        else if (v9 == 1)
        {
          result = (int64x2_t *)llvm::TypeFinder::incorporateValue(this, v8[16]);
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

int64x2_t *llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(int64x2_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int64x2_t *v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  __int32 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  v4 = result;
  v6 = result[1].u32[0];
  if (!v6)
    goto LABEL_23;
  v7 = result->i64[0];
  v8 = v6 - 1;
  v9 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(result->i64[0] + 8 * v9);
  v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    v12 = 0;
    goto LABEL_10;
  }
  v14 = 0;
  v15 = 1;
  while (v11 != -4)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v11 == -8;
    if (v16)
      v14 = v10;
    v17 = v9 + v15++;
    v9 = v17 & v8;
    v10 = (uint64_t *)(v7 + 8 * (v17 & v8));
    v11 = *v10;
    if (*a2 == *v10)
      goto LABEL_3;
  }
  if (v14)
    v10 = v14;
  v18 = result->i32[2];
  if (4 * v18 + 4 < 3 * v6)
  {
    if (v6 + ~v18 - result->i32[3] > v6 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_23:
    v6 *= 2;
  }
  result = llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow((uint64_t)result, v6);
  v6 = v4[1].u32[0];
  v13 = *a2;
  v19 = v6 - 1;
  v20 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(v4->i64[0] + 8 * v20);
  v21 = *v10;
  if (*a2 == *v10)
    goto LABEL_7;
  v22 = 0;
  v23 = 1;
  while (v21 != -4)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -8;
    if (v24)
      v22 = v10;
    v25 = v20 + v23++;
    v20 = v25 & v19;
    v10 = (uint64_t *)(v4->i64[0] + 8 * (v25 & v19));
    v21 = *v10;
    if (v13 == *v10)
      goto LABEL_7;
  }
  if (v22)
    v10 = v22;
LABEL_6:
  v13 = *v10;
LABEL_7:
  ++v4->i32[2];
  if (v13 != -4)
    --v4->i32[3];
  *v10 = *a2;
  v7 = v4->i64[0];
  v12 = 1;
LABEL_10:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v7 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v12;
  return result;
}

int64x2_t *llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *result;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  int v17;
  int v18;
  llvm *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_39;
      v13 = v12 + 1;
      v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = result + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          *(_QWORD *)v10 = -4;
          v10 += 8;
        }
        while (v10 != (char *)result + 8 * v11);
      }
    }
    if ((_DWORD)v3)
    {
      v17 = 0;
      v18 = v11 - 1;
      v19 = v4;
      do
      {
        v28 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          v29 = ((v28 >> 4) ^ (v28 >> 9)) & v18;
          v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
          v30 = *v27;
          if (v28 != *v27)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -4)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -8;
              if (v33)
                v31 = v27;
              v34 = v29 + v32++;
              v29 = v34 & v18;
              v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v34 & v18));
              v30 = *v27;
              if (v28 == *v27)
                goto LABEL_23;
            }
            if (v31)
              v27 = v31;
          }
LABEL_23:
          *v27 = v28;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v19 = (llvm *)((char *)v19 + 8);
      }
      while (v19 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v21 < 3)
      goto LABEL_18;
    v22 = v21 + 1;
    v10 = &result->i8[8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v23 = result + 1;
    v24 = vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23[-1] = v24;
      *v23 = v24;
      v23 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v26 = &result->i8[8 * v20];
      do
      {
        *(_QWORD *)v10 = -4;
        v10 += 8;
      }
      while (v10 != v26);
    }
  }
  return result;
}

unint64_t llvm::Use::getOperandNo(llvm::Use *this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 3);
  v2 = *(_DWORD *)(v1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = (unint64_t)this - *(_QWORD *)(v1 - 8);
  else
    v3 = (unint64_t)this - (v1 - 32 * (v2 & 0x7FFFFFF));
  return v3 >> 5;
}

void llvm::Use::zap(void *this, llvm::Use *a2, const llvm::Use *a3)
{
  llvm::Use *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != this)
  {
    v3 = a2;
    do
    {
      v4 = *((_QWORD *)v3 - 4);
      v3 = (llvm::Use *)((char *)v3 - 32);
      if (v4)
      {
        **((_QWORD **)a2 - 2) = *((_QWORD *)a2 - 3);
        v5 = *((_QWORD *)a2 - 3);
        if (v5)
          *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 - 2);
      }
      a2 = v3;
    }
    while (v3 != this);
  }
  if ((_DWORD)a3)
    operator delete(this);
}

_QWORD *llvm::User::allocHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  uint64_t v5;
  size_t v6;
  _QWORD *result;
  _QWORD *v8;

  v5 = 4 * a2;
  if (a3)
    v6 = 40 * a2;
  else
    v6 = 32 * a2;
  result = operator new(v6);
  *((_QWORD *)this - 1) = result;
  if (a2)
  {
    v8 = &result[v5];
    do
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = this;
      result += 4;
    }
    while (result != v8);
  }
  return result;
}

void llvm::User::growHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  char *v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x40000000) != 0)
    v8 = (char *)*((_QWORD *)this - 1);
  else
    v8 = (char *)this - 32 * v7;
  v9 = 4 * a2;
  if (a3)
    v10 = 40 * a2;
  else
    v10 = 32 * a2;
  v11 = operator new(v10);
  *((_QWORD *)this - 1) = v11;
  if (a2)
  {
    v12 = v11;
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = this;
      v12 += 4;
    }
    while (v12 != &v11[v9]);
  }
  v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x40000000) != 0)
    v14 = (char *)v11;
  else
    v14 = (char *)this - 32 * (v13 & 0x7FFFFFF);
  if ((_DWORD)v7)
  {
    v15 = (_QWORD **)(v14 + 8);
    v16 = 32 * v7;
    v17 = (uint64_t *)v8;
    do
    {
      v18 = v15 - 1;
      v19 = *v17;
      if (*(v15 - 1))
      {
        *v15[1] = *v15;
        if (*v15)
          (*v15)[2] = v15[1];
      }
      *v18 = v19;
      if (v19)
      {
        v22 = *(_QWORD **)(v19 + 8);
        v20 = (_QWORD *)(v19 + 8);
        v21 = v22;
        *v15 = v22;
        if (v22)
          v21[2] = v15;
        v15[1] = v20;
        *v20 = v18;
      }
      v17 += 4;
      v15 += 4;
      v16 -= 32;
    }
    while (v16);
    if (a3)
      memmove(&v14[32 * a2], &v8[32 * v7], 8 * v7);
  }
  llvm::Use::zap(v8, (llvm::Use *)&v8[32 * v7], (const llvm::Use *)1);
}

char *llvm::User::getDescriptor(llvm::User *this)
{
  char *v1;

  v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  return &v1[-*((_QWORD *)v1 - 1) - 8];
}

_QWORD *llvm::User::operator new(llvm::User *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = 4 * a2;
  v4 = operator new((size_t)this + v3 * 8);
  result = &v4[v3];
  HIDWORD(v4[v3 + 2]) = HIDWORD(v4[v3 + 2]) & 0x38000000 | a2 & 0x7FFFFFF;
  if (a2)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = result;
      v4 += 4;
    }
    while (v4 != result);
  }
  return result;
}

char *llvm::User::operator new(llvm::User *this, unsigned int a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;

  v5 = a3 != 0;
  if (a3)
    v6 = a3 + 8;
  else
    v6 = 0;
  v7 = 32 * a2;
  v8 = (char *)operator new((size_t)this + v7 + v6);
  v9 = &v8[v6];
  v10 = &v8[v6 + v7];
  *((_DWORD *)v10 + 5) = a2 & 0x7FFFFFF | (v5 << 31) | *((_DWORD *)v10 + 5) & 0x38000000;
  if (a2)
  {
    do
    {
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = v10;
      v9 += 32;
    }
    while (v9 != v10);
  }
  if (a3)
    *(_QWORD *)&v8[a3] = a3;
  return &v8[v6 + v7];
}

_DWORD *llvm::User::operator new(llvm::User *this)
{
  _DWORD *v1;

  v1 = operator new((size_t)this + 8);
  v1[7] = v1[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v1 = 0;
  return v1 + 2;
}

void llvm::User::operator delete(llvm::Use *a1)
{
  int v2;
  char *v3;
  char *v4;

  v2 = *((_DWORD *)a1 + 5);
  if ((v2 & 0x40000000) != 0)
  {
    llvm::Use::zap(*((void **)a1 - 1), (llvm::Use *)(*((_QWORD *)a1 - 1) + 32 * (v2 & 0x7FFFFFF)), (const llvm::Use *)1);
    operator delete((char *)a1 - 8);
  }
  else
  {
    v3 = (char *)a1 - 32 * (v2 & 0x7FFFFFF);
    llvm::Use::zap(v3, a1, 0);
    if (v2 < 0)
      v4 = &v3[-*((_QWORD *)v3 - 1) - 8];
    else
      v4 = (char *)a1 - 32 * (v2 & 0x7FFFFFF);
    operator delete(v4);
  }
}

uint64_t llvm::Value::Value(uint64_t this, llvm::Type *a2, char a3)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = a3;
  *(_BYTE *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) &= 0xC0000000;
  return this;
}

void llvm::Value::~Value(llvm::Value *this, llvm::Value *a2)
{
  int v3;

  if ((*((_BYTE *)this + 17) & 1) == 0)
  {
    v3 = *((_DWORD *)this + 5);
    if ((v3 & 0x8000000) == 0)
      goto LABEL_3;
LABEL_6:
    llvm::ValueAsMetadata::handleDeletion(this, a2);
    if ((*((_DWORD *)this + 5) & 0x20000000) == 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x20000000) == 0)
  {
LABEL_4:
    llvm::Value::destroyValueName(this);
    return;
  }
LABEL_7:
  llvm::Value::clearMetadata(this);
  llvm::Value::destroyValueName(this);
}

unint64_t *llvm::ValueHandleBase::ValueIsDeleted(llvm::ValueHandleBase *this, llvm::Value *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  llvm::ValueHandleBase **v9;
  llvm::ValueHandleBase *v10;
  llvm::ValueHandleBase **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  llvm::ValueHandleBase *v15;
  unint64_t *result;
  int32x2_t ****v17;
  unint64_t v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t v22;
  int32x2_t ****v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int32x2_t *****v29;
  int32x2_t ****v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  int32x2_t ****v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int32x2_t *****v41;
  int32x2_t ****v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  llvm::ValueHandleBase *v47;
  int v48;
  int v49;
  llvm::ValueHandleBase **v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t *v55;
  int32x2_t ****v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = **(uint64_t ***)this;
  v4 = *v3;
  v5 = *(_DWORD *)(*v3 + 2472);
  if (!v5)
    goto LABEL_57;
  v6 = *(_QWORD *)(v4 + 2456);
  v7 = v5 - 1;
  v8 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
  v9 = (llvm::ValueHandleBase **)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 == this)
    goto LABEL_17;
  v11 = 0;
  v12 = 1;
  while (v10 != (llvm::ValueHandleBase *)-4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == (llvm::ValueHandleBase *)-8192;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & v7;
    v9 = (llvm::ValueHandleBase **)(v6 + 16 * (v14 & v7));
    v10 = *v9;
    if (*v9 == this)
      goto LABEL_17;
  }
  if (v11)
    v9 = v11;
  v43 = *(_DWORD *)(v4 + 2464);
  if (4 * v43 + 4 < 3 * v5)
  {
    if (v5 + ~v43 - *(_DWORD *)(v4 + 2468) > v5 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_57:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v4 + 2456, v5);
  v44 = *(_QWORD *)(v4 + 2456);
  v45 = *(_DWORD *)(v4 + 2472) - 1;
  v46 = v45 & ((this >> 4) ^ (this >> 9));
  v9 = (llvm::ValueHandleBase **)(v44 + 16 * v46);
  v47 = *v9;
  if (*v9 == this)
  {
LABEL_59:
    ++*(_DWORD *)(v4 + 2464);
    if (this == (llvm::ValueHandleBase *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v50 = 0;
  v51 = 1;
  while (v47 != (llvm::ValueHandleBase *)-4096)
  {
    if (v50)
      v52 = 0;
    else
      v52 = v47 == (llvm::ValueHandleBase *)-8192;
    if (v52)
      v50 = v9;
    v53 = v46 + v51++;
    v46 = v53 & v45;
    v9 = (llvm::ValueHandleBase **)(v44 + 16 * (v53 & v45));
    v47 = *v9;
    if (*v9 == this)
      goto LABEL_59;
  }
  if (v50)
    v9 = v50;
LABEL_14:
  v15 = *v9;
  ++*(_DWORD *)(v4 + 2464);
  if (v15 != (llvm::ValueHandleBase *)-4096)
LABEL_15:
    --*(_DWORD *)(v4 + 2468);
LABEL_16:
  *v9 = this;
  v9[1] = 0;
LABEL_17:
  result = (unint64_t *)v9[1];
  v54 = 0;
  v55 = 0;
  v17 = (int32x2_t ****)result[2];
  v56 = v17;
  if (v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17 != 0)
  {
    v19 = *result;
    v20 = (unint64_t **)(*result & 0xFFFFFFFFFFFFFFF8);
    v55 = *v20;
    *v20 = &v54;
    v54 = v19 & 0xFFFFFFFFFFFFFFF8 | v54 & 7;
    if (v55)
      *v55 = *v55 & 7 | (unint64_t)&v55;
  }
  v21 = v55;
  do
  {
    v22 = v54 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8) = v21;
    if (v55)
    {
      *v55 = *v55 & 7 | v22;
    }
    else
    {
      v23 = v56;
      v24 = ***v56;
      v25 = (unint64_t)v24[307];
      if (v25 <= v22)
      {
        v26 = v24[309].u32[0];
        if (v25 + 16 * v26 > v22)
        {
          v27 = v26 - 1;
          LODWORD(v28) = v27 & ((v56 >> 4) ^ (v56 >> 9));
          v29 = (int32x2_t *****)(v25 + 16 * v28);
          v30 = *v29;
          if (v56 == *v29)
          {
LABEL_32:
            *v29 = (int32x2_t ****)-8192;
            v24[308] = vadd_s32(v24[308], (int32x2_t)0x1FFFFFFFFLL);
            v23 = v56;
          }
          else
          {
            v32 = 1;
            while (v30 != (int32x2_t ****)-4096)
            {
              v33 = v28 + v32++;
              v28 = v33 & v27;
              v30 = *(int32x2_t *****)(v25 + 16 * v28);
              if (v56 == v30)
              {
                v29 = (int32x2_t *****)(v25 + 16 * v28);
                goto LABEL_32;
              }
            }
          }
          *((_BYTE *)v23 + 17) &= ~1u;
        }
      }
    }
    v55 = (unint64_t *)result[1];
    result[1] = (unint64_t)&v54;
    v54 = v54 & 7 | (unint64_t)(result + 1);
    if (v55)
      *v55 = *v55 & 7 | (unint64_t)&v55;
    v31 = (*(_DWORD *)result >> 1) & 3;
    if ((v31 - 2) < 2)
    {
      llvm::ValueHandleBase::operator=(result, 0);
    }
    else if (v31 == 1)
    {
      (*(void (**)(unint64_t *))(*(result - 1) + 8))(result - 1);
    }
    v21 = v55;
    result = v55;
  }
  while (v55);
  if (v56 != (int32x2_t ****)-8192 && v56 != (int32x2_t ****)-4096 && v56)
  {
    v34 = v54 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8) = v55;
    if (v55)
    {
      *v55 = *v55 & 7 | v34;
    }
    else
    {
      v35 = v56;
      v36 = ***v56;
      v37 = (unint64_t)v36[307];
      if (v37 <= v34)
      {
        v38 = v36[309].u32[0];
        if (v37 + 16 * v38 > v34)
        {
          v39 = v38 - 1;
          LODWORD(v40) = v39 & ((v56 >> 4) ^ (v56 >> 9));
          v41 = (int32x2_t *****)(v37 + 16 * v40);
          v42 = *v41;
          if (v56 == *v41)
          {
LABEL_51:
            *v41 = (int32x2_t ****)-8192;
            v36[308] = vadd_s32(v36[308], (int32x2_t)0x1FFFFFFFFLL);
            v35 = v56;
          }
          else
          {
            v48 = 1;
            while (v42 != (int32x2_t ****)-4096)
            {
              v49 = v40 + v48++;
              v40 = v49 & v39;
              v42 = *(int32x2_t *****)(v37 + 16 * v40);
              if (v56 == v42)
              {
                v41 = (int32x2_t *****)(v37 + 16 * v40);
                goto LABEL_51;
              }
            }
          }
          *((_BYTE *)v35 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

llvm *llvm::Value::destroyValueName(llvm *this)
{
  llvm *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  llvm **v8;
  llvm *v9;
  int v10;
  int v11;
  int32x2_t *v12;
  __int32 v13;
  int32x2_t v14;
  __int32 v15;
  uint64_t v16;
  llvm **v17;
  llvm *v18;
  int v19;
  int v20;

  v1 = this;
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x10000000) == 0)
    goto LABEL_14;
  v3 = ***(_QWORD ***)this;
  v4 = *(_QWORD *)(v3 + 144);
  v5 = *(unsigned int *)(v3 + 160);
  v6 = this >> 4;
  if ((_DWORD)v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (this >> 9));
    v8 = (llvm **)(v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_9;
    v10 = 1;
    while (v9 != (llvm *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(llvm **)(v4 + 16 * v7);
      if (v9 == this)
      {
        v8 = (llvm **)(v4 + 16 * v7);
        goto LABEL_9;
      }
    }
  }
  v8 = (llvm **)(v4 + 16 * v5);
LABEL_9:
  this = v8[1];
  if (this)
    llvm::deallocate_buffer(this, (void *)(*(_QWORD *)this + 17));
  v12 = ***(int32x2_t ****)v1;
  v13 = v12[20].i32[0];
  if (v13)
  {
    v14 = v12[18];
    v15 = v13 - 1;
    LODWORD(v16) = (v13 - 1) & (v6 ^ (v1 >> 9));
    v17 = (llvm **)(*(_QWORD *)&v14 + 16 * v16);
    v18 = *v17;
    if (*v17 == v1)
    {
LABEL_13:
      *v17 = (llvm *)-8192;
      v12[19] = vadd_s32(v12[19], (int32x2_t)0x1FFFFFFFFLL);
      v2 = *((_DWORD *)v1 + 5);
    }
    else
    {
      v19 = 1;
      while (v18 != (llvm *)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & v15;
        v18 = *(llvm **)(*(_QWORD *)&v14 + 16 * v16);
        if (v18 == v1)
        {
          v17 = (llvm **)(*(_QWORD *)&v14 + 16 * v16);
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  *((_DWORD *)v1 + 5) = v2 & 0xEFFFFFFF;
  return this;
}

void llvm::Value::deleteValue(llvm::Value *this)
{
  __asm { BR              X10 }
}

void sub_180D2231C(llvm::UndefValue **a1, llvm::Type *a2)
{
  llvm::Use *v2;

  llvm::Instruction::~Instruction(a1, a2);
  llvm::User::operator delete(v2);
}

uint64_t sub_180D22328(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

void sub_180D22334(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::Use *v2;

  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  llvm::User::operator delete(v2);
}

void sub_180D22340(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::Use *v2;

  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  llvm::User::operator delete(v2);
}

void sub_180D2234C(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::Use *v2;

  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  llvm::User::operator delete(v2);
}

void sub_180D22358(llvm::Value *a1, llvm::Value *a2)
{
  void *v2;

  llvm::Value::~Value(a1, a2);
  operator delete(v2);
}

void sub_180D22364(llvm::BasicBlock *a1)
{
  void *v1;

  llvm::BasicBlock::~BasicBlock(a1);
  operator delete(v1);
}

void sub_180D22370(int32x2_t ****a1)
{
  void *v1;

  llvm::MetadataAsValue::~MetadataAsValue(a1);
  operator delete(v1);
}

void sub_180D2237C(void **a1, llvm::Value *a2)
{
  void *v2;

  llvm::InlineAsm::~InlineAsm(a1, a2);
  operator delete(v2);
}

void llvm::InlineAsm::~InlineAsm(void **this, llvm::Value *a2)
{
  int v3;

  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((_BYTE *)this + 17) & 1) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if ((*((_BYTE *)this + 17) & 1) == 0)
  {
LABEL_4:
    v3 = *((_DWORD *)this + 5);
    if ((v3 & 0x8000000) == 0)
      goto LABEL_5;
LABEL_10:
    llvm::ValueAsMetadata::handleDeletion((llvm::ValueAsMetadata *)this, a2);
    if ((*((_DWORD *)this + 5) & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  llvm::ValueHandleBase::ValueIsDeleted((llvm::ValueHandleBase *)this, a2);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
    goto LABEL_10;
LABEL_5:
  if ((v3 & 0x20000000) == 0)
  {
LABEL_6:
    llvm::Value::destroyValueName((llvm *)this);
    return;
  }
LABEL_11:
  llvm::Value::clearMetadata((llvm::Value *)this);
  llvm::Value::destroyValueName((llvm *)this);
}

void llvm::ShuffleVectorInst::~ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Type *a2)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 88)
    free(v3);
  llvm::Instruction::~Instruction((llvm::UndefValue **)this, a2);
}

uint64_t llvm::Value::getValueName(llvm::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  int v8;
  int v9;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 0;
  v2 = ***(_QWORD ***)this;
  v3 = *(_QWORD *)(v2 + 144);
  v4 = *(unsigned int *)(v2 + 160);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v6 = v3 + 16 * v5;
    v7 = *(llvm::Value **)v6;
    if (*(llvm::Value **)v6 == this)
      return *(_QWORD *)(v6 + 8);
    v8 = 1;
    while (v7 != (llvm::Value *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm::Value **)(v3 + 16 * v5);
      if (v7 == this)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return *(_QWORD *)(v3 + 16 * v4 + 8);
}

int32x2_t *llvm::Value::setValueName(int32x2_t *result, int32x2_t *a2)
{
  int32x2_t *v2;
  int32x2_t **v3;
  __int32 v4;
  int32x2_t *v6;
  _QWORD **v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x2_t **v11;
  int32x2_t *v12;
  int32x2_t **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int32x2_t *v17;
  __int32 v18;
  int32x2_t v19;
  __int32 v20;
  uint64_t v21;
  int32x2_t **v22;
  int32x2_t *v23;
  int32x2_t *v24;
  __int32 v25;
  int32x2_t v26;
  int v27;
  unsigned int v28;
  int32x2_t *v29;
  int v30;
  int v31;
  int32x2_t **v32;
  int v33;
  BOOL v34;
  unsigned int v35;

  v2 = result;
  v3 = **(int32x2_t ****)result;
  v4 = result[2].i32[1];
  if (a2)
  {
    result[2].i32[1] = v4 | 0x10000000;
    v6 = *v3;
    result = *v3 + 18;
    v7 = (_QWORD **)*result;
    v8 = v6[20].u32[0];
    if (!v8)
      goto LABEL_27;
    v9 = v8 - 1;
    v10 = (v8 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    v11 = (int32x2_t **)&v7[2 * v10];
    v12 = *v11;
    if (*v11 == v2)
    {
LABEL_23:
      v11[1] = a2;
      return result;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != (int32x2_t *)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == (int32x2_t *)-8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (int32x2_t **)&v7[2 * (v16 & v9)];
      v12 = *v11;
      if (*v11 == v2)
        goto LABEL_23;
    }
    if (v13)
      v11 = v13;
    v25 = v6[19].i32[0];
    if (4 * v25 + 4 < 3 * v8)
    {
      if (v8 + ~v25 - v6[19].i32[1] > v8 >> 3)
        goto LABEL_20;
    }
    else
    {
LABEL_27:
      v8 *= 2;
    }
    result = (int32x2_t *)llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v8);
    v26 = v6[18];
    v27 = v6[20].i32[0] - 1;
    v28 = v27 & ((v2 >> 4) ^ (v2 >> 9));
    v11 = (int32x2_t **)(*(_QWORD *)&v26 + 16 * v28);
    v29 = *v11;
    if (*v11 == v2)
    {
LABEL_29:
      ++v6[19].i32[0];
      if (v2 == (int32x2_t *)-4096)
        goto LABEL_22;
      goto LABEL_21;
    }
    v32 = 0;
    v33 = 1;
    while (v29 != (int32x2_t *)-4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v29 == (int32x2_t *)-8192;
      if (v34)
        v32 = v11;
      v35 = v28 + v33++;
      v28 = v35 & v27;
      v11 = (int32x2_t **)(*(_QWORD *)&v26 + 16 * (v35 & v27));
      v29 = *v11;
      if (*v11 == v2)
        goto LABEL_29;
    }
    if (v32)
      v11 = v32;
LABEL_20:
    v24 = *v11;
    ++v6[19].i32[0];
    if (v24 == (int32x2_t *)-4096)
    {
LABEL_22:
      *v11 = v2;
      v11[1] = 0;
      goto LABEL_23;
    }
LABEL_21:
    --v6[19].i32[1];
    goto LABEL_22;
  }
  if ((v4 & 0x10000000) != 0)
  {
    v17 = *v3;
    v18 = v17[20].i32[0];
    if (v18)
    {
      v19 = v17[18];
      v20 = v18 - 1;
      LODWORD(v21) = (v18 - 1) & ((result >> 4) ^ (result >> 9));
      v22 = (int32x2_t **)(*(_QWORD *)&v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == result)
      {
LABEL_16:
        *v22 = (int32x2_t *)-8192;
        v17[19] = vadd_s32(v17[19], (int32x2_t)0x1FFFFFFFFLL);
        v4 = result[2].i32[1];
      }
      else
      {
        v30 = 1;
        while (v23 != (int32x2_t *)-4096)
        {
          v31 = v21 + v30++;
          v21 = v31 & v20;
          v23 = *(int32x2_t **)(*(_QWORD *)&v19 + 16 * v21);
          if (v23 == result)
          {
            v22 = (int32x2_t **)(*(_QWORD *)&v19 + 16 * v21);
            goto LABEL_16;
          }
        }
      }
    }
  }
  result[2].i32[1] = v4 & 0xEFFFFFFF;
  return result;
}

const char *llvm::Value::getName(llvm::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  int v8;
  int v9;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return "";
  v2 = ***(_QWORD ***)this;
  v3 = *(_QWORD *)(v2 + 144);
  v4 = *(unsigned int *)(v2 + 160);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v6 = v3 + 16 * v5;
    v7 = *(llvm::Value **)v6;
    if (*(llvm::Value **)v6 == this)
      return (const char *)(*(_QWORD *)(v6 + 8) + 16);
    v8 = 1;
    while (v7 != (llvm::Value *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm::Value **)(v3 + 16 * v5);
      if (v7 == this)
        return (const char *)(*(_QWORD *)(v3 + 16 * v5 + 8) + 16);
    }
  }
  return (const char *)(*(_QWORD *)(v3 + 16 * v4 + 8) + 16);
}

void llvm::Value::setNameImpl(llvm::Value *this, const char **a2)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int8x16_t *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  int v18;
  int v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  int v34;
  int v35;
  int32x2_t *buffer;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Value *v42;
  int v43;
  int v44;
  int v45;
  int32x2_t *ValueName;
  void *v47;
  __int128 v48;
  _QWORD v49[33];

  v49[32] = *MEMORY[0x1E0C80C00];
  if (!llvm::LLVMContext::shouldDiscardValueNames(**(llvm::LLVMContext ***)this)
    || *((unsigned __int8 *)this + 16) < 4u)
  {
    v4 = 1;
    v5 = *((unsigned __int8 *)a2 + 32);
    v6 = v5 != 0;
    v7 = v5 - 1;
    if (v7 != 0 && v6)
      goto LABEL_9;
    goto LABEL_4;
  }
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return;
  v4 = 0;
  v8 = *((unsigned __int8 *)a2 + 32);
  v6 = v8 != 0;
  v7 = v8 - 1;
  if (v7 == 0 || !v6)
  {
LABEL_4:
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
      return;
  }
LABEL_9:
  v47 = v49;
  v48 = xmmword_181236410;
  if (v4)
  {
    if (*((_BYTE *)a2 + 33) == 1)
    {
      v9 = 0;
      v10 = 0;
      switch(v7)
      {
        case 0:
          break;
        case 2:
          v9 = (int8x16_t *)*a2;
          if (*a2)
            v10 = strlen(*a2);
          else
            v10 = 0;
          break;
        case 3:
          v45 = (*a2)[23];
          if (v45 >= 0)
            v9 = (int8x16_t *)*a2;
          else
            v9 = *(int8x16_t **)*a2;
          if (v45 >= 0)
            v10 = *((unsigned __int8 *)*a2 + 23);
          else
            v10 = *((_QWORD *)*a2 + 1);
          break;
        case 4:
        case 5:
          v9 = (int8x16_t *)*a2;
          v10 = (size_t)a2[1];
          break;
        default:
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v47);
      v9 = (int8x16_t *)v47;
      v10 = v48;
    }
  }
  else
  {
    v10 = 0;
    v9 = (int8x16_t *)"";
  }
  v11 = *((_DWORD *)this + 5);
  if ((v11 & 0x10000000) != 0)
  {
    v12 = ***(_QWORD ***)this;
    v13 = *(_QWORD *)(v12 + 144);
    v14 = *(unsigned int *)(v12 + 160);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((this >> 4) ^ (this >> 9));
      v16 = v13 + 16 * v15;
      v17 = *(llvm::Value **)v16;
      if (*(llvm::Value **)v16 == this)
      {
LABEL_25:
        v20 = *(uint64_t **)(v16 + 8);
        v22 = *v20;
        v21 = v20 + 2;
        if (v22 == v10 && (!v10 || !memcmp(v21, v9, v10)))
          goto LABEL_73;
LABEL_28:
        v23 = *((unsigned __int8 *)this + 16);
        if (this && v23 >= 0x1C)
        {
          v24 = *((_QWORD *)this + 5);
          if (!v24)
            goto LABEL_53;
          v25 = *(_QWORD *)(v24 + 64);
          if (!v25)
            goto LABEL_53;
          goto LABEL_45;
        }
        if (this && v23 == 22)
        {
          v25 = *((_QWORD *)this + 8);
          if (!v25)
            goto LABEL_53;
          goto LABEL_45;
        }
        if (this && v23 <= 3)
        {
          v26 = *((_QWORD *)this + 5);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 112);
            if (v27)
              goto LABEL_46;
          }
        }
        else
        {
          if (!this || v23 != 21)
            goto LABEL_73;
          v25 = *((_QWORD *)this + 3);
          if (v25)
          {
LABEL_45:
            v27 = *(_QWORD *)(v25 + 104);
            if (!v27)
              goto LABEL_53;
LABEL_46:
            if ((v11 & 0x10000000) == 0)
            {
LABEL_72:
              ValueName = (int32x2_t *)llvm::ValueSymbolTable::createValueName(v27, v9, (const unsigned __int8 *)v10, (uint64_t)this);
              llvm::Value::setValueName((int32x2_t *)this, ValueName);
              goto LABEL_73;
            }
            v28 = ***(_QWORD ***)this;
            v29 = *(_QWORD *)(v28 + 144);
            v30 = *(unsigned int *)(v28 + 160);
            if ((_DWORD)v30)
            {
              LODWORD(v31) = (v30 - 1) & ((this >> 4) ^ (this >> 9));
              v32 = v29 + 16 * v31;
              v33 = *(llvm::Value **)v32;
              if (*(llvm::Value **)v32 == this)
                goto LABEL_71;
              v34 = 1;
              while (v33 != (llvm::Value *)-4096)
              {
                v35 = v31 + v34++;
                v31 = v35 & (v30 - 1);
                v33 = *(llvm::Value **)(v29 + 16 * v31);
                if (v33 == this)
                {
                  v32 = v29 + 16 * v31;
                  goto LABEL_71;
                }
              }
            }
            v32 = v29 + 16 * v30;
LABEL_71:
            llvm::ValueSymbolTable::removeValueName(v27, *(_QWORD *)(v32 + 8));
            llvm::Value::destroyValueName(this);
            if (!v10)
              goto LABEL_73;
            goto LABEL_72;
          }
        }
LABEL_53:
        llvm::Value::destroyValueName(this);
        if (!v10)
          goto LABEL_73;
        buffer = (int32x2_t *)llvm::allocate_buffer(v10 + 17, (std::align_val_t)8uLL);
        memcpy(&buffer[2], v9, v10);
        buffer[2].i8[v10] = 0;
        *buffer = (int32x2_t)v10;
        buffer[1] = 0;
        llvm::Value::setValueName((int32x2_t *)this, buffer);
        v37 = ***(_QWORD ***)this;
        v38 = *(_QWORD *)(v37 + 144);
        v39 = *(unsigned int *)(v37 + 160);
        if ((_DWORD)v39)
        {
          LODWORD(v40) = (v39 - 1) & ((this >> 4) ^ (this >> 9));
          v41 = v38 + 16 * v40;
          v42 = *(llvm::Value **)v41;
          if (*(llvm::Value **)v41 == this)
          {
LABEL_61:
            *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) = this;
            goto LABEL_73;
          }
          v43 = 1;
          while (v42 != (llvm::Value *)-4096)
          {
            v44 = v40 + v43++;
            v40 = v44 & (v39 - 1);
            v42 = *(llvm::Value **)(v38 + 16 * v40);
            if (v42 == this)
            {
              v41 = v38 + 16 * v40;
              goto LABEL_61;
            }
          }
        }
        v41 = v38 + 16 * v39;
        goto LABEL_61;
      }
      v18 = 1;
      while (v17 != (llvm::Value *)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(llvm::Value **)(v13 + 16 * v15);
        if (v17 == this)
        {
          v16 = v13 + 16 * v15;
          goto LABEL_25;
        }
      }
    }
    v16 = v13 + 16 * v14;
    goto LABEL_25;
  }
  if (v10)
    goto LABEL_28;
LABEL_73:
  if (v47 != v49)
    free(v47);
}

void llvm::Value::setName(llvm::Value *this, const char **a2)
{
  llvm::Value::setNameImpl(this, a2);
  if (this)
  {
    if (!*((_BYTE *)this + 16))
      llvm::Function::updateAfterNameChange(this);
  }
}

void llvm::Value::takeName(llvm::Value *this, llvm::Value *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::ValueSymbolTable *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  int v33;
  int v34;
  unsigned int v35;
  int32x2_t *v36;
  __int32 v37;
  int32x2_t v38;
  __int32 v39;
  uint64_t v40;
  llvm::Value **v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  int v67;
  int v68;
  int32x2_t *v69;
  __int32 v70;
  int32x2_t v71;
  __int32 v72;
  uint64_t v73;
  llvm::Value **v74;
  llvm::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Value *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  const char *v88;
  __int16 v89;

  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v6 = *((unsigned __int8 *)this + 16);
    if (v6 >= 0x1C)
    {
      v8 = *((_QWORD *)this + 5);
      if (!v8 || (v7 = *(_QWORD *)(v8 + 64)) == 0)
      {
LABEL_24:
        v9 = 0;
        llvm::Value::destroyValueName(this);
        v5 = (unsigned int *)((char *)a2 + 20);
        v4 = *((_DWORD *)a2 + 5);
        if ((v4 & 0x10000000) == 0)
          return;
        goto LABEL_29;
      }
    }
    else if (v6 == 22)
    {
      v7 = *((_QWORD *)this + 8);
      if (!v7)
        goto LABEL_24;
    }
    else
    {
      if (v6 <= 3)
      {
        v18 = *((_QWORD *)this + 5);
        if (!v18)
          goto LABEL_24;
        v9 = *(llvm::ValueSymbolTable **)(v18 + 112);
        if (!v9)
        {
LABEL_28:
          llvm::Value::destroyValueName(this);
          v5 = (unsigned int *)((char *)a2 + 20);
          v4 = *((_DWORD *)a2 + 5);
          if ((v4 & 0x10000000) == 0)
            return;
LABEL_29:
          if (v9)
            goto LABEL_48;
          goto LABEL_30;
        }
LABEL_11:
        v10 = ***(_QWORD ***)this;
        v11 = *(_QWORD *)(v10 + 144);
        v12 = *(unsigned int *)(v10 + 160);
        if ((_DWORD)v12)
        {
          LODWORD(v13) = (v12 - 1) & ((this >> 4) ^ (this >> 9));
          v14 = v11 + 16 * v13;
          v15 = *(llvm::Value **)v14;
          if (*(llvm::Value **)v14 == this)
          {
LABEL_27:
            llvm::ValueSymbolTable::removeValueName(v9, *(_QWORD *)(v14 + 8));
            goto LABEL_28;
          }
          v16 = 1;
          while (v15 != (llvm::Value *)-4096)
          {
            v17 = v13 + v16++;
            v13 = v17 & (v12 - 1);
            v15 = *(llvm::Value **)(v11 + 16 * v13);
            if (v15 == this)
            {
              v14 = v11 + 16 * v13;
              goto LABEL_27;
            }
          }
        }
        v14 = v11 + 16 * v12;
        goto LABEL_27;
      }
      if (v6 != 21)
      {
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          return;
        goto LABEL_116;
      }
      v7 = *((_QWORD *)this + 3);
      if (!v7)
        goto LABEL_24;
    }
    v9 = *(llvm::ValueSymbolTable **)(v7 + 104);
    if (!v9)
      goto LABEL_28;
    goto LABEL_11;
  }
  v5 = (unsigned int *)((char *)a2 + 20);
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x10000000) == 0)
    return;
LABEL_30:
  v19 = *((unsigned __int8 *)this + 16);
  if (this && v19 >= 0x1C)
  {
    v20 = *((_QWORD *)this + 5);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 64)) == 0)
    {
LABEL_52:
      v9 = 0;
      v23 = *((unsigned __int8 *)a2 + 16);
      if (v23 >= 0x1C)
        goto LABEL_53;
LABEL_49:
      if (v23 == 22)
      {
        v24 = *((_QWORD *)a2 + 8);
        if (v24)
          goto LABEL_55;
      }
      else if (v23 <= 3)
      {
        v51 = *((_QWORD *)a2 + 5);
        if (v51)
        {
          v26 = *(llvm::ValueSymbolTable **)(v51 + 112);
          if (v9 != v26)
            goto LABEL_83;
          goto LABEL_56;
        }
      }
      else if (v23 == 21)
      {
        v24 = *((_QWORD *)a2 + 3);
        if (v24)
        {
LABEL_55:
          v26 = *(llvm::ValueSymbolTable **)(v24 + 104);
          if (v9 == v26)
            goto LABEL_56;
LABEL_83:
          if (!v26)
            goto LABEL_92;
          v52 = ***(_QWORD ***)a2;
          v53 = *(_QWORD *)(v52 + 144);
          v54 = *(unsigned int *)(v52 + 160);
          if ((_DWORD)v54)
          {
            LODWORD(v55) = (v54 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v56 = v53 + 16 * v55;
            v57 = *(llvm::Value **)v56;
            if (*(llvm::Value **)v56 == a2)
            {
LABEL_91:
              llvm::ValueSymbolTable::removeValueName(v26, *(_QWORD *)(v56 + 8));
              v4 = *v5;
LABEL_92:
              if ((v4 & 0x10000000) == 0)
              {
                llvm::Value::setValueName((int32x2_t *)this, 0);
                v60 = *v5;
                if ((*v5 & 0x10000000) == 0)
                  goto LABEL_106;
                goto LABEL_103;
              }
              v61 = ***(_QWORD ***)a2;
              v62 = *(_QWORD *)(v61 + 144);
              v63 = *(unsigned int *)(v61 + 160);
              if ((_DWORD)v63)
              {
                LODWORD(v64) = (v63 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                v65 = v62 + 16 * v64;
                v66 = *(llvm::Value **)v65;
                if (*(llvm::Value **)v65 == a2)
                  goto LABEL_102;
                v67 = 1;
                while (v66 != (llvm::Value *)-4096)
                {
                  v68 = v64 + v67++;
                  v64 = v68 & (v63 - 1);
                  v66 = *(llvm::Value **)(v62 + 16 * v64);
                  if (v66 == a2)
                  {
                    v65 = v62 + 16 * v64;
                    goto LABEL_102;
                  }
                }
              }
              v65 = v62 + 16 * v63;
LABEL_102:
              llvm::Value::setValueName((int32x2_t *)this, *(int32x2_t **)(v65 + 8));
              v60 = *v5;
              if ((*v5 & 0x10000000) == 0)
                goto LABEL_106;
LABEL_103:
              v69 = ***(int32x2_t ****)a2;
              v70 = v69[20].i32[0];
              if (v70)
              {
                v71 = v69[18];
                v72 = v70 - 1;
                LODWORD(v73) = (v70 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                v74 = (llvm::Value **)(*(_QWORD *)&v71 + 16 * v73);
                v75 = *v74;
                if (*v74 == a2)
                {
LABEL_105:
                  *v74 = (llvm::Value *)-8192;
                  v69[19] = vadd_s32(v69[19], (int32x2_t)0x1FFFFFFFFLL);
                  v60 = *v5;
                }
                else
                {
                  v84 = 1;
                  while (v75 != (llvm::Value *)-4096)
                  {
                    v85 = v73 + v84++;
                    v73 = v85 & v72;
                    v75 = *(llvm::Value **)(*(_QWORD *)&v71 + 16 * v73);
                    if (v75 == a2)
                    {
                      v74 = (llvm::Value **)(*(_QWORD *)&v71 + 16 * v73);
                      goto LABEL_105;
                    }
                  }
                }
              }
LABEL_106:
              *v5 = v60 & 0xEFFFFFFF;
              v76 = ***(_QWORD ***)this;
              v77 = *(_QWORD *)(v76 + 144);
              v78 = *(unsigned int *)(v76 + 160);
              if ((_DWORD)v78)
              {
                LODWORD(v79) = (v78 - 1) & ((this >> 4) ^ (this >> 9));
                v80 = v77 + 16 * v79;
                v81 = *(llvm::Value **)v80;
                if (*(llvm::Value **)v80 == this)
                  goto LABEL_113;
                v82 = 1;
                while (v81 != (llvm::Value *)-4096)
                {
                  v83 = v79 + v82++;
                  v79 = v83 & (v78 - 1);
                  v81 = *(llvm::Value **)(v77 + 16 * v79);
                  if (v81 == this)
                  {
                    v80 = v77 + 16 * v79;
                    goto LABEL_113;
                  }
                }
              }
              v80 = v77 + 16 * v78;
LABEL_113:
              *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8) = this;
              if (v9)
                llvm::ValueSymbolTable::reinsertValue(v9, this);
              return;
            }
            v58 = 1;
            while (v57 != (llvm::Value *)-4096)
            {
              v59 = v55 + v58++;
              v55 = v59 & (v54 - 1);
              v57 = *(llvm::Value **)(v53 + 16 * v55);
              if (v57 == a2)
              {
                v56 = v53 + 16 * v55;
                goto LABEL_91;
              }
            }
          }
          v56 = v53 + 16 * v54;
          goto LABEL_91;
        }
      }
LABEL_82:
      v26 = 0;
      if (v9)
        goto LABEL_83;
LABEL_56:
      v27 = ***(_QWORD ***)a2;
      v28 = *(_QWORD *)(v27 + 144);
      v29 = *(unsigned int *)(v27 + 160);
      if ((_DWORD)v29)
      {
        LODWORD(v30) = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v31 = v28 + 16 * v30;
        v32 = *(llvm::Value **)v31;
        if (*(llvm::Value **)v31 == a2)
        {
LABEL_67:
          llvm::Value::setValueName((int32x2_t *)this, *(int32x2_t **)(v31 + 8));
          v35 = *v5;
          if ((*v5 & 0x10000000) != 0)
          {
            v36 = ***(int32x2_t ****)a2;
            v37 = v36[20].i32[0];
            if (v37)
            {
              v38 = v36[18];
              v39 = v37 - 1;
              LODWORD(v40) = (v37 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              v41 = (llvm::Value **)(*(_QWORD *)&v38 + 16 * v40);
              v42 = *v41;
              if (*v41 == a2)
              {
LABEL_70:
                *v41 = (llvm::Value *)-8192;
                v36[19] = vadd_s32(v36[19], (int32x2_t)0x1FFFFFFFFLL);
                v35 = *v5;
              }
              else
              {
                v86 = 1;
                while (v42 != (llvm::Value *)-4096)
                {
                  v87 = v40 + v86++;
                  v40 = v87 & v39;
                  v42 = *(llvm::Value **)(*(_QWORD *)&v38 + 16 * v40);
                  if (v42 == a2)
                  {
                    v41 = (llvm::Value **)(*(_QWORD *)&v38 + 16 * v40);
                    goto LABEL_70;
                  }
                }
              }
            }
          }
          *v5 = v35 & 0xEFFFFFFF;
          v43 = ***(_QWORD ***)this;
          v44 = *(_QWORD *)(v43 + 144);
          v45 = *(unsigned int *)(v43 + 160);
          if ((_DWORD)v45)
          {
            LODWORD(v46) = (v45 - 1) & ((this >> 4) ^ (this >> 9));
            v47 = v44 + 16 * v46;
            v48 = *(llvm::Value **)v47;
            if (*(llvm::Value **)v47 == this)
            {
LABEL_78:
              *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8) = this;
              return;
            }
            v49 = 1;
            while (v48 != (llvm::Value *)-4096)
            {
              v50 = v46 + v49++;
              v46 = v50 & (v45 - 1);
              v48 = *(llvm::Value **)(v44 + 16 * v46);
              if (v48 == this)
              {
                v47 = v44 + 16 * v46;
                goto LABEL_78;
              }
            }
          }
          v47 = v44 + 16 * v45;
          goto LABEL_78;
        }
        v33 = 1;
        while (v32 != (llvm::Value *)-4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & (v29 - 1);
          v32 = *(llvm::Value **)(v28 + 16 * v30);
          if (v32 == a2)
          {
            v31 = v28 + 16 * v30;
            goto LABEL_67;
          }
        }
      }
      v31 = v28 + 16 * v29;
      goto LABEL_67;
    }
    goto LABEL_47;
  }
  if (this && v19 == 22)
  {
    v21 = *((_QWORD *)this + 8);
    if (!v21)
      goto LABEL_52;
    goto LABEL_47;
  }
  if (this && v19 <= 3)
  {
    v22 = *((_QWORD *)this + 5);
    if (!v22)
      goto LABEL_52;
    v9 = *(llvm::ValueSymbolTable **)(v22 + 112);
    v23 = *((unsigned __int8 *)a2 + 16);
    if (v23 < 0x1C)
      goto LABEL_49;
LABEL_53:
    v25 = *((_QWORD *)a2 + 5);
    if (v25)
    {
      v24 = *(_QWORD *)(v25 + 64);
      if (v24)
        goto LABEL_55;
    }
    goto LABEL_82;
  }
  if (this && v19 == 21)
  {
    v21 = *((_QWORD *)this + 3);
    if (!v21)
      goto LABEL_52;
LABEL_47:
    v9 = *(llvm::ValueSymbolTable **)(v21 + 104);
LABEL_48:
    v23 = *((unsigned __int8 *)a2 + 16);
    if (v23 < 0x1C)
      goto LABEL_49;
    goto LABEL_53;
  }
LABEL_116:
  v89 = 257;
  llvm::Value::setNameImpl(a2, &v88);
  if (!*((_BYTE *)a2 + 16))
    llvm::Function::updateAfterNameChange(a2);
}

void llvm::Value::doRAUW(Value *this, llvm::Value *a2, llvm::Value *a3)
{
  int v3;
  ValueImpl *impl;
  ValueImpl **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;

  v3 = (int)a3;
  if ((BYTE1(this[2].impl) & 1) != 0)
    llvm::ValueHandleBase::ValueIsRAUWd((llvm::ValueHandleBase *)this, a2, a3);
  if (v3 == 1 && (HIBYTE(this[2].impl) & 8) != 0)
    llvm::ValueAsMetadata::handleRAUW(this, a2, a3);
  impl = this[1].impl;
  if (impl)
  {
    if (a2)
    {
      v7 = (ValueImpl **)((char *)a2 + 8);
      do
      {
        while (1)
        {
          v8 = (unsigned __int8 *)*((_QWORD *)impl + 3);
          if (!v8 || v8[16] - 21 < 0xFFFFFFEF)
            break;
          llvm::Constant::handleOperandChange((llvm::Constant *)v8, this, (Value *)a2);
          impl = this[1].impl;
          if (!impl)
            goto LABEL_30;
        }
        if (*(_QWORD *)impl)
        {
          **((_QWORD **)impl + 2) = *((_QWORD *)impl + 1);
          v10 = *((_QWORD *)impl + 1);
          if (v10)
            *(_QWORD *)(v10 + 16) = *((_QWORD *)impl + 2);
        }
        *(_QWORD *)impl = a2;
        v11 = *((_QWORD *)a2 + 1);
        *((_QWORD *)impl + 1) = v11;
        if (v11)
          *(_QWORD *)(v11 + 16) = (char *)impl + 8;
        *((_QWORD *)impl + 2) = v7;
        *v7 = impl;
        impl = this[1].impl;
      }
      while (impl);
    }
    else
    {
      do
      {
        while (1)
        {
          v12 = (unsigned __int8 *)*((_QWORD *)impl + 3);
          if (!v12 || v12[16] - 21 < 0xFFFFFFEF)
            break;
          llvm::Constant::handleOperandChange((llvm::Constant *)v12, this, 0);
          impl = this[1].impl;
          if (!impl)
            goto LABEL_30;
        }
        if (*(_QWORD *)impl)
        {
          **((_QWORD **)impl + 2) = *((_QWORD *)impl + 1);
          v14 = *((_QWORD *)impl + 1);
          if (v14)
            *(_QWORD *)(v14 + 16) = *((_QWORD *)impl + 2);
        }
        *(_QWORD *)impl = 0;
        impl = this[1].impl;
      }
      while (impl);
    }
  }
LABEL_30:
  if (LOBYTE(this[2].impl) == 22)
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith((llvm::BasicBlock *)this, a2);
}

unint64_t *llvm::ValueHandleBase::ValueIsRAUWd(llvm::ValueHandleBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  llvm::ValueHandleBase **v11;
  llvm::ValueHandleBase *v12;
  llvm::ValueHandleBase **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  llvm::ValueHandleBase *v17;
  unint64_t *result;
  int32x2_t ****v19;
  unint64_t v21;
  unint64_t **v22;
  unint64_t *v23;
  unint64_t v24;
  int32x2_t ****v25;
  int32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int32x2_t *****v31;
  int32x2_t ****v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int32x2_t ****v37;
  int32x2_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int32x2_t *****v43;
  int32x2_t ****v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  llvm::ValueHandleBase *v49;
  int v50;
  int v51;
  llvm::ValueHandleBase **v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t *v57;
  int32x2_t ****v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = **(uint64_t ***)this;
  v6 = *v5;
  v7 = *(_DWORD *)(*v5 + 2472);
  if (!v7)
    goto LABEL_57;
  v8 = *(_QWORD *)(v6 + 2456);
  v9 = v7 - 1;
  v10 = (v7 - 1) & ((this >> 4) ^ (this >> 9));
  v11 = (llvm::ValueHandleBase **)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 == this)
    goto LABEL_17;
  v13 = 0;
  v14 = 1;
  while (v12 != (llvm::ValueHandleBase *)-4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == (llvm::ValueHandleBase *)-8192;
    if (v15)
      v13 = v11;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    v11 = (llvm::ValueHandleBase **)(v8 + 16 * (v16 & v9));
    v12 = *v11;
    if (*v11 == this)
      goto LABEL_17;
  }
  if (v13)
    v11 = v13;
  v45 = *(_DWORD *)(v6 + 2464);
  if (4 * v45 + 4 < 3 * v7)
  {
    if (v7 + ~v45 - *(_DWORD *)(v6 + 2468) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_57:
    v7 *= 2;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v6 + 2456, v7);
  v46 = *(_QWORD *)(v6 + 2456);
  v47 = *(_DWORD *)(v6 + 2472) - 1;
  v48 = v47 & ((this >> 4) ^ (this >> 9));
  v11 = (llvm::ValueHandleBase **)(v46 + 16 * v48);
  v49 = *v11;
  if (*v11 == this)
  {
LABEL_59:
    ++*(_DWORD *)(v6 + 2464);
    if (this == (llvm::ValueHandleBase *)-4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v52 = 0;
  v53 = 1;
  while (v49 != (llvm::ValueHandleBase *)-4096)
  {
    if (v52)
      v54 = 0;
    else
      v54 = v49 == (llvm::ValueHandleBase *)-8192;
    if (v54)
      v52 = v11;
    v55 = v48 + v53++;
    v48 = v55 & v47;
    v11 = (llvm::ValueHandleBase **)(v46 + 16 * (v55 & v47));
    v49 = *v11;
    if (*v11 == this)
      goto LABEL_59;
  }
  if (v52)
    v11 = v52;
LABEL_14:
  v17 = *v11;
  ++*(_DWORD *)(v6 + 2464);
  if (v17 != (llvm::ValueHandleBase *)-4096)
LABEL_15:
    --*(_DWORD *)(v6 + 2468);
LABEL_16:
  *v11 = this;
  v11[1] = 0;
LABEL_17:
  result = (unint64_t *)v11[1];
  v56 = 0;
  v57 = 0;
  v19 = (int32x2_t ****)result[2];
  v58 = v19;
  if (v19 != (int32x2_t ****)-8192 && v19 != (int32x2_t ****)-4096 && v19 != 0)
  {
    v21 = *result;
    v22 = (unint64_t **)(*result & 0xFFFFFFFFFFFFFFF8);
    v57 = *v22;
    *v22 = &v56;
    v56 = v21 & 0xFFFFFFFFFFFFFFF8 | v56 & 7;
    if (v57)
      *v57 = *v57 & 7 | (unint64_t)&v57;
  }
  v23 = v57;
  do
  {
    v24 = v56 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8) = v23;
    if (v57)
    {
      *v57 = *v57 & 7 | v24;
    }
    else
    {
      v25 = v58;
      v26 = ***v58;
      v27 = (unint64_t)v26[307];
      if (v27 <= v24)
      {
        v28 = v26[309].u32[0];
        if (v27 + 16 * v28 > v24)
        {
          v29 = v28 - 1;
          LODWORD(v30) = v29 & ((v58 >> 4) ^ (v58 >> 9));
          v31 = (int32x2_t *****)(v27 + 16 * v30);
          v32 = *v31;
          if (v58 == *v31)
          {
LABEL_32:
            *v31 = (int32x2_t ****)-8192;
            v26[308] = vadd_s32(v26[308], (int32x2_t)0x1FFFFFFFFLL);
            v25 = v58;
          }
          else
          {
            v34 = 1;
            while (v32 != (int32x2_t ****)-4096)
            {
              v35 = v30 + v34++;
              v30 = v35 & v29;
              v32 = *(int32x2_t *****)(v27 + 16 * v30);
              if (v58 == v32)
              {
                v31 = (int32x2_t *****)(v27 + 16 * v30);
                goto LABEL_32;
              }
            }
          }
          *((_BYTE *)v25 + 17) &= ~1u;
        }
      }
    }
    v57 = (unint64_t *)result[1];
    result[1] = (unint64_t)&v56;
    v56 = v56 & 7 | (unint64_t)(result + 1);
    if (v57)
      *v57 = *v57 & 7 | (unint64_t)&v57;
    v33 = (*(_DWORD *)result >> 1) & 3;
    if (v33 == 1)
    {
      (*(void (**)(unint64_t *, llvm::Value *))(*(result - 1) + 16))(result - 1, a2);
    }
    else if (v33 == 3)
    {
      llvm::ValueHandleBase::operator=(result, (unint64_t)a2);
    }
    v23 = v57;
    result = v57;
  }
  while (v57);
  if (v58 != (int32x2_t ****)-8192 && v58 != (int32x2_t ****)-4096 && v58)
  {
    v36 = v56 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8) = v57;
    if (v57)
    {
      *v57 = *v57 & 7 | v36;
    }
    else
    {
      v37 = v58;
      v38 = ***v58;
      v39 = (unint64_t)v38[307];
      if (v39 <= v36)
      {
        v40 = v38[309].u32[0];
        if (v39 + 16 * v40 > v36)
        {
          v41 = v40 - 1;
          LODWORD(v42) = v41 & ((v58 >> 4) ^ (v58 >> 9));
          v43 = (int32x2_t *****)(v39 + 16 * v42);
          v44 = *v43;
          if (v58 == *v43)
          {
LABEL_51:
            *v43 = (int32x2_t ****)-8192;
            v38[308] = vadd_s32(v38[308], (int32x2_t)0x1FFFFFFFFLL);
            v37 = v58;
          }
          else
          {
            v50 = 1;
            while (v44 != (int32x2_t ****)-4096)
            {
              v51 = v42 + v50++;
              v42 = v51 & v41;
              v44 = *(int32x2_t *****)(v39 + 16 * v42);
              if (v58 == v44)
              {
                v43 = (int32x2_t *****)(v39 + 16 * v42);
                goto LABEL_51;
              }
            }
          }
          *((_BYTE *)v37 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

void llvm::Value::replaceAllUsesWith(Value *this, llvm::Value *a2)
{
  llvm::Value::doRAUW(this, a2, (llvm::Value *)1);
}

llvm::Value *llvm::Value::stripPointerCasts(llvm::Value *this)
{
  llvm::Value *ArgOperandWithAttribute;
  llvm::Value *v2;
  llvm::Value **v3;
  char v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  llvm::Value **v11;
  int v12;
  uint64_t v13;
  llvm::Value **v14;
  uint64_t v15;
  llvm::Value **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APInt *v21;
  unsigned int v22;
  llvm::Value **v24;
  llvm::Value **v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];

  ArgOperandWithAttribute = this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return this;
  v24 = (llvm::Value **)v28;
  v25 = (llvm::Value **)v28;
  v27 = 0;
  v26 = 0x100000004;
  v28[0] = this;
  while (1)
  {
    while (1)
    {
      v2 = ArgOperandWithAttribute;
      v5 = *((unsigned __int8 *)ArgOperandWithAttribute + 16);
      if (v5 > 0x1B)
      {
        switch(*((_BYTE *)ArgOperandWithAttribute + 16))
        {
          case '!':
          case '\'':
          case 'T':
            ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)ArgOperandWithAttribute, 48);
            if (ArgOperandWithAttribute)
              goto LABEL_29;
            break;
          case '>':
            goto LABEL_15;
          case 'M':
            goto LABEL_18;
          case 'N':
            goto LABEL_20;
          default:
            goto LABEL_52;
        }
        goto LABEL_52;
      }
      if (v5 != 5)
        goto LABEL_52;
      v6 = *((unsigned __int16 *)ArgOperandWithAttribute + 9);
      if (v6 == 34)
        break;
      if (v6 == 49)
      {
LABEL_18:
        v10 = *((_DWORD *)ArgOperandWithAttribute + 5);
        if ((v10 & 0x40000000) != 0)
          v11 = (llvm::Value **)*((_QWORD *)ArgOperandWithAttribute - 1);
        else
          v11 = (llvm::Value **)((char *)ArgOperandWithAttribute - 32 * (v10 & 0x7FFFFFF));
        ArgOperandWithAttribute = *v11;
        v2 = *v11;
        if (*(_BYTE *)(*(_QWORD *)*v11 + 8) != 15)
          goto LABEL_52;
LABEL_29:
        v3 = v25;
        if (v25 == v24)
          goto LABEL_30;
        goto LABEL_5;
      }
      if (v6 != 50)
        goto LABEL_52;
LABEL_20:
      v12 = *((_DWORD *)ArgOperandWithAttribute + 5);
      if ((v12 & 0x40000000) != 0)
        goto LABEL_4;
      ArgOperandWithAttribute = (llvm::Value *)*((_QWORD *)ArgOperandWithAttribute - 4 * (v12 & 0x7FFFFFF));
      v3 = v25;
      if (v25 == v24)
        goto LABEL_30;
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v24, ArgOperandWithAttribute);
      v2 = ArgOperandWithAttribute;
      if (!v4)
        goto LABEL_52;
    }
LABEL_15:
    v7 = *((_DWORD *)ArgOperandWithAttribute + 5);
    if ((v7 & 0x40000000) != 0)
      break;
    v8 = v7 & 0x7FFFFFF;
    v9 = (char *)v2 - 32 * v8;
    if (v8 != 1)
      goto LABEL_40;
LABEL_24:
    if ((v7 & 0x40000000) == 0)
    {
      ArgOperandWithAttribute = (llvm::Value *)*((_QWORD *)v2 - 4 * (v7 & 0x7FFFFFF));
      v3 = v25;
      if (v25 == v24)
        goto LABEL_30;
      goto LABEL_5;
    }
LABEL_4:
    ArgOperandWithAttribute = (llvm::Value *)**((_QWORD **)v2 - 1);
    v3 = v25;
    if (v25 != v24)
      goto LABEL_5;
LABEL_30:
    v13 = HIDWORD(v26);
    if (HIDWORD(v26))
    {
      v14 = 0;
      v15 = 8 * HIDWORD(v26);
      v16 = v3;
      do
      {
        if (*v16 == ArgOperandWithAttribute)
        {
          v2 = ArgOperandWithAttribute;
          goto LABEL_52;
        }
        if (*v16 == (llvm::Value *)-2)
          v14 = v16;
        ++v16;
        v15 -= 8;
      }
      while (v15);
      if (!v14)
        goto LABEL_38;
      *v14 = ArgOperandWithAttribute;
      --v27;
    }
    else
    {
LABEL_38:
      if (HIDWORD(v26) >= v26)
        goto LABEL_5;
      ++HIDWORD(v26);
      v3[v13] = ArgOperandWithAttribute;
    }
  }
  v9 = (char *)*((_QWORD *)v2 - 1);
  v8 = v7 & 0x7FFFFFF;
  if (v8 == 1)
    goto LABEL_24;
LABEL_40:
  v17 = v9 + 32;
  v18 = 32 * v8 - 32;
  while (1)
  {
    v19 = *(_QWORD *)v17;
    if (!*(_QWORD *)v17 || *(_BYTE *)(*(_QWORD *)v17 + 16) != 16)
      break;
    v21 = (llvm::APInt *)(v19 + 24);
    v22 = *(_DWORD *)(v19 + 32);
    if (v22 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v21) != v22)
        break;
    }
    else if (*(_QWORD *)v21)
    {
      break;
    }
    v17 += 32;
    v18 -= 32;
    if (!v18)
      goto LABEL_24;
  }
LABEL_52:
  if (v25 != v24)
    free(v25);
  return v2;
}

llvm::Value *llvm::Value::stripPointerCastsAndAliases(llvm::Value *this)
{
  llvm::Value *ArgOperandWithAttribute;
  llvm::Value **v2;
  llvm::Value *v3;
  char v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  llvm::Value **v11;
  int v12;
  uint64_t v13;
  llvm::Value **v14;
  uint64_t v15;
  llvm::Value **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APInt *v21;
  unsigned int v22;
  llvm::Value **v24;
  llvm::Value **v25;
  uint64_t v26;
  int v27;
  _QWORD v28[4];

  ArgOperandWithAttribute = this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return this;
  v24 = (llvm::Value **)v28;
  v25 = (llvm::Value **)v28;
  v27 = 0;
  v26 = 0x100000004;
  v28[0] = this;
  while (1)
  {
    while (1)
    {
      v3 = ArgOperandWithAttribute;
      v5 = *((unsigned __int8 *)ArgOperandWithAttribute + 16);
      if (v5 > 0x1B)
      {
        switch(*((_BYTE *)ArgOperandWithAttribute + 16))
        {
          case '!':
          case '\'':
          case 'T':
            ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)ArgOperandWithAttribute, 48);
            if (ArgOperandWithAttribute)
              goto LABEL_31;
            break;
          case '>':
            goto LABEL_15;
          case 'M':
            goto LABEL_18;
          case 'N':
            goto LABEL_20;
          default:
            goto LABEL_55;
        }
        goto LABEL_55;
      }
      if (v5 != 1)
        break;
      ArgOperandWithAttribute = (llvm::Value *)*((_QWORD *)ArgOperandWithAttribute - 4);
      v2 = v25;
      if (v25 != v24)
        goto LABEL_4;
LABEL_32:
      v13 = HIDWORD(v26);
      if (HIDWORD(v26))
      {
        v14 = 0;
        v15 = 8 * HIDWORD(v26);
        v16 = v2;
        do
        {
          if (*v16 == ArgOperandWithAttribute)
          {
            v3 = ArgOperandWithAttribute;
            goto LABEL_55;
          }
          if (*v16 == (llvm::Value *)-2)
            v14 = v16;
          ++v16;
          v15 -= 8;
        }
        while (v15);
        if (!v14)
          goto LABEL_40;
        *v14 = ArgOperandWithAttribute;
        --v27;
      }
      else
      {
LABEL_40:
        if (HIDWORD(v26) >= v26)
          goto LABEL_4;
        ++HIDWORD(v26);
        v2[v13] = ArgOperandWithAttribute;
      }
    }
    if (v5 != 5)
      goto LABEL_55;
    v6 = *((unsigned __int16 *)ArgOperandWithAttribute + 9);
    if (v6 == 34)
      break;
    if (v6 == 49)
    {
LABEL_18:
      v10 = *((_DWORD *)ArgOperandWithAttribute + 5);
      if ((v10 & 0x40000000) != 0)
        v11 = (llvm::Value **)*((_QWORD *)ArgOperandWithAttribute - 1);
      else
        v11 = (llvm::Value **)((char *)ArgOperandWithAttribute - 32 * (v10 & 0x7FFFFFF));
      ArgOperandWithAttribute = *v11;
      v3 = *v11;
      if (*(_BYTE *)(*(_QWORD *)*v11 + 8) != 15)
        goto LABEL_55;
LABEL_31:
      v2 = v25;
      if (v25 == v24)
        goto LABEL_32;
      goto LABEL_4;
    }
    if (v6 != 50)
      goto LABEL_55;
LABEL_20:
    v12 = *((_DWORD *)ArgOperandWithAttribute + 5);
    if ((v12 & 0x40000000) != 0)
    {
LABEL_27:
      ArgOperandWithAttribute = (llvm::Value *)**((_QWORD **)v3 - 1);
      v2 = v25;
      if (v25 == v24)
        goto LABEL_32;
      goto LABEL_4;
    }
    ArgOperandWithAttribute = (llvm::Value *)*((_QWORD *)ArgOperandWithAttribute - 4 * (v12 & 0x7FFFFFF));
    v2 = v25;
    if (v25 == v24)
      goto LABEL_32;
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v24, ArgOperandWithAttribute);
    v3 = ArgOperandWithAttribute;
    if (!v4)
      goto LABEL_55;
  }
LABEL_15:
  v7 = *((_DWORD *)ArgOperandWithAttribute + 5);
  if ((v7 & 0x40000000) == 0)
  {
    v8 = v7 & 0x7FFFFFF;
    v9 = (char *)v3 - 32 * v8;
    if (v8 != 1)
      goto LABEL_42;
    goto LABEL_24;
  }
  v9 = (char *)*((_QWORD *)v3 - 1);
  v8 = v7 & 0x7FFFFFF;
  if (v8 == 1)
  {
LABEL_24:
    if ((v7 & 0x40000000) != 0)
      goto LABEL_27;
    ArgOperandWithAttribute = (llvm::Value *)*((_QWORD *)v3 - 4 * (v7 & 0x7FFFFFF));
    v2 = v25;
    if (v25 == v24)
      goto LABEL_32;
    goto LABEL_4;
  }
LABEL_42:
  v17 = v9 + 32;
  v18 = 32 * v8 - 32;
  while (1)
  {
    v19 = *(_QWORD *)v17;
    if (!*(_QWORD *)v17 || *(_BYTE *)(*(_QWORD *)v17 + 16) != 16)
      break;
    v21 = (llvm::APInt *)(v19 + 24);
    v22 = *(_DWORD *)(v19 + 32);
    if (v22 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v21) != v22)
        break;
    }
    else if (*(_QWORD *)v21)
    {
      break;
    }
    v17 += 32;
    v18 -= 32;
    if (!v18)
      goto LABEL_24;
  }
LABEL_55:
  if (v25 != v24)
    free(v25);
  return v3;
}

llvm::GlobalValue *llvm::Value::stripAndAccumulateConstantOffsets(llvm::GlobalValue *this, llvm::DataLayout *a2, uint64_t a3, char a4, int a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  llvm::GlobalValue *v7;
  llvm::GlobalValue *v13;
  unsigned int v14;
  llvm::GlobalValue **v15;
  llvm::GlobalValue **v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  llvm::GlobalValue **v22;
  llvm::GlobalValue **v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t ArgOperandWithAttribute;
  llvm::GlobalValue *v28;
  int v29;
  unsigned int v30;
  _BOOL4 v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  llvm::GlobalValue **v35;
  uint64_t v36;
  llvm::GlobalValue **v37;
  uint64_t v40;
  unsigned int v41;
  void *__p;
  unsigned int v43;
  BOOL v44;
  void *v45;
  unsigned int v46;
  void *v47;
  unsigned int IndexTypeSizeInBits;
  llvm::GlobalValue **v49;
  llvm::GlobalValue **v50;
  uint64_t v51;
  int v52;
  _QWORD v53[4];

  v13 = this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
  {
    if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8) != 15)
      return v13;
  }
  else if (*(_DWORD *)(*(_QWORD *)this + 8) != 15)
  {
    return v13;
  }
  v14 = *(_DWORD *)(a3 + 8);
  v15 = (llvm::GlobalValue **)v53;
  v49 = (llvm::GlobalValue **)v53;
  v50 = (llvm::GlobalValue **)v53;
  v52 = 0;
  v51 = 0x100000004;
  v53[0] = this;
  v16 = (llvm::GlobalValue **)v53;
  while (1)
  {
    v19 = *((unsigned __int8 *)v13 + 16);
    if (v19 <= 0x1B)
      break;
    switch(v19)
    {
      case 'M':
        goto LABEL_22;
      case '>':
        goto LABEL_17;
      case 'N':
        goto LABEL_22;
    }
LABEL_39:
    if (v19 < 0x1C || v19 - 33 > 0x33 || ((1 << (v19 - 33)) & 0x8000000000041) == 0)
      goto LABEL_83;
    ArgOperandWithAttribute = llvm::CallBase::getArgOperandWithAttribute((uint64_t)v13, 48);
    if (ArgOperandWithAttribute)
      v28 = (llvm::GlobalValue *)ArgOperandWithAttribute;
    else
      v28 = v13;
    if (a5 && llvm::Instruction::isLaunderOrStripInvariantGroup(v13))
    {
      v21 = *((_DWORD *)v13 + 5);
LABEL_23:
      v22 = (llvm::GlobalValue **)((char *)v13 - 32 * (v21 & 0x7FFFFFF));
      goto LABEL_28;
    }
    v13 = v28;
    v23 = v50;
    if (v50 != v49)
      goto LABEL_6;
LABEL_84:
    v34 = HIDWORD(v51);
    if (HIDWORD(v51))
    {
      v35 = 0;
      v36 = 8 * HIDWORD(v51);
      v37 = v23;
      do
      {
        if (*v37 == v13)
        {
          v18 = 0;
          goto LABEL_7;
        }
        if (*v37 == (llvm::GlobalValue *)-2)
          v35 = v37;
        ++v37;
        v36 -= 8;
      }
      while (v36);
      if (!v35)
        goto LABEL_92;
      *v35 = v13;
      --v52;
      v18 = 1;
      goto LABEL_7;
    }
LABEL_92:
    if (HIDWORD(v51) < v51)
    {
      ++HIDWORD(v51);
      v23[v34] = v13;
      v18 = 1;
      goto LABEL_7;
    }
LABEL_6:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v49, v13);
    v18 = v17;
LABEL_7:
    v15 = v49;
    v16 = v50;
    if (!v18)
      goto LABEL_100;
  }
  if (v19 == 1)
  {
    if ((llvm::GlobalValue::isInterposable(v13) & 1) == 0)
    {
      v22 = (llvm::GlobalValue **)((char *)v13 - 32);
      goto LABEL_28;
    }
    goto LABEL_83;
  }
  if (v19 != 5)
    goto LABEL_83;
  v20 = *((unsigned __int16 *)v13 + 9);
  if (v20 != 34)
  {
    if (v20 == 49 || v20 == 50)
    {
LABEL_22:
      v21 = *((_DWORD *)v13 + 5);
      if ((v21 & 0x40000000) == 0)
        goto LABEL_23;
      v22 = (llvm::GlobalValue **)*((_QWORD *)v13 - 1);
LABEL_28:
      v13 = *v22;
      v23 = v50;
      if (v50 != v49)
        goto LABEL_6;
      goto LABEL_84;
    }
    goto LABEL_39;
  }
LABEL_17:
  if ((a4 & 1) == 0 && (*((_BYTE *)v13 + 17) & 2) == 0)
    goto LABEL_100;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(a2, *(Type **)v13);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
  else
    v47 = 0;
  v24 = llvm::GEPOperator::accumulateConstantOffset((uint64_t)v13, a2, (uint64_t)&v47, a6, a7);
  v25 = IndexTypeSizeInBits;
  if (!v24)
    goto LABEL_50;
  v26 = IndexTypeSizeInBits - 1;
  if (IndexTypeSizeInBits > 0x40)
  {
    if (((*((_QWORD *)v47 + (v26 >> 6)) >> v26) & 1) != 0)
    {
      if (v25 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v47) + 1 > v14)
        goto LABEL_50;
    }
    else if (v25 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) + 1 > v14)
    {
      goto LABEL_50;
    }
LABEL_36:
    llvm::APInt::sextOrTrunc((char *)&v47, v14, (uint64_t)&v45);
    if (a6)
    {
      v44 = 0;
      v43 = *(_DWORD *)(a3 + 8);
      if (v43 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a3);
      else
        __p = *(void **)a3;
      llvm::APInt::sadd_ov((const void **)a3, (const llvm::APInt *)&v45, &v44, (uint64_t)&v40);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        operator delete[](*(void **)a3);
      *(_QWORD *)a3 = v40;
      v30 = v41;
      *(_DWORD *)(a3 + 8) = v41;
      v31 = v44;
      if (v44)
      {
        if (v30 > 0x40 || (v32 = v43, v43 > 0x40))
        {
          llvm::APInt::assignSlowCase((const void **)a3, (const void **)&__p);
        }
        else
        {
          *(_QWORD *)a3 = __p;
          *(_DWORD *)(a3 + 8) = v32;
        }
        v7 = v13;
      }
      if (v43 >= 0x41 && __p)
        operator delete[](__p);
      if (v31)
      {
        v29 = 1;
        if (v46 < 0x41)
          goto LABEL_79;
        goto LABEL_77;
      }
    }
    else
    {
      llvm::APInt::operator+=(a3, (_QWORD **)&v45);
    }
    v33 = *((_DWORD *)v13 + 5);
    if ((v33 & 0x40000000) != 0)
    {
      v29 = 0;
      v13 = (llvm::GlobalValue *)**((_QWORD **)v13 - 1);
      if (v46 < 0x41)
        goto LABEL_79;
    }
    else
    {
      v29 = 0;
      v13 = (llvm::GlobalValue *)*((_QWORD *)v13 - 4 * (v33 & 0x7FFFFFF));
      if (v46 < 0x41)
        goto LABEL_79;
    }
LABEL_77:
    if (v45)
      operator delete[](v45);
LABEL_79:
    if (IndexTypeSizeInBits < 0x41)
      goto LABEL_82;
    goto LABEL_80;
  }
  if ((((unint64_t)v47 >> v26) & 1) == 0)
  {
    if (65 - __clz((unint64_t)v47) > v14)
      goto LABEL_50;
    goto LABEL_36;
  }
  if (!IndexTypeSizeInBits)
  {
    if (!v14)
      goto LABEL_50;
    goto LABEL_36;
  }
  if (IndexTypeSizeInBits - __clz(~((_QWORD)v47 << -(char)IndexTypeSizeInBits)) + 1 <= v14)
    goto LABEL_36;
LABEL_50:
  v29 = 1;
  v7 = v13;
  if (v25 >= 0x41)
  {
LABEL_80:
    if (v47)
      operator delete[](v47);
  }
LABEL_82:
  if (!v29)
  {
LABEL_83:
    v23 = v50;
    if (v50 != v49)
      goto LABEL_6;
    goto LABEL_84;
  }
  v15 = v49;
  v16 = v50;
  v13 = v7;
LABEL_100:
  if (v16 != v15)
    free(v16);
  return v13;
}

uint64_t llvm::Value::stripInBoundsOffsets(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t ArgOperandWithAttribute;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _QWORD v23[4];

  ArgOperandWithAttribute = a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
    return ArgOperandWithAttribute;
  v19 = v23;
  v20 = v23;
  v22 = 0;
  v21 = 0x100000004;
  v23[0] = a1;
  while (1)
  {
    v7 = ArgOperandWithAttribute;
    a2(a3, ArgOperandWithAttribute);
    v9 = *(unsigned __int8 *)(ArgOperandWithAttribute + 16);
    if (v9 > 0x1B)
    {
      switch(*(_BYTE *)(ArgOperandWithAttribute + 16))
      {
        case '!':
        case '\'':
        case 'T':
          ArgOperandWithAttribute = llvm::CallBase::getArgOperandWithAttribute(ArgOperandWithAttribute, 48);
          if (!ArgOperandWithAttribute)
            goto LABEL_35;
          goto LABEL_24;
        case '>':
          goto LABEL_14;
        case 'M':
          goto LABEL_17;
        case 'N':
          goto LABEL_19;
        default:
          goto LABEL_35;
      }
    }
    if (v9 != 5)
      break;
    v10 = *(unsigned __int16 *)(ArgOperandWithAttribute + 18);
    switch(v10)
    {
      case '"':
LABEL_14:
        if ((*(_BYTE *)(ArgOperandWithAttribute + 17) & 2) == 0)
          goto LABEL_35;
        v11 = *(_DWORD *)(ArgOperandWithAttribute + 20);
        if ((v11 & 0x40000000) == 0)
          goto LABEL_20;
LABEL_3:
        ArgOperandWithAttribute = **(_QWORD **)(ArgOperandWithAttribute - 8);
        v6 = v20;
        if (v20 != v19)
          goto LABEL_4;
LABEL_25:
        v14 = HIDWORD(v21);
        if (HIDWORD(v21))
        {
          v15 = 0;
          v16 = 8 * HIDWORD(v21);
          v17 = v6;
          do
          {
            if (*v17 == ArgOperandWithAttribute)
              return ArgOperandWithAttribute;
            if (*v17 == -2)
              v15 = v17;
            ++v17;
            v16 -= 8;
          }
          while (v16);
          if (!v15)
            goto LABEL_33;
          *v15 = ArgOperandWithAttribute;
          --v22;
        }
        else
        {
LABEL_33:
          if (HIDWORD(v21) >= v21)
            goto LABEL_4;
          ++HIDWORD(v21);
          v6[v14] = ArgOperandWithAttribute;
        }
        break;
      case '1':
LABEL_17:
        v12 = *(_DWORD *)(ArgOperandWithAttribute + 20);
        if ((v12 & 0x40000000) != 0)
          v13 = *(uint64_t **)(ArgOperandWithAttribute - 8);
        else
          v13 = (uint64_t *)(ArgOperandWithAttribute - 32 * (v12 & 0x7FFFFFF));
        ArgOperandWithAttribute = *v13;
        v7 = *v13;
        if (*(_BYTE *)(*(_QWORD *)*v13 + 8) != 15)
          goto LABEL_35;
LABEL_24:
        v6 = v20;
        if (v20 == v19)
          goto LABEL_25;
        goto LABEL_4;
      case '2':
LABEL_19:
        v11 = *(_DWORD *)(ArgOperandWithAttribute + 20);
        if ((v11 & 0x40000000) != 0)
          goto LABEL_3;
LABEL_20:
        ArgOperandWithAttribute = *(_QWORD *)(ArgOperandWithAttribute - 32 * (v11 & 0x7FFFFFF));
        v6 = v20;
        if (v20 == v19)
          goto LABEL_25;
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v19, (const void *)ArgOperandWithAttribute);
        v7 = ArgOperandWithAttribute;
        if (!v8)
          goto LABEL_35;
        break;
      default:
        goto LABEL_35;
    }
  }
LABEL_35:
  if (v20 != v19)
    free(v20);
  return v7;
}

_QWORD *llvm::ConstantInt::getLimitedValue(llvm::ConstantInt *this, unint64_t a2)
{
  _QWORD **v3;
  unsigned int v4;
  _QWORD *v5;

  v3 = (_QWORD **)((char *)this + 24);
  v4 = *((_DWORD *)this + 8);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantInt *)((char *)this + 24)) > 0x40)
      return (_QWORD *)a2;
    v5 = (_QWORD *)**v3;
    if ((unint64_t)v5 > a2)
      return (_QWORD *)a2;
  }
  else
  {
    v5 = *v3;
    if ((unint64_t)*v3 > a2)
      return (_QWORD *)a2;
  }
  return v5;
}

void llvm::Value::getPointerAlignment(unsigned __int8 **this, const llvm::DataLayout *a2)
{
  unsigned int v4;
  uint64_t ParamStructRetType;
  llvm::Type *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v11;
  int v12;
  llvm::ConstantExpr *v16;
  llvm::Type **v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MetadataImpl;
  unint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v26;
  uint64_t v27;

  v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0x14)
  {
    if (v4 == 21)
    {
      if ((unsigned __int16)llvm::Argument::getParamAlign((llvm::Argument *)this) <= 0xFFu
        && llvm::Argument::hasStructRetAttr((llvm::Argument *)this))
      {
        if ((ParamStructRetType = llvm::Argument::getParamStructRetType((llvm::Argument *)this),
              v6 = (llvm::Type *)ParamStructRetType,
              v7 = *(unsigned __int8 *)(ParamStructRetType + 8),
              v7 == 13)
          || v7 < 4
          || v7 == 5
          || (v24 = v7 & 0xFE, v24 == 10)
          || (v7 & 0xFFFFFFFD) == 4
          || v7 == 15
          || (v24 == 16 || v24 == 18 || v7 == 21)
          && llvm::Type::isSizedDerivedType(ParamStructRetType, 0))
        {
          llvm::DataLayout::getABITypeAlign(a2, v6);
        }
      }
      return;
    }
    if (v4 == 59)
      return;
  }
  else
  {
    if (v4 - 2 < 2)
    {
      if (((*((_DWORD *)this + 8) >> 17) & 0x3F) != 0 || v4 != 3)
        return;
      v8 = this[3];
      v9 = v8[8];
      v11 = v9 == 13 || v9 < 4 || v9 == 5;
      v12 = v9 & 0xFE;
      if (v11 || v12 == 10 || (v9 & 0xFFFFFFFD) == 4 || v9 == 15)
      {
        if (((_DWORD)this[4] & 0xF) == 1)
        {
LABEL_43:
          llvm::DataLayout::getABITypeAlign(a2, (llvm::Type *)v8);
          return;
        }
      }
      else
      {
        v26 = v12 == 16 || v12 == 18 || v9 == 21;
        if (!v26 || !llvm::Type::isSizedDerivedType((uint64_t)this[3], 0))
          return;
        if (((_DWORD)this[4] & 0xF) == 1)
          goto LABEL_43;
      }
      if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)this)
        || ((_DWORD)this[4] & 0xFu) <= 0xA && ((1 << ((_DWORD)this[4] & 0xF)) & 0x63C) != 0)
      {
        goto LABEL_43;
      }
      llvm::DataLayout::getPreferredAlign(a2, (const llvm::GlobalVariable *)this);
      return;
    }
    if (!*((_BYTE *)this + 16))
      return;
  }
  if (v4 >= 0x1C)
  {
    if (*((unsigned __int8 *)this + 16) > 0x3Bu)
    {
      if (v4 == 60)
      {
        if ((*((_BYTE *)this + 23) & 0x20) != 0)
        {
          MetadataImpl = llvm::Value::getMetadataImpl((llvm::Value *)this, 17);
          if (MetadataImpl)
          {
            v22 = *(_QWORD *)(MetadataImpl - 16);
            if ((v22 & 2) != 0)
              v23 = *(_QWORD *)(MetadataImpl - 32);
            else
              v23 = MetadataImpl - 16 - 8 * ((v22 >> 2) & 0xF);
            llvm::ConstantInt::getLimitedValue(*(llvm::ConstantInt **)(*(_QWORD *)v23 + 128), 0xFFFFFFFFFFFFFFFFLL);
          }
        }
        return;
      }
      if (v4 != 84)
        return;
    }
    else if (v4 != 33 && v4 != 39)
    {
      return;
    }
    if ((unsigned __int16)llvm::AttributeList::getRetAlignment((llvm::AttributeList *)(this + 9)) < 0x100u)
    {
      v20 = (uint64_t)*(this - 4);
      if (v20)
      {
        if (*(_BYTE *)(v20 + 16)
          || *(unsigned __int8 **)(v20 + 24) != this[10]
          || (v27 = *(_QWORD *)(v20 + 112),
              (unsigned __int16)llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v27) <= 0xFFu)
          && (v20 = (uint64_t)*(this - 4)) != 0)
        {
          if (!*(_BYTE *)(v20 + 16) && *(unsigned __int8 **)(v20 + 24) == this[10])
          {
            v27 = *(_QWORD *)(v20 + 112);
            llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v27);
          }
        }
      }
    }
    return;
  }
  if (v4 <= 0x14)
  {
    v16 = llvm::Value::stripPointerCasts((llvm::Value *)this);
    llvm::DataLayout::getIntPtrType(a2, (llvm::Type *)*this);
    llvm::ConstantExpr::getPtrToInt(v16, v17, (llvm::Type *)1, v18);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 16) == 16 && *(_DWORD *)(v19 + 32) > 0x40u)
        llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v19 + 24));
    }
  }
}

unint64_t *llvm::ValueHandleBase::AddToExistingUseList(unint64_t *result, unint64_t a2)
{
  unint64_t *v2;

  result[1] = *(_QWORD *)a2;
  *(_QWORD *)a2 = result;
  *result = *result & 7 | a2;
  v2 = (unint64_t *)result[1];
  if (v2)
    *v2 = *v2 & 7 | (unint64_t)(result + 1);
  return result;
}

unint64_t *llvm::ValueHandleBase::AddToUseList(unint64_t *this)
{
  unint64_t *v1;
  uint64_t ***v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t ****v9;
  uint64_t ***v10;
  uint64_t ****v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t ****v17;
  uint64_t ***v18;
  uint64_t ****v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t ***v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i;
  uint64_t ***v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t ***v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t ***v47;
  uint64_t ****v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t ****v52;
  int v53;
  BOOL v54;
  unsigned int v55;

  v1 = this;
  v2 = (uint64_t ***)this[2];
  v3 = ***v2;
  v4 = (_QWORD *)(v3 + 2456);
  v5 = *(_QWORD *)(v3 + 2456);
  v6 = *(_DWORD *)(v3 + 2472);
  if ((*((_BYTE *)v2 + 17) & 1) != 0)
  {
    if (!v6)
      goto LABEL_63;
    v15 = v6 - 1;
    v16 = (v6 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    v17 = (uint64_t ****)(v5 + 16 * v16);
    v18 = *v17;
    if (v2 == *v17)
      goto LABEL_44;
    v19 = 0;
    v20 = 1;
    while (v18 != (uint64_t ***)-4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == (uint64_t ***)-8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (uint64_t ****)(v5 + 16 * (v22 & v15));
      v18 = *v17;
      if (v2 == *v17)
        goto LABEL_44;
    }
    if (v19)
      v17 = v19;
    v43 = *(_DWORD *)(v3 + 2464);
    if (4 * v43 + 4 < 3 * v6)
    {
      if (v6 + ~v43 - *(_DWORD *)(v3 + 2468) > v6 >> 3)
        goto LABEL_41;
    }
    else
    {
LABEL_63:
      v6 *= 2;
    }
    this = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v3 + 2456, v6);
    v44 = *(_QWORD *)(v3 + 2456);
    v45 = *(_DWORD *)(v3 + 2472) - 1;
    v46 = v45 & ((v2 >> 4) ^ (v2 >> 9));
    v17 = (uint64_t ****)(v44 + 16 * v46);
    v47 = *v17;
    if (v2 == *v17)
    {
LABEL_65:
      ++*(_DWORD *)(v3 + 2464);
      if (v2 == (uint64_t ***)-4096)
        goto LABEL_43;
      goto LABEL_42;
    }
    v52 = 0;
    v53 = 1;
    while (v47 != (uint64_t ***)-4096)
    {
      if (v52)
        v54 = 0;
      else
        v54 = v47 == (uint64_t ***)-8192;
      if (v54)
        v52 = v17;
      v55 = v46 + v53++;
      v46 = v55 & v45;
      v17 = (uint64_t ****)(v44 + 16 * (v55 & v45));
      v47 = *v17;
      if (v2 == *v17)
        goto LABEL_65;
    }
    if (v52)
      v17 = v52;
LABEL_41:
    v31 = *v17;
    ++*(_DWORD *)(v3 + 2464);
    if (v31 == (uint64_t ***)-4096)
    {
LABEL_43:
      *v17 = v2;
      v17[1] = 0;
LABEL_44:
      v33 = (unint64_t)v17[1];
      v32 = (unint64_t)(v17 + 1);
      v1[1] = v33;
      *(_QWORD *)v32 = v1;
      *v1 = *v1 & 7 | v32;
      v34 = (unint64_t *)v1[1];
      if (v34)
        *v34 = *v34 & 7 | (unint64_t)(v1 + 1);
      return this;
    }
LABEL_42:
    --*(_DWORD *)(v3 + 2468);
    goto LABEL_43;
  }
  if (!v6)
    goto LABEL_56;
  v7 = v6 - 1;
  v8 = (v6 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  v9 = (uint64_t ****)(v5 + 16 * v8);
  v10 = *v9;
  if (v2 == *v9)
    goto LABEL_29;
  v11 = 0;
  v12 = 1;
  while (v10 != (uint64_t ***)-4096)
  {
    if (v11)
      v13 = 0;
    else
      v13 = v10 == (uint64_t ***)-8192;
    if (v13)
      v11 = v9;
    v14 = v8 + v12++;
    v8 = v14 & v7;
    v9 = (uint64_t ****)(v5 + 16 * (v14 & v7));
    v10 = *v9;
    if (v2 == *v9)
      goto LABEL_29;
  }
  if (v11)
    v9 = v11;
  v38 = *(_DWORD *)(v3 + 2464);
  if (4 * v38 + 4 < 3 * v6)
  {
    if (v6 + ~v38 - *(_DWORD *)(v3 + 2468) > v6 >> 3)
      goto LABEL_26;
  }
  else
  {
LABEL_56:
    v6 *= 2;
  }
  this = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v3 + 2456, v6);
  v39 = *(_QWORD *)(v3 + 2456);
  v40 = *(_DWORD *)(v3 + 2472) - 1;
  v41 = v40 & ((v2 >> 4) ^ (v2 >> 9));
  v9 = (uint64_t ****)(v39 + 16 * v41);
  v42 = *v9;
  if (v2 == *v9)
  {
LABEL_58:
    ++*(_DWORD *)(v3 + 2464);
    if (v2 == (uint64_t ***)-4096)
      goto LABEL_28;
    goto LABEL_27;
  }
  v48 = 0;
  v49 = 1;
  while (v42 != (uint64_t ***)-4096)
  {
    if (v48)
      v50 = 0;
    else
      v50 = v42 == (uint64_t ***)-8192;
    if (v50)
      v48 = v9;
    v51 = v41 + v49++;
    v41 = v51 & v40;
    v9 = (uint64_t ****)(v39 + 16 * (v51 & v40));
    v42 = *v9;
    if (v2 == *v9)
      goto LABEL_58;
  }
  if (v48)
    v9 = v48;
LABEL_26:
  v23 = *v9;
  ++*(_DWORD *)(v3 + 2464);
  if (v23 != (uint64_t ***)-4096)
LABEL_27:
    --*(_DWORD *)(v3 + 2468);
LABEL_28:
  *v9 = v2;
  v9[1] = 0;
LABEL_29:
  v25 = (unint64_t)v9[1];
  v24 = (unint64_t)(v9 + 1);
  v1[1] = v25;
  *(_QWORD *)v24 = v1;
  *v1 = *v1 & 7 | v24;
  v26 = (unint64_t *)v1[1];
  if (v26)
    *v26 = *v26 & 7 | (unint64_t)(v1 + 1);
  *(_BYTE *)(v1[2] + 17) |= 1u;
  v27 = (_QWORD *)*v4;
  if ((*v4 > v5 || (unint64_t)&v27[2 * *(unsigned int *)(v3 + 2472)] <= v5) && *(_DWORD *)(v3 + 2464) >= 2u)
  {
    v28 = *(unsigned int *)(v3 + 2472);
    if ((_DWORD)v28)
    {
      v29 = 16 * v28;
      for (i = (_QWORD *)*v4; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
      {
        v29 -= 16;
        if (!v29)
          return this;
      }
    }
    else
    {
      i = (_QWORD *)*v4;
    }
    v35 = &v27[2 * v28];
    while (i != v35)
    {
      v37 = (uint64_t *)i[1];
      v36 = (unint64_t)(i + 1);
      *v37 = *v37 & 7 | v36;
      i = (_QWORD *)(v36 + 8);
      if (i == v35)
        break;
      while ((*i | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        i += 2;
        if (i == v35)
          return this;
      }
    }
  }
  return this;
}

_QWORD *llvm::ValueHandleBase::RemoveFromUseList(_QWORD *this)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  int32x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;

  v1 = *this & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v1 = this[1];
  v2 = (unint64_t *)this[1];
  if (v2)
  {
    *v2 = *v2 & 7 | v1;
  }
  else
  {
    v3 = this[2];
    v4 = ***(int32x2_t ****)v3;
    v5 = (unint64_t)v4[307];
    if (v5 <= v1)
    {
      v6 = v4[309].u32[0];
      if (v5 + 16 * v6 > v1)
      {
        v7 = v6 - 1;
        LODWORD(v8) = v7 & ((v3 >> 4) ^ (v3 >> 9));
        v9 = (uint64_t *)(v5 + 16 * v8);
        v10 = *v9;
        if (v3 == *v9)
        {
LABEL_6:
          *v9 = -8192;
          v4[308] = vadd_s32(v4[308], (int32x2_t)0x1FFFFFFFFLL);
          v3 = this[2];
        }
        else
        {
          v11 = 1;
          while (v10 != -4096)
          {
            v12 = v8 + v11++;
            v8 = v12 & v7;
            v10 = *(_QWORD *)(v5 + 16 * v8);
            if (v3 == v10)
            {
              v9 = (uint64_t *)(v5 + 16 * v8);
              goto LABEL_6;
            }
          }
        }
        *(_BYTE *)(v3 + 17) &= ~1u;
      }
    }
  }
  return this;
}

unint64_t llvm::ValueHandleBase::operator=(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v16;
  int v17;

  v3 = a1[2];
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
    {
      v5 = *a1 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v5 = a1[1];
      v6 = (unint64_t *)a1[1];
      if (v6)
      {
        *v6 = *v6 & 7 | v5;
      }
      else
      {
        v7 = a1[2];
        v8 = ***(int32x2_t ****)v7;
        v9 = (unint64_t)v8[307];
        if (v9 <= v5)
        {
          v10 = v8[309].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            v13 = (uint64_t *)(v9 + 16 * v12);
            v14 = *v13;
            if (v7 == *v13)
            {
LABEL_12:
              *v13 = -8192;
              v8[308] = vadd_s32(v8[308], (int32x2_t)0x1FFFFFFFFLL);
              v7 = a1[2];
            }
            else
            {
              v16 = 1;
              while (v14 != -4096)
              {
                v17 = v12 + v16++;
                v12 = v17 & v11;
                v14 = *(_QWORD *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_12;
                }
              }
            }
            *(_BYTE *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    a1[2] = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(a1);
  }
  return a2;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [39],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, unsigned __int8 **a4, _OWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;
  const unsigned __int8 *v14;
  int v15;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23658;
  *(_QWORD *)(a1 + 152) = &unk_1E0E23BC8;
  *(_QWORD *)(a1 + 160) = off_1E0E4FBE0;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v14 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v14);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v15 = **a4;
  *(_DWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::ValueSymbolTable::~ValueSymbolTable(llvm::ValueSymbolTable *this)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;

  if (*((_DWORD *)this + 3))
  {
    v2 = *((unsigned int *)this + 2);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(llvm **)(*(_QWORD *)this + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
          llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 17));
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)this);
}

uint64_t llvm::ValueSymbolTable::makeUniqueName(uint64_t a1, uint64_t a2, int8x16_t **a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int8x16_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  void *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20[4];
  __int16 v21;
  void *__p;
  char v23;
  int v24;
  void (**v25)(llvm::raw_svector_ostream *__hidden);
  int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  uint64_t v31;
  int v32;
  int8x16_t **v33;

  v6 = (unint64_t)a3[1];
  v7 = v6;
  v17 = a3 + 3;
  v8 = v6 > v6;
  if (v6 == v6)
    goto LABEL_8;
LABEL_2:
  if (!v8)
  {
    if ((unint64_t)a3[2] < v7)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, v17, v7, 1);
      v6 = (unint64_t)a3[1];
    }
    if (v7 != v6)
      bzero(&(*a3)->i8[v6], v7 - v6);
  }
  a3[1] = (int8x16_t *)v7;
  while (1)
  {
LABEL_8:
    v26 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    v25 = off_1E0E22B88;
    v33 = a3;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v25, 0, 0, 0);
    if (a2 && *(unsigned __int8 *)(a2 + 16) <= 3u)
    {
      v9 = *(_QWORD *)(a2 + 40);
      if (v9)
      {
        v21 = 260;
        v20[0] = v9 + 208;
        llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v20);
        v10 = v24;
        if (v23 < 0)
        {
          operator delete(__p);
          if ((v10 - 41) < 2)
            goto LABEL_18;
        }
        else if ((v24 - 41) < 2)
        {
          goto LABEL_18;
        }
      }
      if (v28 == v29)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v25, ".", 1uLL);
      else
        *v29++ = 46;
    }
LABEL_18:
    v11 = (*(_DWORD *)(a1 + 28) + 1);
    *(_DWORD *)(a1 + 28) = v11;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v25, v11);
    v12 = *a3;
    v18 = (const unsigned __int8 *)a3[1];
    v19 = a2;
    v13 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a1, v12, v18, &v19);
    if (v14)
      break;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v25);
    v6 = (unint64_t)a3[1];
    v8 = v6 > v7;
    if (v6 != v7)
      goto LABEL_2;
  }
  v15 = *v13;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v25);
  return v15;
}

uint64_t llvm::ValueSymbolTable::reinsertValue(llvm::ValueSymbolTable *this, llvm::Value *a2)
{
  uint64_t ValueName;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const char *Name;
  const char *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  llvm *v15;
  void *v16;
  __int128 v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x1E0C80C00];
  ValueName = llvm::Value::getValueName(a2);
  v5 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)this, (int8x16_t *)(ValueName + 16), *(const unsigned __int8 **)ValueName);
  v6 = *(_QWORD *)this;
  v7 = *(_QWORD *)(*(_QWORD *)this + 8 * v5);
  if (v7)
  {
    if (v7 == -8)
    {
      --*((_DWORD *)this + 4);
      goto LABEL_4;
    }
    Name = llvm::Value::getName(a2);
    v10 = llvm::Value::getName(a2);
    v12 = &v10[v11];
    v16 = v18;
    v17 = xmmword_181236410;
    v13 = &v10[v11] - Name;
    if (v13 < 0x101)
    {
      v14 = 0;
      if (v12 == Name)
        goto LABEL_10;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v16, v18, v13, 1);
      v14 = v17;
      if (v12 == Name)
      {
LABEL_10:
        *(_QWORD *)&v17 = v14 + v13;
        v15 = (llvm *)llvm::Value::getValueName(a2);
        llvm::deallocate_buffer(v15, (void *)(*(_QWORD *)v15 + 17));
      }
    }
    memcpy((char *)v16 + v14, Name, v13);
    v14 = v17;
    goto LABEL_10;
  }
LABEL_4:
  *(_QWORD *)(v6 + 8 * v5) = ValueName;
  ++*((_DWORD *)this + 3);
  return llvm::StringMapImpl::RehashTable(this, 0);
}

uint64_t llvm::ValueSymbolTable::createValueName(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  const unsigned __int8 *v5;
  unint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t UniqueName;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _QWORD v17[33];

  v5 = a3;
  v17[32] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a1 + 24);
  if ((v8 & 0x80000000) == 0 && (unint64_t)a3 > v8)
  {
    v8 = v8 <= 1 ? 1 : v8;
    if ((unint64_t)a3 >= v8)
      v5 = (const unsigned __int8 *)v8;
  }
  v14 = a4;
  v9 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a1, a2, v5, &v14);
  if (v10)
    return *v9;
  v15 = v17;
  v16 = xmmword_181236410;
  if ((unint64_t)v5 < 0x101)
  {
    v12 = 0;
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, v17, (unint64_t)v5, 1);
    v12 = v16;
  }
  memcpy((char *)v15 + v12, a2, (size_t)v5);
  v12 = v16;
LABEL_14:
  *(_QWORD *)&v16 = &v5[v12];
  UniqueName = llvm::ValueSymbolTable::makeUniqueName(a1, a4, (int8x16_t **)&v15);
  if (v15 != v17)
    free(v15);
  return UniqueName;
}

_anonymous_namespace_::Verifier *`anonymous namespace'::Verifier::Verifier(_anonymous_namespace_::Verifier *this, llvm::raw_ostream *a2, char a3, const llvm::Module *a4)
{
  char *v8;
  __int16 v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a4;
  llvm::ModuleSlotTracker::ModuleSlotTracker((uint64_t)this + 16, (uint64_t)a4, 1);
  v9 = 260;
  v8 = (char *)a4 + 208;
  llvm::Triple::Triple((_anonymous_namespace_::Verifier *)((char *)this + 128), (const llvm::Twine *)&v8);
  *((_QWORD *)this + 22) = (char *)a4 + 256;
  *((_QWORD *)this + 23) = *(_QWORD *)a4;
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = (char *)this + 216;
  *((_QWORD *)this + 26) = 0x100000000;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 34) = (char *)this + 304;
  *((_QWORD *)this + 35) = (char *)this + 304;
  *((_QWORD *)this + 36) = 16;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 54) = (char *)this + 464;
  *((_QWORD *)this + 55) = (char *)this + 464;
  *((_QWORD *)this + 56) = 32;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 184) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_QWORD *)this + 93) = (char *)this + 776;
  *((_QWORD *)this + 94) = (char *)this + 776;
  *((_QWORD *)this + 95) = 2;
  *((_DWORD *)this + 192) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_WORD *)this + 400) = 0;
  *((_DWORD *)this + 201) = 0x8000;
  *((_DWORD *)this + 206) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_DWORD *)this + 212) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_QWORD *)this + 110) = (char *)this + 896;
  *((_QWORD *)this + 113) = 0;
  *((_DWORD *)this + 228) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 115) = (char *)this + 952;
  *((_QWORD *)this + 116) = (char *)this + 952;
  *((_QWORD *)this + 117) = 32;
  *((_DWORD *)this + 236) = 0;
  *((_QWORD *)this + 151) = (char *)this + 1224;
  *((_QWORD *)this + 152) = 0x400000000;
  *((_QWORD *)this + 157) = (char *)this + 1288;
  *((_QWORD *)this + 158) = (char *)this + 1288;
  *((_QWORD *)this + 159) = 32;
  *((_DWORD *)this + 320) = 0;
  *((_QWORD *)this + 193) = (char *)this + 1576;
  *((_QWORD *)this + 194) = (char *)this + 1576;
  *((_QWORD *)this + 195) = 32;
  *((_DWORD *)this + 392) = 0;
  *((_QWORD *)this + 229) = (char *)this + 1848;
  *((_QWORD *)this + 230) = 0x1000000000;
  *((_QWORD *)this + 247) = this;
  *((_QWORD *)this + 249) = 0;
  *((_QWORD *)this + 248) = 0;
  *((_DWORD *)this + 500) = 0;
  *((_DWORD *)this + 506) = 0;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 252) = 0;
  *((_QWORD *)this + 258) = 0;
  *((_DWORD *)this + 526) = 0;
  *((_QWORD *)this + 261) = 0;
  *((_QWORD *)this + 262) = 0;
  *((_DWORD *)this + 532) = 0;
  *((_QWORD *)this + 264) = 0;
  *((_QWORD *)this + 265) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 267) = 0;
  *((_QWORD *)this + 268) = 0;
  *((_DWORD *)this + 542) = 2;
  *((_DWORD *)this + 548) = 0;
  *((_QWORD *)this + 272) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_BYTE *)this + 2200) = 0;
  *((_QWORD *)this + 276) = (char *)this + 2224;
  *((_QWORD *)this + 277) = 0x400000000;
  *((_BYTE *)this + 194) = a3;
  return this;
}

BOOL `anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this, const llvm::Function *a2)
{
  char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  char *v32;
  char *v33;
  llvm::Instruction *v34;
  uint64_t k;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 **v61;
  llvm::raw_ostream **v62;
  unsigned __int8 *v63;
  unsigned __int8 **v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _BYTE *v67;
  int v68;
  void *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  uint64_t v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  const void *v84;
  const void **BucketFor;
  unsigned int v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *FirstNonPHI;
  uint64_t v93;
  const void **v94;
  llvm::User **v95;
  unsigned int v96;
  unsigned int v97;
  __int16 v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  int v109;
  int v110;
  uint64_t v111;
  char **v112;
  uint64_t v113;
  char **v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  char **v118;
  uint64_t v119;
  char **v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  char **v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char *v136;
  unint64_t v137;
  char **v138;
  __int16 v139;
  int v140;
  uint64_t v141;
  char **v142;
  int v143;
  BOOL v144;
  int v145;
  char **v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  char *v151;
  char **v152;
  int v153;
  BOOL v154;
  unsigned int v155;
  char *v156;
  llvm::raw_ostream *v157;
  llvm::raw_ostream **v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  _BOOL8 result;
  size_t v163;
  const char *Name;
  size_t v165;
  void *v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  void **v183;
  uint64_t v184;
  llvm::User *v185;
  BOOL v186;
  const llvm::Module **v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const llvm::Value **v194;
  const llvm::Value **v195;
  const llvm::Value **v196;
  const llvm::Value **v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  const llvm::Value **v203;
  uint64_t v204;
  uint64_t v205;
  const llvm::Value **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  const llvm::Value **v213;
  const llvm::Value **v214;
  const llvm::Value *v215;
  uint64_t v216;
  const llvm::Instruction **v217;
  llvm::raw_ostream *v218;
  _BYTE *v219;
  int v220;
  uint64_t v221;
  int v222;
  char *v223;
  __int16 v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  unsigned int v231;
  llvm::User *v232;
  int v233;
  int v235;
  llvm::User **v236;
  uint64_t v237;
  int v238;
  llvm::User *v239;
  unint64_t v240;
  _QWORD *v241;
  llvm::MDString **v242;
  llvm::User *v243;
  unint64_t v244;
  uint64_t *v245;
  llvm::MDString *v246;
  _QWORD *String;
  uint64_t v248;
  BOOL v249;
  uint64_t v251;
  _BYTE *v252;
  _QWORD *v256;
  _BYTE *v257;
  llvm::raw_ostream *v258;
  _BYTE *v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  char *v263;
  llvm::raw_ostream *v264;
  _BYTE *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  llvm::Value *PersonalityFn;
  llvm::Value *v270;
  llvm::User *v271;
  uint64_t v272;
  llvm::raw_ostream *v273;
  llvm::raw_ostream *v274;
  _BYTE *v275;
  const llvm::BasicBlock *v276;
  _QWORD **v277;
  uint64_t v278;
  int v279;
  _QWORD *v280;
  char *v281;
  llvm::raw_ostream *v282;
  _BYTE *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  BOOL v289;
  llvm::Constant *v291;
  uint64_t v292;
  unsigned __int8 **v293;
  llvm::Metadata **v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  llvm::User **v299;
  llvm::User **v300;
  int v301;
  unsigned __int8 *v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  unsigned __int8 **v307;
  unsigned __int8 *v308;
  unsigned __int8 **v309;
  int v310;
  BOOL v311;
  unsigned int v312;
  unsigned __int8 *v313;
  const llvm::Function *v314;
  BOOL v315;
  int v316;
  uint64_t v317;
  int v318;
  unsigned int v319;
  unsigned __int8 *v320;
  unsigned __int8 **v321;
  int v322;
  BOOL v323;
  unsigned int v324;
  unsigned __int8 *v325;
  int v326;
  uint64_t v327;
  _QWORD *v328;
  char *v329;
  uint64_t v330;
  _QWORD *v331;
  unsigned __int8 *Subprogram;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t MetadataImpl;
  uint64_t v339;
  unint64_t *v340;
  unint64_t j;
  const llvm::Module **v342;
  unint64_t v343;
  unint64_t *v344;
  char *v345;
  llvm::raw_ostream **v346;
  char *v347;
  char *v348;
  llvm::raw_ostream *v349;
  _BYTE *v350;
  llvm::raw_ostream *v351;
  _BYTE *v352;
  llvm::raw_ostream *v353;
  _BYTE *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  _anonymous_namespace_::Verifier *v358;
  uint64_t v359;
  llvm::raw_ostream *v360;
  llvm::User *v361;
  void *v362;
  unsigned __int8 *v363[4];
  __int16 v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  void **v368;
  _WORD v369[128];
  llvm::User *v370;
  uint64_t v371;
  _QWORD v372[2];
  __int16 v373;
  llvm::User **v374;
  uint64_t v375;
  _BYTE v376[12];
  _QWORD v377[10];

  v377[8] = *MEMORY[0x1E0C80C00];
  v4 = (char *)a2 + 72;
  if (*((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72))
  {
    *((_QWORD *)this + 32) = a2;
    llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>((uint64_t)this + 200);
  }
  for (i = *((_QWORD *)a2 + 10); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = i - 24;
    else
      v6 = 0;
    v7 = *(_QWORD *)(v6 + 48);
    if (v7 != v6 + 48)
    {
      v8 = v7 ? v7 - 24 : 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 < 0xB)
        continue;
    }
    v13 = *(llvm::raw_ostream **)this;
    if (!*(_QWORD *)this)
      return 0;
    v14 = (void *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0x18uLL)
    {
      qmemcpy(v14, "Basic Block in function '", 25);
      *((_QWORD *)v13 + 4) += 25;
    }
    else
    {
      v13 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "Basic Block in function '", 0x19uLL);
    }
    Name = llvm::Value::getName(a2);
    v165 = v163;
    v166 = (void *)*((_QWORD *)v13 + 4);
    if (v163 <= *((_QWORD *)v13 + 3) - (_QWORD)v166)
    {
      if (v163)
      {
        memcpy(v166, Name, v163);
        v166 = (void *)(*((_QWORD *)v13 + 4) + v165);
        *((_QWORD *)v13 + 4) = v166;
      }
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, Name, v163);
      v166 = (void *)*((_QWORD *)v13 + 4);
    }
    if (*((_QWORD *)v13 + 3) - (_QWORD)v166 > 0x1BuLL)
    {
      qmemcpy(v166, "' does not have terminator!\n", 28);
      *((_QWORD *)v13 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v13, "' does not have terminator!\n", 0x1CuLL);
    }
    llvm::Value::printAsOperand((Type **)v6, *(llvm::raw_ostream **)this, 1, (_anonymous_namespace_::TypePrinting **)this + 2);
    v167 = *(_QWORD *)this;
    v168 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v168)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "\n", 1uLL);
      return 0;
    }
    else
    {
      result = 0;
      *v168 = 10;
      ++*(_QWORD *)(v167 + 32);
    }
    return result;
  }
  v358 = this;
  v9 = (char *)this + 2032;
  v10 = *(_QWORD *)this;
  llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::clear((_DWORD *)this + 508);
  *((_QWORD *)this + 254) = v10;
  v365 = &unk_1E0E4F708;
  v367 = (uint64_t)&v358;
  v368 = &v365;
  std::__function::__value_func<void ()(mlir::OpPassManager &)>::swap[abi:nn180100](&v365, (_QWORD *)this + 255);
  v11 = v368;
  if (v368 == &v365)
  {
    v12 = 4;
    v11 = &v365;
  }
  else
  {
    if (!v368)
      goto LABEL_21;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_21:
  *((_QWORD *)this + 270) = a2;
  *((_BYTE *)this + 192) = 0;
  v15 = *((_QWORD *)a2 + 3);
  v363[0] = (unsigned __int8 *)v15;
  v16 = *((_DWORD *)a2 + 24);
  v17 = *((_QWORD *)this + 23);
  v356 = v4;
  if (v17 != mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(a2))
  {
    v18 = "Function context does not match Module context!";
LABEL_25:
    v365 = v18;
    v369[0] = 259;
    v374 = (llvm::User **)a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, (llvm::raw_ostream **)&v374);
    goto LABEL_26;
  }
  if ((*((_DWORD *)a2 + 8) & 0xF) == 0xA)
  {
    v18 = "Functions may not have common linkage";
    goto LABEL_25;
  }
  if (*(_DWORD *)(v15 + 12) - 1 == v16)
  {
    if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8) == 14)
    {
      v18 = "Functions cannot return aggregate values!";
      goto LABEL_25;
    }
    if (((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)a2 + 14, 1, 77) & 1) != 0
       || llvm::AttributeList::hasAttributeAtIndex((uint64_t *)a2 + 14, 2, 77))
      && *(_BYTE *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8) != 7)
    {
      v18 = "Invalid struct return type!";
      goto LABEL_25;
    }
    v362 = (void *)*((_QWORD *)a2 + 14);
    v220 = *(_DWORD *)(v15 + 12);
    v365 = v362;
    if (llvm::AttributeSet::getNumAttributes((llvm::AttributeSet *)&v365) > v220 + 1)
    {
      v18 = "Attribute after last parameter!";
      goto LABEL_25;
    }
    v222 = *((_DWORD *)a2 + 8);
    if (llvm::AttributeSet::hasAttribute(&v362, 4))
    {
      v223 = "Attribute 'builtin' can only be applied to a callsite.";
    }
    else if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v362, 74, 0))
    {
      v223 = "Attribute 'elementtype' can only be applied to a callsite.";
    }
    else
    {
      switch((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF)
      {
        case 8:
        case 9:
        case 0x47:
        case 0x48:
        case 0x4D:
          goto LABEL_429;
        case 0x4C:
        case 0x5B:
        case 0x68:
        case 0x69:
          if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8) == 7)
            goto LABEL_432;
          v223 = "Calling convention requires void return type";
          goto LABEL_436;
        case 0x53:
          if (!*((_QWORD *)a2 + 12) || (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, 1, 73) & 1) != 0)
            goto LABEL_442;
          v223 = "Calling convention parameter requires byval";
          goto LABEL_436;
        case 0x57:
        case 0x58:
        case 0x59:
        case 0x5A:
        case 0x5D:
LABEL_432:
          if ((llvm::AttributeList::hasAttributeAtIndex((uint64_t *)a2 + 14, 1, 77) & 1) != 0
            || llvm::AttributeList::hasAttributeAtIndex((uint64_t *)a2 + 14, 2, 77))
          {
            v223 = "Calling convention does not allow sret";
            goto LABEL_436;
          }
          v224 = *((_WORD *)a2 + 9);
          if ((v224 & 0x3FF0) == 0x4C0)
            goto LABEL_429;
          v225 = *(_DWORD *)(*((_QWORD *)this + 22) + 4);
          if ((v224 & 1) != 0)
          {
            llvm::Function::BuildLazyArguments(a2);
            v226 = *((_QWORD *)a2 + 11);
            if ((*((_WORD *)a2 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(a2);
            v227 = *((_QWORD *)a2 + 11);
          }
          else
          {
            v226 = *((_QWORD *)a2 + 11);
            v227 = v226;
          }
          v260 = v227 + 40 * *((_QWORD *)a2 + 12);
          v9 = (char *)this + 2032;
          if (v226 == v260)
            goto LABEL_429;
          v261 = 1;
          break;
        default:
          goto LABEL_442;
      }
      do
      {
        if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v261, 73))
        {
          v223 = "Calling convention disallows byval";
          goto LABEL_436;
        }
        if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v261, 76))
        {
          v223 = "Calling convention disallows preallocated";
          goto LABEL_436;
        }
        if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v261, 75))
        {
          v223 = "Calling convention disallows inalloca";
          goto LABEL_436;
        }
        if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v261, 72))
        {
          v262 = *(_DWORD *)(*(_QWORD *)v226 + 8);
          if ((v262 & 0xFE) == 0x12)
            v262 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v226 + 16) + 8);
          if (v225 == v262 >> 8)
          {
            v223 = "Calling convention disallows stack byref";
            goto LABEL_436;
          }
        }
        v226 += 40;
        ++v261;
      }
      while (v226 != v260);
LABEL_429:
      if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8) >= 0x100u)
      {
        v223 = "Calling convention does not support varargs or perfect forwarding!";
        goto LABEL_436;
      }
LABEL_442:
      if ((*((_WORD *)a2 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(a2);
        v228 = (_QWORD *)*((_QWORD *)a2 + 11);
        if ((*((_WORD *)a2 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a2);
        v229 = (_QWORD *)*((_QWORD *)a2 + 11);
      }
      else
      {
        v228 = (_QWORD *)*((_QWORD *)a2 + 11);
        v229 = v228;
      }
      v230 = &v229[5 * *((_QWORD *)a2 + 12)];
      if (v228 != v230)
      {
        v231 = 1;
        if ((v222 & 0x2000) != 0)
        {
          while (1)
          {
            v232 = *(llvm::User **)(*(_QWORD *)(v15 + 16) + 8 * v231);
            if ((llvm::User *)*v228 != v232)
              break;
            v233 = *(unsigned __int8 *)(*v228 + 8);
            if (v233 == 7 || v233 == 14)
            {
LABEL_516:
              v4 = v356;
              v365 = "Function arguments must have first-class types!";
              v369[0] = 259;
              v374 = (llvm::User **)v228;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, (llvm::raw_ostream **)&v374);
              goto LABEL_26;
            }
            if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v231, 66))
            v228 += 5;
            ++v231;
            if (v228 == v230)
              goto LABEL_463;
          }
        }
        else
        {
          while (2)
          {
            v232 = *(llvm::User **)(*(_QWORD *)(v15 + 16) + 8 * v231);
            if ((llvm::User *)*v228 == v232)
            {
              switch(*(_BYTE *)(*v228 + 8))
              {
                case 7:
                case 0xE:
                  goto LABEL_516;
                case 9:
                  v263 = "Function takes metadata but isn't an intrinsic";
                  break;
                case 0xB:
                  v263 = "Function takes x86_amx but isn't an intrinsic";
                  break;
                case 0xC:
                  v263 = "Function takes token but isn't an intrinsic";
                  break;
                default:
                  if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v362, v231, 66))
                  v228 += 5;
                  ++v231;
                  if (v228 != v230)
                    continue;
                  goto LABEL_463;
              }
              v365 = v263;
              v369[0] = 259;
              v374 = (llvm::User **)v228;
              v370 = a2;
              v264 = *(llvm::raw_ostream **)this;
              if (*(_QWORD *)this)
              {
                llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                v265 = (_BYTE *)*((_QWORD *)v264 + 4);
                if ((unint64_t)v265 >= *((_QWORD *)v264 + 3))
                {
                  llvm::raw_ostream::write(v264, 10);
                }
                else
                {
                  *((_QWORD *)v264 + 4) = v265 + 1;
                  *v265 = 10;
                }
                v267 = *(_QWORD *)this;
                *((_BYTE *)this + 192) = 1;
                if (v267)
                  llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, (unsigned __int8 **)&v374, &v370);
                goto LABEL_548;
              }
LABEL_541:
              *((_BYTE *)this + 192) = 1;
LABEL_548:
              v9 = (char *)this + 2032;
              v4 = v356;
              goto LABEL_26;
            }
            break;
          }
        }
        v365 = "Argument value does not match function argument type!";
        v369[0] = 259;
        v374 = (llvm::User **)v228;
        v370 = v232;
        v258 = *(llvm::raw_ostream **)this;
        if (*(_QWORD *)this)
        {
          llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
          v259 = (_BYTE *)*((_QWORD *)v258 + 4);
          if ((unint64_t)v259 >= *((_QWORD *)v258 + 3))
          {
            llvm::raw_ostream::write(v258, 10);
          }
          else
          {
            *((_QWORD *)v258 + 4) = v259 + 1;
            *v259 = 10;
          }
          v266 = *(_QWORD *)this;
          *((_BYTE *)this + 192) = 1;
          if (v266)
            llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::FunctionType *>((llvm::raw_ostream **)this, (llvm::raw_ostream **)&v374, (Type **)&v370);
          goto LABEL_548;
        }
        goto LABEL_541;
      }
LABEL_463:
      if ((v222 & 0x2000) != 0)
        goto LABEL_467;
      v235 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8);
      if (v235 == 11)
      {
        v223 = "Function returns a x86_amx but isn't an intrinsic";
        goto LABEL_436;
      }
      if (v235 != 12)
      {
LABEL_467:
        v374 = (llvm::User **)v376;
        v375 = 0x400000000;
        llvm::Value::getAllMetadata(a2, (uint64_t)&v374);
        if (!(_DWORD)v375)
          goto LABEL_562;
        v236 = v374 + 1;
        v237 = 16 * v375;
        while (1)
        {
          v238 = *((_DWORD *)v236 - 2);
          if (v238 == 36)
          {
            v243 = *v236;
            v370 = v243;
            v244 = *((_QWORD *)v243 - 2);
            if ((v244 & 2) != 0)
            {
              if (*((_DWORD *)v243 - 6) != 1)
              {
LABEL_554:
                v268 = "!kcfi_type must have exactly one operand";
                goto LABEL_561;
              }
              v245 = (uint64_t *)*((_QWORD *)v243 - 4);
            }
            else
            {
              if ((*((_QWORD *)v243 - 2) & 0x3C0) != 0x40)
                goto LABEL_554;
              v245 = (uint64_t *)((char *)v243 - 8 * ((v244 >> 2) & 0xF) - 16);
            }
            v251 = *v245;
            if (!v251)
            {
              v268 = "!kcfi_type operand must not be null";
              goto LABEL_561;
            }
            if (*(_BYTE *)v251 != 1)
            {
              v268 = "expected a constant operand for !kcfi_type";
              goto LABEL_561;
            }
            v252 = *(_BYTE **)(v251 + 128);
            if (v252[16] != 16)
            {
              v268 = "expected a constant integer operand for !kcfi_type";
              goto LABEL_561;
            }
            if ((*(_DWORD *)(*(_QWORD *)v252 + 8) & 0xFFFFFF00) != 0x2000)
            {
              v268 = "expected a 32-bit integer constant operand for !kcfi_type";
              goto LABEL_561;
            }
          }
          else if (v238 == 2)
          {
            v239 = *v236;
            v370 = v239;
            v241 = (_QWORD *)((char *)v239 - 16);
            v240 = *((_QWORD *)v239 - 2);
            if ((v240 & 2) != 0)
            {
              if (*((_DWORD *)v239 - 6) <= 1u)
              {
LABEL_553:
                v268 = "!prof annotations should have no less than 2 operands";
                goto LABEL_561;
              }
              v242 = (llvm::MDString **)*((_QWORD *)v239 - 4);
            }
            else
            {
              if ((v240 & 0x380) == 0)
                goto LABEL_553;
              v242 = (llvm::MDString **)&v241[-((v240 >> 2) & 0xF)];
            }
            v246 = *v242;
            if (!*v242)
            {
              v268 = "first operand should not be null";
              goto LABEL_561;
            }
            if (*(_BYTE *)v246)
            {
              v268 = "expected string with name of the !prof annotation";
              goto LABEL_561;
            }
            String = (_QWORD *)llvm::MDString::getString(v246);
            if (v248 == 30)
            {
              if (*String != 0x69746568746E7973
                || String[1] != 0x6974636E75665F63
                || String[2] != 0x7972746E655F6E6FLL
                || *(_QWORD *)((char *)String + 22) != 0x746E756F635F7972)
              {
LABEL_552:
                v268 = "first operand should be 'function_entry_count' or 'synthetic_function_entry_count'";
                goto LABEL_561;
              }
            }
            else
            {
              if (v248 != 20)
                goto LABEL_552;
              v249 = *String == 0x6E6F6974636E7566 && String[1] == 0x635F7972746E655FLL;
              if (!v249 || *((_DWORD *)String + 4) != 1953396079)
                goto LABEL_552;
            }
            if ((*v241 & 2) != 0)
              v256 = (_QWORD *)*((_QWORD *)v239 - 4);
            else
              v256 = &v241[-((*v241 >> 2) & 0xFLL)];
            v257 = (_BYTE *)v256[1];
            if (!v257)
            {
              v268 = "second operand should not be null";
LABEL_561:
              v365 = v268;
              v369[0] = 259;
              llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&v365, (const llvm::Module ***)&v370);
LABEL_562:
              if ((*((_WORD *)a2 + 9) & 8) != 0)
              {
                PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(a2);
                v270 = llvm::Value::stripPointerCasts(PersonalityFn);
                v271 = *((_BYTE *)v270 + 16) ? 0 : v270;
                v370 = v271;
                if (v271)
                {
                  v272 = *((_QWORD *)v271 + 5);
                  v273 = (llvm::raw_ostream *)*((_QWORD *)a2 + 5);
                  if ((llvm::raw_ostream *)v272 != v273)
                  {
                    v365 = "Referencing personality function in another module!";
                    v369[0] = 259;
                    v360 = v273;
                    v361 = a2;
                    v359 = v272;
                    v274 = *(llvm::raw_ostream **)this;
                    if (*(_QWORD *)this)
                    {
                      llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                      v275 = (_BYTE *)*((_QWORD *)v274 + 4);
                      if ((unint64_t)v275 >= *((_QWORD *)v274 + 3))
                      {
                        llvm::raw_ostream::write(v274, 10);
                      }
                      else
                      {
                        *((_QWORD *)v274 + 4) = v275 + 1;
                        *v275 = 10;
                      }
                      v295 = *(_QWORD *)this;
                      *((_BYTE *)this + 192) = 1;
                      if (v295)
                        llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>((_anonymous_namespace_::TypePrinting **)this, (unsigned __int8 **)&v361, (uint64_t *)&v360, (unsigned __int8 **)&v370, &v359);
                      goto LABEL_722;
                    }
                    goto LABEL_721;
                  }
                }
              }
              llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear((_DWORD *)this + 224);
              if ((*((_BYTE *)a2 + 35) & 1) != 0)
              {
                if ((_DWORD)v375)
                {
                  v365 = "unmaterialized function cannot have metadata";
                  v369[0] = 259;
                  v370 = a2;
                  v361 = v374[1];
                  v282 = *(llvm::raw_ostream **)this;
                  if (*(_QWORD *)this)
                  {
                    llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                    v283 = (_BYTE *)*((_QWORD *)v282 + 4);
                    if ((unint64_t)v283 >= *((_QWORD *)v282 + 3))
                    {
                      llvm::raw_ostream::write(v282, 10);
                    }
                    else
                    {
                      *((_QWORD *)v282 + 4) = v283 + 1;
                      *v283 = 10;
                    }
                    v292 = *(_QWORD *)this;
                    *((_BYTE *)this + 192) = 1;
                    if (v292)
                    {
                      v293 = (unsigned __int8 **)&v370;
                      v294 = &v361;
LABEL_607:
                      llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)this, v293, v294);
                    }
                    goto LABEL_722;
                  }
LABEL_721:
                  *((_BYTE *)this + 192) = 1;
                  goto LABEL_722;
                }
                goto LABEL_666;
              }
              if (llvm::GlobalValue::isDeclaration(a2))
              {
                if ((_DWORD)v375)
                {
                  v277 = (_QWORD **)(v374 + 1);
                  v278 = 16 * v375;
                  while (1)
                  {
                    while (1)
                    {
                      v279 = *((_DWORD *)v277 - 2);
                      if (!v279)
                        break;
                      if (v279 == 2)
                      {
                        v281 = "function declaration may not have a !prof attachment";
                        goto LABEL_708;
                      }
                      v280 = *v277;
                      v277 += 2;
                      v278 -= 16;
                      if (!v278)
                        goto LABEL_580;
                    }
                    if ((*((_BYTE *)*v277 + 1) & 0x7F) == 1)
                      break;
                    v277 += 2;
                    v278 -= 16;
                    if (!v278)
                      goto LABEL_580;
                  }
                  v365 = "function declaration may only have a unique !dbg attachment";
                  v369[0] = 259;
                  v370 = a2;
                  v346 = &v370;
LABEL_711:
                  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, v346);
                  goto LABEL_722;
                }
LABEL_580:
                if ((*((_WORD *)a2 + 9) & 8) != 0)
                {
                  v281 = "Function declaration shouldn't have a personality routine";
LABEL_708:
                  v365 = v281;
                  v369[0] = 259;
                  v370 = a2;
                  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, &v370);
                  goto LABEL_722;
                }
LABEL_666:
                if ((*((_BYTE *)a2 + 33) & 0x20) != 0 && !*(_QWORD *)(*((_QWORD *)a2 + 5) + 152))
                {
                  v370 = 0;
                  if (llvm::Function::hasAddressTaken(a2, &v370, 0, 1, 0, 1, 0))
                  {
                    v365 = "Invalid user of intrinsic instruction!";
                    v369[0] = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, &v370);
                    goto LABEL_722;
                  }
                }
                v326 = *((_DWORD *)a2 + 9);
                if (v326 == 133)
                {
                  v330 = *((_QWORD *)a2 + 3);
                  if (*(_DWORD *)(v330 + 12) == 2)
                  {
                    v331 = *(_QWORD **)(v330 + 16);
                    if (*(_BYTE *)(v331[1] + 8) != 15)
                    {
                      v329 = "gc.get.pointer.offset operand must be a pointer";
                      goto LABEL_705;
                    }
                    if (*(_BYTE *)(*v331 + 8) != 13)
                    {
                      v329 = "gc.get.pointer.offset must return integer";
                      goto LABEL_705;
                    }
                    goto LABEL_679;
                  }
                }
                else
                {
                  if (v326 != 132)
                    goto LABEL_679;
                  v327 = *((_QWORD *)a2 + 3);
                  if (*(_DWORD *)(v327 + 12) == 2)
                  {
                    v328 = *(_QWORD **)(v327 + 16);
                    if (*(_BYTE *)(*v328 + 8) != 15)
                    {
                      v329 = "gc.get.pointer.base must return a pointer";
                      goto LABEL_705;
                    }
                    if (v328[1] != *v328)
                    {
                      v329 = "gc.get.pointer.base operand and result must be of the same type";
LABEL_705:
                      v365 = v329;
                      v369[0] = 259;
                      llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (llvm::Twine *)&v365, (unsigned __int8 *)a2);
                      goto LABEL_722;
                    }
LABEL_679:
                    Subprogram = (unsigned __int8 *)llvm::Function::getSubprogram(a2);
                    v361 = (llvm::User *)Subprogram;
                    *((_BYTE *)this + 801) = Subprogram != 0;
                    if (Subprogram)
                    {
                      v365 = v369;
                      v366 = (uint64_t)v369;
                      v367 = 32;
                      LODWORD(v368) = 0;
                      v370 = (llvm::User *)&v365;
                      v371 = (uint64_t)this;
                      v372[0] = &v361;
                      v372[1] = a2;
                      v333 = *((_QWORD *)a2 + 10);
                      if ((char *)v333 != v356)
                      {
                        while (1)
                        {
                          v334 = v333 - 24;
                          if (!v333)
                            v334 = 0;
                          v335 = v334 + 48;
                          v336 = *(_QWORD *)(v334 + 56);
                          if (v336 != v334 + 48)
                            break;
LABEL_701:
                          v333 = *(_QWORD *)(v333 + 8);
                          if ((char *)v333 == v356)
                            goto LABEL_702;
                        }
                        while (1)
                        {
                          if (v336)
                            v337 = v336 - 24;
                          else
                            v337 = 0;
                          if ((*(_BYTE *)(v337 + 23) & 0x20) != 0)
                          {
                            MetadataImpl = llvm::Value::getMetadataImpl((llvm::Value *)v337, 18);
                            if (MetadataImpl)
                            {
                              v339 = MetadataImpl;
                              v340 = (unint64_t *)(MetadataImpl - 16);
                              for (j = 1; ; ++j)
                              {
                                v343 = *v340;
                                if ((*v340 & 2) != 0)
                                {
                                  if (j >= *(unsigned int *)(v339 - 24))
                                    break;
                                  v344 = *(unint64_t **)(v339 - 32);
                                }
                                else
                                {
                                  if (j >= ((v343 >> 6) & 0xF))
                                    break;
                                  v344 = &v340[-((v343 >> 2) & 0xF)];
                                }
                                v342 = (const llvm::Module **)v344[j];
                                if (v342)
                                {
                                  switch(*(_BYTE *)v342)
                                  {
                                    case 5:
                                    case 6:
                                    case 7:
                                    case 8:
                                    case 9:
                                    case 0xA:
                                    case 0xB:
                                    case 0xC:
                                    case 0xD:
                                    case 0xE:
                                    case 0xF:
                                    case 0x10:
                                    case 0x11:
                                    case 0x12:
                                    case 0x13:
                                    case 0x14:
                                    case 0x15:
                                    case 0x16:
                                    case 0x17:
                                    case 0x18:
                                    case 0x19:
                                    case 0x1A:
                                    case 0x1B:
                                    case 0x1C:
                                    case 0x1D:
                                    case 0x1E:
                                    case 0x1F:
                                    case 0x20:
                                    case 0x21:
                                    case 0x22:
                                    case 0x23:
                                      break;
                                    default:
                                      v342 = 0;
                                      break;
                                  }
                                }
                              }
                            }
                          }
                          if (*((_BYTE *)this + 193))
                            break;
                          v336 = *(_QWORD *)(v336 + 8);
                          if (v336 == v335)
                            goto LABEL_701;
                        }
                      }
LABEL_702:
                      if ((void *)v366 != v365)
                        free((void *)v366);
                    }
                    goto LABEL_722;
                  }
                }
                v329 = "wrong number of parameters";
                goto LABEL_705;
              }
              if ((v222 & 0x2000) != 0)
              {
                v281 = "llvm intrinsics cannot be defined!";
                goto LABEL_708;
              }
              v284 = *((_QWORD *)a2 + 10);
              if (v284)
                v285 = v284 - 24;
              else
                v285 = 0;
              v370 = (llvm::User *)v285;
              v286 = *(_QWORD *)(v285 + 8);
              if (v286)
              {
                while (1)
                {
                  v287 = *(_QWORD *)(v286 + 24);
                  v288 = *(unsigned __int8 *)(v287 + 16);
                  v289 = v287 && v288 >= 0x1C;
                  if (v289 && v288 - 29 < 0xB)
                    break;
                  v286 = *(_QWORD *)(v286 + 8);
                  if (!v286)
                    goto LABEL_601;
                }
                v345 = "Entry block to function must not have predecessors!";
LABEL_709:
                v365 = v345;
                v369[0] = 259;
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, &v370);
                goto LABEL_722;
              }
LABEL_601:
              if ((*(_WORD *)(v285 + 18) & 0x7FFF) != 0)
              {
                v291 = (llvm::Constant *)llvm::BlockAddress::lookup((llvm::BlockAddress *)v285, v276);
                if (llvm::Constant::isConstantUsed(v291))
                {
                  v345 = "blockaddress may not be used with the entry block!";
                  goto LABEL_709;
                }
              }
              if (!(_DWORD)v375)
                goto LABEL_666;
              v296 = 0;
              v297 = 0;
              v298 = 0;
              v299 = v374;
              v300 = &v374[2 * v375];
              while (2)
              {
                v301 = *(_DWORD *)v299;
                if (*(_DWORD *)v299 == 36)
                {
                  if (v296)
                  {
                    v348 = "function must have a single !kcfi_type attachment";
LABEL_718:
                    v365 = v348;
                    v369[0] = 259;
                    v361 = a2;
                    v349 = *(llvm::raw_ostream **)this;
                    if (!*(_QWORD *)this)
                      goto LABEL_721;
                    llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                    v350 = (_BYTE *)*((_QWORD *)v349 + 4);
                    if ((unint64_t)v350 >= *((_QWORD *)v349 + 3))
                    {
                      llvm::raw_ostream::write(v349, 10);
                    }
                    else
                    {
                      *((_QWORD *)v349 + 4) = v350 + 1;
                      *v350 = 10;
                    }
                    v355 = *(_QWORD *)this;
                    *((_BYTE *)this + 192) = 1;
                    if (!v355)
                    {
LABEL_722:
                      v9 = (char *)this + 2032;
                      v4 = v356;
                      if (v374 != (llvm::User **)v376)
                        free(v374);
                      goto LABEL_26;
                    }
LABEL_737:
                    v294 = v299 + 1;
                    v293 = (unsigned __int8 **)&v361;
                    goto LABEL_607;
                  }
                  v296 = 1;
                  goto LABEL_613;
                }
                if (v301 == 2)
                {
                  if (v297)
                  {
                    v348 = "function must have a single !prof attachment";
                    goto LABEL_718;
                  }
                  v297 = 1;
                  goto LABEL_613;
                }
                if (!v301)
                {
                  if (v298)
                  {
                    v347 = "function must have a single !dbg attachment";
                    goto LABEL_725;
                  }
                  v302 = (unsigned __int8 *)v299[1];
                  if (*v302 != 18)
                  {
                    v347 = "function !dbg attachment must be a subprogram";
LABEL_725:
                    v365 = v347;
                    v369[0] = 259;
                    v361 = a2;
                    v351 = *(llvm::raw_ostream **)this;
                    if (*(_QWORD *)this)
                    {
                      llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                      v352 = (_BYTE *)*((_QWORD *)v351 + 4);
                      if ((unint64_t)v352 >= *((_QWORD *)v351 + 3))
                      {
                        llvm::raw_ostream::write(v351, 10);
                      }
                      else
                      {
                        *((_QWORD *)v351 + 4) = v352 + 1;
                        *v352 = 10;
                      }
                    }
                    *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
                    *((_BYTE *)this + 193) = 1;
                    if (!*(_QWORD *)this)
                      goto LABEL_722;
                    goto LABEL_737;
                  }
                  if ((v302[1] & 0x7F) != 1)
                  {
                    v365 = "function definition may only have a distinct !dbg attachment";
                    v369[0] = 259;
                    v361 = a2;
                    v346 = &v361;
                    goto LABEL_711;
                  }
                  v361 = v299[1];
                  v303 = *((_DWORD *)this + 184);
                  if (v303)
                  {
                    v304 = *((_QWORD *)this + 90);
                    v305 = v303 - 1;
                    v306 = (v303 - 1) & ((v302 >> 4) ^ (v302 >> 9));
                    v307 = (unsigned __int8 **)(v304 + 16 * v306);
                    v308 = *v307;
                    if (v302 == *v307)
                      goto LABEL_640;
                    v309 = 0;
                    v310 = 1;
                    while (v308 != (unsigned __int8 *)-4096)
                    {
                      if (v309)
                        v311 = 0;
                      else
                        v311 = v308 == (unsigned __int8 *)-8192;
                      if (v311)
                        v309 = v307;
                      v312 = v306 + v310++;
                      v306 = v312 & v305;
                      v307 = (unsigned __int8 **)(v304 + 16 * (v312 & v305));
                      v308 = *v307;
                      if (v302 == *v307)
                        goto LABEL_640;
                    }
                    if (v309)
                      v307 = v309;
                    v316 = *((_DWORD *)this + 182);
                    if (4 * v316 + 4 >= 3 * v303)
                      goto LABEL_649;
                    if (v303 + ~v316 - *((_DWORD *)this + 183) > v303 >> 3)
                    {
                      v313 = *v307;
                      ++*((_DWORD *)this + 182);
                      if (v313 != (unsigned __int8 *)-4096)
                        goto LABEL_638;
LABEL_639:
                      *v307 = v302;
                      v307[1] = 0;
LABEL_640:
                      v314 = (const llvm::Function *)v307[1];
                      if (v314)
                        v315 = v314 == a2;
                      else
                        v315 = 1;
                      if (!v315)
                      {
                        v365 = "DISubprogram attached to more than one function";
                        v369[0] = 259;
                        v360 = a2;
                        v353 = *(llvm::raw_ostream **)this;
                        if (*(_QWORD *)this)
                        {
                          llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
                          v354 = (_BYTE *)*((_QWORD *)v353 + 4);
                          if ((unint64_t)v354 >= *((_QWORD *)v353 + 3))
                          {
                            llvm::raw_ostream::write(v353, 10);
                          }
                          else
                          {
                            *((_QWORD *)v353 + 4) = v354 + 1;
                            *v354 = 10;
                          }
                        }
                        *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
                        *((_BYTE *)this + 193) = 1;
                        if (*(_QWORD *)this)
                          llvm::VerifierSupport::WriteTs<llvm::ValueAsMetadata const*,llvm::Value *>((llvm::raw_ostream **)this, &v361, &v360);
                        goto LABEL_722;
                      }
                      v307[1] = (unsigned __int8 *)a2;
                      v298 = 1;
                      goto LABEL_613;
                    }
                  }
                  else
                  {
LABEL_649:
                    v303 *= 2;
                  }
                  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)this + 720, v303);
                  v317 = *((_QWORD *)this + 90);
                  v302 = (unsigned __int8 *)v361;
                  v318 = *((_DWORD *)this + 184) - 1;
                  v319 = ((v361 >> 4) ^ (v361 >> 9)) & v318;
                  v307 = (unsigned __int8 **)(v317 + 16 * v319);
                  v320 = *v307;
                  if (v361 == (llvm::User *)*v307)
                  {
LABEL_651:
                    ++*((_DWORD *)this + 182);
                    if (v302 == (unsigned __int8 *)-4096)
                      goto LABEL_639;
                  }
                  else
                  {
                    v321 = 0;
                    v322 = 1;
                    while (v320 != (unsigned __int8 *)-4096)
                    {
                      if (v321)
                        v323 = 0;
                      else
                        v323 = v320 == (unsigned __int8 *)-8192;
                      if (v323)
                        v321 = v307;
                      v324 = v319 + v322++;
                      v319 = v324 & v318;
                      v307 = (unsigned __int8 **)(v317 + 16 * (v324 & v318));
                      v320 = *v307;
                      if (v361 == (llvm::User *)*v307)
                        goto LABEL_651;
                    }
                    if (v321)
                      v307 = v321;
                    v325 = *v307;
                    ++*((_DWORD *)this + 182);
                    if (v325 == (unsigned __int8 *)-4096)
                      goto LABEL_639;
                  }
LABEL_638:
                  --*((_DWORD *)this + 183);
                  goto LABEL_639;
                }
LABEL_613:
                v299 += 2;
                if (v299 == v300)
                  goto LABEL_666;
                continue;
              }
            }
            if (*v257 != 1)
            {
              v268 = "expected integer argument to function_entry_count";
              goto LABEL_561;
            }
          }
          v236 += 2;
          v237 -= 16;
          if (!v237)
            goto LABEL_562;
        }
      }
      v223 = "Function returns a token but isn't an intrinsic";
    }
LABEL_436:
    v365 = v223;
    v369[0] = 259;
    v374 = (llvm::User **)a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, (llvm::raw_ostream **)&v374);
    v4 = v356;
    goto LABEL_26;
  }
  v365 = "# formal arguments must match # of arguments for function type!";
  v369[0] = 259;
  v374 = (llvm::User **)a2;
  v218 = *(llvm::raw_ostream **)this;
  if (*(_QWORD *)this)
  {
    llvm::Twine::print((llvm::Twine *)&v365, *(llvm::raw_ostream **)this);
    v219 = (_BYTE *)*((_QWORD *)v218 + 4);
    if ((unint64_t)v219 >= *((_QWORD *)v218 + 3))
    {
      llvm::raw_ostream::write(v218, 10);
    }
    else
    {
      *((_QWORD *)v218 + 4) = v219 + 1;
      *v219 = 10;
    }
    v221 = *(_QWORD *)this;
    *((_BYTE *)this + 192) = 1;
    if (v221)
      llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::FunctionType *>((llvm::raw_ostream **)this, (llvm::raw_ostream **)&v374, (Type **)v363);
  }
  else
  {
    *((_BYTE *)this + 192) = 1;
  }
LABEL_26:
  v19 = (char *)*((_QWORD *)a2 + 10);
  if (v19 != v4)
  {
    do
    {
      v20 = (char *)*((_QWORD *)v19 + 1);
      if (v19)
        v21 = v19 - 24;
      else
        v21 = 0;
      v22 = (void *)*((_QWORD *)this + 35);
      if (v22 != *((void **)this + 34))
      {
        v23 = *((unsigned int *)this + 72);
        if (v23 >= 0x21 && 4 * (*((_DWORD *)this + 73) - *((_DWORD *)this + 74)) < v23)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 34);
          goto LABEL_40;
        }
        memset(v22, 255, 8 * v23);
      }
      *(_QWORD *)((char *)this + 292) = 0;
LABEL_40:
      llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::visit((uint64_t)v9);
      v26 = v21 + 48;
      v25 = (char *)*((_QWORD *)v21 + 6);
      if (v25 == v21 + 48 || (v25 ? (v27 = v25 - 24) : (v27 = 0), v27[16] - 29 >= 0xB))
      {
        v365 = "Basic Block does not have terminator!";
        v369[0] = 259;
        v374 = (llvm::User **)v21;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, (llvm::raw_ostream **)&v374);
        goto LABEL_58;
      }
      v28 = *((_QWORD *)v21 + 7);
      v29 = v28 - 24;
      if (!v28)
        v29 = 0;
      if (*(_BYTE *)(v29 + 16) != 83)
      {
        if ((char *)v28 != v26)
          goto LABEL_49;
LABEL_53:
        if (v21[40] && llvm::BasicBlock::validateDbgValues((llvm::BasicBlock *)v21, 0, 1, *(llvm::raw_ostream **)this))
        {
          v365 = "Invalid configuration of new-debug-info data found";
          v369[0] = 259;
          v31 = *(llvm::raw_ostream **)this;
          if (*(_QWORD *)this)
            goto LABEL_113;
          goto LABEL_123;
        }
        goto LABEL_58;
      }
      for (k = *((_QWORD *)v21 + 1); k; k = *(_QWORD *)(k + 8))
      {
        v36 = *(_QWORD *)(k + 24);
        v37 = *(unsigned __int8 *)(v36 + 16);
        if (v36)
          v38 = v37 >= 0x1C;
        else
          v38 = 0;
        if (v38 && v37 - 29 < 0xB)
          break;
      }
      v374 = (llvm::User **)v376;
      v375 = 0x800000000;
      llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>((uint64_t)&v374, k, 0);
      v365 = &v367;
      v366 = 0x800000000;
      if (v375 >= 2)
        qsort(v374, v375, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::BasicBlock *>);
      v40 = llvm::BasicBlock::phis((llvm::BasicBlock **)v21);
      v357 = v41;
      if (v40 == v41)
      {
LABEL_115:
        v68 = 1;
        v4 = v356;
        v69 = v365;
        if (v365 != &v367)
LABEL_116:
          free(v69);
        goto LABEL_117;
      }
      v42 = v40;
      while (1)
      {
        v46 = *((_DWORD *)v42 + 5);
        v47 = v46 & 0x7FFFFFF;
        if ((_DWORD)v375 != (v46 & 0x7FFFFFF))
        {
          v370 = (llvm::User *)"PHINode should have one entry for each predecessor of its parent basic block!";
          v373 = 259;
          v363[0] = (unsigned __int8 *)v42;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v370, (llvm::raw_ostream **)v363);
          v68 = 0;
          v4 = v356;
          v69 = v365;
          if (v365 != &v367)
            goto LABEL_116;
          goto LABEL_117;
        }
        LODWORD(v366) = 0;
        if (HIDWORD(v366) < v47)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, &v367, v47, 16);
          v46 = *((_DWORD *)v42 + 5);
        }
        v48 = v46 & 0x7FFFFFF;
        if (v48)
        {
          v49 = 0;
          v50 = 0;
          v51 = 8 * v48;
          do
          {
            v52 = *((_DWORD *)v42 + 5);
            if ((v52 & 0x40000000) != 0)
              v53 = (char *)*((_QWORD *)v42 - 1);
            else
              v53 = &v42[-32 * (v52 & 0x7FFFFFF)];
            v54 = *(_QWORD *)&v53[32 * *((unsigned int *)v42 + 18) + v50];
            v55 = *(_QWORD *)&v53[v49];
            v56 = v366;
            if (v366 >= (unint64_t)HIDWORD(v366))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, &v367, v366 + 1, 16);
              v56 = v366;
            }
            v57 = (char *)v365 + 16 * v56;
            *v57 = v54;
            v57[1] = v55;
            v58 = v366 + 1;
            LODWORD(v366) = v366 + 1;
            v50 += 8;
            v49 += 32;
          }
          while (v51 != v50);
        }
        else
        {
          v58 = v366;
        }
        v59 = 126 - 2 * __clz(v58);
        v60 = v58 ? v59 : 0;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>((uint64_t)v365, (unint64_t *)v365 + 2 * v58, (uint64_t)&v370, v60, 1);
        if ((_DWORD)v366)
        {
          v61 = (unsigned __int8 **)v365;
          v62 = v374;
          v63 = *(unsigned __int8 **)v365;
          if (*(llvm::User **)v365 != *v374)
          {
            v65 = 0;
LABEL_131:
            v370 = (llvm::User *)"PHI node entries do not match predecessors!";
            v373 = 259;
            v363[0] = (unsigned __int8 *)v42;
            v73 = *(llvm::raw_ostream **)this;
            v9 = (char *)this + 2032;
            if (!*(_QWORD *)this)
            {
              *((_BYTE *)this + 192) = 1;
              v4 = v356;
              goto LABEL_138;
            }
            llvm::Twine::print((llvm::Twine *)&v370, *(llvm::raw_ostream **)this);
            v74 = (_BYTE *)*((_QWORD *)v73 + 4);
            if ((unint64_t)v74 >= *((_QWORD *)v73 + 3))
            {
              llvm::raw_ostream::write(v73, 10);
              v76 = *(_QWORD *)this;
              *((_BYTE *)this + 192) = 1;
              v4 = v356;
              if (!v76)
                goto LABEL_138;
            }
            else
            {
              *((_QWORD *)v73 + 4) = v74 + 1;
              *v74 = 10;
              v75 = *(_QWORD *)this;
              *((_BYTE *)this + 192) = 1;
              v4 = v356;
              if (!v75)
              {
LABEL_138:
                v68 = 0;
                v69 = v365;
                if (v365 != &v367)
                  goto LABEL_116;
                goto LABEL_117;
              }
            }
            llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)this, v363, &v61[2 * v65], &v62[v65]);
            goto LABEL_138;
          }
          if ((_DWORD)v366 != 1)
            break;
        }
LABEL_78:
        v43 = v42 + 24;
        if (!v42)
          v43 = 0;
        v44 = *((_QWORD *)v43 + 1);
        if (v44)
          v45 = (char *)(v44 - 24);
        else
          v45 = 0;
        if (v45[16] == 83)
          v42 = v45;
        else
          v42 = 0;
        v9 = (char *)this + 2032;
        if (v42 == v357)
          goto LABEL_115;
      }
      v64 = (unsigned __int8 **)((char *)v365 + 16);
      v65 = 1;
      while (1)
      {
        v66 = *v64;
        if (*v64 == v63)
        {
          v66 = v63;
          if (v64[1] != *(v64 - 1))
            break;
        }
        if (v66 != (unsigned __int8 *)v374[v65])
          goto LABEL_131;
        ++v65;
        v64 += 2;
        v63 = v66;
        if (v366 == v65)
          goto LABEL_78;
      }
      v370 = (llvm::User *)"PHI node has multiple entries for the same basic block with different incoming values!";
      v373 = 259;
      v363[0] = (unsigned __int8 *)v42;
      v70 = *(llvm::raw_ostream **)this;
      if (*(_QWORD *)this)
      {
        llvm::Twine::print((llvm::Twine *)&v370, *(llvm::raw_ostream **)this);
        v71 = (_BYTE *)*((_QWORD *)v70 + 4);
        if ((unint64_t)v71 >= *((_QWORD *)v70 + 3))
        {
          llvm::raw_ostream::write(v70, 10);
          v77 = *(_QWORD *)this;
          *((_BYTE *)this + 192) = 1;
          v4 = v356;
          if (v77)
            goto LABEL_142;
        }
        else
        {
          *((_QWORD *)v70 + 4) = v71 + 1;
          *v71 = 10;
          v72 = *(_QWORD *)this;
          *((_BYTE *)this + 192) = 1;
          v4 = v356;
          if (!v72)
            goto LABEL_143;
LABEL_142:
          llvm::VerifierSupport::WriteTs<llvm::PHINode const*,llvm::BasicBlock *,llvm::Value *,llvm::Value *>((_anonymous_namespace_::TypePrinting **)this, v363, v64, v64 + 1, (llvm::raw_ostream **)v64 - 1);
        }
      }
      else
      {
        *((_BYTE *)this + 192) = 1;
        v4 = v356;
      }
LABEL_143:
      v68 = 0;
      v9 = (char *)this + 2032;
      v69 = v365;
      if (v365 != &v367)
        goto LABEL_116;
LABEL_117:
      if (v374 != (llvm::User **)v376)
        free(v374);
      if (v68)
      {
        v28 = *((_QWORD *)v21 + 7);
        if ((char *)v28 == v26)
          goto LABEL_53;
        while (1)
        {
LABEL_49:
          v30 = v28 - 24;
          if (!v28)
            v30 = 0;
          if (*(char **)(v30 + 40) != v21)
            break;
          v28 = *(_QWORD *)(v28 + 8);
          if ((char *)v28 == v26)
            goto LABEL_53;
        }
        v365 = "Instruction has bogus parent pointer!";
        v369[0] = 259;
        v31 = *(llvm::raw_ostream **)this;
        if (*(_QWORD *)this)
        {
LABEL_113:
          llvm::Twine::print((llvm::Twine *)&v365, v31);
          v67 = (_BYTE *)*((_QWORD *)v31 + 4);
          if ((unint64_t)v67 >= *((_QWORD *)v31 + 3))
          {
            llvm::raw_ostream::write(v31, 10);
          }
          else
          {
            *((_QWORD *)v31 + 4) = v67 + 1;
            *v67 = 10;
          }
        }
LABEL_123:
        *((_BYTE *)this + 192) = 1;
        v4 = v356;
      }
LABEL_58:
      v32 = (char *)*((_QWORD *)v21 + 7);
      if (v32 != v26)
      {
        do
        {
          v33 = (char *)*((_QWORD *)v32 + 1);
          if (v32)
            v34 = (llvm::Instruction *)(v32 - 24);
          else
            v34 = 0;
          v32 = v33;
        }
        while (v33 != v26);
      }
      v19 = v20;
    }
    while (v20 != v4);
  }
  v365 = v369;
  v366 = (uint64_t)v369;
  v367 = 8;
  LODWORD(v368) = 0;
  v374 = (llvm::User **)v377;
  v375 = (uint64_t)v377;
  *(_QWORD *)v376 = 8;
  *(_DWORD *)&v376[8] = 0;
  v78 = (_QWORD *)((char *)this + 856);
  v79 = *((unsigned int *)this + 222);
  if (!(_DWORD)v79)
    goto LABEL_338;
  v80 = (_QWORD *)((char *)this + 880);
  v81 = *((_QWORD *)this + 110);
  v82 = (_DWORD *)((char *)this + 888);
  v83 = v81 + 16 * v79;
  while (1)
  {
    v84 = *(const void **)v81;
    if ((void *)v366 == v365)
      break;
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v365, *(const void **)v81);
    if (*BucketFor != v84)
    {
      v86 = v367;
      if ((void *)v366 == v365)
        v86 = HIDWORD(v367);
      BucketFor = (const void **)(v366 + 8 * v86);
    }
    if ((void *)v366 == v365)
      v87 = HIDWORD(v367);
    else
      v87 = v367;
    if (BucketFor == (const void **)(v366 + 8 * v87))
      goto LABEL_167;
LABEL_149:
    v81 += 16;
    if (v81 == v83)
      goto LABEL_338;
  }
  v88 = (char *)(v366 + 8 * HIDWORD(v367));
  if (HIDWORD(v367))
  {
    v89 = 0;
    while (*(const void **)(v366 + v89) != v84)
    {
      v89 += 8;
      if (8 * HIDWORD(v367) == v89)
        goto LABEL_166;
    }
    v88 = (char *)(v366 + v89);
  }
LABEL_166:
  if (v88 != (char *)(v366 + 8 * HIDWORD(v367)))
    goto LABEL_149;
LABEL_167:
  if ((llvm::User **)v375 != v374)
    goto LABEL_168;
  v121 = *(unsigned int *)&v376[4];
  if (*(_DWORD *)&v376[4])
  {
    v122 = 0;
    v123 = 8 * *(unsigned int *)&v376[4];
    v124 = (_QWORD *)v375;
    while ((const void *)*v124 != v84)
    {
      if (*v124 == -2)
        v122 = v124;
      ++v124;
      v123 -= 8;
      if (!v123)
      {
        if (!v122)
          goto LABEL_243;
        *v122 = v84;
        --*(_DWORD *)&v376[8];
        break;
      }
    }
  }
  else
  {
LABEL_243:
    if (*(_DWORD *)&v376[4] >= *(_DWORD *)v376)
    {
LABEL_168:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v374, v84);
    }
    else
    {
      ++*(_DWORD *)&v376[4];
      *(_QWORD *)(v375 + 8 * v121) = v84;
    }
  }
  v90 = *(_QWORD *)(v81 + 8);
  while (1)
  {
LABEL_171:
    v91 = *(unsigned __int8 *)(v90 + 16);
    if (v90 && v91 == 33)
    {
      FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v90 - 64));
      v93 = v375;
      if ((llvm::User **)v375 == v374)
        goto LABEL_190;
      goto LABEL_174;
    }
    v98 = *(_WORD *)(v90 + 18);
    if (!v90 || v91 != 38)
    {
      if ((v98 & 1) != 0)
      {
        v99 = *(_DWORD *)(v90 + 20);
        goto LABEL_196;
      }
      goto LABEL_189;
    }
    if ((v98 & 1) != 0)
      break;
LABEL_189:
    FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(0);
    v93 = v375;
    if ((llvm::User **)v375 == v374)
      goto LABEL_190;
LABEL_174:
    v94 = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v374, FirstNonPHI);
    v95 = (llvm::User **)v375;
    if (*v94 != FirstNonPHI)
    {
      v96 = *(_DWORD *)v376;
      if ((llvm::User **)v375 == v374)
        v96 = *(_DWORD *)&v376[4];
      v94 = (const void **)(v375 + 8 * v96);
    }
    if ((llvm::User **)v375 == v374)
      v97 = *(_DWORD *)&v376[4];
    else
      v97 = *(_DWORD *)v376;
    if (v94 != (const void **)(v375 + 8 * v97))
      goto LABEL_252;
LABEL_201:
    if ((void *)v366 != v365)
      goto LABEL_202;
    v111 = HIDWORD(v367);
    if (HIDWORD(v367))
    {
      v112 = 0;
      v113 = 8 * HIDWORD(v367);
      v114 = (char **)v366;
      while (*v114 != FirstNonPHI)
      {
        if (*v114 == (char *)-2)
          v112 = v114;
        ++v114;
        v113 -= 8;
        if (!v113)
        {
          if (!v112)
            goto LABEL_231;
          *v112 = FirstNonPHI;
          LODWORD(v368) = (_DWORD)v368 - 1;
          goto LABEL_203;
        }
      }
      goto LABEL_246;
    }
LABEL_231:
    if (HIDWORD(v367) >= v367)
    {
LABEL_202:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v365, FirstNonPHI);
      if (v103)
        goto LABEL_203;
      v95 = (llvm::User **)v375;
LABEL_246:
      if (v95 == v374)
        goto LABEL_148;
      if (*(_DWORD *)v376 < 0x21u || (4 * (*(_DWORD *)&v376[4] - *(_DWORD *)&v376[8])) >= *(_DWORD *)v376)
      {
        memset(v95, 255, 8 * *(unsigned int *)v376);
LABEL_148:
        *(_QWORD *)&v376[4] = 0;
        goto LABEL_149;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v374);
      goto LABEL_149;
    }
    ++HIDWORD(v367);
    *(_QWORD *)(v366 + 8 * v111) = FirstNonPHI;
LABEL_203:
    v104 = *((_QWORD *)this + 107);
    v105 = *((unsigned int *)this + 218);
    if ((_DWORD)v105)
    {
      LODWORD(v106) = (v105 - 1) & ((FirstNonPHI >> 4) ^ (FirstNonPHI >> 9));
      v107 = (_QWORD *)(v104 + 16 * v106);
      v108 = (char *)*v107;
      if ((char *)*v107 == FirstNonPHI)
        goto LABEL_218;
      v109 = 1;
      while (v108 != (char *)-4096)
      {
        v110 = v106 + v109++;
        v106 = v110 & (v105 - 1);
        v108 = *(char **)(v104 + 16 * v106);
        if (v108 == FirstNonPHI)
        {
          v107 = (_QWORD *)(v104 + 16 * v106);
          goto LABEL_218;
        }
      }
    }
    v107 = (_QWORD *)(v104 + 16 * v105);
LABEL_218:
    if (v107 == (_QWORD *)(v104 + 16 * v105))
      v115 = (unsigned int *)((char *)this + 888);
    else
      v115 = (unsigned int *)(v107 + 1);
    v116 = *v115;
    v95 = (llvm::User **)v375;
    if ((_DWORD)v116 == *v82)
      goto LABEL_246;
    v90 = *(_QWORD *)(*v80 + 16 * v116 + 8);
    if ((llvm::User **)v375 != v374)
      goto LABEL_170;
    v117 = *(unsigned int *)&v376[4];
    if (!*(_DWORD *)&v376[4])
    {
LABEL_233:
      if (*(_DWORD *)&v376[4] < *(_DWORD *)v376)
      {
        ++*(_DWORD *)&v376[4];
        *(_QWORD *)(v375 + 8 * v117) = FirstNonPHI;
        continue;
      }
LABEL_170:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v374, FirstNonPHI);
      continue;
    }
    v118 = 0;
    v119 = 8 * *(unsigned int *)&v376[4];
    v120 = (char **)v375;
    while (*v120 != FirstNonPHI)
    {
      if (*v120 == (char *)-2)
        v118 = v120;
      ++v120;
      v119 -= 8;
      if (!v119)
      {
        if (!v118)
          goto LABEL_233;
        *v118 = FirstNonPHI;
        --*(_DWORD *)&v376[8];
        goto LABEL_171;
      }
    }
  }
  v99 = *(_DWORD *)(v90 + 20);
  if ((v99 & 0x40000000) != 0)
  {
    v100 = *(_QWORD *)(v90 - 8);
    goto LABEL_197;
  }
LABEL_196:
  v100 = v90 - 32 * (v99 & 0x7FFFFFF);
LABEL_197:
  FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v100 + 32));
  v93 = v375;
  if ((llvm::User **)v375 != v374)
    goto LABEL_174;
LABEL_190:
  v101 = v93 + 8 * *(unsigned int *)&v376[4];
  if (*(_DWORD *)&v376[4])
  {
    v102 = 0;
    while (*(char **)(v93 + v102) != FirstNonPHI)
    {
      v102 += 8;
      if (8 * *(unsigned int *)&v376[4] == v102)
        goto LABEL_200;
    }
    v101 = v93 + v102;
  }
LABEL_200:
  v95 = (llvm::User **)v93;
  if (v101 == v93 + 8 * *(unsigned int *)&v376[4])
    goto LABEL_201;
LABEL_252:
  v370 = (llvm::User *)v372;
  v371 = 0x800000000;
  v126 = FirstNonPHI;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        v127 = v371;
        if (v371 >= (unint64_t)HIDWORD(v371))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, v372, v371 + 1, 8);
          v127 = v371;
        }
        *((_QWORD *)v370 + v127) = v126;
        LODWORD(v371) = v371 + 1;
        v128 = *((_DWORD *)this + 218);
        if (!v128)
          goto LABEL_297;
        v129 = *((_QWORD *)this + 107);
        v130 = (v128 - 1) & ((v126 >> 4) ^ (v126 >> 9));
        v131 = (char **)(v129 + 16 * v130);
        v132 = *v131;
        if (v126 == *v131)
        {
LABEL_258:
          v133 = *(_QWORD *)(*v80 + 16 * *(unsigned int *)(v129 + 16 * v130 + 8) + 8);
          if ((char *)v133 != v126)
            goto LABEL_259;
LABEL_270:
          v135 = *(unsigned __int8 *)(v133 + 16);
          if (v133)
            goto LABEL_271;
          break;
        }
        v142 = 0;
        v143 = 1;
        while (v132 != (char *)-4096)
        {
          if (v142)
            v144 = 0;
          else
            v144 = v132 == (char *)-8192;
          if (v144)
            v142 = v131;
          v145 = v130 + v143++;
          v130 = v145 & (v128 - 1);
          v131 = (char **)(v129 + 16 * v130);
          v132 = *v131;
          if (v126 == *v131)
            goto LABEL_258;
        }
        v146 = v142 ? v142 : v131;
        v147 = *((_DWORD *)this + 216);
        if (4 * v147 + 4 < 3 * v128)
        {
          if (v128 + ~v147 - *((_DWORD *)this + 217) <= v128 >> 3)
            goto LABEL_298;
          v136 = *v146;
          ++*((_DWORD *)this + 216);
          if (v136 != (char *)-4096)
            goto LABEL_266;
        }
        else
        {
LABEL_297:
          v128 *= 2;
LABEL_298:
          llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow((uint64_t)this + 856, v128);
          v148 = *((_QWORD *)this + 107);
          v149 = *((_DWORD *)this + 218) - 1;
          v150 = v149 & ((v126 >> 4) ^ (v126 >> 9));
          v146 = (char **)(v148 + 16 * v150);
          v151 = *v146;
          if (v126 == *v146)
          {
LABEL_299:
            ++*((_DWORD *)this + 216);
            if (v126 == (char *)-4096)
              goto LABEL_267;
LABEL_266:
            --*((_DWORD *)this + 217);
            goto LABEL_267;
          }
          v152 = 0;
          v153 = 1;
          while (v151 != (char *)-4096)
          {
            if (v152)
              v154 = 0;
            else
              v154 = v151 == (char *)-8192;
            if (v154)
              v152 = v146;
            v155 = v150 + v153++;
            v150 = v155 & v149;
            v146 = (char **)(v148 + 16 * v150);
            v151 = *v146;
            if (v126 == *v146)
              goto LABEL_299;
          }
          if (v152)
            v146 = v152;
          v156 = *v146;
          ++*((_DWORD *)this + 216);
          if (v156 != (char *)-4096)
            goto LABEL_266;
        }
LABEL_267:
        *v146 = v126;
        *((_DWORD *)v146 + 2) = 0;
        v137 = *((unsigned int *)this + 222);
        if (v137 >= *((unsigned int *)this + 223))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 880, (char *)this + 896, v137 + 1, 16);
          v137 = *v82;
        }
        v138 = (char **)(*v80 + 16 * v137);
        *v138 = v126;
        v138[1] = 0;
        LODWORD(v138) = (*v82)++;
        *((_DWORD *)v146 + 2) = (_DWORD)v138;
        v133 = *(_QWORD *)(*v80 + 16 * v138 + 8);
        if ((char *)v133 == v126)
          goto LABEL_270;
LABEL_259:
        v134 = v371;
        if (v371 >= (unint64_t)HIDWORD(v371))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, v372, v371 + 1, 8);
          v134 = v371;
        }
        *((_QWORD *)v370 + v134) = v133;
        LODWORD(v371) = v371 + 1;
        v135 = *(unsigned __int8 *)(v133 + 16);
        if (v133)
        {
LABEL_271:
          if (v135 == 33)
          {
            v126 = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v133 - 64));
            if (v126 == FirstNonPHI)
              goto LABEL_314;
            continue;
          }
        }
        break;
      }
      v139 = *(_WORD *)(v133 + 18);
      if (!v133 || v135 != 38)
      {
        if ((v139 & 1) != 0)
        {
          v140 = *(_DWORD *)(v133 + 20);
          goto LABEL_281;
        }
        goto LABEL_278;
      }
      if ((v139 & 1) == 0)
      {
LABEL_278:
        v126 = llvm::BasicBlock::getFirstNonPHI(0);
        if (v126 == FirstNonPHI)
          goto LABEL_314;
        continue;
      }
      break;
    }
    v140 = *(_DWORD *)(v133 + 20);
    if ((v140 & 0x40000000) != 0)
    {
      v141 = *(_QWORD *)(v133 - 8);
      goto LABEL_282;
    }
LABEL_281:
    v141 = v133 - 32 * (v140 & 0x7FFFFFF);
LABEL_282:
    v126 = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v141 + 32));
    if (v126 != FirstNonPHI)
      continue;
    break;
  }
LABEL_314:
  v363[0] = "EH pads can't handle each other's exceptions";
  v364 = 259;
  v157 = *(llvm::raw_ostream **)this;
  if (*(_QWORD *)this)
  {
    v158 = (llvm::raw_ostream **)v370;
    v159 = v371;
    llvm::Twine::print((llvm::Twine *)v363, *(llvm::raw_ostream **)this);
    v160 = (_BYTE *)*((_QWORD *)v157 + 4);
    if ((unint64_t)v160 >= *((_QWORD *)v157 + 3))
    {
      llvm::raw_ostream::write(v157, 10);
      v169 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (v169)
        goto LABEL_335;
    }
    else
    {
      *((_QWORD *)v157 + 4) = v160 + 1;
      *v160 = 10;
      v161 = *(_QWORD *)this;
      *((_BYTE *)this + 192) = 1;
      if (!v161)
        goto LABEL_336;
LABEL_335:
      llvm::VerifierSupport::Write<llvm::Instruction *>(this, v158, v159);
    }
  }
  else
  {
    *((_BYTE *)this + 192) = 1;
  }
LABEL_336:
  if (v370 != (llvm::User *)v372)
    free(v370);
LABEL_338:
  if ((llvm::User **)v375 != v374)
    free((void *)v375);
  if ((void *)v366 != v365)
    free((void *)v366);
  if (!*((_DWORD *)this + 542))
    llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::verify((uint64_t)this + 2032);
  v170 = (void *)*((_QWORD *)this + 35);
  if (v170 == *((void **)this + 34))
  {
LABEL_351:
    *(_QWORD *)((char *)this + 292) = 0;
    *((_DWORD *)this + 460) = 0;
    *((_QWORD *)this + 99) = 0;
    *((_BYTE *)this + 800) = 0;
    v172 = *((_DWORD *)this + 216);
    if (!v172)
      goto LABEL_352;
LABEL_353:
    v173 = *((unsigned int *)this + 218);
    if (v173 > 4 * v172 && v173 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this + 856);
      goto LABEL_356;
    }
    if ((_DWORD)v173)
    {
      v175 = (_QWORD *)*v78;
      v176 = (v173 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v176)
      {
        v177 = v176 + 1;
        v178 = (v176 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v179 = &v175[2 * v178];
        v180 = v175 + 2;
        v181 = v178;
        do
        {
          *(v180 - 2) = -4096;
          *v180 = -4096;
          v180 += 4;
          v181 -= 2;
        }
        while (v181);
        if (v177 == v178)
          goto LABEL_367;
      }
      else
      {
        v179 = (_QWORD *)*v78;
      }
      v182 = &v175[2 * v173];
      do
      {
        *v179 = -4096;
        v179 += 2;
      }
      while (v179 != v182);
    }
LABEL_367:
    *((_QWORD *)this + 108) = 0;
    *((_DWORD *)this + 222) = 0;
    v174 = *((unsigned int *)this + 554);
    if ((_DWORD)v174)
    {
LABEL_368:
      v183 = (void **)*((_QWORD *)this + 276);
      v184 = 8 * v174;
      do
      {
        v374 = (llvm::User **)*v183;
        v185 = v374[-4 * (*((_DWORD *)v374 + 5) & 0x7FFFFFF)];
        if (v185)
          v186 = *((_BYTE *)v185 + 16) == 23;
        else
          v186 = 0;
        if (!v186)
        {
          v189 = "llvm.experimental.noalias.scope.decl must have a MetadataAsValue argument";
LABEL_412:
          v365 = v189;
          v369[0] = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v365, (llvm::raw_ostream **)&v374);
          goto LABEL_413;
        }
        v187 = (const llvm::Module **)*((_QWORD *)v185 + 3);
        if (*(unsigned __int8 *)v187 - 5 >= 0x1F)
        {
          v189 = "!id.scope.list must point to an MDNode";
          goto LABEL_412;
        }
        v188 = (uint64_t)*(v187 - 2);
        if ((v188 & 2) != 0)
        {
          if (*((_DWORD *)v187 - 6) != 1)
            goto LABEL_379;
        }
        else if (((v188 >> 6) & 0xF) != 1)
        {
LABEL_379:
          v189 = "!id.scope.list must point to a list with a single scope";
          goto LABEL_412;
        }
        ++v183;
        v184 -= 8;
      }
      while (v184);
      if (byte_1ECD35200)
      {
        v190 = *((unsigned int *)this + 554);
        v191 = 126 - 2 * __clz(v190);
        v192 = (_DWORD)v190 ? v191 : 0;
        v193 = *((unsigned int *)this + 554);
        if ((_DWORD)v193)
        {
          v194 = (const llvm::Value **)*((_QWORD *)this + 276);
          v195 = &v194[v193];
          v196 = v194;
          do
          {
            v197 = v196;
            v198 = *(_QWORD *)(*((_QWORD *)*v196 - 4 * (*((_DWORD *)*v196 + 5) & 0x7FFFFFF)) + 24);
            v201 = *(_QWORD *)(v198 - 16);
            v199 = v198 - 16;
            v200 = v201;
            if ((v201 & 2) != 0)
              v202 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v196 - 4 * (*((_DWORD *)*v196 + 5) & 0x7FFFFFF)) + 24) - 32);
            else
              v202 = v199 - 8 * ((v200 >> 2) & 0xF);
            v203 = v196 + 1;
            v204 = 8;
            while (1)
            {
              v206 = v203;
              v207 = v204;
              if (v203 == v195)
                break;
              v208 = *(_QWORD *)(*((_QWORD *)*v203 - 4 * (*((_DWORD *)*v203 + 5) & 0x7FFFFFF)) + 24);
              v211 = *(_QWORD *)(v208 - 16);
              v209 = v208 - 16;
              v210 = v211;
              if ((v211 & 2) != 0)
              {
                v212 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v203 - 4 * (*((_DWORD *)*v203 + 5) & 0x7FFFFFF)) + 24)
                                 - 32);
                ++v203;
                v204 = v207 + 8;
                if (v212 != v202)
                {
LABEL_395:
                  v196 = v203 - 1;
                  goto LABEL_397;
                }
              }
              else
              {
                v205 = v209 - 8 * ((v210 >> 2) & 0xF);
                ++v203;
                v204 = v207 + 8;
                if (v205 != v202)
                  goto LABEL_395;
              }
            }
            v196 = v195;
LABEL_397:
            if (v196 != v197 && (char *)v196 - (char *)v197 <= 255)
            {
              v213 = v206 - 1;
              v214 = v197;
              while (2)
              {
                v374 = 0;
                v215 = *v214;
                v374 = (llvm::User **)*v214;
                v216 = v207;
                v217 = v197;
                do
                {
                  if (v215 != *v217
                    && llvm::DominatorTree::dominates((_anonymous_namespace_::Verifier *)((char *)this + 200), v215, *v217))
                  {
                    v189 = "llvm.experimental.noalias.scope.decl dominates another one with the same scope";
                    goto LABEL_412;
                  }
                  ++v217;
                  v216 -= 8;
                }
                while (v216);
                v144 = v213 == v214++;
                if (!v144)
                  continue;
                break;
              }
              v194 = (const llvm::Value **)*((_QWORD *)this + 276);
              v193 = *((unsigned int *)this + 554);
            }
            v195 = &v194[v193];
          }
          while (v196 != v195);
        }
      }
    }
  }
  else
  {
    v171 = *((unsigned int *)this + 72);
    if (v171 < 0x21 || 4 * (*((_DWORD *)this + 73) - *((_DWORD *)this + 74)) >= v171)
    {
      memset(v170, 255, 8 * v171);
      goto LABEL_351;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 34);
    *((_DWORD *)this + 460) = 0;
    *((_QWORD *)this + 99) = 0;
    *((_BYTE *)this + 800) = 0;
    v172 = *((_DWORD *)this + 216);
    if (v172)
      goto LABEL_353;
LABEL_352:
    if (*((_DWORD *)this + 217))
      goto LABEL_353;
LABEL_356:
    *((_DWORD *)this + 222) = 0;
    v174 = *((unsigned int *)this + 554);
    if ((_DWORD)v174)
      goto LABEL_368;
  }
LABEL_413:
  *((_DWORD *)this + 554) = 0;
  return *((_BYTE *)this + 192) == 0;
}

void `anonymous namespace'::Verifier::~Verifier(_anonymous_namespace_::Verifier *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 276);
  if (v2 != (char *)this + 2224)
    free(v2);
  llvm::GenericConvergenceVerifier<llvm::GenericSSAContext<llvm::Function>>::~GenericConvergenceVerifier((uint64_t)this + 2032);
}

uint64_t sub_180D28514()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 200);
  if (v1 != (void *)(v0 + 216))
    free(v1);
  if (*(char *)(v0 + 151) < 0)
    operator delete(*(void **)(v0 + 128));
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)(v0 + 16));
  return v0;
}

void sub_180D28580()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 200) != v0 + 216)
    JUMPOUT(0x180D28524);
  JUMPOUT(0x180D28528);
}

void llvm::verifyModule(llvm *this, const llvm::Module *a2, llvm::raw_ostream *a3, BOOL *a4)
{
  char *v6;
  uint64_t v7;
  int v8;
  const llvm::Function *v9;
  _BYTE v10[2256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 24;
  v7 = *((_QWORD *)this + 4);
  if ((char *)v7 == v6)
  {
    if (a3)
LABEL_8:
      *(_BYTE *)a3 = v10[193];
  }
  else
  {
    v8 = 0;
    do
    {
      if (v7)
        v9 = (const llvm::Function *)(v7 - 56);
      else
        v9 = 0;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while ((char *)v7 != v6);
    if (a3)
      goto LABEL_8;
  }
}

BOOL `anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Constant *v13;
  char *v14;
  uint64_t v15;
  const char *Name;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  const char *v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  const char *v24;
  uint64_t v25;
  BOOL v26;
  const char *v27;
  uint64_t v28;
  BOOL v29;
  llvm::GlobalObject *SectionImpl;
  uint64_t v32;
  int64x2_t v34;
  int8x16_t v35;
  std::string *v36;
  std::string::size_type v37;
  void *v38;
  llvm::Metadata **v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const void **v48;
  void **v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  const void **v55;
  char v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  void **v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  const void **v63;
  llvm::raw_ostream *v64;
  _BYTE *v65;
  int v66;
  _QWORD *v67;
  unsigned int v68;
  llvm::raw_ostream *v69;
  _BYTE *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  llvm::LLVMContext *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t **VoidTy;
  llvm::Type *v80;
  uint64_t PointerTo;
  uint64_t v82;
  llvm::LLVMContext *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  llvm::Value **v91;
  const char *v92;
  uint64_t v93;
  llvm::raw_ostream *v94;
  _BYTE *v95;
  llvm::raw_ostream *v96;
  _BYTE *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  uint64_t v102;
  uint64_t Int8Ty;
  uint64_t v104;
  BOOL v105;
  void *v106;
  void *v107;
  char v108;
  std::string *v109;
  char v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  void *v113;
  void *v114;
  char v115;
  char v116;
  const char *v117;
  std::string *v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  BOOL v123;
  int v124;
  uint64_t v128;
  unsigned int v129;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  int v137;
  llvm::Value *ResolverFunction;
  llvm::Value *v140;
  uint64_t v141;
  uint64_t **v142;
  llvm::Type *v143;
  char *v144;
  llvm::NamedMDNode *v145;
  llvm::NamedMDNode *v146;
  char *v147;
  unint64_t v148;
  int NumOperands;
  int v151;
  unsigned int v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  llvm::raw_ostream *v157;
  _BYTE *v158;
  char *v159;
  uint64_t v160;
  BOOL v161;
  int v163;
  int v164;
  unsigned int v165;
  uint64_t Operand;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  unint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t v180;
  llvm::Value *v181;
  unsigned int v182;
  llvm::Value *v183;
  char *v184;
  uint64_t v185;
  BOOL v186;
  llvm::raw_ostream *v187;
  _BYTE *v188;
  llvm::raw_ostream *v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  _QWORD *v197;
  uint64_t v198;
  int8x16_t *v199;
  const unsigned __int8 *v200;
  _DWORD *NamedValue;
  uint64_t v202;
  uint64_t v203;
  BOOL v204;
  llvm::NamedMDNode *ModuleFlagsMetadata;
  llvm::NamedMDNode *v206;
  int v207;
  int v208;
  unsigned int v209;
  const char *v210;
  char *v211;
  char *v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  const llvm::Module ***v219;
  char *v220;
  int v221;
  unsigned __int8 *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  _QWORD *v233;
  _BYTE *v234;
  _BYTE *v235;
  uint64_t String;
  uint64_t v237;
  _QWORD *v239;
  uint64_t v240;
  llvm::Module *v242;
  _QWORD *v243;
  uint64_t v244;
  BOOL v245;
  uint64_t v247;
  uint64_t v248;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  const llvm::Module ***v258;
  uint64_t v259;
  uint64_t i;
  const char *v261;
  const llvm::Module **v262;
  unint64_t v263;
  unsigned __int8 *v264;
  const llvm::Module ***v265;
  const llvm::Module **v266;
  llvm::Value *v267;
  unsigned __int8 *v268;
  const llvm::Module **v269;
  const llvm::Module ***v270;
  const llvm::Module ***v271;
  llvm::Value **v272;
  llvm::Value **v273;
  llvm::Value *v274;
  unint64_t v275;
  uint64_t v276;
  unsigned __int8 *v277;
  llvm::raw_ostream *v278;
  _BYTE *v279;
  _QWORD *v280;
  int v281;
  BOOL v282;
  unsigned int v283;
  _QWORD *v284;
  int v285;
  unsigned int v286;
  _BYTE *v287;
  _QWORD *v288;
  int v289;
  BOOL v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  void *v298;
  unint64_t v299;
  unint64_t *v300;
  int v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  unint64_t v307;
  int v308;
  int v309;
  llvm::Module *v310;
  llvm::NamedMDNode *NamedMetadata;
  llvm::NamedMDNode *v312;
  int v313;
  int v314;
  unsigned int v315;
  char *v316;
  char *v317;
  unint64_t v318;
  _BYTE *v319;
  uint64_t v320;
  const llvm::Module ***v321;
  llvm::Module *v322;
  llvm::NamedMDNode *v323;
  llvm::NamedMDNode *v324;
  int v325;
  int v326;
  unsigned int v327;
  char *v328;
  char *v329;
  unint64_t v330;
  _BYTE *v331;
  const llvm::Module ***v332;
  llvm::Module *v333;
  llvm::NamedMDNode *v334;
  llvm::NamedMDNode *v335;
  int v336;
  int v337;
  unsigned int j;
  const void *v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  const void **v348;
  uint64_t v349;
  const void **v350;
  uint64_t v351;
  char *v352;
  const void *v353;
  const void **BucketFor;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  _QWORD *v361;
  _WORD *v362;
  std::string::size_type *v363;
  unsigned __int16 v364;
  uint64_t v365;
  llvm::raw_ostream *v366;
  _BYTE *v367;
  const void *v368;
  uint64_t v369;
  const void **v370;
  uint64_t v371;
  int v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  const llvm::Module ***v384;
  const llvm::Module ***v385;
  void *v386;
  unsigned int v387;
  int v388;
  __int16 v389;
  void *v390[2];
  llvm::raw_ostream *v391;
  void *__p[2];
  __int128 v393;
  __int16 v394;
  int v395;
  __int16 v396;
  std::string v397;
  __int16 v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  _QWORD v403[16];

  v403[14] = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 192) = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = v4 - 56;
      else
        v5 = 0;
      if (*(_DWORD *)(v5 + 36) == 131)
      {
        v6 = *((unsigned int *)this + 304);
        if (v6 >= *((unsigned int *)this + 305))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1208, (char *)this + 1224, v6 + 1, 8);
          v6 = *((unsigned int *)this + 304);
        }
        *(_QWORD *)(*((_QWORD *)this + 151) + 8 * v6) = v5;
        ++*((_DWORD *)this + 304);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  if (*((_DWORD *)this + 210))
  {
    v7 = *((unsigned int *)this + 212);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = *((_QWORD *)this + 104);
      while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 16;
        v8 -= 16;
        if (!v8)
          goto LABEL_16;
      }
    }
    else
    {
      v9 = *((_QWORD *)this + 104);
    }
    v320 = *((_QWORD *)this + 104) + 16 * v7;
LABEL_667:
    if (v9 != v320)
    {
      __p[0] = 0;
      __p[0] = *(void **)v9;
      if (*(_DWORD *)(v9 + 12) > *(_DWORD *)(v9 + 8))
      {
        v399 = "all indices passed to llvm.localrecover must be less than the number of arguments passed to llvm.localesc"
               "ape in the parent function";
        LOWORD(v403[0]) = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
      }
      else
      {
        while (1)
        {
          v9 += 16;
          if (v9 == v320)
            break;
          if ((*(_QWORD *)v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_667;
        }
      }
    }
  }
LABEL_16:
  v10 = *((_QWORD *)this + 1);
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v10 + 16);
  if (v12 == v10 + 8)
    goto LABEL_258;
  do
  {
    if (v12)
      v15 = v12 - 56;
    else
      v15 = 0;
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v15))
      goto LABEL_26;
    v13 = *(llvm::Constant **)(v15 - 32);
    if (*(_QWORD *)v13 != *(_QWORD *)(v15 + 24))
    {
      v14 = "Global variable initializer type does not match global variable type!";
LABEL_20:
      v399 = v14;
      LOWORD(v403[0]) = 259;
      __p[0] = (void *)v15;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
      goto LABEL_21;
    }
    if ((*(_DWORD *)(v15 + 32) & 0xF) == 0xA)
    {
      if ((llvm::Constant::isNullValue(v13) & 1) == 0)
      {
        v14 = "'common' global must have a zero initializer!";
        goto LABEL_20;
      }
      if ((*(_BYTE *)(v15 + 80) & 1) != 0)
      {
        v14 = "'common' global may not be marked constant!";
        goto LABEL_20;
      }
      if (*(_QWORD *)(v15 + 48))
      {
        v14 = "'common' global may not be in a Comdat!";
        goto LABEL_20;
      }
    }
LABEL_26:
    if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
    {
      if ((Name = llvm::Value::getName((llvm::Value *)v15), v17 == 17)
        && (*(_QWORD *)Name == 0x6F6C672E6D766C6CLL ? (v18 = *((_QWORD *)Name + 1) == 0x726F74635F6C6162) : (v18 = 0),
            v18 ? (v19 = Name[16] == 115) : (v19 = 0),
            v19)
        || (v20 = llvm::Value::getName((llvm::Value *)v15), v21 == 17)
        && (*(_QWORD *)v20 == 0x6F6C672E6D766C6CLL ? (v22 = *((_QWORD *)v20 + 1) == 0x726F74645F6C6162) : (v22 = 0),
            v22 ? (v23 = v20[16] == 115) : (v23 = 0),
            v23))
      {
        if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v15) && (*(_DWORD *)(v15 + 32) & 0xF) != 6)
        {
LABEL_187:
          v14 = "invalid linkage for intrinsic global variable";
          goto LABEL_20;
        }
        if (*(_QWORD *)(v15 + 8))
          goto LABEL_180;
        v76 = *(_QWORD *)(v15 + 24);
        if (v76 && *(_BYTE *)(v76 + 8) == 17)
        {
          v77 = *(_QWORD *)(v76 + 24);
          v78 = *(unsigned __int8 *)(v77 + 8);
          VoidTy = (uint64_t **)llvm::Type::getVoidTy(*((llvm::Type **)this + 23), v75);
          v80 = (llvm::Type *)llvm::FunctionType::get(VoidTy, 0);
          PointerTo = llvm::Type::getPointerTo(v80, *(_DWORD *)(*((_QWORD *)this + 22) + 12));
          if (!v77
            || v78 != 16
            || (*(_DWORD *)(v77 + 12) & 0xFFFFFFFE) != 2
            || (v82 = PointerTo, !llvm::Type::isIntegerTy(**(llvm::Type ***)(v77 + 16), 32))
            || (v84 = *(_QWORD *)(v77 + 16), *(_QWORD *)(v84 + 8) != v82))
          {
            v399 = "wrong type for intrinsic global variable";
            LOWORD(v403[0]) = 259;
            __p[0] = (void *)v15;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
            goto LABEL_21;
          }
          if (*(_DWORD *)(v77 + 12) != 3)
          {
            v399 = "the third field of the element type is mandatory, specify ptr null to migrate from the obsoleted 2-field form";
            LOWORD(v403[0]) = 259;
            v111 = *(llvm::raw_ostream **)this;
            if (*(_QWORD *)this)
            {
              llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
              v112 = (_BYTE *)*((_QWORD *)v111 + 4);
              if ((unint64_t)v112 >= *((_QWORD *)v111 + 3))
              {
                llvm::raw_ostream::write(v111, 10);
              }
              else
              {
                *((_QWORD *)v111 + 4) = v112 + 1;
                *v112 = 10;
              }
            }
            *((_BYTE *)this + 192) = 1;
            goto LABEL_21;
          }
          v102 = *(_QWORD *)(v84 + 16);
          Int8Ty = llvm::Type::getInt8Ty(*(llvm::Type **)v102, v83);
          if (*(_BYTE *)(v102 + 8) != 15
            || ((v104 = *(_QWORD *)(v102 + 24)) != 0 ? (v105 = v104 == Int8Ty) : (v105 = 1), !v105))
          {
LABEL_234:
            v14 = "wrong type for intrinsic global variable";
            goto LABEL_20;
          }
        }
      }
    }
    if ((*(_BYTE *)(v15 + 23) & 0x10) == 0)
      goto LABEL_57;
    v24 = llvm::Value::getName((llvm::Value *)v15);
    if (v25 != 9 || (*(_QWORD *)v24 == 0x6573752E6D766C6CLL ? (v26 = v24[8] == 100) : (v26 = 0), !v26))
    {
      v27 = llvm::Value::getName((llvm::Value *)v15);
      if (v28 != 18)
        goto LABEL_57;
      v29 = *(_QWORD *)v27 == 0x6D6F632E6D766C6CLL && *((_QWORD *)v27 + 1) == 0x73752E72656C6970;
      if (!v29 || *((_WORD *)v27 + 8) != 25701)
        goto LABEL_57;
    }
    if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v15) && (*(_DWORD *)(v15 + 32) & 0xF) != 6)
      goto LABEL_187;
    if (*(_QWORD *)(v15 + 8))
    {
LABEL_180:
      v14 = "invalid uses of intrinsic global variable";
      goto LABEL_20;
    }
    v86 = *(_QWORD *)(v15 + 24);
    if (!v86 || *(_BYTE *)(v86 + 8) != 17)
      goto LABEL_57;
    v87 = *(_QWORD *)(v86 + 24);
    if (!v87 || *(_BYTE *)(v87 + 8) != 15)
      goto LABEL_234;
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v15))
      goto LABEL_57;
    v88 = *(_QWORD *)(v15 - 32);
    v386 = (void *)v88;
    if (!v88 || *(_BYTE *)(v88 + 16) != 8)
    {
      v399 = "wrong initalizer for intrinsic global variable";
      LOWORD(v403[0]) = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)&v386);
      goto LABEL_21;
    }
    v89 = *(_DWORD *)(v88 + 20);
    if ((v89 & 0x40000000) != 0)
    {
      v91 = *(llvm::Value ***)(v88 - 8);
      v90 = v89 & 0x7FFFFFF;
    }
    else
    {
      v90 = v89 & 0x7FFFFFF;
      v91 = (llvm::Value **)(v88 - 32 * v90);
    }
    if (!v90)
    {
LABEL_57:
      if ((*(_BYTE *)(v15 + 34) & 0x80) != 0)
      {
        SectionImpl = llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)v15);
        if (v32 == 12 && *(_QWORD *)SectionImpl == 0x7274702E6D766C6CLL && *((_DWORD *)SectionImpl + 2) == 1752462689)
        {
          llvm::GlobalPtrAuthInfo::tryAnalyze((llvm::GlobalPtrAuthInfo *)v15, (uint64_t)&v399);
          if ((v400 & 1) != 0)
          {
            if (v399)
            {
              v390[0] = v399;
              llvm::toString((_QWORD **)v390, &v397, v34, v35);
              v36 = std::string::insert(&v397, 0, "invalid llvm.ptrauth global: ");
              v37 = v36->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
              *(_QWORD *)&v393 = v37;
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              LOWORD(v403[0]) = 260;
              v399 = __p;
              v386 = (void *)v15;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)&v386);
              if (SBYTE7(v393) < 0)
              {
                operator delete(__p[0]);
                if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_68;
              }
              else if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_68:
                v38 = v390[0];
                if (!v390[0])
                  goto LABEL_21;
LABEL_214:
                (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
                goto LABEL_21;
              }
              operator delete(v397.__r_.__value_.__l.__data_);
              v38 = v390[0];
              if (!v390[0])
                goto LABEL_21;
              goto LABEL_214;
            }
          }
        }
      }
      v397.__r_.__value_.__r.__words[0] = (std::string::size_type)&v397.__r_.__value_.__r.__words[2];
      v397.__r_.__value_.__l.__size_ = 0x100000000;
      llvm::Value::getMetadata((mlir::BytecodeWriterConfig *)v15, 0, (uint64_t)&v397);
      if (LODWORD(v397.__r_.__value_.__r.__words[1]))
      {
        v39 = (llvm::Metadata **)v397.__r_.__value_.__r.__words[0];
        v40 = 8 * LODWORD(v397.__r_.__value_.__r.__words[1]);
        do
        {
          if (*(_BYTE *)*v39 != 8)
          {
            v399 = "!dbg attachment of global variable must be a DIGlobalVariableExpression";
            LOWORD(v403[0]) = 259;
            v71 = *(llvm::raw_ostream **)this;
            if (*(_QWORD *)this)
            {
              llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
              v72 = (_BYTE *)*((_QWORD *)v71 + 4);
              if ((unint64_t)v72 >= *((_QWORD *)v71 + 3))
              {
                llvm::raw_ostream::write(v71, 10);
              }
              else
              {
                *((_QWORD *)v71 + 4) = v72 + 1;
                *v72 = 10;
              }
            }
            *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
            *((_BYTE *)this + 193) = 1;
            goto LABEL_193;
          }
          v40 -= 8;
        }
        while (v40);
      }
      LODWORD(v397.__r_.__value_.__r.__words[1]) = 0;
      llvm::Value::getMetadata((mlir::BytecodeWriterConfig *)v15, 28, (uint64_t)&v397);
      if (!LODWORD(v397.__r_.__value_.__r.__words[1]))
      {
LABEL_158:
        if (llvm::Type::isScalableTy(*(llvm::Type **)(v15 + 24)))
        {
          v399 = "Globals cannot contain scalable types";
          LOWORD(v403[0]) = 259;
          __p[0] = (void *)v15;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
        }
        else
        {
          v85 = *(_QWORD *)(v15 + 24);
          if (v85
            && *(_BYTE *)(v85 + 8) == 21
            && !llvm::TargetExtType::hasProperty(*(const llvm::TargetExtType **)(v15 + 24), 2))
          {
            v92 = llvm::Value::getName((llvm::Value *)v15);
            v394 = 1283;
            __p[0] = "Global @";
            *(_QWORD *)&v393 = v92;
            *((_QWORD *)&v393 + 1) = v93;
            v399 = __p;
            v401 = (uint64_t)" has illegal target extension type";
            LOWORD(v403[0]) = 770;
            v94 = *(llvm::raw_ostream **)this;
            if (!*(_QWORD *)this)
              goto LABEL_192;
            llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
            v95 = (_BYTE *)*((_QWORD *)v94 + 4);
            if ((unint64_t)v95 >= *((_QWORD *)v94 + 3))
            {
              llvm::raw_ostream::write(v94, 10);
              v96 = *(llvm::raw_ostream **)this;
              *((_BYTE *)this + 192) = 1;
              if (!v96)
                goto LABEL_193;
            }
            else
            {
              *((_QWORD *)v94 + 4) = v95 + 1;
              *v95 = 10;
              v96 = *(llvm::raw_ostream **)this;
              *((_BYTE *)this + 192) = 1;
              if (!v96)
                goto LABEL_193;
            }
            v97 = (_BYTE *)*((_QWORD *)v96 + 4);
            if ((unint64_t)v97 >= *((_QWORD *)v96 + 3))
            {
              v96 = llvm::raw_ostream::write(v96, 32);
            }
            else
            {
              *((_QWORD *)v96 + 4) = v97 + 1;
              *v97 = 32;
            }
            llvm::Type::print((Type *)v85, v96, 0, 0);
          }
          if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v15))
        }
LABEL_193:
        if ((std::string::size_type *)v397.__r_.__value_.__l.__data_ != &v397.__r_.__value_.__r.__words[2])
          free(v397.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
      v41 = (uint64_t *)v397.__r_.__value_.__r.__words[0];
      v42 = 8 * LODWORD(v397.__r_.__value_.__r.__words[1]);
      while (2)
      {
        v43 = *v41;
        v45 = (unint64_t *)(*v41 - 16);
        v44 = *v45;
        if ((*v45 & 2) != 0)
        {
          if (!*(_DWORD *)(v43 - 24) || (v46 = **(_QWORD **)(v43 - 32), *(_BYTE *)v46 != 1))
          {
LABEL_163:
            v399 = "bad !vcall_visibility attachment";
            LOWORD(v403[0]) = 259;
            v73 = *(llvm::raw_ostream **)this;
            if (*(_QWORD *)this)
            {
              llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
              v74 = (_BYTE *)*((_QWORD *)v73 + 4);
              if ((unint64_t)v74 >= *((_QWORD *)v73 + 3))
              {
                llvm::raw_ostream::write(v73, 10);
              }
              else
              {
                *((_QWORD *)v73 + 4) = v74 + 1;
                *v74 = 10;
              }
            }
LABEL_192:
            *((_BYTE *)this + 192) = 1;
            goto LABEL_193;
          }
        }
        else
        {
          if ((v44 & 0x3C0) == 0)
            goto LABEL_163;
          v46 = v45[-((v44 >> 2) & 0xF)];
          if (*(_BYTE *)v46 != 1)
            goto LABEL_163;
        }
        v47 = *(_QWORD *)(v46 + 128);
        if (*(_BYTE *)(v47 + 16) != 16)
          goto LABEL_163;
        v48 = (const void **)(v47 + 24);
        LODWORD(__p[1]) = *(_DWORD *)(v47 + 32);
        if (LODWORD(__p[1]) < 0x41)
        {
          __p[0] = (void *)*v48;
          if (__p[0] == (void *)-1)
            goto LABEL_104;
LABEL_90:
          v51 = *v45;
          if ((*v45 & 2) == 0)
          {
            if ((*v45 & 0x3C0) == 0xC0)
            {
              v52 = v45[-((v51 >> 2) & 0xF) + 1];
              if (*(_BYTE *)v52 != 1)
                goto LABEL_104;
              goto LABEL_96;
            }
            v53 = (v51 >> 6) & 0xF;
LABEL_101:
            if (v53 != 1)
              goto LABEL_104;
LABEL_102:
            v56 = 1;
            if (LODWORD(__p[1]) < 0x41)
              goto LABEL_112;
            goto LABEL_110;
          }
          v53 = *(_DWORD *)(v43 - 24);
          if (v53 != 3)
            goto LABEL_101;
          v52 = *(_QWORD *)(*(_QWORD *)(v43 - 32) + 8);
          if (*(_BYTE *)v52 != 1)
            goto LABEL_104;
LABEL_96:
          v54 = *(_QWORD *)(v52 + 128);
          if (*(_BYTE *)(v54 + 16) != 16)
            goto LABEL_104;
          v55 = (const void **)(v54 + 24);
          LODWORD(v390[1]) = *(_DWORD *)(v54 + 32);
          if (LODWORD(v390[1]) >= 0x41)
          {
            v59 = v390;
            llvm::APInt::initSlowCase((llvm::APInt *)v390, v55);
            v60 = (int)v390[1];
            if (LODWORD(v390[1]) >= 0x41)
            {
              if (v60 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v390) >= 0x41)
                goto LABEL_127;
              v59 = (void **)v390[0];
            }
            if (*v59 != (void *)-1)
              goto LABEL_119;
          }
          else
          {
            v390[0] = (void *)*v55;
            if (v390[0] == (void *)-1)
              goto LABEL_127;
LABEL_119:
            if ((*v45 & 2) != 0)
            {
              v61 = *(_QWORD *)(*(_QWORD *)(v43 - 32) + 16);
              if (*(_BYTE *)v61 != 1)
                goto LABEL_127;
            }
            else
            {
              v61 = v45[-((*v45 >> 2) & 0xF) + 2];
              if (*(_BYTE *)v61 != 1)
                goto LABEL_127;
            }
            v62 = *(_QWORD *)(v61 + 128);
            if (*(_BYTE *)(v62 + 16) == 16)
            {
              v63 = (const void **)(v62 + 24);
              v387 = *(_DWORD *)(v62 + 32);
              if (v387 >= 0x41)
              {
                v67 = &v386;
                llvm::APInt::initSlowCase((llvm::APInt *)&v386, v63);
                v68 = v387;
                if (v387 >= 0x41)
                {
                  if (v68 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v386) >= 0x41)
                    goto LABEL_143;
                  v67 = v386;
                }
                if (*v67 != -1)
                  goto LABEL_142;
LABEL_143:
                v399 = "bad !vcall_visibility attachment";
                LOWORD(v403[0]) = 259;
                v69 = *(llvm::raw_ostream **)this;
                if (*(_QWORD *)this)
                {
                  llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
                  v70 = (_BYTE *)*((_QWORD *)v69 + 4);
                  if ((unint64_t)v70 < *((_QWORD *)v69 + 3))
                  {
                    *((_QWORD *)v69 + 4) = v70 + 1;
                    *v70 = 10;
                    v66 = 1;
                    *((_BYTE *)this + 192) = 1;
                    if (v387 >= 0x41)
                      goto LABEL_151;
                    goto LABEL_132;
                  }
                  llvm::raw_ostream::write(v69, 10);
                }
                v66 = 1;
                *((_BYTE *)this + 192) = 1;
                if (v387 >= 0x41)
                  goto LABEL_151;
                goto LABEL_132;
              }
              v386 = (void *)*v63;
              if (v386 == (void *)-1)
                goto LABEL_143;
LABEL_142:
              if ((int)llvm::APInt::compare((llvm::APInt *)v390, (const llvm::APInt *)&v386) >= 1)
                goto LABEL_143;
              v66 = 0;
              if (v387 >= 0x41)
              {
LABEL_151:
                if (v386)
                  operator delete[](v386);
              }
LABEL_132:
              if (LODWORD(v390[1]) >= 0x41 && v390[0])
                operator delete[](v390[0]);
              if (!v66)
                goto LABEL_102;
              v56 = 0;
              if (LODWORD(__p[1]) < 0x41)
              {
LABEL_112:
                if ((v56 & 1) == 0)
                  goto LABEL_193;
                ++v41;
                v42 -= 8;
                if (!v42)
                  goto LABEL_158;
                continue;
              }
LABEL_110:
              if (__p[0])
                operator delete[](__p[0]);
              goto LABEL_112;
            }
          }
LABEL_127:
          v399 = "bad !vcall_visibility attachment";
          LOWORD(v403[0]) = 259;
          v64 = *(llvm::raw_ostream **)this;
          if (*(_QWORD *)this)
          {
            llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
            v65 = (_BYTE *)*((_QWORD *)v64 + 4);
            if ((unint64_t)v65 >= *((_QWORD *)v64 + 3))
            {
              llvm::raw_ostream::write(v64, 10);
            }
            else
            {
              *((_QWORD *)v64 + 4) = v65 + 1;
              *v65 = 10;
            }
          }
          v66 = 1;
          *((_BYTE *)this + 192) = 1;
          goto LABEL_132;
        }
        break;
      }
      v49 = __p;
      llvm::APInt::initSlowCase((llvm::APInt *)__p, v48);
      v50 = (int)__p[1];
      if (LODWORD(__p[1]) >= 0x41)
      {
        if (v50 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) >= 0x41)
          goto LABEL_104;
        v49 = (void **)__p[0];
      }
      if (*v49 != (void *)-1)
        goto LABEL_90;
LABEL_104:
      v399 = "bad !vcall_visibility attachment";
      LOWORD(v403[0]) = 259;
      v57 = *(llvm::raw_ostream **)this;
      if (*(_QWORD *)this)
      {
        llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
        v58 = (_BYTE *)*((_QWORD *)v57 + 4);
        if ((unint64_t)v58 >= *((_QWORD *)v57 + 3))
        {
          llvm::raw_ostream::write(v57, 10);
          v56 = 0;
          *((_BYTE *)this + 192) = 1;
          if (LODWORD(__p[1]) < 0x41)
            goto LABEL_112;
          goto LABEL_110;
        }
        *((_QWORD *)v57 + 4) = v58 + 1;
        *v58 = 10;
      }
      v56 = 0;
      *((_BYTE *)this + 192) = 1;
      if (LODWORD(__p[1]) < 0x41)
        goto LABEL_112;
      goto LABEL_110;
    }
    v98 = 32 * v90;
    while (1)
    {
      v99 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*v91);
      v391 = (llvm::raw_ostream *)v99;
      v100 = v99[16];
      if (v100 > 3 || v100 == 2)
      {
        v397.__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid ";
        v398 = 259;
        v113 = (void *)llvm::Value::getName((llvm::Value *)v15);
        v115 = v398;
        if (v398 == 1)
        {
          __p[0] = v113;
          __p[1] = v114;
          v393 = *(_OWORD *)v390;
          v394 = 261;
          v395 = v388;
          v396 = v389;
          v110 = 5;
        }
        else
        {
          if (!(_BYTE)v398)
          {
LABEL_245:
            v110 = 0;
            v394 = 256;
            v116 = 1;
            goto LABEL_256;
          }
          v118 = (std::string *)v397.__r_.__value_.__r.__words[0];
          v110 = 2;
          if (HIBYTE(v398) != 1)
          {
            v115 = 2;
            v118 = &v397;
          }
          __p[0] = v118;
          __p[1] = (void *)v397.__r_.__value_.__l.__size_;
          *(_QWORD *)&v393 = v113;
          *((_QWORD *)&v393 + 1) = v114;
          LOBYTE(v394) = v115;
          HIBYTE(v394) = 5;
          v113 = __p;
        }
        v399 = v113;
        v400 = (uint64_t)v114;
        v116 = 3;
        v117 = " member";
        goto LABEL_255;
      }
      if ((v99[23] & 0x10) == 0)
        break;
      v91 += 4;
      v98 -= 32;
      if (!v98)
        goto LABEL_57;
    }
    v397.__r_.__value_.__r.__words[0] = (std::string::size_type)"members of ";
    v398 = 259;
    v106 = (void *)llvm::Value::getName((llvm::Value *)v15);
    v108 = v398;
    if (v398 == 1)
    {
      __p[0] = v106;
      __p[1] = v107;
      v393 = *(_OWORD *)v390;
      v394 = 261;
      v395 = v388;
      v396 = v389;
      v110 = 5;
      goto LABEL_247;
    }
    if (!(_BYTE)v398)
      goto LABEL_245;
    v109 = (std::string *)v397.__r_.__value_.__r.__words[0];
    v110 = 2;
    if (HIBYTE(v398) != 1)
    {
      v108 = 2;
      v109 = &v397;
    }
    __p[0] = v109;
    __p[1] = (void *)v397.__r_.__value_.__l.__size_;
    *(_QWORD *)&v393 = v106;
    *((_QWORD *)&v393 + 1) = v107;
    LOBYTE(v394) = v108;
    HIBYTE(v394) = 5;
    v106 = __p;
LABEL_247:
    v399 = v106;
    v400 = (uint64_t)v107;
    v116 = 3;
    v117 = " must be named";
LABEL_255:
    v401 = (uint64_t)v117;
LABEL_256:
    LOBYTE(v403[0]) = v110;
    BYTE1(v403[0]) = v116;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, &v391);
LABEL_21:
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12 != v11);
  v10 = *((_QWORD *)this + 1);
LABEL_258:
  v119 = v10 + 40;
  v120 = *(_QWORD *)(v10 + 48);
  if (v120 != v10 + 40)
  {
    while (1)
    {
      if (v120)
        v121 = (_DWORD *)(v120 - 48);
      else
        v121 = 0;
      v122 = v121[8];
      v123 = (v122 & 0xFu) > 8 || ((1 << (v122 & 0xF)) & 0x181) == 0;
      v124 = v122 & 0xE;
      if (v123 && v124 != 2 && v124 != 4 && (v121[8] & 0xF) != 1)
      {
        v131 = "Alias should have private, internal, linkonce, weak, linkonce_odr, weak_odr, external, or available_externally linkage!";
        goto LABEL_291;
      }
      v128 = *((_QWORD *)v121 - 4);
      if (!v128)
      {
        v399 = "Aliasee cannot be NULL!";
        goto LABEL_261;
      }
      if (*(_QWORD *)v121 != *(_QWORD *)v128)
        break;
      v129 = *(unsigned __int8 *)(v128 + 16);
      if (v129 >= 4 && v129 != 5)
      {
        v131 = "Aliasee should be either GlobalValue or ConstantExpr";
LABEL_291:
        v399 = v131;
LABEL_261:
        LOWORD(v403[0]) = 259;
        __p[0] = v121;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
        v120 = *(_QWORD *)(v120 + 8);
        if (v120 == v119)
          goto LABEL_292;
        continue;
      }
      v399 = v403;
      v400 = (uint64_t)v403;
      v402 = 0;
      v401 = 0x100000004;
      v403[0] = v121;
      if ((void *)v400 != v399)
        free((void *)v400);
      v120 = *(_QWORD *)(v120 + 8);
      if (v120 == v119)
      {
LABEL_292:
        v10 = *((_QWORD *)this + 1);
        goto LABEL_293;
      }
    }
    v399 = "Alias and aliasee types should match!";
    goto LABEL_261;
  }
LABEL_293:
  v132 = v10 + 56;
  v133 = *(_QWORD *)(v10 + 64);
  if (v133 == v10 + 56)
    goto LABEL_315;
  while (2)
  {
    if (v133)
      v134 = v133 - 56;
    else
      v134 = 0;
    v135 = *(_DWORD *)(v134 + 32) & 0xF;
    v136 = v135 > 8;
    v137 = (1 << v135) & 0x1BD;
    if (v136 || v137 == 0)
    {
      v144 = "IFunc should have private, internal, linkonce, weak, linkonce_odr, weak_odr, or external linkage!";
LABEL_311:
      v399 = v144;
      goto LABEL_312;
    }
    ResolverFunction = llvm::GlobalIFunc::getResolverFunction((llvm::Value **)v134);
    if (!ResolverFunction)
    {
      v399 = "IFunc must have a Function resolver";
LABEL_312:
      LOWORD(v403[0]) = 259;
      __p[0] = (void *)v134;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
      goto LABEL_313;
    }
    v140 = ResolverFunction;
    if ((*((_DWORD *)ResolverFunction + 8) & 0xF) == 1 || llvm::GlobalValue::isDeclaration(ResolverFunction))
    {
      v399 = "IFunc resolver must be a definition";
      goto LABEL_312;
    }
    if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v140 + 3) + 16) + 8) != 15)
    {
      v144 = "IFunc resolver must return a pointer";
      goto LABEL_311;
    }
    v141 = **(_QWORD **)(v134 - 32);
    v142 = (uint64_t **)llvm::Type::getPointerTo(*(llvm::Type **)(v134 + 24), 0);
    v143 = (llvm::Type *)llvm::FunctionType::get(v142, 0);
    if (v141 != llvm::Type::getPointerTo(v143, *(_DWORD *)(*(_QWORD *)v134 + 8) >> 8))
    {
      v144 = "IFunc resolver has incorrect type";
      goto LABEL_311;
    }
LABEL_313:
    v133 = *(_QWORD *)(v133 + 8);
    if (v133 != v132)
      continue;
    break;
  }
  v10 = *((_QWORD *)this + 1);
LABEL_315:
  v145 = (llvm::NamedMDNode *)(v10 + 72);
  v146 = *(llvm::NamedMDNode **)(v10 + 80);
  if (v146 == (llvm::NamedMDNode *)(v10 + 72))
    goto LABEL_406;
  while (2)
  {
    v147 = llvm::NamedMDNode::getName(v146);
    if (v148 >= 9 && *(_QWORD *)v147 == 0x6762642E6D766C6CLL && v147[8] == 46)
    {
      v184 = llvm::NamedMDNode::getName(v146);
      if (v185 != 11
        || (*(_QWORD *)v184 == 0x6762642E6D766C6CLL
          ? (v186 = *(_QWORD *)(v184 + 3) == 0x75632E6762642E6DLL)
          : (v186 = 0),
            !v186))
      {
        v399 = "unrecognized named metadata node in the llvm.dbg namespace";
        LOWORD(v403[0]) = 259;
        __p[0] = v146;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::NamedMDNode const*>(this, (llvm::Twine *)&v399, (llvm::NamedMDNode **)__p);
        goto LABEL_318;
      }
    }
    NumOperands = llvm::NamedMDNode::getNumOperands(v146);
    if (!NumOperands)
    {
LABEL_340:
      v159 = llvm::NamedMDNode::getName(v146);
      if (v160 != 21)
        goto LABEL_318;
      v161 = *(_QWORD *)v159 == 0x6573752E6D766C6CLL && *((_QWORD *)v159 + 1) == 0x7469646E6F632E64;
      if (!v161 || *(_QWORD *)(v159 + 13) != 0x6C616E6F69746964)
        goto LABEL_318;
      v163 = llvm::NamedMDNode::getNumOperands(v146);
      if (!v163)
        goto LABEL_318;
      v164 = v163;
      v165 = 0;
      while (1)
      {
        Operand = llvm::NamedMDNode::getOperand(v146, v165);
        v167 = Operand - 16;
        v168 = *(_QWORD *)(Operand - 16);
        if ((v168 & 2) != 0)
        {
          if (*(_DWORD *)(Operand - 24) != 3)
            goto LABEL_396;
          v169 = **(_QWORD **)(Operand - 32);
          if (!v169)
            goto LABEL_360;
        }
        else
        {
          if ((*(_QWORD *)(Operand - 16) & 0x3C0) != 0xC0)
            goto LABEL_396;
          v169 = *(_QWORD *)(v167 - 8 * ((v168 >> 2) & 0xF));
          if (!v169)
            goto LABEL_360;
        }
        if (*(_BYTE *)v169 != 1 || *(unsigned __int8 *)(*(_QWORD *)(v169 + 128) + 16) >= 4u)
          goto LABEL_396;
LABEL_360:
        if ((v168 & 2) != 0)
        {
          v170 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(Operand - 32) + 8) + 128);
          v171 = *(_DWORD *)(v170 + 32);
          if (v171 > 0x40)
          {
LABEL_362:
            if (**(_QWORD **)(v170 + 24) >= 2uLL)
              goto LABEL_396;
            goto LABEL_366;
          }
        }
        else
        {
          v170 = *(_QWORD *)(*(_QWORD *)(v167 - 8 * ((v168 >> 2) & 0xF) + 8) + 128);
          v171 = *(_DWORD *)(v170 + 32);
          if (v171 > 0x40)
            goto LABEL_362;
        }
        if ((unint64_t)((uint64_t)(*(_QWORD *)(v170 + 24) << -(char)v171) >> -(char)v171) >= 2)
          goto LABEL_396;
LABEL_366:
        if ((v168 & 2) != 0)
        {
          v172 = *(unsigned __int8 **)(*(_QWORD *)(Operand - 32) + 16);
          if (*v172 - 5 >= 0x1F)
            goto LABEL_396;
        }
        else
        {
          v172 = *(unsigned __int8 **)(Operand - 8 * ((v168 >> 2) & 0xF));
          if (*v172 - 5 >= 0x1F)
            goto LABEL_396;
        }
        v173 = v172 - 16;
        v174 = *((_QWORD *)v172 - 2);
        if ((v174 & 2) != 0)
        {
          v178 = *((unsigned int *)v172 - 6);
          if (!(_DWORD)v178)
          {
LABEL_396:
            v399 = "invalid llvm.used.conditional member";
            LOWORD(v403[0]) = 259;
            v187 = *(llvm::raw_ostream **)this;
            if (*(_QWORD *)this)
            {
              llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
              v188 = (_BYTE *)*((_QWORD *)v187 + 4);
              if ((unint64_t)v188 >= *((_QWORD *)v187 + 3))
              {
                llvm::raw_ostream::write(v187, 10);
              }
              else
              {
                *((_QWORD *)v187 + 4) = v188 + 1;
                *v188 = 10;
              }
            }
            *((_BYTE *)this + 192) = 1;
            goto LABEL_318;
          }
          v176 = (unsigned __int8 *)*((_QWORD *)v172 - 4);
          v177 = &v176[8 * v178];
LABEL_382:
          while (2)
          {
            v180 = *(_QWORD *)v176;
            if (*(_QWORD *)v176)
            {
              if (*(_BYTE *)v180 == 1)
              {
                v181 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v180 + 128));
                v182 = *((unsigned __int8 *)v181 + 16);
                if (!v181)
                  goto LABEL_376;
LABEL_387:
                if (v182 - 13 <= 0xFFFFFFFD)
                  goto LABEL_376;
              }
              else
              {
                v183 = llvm::Value::stripPointerCasts(0);
                v182 = *((unsigned __int8 *)v183 + 16);
                if (v183)
                  goto LABEL_387;
LABEL_376:
                if (v182 >= 4 && v182 != 19)
                  goto LABEL_396;
              }
            }
            v176 += 8;
            if (v176 == v177)
              goto LABEL_351;
            continue;
          }
        }
        if ((v174 & 0x3C0) == 0)
          goto LABEL_396;
        v175 = (v174 >> 6) & 0xF;
        if (v175)
        {
          v176 = &v173[-8 * ((v174 >> 2) & 0xF)];
          v177 = &v176[8 * v175];
          goto LABEL_382;
        }
LABEL_351:
        if (v164 == ++v165)
          goto LABEL_318;
      }
    }
    v151 = NumOperands;
    v152 = 0;
    while (1)
    {
      v153 = (_QWORD *)llvm::NamedMDNode::getOperand(v146, v152);
      v154 = llvm::NamedMDNode::getName(v146);
      if (v155 == 11 && *(_QWORD *)v154 == 0x6762642E6D766C6CLL && *(_QWORD *)(v154 + 3) == 0x75632E6762642E6DLL)
        break;
      if (v153)
        goto LABEL_327;
LABEL_328:
      if (v151 == ++v152)
        goto LABEL_340;
    }
    if (v153 && *(_BYTE *)v153 == 17)
    {
LABEL_327:
      goto LABEL_328;
    }
    v399 = "invalid compile unit";
    LOWORD(v403[0]) = 259;
    v157 = *(llvm::raw_ostream **)this;
    if (*(_QWORD *)this)
    {
      llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
      v158 = (_BYTE *)*((_QWORD *)v157 + 4);
      if ((unint64_t)v158 >= *((_QWORD *)v157 + 3))
      {
        llvm::raw_ostream::write(v157, 10);
      }
      else
      {
        *((_QWORD *)v157 + 4) = v158 + 1;
        *v158 = 10;
      }
      v189 = *(llvm::raw_ostream **)this;
      *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
      *((_BYTE *)this + 193) = 1;
      if (v189)
        llvm::NamedMDNode::print(v146, v189, (_anonymous_namespace_::Verifier *)((char *)this + 16), 0);
    }
    else
    {
      *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
      *((_BYTE *)this + 193) = 1;
    }
LABEL_318:
    v146 = (llvm::NamedMDNode *)*((_QWORD *)v146 + 1);
    if (v146 != v145)
      continue;
    break;
  }
  v10 = *((_QWORD *)this + 1);
LABEL_406:
  v190 = *(_QWORD **)(v10 + 120);
  v191 = *(unsigned int *)(v10 + 128);
  if (!(_DWORD)v191)
  {
    v192 = *(_QWORD **)(v10 + 120);
    v197 = &v190[v191];
    if (v190 != v197)
      goto LABEL_417;
LABEL_429:
    ModuleFlagsMetadata = (llvm::NamedMDNode *)llvm::Module::getModuleFlagsMetadata((llvm::Module *)v10);
    if (!ModuleFlagsMetadata)
      goto LABEL_653;
    goto LABEL_430;
  }
  v192 = *(_QWORD **)(v10 + 120);
  if (*v190)
    v193 = *v190 == -8;
  else
    v193 = 1;
  if (v193)
  {
    do
    {
      v195 = v192[1];
      ++v192;
      v194 = v195;
      if (v195)
        v196 = v194 == -8;
      else
        v196 = 1;
    }
    while (v196);
  }
  v197 = &v190[v191];
  if (v192 == v197)
    goto LABEL_429;
  do
  {
LABEL_417:
    if (*((_DWORD *)this + 43) == 1)
    {
      v198 = *((_QWORD *)this + 1);
      v199 = (int8x16_t *)llvm::Comdat::getName((llvm::Comdat *)(*v192 + 8));
      NamedValue = (_DWORD *)llvm::Module::getNamedValue(v198, v199, v200);
      __p[0] = NamedValue;
      if (NamedValue)
      {
        if ((NamedValue[8] & 0xF) == 8)
        {
          v399 = "comdat global value has private linkage";
          LOWORD(v403[0]) = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (llvm::Twine *)&v399, (llvm::raw_ostream **)__p);
        }
      }
    }
    do
    {
      v203 = v192[1];
      ++v192;
      v202 = v203;
      if (v203)
        v204 = v202 == -8;
      else
        v204 = 1;
    }
    while (v204);
  }
  while (v192 != v197);
  ModuleFlagsMetadata = (llvm::NamedMDNode *)llvm::Module::getModuleFlagsMetadata(*((llvm::Module **)this + 1));
  if (ModuleFlagsMetadata)
  {
LABEL_430:
    v206 = ModuleFlagsMetadata;
    memset(&v397, 0, 20);
    v399 = &v401;
    v400 = 0x1000000000;
    v207 = llvm::NamedMDNode::getNumOperands(ModuleFlagsMetadata);
    if (v207)
    {
      v208 = v207;
      v209 = 0;
      v210 = "invalid ID operand in module flag (expected metadata string)";
      while (1)
      {
        v211 = (char *)llvm::NamedMDNode::getOperand(v206, v209);
        v212 = v211;
        v390[0] = v211;
        v214 = v211 - 16;
        v213 = *((_QWORD *)v211 - 2);
        if ((v213 & 2) != 0)
        {
          if (*((_DWORD *)v211 - 6) != 3)
          {
LABEL_432:
            __p[0] = "incorrect number of operands in module flag";
            v394 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, (const llvm::Module ***)v390);
            goto LABEL_433;
          }
          LODWORD(v391) = 0;
          if ((llvm::Module::isValidModFlagBehavior(**((_QWORD **)v211 - 4), &v391) & 1) == 0)
          {
LABEL_437:
            v215 = *(_QWORD *)v214;
            if ((*(_QWORD *)v214 & 2) != 0)
            {
              v216 = **((_QWORD **)v212 - 4);
              if (!v216)
                goto LABEL_450;
            }
            else
            {
              v216 = *(_QWORD *)&v214[-8 * ((v215 >> 2) & 0xF)];
              if (!v216)
                goto LABEL_450;
            }
            if (*(_BYTE *)v216 == 1 && *(_BYTE *)(*(_QWORD *)(v216 + 128) + 16) == 16)
            {
              __p[0] = "invalid behavior operand in module flag (unexpected constant)";
              v394 = 259;
              if ((v215 & 2) != 0)
              {
LABEL_449:
                v219 = (const llvm::Module ***)*((_QWORD *)v212 - 4);
                goto LABEL_458;
              }
            }
            else
            {
LABEL_450:
              __p[0] = "invalid behavior operand in module flag (expected constant integer)";
              v394 = 259;
              if ((v215 & 2) != 0)
                goto LABEL_449;
            }
            v219 = (const llvm::Module ***)&v214[-8 * ((v215 >> 2) & 0xF)];
            goto LABEL_458;
          }
        }
        else
        {
          if ((*((_QWORD *)v211 - 2) & 0x3C0) != 0xC0)
            goto LABEL_432;
          LODWORD(v391) = 0;
          if ((llvm::Module::isValidModFlagBehavior(*(_QWORD *)&v214[-8 * ((v213 >> 2) & 0xF)], &v391) & 1) == 0)
            goto LABEL_437;
        }
        v217 = *(_QWORD *)v214;
        if ((*(_QWORD *)v214 & 2) != 0)
        {
          v218 = *(_BYTE **)(*((_QWORD *)v212 - 4) + 8);
          if (!v218)
            goto LABEL_454;
        }
        else
        {
          v218 = *(_BYTE **)&v214[-8 * ((v217 >> 2) & 0xF) + 8];
          if (!v218)
            goto LABEL_454;
        }
        if (*v218)
        {
LABEL_454:
          v386 = 0;
          __p[0] = (void *)v210;
          v394 = 259;
          if ((v217 & 2) != 0)
            v220 = (char *)*((_QWORD *)v212 - 4);
          else
            v220 = &v214[-8 * ((v217 >> 2) & 0xF)];
          v219 = (const llvm::Module ***)(v220 + 8);
          goto LABEL_458;
        }
        v386 = v218;
        v221 = (int)v391;
        switch((int)v391)
        {
          case 3:
            if ((v217 & 2) != 0)
            {
              v222 = *(unsigned __int8 **)(*((_QWORD *)v212 - 4) + 16);
              if (*v222 - 5 > 0x1E)
                goto LABEL_496;
            }
            else
            {
              v222 = *(unsigned __int8 **)&v214[-8 * ((v217 >> 2) & 0xF) + 16];
              if (*v222 - 5 > 0x1E)
                goto LABEL_496;
            }
            v225 = *((_QWORD *)v222 - 2);
            if ((v225 & 2) != 0)
            {
              if (*((_DWORD *)v222 - 6) != 2)
              {
LABEL_496:
                __p[0] = "invalid value for 'require' module flag (expected metadata pair)";
                v394 = 259;
                v210 = "invalid ID operand in module flag (expected metadata string)";
                if ((v217 & 2) != 0)
                  goto LABEL_492;
                goto LABEL_465;
              }
              if (***((_BYTE ***)v222 - 4))
              {
                __p[0] = "invalid value for 'require' module flag (first value operand should be a string)";
                v394 = 259;
                v219 = (const llvm::Module ***)*((_QWORD *)v222 - 4);
                v210 = "invalid ID operand in module flag (expected metadata string)";
                goto LABEL_458;
              }
            }
            else
            {
              if ((*((_QWORD *)v222 - 2) & 0x3C0) != 0x80)
                goto LABEL_496;
              v219 = (const llvm::Module ***)&v222[-8 * ((v225 >> 2) & 0xF) - 16];
              if (*(_BYTE *)*v219)
              {
                __p[0] = "invalid value for 'require' module flag (first value operand should be a string)";
                v394 = 259;
                v210 = "invalid ID operand in module flag (expected metadata string)";
                goto LABEL_458;
              }
            }
            v230 = v400;
            if (v400 >= (unint64_t)HIDWORD(v400))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v399, &v401, v400 + 1, 8);
              v230 = v400;
              v221 = (int)v391;
            }
            else
            {
              v221 = 3;
            }
            *((_QWORD *)v399 + v230) = v222;
            LODWORD(v400) = v400 + 1;
            v210 = "invalid ID operand in module flag (expected metadata string)";
LABEL_501:
            if (v221 != 3)
              goto LABEL_502;
            goto LABEL_510;
          case 5:
          case 6:
            if ((v217 & 2) != 0)
            {
              if (**(unsigned __int8 **)(*((_QWORD *)v212 - 4) + 16) - 5 >= 0x1F)
              {
LABEL_464:
                __p[0] = "invalid value for 'append'-type module flag (expected a metadata node)";
                v394 = 259;
                if ((v217 & 2) != 0)
                {
LABEL_492:
                  v219 = (const llvm::Module ***)(*((_QWORD *)v212 - 4) + 16);
                  goto LABEL_458;
                }
LABEL_465:
                v219 = (const llvm::Module ***)&v214[-8 * ((v217 >> 2) & 0xF) + 16];
LABEL_458:
                llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, v219);
                goto LABEL_433;
              }
            }
            else if (**(unsigned __int8 **)&v214[-8 * ((v217 >> 2) & 0xF) + 16] - 5 >= 0x1F)
            {
              goto LABEL_464;
            }
LABEL_502:
            v231 = v397.__r_.__value_.__r.__words[2];
            if (!LODWORD(v397.__r_.__value_.__r.__words[2]))
              goto LABEL_609;
            v232 = (LODWORD(v397.__r_.__value_.__r.__words[2]) - 1) & ((v218 >> 4) ^ (v218 >> 9));
            v233 = (_QWORD *)(v397.__r_.__value_.__r.__words[0] + 16 * v232);
            v234 = (_BYTE *)*v233;
            if (v218 == (_BYTE *)*v233)
            {
LABEL_504:
              __p[0] = "module flag identifiers must be unique (or of 'require' type)";
              v394 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, (const llvm::Module ***)&v386);
              goto LABEL_433;
            }
            v280 = 0;
            v281 = 1;
            while (v234 != (_BYTE *)-4096)
            {
              if (v280)
                v282 = 0;
              else
                v282 = v234 == (_BYTE *)-8192;
              if (v282)
                v280 = v233;
              v283 = v232 + v281++;
              v232 = v283 & (LODWORD(v397.__r_.__value_.__r.__words[2]) - 1);
              v233 = (_QWORD *)(v397.__r_.__value_.__r.__words[0] + 16 * v232);
              v234 = (_BYTE *)*v233;
              if (v218 == (_BYTE *)*v233)
                goto LABEL_504;
            }
            v284 = v280 ? v280 : v233;
            if (4 * LODWORD(v397.__r_.__value_.__r.__words[1]) + 4 < (3
                                                                                   * LODWORD(v397.__r_.__value_.__r.__words[2])))
            {
              if ((LODWORD(v397.__r_.__value_.__r.__words[2])
                                + ~LODWORD(v397.__r_.__value_.__r.__words[1])
                                - HIDWORD(v397.__r_.__value_.__r.__words[1])) > LODWORD(v397.__r_.__value_.__r.__words[2]) >> 3)
              {
                v235 = (_BYTE *)*v284;
                ++LODWORD(v397.__r_.__value_.__r.__words[1]);
                if (v235 == (_BYTE *)-4096)
                  goto LABEL_509;
LABEL_508:
                --HIDWORD(v397.__r_.__value_.__r.__words[1]);
                goto LABEL_509;
              }
            }
            else
            {
LABEL_609:
              v231 = 2 * LODWORD(v397.__r_.__value_.__r.__words[2]);
            }
            llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v397, v231);
            v285 = LODWORD(v397.__r_.__value_.__r.__words[2]) - 1;
            v286 = (LODWORD(v397.__r_.__value_.__r.__words[2]) - 1) & ((v218 >> 4) ^ (v218 >> 9));
            v284 = (_QWORD *)(v397.__r_.__value_.__r.__words[0] + 16 * v286);
            v287 = (_BYTE *)*v284;
            if (v218 == (_BYTE *)*v284)
            {
LABEL_611:
              ++LODWORD(v397.__r_.__value_.__r.__words[1]);
              if (v218 != (_BYTE *)-4096)
                goto LABEL_508;
            }
            else
            {
              v288 = 0;
              v289 = 1;
              while (v287 != (_BYTE *)-4096)
              {
                if (v288)
                  v290 = 0;
                else
                  v290 = v287 == (_BYTE *)-8192;
                if (v290)
                  v288 = v284;
                v291 = v286 + v289++;
                v286 = v291 & v285;
                v284 = (_QWORD *)(v397.__r_.__value_.__r.__words[0] + 16 * (v291 & v285));
                v287 = (_BYTE *)*v284;
                if (v218 == (_BYTE *)*v284)
                  goto LABEL_611;
              }
              if (v288)
                v284 = v288;
              v292 = *v284;
              ++LODWORD(v397.__r_.__value_.__r.__words[1]);
              if (v292 != -4096)
                goto LABEL_508;
            }
LABEL_509:
            *v284 = v218;
            v284[1] = v212;
LABEL_510:
            String = llvm::MDString::getString((llvm::MDString *)v218);
            if (v237 == 10 && *(_QWORD *)String == 0x69735F7261686377 && *(_WORD *)(String + 8) == 25978)
            {
              v251 = (*(_QWORD *)v214 & 2) != 0
                   ? (char *)*((_QWORD *)v212 - 4)
                   : &v214[-8 * ((*(_QWORD *)v214 >> 2) & 0xFLL)];
              v253 = *((_QWORD *)v251 + 2);
              if (!v253 || *(_BYTE *)v253 != 1 || *(_BYTE *)(*(_QWORD *)(v253 + 128) + 16) != 16)
              {
                v254 = "wchar_size metadata requires constant integer argument";
LABEL_591:
                __p[0] = (void *)v254;
                v394 = 259;
                v278 = *(llvm::raw_ostream **)this;
                if (*(_QWORD *)this)
                {
                  llvm::Twine::print((llvm::Twine *)__p, *(llvm::raw_ostream **)this);
                  v279 = (_BYTE *)*((_QWORD *)v278 + 4);
                  if ((unint64_t)v279 >= *((_QWORD *)v278 + 3))
                  {
                    llvm::raw_ostream::write(v278, 10);
                  }
                  else
                  {
                    *((_QWORD *)v278 + 4) = v279 + 1;
                    *v279 = 10;
                  }
                }
                *((_BYTE *)this + 192) = 1;
                goto LABEL_433;
              }
            }
            v239 = (_QWORD *)llvm::MDString::getString((llvm::MDString *)v218);
            if (v240 == 14 && *v239 == 0x4F2072656B6E694CLL && *(_QWORD *)((char *)v239 + 6) == 0x736E6F6974704F20)
            {
              v242 = (llvm::Module *)*((_QWORD *)this + 1);
              __p[0] = "llvm.linker.options";
              v394 = 259;
              if (!llvm::Module::getNamedMetadata(v242, (const char **)__p))
              {
                v254 = "'Linker Options' named metadata no longer supported";
                goto LABEL_591;
              }
            }
            v243 = (_QWORD *)llvm::MDString::getString((llvm::MDString *)v218);
            if (v244 == 21)
            {
              v245 = *v243 == 0x6369746E616D6553 && v243[1] == 0x736F707265746E49;
              if (v245 && *(_QWORD *)((char *)v243 + 13) == 0x6E6F697469736F70)
              {
                v252 = (*(_QWORD *)v214 & 2) != 0
                     ? (char *)*((_QWORD *)v212 - 4)
                     : &v214[-8 * ((*(_QWORD *)v214 >> 2) & 0xFLL)];
                v255 = *((_QWORD *)v252 + 2);
                if (!v255 || *(_BYTE *)v255 != 1 || *(_BYTE *)(*(_QWORD *)(v255 + 128) + 16) != 16)
                {
                  v254 = "SemanticInterposition metadata requires constant integer argument";
                  goto LABEL_591;
                }
              }
            }
            v247 = llvm::MDString::getString((llvm::MDString *)v218);
            if (v248 == 10 && *(_QWORD *)v247 == 0x69666F7250204743 && *(_WORD *)(v247 + 8) == 25964)
            {
              v250 = (*(_QWORD *)v214 & 2) != 0
                   ? (char *)*((_QWORD *)v212 - 4)
                   : &v214[-8 * ((*(_QWORD *)v214 >> 2) & 0xFLL)];
              v256 = *((_QWORD *)v250 + 2);
              v257 = *(_QWORD *)(v256 - 16);
              if ((v257 & 2) != 0)
              {
                v258 = *(const llvm::Module ****)(v256 - 32);
                v259 = *(unsigned int *)(v256 - 24);
              }
              else
              {
                v258 = (const llvm::Module ***)(v256 - 16 - 8 * ((v257 >> 2) & 0xF));
                v259 = (v257 >> 6) & 0xF;
              }
              if (v259)
              {
                for (i = 8 * v259; i; i -= 8)
                {
                  v261 = v210;
                  v262 = *v258;
                  if (*v258 && *(unsigned __int8 *)v262 - 5 <= 0x1E)
                  {
                    v264 = (unsigned __int8 *)(v262 - 2);
                    v263 = (unint64_t)*(v262 - 2);
                    if ((v263 & 2) != 0)
                    {
                      if (*((_DWORD *)v262 - 6) == 3)
                      {
                        v265 = (const llvm::Module ***)*(v262 - 4);
                        goto LABEL_565;
                      }
                    }
                    else if (((unint64_t)*(v262 - 2) & 0x3C0) == 0xC0)
                    {
                      v265 = (const llvm::Module ***)&v264[-8 * ((v263 >> 2) & 0xF)];
LABEL_565:
                      v266 = *v265;
                      if (*v265)
                      {
                        if (*(unsigned __int8 *)v266 - 3 < 0xFFFFFFFE
                          || (v384 = v265,
                              v267 = llvm::Value::stripPointerCasts(v266[16]),
                              v265 = v384,
                              v264 = (unsigned __int8 *)(v262 - 2),
                              *((_BYTE *)v267 + 16)))
                        {
                          __p[0] = "expected a Function or null";
                          v394 = 259;
                          llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, v265);
                          v264 = (unsigned __int8 *)(v262 - 2);
                        }
                      }
                      if ((*(_QWORD *)v264 & 2) != 0)
                        v268 = (unsigned __int8 *)*(v262 - 4);
                      else
                        v268 = &v264[-8 * ((*(_QWORD *)v264 >> 2) & 0xFLL)];
                      v273 = (llvm::Value **)*((_QWORD *)v268 + 1);
                      v271 = (const llvm::Module ***)(v268 + 8);
                      v272 = v273;
                      if (v273)
                      {
                        if (*(unsigned __int8 *)v272 - 3 < 0xFFFFFFFE
                          || (v385 = v271,
                              v274 = llvm::Value::stripPointerCasts(v272[16]),
                              v271 = v385,
                              v264 = (unsigned __int8 *)(v262 - 2),
                              *((_BYTE *)v274 + 16)))
                        {
                          __p[0] = "expected a Function or null";
                          v394 = 259;
                          llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, v271);
                          v264 = (unsigned __int8 *)(v262 - 2);
                        }
                      }
                      v275 = *(_QWORD *)v264;
                      if ((*(_QWORD *)v264 & 2) != 0)
                      {
                        v276 = *((_QWORD *)*(v262 - 4) + 2);
                        if (!v276)
                        {
LABEL_586:
                          __p[0] = "expected an integer constant";
                          v394 = 259;
                          if ((v275 & 2) != 0)
                            v277 = (unsigned __int8 *)*(v262 - 4);
                          else
                            v277 = &v264[-8 * ((v275 >> 2) & 0xF)];
                          v270 = (const llvm::Module ***)(v277 + 16);
                          v269 = (const llvm::Module **)this;
                          goto LABEL_572;
                        }
                      }
                      else
                      {
                        v276 = *(_QWORD *)&v264[-8 * ((v275 >> 2) & 0xF) + 16];
                        if (!v276)
                          goto LABEL_586;
                      }
                      if (*(_BYTE *)v276 == 1 && *(_BYTE *)(**(_QWORD **)(v276 + 128) + 8) == 13)
                        goto LABEL_573;
                      goto LABEL_586;
                    }
                  }
                  __p[0] = "expected a MDNode triple";
                  v394 = 259;
                  v269 = (const llvm::Module **)this;
                  v270 = v258;
LABEL_572:
                  llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v269, (llvm::Twine *)__p, v270);
LABEL_573:
                  ++v258;
                  v210 = v261;
                }
              }
            }
LABEL_433:
            if (v208 == ++v209)
              goto LABEL_627;
            break;
          case 7:
            if ((v217 & 2) != 0)
            {
              v223 = *(_QWORD *)(*((_QWORD *)v212 - 4) + 16);
              if (!v223)
                goto LABEL_483;
            }
            else
            {
              v223 = *(_QWORD *)&v214[-8 * ((v217 >> 2) & 0xF) + 16];
              if (!v223)
                goto LABEL_483;
            }
            if (*(_BYTE *)v223 == 1 && *(_BYTE *)(*(_QWORD *)(v223 + 128) + 16) == 16)
              goto LABEL_502;
LABEL_483:
            __p[0] = "invalid value for 'max' module flag (expected constant integer)";
            v394 = 259;
            if ((v217 & 2) == 0)
              goto LABEL_465;
            goto LABEL_492;
          case 8:
            if ((v217 & 2) != 0)
            {
              v224 = *(_QWORD *)(*((_QWORD *)v212 - 4) + 16);
              if (!v224)
                goto LABEL_491;
            }
            else
            {
              v224 = *(_QWORD *)&v214[-8 * ((v217 >> 2) & 0xF) + 16];
              if (!v224)
                goto LABEL_491;
            }
            if (*(_BYTE *)v224 == 1)
            {
              v226 = *(_QWORD *)(v224 + 128);
              if (*(_BYTE *)(v226 + 16) == 16)
              {
                v227 = (_QWORD *)(v226 + 24);
                v228 = *(_DWORD *)(v226 + 32);
                v229 = v228 - 1;
                if (v228 >= 0x41)
                  v227 = (_QWORD *)(*v227 + 8 * (v229 >> 6));
                if (((*v227 >> v229) & 1) == 0)
                  goto LABEL_502;
              }
            }
LABEL_491:
            __p[0] = "invalid value for 'min' module flag (expected constant non-negative integer)";
            v394 = 259;
            if ((v217 & 2) != 0)
              goto LABEL_492;
            goto LABEL_465;
          default:
            goto LABEL_501;
        }
      }
    }
LABEL_627:
    v293 = (uint64_t *)v399;
    if (!(_DWORD)v400)
      goto LABEL_650;
    v294 = (uint64_t *)((char *)v399 + 8 * v400);
    while (1)
    {
      v295 = *v293;
      v390[0] = 0;
      v297 = (unint64_t *)(v295 - 16);
      v296 = *(_QWORD *)(v295 - 16);
      if ((v296 & 2) != 0)
      {
        v298 = **(void ***)(v295 - 32);
        v390[0] = v298;
        v299 = *v297;
        if ((*v297 & 2) != 0)
        {
LABEL_634:
          v300 = *(unint64_t **)(v295 - 32);
          v301 = v397.__r_.__value_.__r.__words[2];
          if (!LODWORD(v397.__r_.__value_.__r.__words[2]))
            goto LABEL_629;
          goto LABEL_638;
        }
      }
      else
      {
        v298 = (void *)v297[-((v296 >> 2) & 0xF)];
        v390[0] = v298;
        v299 = *v297;
        if ((*v297 & 2) != 0)
          goto LABEL_634;
      }
      v300 = &v297[-((v299 >> 2) & 0xF)];
      v301 = v397.__r_.__value_.__r.__words[2];
      if (!LODWORD(v397.__r_.__value_.__r.__words[2]))
        goto LABEL_629;
LABEL_638:
      v302 = v300[1];
      v303 = v301 - 1;
      v304 = (v301 - 1) & ((v298 >> 4) ^ (v298 >> 9));
      v305 = *(void **)(v397.__r_.__value_.__r.__words[0] + 16 * v304);
      if (v305 != v298)
      {
        v308 = 1;
        while (v305 != (void *)-4096)
        {
          v309 = v304 + v308++;
          v304 = v309 & v303;
          v305 = *(void **)(v397.__r_.__value_.__r.__words[0] + 16 * v304);
          if (v305 == v298)
            goto LABEL_639;
        }
LABEL_629:
        __p[0] = "invalid requirement on flag, flag is not present in module";
        goto LABEL_630;
      }
LABEL_639:
      v306 = *(_QWORD *)(v397.__r_.__value_.__r.__words[0] + 16 * v304 + 8);
      if (!v306)
        goto LABEL_629;
      v307 = *(_QWORD *)(v306 - 16);
      if ((v307 & 2) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v306 - 32) + 16) == v302)
          goto LABEL_631;
      }
      else if (*(_QWORD *)(v306 - 8 * ((v307 >> 2) & 0xF)) == v302)
      {
        goto LABEL_631;
      }
      __p[0] = "invalid requirement on flag, flag does not have the required value";
LABEL_630:
      v394 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)__p, (const llvm::Module ***)v390);
LABEL_631:
      if (++v293 == v294)
      {
        v293 = (uint64_t *)v399;
LABEL_650:
        if (v293 != &v401)
          free(v293);
        llvm::deallocate_buffer((llvm *)v397.__r_.__value_.__l.__data_, (void *)(16 * LODWORD(v397.__r_.__value_.__r.__words[2])));
      }
    }
  }
LABEL_653:
  v310 = (llvm::Module *)*((_QWORD *)this + 1);
  v399 = "llvm.ident";
  LOWORD(v403[0]) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v310, (const char **)&v399);
  if (!NamedMetadata)
    goto LABEL_677;
  v312 = NamedMetadata;
  v313 = llvm::NamedMDNode::getNumOperands(NamedMetadata);
  if (!v313)
    goto LABEL_677;
  v314 = v313;
  v315 = 0;
  while (2)
  {
    v316 = (char *)llvm::NamedMDNode::getOperand(v312, v315);
    __p[0] = v316;
    v317 = v316 - 16;
    v318 = *((_QWORD *)v316 - 2);
    if ((v318 & 2) == 0)
    {
      if ((*((_QWORD *)v316 - 2) & 0x3C0) != 0x40)
        goto LABEL_674;
      v319 = *(_BYTE **)&v317[-8 * ((v318 >> 2) & 0xF)];
      if (!v319)
        break;
      goto LABEL_662;
    }
    if (*((_DWORD *)v316 - 6) != 1)
    {
LABEL_674:
      v399 = "incorrect number of operands in llvm.ident metadata";
      LOWORD(v403[0]) = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&v399, (const llvm::Module ***)__p);
      goto LABEL_677;
    }
    v319 = (_BYTE *)**((_QWORD **)v316 - 4);
    if (v319)
    {
LABEL_662:
      if (*v319)
        break;
      if (v314 == ++v315)
        goto LABEL_677;
      continue;
    }
    break;
  }
  v399 = "invalid value for llvm.ident metadata entry operand(the operand should be a string)";
  LOWORD(v403[0]) = 259;
  if ((v318 & 2) != 0)
    v321 = (const llvm::Module ***)*((_QWORD *)v316 - 4);
  else
    v321 = (const llvm::Module ***)&v317[-8 * ((v318 >> 2) & 0xF)];
  llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&v399, v321);
LABEL_677:
  v322 = (llvm::Module *)*((_QWORD *)this + 1);
  v399 = "llvm.commandline";
  LOWORD(v403[0]) = 259;
  v323 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v322, (const char **)&v399);
  if (!v323)
    goto LABEL_694;
  v324 = v323;
  v325 = llvm::NamedMDNode::getNumOperands(v323);
  if (!v325)
    goto LABEL_694;
  v326 = v325;
  v327 = 0;
  while (2)
  {
    v328 = (char *)llvm::NamedMDNode::getOperand(v324, v327);
    __p[0] = v328;
    v329 = v328 - 16;
    v330 = *((_QWORD *)v328 - 2);
    if ((v330 & 2) == 0)
    {
      if ((*((_QWORD *)v328 - 2) & 0x3C0) != 0x40)
        goto LABEL_691;
      v331 = *(_BYTE **)&v329[-8 * ((v330 >> 2) & 0xF)];
      if (!v331)
        break;
      goto LABEL_686;
    }
    if (*((_DWORD *)v328 - 6) != 1)
    {
LABEL_691:
      v399 = "incorrect number of operands in llvm.commandline metadata";
      LOWORD(v403[0]) = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&v399, (const llvm::Module ***)__p);
      goto LABEL_694;
    }
    v331 = (_BYTE *)**((_QWORD **)v328 - 4);
    if (v331)
    {
LABEL_686:
      if (*v331)
        break;
      if (v326 == ++v327)
        goto LABEL_694;
      continue;
    }
    break;
  }
  v399 = "invalid value for llvm.commandline metadata entry operand(the operand should be a string)";
  LOWORD(v403[0]) = 259;
  if ((v330 & 2) != 0)
    v332 = (const llvm::Module ***)*((_QWORD *)v328 - 4);
  else
    v332 = (const llvm::Module ***)&v329[-8 * ((v330 >> 2) & 0xF)];
  llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)this, (llvm::Twine *)&v399, v332);
LABEL_694:
  if ((llvm::LLVMContext::isODRUniquingDebugTypes(**((llvm::LLVMContext ***)this + 1)) & 1) != 0)
    goto LABEL_748;
  v333 = (llvm::Module *)*((_QWORD *)this + 1);
  v399 = "llvm.dbg.cu";
  LOWORD(v403[0]) = 259;
  v334 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v333, (const char **)&v399);
  v399 = v403;
  v400 = (uint64_t)v403;
  v401 = 2;
  v402 = 0;
  if (v334)
  {
    v335 = v334;
    v336 = llvm::NamedMDNode::getNumOperands(v334);
    if (v336)
    {
      v337 = v336;
      for (j = 0; j != v337; ++j)
      {
        v339 = (const void *)llvm::NamedMDNode::getOperand(v335, j);
        if ((void *)v400 != v399)
          goto LABEL_698;
        v340 = HIDWORD(v401);
        if (HIDWORD(v401))
        {
          v341 = 0;
          v342 = 8 * HIDWORD(v401);
          v343 = (_QWORD *)v400;
          while ((const void *)*v343 != v339)
          {
            if (*v343 == -2)
              v341 = v343;
            ++v343;
            v342 -= 8;
            if (!v342)
            {
              if (!v341)
                goto LABEL_709;
              *v341 = v339;
              --v402;
              goto LABEL_699;
            }
          }
          continue;
        }
LABEL_709:
        if (HIDWORD(v401) < v401)
        {
          ++HIDWORD(v401);
          *(_QWORD *)(v400 + 8 * v340) = v339;
        }
        else
        {
LABEL_698:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v399, v339);
        }
LABEL_699:
        ;
      }
    }
  }
  v344 = (char *)*((_QWORD *)this + 94);
  v345 = (char *)*((_QWORD *)this + 93);
  v346 = 760;
  if (v344 == v345)
    v346 = 764;
  v347 = *(unsigned int *)((char *)this + v346);
  v348 = (const void **)*((_QWORD *)this + 94);
  if ((_DWORD)v347)
  {
    v349 = 0;
    while (*(_QWORD *)&v344[v349] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v349 += 8;
      if (8 * v347 == v349)
        goto LABEL_740;
    }
    v348 = (const void **)&v344[v349];
  }
  v350 = (const void **)&v344[8 * v347];
  if (v348 == v350)
  {
LABEL_740:
    if (v344 != v345)
    {
      v358 = *((unsigned int *)this + 190);
      if (v358 >= 0x21 && 4 * (*((_DWORD *)this + 191) - *((_DWORD *)this + 192)) < v358)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 93);
        v359 = (void *)v400;
        if ((void *)v400 == v399)
          goto LABEL_748;
        goto LABEL_747;
      }
      memset(v344, 255, 8 * v358);
    }
    *(_QWORD *)((char *)this + 764) = 0;
    v359 = (void *)v400;
    if ((void *)v400 == v399)
      goto LABEL_748;
LABEL_747:
    free(v359);
    goto LABEL_748;
  }
  v352 = (char *)v399;
  v351 = v400;
  if ((void *)v400 != v399)
  {
LABEL_721:
    v397.__r_.__value_.__r.__words[0] = 0;
    v353 = *v348;
    v397.__r_.__value_.__r.__words[0] = (std::string::size_type)*v348;
    if ((char *)v351 == v352)
    {
      v355 = HIDWORD(v401);
      BucketFor = (const void **)&v352[8 * HIDWORD(v401)];
      if (HIDWORD(v401))
      {
        v357 = 0;
        while (*(const void **)&v352[v357] != v353)
        {
          v357 += 8;
          if (8 * HIDWORD(v401) == v357)
            goto LABEL_732;
        }
        BucketFor = (const void **)&v352[v357];
      }
LABEL_732:
      v351 = (uint64_t)v352;
    }
    else
    {
      BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v399, v353);
      v352 = (char *)v399;
      v351 = v400;
      v355 = HIDWORD(v401);
      if (*BucketFor != v353)
      {
        v356 = v401;
        if ((void *)v400 == v399)
          v356 = HIDWORD(v401);
        BucketFor = (const void **)(v400 + 8 * v356);
      }
    }
    if ((char *)v351 != v352)
      v355 = v401;
    if (BucketFor != (const void **)(v351 + 8 * v355))
    {
      while (++v348 != v350)
      {
        if ((unint64_t)*v348 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v348 != v350)
            goto LABEL_721;
          break;
        }
      }
      v344 = (char *)*((_QWORD *)this + 94);
      v345 = (char *)*((_QWORD *)this + 93);
      goto LABEL_740;
    }
    goto LABEL_788;
  }
  if (!HIDWORD(v401))
  {
    v397.__r_.__value_.__r.__words[0] = 0;
    v397.__r_.__value_.__r.__words[0] = (std::string::size_type)*v348;
    goto LABEL_788;
  }
LABEL_758:
  v397.__r_.__value_.__r.__words[0] = 0;
  v368 = *v348;
  v397.__r_.__value_.__r.__words[0] = (std::string::size_type)*v348;
  v369 = 8 * HIDWORD(v401);
  v370 = (const void **)v400;
  while (*v370 != v368)
  {
    ++v370;
    v369 -= 8;
    if (!v369)
      goto LABEL_788;
  }
  if (v369)
  {
    while (1)
    {
      if (++v348 == v350)
        goto LABEL_740;
      if ((unint64_t)*v348 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v348 != v350)
          goto LABEL_758;
        goto LABEL_740;
      }
    }
  }
LABEL_788:
  __p[0] = "DICompileUnit not listed in llvm.dbg.cu";
  v394 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DILocation const*>(this, (llvm::Twine *)__p, (llvm::Metadata **)&v397);
  v359 = (void *)v400;
  if ((void *)v400 != v399)
    goto LABEL_747;
LABEL_748:
  v360 = *((unsigned int *)this + 304);
  if ((_DWORD)v360)
  {
    v361 = (_QWORD *)*((_QWORD *)this + 151);
    v362 = (_WORD *)*v361;
    __p[0] = *(void **)v361;
    if ((_DWORD)v360 != 1)
    {
      v363 = v361 + 1;
      v364 = v362[9];
      v365 = 8 * v360 - 8;
      while (1)
      {
        v397.__r_.__value_.__r.__words[0] = *v363;
        if (((*(_WORD *)(v397.__r_.__value_.__r.__words[0] + 18) ^ v364) & 0x3FF0) != 0)
          break;
        ++v363;
        v365 -= 8;
        if (!v365)
          goto LABEL_771;
      }
      v399 = "All llvm.experimental.deoptimize declarations must have the same calling convention";
      LOWORD(v403[0]) = 259;
      v366 = *(llvm::raw_ostream **)this;
      if (*(_QWORD *)this)
      {
        llvm::Twine::print((llvm::Twine *)&v399, *(llvm::raw_ostream **)this);
        v367 = (_BYTE *)*((_QWORD *)v366 + 4);
        if ((unint64_t)v367 >= *((_QWORD *)v366 + 3))
        {
          llvm::raw_ostream::write(v366, 10);
        }
        else
        {
          *((_QWORD *)v366 + 4) = v367 + 1;
          *v367 = 10;
        }
        v371 = *(_QWORD *)this;
        *((_BYTE *)this + 192) = 1;
        if (v371)
          llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)this, (unsigned __int8 **)__p, (llvm::raw_ostream **)&v397);
      }
      else
      {
        *((_BYTE *)this + 192) = 1;
      }
    }
  }
LABEL_771:
  v372 = *((_DWORD *)this + 182);
  if (v372 || *((_DWORD *)this + 183))
  {
    v373 = (_QWORD *)((char *)this + 720);
    v374 = *((unsigned int *)this + 184);
    if (v374 > 4 * v372 && v374 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)v373);
      return *((_BYTE *)this + 192) == 0;
    }
    if ((_DWORD)v374)
    {
      v375 = (_QWORD *)*v373;
      v376 = (v374 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v376)
      {
        v377 = v376 + 1;
        v378 = (v376 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v379 = &v375[2 * v378];
        v380 = v375 + 2;
        v381 = v378;
        do
        {
          *(v380 - 2) = -4096;
          *v380 = -4096;
          v380 += 4;
          v381 -= 2;
        }
        while (v381);
        if (v377 == v378)
          goto LABEL_785;
      }
      else
      {
        v379 = (_QWORD *)*v373;
      }
      v382 = &v375[2 * v374];
      do
      {
        *v379 = -4096;
        v379 += 2;
      }
      while (v379 != v382);
    }
LABEL_785:
    *((_QWORD *)this + 91) = 0;
  }
  return *((_BYTE *)this + 192) == 0;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNode(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::MDNode *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::MDNode *v11;
  int v12;
  int v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  const llvm::MDNode **v24;
  const llvm::MDNode *v25;
  const llvm::MDNode **v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  llvm::raw_ostream *v30;
  const llvm::MDNode *v32;
  const llvm::MDNode **v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  const llvm::MDNode *v38;
  const llvm::MDNode **v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  llvm::Metadata *v47;
  const char *v48;
  __int16 v49;

  v47 = a3;
  v6 = *((_QWORD *)a3 - 2);
  if ((v6 & 2) == 0)
  {
    if (((v6 >> 6) & 0xF) > 1)
      goto LABEL_3;
LABEL_10:
    v46 = (unsigned __int8 *)a2;
    v14 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v48 = "Base nodes must have at least two operands";
      v49 = 259;
      v15 = *(llvm::raw_ostream **)v14;
      if (*(_QWORD *)v14)
      {
        llvm::Twine::print((llvm::Twine *)&v48, *(llvm::raw_ostream **)v14);
        v16 = (_BYTE *)*((_QWORD *)v15 + 4);
        if ((unint64_t)v16 < *((_QWORD *)v15 + 3))
        {
          *((_QWORD *)v15 + 4) = v16 + 1;
          *v16 = 10;
          v17 = *(llvm::raw_ostream **)v14;
          *(_BYTE *)(v14 + 192) = 1;
          if (!v17)
            goto LABEL_32;
          goto LABEL_31;
        }
        llvm::raw_ostream::write(v15, 10);
        v30 = *(llvm::raw_ostream **)v14;
        *(_BYTE *)(v14 + 192) = 1;
        if (v30)
LABEL_31:
          llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v14, &v46, &v47);
      }
      else
      {
        *(_BYTE *)(v14 + 192) = 1;
      }
    }
LABEL_32:
    v19 = 0;
    v20 = 0xFFFFFFFF00000000;
    LOBYTE(v18) = 1;
    return v18 | v20 | v19 & 0xFFFFFF00;
  }
  if (*((_DWORD *)a3 - 6) <= 1u)
    goto LABEL_10;
LABEL_3:
  v7 = *((_QWORD *)this + 1);
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v10 = v7 + 16 * v9;
    v11 = *(const llvm::MDNode **)v10;
    if (*(const llvm::MDNode **)v10 == a3)
      goto LABEL_16;
    v12 = 1;
    while (v11 != (const llvm::MDNode *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(const llvm::MDNode **)(v7 + 16 * v9);
      if (v11 == a3)
      {
        v10 = v7 + 16 * v9;
        goto LABEL_16;
      }
    }
  }
  v10 = v7 + 16 * v8;
LABEL_16:
  if (v10 == v7 + 16 * v8)
  {
    v18 = llvm::TBAAVerifier::verifyTBAABaseNodeImpl(this, a2, (const llvm::Module **)a3, a4);
    v19 = v18 & 0xFFFFFF00;
    v20 = v18 & 0xFFFFFFFF00000000;
    v21 = *((_DWORD *)this + 6);
    if (!v21)
      goto LABEL_43;
    v22 = *((_QWORD *)this + 1);
    v23 = ((a3 >> 4) ^ (a3 >> 9)) & (v21 - 1);
    v24 = (const llvm::MDNode **)(v22 + 16 * v23);
    v25 = *v24;
    if (*v24 == a3)
      return v18 | v20 | v19 & 0xFFFFFF00;
    v26 = 0;
    v27 = 1;
    while (v25 != (const llvm::MDNode *)-4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == (const llvm::MDNode *)-8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & (v21 - 1);
      v24 = (const llvm::MDNode **)(v22 + 16 * v23);
      v25 = *v24;
      if (*v24 == a3)
        return v18 | v20 | v19 & 0xFFFFFF00;
    }
    v33 = v26 ? v26 : v24;
    v34 = *((_DWORD *)this + 4);
    if (4 * v34 + 4 < 3 * v21)
    {
      if (v21 + ~v34 - *((_DWORD *)this + 5) > v21 >> 3)
        goto LABEL_36;
      v44 = v18 & 0xFFFFFF00;
      v45 = v18 & 0xFFFFFFFF00000000;
      v43 = v18;
    }
    else
    {
LABEL_43:
      v44 = v18 & 0xFFFFFF00;
      v45 = v18 & 0xFFFFFFFF00000000;
      v43 = v18;
      v21 *= 2;
    }
    llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)this + 8, v21);
    v35 = *((_QWORD *)this + 1);
    v36 = *((_DWORD *)this + 6) - 1;
    v37 = v36 & ((a3 >> 4) ^ (a3 >> 9));
    v33 = (const llvm::MDNode **)(v35 + 16 * v37);
    v38 = *v33;
    if (*v33 == a3)
    {
LABEL_46:
      v18 = v43;
      v19 = v44;
      v20 = v45;
      ++*((_DWORD *)this + 4);
      if (a3 == (const llvm::MDNode *)-4096)
        goto LABEL_38;
      goto LABEL_37;
    }
    v39 = 0;
    v40 = 1;
    while (v38 != (const llvm::MDNode *)-4096)
    {
      if (v39)
        v41 = 0;
      else
        v41 = v38 == (const llvm::MDNode *)-8192;
      if (v41)
        v39 = v33;
      v42 = v37 + v40++;
      v37 = v42 & v36;
      v33 = (const llvm::MDNode **)(v35 + 16 * (v42 & v36));
      v38 = *v33;
      if (*v33 == a3)
        goto LABEL_46;
    }
    if (v39)
      v33 = v39;
    v18 = v43;
    v19 = v44;
    v20 = v45;
LABEL_36:
    v32 = *v33;
    ++*((_DWORD *)this + 4);
    if (v32 == (const llvm::MDNode *)-4096)
    {
LABEL_38:
      *v33 = a3;
      v33[1] = (const llvm::MDNode *)v18;
      return v18 | v20 | v19 & 0xFFFFFF00;
    }
LABEL_37:
    --*((_DWORD *)this + 5);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v10 + 8);
  v19 = v18 & 0xFFFFFF00;
  v20 = v18 & 0xFFFFFFFF00000000;
  return v18 | v20 | v19 & 0xFFFFFF00;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNodeImpl(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::Module **a3, int a4)
{
  unint64_t v7;
  const llvm::Module **v8;
  const llvm::Module *v9;
  int v10;
  uint64_t v11;
  const llvm::Module **v12;
  const char *v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  const llvm::Module **v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  const llvm::Module *v23;
  uint64_t v24;
  unsigned int v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  void **v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  llvm::raw_ostream *v34;
  unsigned int v35;
  unint64_t v36;
  const llvm::Module *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  llvm::raw_ostream *v46;
  unsigned __int8 *v47;
  void *__p;
  unsigned int v49;
  char v50;
  const llvm::Module **v51;
  _QWORD v52[4];
  __int16 v53;

  v51 = a3;
  v8 = a3 - 2;
  v7 = (unint64_t)*(a3 - 2);
  if ((v7 & 2) == 0)
  {
    if (((v7 >> 6) & 0xF) != 2)
      goto LABEL_3;
LABEL_9:
    v10 = !llvm::TBAAVerifier::isValidScalarTBAANode(this, (const llvm::MDNode *)a3);
    v11 = (v10 << 31 >> 31);
    return v10 & 1 | (unint64_t)(v11 << 32);
  }
  if (*((_DWORD *)a3 - 6) == 2)
    goto LABEL_9;
LABEL_3:
  if (a4)
  {
    if ((v7 & 2) != 0)
    {
      if ((-1431655765 * *((_DWORD *)a3 - 6)) < 0x55555556)
      {
        v9 = (const llvm::Module *)*((_QWORD *)*(a3 - 4) + 1);
        if (!v9)
          goto LABEL_99;
LABEL_27:
        if (*(_BYTE *)v9 != 1 || *(_BYTE *)(*((_QWORD *)v9 + 16) + 16) != 16)
        {
LABEL_99:
          __p = a2;
          v43 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            v52[0] = "Type size nodes must be constants!";
            v53 = 259;
            v44 = *(llvm::raw_ostream **)v43;
            if (*(_QWORD *)v43)
            {
              llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v43);
              v45 = (_BYTE *)*((_QWORD *)v44 + 4);
              if ((unint64_t)v45 >= *((_QWORD *)v44 + 3))
              {
                llvm::raw_ostream::write(v44, 10);
              }
              else
              {
                *((_QWORD *)v44 + 4) = v45 + 1;
                *v45 = 10;
              }
              v46 = *(llvm::raw_ostream **)v43;
              *(_BYTE *)(v43 + 192) = 1;
              if (v46)
                llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v43, (unsigned __int8 **)&__p, (llvm::Metadata **)&v51);
            }
            else
            {
              *(_BYTE *)(v43 + 192) = 1;
            }
          }
          goto LABEL_22;
        }
        v16 = 3;
        v15 = 3;
        goto LABEL_30;
      }
    }
    else if (-1431655765 * ((v7 >> 6) & 0xF) < 0x55555556)
    {
      v9 = v8[-((v7 >> 2) & 0xF) + 1];
      if (!v9)
        goto LABEL_99;
      goto LABEL_27;
    }
    v12 = *(const llvm::Module ***)this;
    if (*(_QWORD *)this)
    {
      v13 = "Access tag nodes must have the number of operands that is a multiple of 3!";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if ((v7 & 2) == 0)
  {
    if ((v7 & 0x40) != 0)
    {
      if (*(_BYTE *)v8[-((v7 >> 2) & 0xF)])
        goto LABEL_13;
      goto LABEL_25;
    }
LABEL_19:
    v12 = *(const llvm::Module ***)this;
    if (*(_QWORD *)this)
    {
      v13 = "Struct tag nodes must have an odd number of operands!";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if ((*(_BYTE *)(a3 - 3) & 1) == 0)
    goto LABEL_19;
  if (**(_BYTE **)*(a3 - 4))
  {
LABEL_13:
    v12 = *(const llvm::Module ***)this;
    if (*(_QWORD *)this)
    {
      v13 = "Struct tag nodes have a string as their first operand";
LABEL_21:
      v52[0] = v13;
      v53 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>(v12, (llvm::Twine *)v52, &v51);
    }
LABEL_22:
    v11 = 0xFFFFFFFFLL;
    LOBYTE(v10) = 1;
    return v10 & 1 | (unint64_t)(v11 << 32);
  }
LABEL_25:
  v15 = 1;
  v16 = 2;
LABEL_30:
  LOBYTE(v10) = 0;
  v17 = -1;
  LOBYTE(__p) = 0;
  v50 = 0;
  while ((v7 & 2) == 0)
  {
    if (v15 >= ((v7 >> 6) & 0xF))
      goto LABEL_103;
    v18 = &a3[-((v7 >> 2) & 0xF) - 2];
    if (*(unsigned __int8 *)v18[v15] - 5 >= 0x1F)
    {
LABEL_37:
      v47 = (unsigned __int8 *)a2;
      v19 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_32;
      v52[0] = "Incorrect field entry in struct type node!";
      v53 = 259;
      v20 = *(llvm::raw_ostream **)v19;
      if (*(_QWORD *)v19)
      {
        llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v19);
        v21 = (_BYTE *)*((_QWORD *)v20 + 4);
        if ((unint64_t)v21 < *((_QWORD *)v20 + 3))
          goto LABEL_40;
LABEL_56:
        llvm::raw_ostream::write(v20, 10);
        v28 = *(llvm::raw_ostream **)v19;
        *(_BYTE *)(v19 + 192) = 1;
        if (v28)
          goto LABEL_57;
        goto LABEL_32;
      }
      goto LABEL_31;
    }
LABEL_44:
    v23 = v18[v15 + 1];
    if (!v23 || *(_BYTE *)v23 != 1 || (v24 = *((_QWORD *)v23 + 16), *(_BYTE *)(v24 + 16) != 16))
    {
      v47 = (unsigned __int8 *)a2;
      v19 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_32;
      v52[0] = "Offset entries must be constants!";
      v53 = 259;
      v20 = *(llvm::raw_ostream **)v19;
      if (*(_QWORD *)v19)
      {
        llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v19);
        v21 = (_BYTE *)*((_QWORD *)v20 + 4);
        if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
          goto LABEL_56;
LABEL_40:
        *((_QWORD *)v20 + 4) = v21 + 1;
        *v21 = 10;
        v22 = *(llvm::raw_ostream **)v19;
        *(_BYTE *)(v19 + 192) = 1;
        if (v22)
LABEL_57:
          llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v19, &v47, (llvm::Metadata **)&v51);
LABEL_32:
        LOBYTE(v10) = 1;
        goto LABEL_33;
      }
LABEL_31:
      *(_BYTE *)(v19 + 192) = 1;
      goto LABEL_32;
    }
    v25 = *(_DWORD *)(v24 + 32);
    if (v17 != -1 && v25 != v17)
    {
      v47 = (unsigned __int8 *)a2;
      v19 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_32;
      v52[0] = "Bitwidth between the offsets and struct type entries must match";
      v53 = 259;
      v26 = *(llvm::raw_ostream **)v19;
      if (*(_QWORD *)v19)
      {
        llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v19);
        v27 = (_BYTE *)*((_QWORD *)v26 + 4);
        if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
        {
          llvm::raw_ostream::write(v26, 10);
        }
        else
        {
          *((_QWORD *)v26 + 4) = v27 + 1;
          *v27 = 10;
        }
        v33 = *(llvm::raw_ostream **)v19;
        *(_BYTE *)(v19 + 192) = 1;
        if (v33)
          goto LABEL_57;
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    v29 = (void **)(v24 + 24);
    if (v50)
    {
      if ((int)llvm::APInt::compare((llvm::APInt *)&__p, (const llvm::APInt *)(v24 + 24)) < 1)
        goto LABEL_75;
      v47 = (unsigned __int8 *)a2;
      v30 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_74;
      v52[0] = "Offsets must be increasing!";
      v53 = 259;
      v31 = *(llvm::raw_ostream **)v30;
      if (*(_QWORD *)v30)
      {
        llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v30);
        v32 = (_BYTE *)*((_QWORD *)v31 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
        {
          llvm::raw_ostream::write(v31, 10);
        }
        else
        {
          *((_QWORD *)v31 + 4) = v32 + 1;
          *v32 = 10;
        }
        v34 = *(llvm::raw_ostream **)v30;
        *(_BYTE *)(v30 + 192) = 1;
        if (v34)
          llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v30, &v47, (llvm::Metadata **)&v51);
      }
      else
      {
        *(_BYTE *)(v30 + 192) = 1;
      }
      if (v50)
      {
LABEL_74:
        LOBYTE(v10) = 1;
LABEL_75:
        if (v49 > 0x40 || (v35 = *(_DWORD *)(v24 + 32), v35 > 0x40))
        {
          llvm::APInt::assignSlowCase((const void **)&__p, (const void **)(v24 + 24));
        }
        else
        {
          __p = *v29;
          v49 = v35;
        }
        goto LABEL_82;
      }
      LOBYTE(v10) = 1;
      v49 = *(_DWORD *)(v24 + 32);
      if (v49 > 0x40)
      {
LABEL_80:
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)(v24 + 24));
        goto LABEL_81;
      }
    }
    else
    {
      v49 = *(_DWORD *)(v24 + 32);
      if (v25 > 0x40)
        goto LABEL_80;
    }
    __p = *v29;
LABEL_81:
    v50 = 1;
LABEL_82:
    if (a4)
    {
      v36 = (unint64_t)*(v51 - 2);
      v37 = (v36 & 2) != 0 ? *(v51 - 4) : (const llvm::Module *)&v51[-((v36 >> 2) & 0xF) - 2];
      v38 = *((_QWORD *)v37 + v15 + 2);
      if (!v38 || *(_BYTE *)v38 != 1 || *(_BYTE *)(*(_QWORD *)(v38 + 128) + 16) != 16)
      {
        v47 = (unsigned __int8 *)a2;
        v39 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          v52[0] = "Member size entries must be constants!";
          v53 = 259;
          v40 = *(llvm::raw_ostream **)v39;
          if (*(_QWORD *)v39)
          {
            llvm::Twine::print((llvm::Twine *)v52, *(llvm::raw_ostream **)v39);
            v41 = (_BYTE *)*((_QWORD *)v40 + 4);
            if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
            {
              llvm::raw_ostream::write(v40, 10);
            }
            else
            {
              *((_QWORD *)v40 + 4) = v41 + 1;
              *v41 = 10;
            }
            v42 = *(llvm::raw_ostream **)v39;
            *(_BYTE *)(v39 + 192) = 1;
            if (v42)
              llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v39, &v47, (llvm::Metadata **)&v51);
          }
          else
          {
            *(_BYTE *)(v39 + 192) = 1;
          }
        }
        LOBYTE(v10) = 1;
      }
    }
    v17 = v25;
LABEL_33:
    v15 += v16;
    a3 = v51;
    v7 = (unint64_t)*(v51 - 2);
  }
  if (v15 < *((_DWORD *)a3 - 6))
  {
    v18 = (const llvm::Module **)*(a3 - 4);
    if (*(unsigned __int8 *)v18[v15] - 5 >= 0x1F)
      goto LABEL_37;
    goto LABEL_44;
  }
LABEL_103:
  if ((v10 & 1) != 0)
    v11 = 0xFFFFFFFFLL;
  else
    v11 = v17;
  if (v50 && v49 > 0x40 && __p)
    operator delete[](__p);
  return v10 & 1 | (unint64_t)(v11 << 32);
}

BOOL llvm::TBAAVerifier::isValidScalarTBAANode(llvm::TBAAVerifier *this, const llvm::MDNode *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::MDNode *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::APInt *v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  const llvm::MDNode **v32;
  const llvm::MDNode *v33;
  const llvm::MDNode **v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  const llvm::MDNode **v38;
  int v39;
  const llvm::MDNode *v40;
  uint64_t v42;
  int v43;
  unsigned int v44;
  const llvm::MDNode *v45;
  const llvm::MDNode **v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  const llvm::MDNode *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];

  v5 = (char *)this + 32;
  v4 = *((_QWORD *)this + 4);
  v6 = *((unsigned int *)this + 12);
  if (!(_DWORD)v6)
  {
LABEL_7:
    v8 = v4 + 16 * v6;
    goto LABEL_8;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = v4 + 16 * v7;
  v9 = *(const llvm::MDNode **)v8;
  if (*(const llvm::MDNode **)v8 != a2)
  {
    v10 = 1;
    while (v9 != (const llvm::MDNode *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(const llvm::MDNode **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 != v4 + 16 * v6)
    return *(_BYTE *)(v8 + 8) != 0;
  v51 = (uint64_t *)v55;
  v52 = (uint64_t *)v55;
  v53 = 4;
  v54 = 0;
  v13 = *((_QWORD *)a2 - 2);
  v12 = (uint64_t)a2;
  while (1)
  {
    v14 = v12 - 16;
    if ((v13 & 2) != 0)
    {
      v18 = *(_DWORD *)(v12 - 24);
      if ((v18 & 0xFFFFFFFE) != 2)
        goto LABEL_48;
      v16 = *(_QWORD *)(v12 - 32);
      if (**(_BYTE **)v16)
        goto LABEL_48;
      if (v18 != 3)
        goto LABEL_31;
    }
    else
    {
      if ((v13 & 0x380 | 0x40) != 0xC0)
        goto LABEL_48;
      v15 = (v13 >> 2) & 0xF;
      v16 = v14 - 8 * v15;
      if (**(_BYTE **)v16)
        goto LABEL_48;
      if ((v13 & 0x3C0) != 0xC0)
      {
        v17 = -v15;
LABEL_29:
        v16 = v14 + 8 * v17;
        goto LABEL_31;
      }
    }
    v19 = *(_QWORD *)(v16 + 16);
    if (*(_BYTE *)v19 != 1)
      goto LABEL_48;
    v20 = *(_QWORD *)(v19 + 128);
    if (*(_BYTE *)(v20 + 16) != 16)
      goto LABEL_48;
    v21 = (llvm::APInt *)(v20 + 24);
    v22 = *(_DWORD *)(v20 + 32);
    if (v22 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v21) != v22)
        goto LABEL_48;
    }
    else if (*(_QWORD *)v21)
    {
      goto LABEL_48;
    }
    if ((v13 & 2) == 0)
    {
      v23 = (v13 >> 2) & 0xF;
      if (**(_BYTE **)(v14 - 8 * v23))
        goto LABEL_48;
      v17 = -v23;
      goto LABEL_29;
    }
    v16 = *(_QWORD *)(v12 - 32);
    if (**(_BYTE **)v16)
      goto LABEL_48;
LABEL_31:
    v12 = *(_QWORD *)(v16 + 8);
    if (!v12)
      goto LABEL_49;
    if (*(unsigned __int8 *)v12 - 5 > 0x1E)
      goto LABEL_48;
    if (v52 != v51)
    {
LABEL_34:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v51, (const void *)v12);
      if (!v24)
        goto LABEL_48;
      goto LABEL_35;
    }
    v25 = HIDWORD(v53);
    if (HIDWORD(v53))
      break;
LABEL_46:
    if (HIDWORD(v53) >= v53)
      goto LABEL_34;
    ++HIDWORD(v53);
    v52[v25] = v12;
LABEL_35:
    v13 = *(_QWORD *)(v12 - 16);
    if ((v13 & 2) != 0)
    {
      if (*(_DWORD *)(v12 - 24) <= 1u)
        goto LABEL_60;
    }
    else if (((v13 >> 6) & 0xF) <= 1)
    {
LABEL_60:
      v12 = 1;
      v29 = *((_DWORD *)this + 12);
      if (v29)
        goto LABEL_50;
LABEL_61:
      v38 = 0;
      v39 = *((_DWORD *)this + 10);
      if (4 * v39 + 4 >= 3 * v29)
        goto LABEL_73;
      goto LABEL_62;
    }
  }
  v26 = 0;
  v27 = 8 * HIDWORD(v53);
  v28 = v52;
  while (*v28 != v12)
  {
    if (*v28 == -2)
      v26 = v28;
    ++v28;
    v27 -= 8;
    if (!v27)
    {
      if (!v26)
        goto LABEL_46;
      *v26 = v12;
      --v54;
      goto LABEL_35;
    }
  }
LABEL_48:
  v12 = 0;
LABEL_49:
  v29 = *((_DWORD *)this + 12);
  if (!v29)
    goto LABEL_61;
LABEL_50:
  v30 = *((_QWORD *)this + 4);
  v31 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v32 = (const llvm::MDNode **)(v30 + 16 * v31);
  v33 = *v32;
  if (*v32 == a2)
    goto LABEL_66;
  v34 = 0;
  v35 = 1;
  while (v33 != (const llvm::MDNode *)-4096)
  {
    if (v34)
      v36 = 0;
    else
      v36 = v33 == (const llvm::MDNode *)-8192;
    if (v36)
      v34 = v32;
    v37 = v31 + v35++;
    v31 = v37 & (v29 - 1);
    v32 = (const llvm::MDNode **)(v30 + 16 * v31);
    v33 = *v32;
    if (*v32 == a2)
      goto LABEL_66;
  }
  if (v34)
    v38 = v34;
  else
    v38 = v32;
  v39 = *((_DWORD *)this + 10);
  if (4 * v39 + 4 < 3 * v29)
  {
LABEL_62:
    if (v29 + ~v39 - *((_DWORD *)this + 11) <= v29 >> 3)
      goto LABEL_74;
    v40 = *v38;
    ++*((_DWORD *)this + 10);
    if (v40 == (const llvm::MDNode *)-4096)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_73:
  v29 *= 2;
LABEL_74:
  llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow((uint64_t)v5, v29);
  v42 = *((_QWORD *)this + 4);
  v43 = *((_DWORD *)this + 12) - 1;
  v44 = v43 & ((a2 >> 4) ^ (a2 >> 9));
  v38 = (const llvm::MDNode **)(v42 + 16 * v44);
  v45 = *v38;
  if (*v38 != a2)
  {
    v46 = 0;
    v47 = 1;
    while (v45 != (const llvm::MDNode *)-4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == (const llvm::MDNode *)-8192;
      if (v48)
        v46 = v38;
      v49 = v44 + v47++;
      v44 = v49 & v43;
      v38 = (const llvm::MDNode **)(v42 + 16 * (v49 & v43));
      v45 = *v38;
      if (*v38 == a2)
        goto LABEL_75;
    }
    if (v46)
      v38 = v46;
    v50 = *v38;
    ++*((_DWORD *)this + 10);
    if (v50 == (const llvm::MDNode *)-4096)
      goto LABEL_65;
LABEL_64:
    --*((_DWORD *)this + 11);
    goto LABEL_65;
  }
LABEL_75:
  ++*((_DWORD *)this + 10);
  if (a2 != (const llvm::MDNode *)-4096)
    goto LABEL_64;
LABEL_65:
  *v38 = a2;
  *((_BYTE *)v38 + 8) = v12;
LABEL_66:
  if (v52 != v51)
    free(v52);
  return v12;
}

uint64_t llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::MDNode *a3, llvm::APInt *a4, int a5)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  llvm::raw_ostream *v24;
  unsigned __int8 *v25;
  llvm::TBAAVerifier *v26;
  _QWORD *v27;
  llvm::APInt *v28;
  unsigned __int8 *v29;
  llvm::Metadata *v30;
  const char *v31;
  __int16 v32;

  v30 = a3;
  v7 = (_QWORD *)((char *)a3 - 16);
  v8 = *((_QWORD *)a3 - 2);
  if ((v8 & 2) != 0)
  {
    if (*((_DWORD *)a3 - 6) == 2)
      return *(_QWORD *)(*((_QWORD *)a3 - 4) + 8);
  }
  else if ((*((_QWORD *)a3 - 2) & 0x3C0) == 0x80)
  {
    return v7[-((v8 >> 2) & 0xF) + 1];
  }
  if (a5)
    v10 = 3;
  else
    v10 = 1;
  if (a5)
    v11 = 3;
  else
    v11 = 2;
  v12 = (v8 >> 6) & 0xF;
  v13 = (v8 >> 2) & 0xF;
  v14 = &v7[-v13];
  if ((v8 & 2) != 0)
  {
    v19 = *((_DWORD *)a3 - 6);
    if (v10 >= v19)
    {
LABEL_41:
      LODWORD(v12) = *((_DWORD *)a3 - 6);
      v14 = (_QWORD *)*((_QWORD *)a3 - 4);
      goto LABEL_42;
    }
    v25 = (unsigned __int8 *)a2;
    v26 = this;
    v27 = &v7[-v13];
    v20 = *((_QWORD *)a3 - 4);
    LODWORD(v15) = v10;
    while ((int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(*(_QWORD *)(v20 + 8 * (v15 + 1)) + 128) + 24), a4) <= 0)
    {
      LODWORD(v15) = v15 + v11;
      if (v15 >= v19)
        goto LABEL_40;
    }
  }
  else
  {
    if (v10 >= v12)
      goto LABEL_42;
    v25 = (unsigned __int8 *)a2;
    v26 = this;
    v27 = &v7[-v13];
    if ((int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v14[v10 + 1] + 128) + 24), a4) > 0)
    {
      LODWORD(v15) = v10;
      goto LABEL_16;
    }
    v15 = v10 + v11;
    if (v10 + v11 >= v12
      || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0
      && ((v15 += v11, v15 >= v12)
       || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0
       && ((v15 += v11, v15 >= v12)
        || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0
        && ((v15 += v11, v15 >= v12)
         || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0
         && ((v15 += v11, v15 >= v12)
          || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0
          && ((v15 += v11, v15 >= v12)
           || (int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v27[v15 + 1] + 128) + 24), a4) <= 0))))))
    {
LABEL_40:
      v14 = v27;
      if ((v8 & 2) != 0)
        goto LABEL_41;
LABEL_42:
      v21 = v12 - v11;
      v22 = v12 - v11 + 1;
LABEL_43:
      llvm::APInt::operator-=((uint64_t)a4, (_QWORD **)(*(_QWORD *)(v14[v22] + 128) + 24));
      if ((*v7 & 2) != 0)
        v23 = (_QWORD *)*((_QWORD *)a3 - 4);
      else
        v23 = &v7[-((*v7 >> 2) & 0xFLL)];
      return v23[v21];
    }
  }
LABEL_16:
  if ((_DWORD)v15 != (_DWORD)v10)
  {
    v21 = v15 - v11;
    v22 = v15 - v11 + 1;
    v14 = v27;
    if ((v8 & 2) != 0)
      v14 = (_QWORD *)*((_QWORD *)a3 - 4);
    goto LABEL_43;
  }
  v28 = a4;
  v29 = v25;
  v16 = *(_QWORD *)v26;
  if (*(_QWORD *)v26)
  {
    v31 = "Could not find TBAA parent in struct type node";
    v32 = 259;
    v17 = *(llvm::raw_ostream **)v16;
    if (!*(_QWORD *)v16)
    {
      *(_BYTE *)(v16 + 192) = 1;
      return 0;
    }
    llvm::Twine::print((llvm::Twine *)&v31, *(llvm::raw_ostream **)v16);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17, 10);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 10;
    }
    v24 = *(llvm::raw_ostream **)v16;
    *(_BYTE *)(v16 + 192) = 1;
    if (v24)
      llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>((_anonymous_namespace_::TypePrinting **)v16, &v29, &v30, &v28);
  }
  return 0;
}

uint64_t llvm::TBAAVerifier::visitTBAAMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, const llvm::MDNode *a3)
{
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  llvm::Metadata **v12;
  llvm::Metadata *FieldNodeFromTBAABaseNode;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  unint64_t *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  int v27;
  unsigned int v28;
  unint64_t *v29;
  llvm::raw_ostream *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  llvm::APInt *v34;
  unsigned int v35;
  int v36;
  unint64_t *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  const void **v44;
  llvm::raw_ostream *v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  int v50;
  const llvm::MDNode *v51;
  unint64_t v52;
  unint64_t v53;
  _BOOL4 v54;
  BOOL isValidScalarTBAANode;
  unsigned int v56;
  _QWORD *p_p;
  uint64_t v58;
  llvm::Metadata **v59;
  uint64_t v60;
  char *v61;
  char v62;
  _QWORD *v63;
  void **v64;
  unsigned int v65;
  unsigned __int8 *v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  _WORD v71[16];
  void *__p;
  unsigned int v73;
  llvm::Metadata *v74;
  llvm::Metadata *v75;
  llvm::Metadata *v76;

  v76 = a3;
  v6 = (unint64_t *)((char *)a3 - 16);
  v7 = *((_QWORD *)a3 - 2);
  if ((v7 & 2) == 0)
  {
    if (((v7 >> 6) & 0xF) != 0)
      goto LABEL_3;
LABEL_13:
    __p = a2;
    v14 = *this;
    if (*this)
    {
      v67 = "TBAA metadata cannot have 0 operands";
      v71[0] = 259;
      v15 = *(llvm::raw_ostream **)v14;
      if (*(_QWORD *)v14)
      {
        llvm::Twine::print((llvm::Twine *)&v67, *(llvm::raw_ostream **)v14);
        v16 = (_BYTE *)*((_QWORD *)v15 + 4);
        if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
        {
          llvm::raw_ostream::write(v15, 10);
          v20 = *(llvm::raw_ostream **)v14;
          *((_BYTE *)v14 + 192) = 1;
          if (!v20)
            return 0;
        }
        else
        {
          *((_QWORD *)v15 + 4) = v16 + 1;
          *v16 = 10;
          v17 = *(llvm::raw_ostream **)v14;
          *((_BYTE *)v14 + 192) = 1;
          if (!v17)
            return 0;
        }
        goto LABEL_56;
      }
LABEL_88:
      *((_BYTE *)v14 + 192) = 1;
    }
    return 0;
  }
  if (!*((_DWORD *)a3 - 6))
    goto LABEL_13;
LABEL_3:
  v8 = *((unsigned __int8 *)a2 + 16) - 60;
  v9 = v8 > 0x1C;
  v10 = (1 << v8) & 0x11000033;
  if (v9 || v10 == 0)
  {
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[51],llvm::Instruction *>(this, "This instruction shall not have a TBAA access tag!", (llvm::raw_ostream **)&v67);
    return 0;
  }
  if ((v7 & 2) != 0)
  {
    if (***((unsigned __int8 ***)a3 - 4) - 5 <= 0x1E && *((_DWORD *)a3 - 6) > 2u)
    {
      FieldNodeFromTBAABaseNode = (llvm::Metadata *)**((_QWORD **)a3 - 4);
      if (!FieldNodeFromTBAABaseNode)
        goto LABEL_22;
LABEL_21:
      switch(*(_BYTE *)FieldNodeFromTBAABaseNode)
      {
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
          goto LABEL_22;
        default:
          FieldNodeFromTBAABaseNode = 0;
          v75 = 0;
          v74 = 0;
          if ((v7 & 2) != 0)
            goto LABEL_31;
          goto LABEL_23;
      }
    }
LABEL_25:
    __p = a2;
    v19 = *this;
    if (*this)
    {
      v67 = "Old-style TBAA is no longer allowed, use struct-path TBAA instead";
      v71[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v19, (llvm::Twine *)&v67, (llvm::raw_ostream **)&__p);
    }
    return 0;
  }
  v12 = (llvm::Metadata **)&v6[-((v7 >> 2) & 0xF)];
  if (*(unsigned __int8 *)*v12 - 5 > 0x1E || (*((_QWORD *)a3 - 2) & 0x3C0uLL) <= 0x80)
    goto LABEL_25;
  FieldNodeFromTBAABaseNode = *v12;
  if (*v12)
    goto LABEL_21;
LABEL_22:
  v75 = FieldNodeFromTBAABaseNode;
  v74 = 0;
  if ((v7 & 2) != 0)
  {
LABEL_31:
    v18 = *(llvm::Metadata **)(*((_QWORD *)a3 - 4) + 8);
    if (!v18)
      goto LABEL_44;
  }
  else
  {
LABEL_23:
    v18 = (llvm::Metadata *)v6[-((v7 >> 2) & 0xF) + 1];
    if (!v18)
      goto LABEL_44;
  }
  if (*(unsigned __int8 *)v18 - 5 > 0x1E)
  {
    v18 = 0;
    goto LABEL_44;
  }
  v74 = v18;
  v21 = *((_QWORD *)v18 - 2);
  if ((v21 & 2) != 0)
  {
    if (*((_DWORD *)v18 - 6) < 3u)
      goto LABEL_44;
    v22 = (unsigned __int8 **)*((_QWORD *)v18 - 4);
  }
  else
  {
    if ((*((_QWORD *)v18 - 2) & 0x3C0uLL) < 0xC0)
      goto LABEL_44;
    v22 = (unsigned __int8 **)((char *)v18 - 8 * ((v21 >> 2) & 0xF) - 16);
  }
  v23 = *v22;
  if (!v23 || *v23 - 5 > 0x1E)
  {
LABEL_44:
    if ((v7 & 2) != 0)
    {
      if (*((_DWORD *)a3 - 6) >= 5u)
      {
LABEL_46:
        __p = a2;
        v14 = *this;
        if (*this)
        {
          v67 = "Struct tag metadata must have either 3 or 4 operands";
          v71[0] = 259;
          v25 = *(llvm::raw_ostream **)v14;
          if (*(_QWORD *)v14)
          {
            llvm::Twine::print((llvm::Twine *)&v67, *(llvm::raw_ostream **)v14);
            v26 = (_BYTE *)*((_QWORD *)v25 + 4);
            if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
            {
              llvm::raw_ostream::write(v25, 10);
            }
            else
            {
              *((_QWORD *)v25 + 4) = v26 + 1;
              *v26 = 10;
            }
            v30 = *(llvm::raw_ostream **)v14;
            *((_BYTE *)v14 + 192) = 1;
            if (!v30)
              return 0;
LABEL_56:
            llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v14, (unsigned __int8 **)&__p, &v76);
            return 0;
          }
          goto LABEL_88;
        }
        return 0;
      }
    }
    else if (((v7 >> 6) & 0xF) >= 5)
    {
      goto LABEL_46;
    }
    v27 = 0;
    v28 = 3;
    if ((v7 & 2) == 0)
      goto LABEL_52;
    goto LABEL_63;
  }
  if ((v7 & 2) != 0)
  {
    if ((*((_DWORD *)a3 - 6) & 0xFFFFFFFE) == 4)
    {
      v24 = (unint64_t *)*((_QWORD *)a3 - 4);
      goto LABEL_59;
    }
LABEL_73:
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Access tag metadata must have either 4 or 5 operands", (unsigned __int8 **)&v67, &v76);
    return 0;
  }
  if ((v7 & 0x380 | 0x40) != 0x140)
    goto LABEL_73;
  v24 = &v6[-((v7 >> 2) & 0xF)];
LABEL_59:
  v31 = v24[3];
  if (!v31 || *(_BYTE *)v31 != 1 || *(_BYTE *)(*(_QWORD *)(v31 + 128) + 16) != 16)
  {
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Access size field must be a constant", (unsigned __int8 **)&v67, &v76);
    return 0;
  }
  v28 = 4;
  v27 = 1;
  if ((v7 & 2) == 0)
  {
LABEL_52:
    if (((v7 >> 6) & 0xF) != v28 + 1)
      goto LABEL_77;
    v29 = &v6[-((v7 >> 2) & 0xF)];
    goto LABEL_65;
  }
LABEL_63:
  if (*((_DWORD *)a3 - 6) != v28 + 1)
    goto LABEL_77;
  v29 = (unint64_t *)*((_QWORD *)a3 - 4);
LABEL_65:
  v32 = v29[v28];
  if (!v32 || *(_BYTE *)v32 != 1 || (v33 = *(_QWORD *)(v32 + 128), *(_BYTE *)(v33 + 16) != 16))
  {
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Immutability tag on struct tag metadata must be a constant", (unsigned __int8 **)&v67, &v76);
    return 0;
  }
  v34 = (llvm::APInt *)(v33 + 24);
  v35 = *(_DWORD *)(v33 + 32);
  if (v35 > 0x40)
  {
    v36 = llvm::APInt::countLeadingZerosSlowCase(v34);
    if (v36 == v35 || v36 == v35 - 1)
      goto LABEL_77;
LABEL_76:
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Immutability part of the struct tag metadata must be either 0 or 1", (unsigned __int8 **)&v67, &v76);
    return 0;
  }
  if (*(_QWORD *)v34 >= 2uLL)
    goto LABEL_76;
LABEL_77:
  if (!FieldNodeFromTBAABaseNode || !v18)
  {
    __p = a2;
    v14 = *this;
    if (!v14)
      return 0;
    v67 = "Malformed struct tag metadata: base and access-type should be non-null and point to Metadata nodes";
    v71[0] = 259;
    v38 = *(llvm::raw_ostream **)v14;
    if (*(_QWORD *)v14)
    {
      llvm::Twine::print((llvm::Twine *)&v67, *(llvm::raw_ostream **)v14);
      v39 = (_BYTE *)*((_QWORD *)v38 + 4);
      if ((unint64_t)v39 >= *((_QWORD *)v38 + 3))
      {
        llvm::raw_ostream::write(v38, 10);
      }
      else
      {
        *((_QWORD *)v38 + 4) = v39 + 1;
        *v39 = 10;
      }
      v45 = *(llvm::raw_ostream **)v14;
      *((_BYTE *)v14 + 192) = 1;
      if (v45)
        llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>((llvm::raw_ostream **)v14, (unsigned __int8 **)&__p, &v76, &v75, &v74);
      return 0;
    }
    goto LABEL_88;
  }
  if ((v27 & 1) == 0)
  {
    if (!llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, v18))
    {
      v67 = (const char *)a2;
      llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>((llvm::Metadata *)this, "Access type node must be a valid scalar type", (unsigned __int8 **)&v67, &v76, &v74);
      return 0;
    }
    v7 = *v6;
  }
  if ((v7 & 2) != 0)
    v37 = (unint64_t *)*((_QWORD *)a3 - 4);
  else
    v37 = &v6[-((v7 >> 2) & 0xF)];
  v42 = v37[2];
  if (!v42 || *(_BYTE *)v42 != 1 || (v43 = *(_QWORD *)(v42 + 128), *(_BYTE *)(v43 + 16) != 16))
  {
    v67 = (const char *)a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Offset must be constant integer", (unsigned __int8 **)&v67, &v76);
    return 0;
  }
  v44 = (const void **)(v43 + 24);
  v73 = *(_DWORD *)(v43 + 32);
  if (v73 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, v44);
  else
    __p = (void *)*v44;
  v46 = 0;
  v67 = (const char *)v71;
  v68 = (char *)v71;
  v69 = 4;
  v70 = 0;
  do
  {
    v47 = *((_QWORD *)FieldNodeFromTBAABaseNode - 2);
    v48 = (v47 & 2) != 0 ? *((_DWORD *)FieldNodeFromTBAABaseNode - 6) : (v47 >> 6) & 0xF;
    if (v48 < 2)
      break;
    if (v68 != v67)
      goto LABEL_109;
    v58 = HIDWORD(v69);
    if (HIDWORD(v69))
    {
      v59 = 0;
      v60 = 8 * HIDWORD(v69);
      v61 = v68;
      do
      {
        if (*(llvm::Metadata **)v61 == FieldNodeFromTBAABaseNode)
        {
          v50 = 0;
          goto LABEL_110;
        }
        if (*(_QWORD *)v61 == -2)
          v59 = (llvm::Metadata **)v61;
        v61 += 8;
        v60 -= 8;
      }
      while (v60);
      if (!v59)
        goto LABEL_134;
      *v59 = FieldNodeFromTBAABaseNode;
      --v70;
      v50 = 1;
      goto LABEL_110;
    }
LABEL_134:
    if (HIDWORD(v69) < v69)
    {
      ++HIDWORD(v69);
      *(_QWORD *)&v68[8 * v58] = FieldNodeFromTBAABaseNode;
      v50 = 1;
    }
    else
    {
LABEL_109:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v67, FieldNodeFromTBAABaseNode);
      v50 = v49;
    }
LABEL_110:
    if (!v50)
    {
      v66 = (unsigned __int8 *)a2;
      llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Cycle detected in struct path", &v66, &v76);
      goto LABEL_150;
    }
    v51 = v75;
    v52 = llvm::TBAAVerifier::verifyTBAABaseNode((llvm::TBAAVerifier *)this, a2, v75, v27);
    v53 = HIDWORD(v52);
    v65 = HIDWORD(v52);
    if ((_BYTE)v52)
      goto LABEL_150;
    v54 = v51 == v74;
    isValidScalarTBAANode = llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, v51);
    v56 = v73;
    if (isValidScalarTBAANode || v51 == v74)
    {
      if (v73 >= 0x41)
      {
        if (v56 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
          goto LABEL_148;
        p_p = __p;
      }
      else
      {
        p_p = &__p;
      }
      if (*p_p)
      {
LABEL_148:
        v66 = (unsigned __int8 *)a2;
        v64 = &__p;
        llvm::TBAAVerifier::CheckFailed<char const(&)[46],llvm::Instruction *,llvm::MDNode const*&,llvm::APInt *>((uint64_t *)this, "Offset not zero at the point of scalar access", &v66, &v76, (llvm::APInt **)&v64);
        goto LABEL_150;
      }
    }
    if (v56 != (_DWORD)v53)
    {
      if ((_DWORD)v53)
      {
        if ((_DWORD)v53 == -1)
          v62 = v27;
        else
          v62 = 0;
        if ((v62 & 1) == 0)
          goto LABEL_149;
      }
      else
      {
        if (v56 >= 0x41)
        {
          if (v56 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40)
            goto LABEL_149;
          v63 = __p;
        }
        else
        {
          v63 = &__p;
        }
        if (*v63)
        {
LABEL_149:
          v66 = (unsigned __int8 *)a2;
          LODWORD(v64) = v56;
          llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>((llvm::raw_ostream *)this, "Access bit-width not the same as description bit-width", &v66, &v76, &v65, (unsigned int *)&v64);
          goto LABEL_150;
        }
      }
    }
    v46 |= v54;
    if ((v27 & v46 & 1) != 0)
      goto LABEL_145;
    FieldNodeFromTBAABaseNode = (llvm::Metadata *)llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode((llvm::TBAAVerifier *)this, a2, v51, (llvm::APInt *)&__p, v27);
    v75 = FieldNodeFromTBAABaseNode;
  }
  while (FieldNodeFromTBAABaseNode);
  if ((v46 & 1) != 0)
  {
LABEL_145:
    v40 = 1;
    goto LABEL_151;
  }
  v66 = (unsigned __int8 *)a2;
  llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>((llvm::Metadata *)this, "Did not see access type in access path!", &v66, &v76);
LABEL_150:
  v40 = 0;
LABEL_151:
  if (v68 != v67)
    free(v68);
  if (v73 >= 0x41 && __p)
    operator delete[](__p);
  return v40;
}

llvm::Metadata *llvm::TBAAVerifier::CheckFailed<char const(&)[37],llvm::Instruction *,llvm::MDNode const*&>(llvm::Metadata *result, _BYTE *a2, unsigned __int8 **a3, llvm::Metadata **a4)
{
  uint64_t v4;
  char v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = 1;
    v14 = 1;
    if (*a2)
    {
      v12 = a2;
      v7 = 3;
    }
    v13 = v7;
    v8 = *(llvm::raw_ostream **)v4;
    if (!*(_QWORD *)v4)
    {
      *(_BYTE *)(v4 + 192) = 1;
      return result;
    }
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)&v12, *(llvm::raw_ostream **)v4);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 < *((_QWORD *)v8 + 3))
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 10;
      v10 = *(llvm::raw_ostream **)v4;
      *(_BYTE *)(v4 + 192) = 1;
      if (!v10)
        return result;
      return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
    }
    result = llvm::raw_ostream::write(v8, 10);
    v11 = *(llvm::raw_ostream **)v4;
    *(_BYTE *)(v4 + 192) = 1;
    if (v11)
      return llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>((_anonymous_namespace_::TypePrinting **)v4, a3, a4);
  }
  return result;
}

llvm::raw_ostream *llvm::TBAAVerifier::CheckFailed<char const(&)[51],llvm::Instruction *>(llvm::raw_ostream **a1, _BYTE *a2, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *result;
  char v4;
  _BYTE *v5;
  char v6;
  char v7;

  result = *a1;
  if (result)
  {
    v4 = 1;
    v7 = 1;
    if (*a2)
    {
      v5 = a2;
      v4 = 3;
    }
    v6 = v4;
    return llvm::VerifierSupport::CheckFailed<llvm::Function const*>(result, (llvm::Twine *)&v5, a3);
  }
  return result;
}

llvm::Metadata *llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>(llvm::Metadata *result, _BYTE *a2, unsigned __int8 **a3, llvm::Metadata **a4, llvm::Metadata **a5)
{
  uint64_t v5;
  char v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  char v15;
  char v16;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v9 = 1;
    v16 = 1;
    if (*a2)
    {
      v14 = a2;
      v9 = 3;
    }
    v15 = v9;
    v10 = *(llvm::raw_ostream **)v5;
    if (!*(_QWORD *)v5)
    {
      *(_BYTE *)(v5 + 192) = 1;
      return result;
    }
    result = (llvm::Metadata *)llvm::Twine::print((llvm::Twine *)&v14, *(llvm::raw_ostream **)v5);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 < *((_QWORD *)v10 + 3))
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 10;
      v12 = *(llvm::raw_ostream **)v5;
      *(_BYTE *)(v5 + 192) = 1;
      if (!v12)
        return result;
      return llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>((_anonymous_namespace_::TypePrinting **)v5, a3, a4, a5);
    }
    result = llvm::raw_ostream::write(v10, 10);
    v13 = *(llvm::raw_ostream **)v5;
    *(_BYTE *)(v5 + 192) = 1;
    if (v13)
      return llvm::VerifierSupport::WriteTs<llvm::Instruction const*,llvm::DILocation const*,llvm::Metadata *>((_anonymous_namespace_::TypePrinting **)v5, a3, a4, a5);
  }
  return result;
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[46],llvm::Instruction *,llvm::MDNode const*&,llvm::APInt *>(uint64_t *a1, _BYTE *a2, unsigned __int8 **a3, llvm::Metadata **a4, llvm::APInt **a5)
{
  uint64_t v5;
  char v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  char v15;
  char v16;

  v5 = *a1;
  if (*a1)
  {
    v9 = 1;
    v16 = 1;
    if (*a2)
    {
      v14 = a2;
      v9 = 3;
    }
    v15 = v9;
    v10 = *(llvm::raw_ostream **)v5;
    if (!*(_QWORD *)v5)
    {
      *(_BYTE *)(v5 + 192) = 1;
      return;
    }
    llvm::Twine::print((llvm::Twine *)&v14, *(llvm::raw_ostream **)v5);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 < *((_QWORD *)v10 + 3))
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 10;
      v12 = *(llvm::raw_ostream **)v5;
      *(_BYTE *)(v5 + 192) = 1;
      if (!v12)
        return;
LABEL_10:
      llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>((_anonymous_namespace_::TypePrinting **)v5, a3, a4, a5);
      return;
    }
    llvm::raw_ostream::write(v10, 10);
    v13 = *(llvm::raw_ostream **)v5;
    *(_BYTE *)(v5 + 192) = 1;
    if (v13)
      goto LABEL_10;
  }
}

llvm::raw_ostream *llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>(llvm::raw_ostream *result, _BYTE *a2, unsigned __int8 **a3, llvm::Metadata **a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6;
  char v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  char v17;
  char v18;

  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v11 = 1;
    v18 = 1;
    if (*a2)
    {
      v16 = a2;
      v11 = 3;
    }
    v17 = v11;
    v12 = *(llvm::raw_ostream **)v6;
    if (!*(_QWORD *)v6)
    {
      *(_BYTE *)(v6 + 192) = 1;
      return result;
    }
    result = (llvm::raw_ostream *)llvm::Twine::print((llvm::Twine *)&v16, *(llvm::raw_ostream **)v6);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 < *((_QWORD *)v12 + 3))
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 10;
      v14 = *(llvm::raw_ostream **)v6;
      *(_BYTE *)(v6 + 192) = 1;
      if (!v14)
        return result;
      return llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,unsigned int,unsigned int>((_anonymous_namespace_::TypePrinting **)v6, a3, a4, a5, a6);
    }
    result = llvm::raw_ostream::write(v12, 10);
    v15 = *(llvm::raw_ostream **)v6;
    *(_BYTE *)(v6 + 192) = 1;
    if (v15)
      return llvm::VerifierSupport::WriteTs<llvm::Instruction *,llvm::MDNode const*,unsigned int,unsigned int>((_anonymous_namespace_::TypePrinting **)v6, a3, a4, a5, a6);
  }
  return result;
}

llvm::raw_ostream ***llvm::function_ref<void ()(llvm::Twine const&)>::callback_fn<`anonymous namespace'::Verifier::verify(llvm::Function const&)::{lambda(llvm::Twine const&)#1}>(llvm::raw_ostream ***result, llvm::Twine *this)
{
  llvm::raw_ostream **v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v2 = *result;
  v3 = **result;
  if (!v3)
    goto LABEL_4;
  result = (llvm::raw_ostream ***)llvm::Twine::print(this, v3);
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 < *((_QWORD *)v3 + 3))
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = 10;
LABEL_4:
    *((_BYTE *)v2 + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream ***)llvm::raw_ostream::write(v3, 10);
  *((_BYTE *)v2 + 192) = 1;
  return result;
}

_QWORD **llvm::VerifierSupport::CheckFailed(_QWORD **this, const llvm::Twine *a2)
{
  _QWORD **v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v2 = this;
  v3 = (llvm::raw_ostream *)*this;
  if (!*this)
    goto LABEL_4;
  this = (_QWORD **)llvm::Twine::print(a2, v3);
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 < *((_QWORD *)v3 + 3))
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = 10;
LABEL_4:
    *((_BYTE *)v2 + 192) = 1;
    return this;
  }
  this = (_QWORD **)llvm::raw_ostream::write(v3, 10);
  *((_BYTE *)v2 + 192) = 1;
  return this;
}

void `anonymous namespace'::Verifier::visitGlobalValue(llvm::DataLayout **this, const llvm::GlobalValue *a2)
{
  unsigned int v5;
  int v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  char *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::Value *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t MetadataImpl;
  const llvm::Module **v24;
  llvm::Type ***v25;
  int v26;
  llvm::DataLayout *v27;
  llvm::DataLayout *v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  llvm::DataLayout *v31;
  char v32;
  unsigned int i;
  uint64_t v34;
  llvm::DataLayout *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t v45;
  llvm::DataLayout *v46;
  uint64_t v47;
  llvm::DataLayout *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::DataLayout *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::DataLayout *v57;
  llvm::DataLayout *v58;
  llvm::DataLayout *v59;
  uint64_t v60;
  const llvm::GlobalValue **v61;
  uint64_t v62;
  const llvm::GlobalValue **v63;
  llvm::DataLayout *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69[4];
  __int16 v70;
  unsigned __int8 *v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[16];
  __int16 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (llvm::GlobalValue::isDeclaration(a2) && (*((_DWORD *)a2 + 8) & 0xF) != 0 && (*((_DWORD *)a2 + 8) & 0xF) != 9)
  {
    v11 = "Global is external, but doesn't have external or weak linkage!";
LABEL_81:
    v72 = v11;
    v75 = 259;
    v69[0] = (unsigned __int8 *)a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, (llvm::raw_ostream **)v69);
    return;
  }
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 <= 3 && v5 != 1)
  {
    v69[0] = (unsigned __int8 *)a2;
    v7 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
    if (v7 && (v7 - 1) >= 0x21u)
    {
      v72 = "huge alignment values are unsupported";
      v75 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, (llvm::raw_ostream **)v69);
      return;
    }
    if ((*((_BYTE *)a2 + 23) & 0x20) == 0
      || (v8 = (unsigned __int8 *)llvm::Value::getMetadataImpl(a2, 22), (v71 = v8) == 0))
    {
LABEL_40:
      if ((*((_BYTE *)a2 + 23) & 0x20) != 0)
      {
        MetadataImpl = llvm::Value::getMetadataImpl(a2, 21);
        if (MetadataImpl)
        {
          v24 = (const llvm::Module **)MetadataImpl;
          llvm::DataLayout::getIntPtrType(this[22], *(llvm::Type **)a2);
        }
      }
      goto LABEL_43;
    }
    v9 = *((_QWORD *)v8 - 2);
    if ((v9 & 2) != 0)
    {
      if (*((_DWORD *)v8 - 6) == 1)
      {
        v10 = (unsigned __int8 *)*((_QWORD *)v8 - 4);
        goto LABEL_21;
      }
    }
    else if ((*((_QWORD *)v8 - 2) & 0x3C0) == 0x40)
    {
      v10 = &v8[-8 * ((v9 >> 2) & 0xF) - 16];
LABEL_21:
      v12 = *(unsigned __int8 **)v10;
      if (!v12)
      {
        v13 = "associated metadata must have a global value";
LABEL_28:
        v72 = v13;
        v75 = 259;
        v16 = *this;
        if (*this)
        {
          llvm::Twine::print((llvm::Twine *)&v72, *this);
          v17 = (_BYTE *)*((_QWORD *)v16 + 4);
          if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
          {
            llvm::raw_ostream::write(v16, 10);
          }
          else
          {
            *((_QWORD *)v16 + 4) = v17 + 1;
            *v17 = 10;
          }
          v28 = *this;
          *((_BYTE *)this + 192) = 1;
          if (v28)
            llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>(this, v69, (llvm::Metadata **)&v71);
          return;
        }
LABEL_73:
        *((_BYTE *)this + 192) = 1;
        return;
      }
      if (*v12 - 3 <= 0xFFFFFFFD)
      {
        v13 = "associated metadata must be ValueAsMetadata";
        goto LABEL_28;
      }
      v18 = (llvm::Value *)*((_QWORD *)v12 + 16);
      if (*(_BYTE *)(*(_QWORD *)v18 + 8) != 15)
      {
        v72 = "associated value must be pointer typed";
        v75 = 259;
        v29 = *this;
        if (!*this)
          goto LABEL_73;
        llvm::Twine::print((llvm::Twine *)&v72, *this);
        v30 = (_BYTE *)*((_QWORD *)v29 + 4);
        if ((unint64_t)v30 >= *((_QWORD *)v29 + 3))
        {
          llvm::raw_ostream::write(v29, 10);
        }
        else
        {
          *((_QWORD *)v29 + 4) = v30 + 1;
          *v30 = 10;
        }
        v64 = *this;
        *((_BYTE *)this + 192) = 1;
        if (v64)
          llvm::VerifierSupport::WriteTs<llvm::GlobalValue,llvm::MDNode const*>(this, a2, (llvm::Metadata **)&v71);
        return;
      }
      v19 = (unsigned __int8 *)llvm::Value::stripPointerCastsAndAliases(v18);
      v68 = v19;
      v20 = v19[16];
      if ((v20 > 3 || v20 == 1) && v20 >= 0x15)
      {
        v72 = "associated metadata must point to a GlobalObject";
        v75 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::Value const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, v69, (llvm::raw_ostream **)&v68);
        return;
      }
      if (v19 == (unsigned __int8 *)a2)
      {
        v72 = "global values should not associate to themselves";
        v75 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>((llvm::Metadata *)this, (llvm::Twine *)&v72, v69, (llvm::Metadata **)&v71);
        return;
      }
      goto LABEL_40;
    }
    v72 = "associated metadata must have one operand";
    v75 = 259;
    v68 = (unsigned __int8 *)a2;
    v14 = *this;
    if (!*this)
      goto LABEL_73;
    llvm::Twine::print((llvm::Twine *)&v72, *this);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 10);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 10;
    }
    v27 = *this;
    *((_BYTE *)this + 192) = 1;
    if (v27)
      llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::MDNode const*>(this, &v68, (llvm::Metadata **)&v71);
    return;
  }
LABEL_43:
  if ((*((_DWORD *)a2 + 8) & 0xF) == 1)
    goto LABEL_152;
  if ((*((_DWORD *)a2 + 8) & 0xF) == 6)
  {
    if (*((_BYTE *)a2 + 16) != 3)
    {
      v11 = "Only global variables can have appending linkage!";
      goto LABEL_81;
    }
    v69[0] = (unsigned __int8 *)a2;
    if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 8) != 17)
    {
      v72 = "Only global arrays can have appending linkage!";
      v75 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)this, (llvm::Twine *)&v72, (llvm::raw_ostream **)v69);
      return;
    }
  }
  if (llvm::GlobalValue::isDeclaration(a2))
  {
LABEL_152:
    if (llvm::GlobalValue::getComdat(a2))
    {
      v11 = "Declaration may not be in a Comdat!";
      goto LABEL_81;
    }
  }
  v26 = *((_DWORD *)a2 + 8);
  if ((v26 & 0x300) == 0x100)
  {
    if ((v26 & 0x30) != 0)
    {
      v11 = "dllimport GlobalValue must have default visibility";
      goto LABEL_81;
    }
    if ((v26 & 0x4000) != 0)
    {
      v11 = "GlobalValue with DLLImport Storage is dso_local!";
      goto LABEL_81;
    }
    if (!llvm::GlobalValue::isDeclaration(a2))
      goto LABEL_74;
    v26 = *((_DWORD *)a2 + 8);
    if ((v26 & 0xF) == 0)
      goto LABEL_75;
    if (llvm::GlobalValue::hasExternalWeakLinkage(a2))
    {
      v26 = *((_DWORD *)a2 + 8);
    }
    else
    {
LABEL_74:
      v26 = *((_DWORD *)a2 + 8);
      if ((v26 & 0xF) != 1)
      {
        v11 = "Global is marked as dllimport, but not external";
        goto LABEL_81;
      }
    }
  }
  else if ((v26 & 0x300) == 0x200 && (v26 & 0x30) == 0x10)
  {
    v11 = "dllexport GlobalValue must have default or protected visibility";
    goto LABEL_81;
  }
LABEL_75:
  if ((v26 & 0xFu) - 7 >= 2)
  {
    if ((v26 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(a2) & 1) != 0)
      goto LABEL_83;
    v26 = *((_DWORD *)a2 + 8);
  }
  if ((v26 & 0x4000) == 0)
  {
    v11 = "GlobalValue with local linkage or non-default visibility must be dso_local!";
    goto LABEL_81;
  }
LABEL_83:
  v31 = this[194];
  if (v31 != this[193])
    goto LABEL_84;
  v60 = *((unsigned int *)this + 391);
  if (!(_DWORD)v60)
    goto LABEL_142;
  v61 = 0;
  v62 = 8 * v60;
  v63 = (const llvm::GlobalValue **)this[194];
  do
  {
    if (*v63 == a2)
      return;
    if (*v63 == (const llvm::GlobalValue *)-2)
      v61 = v63;
    ++v63;
    v62 -= 8;
  }
  while (v62);
  if (v61)
  {
    *v61 = a2;
    --*((_DWORD *)this + 392);
  }
  else
  {
LABEL_142:
    if (v60 >= *((_DWORD *)this + 390))
    {
LABEL_84:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(this + 193), a2);
      if (!v32)
        return;
      goto LABEL_85;
    }
    *((_DWORD *)this + 391) = v60 + 1;
    *((_QWORD *)v31 + v60) = a2;
  }
LABEL_85:
  v72 = v74;
  v73 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((uint64_t)&v72, (uint64_t)v74, *((_QWORD *)a2 + 1), 0);
  for (i = v73; (_DWORD)v73; i = v73)
  {
    v34 = *((_QWORD *)v72 + i - 1);
    LODWORD(v73) = i - 1;
    v35 = this[194];
    if (v35 != this[193])
      goto LABEL_90;
    v45 = *((unsigned int *)this + 391);
    if ((_DWORD)v45)
    {
      v46 = 0;
      v47 = 8 * v45;
      v48 = this[194];
      while (*(_QWORD *)v48 != v34)
      {
        if (*(_QWORD *)v48 == -2)
          v46 = v48;
        v48 = (llvm::DataLayout *)((char *)v48 + 8);
        v47 -= 8;
        if (!v47)
        {
          if (!v46)
            goto LABEL_121;
          *(_QWORD *)v46 = v34;
          --*((_DWORD *)this + 392);
          goto LABEL_91;
        }
      }
      continue;
    }
LABEL_121:
    if (v45 < *((_DWORD *)this + 390))
    {
      *((_DWORD *)this + 391) = v45 + 1;
      *((_QWORD *)v35 + v45) = v34;
    }
    else
    {
LABEL_90:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(this + 193), (const void *)v34);
      if (!v36)
        continue;
    }
LABEL_91:
    v37 = *(unsigned __int8 *)(v34 + 16);
    if (v37 <= 0x1B)
      v38 = 0;
    else
      v38 = v34;
    v71 = (unsigned __int8 *)v38;
    if (v38)
    {
      v39 = *(_QWORD *)(v38 + 40);
      if (v39)
      {
        v40 = *(_QWORD *)(v39 + 64);
        if (v40)
        {
          v41 = *(_QWORD *)(v40 + 40);
          v42 = (unsigned __int8 *)this[1];
          if ((unsigned __int8 *)v41 == v42)
            continue;
          v68 = (unsigned __int8 *)a2;
          v69[0] = "Global is referenced in a different module!";
          v70 = 259;
          v66 = (unsigned __int8 *)v40;
          v67 = v42;
          v65 = v41;
          v43 = *this;
          if (*this)
          {
            llvm::Twine::print((llvm::Twine *)v69, *this);
            v44 = (_BYTE *)*((_QWORD *)v43 + 4);
            if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
            {
              llvm::raw_ostream::write(v43, 10);
            }
            else
            {
              *((_QWORD *)v43 + 4) = v44 + 1;
              *v44 = 10;
            }
            v58 = *this;
            *((_BYTE *)this + 192) = 1;
            if (v58)
              llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Instruction const*,llvm::Function const*,llvm::Module const*>(this, &v68, (uint64_t *)&v67, &v71, &v66, &v65);
            continue;
          }
          goto LABEL_87;
        }
      }
      v68 = (unsigned __int8 *)a2;
      v69[0] = "Global is referenced by parentless instruction!";
      v70 = 259;
      v49 = *this;
      v67 = (unsigned __int8 *)this[1];
      if (!v49)
        goto LABEL_87;
      llvm::Twine::print((llvm::Twine *)v69, v49);
      v50 = (_BYTE *)*((_QWORD *)v49 + 4);
      if ((unint64_t)v50 < *((_QWORD *)v49 + 3))
      {
        *((_QWORD *)v49 + 4) = v50 + 1;
        *v50 = 10;
        v51 = *this;
        *((_BYTE *)this + 192) = 1;
        if (!v51)
          continue;
LABEL_125:
        llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Instruction const*>(this, &v68, (uint64_t *)&v67, (llvm::raw_ostream **)&v71);
        continue;
      }
      llvm::raw_ostream::write(v49, 10);
      v57 = *this;
      *((_BYTE *)this + 192) = 1;
      if (v57)
        goto LABEL_125;
    }
    else
    {
      if (v37)
        v52 = 0;
      else
        v52 = v34;
      v68 = (unsigned __int8 *)v52;
      if (!v52)
      {
        llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((uint64_t)&v72, (uint64_t)v72 + 8 * v73, *(_QWORD *)(v34 + 8), 0);
        continue;
      }
      v53 = *(_QWORD *)(v52 + 40);
      v54 = (unsigned __int8 *)this[1];
      if ((unsigned __int8 *)v53 != v54)
      {
        v69[0] = "Global is used by function in a different module";
        v70 = 259;
        v66 = v54;
        v67 = (unsigned __int8 *)a2;
        v65 = v53;
        v55 = *this;
        if (*this)
        {
          llvm::Twine::print((llvm::Twine *)v69, *this);
          v56 = (_BYTE *)*((_QWORD *)v55 + 4);
          if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
          {
            llvm::raw_ostream::write(v55, 10);
          }
          else
          {
            *((_QWORD *)v55 + 4) = v56 + 1;
            *v56 = 10;
          }
          v59 = *this;
          *((_BYTE *)this + 192) = 1;
          if (v59)
            llvm::VerifierSupport::WriteTs<llvm::GlobalValue const*,llvm::Module const*,llvm::Function const*,llvm::Module const*>(this, &v67, (uint64_t *)&v66, &v68, &v65);
          continue;
        }
LABEL_87:
        *((_BYTE *)this + 192) = 1;
      }
    }
  }
  if (v72 != v74)
    free(v72);
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::Function const*>(llvm::raw_ostream *result, llvm::Twine *this, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v3 = result;
  v4 = *(llvm::raw_ostream **)result;
  if (!*(_QWORD *)result)
  {
    *((_BYTE *)result + 192) = 1;
    return result;
  }
  result = (llvm::raw_ostream *)llvm::Twine::print(this, v4);
  v6 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
  {
    result = llvm::raw_ostream::write(v4, 10);
    v7 = *(llvm::raw_ostream **)v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6 + 1;
    *v6 = 10;
    v7 = *(llvm::raw_ostream **)v3;
    *((_BYTE *)v3 + 192) = 1;
    if (!v7)
      return result;
  }
  result = *a3;
  if (*a3)
  {
    if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
      llvm::Value::print(result, v7, (llvm::raw_ostream *)((char *)v3 + 16), 0);
    llvm::Value::printAsOperand((Type **)result, v7, 1, (_anonymous_namespace_::TypePrinting **)v3 + 2);
    result = *(llvm::raw_ostream **)v3;
    v8 = *(_BYTE **)(*(_QWORD *)v3 + 32);
    if ((unint64_t)v8 < *(_QWORD *)(*(_QWORD *)v3 + 24))
    {
      *((_QWORD *)result + 4) = v8 + 1;
      *v8 = 10;
    }
    else
    {
      return llvm::raw_ostream::write(result, 10);
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::verifyFunctionAttrs(uint64_t a1, uint64_t a2, const void *a3, llvm::raw_ostream *a4, char a5, char a6)
{
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::Attribute *v19;
  uint64_t v20;
  llvm::Attribute *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  unsigned int PrimitiveSizeInBits;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  llvm::raw_ostream *v35;
  int v36;
  uint64_t v37;
  llvm::Type *v38;
  const char *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  unsigned int v43;
  int hasAttribute;
  int v45;
  char v46;
  int v47;
  int v48;
  uint64_t FnAttrs;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  int KindAsEnum;
  std::string *v54;
  std::string::size_type v55;
  llvm::raw_ostream *v56;
  llvm::Type *v57;
  unsigned int v58;
  int v59;
  llvm::raw_ostream *v60;
  _BYTE *v61;
  int v62;
  int v63;
  int v64;
  llvm::raw_ostream *v65;
  uint64_t AllocSizeArgs;
  uint64_t v67;
  unsigned int v68;
  char v69;
  char AllocKind;
  char v71;
  unsigned int VScaleRangeMin;
  unsigned int v73;
  const char *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Type *v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t VScaleRangeMax;
  int8x8_t v90;
  const char *v91;
  uint8x8_t v92;
  llvm::raw_ostream **ValueAsString;
  size_t v94;
  llvm::raw_ostream **v95;
  size_t v96;
  const char *v98;
  void *v99;
  std::string::size_type v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  void *__p[2];
  std::string::size_type v115;
  __int16 v116;
  void *v117[2];
  llvm::raw_ostream **v118;
  size_t v119;
  __int16 v120;
  uint64_t v121;
  std::string v122;
  std::string v123;
  uint64_t v124;
  uint64_t RetAttrs;
  llvm::raw_ostream *v126;
  uint64_t v127;
  uint64_t v128[2];

  v127 = a2;
  v128[0] = (uint64_t)a3;
  v126 = a4;
  if (!a3)
    return;
  v9 = *(_QWORD *)(a1 + 1264);
  if (v9 != *(_QWORD *)(a1 + 1256))
    goto LABEL_3;
  v15 = *(unsigned int *)(a1 + 1276);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = 8 * v15;
    v18 = *(_QWORD **)(a1 + 1264);
    do
    {
      if ((const void *)*v18 == a3)
      {
        v11 = 0;
        goto LABEL_4;
      }
      if (*v18 == -2)
        v16 = v18;
      ++v18;
      v17 -= 8;
    }
    while (v17);
    if (!v16)
      goto LABEL_45;
    *v16 = a3;
    --*(_DWORD *)(a1 + 1280);
    v11 = 1;
  }
  else
  {
LABEL_45:
    if (v15 >= *(_DWORD *)(a1 + 1272))
    {
LABEL_3:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 1256), a3);
      v11 = v10;
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 1276) = v15 + 1;
    *(_QWORD *)(v9 + 8 * v15) = a3;
    v11 = 1;
  }
LABEL_4:
  if (v11)
  {
    if (!llvm::AttributeList::hasParentContext((llvm::AttributeList *)v128, *(llvm::LLVMContext **)(a1 + 184)))
    {
      v117[0] = "Attribute list does not match Module context!";
      v120 = 259;
      __p[0] = v128;
      v33 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_101:
        *(_BYTE *)(a1 + 192) = 1;
        return;
      }
      llvm::Twine::print((llvm::Twine *)v117, *(llvm::raw_ostream **)a1);
      v34 = (_BYTE *)*((_QWORD *)v33 + 4);
      if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
      {
        llvm::raw_ostream::write(v33, 10);
        v42 = *(llvm::raw_ostream **)a1;
        *(_BYTE *)(a1 + 192) = 1;
        if (!v42)
          return;
      }
      else
      {
        *((_QWORD *)v33 + 4) = v34 + 1;
        *v34 = 10;
        v35 = *(llvm::raw_ostream **)a1;
        *(_BYTE *)(a1 + 192) = 1;
        if (!v35)
          return;
      }
      llvm::VerifierSupport::WriteTs<llvm::AttributeList *,llvm::Value const*>((llvm::raw_ostream **)a1, (llvm::AttributeList **)__p, &v126);
      return;
    }
    v12 = (_QWORD *)llvm::AttributeList::begin((llvm::AttributeList *)v128);
    v13 = llvm::AttributeList::end((llvm::AttributeList *)v128);
    if (v12 != (_QWORD *)v13)
    {
      v14 = (_QWORD *)v13;
      while (1)
      {
        if (*v12 && !llvm::AttributeSet::hasParentContext((llvm::AttributeSet *)v12, *(llvm::LLVMContext **)(a1 + 184)))
        {
          v117[0] = "Attribute set does not match Module context!";
          v120 = 259;
          __p[0] = v12;
          v60 = *(llvm::raw_ostream **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_101;
          llvm::Twine::print((llvm::Twine *)v117, *(llvm::raw_ostream **)a1);
          v61 = (_BYTE *)*((_QWORD *)v60 + 4);
          if ((unint64_t)v61 >= *((_QWORD *)v60 + 3))
          {
            llvm::raw_ostream::write(v60, 10);
          }
          else
          {
            *((_QWORD *)v60 + 4) = v61 + 1;
            *v61 = 10;
          }
          v65 = *(llvm::raw_ostream **)a1;
          *(_BYTE *)(a1 + 192) = 1;
          if (v65)
            llvm::VerifierSupport::WriteTs<llvm::AttributeSet const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)a1, (llvm::AttributeSetNode ***)__p, &v126);
          return;
        }
        v19 = (llvm::Attribute *)llvm::AttributeSet::begin((llvm::AttributeSet *)v12);
        v20 = llvm::AttributeSet::end((llvm::AttributeSet *)v12);
        if (v19 != (llvm::Attribute *)v20)
          break;
LABEL_16:
        if (++v12 == v14)
          goto LABEL_24;
      }
      v21 = (llvm::Attribute *)v20;
      while (llvm::Attribute::hasParentContext(v19, *(llvm::LLVMContext **)(a1 + 184)))
      {
        v19 = (llvm::Attribute *)((char *)v19 + 8);
        if (v19 == v21)
          goto LABEL_16;
      }
      v117[0] = "Attribute does not match Module context!";
      v120 = 259;
      __p[0] = v19;
      v40 = *(llvm::raw_ostream **)a1;
      if (*(_QWORD *)a1)
      {
        llvm::Twine::print((llvm::Twine *)v117, *(llvm::raw_ostream **)a1);
        v41 = (_BYTE *)*((_QWORD *)v40 + 4);
        if ((unint64_t)v41 >= *((_QWORD *)v40 + 3))
        {
          llvm::raw_ostream::write(v40, 10);
        }
        else
        {
          *((_QWORD *)v40 + 4) = v41 + 1;
          *v41 = 10;
        }
        v56 = *(llvm::raw_ostream **)a1;
        *(_BYTE *)(a1 + 192) = 1;
        if (v56)
          llvm::VerifierSupport::WriteTs<llvm::Attribute const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)a1, (llvm::Attribute **)__p, &v126);
        return;
      }
      goto LABEL_101;
    }
  }
LABEL_24:
  RetAttrs = llvm::AttributeList::getRetAttrs((llvm::AttributeList *)v128);
  v22 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)&RetAttrs);
  v23 = llvm::AttributeSet::end((llvm::AttributeSet *)&RetAttrs);
  if (v22 == (uint64_t *)v23)
  {
LABEL_34:
    v31 = **(_QWORD **)(v127 + 16);
    if (*(_BYTE *)(v31 + 8) == 18)
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(v127 + 16));
    else
      PrimitiveSizeInBits = 0;
    v36 = *(_DWORD *)(v127 + 12);
    v37 = (v36 - 1);
    if (v36 == 1)
      goto LABEL_64;
    v38 = *(llvm::Type **)(*(_QWORD *)(v127 + 16) + 8);
    __p[0] = (void *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)v128, 0);
    if ((a5 & 1) == 0)
    {
      if ((llvm::AttributeSet::hasAttribute(__p, 11) & 1) != 0)
      {
LABEL_44:
        v39 = "immarg attribute only applies to intrinsics";
LABEL_179:
        v117[0] = (void *)v39;
        v120 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v117, &v126);
        return;
      }
      if ((a6 & 1) == 0 && (llvm::AttributeSet::hasAttribute(__p, 74) & 1) != 0)
      {
LABEL_55:
        v39 = "Attribute 'elementtype' can only be applied to intrinsics and inline asm.";
        goto LABEL_179;
      }
    }
    if (*((_BYTE *)v38 + 8) == 18)
    {
      v43 = llvm::Type::getPrimitiveSizeInBits(v38);
      if (PrimitiveSizeInBits <= v43)
        PrimitiveSizeInBits = v43;
    }
    hasAttribute = llvm::AttributeSet::hasAttribute(__p, 18);
    v45 = llvm::AttributeSet::hasAttribute(__p, 48);
    v46 = v45;
    if (!v45 || llvm::Type::canLosslesslyBitCastTo(v38, **(llvm::Type ***)(v127 + 16)))
    {
      v47 = llvm::AttributeSet::hasAttribute(__p, 77);
      v112 = llvm::AttributeSet::hasAttribute(__p, 67);
      v110 = llvm::AttributeSet::hasAttribute(__p, 65);
      v48 = llvm::AttributeSet::hasAttribute(__p, 66);
      if (llvm::AttributeSet::hasAttribute(__p, 75) && *(_DWORD *)(v127 + 12) != 2)
        goto LABEL_177;
      if ((_DWORD)v37 == 1)
        goto LABEL_64;
      v57 = *(llvm::Type **)(*(_QWORD *)(v127 + 16) + 16);
      __p[0] = (void *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)v128, 1);
      if ((a5 & 1) == 0)
      {
        if ((llvm::AttributeSet::hasAttribute(__p, 11) & 1) != 0)
          goto LABEL_44;
        if ((a6 & 1) == 0 && (llvm::AttributeSet::hasAttribute(__p, 74) & 1) != 0)
          goto LABEL_55;
      }
      if (*((_BYTE *)v57 + 8) == 18)
      {
        v58 = llvm::Type::getPrimitiveSizeInBits(v57);
        if (PrimitiveSizeInBits <= v58)
          PrimitiveSizeInBits = v58;
      }
      v59 = llvm::AttributeSet::hasAttribute(__p, 18);
      if ((v59 & hasAttribute & 1) != 0)
      {
LABEL_86:
        v39 = "More than one parameter has attribute nest!";
        goto LABEL_179;
      }
      v108 = v59;
      if (!llvm::AttributeSet::hasAttribute(__p, 48))
      {
LABEL_106:
        v62 = llvm::AttributeSet::hasAttribute(__p, 77);
        if ((v62 & v47 & 1) != 0)
        {
LABEL_107:
          v39 = "Cannot have multiple 'sret' parameters!";
          goto LABEL_179;
        }
        v63 = v62;
        v64 = llvm::AttributeSet::hasAttribute(__p, 67);
        if ((v64 & v112 & 1) != 0)
        {
LABEL_109:
          v39 = "Cannot have multiple 'swiftself' parameters!";
          goto LABEL_179;
        }
        v106 = v64;
        v75 = llvm::AttributeSet::hasAttribute(__p, 65);
        if ((v75 & v110 & 1) != 0)
        {
LABEL_150:
          v39 = "Cannot have multiple 'swiftasync' parameters!";
          goto LABEL_179;
        }
        v104 = v75;
        v76 = llvm::AttributeSet::hasAttribute(__p, 66);
        if ((v76 & v48 & 1) != 0)
        {
LABEL_153:
          v39 = "Cannot have multiple 'swifterror' parameters!";
          goto LABEL_179;
        }
        v102 = v76;
        if (!llvm::AttributeSet::hasAttribute(__p, 75) || *(_DWORD *)(v127 + 12) == 3)
        {
          if ((_DWORD)v37 != 2)
          {
            v77 = 0;
            v109 = v108 | hasAttribute;
            v101 = v63 | v47;
            v113 = v106 | v112;
            v111 = v104 | v110;
            v107 = v102 | v48;
            v103 = v37 - 2;
            do
            {
              v78 = v77 + 2;
              v105 = v77;
              v79 = *(llvm::Type **)(*(_QWORD *)(v127 + 16) + 8 * v77 + 24);
              __p[0] = (void *)llvm::AttributeList::getParamAttrs((llvm::AttributeList *)v128, (int)v77 + 2);
              if ((a5 & 1) == 0)
              {
                if (llvm::AttributeSet::hasAttribute(__p, 11))
                  goto LABEL_44;
                if ((a6 & 1) == 0 && llvm::AttributeSet::hasAttribute(__p, 74))
                  goto LABEL_55;
              }
              if (*((_BYTE *)v79 + 8) == 18)
              {
                v80 = llvm::Type::getPrimitiveSizeInBits(v79);
                if (PrimitiveSizeInBits <= v80)
                  PrimitiveSizeInBits = v80;
              }
              v81 = llvm::AttributeSet::hasAttribute(__p, 18);
              if ((v81 & v109) == 1)
                goto LABEL_86;
              v82 = v81;
              if (llvm::AttributeSet::hasAttribute(__p, 48))
              {
                if ((v46 & 1) != 0)
                  goto LABEL_96;
                if (!llvm::Type::canLosslesslyBitCastTo(v79, **(llvm::Type ***)(v127 + 16)))
                  goto LABEL_178;
                v46 = 1;
              }
              if (llvm::AttributeSet::hasAttribute(__p, 77))
              {
                if (v101)
                  goto LABEL_107;
                v39 = "Attribute 'sret' is not on first or second parameter!";
                goto LABEL_179;
              }
              v83 = llvm::AttributeSet::hasAttribute(__p, 67);
              if ((v83 & v113) == 1)
                goto LABEL_109;
              v84 = v83;
              v85 = llvm::AttributeSet::hasAttribute(__p, 65);
              if ((v85 & v111) == 1)
                goto LABEL_150;
              v86 = v85;
              v87 = llvm::AttributeSet::hasAttribute(__p, 66);
              if ((v87 & v107) == 1)
                goto LABEL_153;
              v88 = v87;
              if (llvm::AttributeSet::hasAttribute(__p, 75) && v78 != *(_DWORD *)(v127 + 12) - 2)
                goto LABEL_177;
              v109 |= v82;
              v113 |= v84;
              v111 |= v86;
              v107 |= v88;
              v77 = v105 + 1;
            }
            while (v103 != v105 + 1);
          }
LABEL_64:
          if (!llvm::AttributeList::hasAttributesAtIndex((llvm::AttributeList *)v128, -1))
            return;
          FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v128);
          v124 = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v128);
          v50 = (uint64_t *)llvm::AttributeSet::begin((llvm::AttributeSet *)&v124);
          v51 = llvm::AttributeSet::end((llvm::AttributeSet *)&v124);
          if (v50 != (uint64_t *)v51)
          {
            v52 = (uint64_t *)v51;
            while (1)
            {
              v121 = *v50;
              if (!llvm::Attribute::isStringAttribute((llvm::Attribute *)&v121))
              {
                KindAsEnum = llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v121);
                if ((llvm::Attribute::canUseAsFnAttr(KindAsEnum) & 1) == 0)
                  break;
              }
              if (++v50 == v52)
                goto LABEL_71;
            }
            llvm::Attribute::getAsString((llvm::Attribute *)&v121, 0, (uint64_t)&v122);
            v54 = std::string::insert(&v122, 0, "Attribute '");
            v55 = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v123.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v123.__r_.__value_.__r.__words[2] = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            v28 = "' does not apply to functions!";
            goto LABEL_30;
          }
LABEL_71:
          if (llvm::AttributeSet::hasAttribute(v128, 27)
            && llvm::AttributeSet::hasAttribute(v128, 3))
          {
            v39 = "Attributes 'noinline and alwaysinline' are incompatible!";
            goto LABEL_179;
          }
          if (llvm::AttributeSet::hasAttribute(v128, 44))
          {
            if ((llvm::AttributeSet::hasAttribute(v128, 27) & 1) == 0)
            {
              v39 = "Attribute 'optnone' requires 'noinline'!";
              goto LABEL_179;
            }
            if (llvm::AttributeSet::hasAttribute(v128, 43))
            {
              v39 = "Attributes 'optsize and optnone' are incompatible!";
              goto LABEL_179;
            }
            if (llvm::AttributeSet::hasAttribute(v128, 15))
            {
              v39 = "Attributes 'minsize and optnone' are incompatible!";
              goto LABEL_179;
            }
            if (llvm::AttributeSet::hasAttribute(v128, 42))
            {
              v39 = "Attributes 'optdebug and optnone' are incompatible!";
              goto LABEL_179;
            }
          }
          if (llvm::AttributeSet::hasAttribute(v128, 42))
          {
            if (llvm::AttributeSet::hasAttribute(v128, 43))
            {
              v39 = "Attributes 'optsize and optdebug' are incompatible!";
              goto LABEL_179;
            }
            if (llvm::AttributeSet::hasAttribute(v128, 15))
            {
              v39 = "Attributes 'minsize and optdebug' are incompatible!";
              goto LABEL_179;
            }
          }
          if (llvm::AttributeList::hasAttrSomewhere(v128, 69, 0)
            && (llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)v128) & 2) == 0)
          {
            v39 = "Attribute writable and memory without argmem: write are incompatible!";
            goto LABEL_179;
          }
          if (llvm::AttributeList::hasFnAttr(v128, (uint64_t)"aarch64_pstate_sm_enabled", 25)
            && llvm::AttributeList::hasFnAttr(v128, (uint64_t)"aarch64_pstate_sm_compatible", 28))
          {
            v39 = "Attributes 'aarch64_pstate_sm_enabled and aarch64_pstate_sm_compatible' are incompatible!";
            goto LABEL_179;
          }
          if (llvm::AttributeList::hasFnAttr(v128, (uint64_t)"aarch64_pstate_za_new", 21))
          {
            if (llvm::AttributeList::hasFnAttr(v128, (uint64_t)"aarch64_pstate_za_preserved", 27))
            {
              v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_preserved' are incompatible!";
              goto LABEL_179;
            }
            if (llvm::AttributeList::hasFnAttr(v128, (uint64_t)"aarch64_pstate_za_shared", 24))
            {
              v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_shared' are incompatible!";
              goto LABEL_179;
            }
          }
          if (llvm::AttributeSet::hasAttribute(v128, 14) && (*((_DWORD *)v126 + 8) & 0xC0) != 0x80)
          {
            v39 = "Attribute 'jumptable' requires 'unnamed_addr'";
            goto LABEL_179;
          }
          v117[0] = (void *)llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v128);
          AllocSizeArgs = llvm::AttributeSet::getAllocSizeArgs((llvm::AttributeSet *)v117);
          if ((v67 & 0xFF00000000) != 0)
          {
            v68 = HIDWORD(AllocSizeArgs);
            v69 = v67;
            v117[0] = &v127;
            v117[1] = (void *)a1;
            v118 = &v126;
            {
              return;
            }
          }
          if (llvm::AttributeSet::hasAttribute(v128, 79))
          {
            AllocKind = llvm::AttributeList::getAllocKind((llvm::AttributeList *)v128);
            v71 = AllocKind;
            if ((unint64_t)(AllocKind & 7) - 1 >= 2)
            {
              if ((AllocKind & 7) == 4)
              {
                if ((AllocKind & 0x38) != 0)
                {
                  v117[0] = "'allockind(\"free\")' doesn't allow uninitialized, zeroed, or aligned modifiers.";
                  v120 = 259;
                  llvm::VerifierSupport::CheckFailed((_QWORD **)a1, (const llvm::Twine *)v117);
                }
              }
              else
              {
                v117[0] = "'allockind()' requires exactly one of alloc, realloc, and free";
                v120 = 259;
                llvm::VerifierSupport::CheckFailed((_QWORD **)a1, (const llvm::Twine *)v117);
              }
            }
            if ((~v71 & 0x18) == 0)
            {
              v117[0] = "'allockind()' can't be both zeroed and uninitialized";
              v120 = 259;
              llvm::VerifierSupport::CheckFailed((_QWORD **)a1, (const llvm::Twine *)v117);
            }
          }
          if (!llvm::AttributeSet::hasAttribute(v128, 87))
            goto LABEL_189;
          v117[0] = (void *)llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v128);
          VScaleRangeMin = llvm::AttributeSet::getVScaleRangeMin((llvm::AttributeSet *)v117);
          v73 = VScaleRangeMin;
          if (VScaleRangeMin)
          {
            if ((VScaleRangeMin & (VScaleRangeMin - 1)) == 0)
            {
LABEL_183:
              v117[0] = (void *)llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v128);
              VScaleRangeMax = llvm::AttributeSet::getVScaleRangeMax((llvm::AttributeSet *)v117);
              if ((VScaleRangeMax & 0xFF00000000) == 0)
                goto LABEL_189;
              if (v73 <= VScaleRangeMax)
              {
                v90.i32[0] = VScaleRangeMax;
                v92 = (uint8x8_t)vcnt_s8(v90);
                v92.i16[0] = vaddlv_u8(v92);
                if (v92.i32[0] == 1)
                  goto LABEL_189;
                v91 = "'vscale_range' maximum must be power-of-two value";
              }
              else
              {
                v91 = "'vscale_range' minimum cannot be greater than maximum";
              }
              v117[0] = (void *)v91;
              v120 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v117, &v126);
LABEL_189:
              if (!llvm::AttributeList::hasFnAttr(v128, (uint64_t)"frame-pointer", 13))
                goto LABEL_203;
              v117[0] = (void *)llvm::AttributeList::getAttributeAtIndex(v128, -1, (uint64_t)"frame-pointer", 13);
              ValueAsString = (llvm::raw_ostream **)llvm::Attribute::getValueAsString((llvm::Attribute *)v117);
              v95 = ValueAsString;
              v96 = v94;
              switch(v94)
              {
                case 8uLL:
                  v98 = "non-leaf";
                  break;
                case 4uLL:
                  v98 = "none";
                  break;
                case 3uLL:
                  if (*(_WORD *)ValueAsString != 27745 || *((_BYTE *)ValueAsString + 2) != 108)
                    goto LABEL_202;
                  goto LABEL_203;
                default:
                  goto LABEL_202;
              }
              if (memcmp(ValueAsString, v98, v96))
              {
LABEL_202:
                v120 = 1283;
                v117[0] = "invalid value for 'frame-pointer' attribute: ";
                v118 = v95;
                v119 = v96;
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v117, &v126);
              }
LABEL_203:
              if (PrimitiveSizeInBits >= 0x200
                && llvm::AttributeList::hasFnAttr(v128, (uint64_t)"target-features", 15))
              {
                v99 = (void *)(*(_QWORD *)(a1 + 8) + 208);
                v116 = 260;
                __p[0] = v99;
                llvm::Triple::Triple((llvm::Triple *)v117, (const llvm::Twine *)__p);
                if ((v119 - 37) <= 1)
                {
                  __p[0] = (void *)llvm::AttributeList::getAttributeAtIndex(v128, -1, (uint64_t)"target-features", 15);
                  v123.__r_.__value_.__r.__words[0] = llvm::Attribute::getValueAsString((llvm::Attribute *)__p);
                  v123.__r_.__value_.__l.__size_ = v100;
                  if (llvm::StringRef::find((uint64_t *)&v123, "+avx512f", 8uLL, 0) != -1
                    && llvm::StringRef::find((uint64_t *)&v123, "-evex512", 8uLL, 0) != -1)
                  {
                    __p[0] = "512-bit vector arguments require 'evex512' for AVX512";
                    v116 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)__p, &v126);
                    if (SHIBYTE(v118) < 0)
                      operator delete(v117[0]);
                    return;
                  }
                }
                if (SHIBYTE(v118) < 0)
                  operator delete(v117[0]);
              }
              return;
            }
            v74 = "'vscale_range' minimum must be power-of-two value";
          }
          else
          {
            v74 = "'vscale_range' minimum must be greater than 0";
          }
          v117[0] = (void *)v74;
          v120 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v117, &v126);
          goto LABEL_183;
        }
LABEL_177:
        v39 = "inalloca isn't on the last parameter!";
        goto LABEL_179;
      }
      if ((v46 & 1) != 0)
      {
LABEL_96:
        v39 = "More than one parameter has attribute returned!";
        goto LABEL_179;
      }
      if (llvm::Type::canLosslesslyBitCastTo(v57, **(llvm::Type ***)(v127 + 16)))
      {
        v46 = 1;
        goto LABEL_106;
      }
    }
LABEL_178:
    v39 = "Incompatible argument and return types for 'returned' attribute";
    goto LABEL_179;
  }
  v24 = (uint64_t *)v23;
  while (1)
  {
    v124 = *v22;
    if (!llvm::Attribute::isStringAttribute((llvm::Attribute *)&v124))
    {
      v25 = llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v124);
      if ((llvm::Attribute::canUseAsRetAttr(v25) & 1) == 0)
        break;
    }
    if (++v22 == v24)
      goto LABEL_34;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v124, 0, (uint64_t)&v122);
  v26 = std::string::insert(&v122, 0, "Attribute '");
  v27 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = "' does not apply to function return values";
LABEL_30:
  v29 = std::string::append(&v123, v28);
  v30 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v115 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v120 = 260;
  v117[0] = __p;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream *)a1, (llvm::Twine *)v117, &v126);
  if (SHIBYTE(v115) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_89;
      return;
    }
  }
  else if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
LABEL_89:
    operator delete(v122.__r_.__value_.__l.__data_);
}

uint64_t `anonymous namespace'::Verifier::verifySwiftErrorValue(uint64_t this, const llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 **v6;
  uint64_t v7;
  int v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  unsigned __int8 *v18;
  _QWORD v19[4];
  __int16 v20;
  unsigned __int8 *v21;

  v18 = (unsigned __int8 *)a2;
  v2 = *((_QWORD *)a2 + 1);
  if (!v2)
    return this;
  v3 = this;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v17 = (llvm::raw_ostream *)v4;
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 <= 0x3C)
    {
      if (v5 != 33)
      {
        if (v5 != 60)
          break;
        goto LABEL_5;
      }
      goto LABEL_9;
    }
    if (v5 == 61)
    {
      if (*(unsigned __int8 **)(v4 - 32) != v18)
      {
        v19[0] = "swifterror value should be the second operand when used by stores";
        v20 = 259;
        v13 = *(llvm::raw_ostream **)v3;
        if (!*(_QWORD *)v3)
          goto LABEL_28;
        goto LABEL_24;
      }
      goto LABEL_5;
    }
    if (v5 != 84)
      break;
LABEL_9:
    v21 = v18;
    v6 = (unsigned __int8 **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    this = llvm::CallBase::arg_end((llvm::CallBase *)v4);
    if (v6 != (unsigned __int8 **)this)
    {
      v7 = this;
      v8 = 0;
      while (1)
      {
        if (*v6 == v18)
        {
          this = llvm::CallBase::paramHasAttr((uint64_t *)v4, v8, 66);
          if ((this & 1) == 0)
            break;
        }
        ++v8;
        v6 += 4;
        if (v6 == (unsigned __int8 **)v7)
          goto LABEL_5;
      }
      v19[0] = "swifterror value when used in a callsite should be marked with swifterror attribute";
      v20 = 259;
      v9 = *(llvm::raw_ostream **)v3;
      if (*(_QWORD *)v3)
      {
        this = (uint64_t)llvm::Twine::print((llvm::Twine *)v19, *(llvm::raw_ostream **)v3);
        v10 = (_BYTE *)*((_QWORD *)v9 + 4);
        if ((unint64_t)v10 < *((_QWORD *)v9 + 3))
        {
          *((_QWORD *)v9 + 4) = v10 + 1;
          *v10 = 10;
          v11 = *(llvm::raw_ostream **)v3;
          *(_BYTE *)(v3 + 192) = 1;
          if (!v11)
            goto LABEL_5;
LABEL_22:
          this = (uint64_t)llvm::VerifierSupport::WriteTs<llvm::Value const*,llvm::CallBase>((_anonymous_namespace_::TypePrinting **)v3, &v21, (llvm::Value *)v4);
          goto LABEL_5;
        }
        this = (uint64_t)llvm::raw_ostream::write(v9, 10);
        v12 = *(llvm::raw_ostream **)v3;
        *(_BYTE *)(v3 + 192) = 1;
        if (v12)
          goto LABEL_22;
      }
      else
      {
        *(_BYTE *)(v3 + 192) = 1;
      }
    }
LABEL_5:
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return this;
  }
  v19[0] = "swifterror value can only be loaded and stored from, or as a swifterror argument!";
  v20 = 259;
  v13 = *(llvm::raw_ostream **)v3;
  if (!*(_QWORD *)v3)
  {
LABEL_28:
    *(_BYTE *)(v3 + 192) = 1;
    return this;
  }
LABEL_24:
  this = (uint64_t)llvm::Twine::print((llvm::Twine *)v19, v13);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    this = (uint64_t)llvm::raw_ostream::write(v13, 10);
    v16 = *(llvm::raw_ostream **)v3;
    *(_BYTE *)(v3 + 192) = 1;
    if (v16)
      return (uint64_t)llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v3, &v18, &v17);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
    v15 = *(llvm::raw_ostream **)v3;
    *(_BYTE *)(v3 + 192) = 1;
    if (!v15)
      return this;
    return (uint64_t)llvm::VerifierSupport::WriteTs<llvm::GlobalObject const*,llvm::Value const*>((_anonymous_namespace_::TypePrinting **)v3, &v18, &v17);
  }
  return this;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t v6;
  void **v7;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::shrink_and_clear(a1);
      return;
    }
    if ((_DWORD)v3)
    {
      v4 = *(_QWORD **)a1;
      for (i = 16 * v3; i; i -= 16)
      {
        if (*v4 != -8192)
        {
          if (*v4 == -4096)
            goto LABEL_10;
          v6 = v4[1];
          if ((v6 & 4) != 0)
          {
            v7 = (void **)(v6 & 0xFFFFFFFFFFFFFFF8);
            if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*v7 != v7 + 2)
                free(*v7);
              operator delete(v7);
            }
          }
        }
        *v4 = -4096;
LABEL_10:
        v4 += 2;
      }
    }
    *((_QWORD *)a1 + 1) = 0;
  }
}

llvm::raw_ostream *llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>(llvm::raw_ostream *result, llvm::Twine *this, llvm::raw_ostream **a3)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v4 = result;
  v5 = *(llvm::raw_ostream **)result;
  if (*(_QWORD *)result)
  {
    result = (llvm::raw_ostream *)llvm::Twine::print(this, v5);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      result = llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 10;
    }
  }
  *((_BYTE *)v4 + 192) |= *((_BYTE *)v4 + 194);
  *((_BYTE *)v4 + 193) = 1;
  v7 = *(llvm::raw_ostream **)v4;
  if (*(_QWORD *)v4)
  {
    result = *a3;
    if (*a3)
    {
      if (*((unsigned __int8 *)result + 16) >= 0x1Cu)
        llvm::Value::print(result, v7, (llvm::raw_ostream *)((char *)v4 + 16), 0);
      llvm::Value::printAsOperand((Type **)result, v7, 1, (_anonymous_namespace_::TypePrinting **)v4 + 2);
      result = *(llvm::raw_ostream **)v4;
      v8 = *(_BYTE **)(*(_QWORD *)v4 + 32);
      if ((unint64_t)v8 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
      {
        return llvm::raw_ostream::write(result, 10);
      }
      else
      {
        *((_QWORD *)result + 4) = v8 + 1;
        *v8 = 10;
      }
    }
  }
  return result;
}

const void **`anonymous namespace'::Verifier::visitMDNode(const void **result, _QWORD *a2)
{
  const void **v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const llvm::Module **v13;
  const char *v14;
  __int16 v15;

  v3 = result;
  v4 = result[55];
  if (v4 != result[54])
    goto LABEL_2;
  v9 = *((unsigned int *)result + 113);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 8 * v9;
    v12 = result[55];
    do
    {
      if ((_QWORD *)*v12 == a2)
      {
        v6 = 0;
        goto LABEL_3;
      }
      if (*v12 == -2)
        v10 = v12;
      ++v12;
      v11 -= 8;
    }
    while (v11);
    if (!v10)
      goto LABEL_18;
    *v10 = a2;
    --*((_DWORD *)result + 114);
    v6 = 1;
  }
  else
  {
LABEL_18:
    if (v9 >= *((_DWORD *)result + 112))
    {
LABEL_2:
      result = llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(result + 54), a2);
      v6 = v5;
      goto LABEL_3;
    }
    *((_DWORD *)result + 113) = v9 + 1;
    v4[v9] = a2;
    v6 = 1;
  }
LABEL_3:
  if (v6)
  {
    v7 = a2[1];
    v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (_QWORD *)*v8;
    if (v8 == v3[23])
      __asm { BR              X10 }
    v13 = (const llvm::Module **)a2;
    v14 = "MDNode context does not match Module context!";
    v15 = 259;
    return (const void **)llvm::VerifierSupport::CheckFailed<llvm::MDNode const*>((const llvm::Module **)v3, (llvm::Twine *)&v14, &v13);
  }
  return result;
}

llvm::Metadata *sub_180D2EFB4()
{
  _anonymous_namespace_::Verifier *v0;
  const llvm::DIExpression *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  const llvm::ValueAsMetadata **v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::ValueAsMetadata *v8;
  int v9;
  uint64_t v10;
  const llvm::ValueAsMetadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  const llvm::DIExpression *v18;
  const llvm::ValueAsMetadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (const llvm::ValueAsMetadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (const llvm::ValueAsMetadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return (llvm::Metadata *)llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return (llvm::Metadata *)llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>(v0, &v18, &v19);
}

void sub_180D2EFC4()
{
  _anonymous_namespace_::Verifier *v0;
  llvm::Metadata *v1;
  int v2;
  unint64_t v3;
  llvm::Metadata **v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Metadata *v7;
  int v8;
  uint64_t v9;
  llvm::Metadata *v10;
  int v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  llvm::Metadata *v17;
  llvm::Metadata *v18;
  _QWORD v19[4];
  __int16 v20;

  v3 = *((_QWORD *)v1 - 2);
  if ((v3 & 2) != 0)
  {
    v4 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v5 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v4 = (llvm::Metadata **)((char *)v1 - 8 * ((v3 >> 2) & 0xF) - 16);
    v5 = (v3 >> 6) & 0xF;
    if (!v5)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v6 = 8 * v5;
    while (1)
    {
      v7 = *v4;
      v18 = v7;
      if (v7)
      {
        v8 = *(unsigned __int8 *)v7;
        if (v8 == 2)
          goto LABEL_26;
        if ((v8 - 5) < 0x1F)
        {
        }
        else if ((v8 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v4;
      v6 -= 8;
      if (!v6)
        goto LABEL_23;
    }
  }
  v9 = 8 * v5;
  while (1)
  {
    v10 = *v4;
    v18 = v10;
    if (v10)
      break;
LABEL_16:
    ++v4;
    v9 -= 8;
    if (!v9)
      goto LABEL_23;
  }
  v11 = *(unsigned __int8 *)v10;
  if (v11 == 6)
  {
    v19[0] = "DILocation not allowed within this metadata node";
    v20 = 259;
    v17 = v1;
    v14 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v19, *(llvm::raw_ostream **)v0);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        llvm::raw_ostream::write(v14, 10);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    goto LABEL_38;
  }
  if (v11 != 2)
  {
    if ((v11 - 5) <= 0x1E)
    {
    }
    else if ((v11 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v19[0] = "Invalid operand for global metadata!";
  v20 = 259;
  v17 = v1;
  v12 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return;
  }
  llvm::Twine::print((llvm::Twine *)v19, *(llvm::raw_ostream **)v0);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 10);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 10;
  }
  v16 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v16)
    goto LABEL_40;
LABEL_38:
  llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v17, &v18);
}

llvm::Metadata *sub_180D2EFD4()
{
  _anonymous_namespace_::Verifier *v0;
  const llvm::GenericDINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2EFE4()
{
  _anonymous_namespace_::Verifier *v0;
  const llvm::DISubrange *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2EFF4()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F004()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F014()
{
  _anonymous_namespace_::Verifier *v0;
  const llvm::DIScope *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F024()
{
  _anonymous_namespace_::Verifier *v0;
  const llvm::DIScope *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F034()
{
  _anonymous_namespace_::Verifier *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F044()
{
  llvm::Metadata *v0;
  uint64_t v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *(_QWORD *)(v1 - 16);
  if ((v4 & 2) != 0)
  {
    v5 = *(llvm::Metadata ***)(v1 - 32);
    v6 = *(unsigned int *)(v1 - 24);
    if (!*(_DWORD *)(v1 - 24))
    {
LABEL_23:
      if ((*(_BYTE *)(v1 + 1) & 0x7F) == 2 || *(_DWORD *)(v1 - 8))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)(v1 - 16 - 8 * ((v4 >> 2) & 0xF));
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = (llvm::Metadata *)v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = (llvm::Metadata *)v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::MDString *sub_180D2F054()
{
  _anonymous_namespace_::Verifier *v0;
  llvm::DINode *v1;
  int v2;
  llvm::MDString *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::raw_ostream *sub_180D2F064()
{
  uint64_t v0;
  const llvm::DISubprogram *v1;
  int v2;
  llvm::raw_ostream *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::LLVMContext **v13;
  llvm::LLVMContext *v14;
  llvm::LLVMContext **v15;
  llvm::LLVMContext *v16;
  llvm::LLVMContext **v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::LLVMContext ***)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = v15[4];
      if (v16 >= v15[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v15, 10);
      }
      else
      {
        v15[4] = (llvm::LLVMContext *)((char *)v16 + 1);
        *(_BYTE *)v16 = 10;
      }
    }
    *(_BYTE *)(v0 + 192) |= *(_BYTE *)(v0 + 194);
    *(_BYTE *)(v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::LLVMContext ***)v0;
  if (!*(_QWORD *)v0)
  {
    *(_BYTE *)(v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = v13[4];
  if (v14 >= v13[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v13, 10);
  }
  else
  {
    v13[4] = (llvm::LLVMContext *)((char *)v14 + 1);
    *(_BYTE *)v14 = 10;
  }
  v17 = *(llvm::LLVMContext ***)v0;
  *(_BYTE *)(v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F074()
{
  llvm::Metadata *v0;
  _BYTE *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)&v1[-8 * ((v4 >> 2) & 0xF) - 16];
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = (llvm::Metadata *)v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = (llvm::Metadata *)v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F084()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F094()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F0A4()
{
  llvm::Metadata *v0;
  llvm::DINode *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F0B4()
{
  llvm::Metadata *v0;
  llvm::Metadata *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F0C4()
{
  llvm::Metadata *v0;
  llvm::Metadata *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

llvm::Metadata *sub_180D2F0D4()
{
  llvm::Metadata *v0;
  const llvm::DIVariable *v1;
  int v2;
  llvm::Metadata *result;
  unint64_t v4;
  llvm::Metadata **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Metadata *v8;
  int v9;
  uint64_t v10;
  llvm::Metadata *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  llvm::Metadata *v18;
  llvm::Metadata *v19;
  _QWORD v20[4];
  __int16 v21;

  v4 = *((_QWORD *)v1 - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (llvm::Metadata **)*((_QWORD *)v1 - 4);
    v6 = *((unsigned int *)v1 - 6);
    if (!*((_DWORD *)v1 - 6))
    {
LABEL_23:
      if ((*((_BYTE *)v1 + 1) & 0x7F) == 2 || *((_DWORD *)v1 - 2))
        JUMPOUT(0x180D2EED8);
      goto LABEL_40;
    }
  }
  else
  {
    v5 = (llvm::Metadata **)((char *)v1 - 8 * ((v4 >> 2) & 0xF) - 16);
    v6 = (v4 >> 6) & 0xF;
    if (!v6)
      goto LABEL_23;
  }
  if (v2 == 1)
  {
    v7 = 8 * v6;
    while (1)
    {
      v8 = *v5;
      v19 = v8;
      if (v8)
      {
        v9 = *(unsigned __int8 *)v8;
        if (v9 == 2)
          goto LABEL_26;
        if ((v9 - 5) < 0x1F)
        {
        }
        else if ((v9 - 3) >= 0xFFFFFFFE)
        {
        }
      }
      ++v5;
      v7 -= 8;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = 8 * v6;
  while (1)
  {
    v11 = *v5;
    v19 = v11;
    if (v11)
      break;
LABEL_16:
    ++v5;
    v10 -= 8;
    if (!v10)
      goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)v11;
  if (v12 == 6)
  {
    v20[0] = "DILocation not allowed within this metadata node";
    v21 = 259;
    v18 = v1;
    v15 = *(llvm::raw_ostream **)v0;
    if (*(_QWORD *)v0)
    {
      llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
    }
    *((_BYTE *)v0 + 192) |= *((_BYTE *)v0 + 194);
    *((_BYTE *)v0 + 193) = 1;
    if (!*(_QWORD *)v0)
LABEL_40:
      JUMPOUT(0x180D2EEF4);
    return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
  }
  if (v12 != 2)
  {
    if ((v12 - 5) <= 0x1E)
    {
    }
    else if ((v12 - 3) >= 0xFFFFFFFE)
    {
    }
    goto LABEL_16;
  }
LABEL_26:
  v20[0] = "Invalid operand for global metadata!";
  v21 = 259;
  v18 = v1;
  v13 = *(llvm::raw_ostream **)v0;
  if (!*(_QWORD *)v0)
  {
    *((_BYTE *)v0 + 192) = 1;
    return result;
  }
  llvm::Twine::print((llvm::Twine *)v20, *(llvm::raw_ostream **)v0);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  v17 = *(llvm::raw_ostream **)v0;
  *((_BYTE *)v0 + 192) = 1;
  if (!v17)
    goto LABEL_40;
  return llvm::VerifierSupport::WriteTs<llvm::DILocation const*,llvm::Metadata *>((llvm::raw_ostream **)v0, &v18, &v19);
}

