uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  unint64_t v19;

  v19 = 0;
  v4 = (unsigned __int8 **)(a1 + 16);
  v5 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v19);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v5[v6];
  v8 = *a2;
  *v7 = *a2;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v7, v8, 1);
    v6 = *(unsigned int *)(a1 + 8);
  }
  v9 = *(unsigned __int8 ***)a1;
  if ((_DWORD)v6)
  {
    v10 = 8 * v6;
    v11 = v5;
    do
    {
      *v11 = *v9;
      if (*v9)
      {
        llvm::MetadataTracking::retrack((uint64_t)v9, *v9, (uint64_t)v11);
        *v9 = 0;
      }
      ++v11;
      ++v9;
      v10 -= 8;
    }
    while (v10);
    v9 = *(unsigned __int8 ***)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = v12;
      v14 = v9 - 1;
      do
      {
        v15 = v14[v13];
        if (v15)
          llvm::MetadataTracking::untrack((uint64_t)&v14[v13], v15);
        --v13;
      }
      while (v13 * 8);
      v9 = *(unsigned __int8 ***)a1;
    }
  }
  v16 = v19;
  if (v9 != v4)
    free(v9);
  *(_QWORD *)a1 = v5;
  v17 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  return (uint64_t)&v5[v17 - 1];
}

llvm::Metadata *`anonymous namespace'::BitcodeReaderMetadataList::resolveTypeRefArray(_anonymous_namespace_::BitcodeReaderMetadataList *this, llvm::Metadata *a2)
{
  llvm::Metadata *v2;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t Impl;
  unsigned int v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  char *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char *v23;
  _BYTE *v24;
  llvm::MDNode *v25;
  llvm::MDNode *v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[34];

  v2 = a2;
  v40[32] = *MEMORY[0x1E0C80C00];
  if (a2 && *(_BYTE *)a2 == 5 && (*((_BYTE *)a2 + 1) & 0x7F) != 1)
  {
    v38 = v40;
    v39 = 0x2000000000;
    v5 = (unint64_t *)((char *)a2 - 16);
    v4 = *((_QWORD *)a2 - 2);
    if ((v4 & 2) != 0)
    {
      v6 = *((unsigned int *)a2 - 6);
      if (v6 >= 0x21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v40, v6, 8);
        v4 = *v5;
      }
    }
    if ((v4 & 2) != 0)
    {
      v7 = (uint64_t *)*((_QWORD *)v2 - 4);
      v8 = *((unsigned int *)v2 - 6);
      if (*((_DWORD *)v2 - 6))
        goto LABEL_9;
    }
    else
    {
      v7 = (uint64_t *)&v5[-((v4 >> 2) & 0xF)];
      v8 = (v4 >> 6) & 0xF;
      if (v8)
      {
LABEL_9:
        v9 = &v7[v8];
        while (1)
        {
          v10 = (_BYTE *)*v7;
          if (*v7)
          {
            if (*v10)
            {
              Impl = *v7;
            }
            else
            {
              v37 = *v7;
              v12 = v10 >> 4;
              if ((*((_BYTE *)this + 96) & 1) != 0)
              {
                v13 = 1;
                v14 = (char *)this + 104;
              }
              else
              {
                v13 = *((_DWORD *)this + 28);
                if (!v13)
                  goto LABEL_20;
                v14 = (char *)*((_QWORD *)this + 13);
              }
              v15 = v13 - 1;
              v16 = (v13 - 1) & (v12 ^ (v10 >> 9));
              v17 = *(_BYTE **)&v14[16 * v16];
              if (v17 != v10)
              {
                v30 = 1;
                while (v17 != (_BYTE *)-4096)
                {
                  v31 = v16 + v30++;
                  v16 = v31 & v15;
                  v17 = *(_BYTE **)&v14[16 * v16];
                  if (v17 == v10)
                    goto LABEL_19;
                }
LABEL_20:
                if ((*((_BYTE *)this + 72) & 1) != 0)
                {
                  v18 = 1;
                  v19 = (char *)this + 80;
LABEL_24:
                  v20 = v12 ^ (v10 >> 9);
                  v21 = v18 - 1;
                  v22 = (v18 - 1) & v20;
                  v23 = &v19[16 * v22];
                  v24 = *(_BYTE **)v23;
                  if (v10 != *(_BYTE **)v23)
                  {
                    v32 = 0;
                    v33 = 1;
                    while (v24 != (_BYTE *)-4096)
                    {
                      if (v32)
                        v34 = 0;
                      else
                        v34 = v24 == (_BYTE *)-8192;
                      if (v34)
                        v32 = v23;
                      v35 = v22 + v33++;
                      v22 = v35 & v21;
                      v23 = &v19[16 * v22];
                      v24 = *(_BYTE **)v23;
                      if (v10 == *(_BYTE **)v23)
                        goto LABEL_25;
                    }
                    if (v32)
                      v29 = v32;
                    else
                      v29 = v23;
                    goto LABEL_33;
                  }
                }
                else
                {
                  v18 = *((_DWORD *)this + 22);
                  if (v18)
                  {
                    v19 = (char *)*((_QWORD *)this + 10);
                    goto LABEL_24;
                  }
                  v29 = 0;
LABEL_33:
                  v23 = (char *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::InsertIntoBucket<llvm::MDString * const&>((uint64_t)this + 72, v29, &v37);
                }
LABEL_25:
                Impl = *((_QWORD *)v23 + 1);
                if (!Impl)
                {
                  Impl = llvm::MDTuple::getImpl(*((_QWORD *)this + 22), 0, 0, 2, 1);
                  v26 = (llvm::MDNode *)*((_QWORD *)v23 + 1);
                  *((_QWORD *)v23 + 1) = Impl;
                  if (v26)
                  {
                    llvm::MDNode::deleteTemporary(v26, v25);
                    Impl = *((_QWORD *)v23 + 1);
                  }
                }
                goto LABEL_28;
              }
LABEL_19:
              Impl = *(_QWORD *)&v14[16 * v16 + 8];
              if (!Impl)
                goto LABEL_20;
            }
          }
          else
          {
            Impl = 0;
          }
LABEL_28:
          v27 = v39;
          if (v39 >= (unint64_t)HIDWORD(v39))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v40, v39 + 1, 8);
            v27 = v39;
          }
          *((_QWORD *)v38 + v27) = Impl;
          v28 = v39 + 1;
          LODWORD(v39) = v39 + 1;
          if (++v7 == v9)
            goto LABEL_52;
        }
      }
    }
    v28 = v39;
LABEL_52:
    v2 = (llvm::Metadata *)llvm::MDTuple::getImpl(*((_QWORD *)this + 22), v38, v28, 0, 1);
    if (v38 != v40)
      free(v38);
  }
  return v2;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::lookup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(v2 + 16 * v5);
  if (v6 == a2)
    return *(_QWORD *)(v2 + 16 * v5 + 8);
  v8 = 1;
  while (v6 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = *(_QWORD *)(v2 + 16 * v5);
    if (v6 == a2)
      return *(_QWORD *)(v2 + 16 * v5 + 8);
  }
  return 0;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucket<llvm::MDString * const&,llvm::DICompositeType * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = 1;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow(a1, v10);
  v13 = a1 + 8;
  v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(a1 + 8);
  }
  v11 = *(_DWORD *)a1 & 1;
  v15 = v14 - 1;
  v16 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v14 - 1);
  a2 = (_QWORD *)(v13 + 16 * v16);
  v17 = *a2;
  if (*a3 != *a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = a2;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      a2 = (_QWORD *)(v13 + 16 * (v21 & v15));
      v17 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v18)
      a2 = v18;
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = *a4;
  return a2;
}

int *llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    v13 = (char *)(16 * v8);
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets((int *)a1, v7, (uint64_t *)&v13[(_QWORD)v7]);
    llvm::deallocate_buffer((llvm *)v7, v13);
  }
  v9 = v15;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15[0] = *(_QWORD *)(a1 + 8);
    v15[1] = v14;
    v9 = &v16;
    if (a2 < 2)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets((int *)a1, v15, v9);
    goto LABEL_10;
  }
  if (a2 >= 2)
  {
LABEL_10:
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets((int *)a1, v15, v9);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = (char *)(result + 6);
    v5 = result + 2;
LABEL_9:
    v9 = (char *)v5;
    do
    {
LABEL_10:
      *(_QWORD *)v9 = -4096;
      v9 += 16;
    }
    while (v9 != v6);
    goto LABEL_11;
  }
  v4 = result[4];
  if (!(_DWORD)v4)
    goto LABEL_11;
  v5 = (_QWORD *)*((_QWORD *)result + 1);
  v6 = (char *)&v5[2 * v4];
  v7 = v6 - (char *)v5 - 16;
  if (v7 < 0x10)
    goto LABEL_9;
  v8 = (v7 >> 4) + 1;
  v9 = (char *)&v5[2 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v5 + 2;
  v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  while (a2 != a3)
  {
    v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v13 = 1;
        v12 = result + 2;
      }
      else
      {
        v12 = (int *)*((_QWORD *)result + 1);
        v13 = result[4];
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v16 = &v12[4 * v15];
      v17 = *(_QWORD *)v16;
      if (v18 != *(_QWORD *)v16)
      {
        v19 = 0;
        v20 = 1;
        while (v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21)
            v19 = v16;
          v22 = v15 + v20++;
          v15 = v22 & v14;
          v16 = &v12[4 * (v22 & v14)];
          v17 = *(_QWORD *)v16;
          if (v18 == *(_QWORD *)v16)
            goto LABEL_15;
        }
        if (v19)
          v16 = v19;
      }
LABEL_15:
      *(_QWORD *)v16 = v18;
      *((_QWORD *)v16 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

char *llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::shrink_and_clear(char *result)
{
  char *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = (*(_DWORD *)result >> 1) - 1;
  v4 = 1 << (33 - __clz(v3));
  if (v3 >= 0x10)
    v5 = v4;
  else
    v5 = 64;
  if (v2 >= 2)
    v6 = v5;
  else
    v6 = 0;
  if ((v2 & 1) != 0 && v6 < 2)
  {
    *(_DWORD *)result &= 1u;
    *((_DWORD *)result + 1) = 0;
    v7 = result + 8;
    v8 = result + 24;
LABEL_10:
    v9 = v7;
    do
    {
LABEL_18:
      *v9 = -4096;
      v9 += 2;
    }
    while (v9 != v8);
    return result;
  }
  if ((v2 & 1) != 0)
  {
    if (v6 <= 1)
    {
      *(_QWORD *)result = 1;
    }
    else
    {
      *(_DWORD *)result &= ~1u;
      result = (char *)llvm::allocate_buffer(16 * v6, (std::align_val_t)8uLL);
      *((_QWORD *)v1 + 1) = result;
      *((_QWORD *)v1 + 2) = v6;
      v15 = *(_DWORD *)v1;
      *(_QWORD *)v1 = *(_DWORD *)v1 & 1;
      if ((v15 & 1) == 0)
      {
        v16 = &result[16 * v6];
        v17 = 16 * v6 - 16;
        if (v17 >= 0x10)
        {
          v18 = (v17 >> 4) + 1;
          v19 = &result[16 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
          v20 = result + 16;
          v21 = v18 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            *(v20 - 2) = -4096;
            *v20 = -4096;
            v20 += 4;
            v21 -= 2;
          }
          while (v21);
          if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL))
            return result;
          do
          {
LABEL_31:
            *(_QWORD *)v19 = -4096;
            v19 += 16;
          }
          while (v19 != v16);
          return result;
        }
LABEL_30:
        v19 = result;
        goto LABEL_31;
      }
    }
    result = v1 + 8;
    v16 = v1 + 24;
    goto LABEL_30;
  }
  v10 = *((unsigned int *)result + 4);
  if ((_DWORD)v6 != (_DWORD)v10)
    llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(16 * v10));
  *(_QWORD *)result = 0;
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*((_QWORD *)result + 1);
    v8 = &v7[2 * v6];
    v11 = 16 * v6 - 16;
    if (v11 < 0x10)
      goto LABEL_10;
    v12 = (v11 >> 4) + 1;
    v9 = &v7[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
    v13 = v7 + 2;
    v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v13 - 2) = -4096;
      *v13 = -4096;
      v13 += 4;
      v14 -= 2;
    }
    while (v14);
    if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_18;
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRef(_anonymous_namespace_::BitcodeReaderMetadataList *this, llvm::Metadata *Impl)
{
  llvm::Metadata **v3;
  llvm::MDNode **v4;
  llvm::MDNode *v5;
  llvm::Metadata *v7;

  if (Impl)
  {
    if (!*(_BYTE *)Impl)
    {
      v7 = Impl;
      Impl = (llvm::Metadata *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::lookup((uint64_t)this + 96, (uint64_t)Impl);
      if (!Impl)
      {
        v3 = (llvm::Metadata **)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::operator[]((uint64_t)this + 72, &v7);
        Impl = *v3;
        if (!*v3)
        {
          v4 = v3;
          Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(*((_QWORD *)this + 22), 0, 0, 2, 1);
          v5 = *v4;
          *v4 = Impl;
          if (v5)
          {
            llvm::MDNode::deleteTemporary(v5, Impl);
            return *v4;
          }
        }
      }
    }
  }
  return Impl;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::operator[](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::InsertIntoBucket<llvm::MDString * const&>(a1, 0, a2)+ 1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
    return v7 + 1;
  v10 = 0;
  v11 = 1;
  while (v8 != -4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v8 == -8192;
    if (v12)
      v10 = v7;
    v13 = v6 + v11++;
    v6 = v13 & v5;
    v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
    v8 = *v7;
    if (*a2 == *v7)
      return v7 + 1;
  }
  if (v10)
    v14 = v10;
  else
    v14 = v7;
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::InsertIntoBucket<llvm::MDString * const&>(a1, v14, a2)+ 1;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::InsertIntoBucket<llvm::MDString * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 1;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (_QWORD *)(v11 + 16 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v11 + 16 * (v19 & v13));
      v15 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  llvm::MDNode *v7;
  uint64_t v8;
  llvm::MDNode *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(llvm::MDNode **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v11 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v11;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    v12 = (char *)(16 * v8);
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets((int *)a1, v7, (llvm::MDNode *)&v12[(_QWORD)v7]);
    llvm::deallocate_buffer(v7, v12);
  }
  v9 = (llvm::MDNode *)v14;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14[0] = *(_QWORD *)(a1 + 8);
    v14[1] = v13;
    v9 = (llvm::MDNode *)&v15;
    *(_QWORD *)(a1 + 16) = 0;
    if (a2 < 2)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (a2 >= 2)
  {
LABEL_10:
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
LABEL_11:
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets((int *)a1, (llvm::MDNode *)v14, v9);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(int *a1, llvm::MDNode *a2, llvm::MDNode *a3)
{
  llvm::MDNode *v4;
  int v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MDNode *v24;
  int *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v4 = a2;
  v6 = *a1;
  *(_QWORD *)a1 = *a1 & 1;
  v7 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v10 = (char *)(a1 + 6);
    v9 = a1 + 2;
LABEL_9:
    v13 = (char *)v9;
    do
    {
LABEL_10:
      *(_QWORD *)v13 = -4096;
      v13 += 16;
    }
    while (v13 != v10);
    goto LABEL_11;
  }
  v8 = a1[4];
  if (!(_DWORD)v8)
    goto LABEL_11;
  v9 = (_QWORD *)*((_QWORD *)a1 + 1);
  v10 = (char *)&v9[2 * v8];
  v11 = v10 - (char *)v9 - 16;
  if (v11 < 0x10)
    goto LABEL_9;
  v12 = (v11 >> 4) + 1;
  v13 = (char *)&v9[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
  v14 = v9 + 2;
  v15 = v12 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v14 - 2) = -4096;
    *v14 = -4096;
    v14 += 4;
    v15 -= 2;
  }
  while (v15);
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      v16 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)a1 & 1) != 0)
        {
          v18 = 1;
          v17 = v7;
        }
        else
        {
          v17 = (int *)*((_QWORD *)a1 + 1);
          v18 = a1[4];
        }
        v19 = v18 - 1;
        v20 = (v18 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        v21 = &v17[4 * v20];
        v22 = *(_QWORD *)v21;
        if (v16 != *(_QWORD *)v21)
        {
          v25 = 0;
          v26 = 1;
          while (v22 != -4096)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v22 == -8192;
            if (v27)
              v25 = v21;
            v28 = v20 + v26++;
            v20 = v28 & v19;
            v21 = &v17[4 * (v28 & v19)];
            v22 = *(_QWORD *)v21;
            if (v16 == *(_QWORD *)v21)
              goto LABEL_19;
          }
          if (v25)
            v21 = v25;
        }
LABEL_19:
        *(_QWORD *)v21 = v16;
        v23 = *((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v21 + 1) = v23;
        *a1 += 2;
        v24 = (llvm::MDNode *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v24)
          llvm::MDNode::deleteTemporary(v24, a2);
      }
      v4 = (llvm::MDNode *)((char *)v4 + 16);
    }
    while (v4 != a3);
  }
}

void llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::shrink_and_clear(uint64_t a1, llvm::MDNode *a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MDNode **v7;
  uint64_t v8;
  llvm::MDNode *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *buffer;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = *(_DWORD *)a1;
  v4 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = a1 + 8;
    v5 = 1;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v5)
      goto LABEL_10;
    v6 = *(_QWORD *)(a1 + 8);
  }
  v7 = (llvm::MDNode **)(v6 + 8);
  v8 = 16 * v5;
  do
  {
    if (((unint64_t)*(v7 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
        llvm::MDNode::deleteTemporary(v9, a2);
    }
    v7 += 2;
    v8 -= 16;
  }
  while (v8);
LABEL_10:
  v10 = 1 << (33 - __clz(v4 - 1));
  if ((v4 - 1) >= 0x10)
    v11 = v10;
  else
    v11 = 64;
  if (v3 >= 2)
    v12 = v11;
  else
    v12 = 0;
  v13 = *(_DWORD *)a1 & 1;
  if (v13 && v12 < 2)
  {
    *(_DWORD *)a1 = v13;
    *(_DWORD *)(a1 + 4) = 0;
    v14 = (_QWORD *)(a1 + 8);
    v15 = (_QWORD *)(a1 + 24);
LABEL_19:
    v16 = v14;
    do
    {
LABEL_27:
      *v16 = -4096;
      v16 += 2;
    }
    while (v16 != v15);
    return;
  }
  if (v13)
  {
    if (v12 <= 1)
    {
      *(_QWORD *)a1 = 1;
    }
    else
    {
      *(_DWORD *)a1 &= ~1u;
      buffer = llvm::allocate_buffer(16 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 8) = buffer;
      *(_QWORD *)(a1 + 16) = v12;
      v23 = *(_DWORD *)a1;
      *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
      if ((v23 & 1) == 0)
      {
        v24 = &buffer[2 * v12];
        v25 = 16 * v12 - 16;
        if (v25 >= 0x10)
        {
          v26 = (v25 >> 4) + 1;
          v27 = &buffer[2 * (v26 & 0x1FFFFFFFFFFFFFFELL)];
          v28 = buffer + 2;
          v29 = v26 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            *(v28 - 2) = -4096;
            *v28 = -4096;
            v28 += 4;
            v29 -= 2;
          }
          while (v29);
          if (v26 == (v26 & 0x1FFFFFFFFFFFFFFELL))
            return;
          do
          {
LABEL_40:
            *v27 = -4096;
            v27 += 2;
          }
          while (v27 != v24);
          return;
        }
LABEL_39:
        v27 = buffer;
        goto LABEL_40;
      }
    }
    buffer = (_QWORD *)(a1 + 8);
    v24 = (_QWORD *)(a1 + 24);
    goto LABEL_39;
  }
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v12 != (_DWORD)v17)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * v17));
  *(_QWORD *)a1 = 0;
  if ((_DWORD)v12)
  {
    v14 = *(_QWORD **)(a1 + 8);
    v15 = &v14[2 * v12];
    v18 = 16 * v12 - 16;
    if (v18 < 0x10)
      goto LABEL_19;
    v19 = (v18 >> 4) + 1;
    v16 = &v14[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    v20 = v14 + 2;
    v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -4096;
      *v20 = -4096;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_27;
  }
}

unsigned int *llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *buffer;
  size_t v8;
  uint64_t v9;
  BOOL v10;

  v1 = result;
  v2 = *result;
  v3 = (*result >> 1) - 1;
  v4 = 1 << (33 - __clz(v3));
  if (v3 >= 0x10)
    v5 = v4;
  else
    v5 = 64;
  if (v2 >= 2)
    v6 = v5;
  else
    v6 = 0;
  if ((v2 & 1) != 0 && v6 < 2)
  {
    *result &= 1u;
    result[1] = 0;
    buffer = result + 2;
    v6 = 1;
LABEL_10:
    v8 = 4 * v6;
    return (unsigned int *)memset(buffer, 255, v8);
  }
  if ((v2 & 1) != 0)
  {
    if (v6 > 1)
    {
      *result &= ~1u;
      buffer = llvm::allocate_buffer(4 * v6, (std::align_val_t)4uLL);
      *((_QWORD *)v1 + 1) = buffer;
      *((_QWORD *)v1 + 2) = v6;
      v10 = (*v1 & 1) == 0;
      *(_QWORD *)v1 = *v1 & 1;
      if (v10)
        v8 = 4 * v6;
      else
        v8 = 4;
      if (!v10)
        buffer = v1 + 2;
      return (unsigned int *)memset(buffer, 255, v8);
    }
    *(_QWORD *)result = 1;
    return (unsigned int *)memset(result + 2, 255, sizeof);
  }
  else
  {
    v9 = result[4];
    if ((_DWORD)v6 != (_DWORD)v9)
      llvm::deallocate_buffer(*((llvm **)result + 1), (void *)(4 * v9));
    *(_QWORD *)result = 0;
    if ((_DWORD)v6)
    {
      buffer = (void *)*((_QWORD *)result + 1);
      goto LABEL_10;
    }
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_6::operator()(unsigned int **a1)
{
  _anonymous_namespace_::BitcodeReaderMetadataList *v2;
  llvm::Metadata *Impl;

  v2 = (_anonymous_namespace_::BitcodeReaderMetadataList *)*a1;
  Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(*((_QWORD *)*a1 + 26), 0, 0, 0, 1);
  ++*a1[1];
}

unsigned __int8 *llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Metadata *v19;

  v3 = *a1;
  v4 = a2;
  v5 = *(_QWORD *)(*a1 + 672);
  v6 = (*(_QWORD *)(*a1 + 680) - v5) >> 4;
  if (v6 <= a2)
  {
    v10 = *(_DWORD *)(v3 + 8);
    if (*(_BYTE *)a1[1])
    {
      if (v10 > a2)
      {
        v7 = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2);
        if (v7)
        {
          if (*v7 - 5 > 0x1E || (v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 - 2))
            return v7;
        }
      }
      v11 = (_QWORD *)a1[3];
      v12 = v11[2];
      v13 = v11[1];
      v14 = 32 * (v12 - v13) - 1;
      if (v12 == v13)
        v14 = 0;
      v15 = v11[5] + v11[4];
      if (v14 == v15)
      {
        std::deque<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *>>::__add_back_capacity(a1[3]);
        v13 = v11[1];
        v15 = v11[5] + v11[4];
      }
      v16 = *(_QWORD *)(v13 + ((v15 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v15;
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)v16 = 259;
      *(_DWORD *)(v16 + 4) = a2;
      v18 = v11[4];
      v17 = v11[5];
      v11[5] = v17 + 1;
      return (unsigned __int8 *)(*(_QWORD *)(v11[1] + (((unint64_t)(v18 + v17) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * (v18 + v17));
    }
    else
    {
      if (v10 > a2)
      {
        v7 = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2);
        if (v7)
          return v7;
      }
      if (v6 + ((uint64_t)(*(_QWORD *)(v3 + 704) - *(_QWORD *)(v3 + 696)) >> 3) <= a2)
      {
      }
      else
      {
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(v3, a2, a1[3]);
        if (*(_DWORD *)(v3 + 8) <= a2)
          return 0;
        else
          return *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * v4);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(v3 + 8) > a2)
    {
      v7 = *(unsigned __int8 **)(*(_QWORD *)v3 + 8 * a2);
      if (v7)
        return v7;
    }
    v19 = (llvm::Metadata *)llvm::MDString::get(*(_QWORD **)(v3 + 208), *(int8x16_t **)(v5 + 16 * a2), *(const unsigned __int8 **)(v5 + 16 * a2 + 8));
    return (unsigned __int8 *)v19;
  }
}

unint64_t getValueFwdRef(llvm::BitcodeReaderValueList *a1, unsigned int a2, llvm::Type *a3, int a4)
{
  unint64_t result;
  llvm::Type *v8;
  llvm::Type **v9;

  result = llvm::BitcodeReaderValueList::getValueFwdRef(a1, a2, a3, a4, 0);
  if (!result)
  {
    if (((*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 5) > a2
      && (v9 = *(llvm::Type ***)(*(_QWORD *)a1 + 32 * a2 + 16)) != 0
      && *v9 == a3)
    {
      return llvm::UndefValue::get(a3, v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::BitcodeReaderMetadataList::addTypeRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  if ((*(_BYTE *)(a3 + 20) & 4) == 0)
  {
    result = (_QWORD *)(a1 + 96);
    v5 = *(_BYTE *)(a1 + 96);
    v26 = a2;
    v27 = a3;
    if ((v5 & 1) != 0)
    {
      v7 = a1 + 104;
      v6 = 1;
      goto LABEL_9;
    }
    v6 = *(_DWORD *)(a1 + 112);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 104);
LABEL_9:
      v11 = v6 - 1;
      v12 = ((a2 >> 4) ^ (a2 >> 9)) & v11;
      v13 = (_QWORD *)(v7 + 16 * v12);
      v14 = *v13;
      if (*v13 == a2)
        return result;
      v18 = 0;
      v23 = 1;
      while (v14 != -4096)
      {
        if (v18)
          v24 = 0;
        else
          v24 = v14 == -8192;
        if (v24)
          v18 = v13;
        v25 = v12 + v23++;
        v12 = v25 & v11;
        v13 = (_QWORD *)(v7 + 16 * v12);
        v14 = *v13;
        if (*v13 == a2)
          return result;
      }
      goto LABEL_33;
    }
LABEL_22:
    v22 = 0;
    return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucket<llvm::MDString * const&,llvm::DICompositeType * const&>((uint64_t)result, v22, &v26, &v27);
  }
  result = (_QWORD *)(a1 + 120);
  v8 = *(_BYTE *)(a1 + 120);
  v26 = a2;
  v27 = a3;
  if ((v8 & 1) != 0)
  {
    v10 = a1 + 128;
    v9 = 1;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 136);
    if (!v9)
      goto LABEL_22;
    v10 = *(_QWORD *)(a1 + 128);
  }
  v15 = v9 - 1;
  v16 = ((a2 >> 4) ^ (a2 >> 9)) & v15;
  v13 = (_QWORD *)(v10 + 16 * v16);
  v17 = *v13;
  if (*v13 != a2)
  {
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v13;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      v13 = (_QWORD *)(v10 + 16 * v16);
      v17 = *v13;
      if (*v13 == a2)
        return result;
    }
LABEL_33:
    if (v18)
      v22 = v18;
    else
      v22 = v13;
    return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucket<llvm::MDString * const&,llvm::DICompositeType * const&>((uint64_t)result, v22, &v26, &v27);
  }
  return result;
}

llvm::Metadata *`anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRefArray(_anonymous_namespace_::BitcodeReaderMetadataList *this, llvm::Metadata *a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  llvm::Metadata **v6;
  unsigned __int8 *v7;
  llvm::MDNode *v8;
  llvm::MDNode *v9;
  llvm::MDNode *Impl;
  llvm::MDNode **p_Impl;
  llvm::Metadata **v13;
  llvm::Metadata *v14;

  if (!a2)
    return a2;
  if (*(_BYTE *)a2 != 5)
    return a2;
  v14 = a2;
  v2 = *((_BYTE *)a2 + 1) & 0x7F;
  if (v2 == 1)
    return a2;
  if (v2 == 2)
  {
    v4 = (_QWORD *)((char *)this + 144);
    v13 = &v14;
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*((_QWORD *)this + 22), 0, 0, 2, 1);
    p_Impl = &Impl;
    v5 = *((unsigned int *)this + 38);
    if (v5 >= *((_DWORD *)this + 39))
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>((uint64_t)this + 144, (uint64_t)&std::piecewise_construct, (unsigned __int8 ***)&v13, (unsigned __int8 ***)&p_Impl);
      v9 = Impl;
      Impl = 0;
      if (!v9)
        return *(llvm::Metadata **)(*((_QWORD *)this + 18) + 16 * *((unsigned int *)this + 38) - 8);
    }
    else
    {
      v6 = (llvm::Metadata **)(*v4 + 16 * v5);
      v7 = (unsigned __int8 *)v14;
      *v6 = v14;
      if (v7)
      {
        llvm::MetadataTracking::track((uint64_t)v6, v7, 1);
        LODWORD(v5) = *((_DWORD *)this + 38);
      }
      v8 = Impl;
      Impl = 0;
      v6[1] = v8;
      *((_DWORD *)this + 38) = v5 + 1;
      v9 = Impl;
      Impl = 0;
      if (!v9)
        return *(llvm::Metadata **)(*((_QWORD *)this + 18) + 16 * *((unsigned int *)this + 38) - 8);
    }
    llvm::MDNode::deleteTemporary(v9, (llvm::MDNode *)v7);
    return *(llvm::Metadata **)(*((_QWORD *)this + 18) + 16 * *((unsigned int *)this + 38) - 8);
  }
}

void std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100](char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = *a1;
  v8 = (v5 - *a1) >> 4;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60)
    abort();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 3 > v9)
    v9 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v8];
  *(_OWORD *)v13 = *a2;
  v6 = v13 + 16;
  if (v5 != v7)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[16 * v11];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v6;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::operator[](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::InsertIntoBucket<llvm::Function * const&>(a1, 0, a2)+ 1;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
    return v7 + 1;
  v10 = 0;
  v11 = 1;
  while (v8 != -4096)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v8 == -8192;
    if (v12)
      v10 = v7;
    v13 = v6 + v11++;
    v6 = v13 & v5;
    v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
    v8 = *v7;
    if (*a2 == *v7)
      return v7 + 1;
  }
  if (v10)
    v14 = v10;
  else
    v14 = v7;
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::InsertIntoBucket<llvm::Function * const&>(a1, v14, a2)+ 1;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression(llvm *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  void *v35;
  _QWORD *v36;
  uint64_t *v37;
  const char *v38;
  __int16 v39;

  v9 = a3[1];
  switch(a2)
  {
    case 0:
      v10 = v9 - 3;
      if (v9 < 3)
        goto LABEL_5;
      v11 = (_QWORD *)*a3;
      if (*(_QWORD *)(*a3 + 8 * v10) == 157)
        v11[v10] = 4096;
      goto LABEL_7;
    case 1:
LABEL_5:
      if (v9)
      {
        v11 = (_QWORD *)*a3;
LABEL_7:
        if (*v11 == 6)
        {
          v12 = (char *)&v11[v9];
          if (v9 >= 3 && *((_QWORD *)v12 - 3) == 4096)
            v12 -= 24;
          if (v12 != (char *)(v11 + 1))
          {
            memmove(v11, v11 + 1, v12 - (char *)(v11 + 1));
            v9 = a3[1];
          }
          *((_QWORD *)v12 - 1) = 6;
        }
      }
      *((_BYTE *)a1 + 1043) = 1;
      goto LABEL_15;
    case 2:
LABEL_15:
      v36 = a3;
      v37 = a5;
      if (v9)
      {
        v13 = (_QWORD *)*a3;
        while (1)
        {
          v16 = *v13;
          if (*v13 > 0x22uLL || ((1 << *v13) & 0x410010000) == 0)
          {
            if (v16 == 4096)
            {
              if (v9 >= 3)
                v18 = 3;
              else
                v18 = v9;
              v19 = (char *)(v13 + 1);
              goto LABEL_40;
            }
            if (v9 <= 1)
              v18 = v9;
            else
              v18 = 1;
            v19 = (char *)(v13 + 1);
            if (v16 == 28)
              goto LABEL_48;
LABEL_28:
            if (v16 == 34)
            {
              v20 = *(unsigned int *)(a4 + 8);
              if (v20 >= *(unsigned int *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v20 + 1, 8);
                v20 = *(unsigned int *)(a4 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a4 + 8 * v20) = 35;
              v21 = *(unsigned int *)(a4 + 12);
              v14 = (*(_DWORD *)(a4 + 8) + 1);
              *(_DWORD *)(a4 + 8) = v14;
              v22 = 8 * v18 - 8;
              v23 = v14 + (v22 >> 3);
              if (v23 > v21)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v23, 8);
                LODWORD(v14) = *(_DWORD *)(a4 + 8);
              }
              if (v18 == 1)
                goto LABEL_19;
              goto LABEL_18;
            }
LABEL_40:
            v24 = *(unsigned int *)(a4 + 8);
            if (v24 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v24 + 1, 8);
              v24 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v24) = v16;
            v25 = *(unsigned int *)(a4 + 12);
            v14 = (*(_DWORD *)(a4 + 8) + 1);
            *(_DWORD *)(a4 + 8) = v14;
            v26 = (char *)&v13[v18];
            v22 = v26 - v19;
            v27 = v14 + ((v26 - v19) >> 3);
            if (v27 > v25)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v27, 8);
              LODWORD(v14) = *(_DWORD *)(a4 + 8);
            }
            if (v19 == v26)
              goto LABEL_19;
LABEL_18:
            memcpy((void *)(*(_QWORD *)a4 + 8 * v14), v19, v22);
            LODWORD(v14) = *(_DWORD *)(a4 + 8);
LABEL_19:
            v15 = v14 + (v22 >> 3);
            *(_DWORD *)(a4 + 8) = v15;
            v13 += v18;
            v9 -= v18;
            if (!v9)
              goto LABEL_59;
          }
          else
          {
            if (v9 <= 2)
              v18 = v9;
            else
              v18 = 2;
            v19 = (char *)(v13 + 1);
            if (v16 != 28)
              goto LABEL_28;
LABEL_48:
            v28 = *(unsigned int *)(a4 + 8);
            if (v28 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v28 + 1, 8);
              v28 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v28) = 16;
            v29 = *(unsigned int *)(a4 + 12);
            v30 = (*(_DWORD *)(a4 + 8) + 1);
            *(_DWORD *)(a4 + 8) = v30;
            v31 = 8 * v18 - 8;
            v32 = v30 + (v31 >> 3);
            if (v32 > v29)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v32, 8);
              LODWORD(v30) = *(_DWORD *)(a4 + 8);
              if (v18 == 1)
              {
LABEL_52:
                v33 = v30 + (v31 >> 3);
                *(_DWORD *)(a4 + 8) = v33;
                if (v33 >= *(_DWORD *)(a4 + 12))
                  goto LABEL_57;
                goto LABEL_53;
              }
            }
            else if (v18 == 1)
            {
              goto LABEL_52;
            }
            memcpy((void *)(*(_QWORD *)a4 + 8 * v30), v19, 8 * v18 - 8);
            v33 = *(_DWORD *)(a4 + 8) + (v31 >> 3);
            *(_DWORD *)(a4 + 8) = v33;
            if (v33 >= *(_DWORD *)(a4 + 12))
            {
LABEL_57:
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v33 + 1, 8);
              LODWORD(v33) = *(_DWORD *)(a4 + 8);
            }
LABEL_53:
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = 28;
            v15 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v15;
            v13 += v18;
            v9 -= v18;
            if (!v9)
              goto LABEL_59;
          }
        }
      }
      v15 = *(_DWORD *)(a4 + 8);
LABEL_59:
      a5 = v37;
      *v36 = *(_QWORD *)a4;
      v36[1] = v15;
LABEL_60:
      *a5 = 0;
      return;
    case 3:
      goto LABEL_60;
    default:
      v38 = "Invalid record";
      v39 = 259;
      v34 = llvm::BitcodeErrorCategory(a1);
      v35 = operator new(0x38uLL);
      *a5 = llvm::StringError::StringError((uint64_t)v35, (llvm::Twine *)&v38, 1, (uint64_t)v34);
      return;
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>(uint64_t a1, uint64_t a2, unsigned __int8 ***a3, unsigned __int8 ***a4)
{
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  llvm::MDNode *v25;
  int v26;
  unsigned int v27;
  unint64_t v29;

  v29 = 0;
  v7 = (unsigned __int8 **)(a1 + 16);
  v8 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v29);
  v9 = *(unsigned int *)(a1 + 8);
  v10 = &v8[2 * v9];
  v11 = *a4;
  v12 = **a3;
  *v10 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track((uint64_t)v10, v12, 1);
    v13 = *(unsigned int *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 8);
    v15 = *v11;
    *v11 = 0;
    v8[2 * v9 + 1] = v15;
    v16 = *(unsigned __int8 ***)a1;
    if (!v14)
      goto LABEL_17;
  }
  else
  {
    v13 = v9;
    v17 = *v11;
    *v11 = 0;
    v8[2 * v9 + 1] = v17;
    v16 = *(unsigned __int8 ***)a1;
    if (!(_DWORD)v9)
      goto LABEL_17;
  }
  v18 = 16 * v13;
  v19 = v8;
  do
  {
    *v19 = *v16;
    v21 = *v16;
    if (*v16)
    {
      llvm::MetadataTracking::retrack((uint64_t)v16, v21, (uint64_t)v19);
      *v16 = 0;
    }
    v20 = v16[1];
    v16[1] = 0;
    v19[1] = v20;
    v19 += 2;
    v16 += 2;
    v18 -= 16;
  }
  while (v18);
  v16 = *(unsigned __int8 ***)a1;
  v22 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v22)
  {
    v23 = 2 * v22;
    do
    {
      v24 = &v16[v23];
      v25 = (llvm::MDNode *)v16[v23 - 1];
      v16[v23 - 1] = 0;
      if (v25)
        llvm::MDNode::deleteTemporary(v25, (llvm::MDNode *)v21);
      v21 = *(v24 - 2);
      if (v21)
        llvm::MetadataTracking::untrack((uint64_t)(v24 - 2), v21);
      v23 -= 2;
    }
    while (v23 * 8);
    v16 = *(unsigned __int8 ***)a1;
  }
LABEL_17:
  v26 = v29;
  if (v16 != v7)
    free(v16);
  *(_QWORD *)a1 = v8;
  v27 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 12) = v26;
  return (uint64_t)&v8[2 * v27 - 2];
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::InsertIntoBucket<llvm::Function * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 16;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = (_QWORD *)(v11 + 16 * v14);
  v15 = *a2;
  if (*a3 != *a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = (_QWORD *)(v11 + 16 * (v19 & v13));
      v15 = *a2;
      if (*a3 == *a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096)
    --*(_DWORD *)(a1 + 4);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

int *llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[31];

  v31[30] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v26 = a2;
      *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v26;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v27 = (char *)(16 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v27[(_QWORD)v6]);
    llvm::deallocate_buffer((llvm *)v6, v27);
  }
  v8 = v30;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 16);
    v30[0] = *(_QWORD *)(a1 + 8);
    v30[1] = v28;
    v8 = v31;
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v10 = *(_QWORD *)(a1 + 40);
      if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_31;
    }
  }
  v29 = *(_QWORD *)(a1 + 32);
  *v8 = v9;
  v8[1] = v29;
  v8 += 2;
  v10 = *(_QWORD *)(a1 + 40);
  if ((v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 56);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  *v8 = v10;
  v8[1] = *(_QWORD *)(a1 + 48);
  v8 += 2;
  v11 = *(_QWORD *)(a1 + 56);
  if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v12 = *(_QWORD *)(a1 + 72);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  *v8 = v11;
  v8[1] = *(_QWORD *)(a1 + 64);
  v8 += 2;
  v12 = *(_QWORD *)(a1 + 72);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 88);
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  *v8 = v12;
  v8[1] = *(_QWORD *)(a1 + 80);
  v8 += 2;
  v13 = *(_QWORD *)(a1 + 88);
  if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_14:
    v14 = *(_QWORD *)(a1 + 104);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  *v8 = v13;
  v8[1] = *(_QWORD *)(a1 + 96);
  v8 += 2;
  v14 = *(_QWORD *)(a1 + 104);
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_15:
    v15 = *(_QWORD *)(a1 + 120);
    if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  *v8 = v14;
  v8[1] = *(_QWORD *)(a1 + 112);
  v8 += 2;
  v15 = *(_QWORD *)(a1 + 120);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_16:
    v16 = *(_QWORD *)(a1 + 136);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  *v8 = v15;
  v8[1] = *(_QWORD *)(a1 + 128);
  v8 += 2;
  v16 = *(_QWORD *)(a1 + 136);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_17:
    v17 = *(_QWORD *)(a1 + 152);
    if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  *v8 = v16;
  v8[1] = *(_QWORD *)(a1 + 144);
  v8 += 2;
  v17 = *(_QWORD *)(a1 + 152);
  if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_18:
    v18 = *(_QWORD *)(a1 + 168);
    if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  *v8 = v17;
  v8[1] = *(_QWORD *)(a1 + 160);
  v8 += 2;
  v18 = *(_QWORD *)(a1 + 168);
  if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_19:
    v19 = *(_QWORD *)(a1 + 184);
    if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  *v8 = v18;
  v8[1] = *(_QWORD *)(a1 + 176);
  v8 += 2;
  v19 = *(_QWORD *)(a1 + 184);
  if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_20:
    v20 = *(_QWORD *)(a1 + 200);
    if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  *v8 = v19;
  v8[1] = *(_QWORD *)(a1 + 192);
  v8 += 2;
  v20 = *(_QWORD *)(a1 + 200);
  if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_21:
    v21 = *(_QWORD *)(a1 + 216);
    if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  *v8 = v20;
  v8[1] = *(_QWORD *)(a1 + 208);
  v8 += 2;
  v21 = *(_QWORD *)(a1 + 216);
  if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_22:
    v22 = *(_QWORD *)(a1 + 232);
    if ((v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  *v8 = v21;
  v8[1] = *(_QWORD *)(a1 + 224);
  v8 += 2;
  v22 = *(_QWORD *)(a1 + 232);
  if ((v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_23:
    v23 = *(_QWORD *)(a1 + 248);
    if ((v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_24;
LABEL_44:
    *v8 = v23;
    v8[1] = *(_QWORD *)(a1 + 256);
    v8 += 2;
    if (a2 < 0x11)
      return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets((int *)a1, v30, v8);
    goto LABEL_25;
  }
LABEL_43:
  *v8 = v22;
  v8[1] = *(_QWORD *)(a1 + 240);
  v8 += 2;
  v23 = *(_QWORD *)(a1 + 248);
  if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
    goto LABEL_44;
LABEL_24:
  if (a2 >= 0x11)
  {
LABEL_25:
    *(_DWORD *)a1 &= ~1u;
    v24 = a2;
    *(_QWORD *)(a1 + 8) = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v24;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets((int *)a1, v30, v8);
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
    v7 = 240;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_11;
    v5 = (int *)*((_QWORD *)result + 1);
    v6 = &v5[4 * v4];
    v7 = (char *)v6 - (char *)v5 - 16;
    if (v7 < 0x10)
    {
      v9 = (int *)*((_QWORD *)result + 1);
      do
      {
LABEL_10:
        *(_QWORD *)v9 = -4096;
        v9 += 4;
      }
      while (v9 != v6);
      goto LABEL_11;
    }
  }
  v8 = (v7 >> 4) + 1;
  v9 = &v5[4 * (v8 & 0x1FFFFFFFFFFFFFFELL)];
  v10 = v5 + 4;
  v11 = v8 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = -4096;
    *v10 = -4096;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_10;
LABEL_11:
  while (a2 != a3)
  {
    v18 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v13 = 16;
        v12 = result + 2;
      }
      else
      {
        v12 = (int *)*((_QWORD *)result + 1);
        v13 = result[4];
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v16 = &v12[4 * v15];
      v17 = *(_QWORD *)v16;
      if (v18 != *(_QWORD *)v16)
      {
        v19 = 0;
        v20 = 1;
        while (v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21)
            v19 = v16;
          v22 = v15 + v20++;
          v15 = v22 & v14;
          v16 = &v12[4 * (v22 & v14)];
          v17 = *(_QWORD *)v16;
          if (v18 == *(_QWORD *)v16)
            goto LABEL_15;
        }
        if (v19)
          v16 = v19;
      }
LABEL_15:
      *(_QWORD *)v16 = v18;
      *((_QWORD *)v16 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_0>(unsigned int **a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  _anonymous_namespace_::BitcodeReaderMetadataList *v4;
  llvm::Metadata *v5;

  v4 = (_anonymous_namespace_::BitcodeReaderMetadataList *)*a1;
  v5 = (llvm::Metadata *)llvm::MDString::get(*((_QWORD **)*a1 + 26), a2, a3);
  ++*a1[1];
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(llvm::MetadataLoader::MetadataLoaderImpl *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VariableLocationOp;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  llvm::MDNode *Impl;
  llvm::Metadata *v21;
  uint64_t v22;
  llvm::MetadataAsValue *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned __int8 **v26;
  uint64_t v27;
  unsigned __int8 ***v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 1043))
    return;
  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 == (char *)a2 + 72)
    return;
  while (2)
  {
    v5 = v3 - 24;
    if (!v3)
      v5 = 0;
    v6 = v5 + 48;
    for (i = (_QWORD *)*((_QWORD *)v5 + 7); i != v6; i = (_QWORD *)i[1])
    {
      if (i)
        v8 = i - 3;
      else
        v8 = 0;
      if (*((_BYTE *)v8 + 16) != 84)
        continue;
      v9 = *(v8 - 4);
      if (!v9)
        continue;
      if (*(_BYTE *)(v9 + 16))
        continue;
      if (*(_QWORD *)(v9 + 24) != v8[10])
        continue;
      if ((*(_BYTE *)(v9 + 33) & 0x20) == 0)
        continue;
      if (*(_DWORD *)(v9 + 36) != 62)
        continue;
      v10 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8];
      v11 = *(_QWORD *)(v10 + 24);
      if (!v11)
        continue;
      if (!llvm::DIExpression::startsWithDeref(*(uint64_t ***)(v10 + 24)))
        continue;
      VariableLocationOp = llvm::DbgVariableIntrinsic::getVariableLocationOp((llvm::DbgVariableIntrinsic *)v8, 0);
      if (!VariableLocationOp || *(_BYTE *)(VariableLocationOp + 16) != 21)
        continue;
      v31 = v33;
      v32 = 0x800000000;
      v13 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24) - v13;
      v15 = v14 - 8;
      if ((unint64_t)(v14 - 8) >= 0x41)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v15 >> 3, 8);
        v16 = v32;
        v17 = v31;
LABEL_28:
        memcpy(&v17[v16], (const void *)(v13 + 8), v15);
        v18 = v32;
        v19 = v31;
        goto LABEL_29;
      }
      if (v14 != 8)
      {
        v16 = 0;
        v17 = v33;
        goto LABEL_28;
      }
      v18 = 0;
      v19 = v33;
LABEL_29:
      LODWORD(v32) = v18 + ((unint64_t)v15 >> 3);
      Impl = llvm::DIExpression::getImpl(*((_QWORD *)this + 26), v19, (void *)v32, 0, 1);
      v22 = *((_QWORD *)Impl + 1);
      v23 = (llvm::MetadataAsValue *)(v22 & 0xFFFFFFFFFFFFFFF8);
      if ((v22 & 4) != 0)
        v23 = *(llvm::MetadataAsValue **)v23;
      v24 = llvm::MetadataAsValue::get(v23, Impl, v21);
      v25 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v26 = (unsigned __int8 **)(v25 + 8);
      if (v25[8])
      {
        *(_QWORD *)v25[10] = v25[9];
        v27 = v25[9];
        if (v27)
          *(_QWORD *)(v27 + 16) = v25[10];
      }
      *v26 = v24;
      if (v24)
      {
        v30 = *((_QWORD *)v24 + 1);
        v28 = (unsigned __int8 ***)(v24 + 8);
        v29 = v30;
        v25[9] = v30;
        if (v30)
          *(_QWORD *)(v29 + 16) = v25 + 9;
        v25[10] = v28;
        *v28 = v26;
      }
      if (v31 != v33)
        free(v31);
    }
    v3 = (char *)*((_QWORD *)v3 + 1);
    if (v3 != v2)
      continue;
    break;
  }
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v5 = *(_QWORD **)a1;
  v6 = *(char **)(*(_QWORD *)a1 + 680);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 688);
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = a2;
    *((_QWORD *)v6 + 1) = a3;
    v8 = (uint64_t)(v6 + 16);
    goto LABEL_18;
  }
  v9 = (char *)v5[84];
  v10 = (v6 - v9) >> 4;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60)
    abort();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = (uint64_t)(v15 + 16);
    if (v6 == v9)
      goto LABEL_16;
    goto LABEL_14;
  }
  v15 = (char *)(16 * v10);
  v16 = 0;
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;
  v8 = 16 * v10 + 16;
  if (v6 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v6 - 1);
      v15 -= 16;
      v6 -= 16;
    }
    while (v6 != v9);
    v6 = (char *)v5[84];
  }
LABEL_16:
  v5[84] = v15;
  v5[85] = v8;
  v5[86] = v16;
  if (v6)
    operator delete(v6);
LABEL_18:
  v5[85] = v8;
}

_DWORD *llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(8 * v8, (std::align_val_t)4uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -1;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = 0;
      v17 = v4;
      do
      {
        v24 = *(_DWORD *)v17;
        if (*(_DWORD *)v17 <= 0xFFFFFFFD)
        {
          v25 = *(_DWORD *)(a1 + 16) - 1;
          v26 = v25 & (37 * v24);
          v23 = &result[2 * v26];
          v27 = *v23;
          if (v24 != *v23)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -2;
              if (v30)
                v28 = v23;
              v31 = v26 + v29++;
              v26 = v31 & v25;
              v23 = &result[2 * (v31 & v25)];
              v27 = *v23;
              if (v24 == *v23)
                goto LABEL_24;
            }
            if (v28)
              v23 = v28;
          }
LABEL_24:
          *v23 = v24;
          v23[1] = *((_DWORD *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v16;
        }
        v17 = (llvm *)((char *)v17 + 8);
      }
      while (v17 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    if (((v18 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v19 = ((v18 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
    v20 = result + 2;
    v21 = v19 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v22 = &result[2 * v18];
      do
      {
        *v10 = -1;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(llvm **this)
{
  llvm::deallocate_buffer(this[131], (void *)(16 * *((unsigned int *)this + 266)));
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::MetadataLoaderImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a3;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  *(_QWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = -4096;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = -4096;
  *(_QWORD *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = -4096;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x100000000;
  *(_QWORD *)(a1 + 176) = v9;
  if (v10 >= 0xFFFFFFFF)
    v11 = -1;
  else
    v11 = v10;
  *(_DWORD *)(a1 + 184) = v11;
  *(_QWORD *)(a1 + 192) = a4;
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 208) = *a3;
  *(_QWORD *)(a1 + 216) = a3;
  v12 = *(_QWORD *)(a5 + 24);
  if (v12)
  {
    if (v12 == a5)
    {
      *(_QWORD *)(a1 + 248) = a1 + 224;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
      v13 = *(_QWORD *)(a5 + 56);
      if (!v13)
        goto LABEL_13;
    }
    else
    {
      *(_QWORD *)(a1 + 248) = v12;
      *(_QWORD *)(a5 + 24) = 0;
      v13 = *(_QWORD *)(a5 + 56);
      if (!v13)
      {
LABEL_13:
        *(_QWORD *)(a1 + 280) = 0;
        *(_BYTE *)(a1 + 288) = 0;
        *(_BYTE *)(a1 + 320) = 0;
        if (!*(_BYTE *)(a5 + 96))
          goto LABEL_22;
        goto LABEL_16;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 248) = 0;
    v13 = *(_QWORD *)(a5 + 56);
    if (!v13)
      goto LABEL_13;
  }
  if (v13 == a5 + 32)
  {
    *(_QWORD *)(a1 + 280) = a1 + 256;
    (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 56) + 24))(*(_QWORD *)(a5 + 56));
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 320) = 0;
    if (!*(_BYTE *)(a5 + 96))
      goto LABEL_22;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v13;
    *(_QWORD *)(a5 + 56) = 0;
    *(_BYTE *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 320) = 0;
    if (!*(_BYTE *)(a5 + 96))
      goto LABEL_22;
  }
LABEL_16:
  v14 = *(_QWORD *)(a5 + 88);
  if (v14)
  {
    if (v14 == a5 + 64)
    {
      *(_QWORD *)(a1 + 312) = a1 + 288;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 88) + 24))(*(_QWORD *)(a5 + 88));
    }
    else
    {
      *(_QWORD *)(a1 + 312) = v14;
      *(_QWORD *)(a5 + 88) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 312) = 0;
  }
  *(_BYTE *)(a1 + 320) = 1;
LABEL_22:
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0x200000000;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x800000000;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 752) = 1;
  *(_QWORD *)(a1 + 760) = -4096;
  *(_QWORD *)(a1 + 776) = -4096;
  *(_QWORD *)(a1 + 792) = -4096;
  *(_QWORD *)(a1 + 808) = -4096;
  *(_QWORD *)(a1 + 824) = -4096;
  *(_QWORD *)(a1 + 840) = -4096;
  *(_QWORD *)(a1 + 856) = -4096;
  *(_QWORD *)(a1 + 872) = -4096;
  *(_QWORD *)(a1 + 888) = -4096;
  *(_QWORD *)(a1 + 904) = -4096;
  *(_QWORD *)(a1 + 920) = -4096;
  *(_QWORD *)(a1 + 936) = -4096;
  *(_QWORD *)(a1 + 952) = -4096;
  *(_QWORD *)(a1 + 968) = -4096;
  *(_QWORD *)(a1 + 984) = -4096;
  *(_QWORD *)(a1 + 1000) = -4096;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_DWORD *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1072) = a6;
  return a1;
}

void llvm::BitcodeReaderValueList::assignValue(llvm::BitcodeReaderValueList *this@<X0>, llvm::Value *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  int v21;
  llvm::Value *v22;
  std::error_code v23;

  v9 = *((_QWORD *)this + 1);
  v10 = v9 - *(_QWORD *)this;
  if (((unint64_t)v10 >> 5) == a3)
  {
    v22 = a2;
    v21 = a4;
    if (v9 >= *((_QWORD *)this + 2))
    {
      *((_QWORD *)this + 1) = std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__emplace_back_slow_path<llvm::Value *&,unsigned int &>((uint64_t)this, (uint64_t *)&v22, &v21);
    }
    else
    {
      *(_QWORD *)v9 = 6;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = a2;
      if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
      {
        if (a2)
          llvm::ValueHandleBase::AddToUseList((unint64_t *)v9);
      }
      *(_DWORD *)(v9 + 24) = a4;
      *((_QWORD *)this + 1) = v9 + 32;
    }
  }
  else
  {
    if (((unint64_t)v10 >> 5) <= a3)
    {
      v12 = a3 + 1;
      v13 = v10 >> 5;
      if (v12 <= v13)
      {
        if (v12 < v13)
        {
          v14 = *(_QWORD *)this + 32 * v12;
          while (v9 != v14)
          {
            v15 = *(_QWORD *)(v9 - 16);
            v9 -= 32;
            if (v15 != -8192 && v15 != -4096 && v15 != 0)
              llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)v9);
          }
          *((_QWORD *)this + 1) = v14;
        }
      }
      else
      {
        std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append((void **)this, v12 - v13);
      }
    }
    v17 = a3;
    v18 = *(_QWORD *)this;
    v19 = *(_QWORD *)this + 32 * v17;
    v20 = *(llvm::Value **)(v19 + 16);
    if (v20)
    {
      if (*(_QWORD *)v20 != *(_QWORD *)a2)
      {
        *(_QWORD *)&v23.__val_ = std::generic_category();
        v23.__cat_ = (const std::error_category *)"Assigned value does not match type of forward declaration";
        llvm::createStringError((llvm *)0x5C, v23, a5);
        return;
      }
      llvm::Value::replaceAllUsesWith(*(Value **)(v19 + 16), a2);
      llvm::Value::deleteValue(v20);
    }
    else
    {
      if (a2)
      {
        *(_QWORD *)(v19 + 16) = a2;
        if (((unint64_t)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
          llvm::ValueHandleBase::AddToUseList((unint64_t *)v19);
      }
      *(_DWORD *)(v18 + 32 * v17 + 24) = a4;
    }
  }
  *a5 = 0;
}

unint64_t llvm::BitcodeReaderValueList::getValueFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, int a4, llvm::BasicBlock *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type **v17;
  uint64_t v18;
  llvm::Argument *v19;
  const char *v20;
  llvm::Argument *v21;
  llvm::Argument *v22;
  uint64_t v23;
  llvm::Argument *v24;
  mlir::detail::ValueImpl *v27;
  llvm::Argument *v28;
  llvm::BasicBlock *v29;
  unint64_t v30;
  uint64_t v31;
  llvm::Argument *v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 6) <= a2)
    return 0;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v11 = (uint64_t)v10 - *(_QWORD *)this;
  if (((unint64_t)v11 >> 5) <= a2)
  {
    v12 = a2 + 1;
    v13 = v11 >> 5;
    if (v12 <= v13)
    {
      if (v12 < v13)
      {
        v14 = *(_QWORD *)this + 32 * v12;
        while (v10 != (_QWORD *)v14)
        {
          v15 = *(v10 - 2);
          v10 -= 4;
          if (v15 != -8192 && v15 != -4096 && v15 != 0)
            llvm::ValueHandleBase::RemoveFromUseList(v10);
        }
        *((_QWORD *)this + 1) = v14;
      }
    }
    else
    {
      std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append((void **)this, v12 - v13);
    }
  }
  v17 = *(llvm::Type ***)(*(_QWORD *)this + 32 * a2 + 16);
  if (!v17)
  {
    if (a3)
    {
      v19 = (llvm::Argument *)operator new(0x28uLL);
      v34 = 257;
      v21 = llvm::Argument::Argument(v19, a3, (const char **)&v30, 0, 0);
      v30 = 6;
      v31 = 0;
      v32 = v21;
      v22 = v21;
      if (v21 != (llvm::Argument *)-8192)
      {
        v22 = v19;
        if (v19 != (llvm::Argument *)-4096)
        {
          v22 = v19;
          if (v19)
          {
            llvm::ValueHandleBase::AddToUseList(&v30);
            v22 = v32;
          }
        }
      }
      v33 = a4;
      v23 = *(_QWORD *)this + 32 * a2;
      v24 = *(llvm::Argument **)(v23 + 16);
      if (v24 != v22)
      {
        if (v24 != (llvm::Argument *)-8192 && v24 != (llvm::Argument *)-4096 && v24 != 0)
        {
          llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)v23);
          v22 = v32;
        }
        *(_QWORD *)(v23 + 16) = v22;
        if (v22 != (llvm::Argument *)-8192 && v22 != (llvm::Argument *)-4096 && v22)
          llvm::ValueHandleBase::AddToExistingUseList((unint64_t *)v23, v30 & 0xFFFFFFFFFFFFFFF8);
      }
      *(_DWORD *)(v23 + 24) = v33;
      if (v32 != (llvm::Argument *)-8192 && v32 != (llvm::Argument *)-4096 && v32)
        llvm::ValueHandleBase::RemoveFromUseList(&v30);
      return (unint64_t)v19;
    }
    return 0;
  }
  if (a3 && *v17 != a3)
    return 0;
  LODWORD(v28) = a2;
  v29 = a5;
  v18 = *((_QWORD *)this + 7);
  if (v18)
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t, llvm::Argument **, llvm::BasicBlock **))(*(_QWORD *)v18 + 48))(&v30, v18, &v28, &v29);
    v19 = (llvm::Argument *)v30;
    if ((v31 & 1) == 0)
      return (unint64_t)v19;
    v30 = 0;
    v28 = v19;
    llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((_QWORD **)&v28, (uint64_t *)&v29);
    if (v28)
      (*(void (**)(llvm::Argument *))(*(_QWORD *)v28 + 8))(v28);
    if ((v31 & 1) != 0)
    {
      v20 = (const char *)v30;
      v30 = 0;
      if (v20)
        (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
    }
    return 0;
  }
  v27 = (mlir::detail::ValueImpl *)std::__throw_bad_function_call[abi:nn180100]();
  return mlir::detail::ValueImpl::debug_getType(v27);
}

unint64_t mlir::detail::ValueImpl::debug_getType(mlir::detail::ValueImpl *this)
{
  return *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::detail::ValueImpl::debug_getKind(mlir::detail::ValueImpl *this)
{
  return *((_DWORD *)this + 2) & 7;
}

uint64_t mlir::Operation::debug_getOperands(mlir::Operation *this)
{
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
    return *((_QWORD *)this + 9);
  else
    return 0;
}

uint64_t mlir::Operation::debug_getResults(mlir::Operation *this)
{
  if (*((_DWORD *)this + 9))
    return (uint64_t)this - 16;
  else
    return 0;
}

unint64_t mlir::Operation::debug_getSuccessors(mlir::Operation *this)
{
  unint64_t v2;

  mlir::SuccessorRange::SuccessorRange(&v2, this);
  return v2;
}

unint64_t mlir::Operation::debug_getRegions(mlir::Operation *this)
{
  unint64_t v1;
  char *v2;

  v1 = *((unsigned int *)this + 11);
  if ((v1 & 0x7FFFFF) == 0)
    return 0;
  v2 = (char *)this + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 64;
  if ((unint64_t)v2 >= 0xFFFFFFFFFFFFFFF9)
    __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
  return ((unint64_t)(v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *((unsigned int *)this + 10);
}

GPU::RuntimeExecutionReport *GPU::RuntimeExecutionReport::RuntimeExecutionReport(GPU::RuntimeExecutionReport *this, ModuleOp a2)
{
  GPU::RuntimeExecutionReport *v4;

  *(ModuleOp *)this = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = (char *)this + 56;
  *((_QWORD *)this + 6) = 0x600000000;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = (char *)this + 144;
  *((_QWORD *)this + 17) = 0x600000000;
  *((_QWORD *)this + 24) = 0;
  v4 = this;
  mlir::detail::walk<mlir::ForwardIterator>(a2.state, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::RuntimeExecutionReport::RuntimeExecutionReport(mlir::ModuleOp)::$_0>, (uint64_t)&v4, 1);
  return this;
}

void sub_180D8CC28()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;

  v2 = *(void **)(v0 + 128);
  if (v2 != v1)
    free(v2);
  v3 = *(unsigned int *)(v0 + 120);
  v4 = *(llvm **)(v0 + 104);
  if ((_DWORD)v3)
  {
    v6 = 80 * v3;
    v7 = (char *)v4 + 32;
    do
    {
      if (*((_QWORD *)v7 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (char *)*((_QWORD *)v7 - 2);
        if (v7 != v8)
          free(v8);
      }
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
    v4 = *(llvm **)(v0 + 104);
    v5 = 80 * *(unsigned int *)(v0 + 120);
  }
  else
  {
    v5 = 0;
  }
  llvm::deallocate_buffer(v4, (void *)v5);
}

llvm::raw_ostream *mlir::operator<<(llvm::raw_ostream *a1, mlir::Operation *a2)
{
  const mlir::OpPrintingFlags *v4;
  _BYTE v6[40];

  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v6);
  v4 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v6);
  mlir::Operation::print(a2, a1, v4);
  return a1;
}

mlir::GenericProgramPoint *GPURegionRuntime::initializeOps(mlir::ForwardIterator **this)
{
  mlir::ForwardIterator **v2;

  v2 = this;
  return mlir::detail::walk<mlir::ForwardIterator>(this[29], (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::initializeOps(void)::$_0>, (uint64_t)&v2, 1);
}

void (***GPURegionRuntime::initOp(GPURegionRuntime *this, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3))(_QWORD)
{
  const char *AttrData;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t ComplexOp;
  uint64_t updated;
  void (***v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t DefiningOp;
  _QWORD **v19;
  unint64_t v20;
  char *v21;
  const char *v23;
  int v24;
  const char *v25;
  const char *v26;
  void *__dst[2];
  unint64_t v28;
  _QWORD **v29;

  v29 = *(_QWORD ***)(*((_QWORD *)a2 + 6) + 8);
  AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
  v7 = strlen(AttrData);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v28 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v28) = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memmove(v9, AttrData, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  v12 = std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::find<std::string>((_QWORD *)this + 1, (uint64_t)__dst);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  switch(*((_DWORD *)v12 + 10))
  {
    case 1:
      ComplexOp = GPURegionRuntime::createOp<GPU::AbsoluteOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 2:
      ComplexOp = GPURegionRuntime::createOp<GPU::AbsoluteSquareOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 3:
      ComplexOp = GPURegionRuntime::createOp<GPU::ACosOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 4:
      ComplexOp = GPURegionRuntime::createOp<GPU::ACoshOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 5:
      ComplexOp = GPURegionRuntime::createOp<GPU::AddOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 6:
      ComplexOp = GPURegionRuntime::createOp<GPU::AndOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 7:
      ComplexOp = GPURegionRuntime::createOp<GPU::ASinOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 8:
      ComplexOp = GPURegionRuntime::createOp<GPU::ASinhOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 9:
      ComplexOp = GPURegionRuntime::createOp<GPU::ATanOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0xA:
      ComplexOp = GPURegionRuntime::createOp<GPU::ATan2OpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0xB:
      ComplexOp = GPURegionRuntime::createOp<GPU::ATanhOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0xC:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::AssignVariableOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0xD:
      ComplexOp = GPURegionRuntime::createOp<GPU::BandPartOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0xE:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::BatchToSpaceOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x10:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseAndOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x11:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseLeftShiftOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x12:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseNotOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x13:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseOrOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x14:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwisePopcountOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x15:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseRightShiftOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x16:
      ComplexOp = GPURegionRuntime::createOp<GPU::BitwiseXorOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x17:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::BroadcastGradientArgsOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x18:
      ComplexOp = GPURegionRuntime::createOp<GPU::BroadcastToOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x19:
      ComplexOp = GPURegionRuntime::createOp<GPU::CallOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1A:
      ComplexOp = GPURegionRuntime::createOp<GPU::CastOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1B:
      ComplexOp = GPURegionRuntime::createOp<GPU::CeilOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1C:
      ComplexOp = GPURegionRuntime::createOp<GPU::ClampOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1D:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ColToImOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1E:
      ComplexOp = GPURegionRuntime::createOp<GPU::ConcatOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x1F:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ConditionOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x20:
      ComplexOp = GPURegionRuntime::createOp<GPU::ConjugateOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x21:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv2DOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x22:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv2DDataGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x23:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv2DWeightsGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x24:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv3DOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x25:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv3DDataGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x26:
      ComplexOp = GPURegionRuntime::createOp<GPU::Conv3DWeightsGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x27:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ConstantOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x28:
      ComplexOp = GPURegionRuntime::createOp<GPU::CosOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x29:
      ComplexOp = GPURegionRuntime::createOp<GPU::CoshOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x2A:
      ComplexOp = GPURegionRuntime::createOp<GPU::CostVolumeOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x2B:
      ComplexOp = GPURegionRuntime::createOp<GPU::CreateComplexOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x2C:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CreateTextureTensorOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x2D:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CropOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x2E:
      ComplexOp = GPURegionRuntime::createOp<GPU::CropResizeOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x2F:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CumulativeSumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x30:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CumulativeProductOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x31:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CumulativeMaximumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x32:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::CumulativeMinimumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x33:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthToSpace2DOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x34:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthwiseConv2DOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x35:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthwiseConv2DDataGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x36:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthwiseConv2DWeightsGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x37:
      ComplexOp = GPURegionRuntime::createOp<GPU::DepthwiseConv3DOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x38:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthwiseConv3DDataGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x39:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DepthwiseConv3DWeightsGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x3A:
      ComplexOp = GPURegionRuntime::createOp<GPU::DequantizeLutOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x3B:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DequantizeOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x3C:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::DimensionSizeOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x3D:
      ComplexOp = GPURegionRuntime::createOp<GPU::DivideOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x3E:
      ComplexOp = GPURegionRuntime::createOp<GPU::DynamicShapeCastOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x40:
      ComplexOp = GPURegionRuntime::createOp<GPU::EqualToOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x41:
      ComplexOp = GPURegionRuntime::createOp<GPU::ErfOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x42:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ExpandDimsOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x43:
      ComplexOp = GPURegionRuntime::createOp<GPU::ExponentOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x44:
      ComplexOp = GPURegionRuntime::createOp<GPU::ExponentBase2OpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x45:
      ComplexOp = GPURegionRuntime::createOp<GPU::ExponentBase10OpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x46:
      ComplexOp = GPURegionRuntime::createOp<GPU::ExtractOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x47:
      ComplexOp = GPURegionRuntime::createOp<GPU::FFTOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x48:
      ComplexOp = GPURegionRuntime::createOp<GPU::FFT_RToCOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x49:
      ComplexOp = GPURegionRuntime::createOp<GPU::FFT_CToROpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4A:
      ComplexOp = GPURegionRuntime::createOp<GPU::FileBackedConstantOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4B:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::Flatten2DOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4C:
      ComplexOp = GPURegionRuntime::createOp<GPU::FloorOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4D:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ForOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4E:
      ComplexOp = GPURegionRuntime::createOp<GPU::FPToIntClampedOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x4F:
      ComplexOp = GPURegionRuntime::createOp<GPU::GatherOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x50:
      ComplexOp = GPURegionRuntime::createOp<GPU::GatherAlongAxisOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x51:
      ComplexOp = GPURegionRuntime::createOp<GPU::GatherNDOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x52:
      ComplexOp = GPURegionRuntime::createOp<GPU::GetCoordOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x53:
      ComplexOp = GPURegionRuntime::createOp<GPU::GreaterThanOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x54:
      ComplexOp = GPURegionRuntime::createOp<GPU::GreaterThanOrEqualToOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x55:
      ComplexOp = GPURegionRuntime::createOp<GPU::GRUOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x56:
      ComplexOp = GPURegionRuntime::createOp<GPU::GRUGradientOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x57:
      ComplexOp = GPURegionRuntime::createOp<GPU::HammingDistanceOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x58:
      ComplexOp = GPURegionRuntime::createOp<GPU::IdentityOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x59:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::IfOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x5A:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ImToColOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x5B:
      ComplexOp = GPURegionRuntime::createOp<GPU::ImaginaryPartOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x5C:
      ComplexOp = GPURegionRuntime::createOp<GPU::IsFiniteOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x5D:
      ComplexOp = GPURegionRuntime::createOp<GPU::IsInfiniteOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x5E:
      ComplexOp = GPURegionRuntime::createOp<GPU::IsNaNOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x60:
      ComplexOp = GPURegionRuntime::createOp<GPU::LessThanOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x61:
      ComplexOp = GPURegionRuntime::createOp<GPU::LessThanOrEqualToOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x62:
      ComplexOp = GPURegionRuntime::createOp<GPU::LocalConvolutionOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x63:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::LocalConvolutionDataGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x64:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::LocalConvolutionWeightGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x65:
      ComplexOp = GPURegionRuntime::createOp<GPU::LogarithmOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x66:
      ComplexOp = GPURegionRuntime::createOp<GPU::LogarithmBase2OpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x67:
      ComplexOp = GPURegionRuntime::createOp<GPU::LogarithmBase10OpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x68:
      ComplexOp = GPURegionRuntime::createOp<GPU::LSTMOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x69:
      ComplexOp = GPURegionRuntime::createOp<GPU::LSTMGradientOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x6A:
      ComplexOp = GPURegionRuntime::createOp<GPU::MakeListOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x6B:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::MaterializeSparseTensorOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x6C:
      ComplexOp = GPURegionRuntime::createOp<GPU::MatMulOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x6D:
      ComplexOp = GPURegionRuntime::createOp<GPU::MatrixDecompositionLUOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x6E:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::MatrixInverseOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x6F:
      ComplexOp = GPURegionRuntime::createOp<GPU::MatrixSolverLUOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x70:
      ComplexOp = GPURegionRuntime::createOp<GPU::MaximumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x71:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::MemrefToTensorOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x72:
      ComplexOp = GPURegionRuntime::createOp<GPU::MinimumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x73:
      ComplexOp = GPURegionRuntime::createOp<GPU::ModuloOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x74:
      ComplexOp = GPURegionRuntime::createOp<GPU::MultiplyOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x75:
      ComplexOp = GPURegionRuntime::createOp<GPU::NandOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x76:
      ComplexOp = GPURegionRuntime::createOp<GPU::NegativeOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x77:
      ComplexOp = GPURegionRuntime::createOp<GPU::NorOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x79:
      ComplexOp = GPURegionRuntime::createOp<GPU::NotOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x7A:
      ComplexOp = GPURegionRuntime::createOp<GPU::NotEqualToOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x7B:
      ComplexOp = GPURegionRuntime::createOp<GPU::OneHotOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x7C:
      ComplexOp = GPURegionRuntime::createOp<GPU::OrOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x7D:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::PadOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x7E:
      ComplexOp = GPURegionRuntime::createOp<GPU::PadGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x7F:
      ComplexOp = GPURegionRuntime::createOp<GPU::PermuteOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x80:
      ComplexOp = GPURegionRuntime::createOp<GPU::PoolAvgOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x81:
      ComplexOp = GPURegionRuntime::createOp<GPU::PoolAvgGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x82:
      ComplexOp = GPURegionRuntime::createOp<GPU::PoolL2NormOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x83:
      ComplexOp = GPURegionRuntime::createOp<GPU::PoolL2NormGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x84:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::PoolMaxOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x86:
      ComplexOp = GPURegionRuntime::createOp<GPU::PoolMaxGradientOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x87:
      ComplexOp = GPURegionRuntime::createOp<GPU::PowerOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x88:
      ComplexOp = GPURegionRuntime::createOp<GPU::PruneOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x89:
      ComplexOp = GPURegionRuntime::createOp<GPU::PruneGradientOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_224;
    case 0x8B:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::QuantizedGatherOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x8C:
      ComplexOp = GPURegionRuntime::createOp<GPU::RandomUniformOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x8D:
      ComplexOp = GPURegionRuntime::createOp<GPU::RandomTruncatedNormalOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x8E:
      ComplexOp = GPURegionRuntime::createOp<GPU::RandomNormalOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x8F:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::RankOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x90:
      ComplexOp = GPURegionRuntime::createOp<GPU::ReadVariableOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x91:
      ComplexOp = GPURegionRuntime::createOp<GPU::RealPartOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x92:
      ComplexOp = GPURegionRuntime::createOp<GPU::ReciprocalOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x93:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionAndOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x94:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionArgMaxOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x95:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionArgMinOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x96:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionMaxOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x98:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionMinOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x99:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionOrOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x9A:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionProdOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x9B:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::ReductionSumOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x9D:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::RegionCallOpHandler>(this, a2, a3);
      goto LABEL_224;
    case 0x9E:
      ComplexOp = (uint64_t)GPURegionRuntime::createOp<GPU::RegionReturnOpHandler>(this, a2, a3);
LABEL_224:
      v15 = (void (***)(_QWORD))ComplexOp;
      break;
    case 0x9F:
      updated = GPURegionRuntime::createOp<GPU::ReinterpretCastOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA2:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ReshapeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA3:
      updated = GPURegionRuntime::createOp<GPU::ResizeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA4:
      updated = GPURegionRuntime::createOp<GPU::ResizeGradientOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA5:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ReturnOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA6:
      updated = GPURegionRuntime::createOp<GPU::ReturnStitchedOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA7:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ReverseOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xA8:
      updated = GPURegionRuntime::createOp<GPU::ReciprocalSquareRootOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xA9:
      updated = GPURegionRuntime::createOp<GPU::RintOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xAA:
      updated = GPURegionRuntime::createOp<GPU::RMSNormOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xAB:
      updated = GPURegionRuntime::createOp<GPU::RoundOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xAC:
      updated = GPURegionRuntime::createOp<GPU::SampleGridOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xAD:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SampleGridDataGradientOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xAE:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ScatterOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xAF:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ScatterAlongAxisOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB0:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ScatterNDOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB1:
      updated = GPURegionRuntime::createOp<GPU::SelectOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB2:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::ShapeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB4:
      updated = GPURegionRuntime::createOp<GPU::SignOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB5:
      updated = GPURegionRuntime::createOp<GPU::SignbitOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB6:
      updated = GPURegionRuntime::createOp<GPU::SinOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xB7:
      updated = GPURegionRuntime::createOp<GPU::SingleGateRNNOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xB8:
      updated = GPURegionRuntime::createOp<GPU::SingleGateRNNGradientOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xB9:
      updated = GPURegionRuntime::createOp<GPU::SinhOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xBA:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SizeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xBB:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SliceOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xBC:
      updated = GPURegionRuntime::createOp<GPU::SoftmaxOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xBD:
      updated = GPURegionRuntime::createOp<GPU::SortOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xBF:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SpaceToBatchOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xC0:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SpaceToDepth2DOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xC1:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SparseDenseMatMulOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC2:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SplitOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC3:
      updated = GPURegionRuntime::createOp<GPU::SquareOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC4:
      updated = GPURegionRuntime::createOp<GPU::SquareRootOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC5:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::SqueezeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC6:
      updated = GPURegionRuntime::createOp<GPU::StencilOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC7:
      updated = GPURegionRuntime::createOp<GPU::StitchedOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xC8:
      updated = GPURegionRuntime::createOp<GPU::StridedSliceOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xC9:
      updated = GPURegionRuntime::createOp<GPU::StridedSliceGradientOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xCA:
      updated = GPURegionRuntime::createOp<GPU::StridedSliceUpdateOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xCB:
      updated = GPURegionRuntime::createOp<GPU::SubtractOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xCD:
      updated = GPURegionRuntime::createOp<GPU::TanOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xCE:
      updated = GPURegionRuntime::createOp<GPU::TanhOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xCF:
      updated = GPURegionRuntime::createOp<GPU::FromElementsOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD0:
      updated = GPURegionRuntime::createOp<GPU::ListPopBackOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD1:
      updated = GPURegionRuntime::createOp<GPU::ListPushBackOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD2:
      updated = GPURegionRuntime::createOp<GPU::ScaledDotProductAttentionOpHandler>((uint64_t)this, a2, a3);
      goto LABEL_192;
    case 0xD3:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::TensorToMemrefOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD4:
      updated = GPURegionRuntime::createOp<GPU::TileOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD5:
      updated = GPURegionRuntime::createOp<GPU::TileGradientOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD6:
      updated = GPURegionRuntime::createOp<GPU::TopKOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD7:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::TopKGradientOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD8:
      updated = GPURegionRuntime::createOp<GPU::TransposeOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xD9:
      updated = GPURegionRuntime::createOp<GPU::TypeConstraintOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDA:
      updated = GPURegionRuntime::createOp<GPU::UpdateRandomStateOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDB:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::VarHandleOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDC:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::VariableFromTensorOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDD:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::WhileOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDE:
      updated = GPURegionRuntime::createOp<GPU::XorOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xDF:
      updated = GPURegionRuntime::createOp<GPU::XnorOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xE0:
      updated = (uint64_t)GPURegionRuntime::createOp<GPU::YieldOpHandler>(this, a2, a3);
      goto LABEL_192;
    case 0xE1:
      updated = GPURegionRuntime::createOp<GPU::QuantizedMatMulOpHandler>((uint64_t)this, a2, a3);
LABEL_192:
      v15 = (void (***)(_QWORD))updated;
      break;
    default:
      if (MTLReportFailureTypeEnabled())
        MTLReportFailure();
      v15 = 0;
      break;
  }
  v16 = llvm::DefaultDoCastIfPossible<mlir::mps::ReshapeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReshapeOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
  v17 = v16;
  if (v16)
  {
    if ((*(_BYTE *)(v16 + 46) & 0x80) == 0)
    {
      v23 = "hasOperandStorage && \"expected operation to have operand storage\"";
      v24 = 960;
      v25 = "Operation.h";
      v26 = "getOperandStorage";
      goto LABEL_239;
    }
    if (!*(_DWORD *)(v16 + 68))
    {
      v23 = "Index < this->size() && \"Invalid index!\"";
      v24 = 443;
      v25 = "ArrayRef.h";
      v26 = "operator[]";
      goto LABEL_239;
    }
    v29 = *(_QWORD ***)(*(_QWORD *)(v16 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
    if (DefiningOp)
    {
      if (llvm::DefaultDoCastIfPossible<mlir::mps::MatMulOp,mlir::Operation *,llvm::CastInfo<mlir::mps::MatMulOp,mlir::Operation *,void>>::doCastIfPossible(DefiningOp))
      {
        v19 = v29;
        if (*v29)
        {
          if (!**v29)
          {
            if (*(_DWORD *)(v17 + 36))
            {
              v20 = v17 - 16;
              v21 = (char *)this + 600;
              std::__hash_table<std::__hash_value_type<void *,void *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,void *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,void *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,void *>>>::__emplace_unique_key_args<void *,std::pair<void *,void *> &>((uint64_t)v21, (unint64_t)v29, (uint64_t)v29, v20);
              std::__hash_table<std::__hash_value_type<void *,void *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,void *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,void *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,void *>>>::__emplace_unique_key_args<void *,std::pair<void *,void *> &>((uint64_t)v21, v20, v20, (uint64_t)v19);
              goto LABEL_234;
            }
            v23 = "resultNumber < getNumResults() && \"Result number is out of range for operation\"";
            v24 = 984;
            v25 = "Operation.h";
            v26 = "getOpResultImpl";
LABEL_239:
            __assert_rtn(v26, v25, v24, v23);
          }
        }
      }
    }
  }
LABEL_234:
  (**v15)(v15);
  if (SHIBYTE(v28) < 0)
    operator delete(__dst[0]);
  return v15;
}

void sub_180D8E05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GPURegionRuntime::createOp<GPU::AbsoluteOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C2E0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AbsoluteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8E344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::AbsoluteSquareOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DD00;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AbsoluteSquareOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8E6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ACosOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AE88;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ACosOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8EA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ACoshOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B518;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ACoshOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8EE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::AddOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AA70;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AddOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8F1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::AndOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AAC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8F53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ASinOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AED8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ASinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8F8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ASinhOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B568;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ASinhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D8FC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ATanOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AF28;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D90004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ATan2OpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B5B8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATan2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9039C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ATanhOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B608;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATanhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D90734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::AssignVariableOpHandler *GPURegionRuntime::createOp<GPU::AssignVariableOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::AssignVariableOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::AssignVariableOpHandler *)operator new();
  GPU::AssignVariableOpHandler::AssignVariableOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AssignVariableOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D90ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BandPartOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C330;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BandPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D90E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseAndOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CAD0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseAndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D911EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseLeftShiftOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1ED40;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseLeftShiftOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D91584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseNotOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CB20;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseNotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseOrOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C850;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseOrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D91CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwisePopcountOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E980;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwisePopcountOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseRightShiftOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1EE80;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseRightShiftOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D923E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BitwiseXorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CB70;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseXorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::BatchToSpaceOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::SpaceToBatchGenericOpHandler<mlir::mps::BatchToSpaceOp,true>::SpaceToBatchGenericOpHandler((uint64_t)v6, (id *)a1, a2, a3);
  *v6 = &unk_1E0E1D2A0;
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BatchToSpaceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D92B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::BroadcastGradientArgsOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F420;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BroadcastGradientArgsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D92EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::BroadcastToOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BroadcastToOpHandler::BroadcastToOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BroadcastToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D93234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CallOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::CallOpHandler::CallOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CallOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D935BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CastOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B018;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D93954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CeilOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B068;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CeilOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D93CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ClampOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B658;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ClampOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D94084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::ColToImOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BD90;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ColToImOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ConcatOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ConcatOpHandler::ConcatOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConcatOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D947A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::ConditionOpHandler *GPURegionRuntime::createOp<GPU::ConditionOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::ConditionOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::ConditionOpHandler *)operator new();
  GPU::ConditionOpHandler::ConditionOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConditionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D94B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ConjugateOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C8F0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConjugateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D94EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv2DOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &off_1E0E1BA20;
  *(_QWORD *)(v6 + 120) = 0;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv2DOpHandler::_createKernel((GPU::Conv2DOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D95270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv2DDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F0B0;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv2DDataGradientOpHandler::_createKernel((GPU::Conv2DDataGradientOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D95640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv2DWeightsGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F470;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv2DWeightsGradientOpHandler::_createKernel((GPU::Conv2DWeightsGradientOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D959F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv3DOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E0C0;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv3DOpHandler::_createNDArrayMultiaryKernel((GPU::Conv3DOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1BA70;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D95DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv3DDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F100;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv3DDataGradientOpHandler::_createKernel((GPU::Conv3DDataGradientOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D96178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::Conv3DWeightsGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F4C0;
  if (*(_BYTE *)(v6 + 40))
    GPU::Conv3DWeightsGradientOpHandler::_createKernel((GPU::Conv3DWeightsGradientOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D96530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::ConstantOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C380;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConstantOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D968D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CosOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AB10;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CosOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D96C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CoshOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B0B8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CoshOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D97008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CostVolumeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E2F0;
  if (*(_BYTE *)(v6 + 40))
    GPU::CostVolumeOpHandler::_createNDArrayMultiaryKernel((GPU::CostVolumeOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1CBC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CostVolumeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D973C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CreateComplexOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D9E0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CreateComplexOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D97768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::CreateTextureTensorOpHandler *GPURegionRuntime::createOp<GPU::CreateTextureTensorOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::CreateTextureTensorOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::CreateTextureTensorOpHandler *)operator new();
  GPU::CreateTextureTensorOpHandler::CreateTextureTensorOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CreateTextureTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D97AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::CropOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B108;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CropOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D97E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::CropResizeOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::CropResizeOpHandler::CropResizeOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CropResizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D98210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::CumulativeSumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseCumulativeOpHandler<mlir::mps::CumulativeSumOp,(MPSNDArrayScanOperation)0>::BaseCumulativeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1DA30;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeSumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D985A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::CumulativeProductOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseCumulativeOpHandler<mlir::mps::CumulativeProductOp,(MPSNDArrayScanOperation)1>::BaseCumulativeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1EF70;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeProductOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D98940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::CumulativeMaximumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseCumulativeOpHandler<mlir::mps::CumulativeMaximumOp,(MPSNDArrayScanOperation)2>::BaseCumulativeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1EED0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeMaximumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D98CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::CumulativeMinimumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseCumulativeOpHandler<mlir::mps::CumulativeMinimumOp,(MPSNDArrayScanOperation)3>::BaseCumulativeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1EF20;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeMinimumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D99070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::DepthToSpace2DOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::SpaceToDepth2DGenericOpHandler<mlir::mps::DepthToSpace2DOp,true>::SpaceToDepth2DGenericOpHandler((uint64_t)v6, (id *)a1, a2, a3);
  *v6 = &unk_1E0E1DEE0;
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthToSpace2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D99408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DepthwiseConv2DOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E9D0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D997A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DepthwiseConv2DDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F790;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D99B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DepthwiseConv2DWeightsGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F880;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D99ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::DepthwiseConv3DOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &off_1E0E1EA20;
  *(_QWORD *)(v6 + 120) = 0;
  if (*(_BYTE *)(v6 + 40))
    GPU::DepthwiseConv3DOpHandler::_createKernel((GPU::DepthwiseConv3DOpHandler *)v6);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DepthwiseConv3DDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F7E0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9A63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DepthwiseConv3DWeightsGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F8D0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::DequantizeLutOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::DequantizeLutOpHandler::DequantizeLutOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DequantizeLutOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::DequantizeOpHandler *GPURegionRuntime::createOp<GPU::DequantizeOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::DequantizeOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::DequantizeOpHandler *)operator new();
  GPU::DequantizeOpHandler::DequantizeOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DequantizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9B0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::DimensionSizeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DA80;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DimensionSizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::DivideOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BAC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DivideOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::DynamicShapeCastOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::DynamicShapeCastOpHandler::DynamicShapeCastOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DynamicShapeCastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ErfOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AB60;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ErfOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9BF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::EqualToOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BDE0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::EqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ExpandDimsOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReshapeOpHandler<mlir::mps::ExpandDimsOp>::BaseReshapeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1CCB0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExpandDimsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9C664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ExponentOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C3D0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ExponentBase2OpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DAD0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentBase2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9CD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ExponentBase10OpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DF30;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentBase10OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ExtractOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ExtractOpHandler::ExtractOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExtractOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9D4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FFTOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::FFTOpHandler::FFTOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFTOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FFT_RToCOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::FFT_RToCOpHandler::FFT_RToCOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFT_RToCOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9DBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FFT_CToROpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::FFT_CToROpHandler::FFT_CToROpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFT_CToROpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9DF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FileBackedConstantOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::FileBackedConstantOpHandler::FileBackedConstantOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FileBackedConstantOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9E2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::Flatten2DOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReshapeOpHandler<mlir::mps::Flatten2DOp>::BaseReshapeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1C940;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Flatten2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FloorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B6A8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FloorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::ForOpHandler *GPURegionRuntime::createOp<GPU::ForOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::ForOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::ForOpHandler *)operator new();
  GPU::ForOpHandler::ForOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ForOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9ED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FPToIntClampedOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DF80;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FPToIntClampedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GatherOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E110;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::GatherOpHandler,mlir::mps::GatherOp,MPSNDArrayGatherND,2ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1BB10;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9F4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GatherAlongAxisOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E480;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::GatherAlongAxisOpHandler,mlir::mps::GatherAlongAxisOp,MPSNDArrayGatherND,2ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1EA70;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherAlongAxisOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9F8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GatherNDOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E2A0;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::GatherNDOpHandler,mlir::mps::GatherNDOp,MPSNDArrayGatherND,2ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1C4C0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherNDOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180D9FC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GetCoordOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C510;
  *(_QWORD *)(v6 + 128) = 0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GetCoordOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA0018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GreaterThanOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D160;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GreaterThanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA03B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GreaterThanOrEqualToOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F380;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GreaterThanOrEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA0748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GRUOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GRUOpHandler::GRUOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GRUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::GRUGradientOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GRUGradientOpHandler::GRUGradientOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GRUGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA0E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::HammingDistanceOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E4D0;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::HammingDistanceOpHandler,mlir::mps::HammingDistanceOp,MPSNDArrayHammingDistanceKernel,2ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1EAC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::HammingDistanceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA1210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::IdentityOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::IdentityOpHandler::IdentityOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IdentityOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA15A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::IfOpHandler *GPURegionRuntime::createOp<GPU::IfOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::IfOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::IfOpHandler *)operator new();
  GPU::IfOpHandler::IfOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IfOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA1930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ImaginaryPartOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DB20;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ImaginaryPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA1CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::ImToColOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BE80;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ImToColOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA2060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::IsFiniteOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C5B0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsFiniteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA23F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::IsInfiniteOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CD50;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsInfiniteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA2790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::IsNaNOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B6F8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsNaNOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA2B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LessThanOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C600;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LessThanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA2EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LessThanOrEqualToOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1EFC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LessThanOrEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LocalConvolutionOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E610;
  if (*(_BYTE *)(v6 + 40))
    GPU::LocalConvolutionOpHandler::_createNDArrayMultiaryKernel((GPU::LocalConvolutionOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1EDE0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA3610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::LocalConvolutionDataGradientOpHandler *GPURegionRuntime::createOp<GPU::LocalConvolutionDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::LocalConvolutionDataGradientOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::LocalConvolutionDataGradientOpHandler *)operator new();
  GPU::LocalConvolutionDataGradientOpHandler::LocalConvolutionDataGradientOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA39A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::LocalConvolutionWeightGradientOpHandler *GPURegionRuntime::createOp<GPU::LocalConvolutionWeightGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::LocalConvolutionWeightGradientOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::LocalConvolutionWeightGradientOpHandler *)operator new();
  GPU::LocalConvolutionWeightGradientOpHandler::LocalConvolutionWeightGradientOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionWeightGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA3D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LogarithmOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C990;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA40C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LogarithmBase2OpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1DFD0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmBase2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA4460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LogarithmBase10OpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1EB10;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmBase10OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA47F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LSTMOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::LSTMOpHandler::LSTMOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LSTMOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA4B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::LSTMGradientOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::LSTMGradientOpHandler::LSTMGradientOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LSTMGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA4F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MakeListOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C670;
  *(_BYTE *)(v6 + 41) = 0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MakeListOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA52A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::MaterializeSparseTensorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F6F0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MaterializeSparseTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MatMulOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::MatMulOpHandler::MatMulOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA59C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MatrixDecompositionLUOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::MatrixDecompositionLUOpHandler::MatrixDecompositionLUOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixDecompositionLUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA5D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::MatrixInverseOpHandler *GPURegionRuntime::createOp<GPU::MatrixInverseOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::MatrixInverseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::MatrixInverseOpHandler *)operator new();
  GPU::MatrixInverseOpHandler::MatrixInverseOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixInverseOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA60D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MatrixSolverLUOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::MatrixSolverLUOpHandler::MatrixSolverLUOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixSolverLUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MaximumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BED0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MaximumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA67F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::MemrefToTensorOpHandler *GPURegionRuntime::createOp<GPU::MemrefToTensorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::MemrefToTensorOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::MemrefToTensorOpHandler *)operator new();
  GPU::MemrefToTensorOpHandler::MemrefToTensorOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MemrefToTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA6B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MinimumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BF20;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MinimumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA6F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ModuloOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BBB0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ModuloOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA72AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::MultiplyOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C6C0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MultiplyOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA7644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::NandOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B1A8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NandOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA79DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::NegativeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C710;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NegativeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::NorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1ACA8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA810C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::NotOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1ACF8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA84A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::NotEqualToOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CDA0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NotEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::OneHotOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::OneHotOpHandler::OneHotOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::OneHotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA8BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::OrOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AA20;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::OrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA8F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::PadOpHandler *GPURegionRuntime::createOp<GPU::PadOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::PadOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::PadOpHandler *)operator new();
  GPU::PadOpHandler::PadOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PadOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA92E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PadGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D200;
  *(_QWORD *)(v6 + 120) = 0;
  if (*(_BYTE *)(v6 + 40))
    GPU::PadGradientOpHandler::_createKernel((GPU::PadGradientOpHandler *)v6, 0);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PadGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA9694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PermuteOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::PermuteOpHandler::PermuteOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PermuteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA9A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PoolAvgOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E200;
  if (*(_BYTE *)(v6 + 40))
    GPU::PoolingOpHandler<mlir::mps::PoolAvgOp,MPSNDArrayPoolingKernel,(MPSNDArrayPoolingMode_s)3>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1BFC0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolAvgOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DA9DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PoolAvgGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E520;
  if (*(_BYTE *)(v6 + 40))
    GPU::PoolingGradientOpHandler<mlir::mps::PoolAvgGradientOp,(MPSNDArrayPoolingMode_s)3>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1EB60;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolAvgGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAA1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PoolL2NormOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E1B0;
  if (*(_BYTE *)(v6 + 40))
    GPU::PoolingOpHandler<mlir::mps::PoolL2NormOp,MPSNDArrayPoolingKernel,(MPSNDArrayPoolingMode_s)5>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1CDF0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolL2NormOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAA57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PoolL2NormGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E5C0;
  if (*(_BYTE *)(v6 + 40))
    GPU::PoolingGradientOpHandler<mlir::mps::PoolL2NormGradientOp,(MPSNDArrayPoolingMode_s)5>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1F1A0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolL2NormGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAA944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::PoolMaxOpHandler *GPURegionRuntime::createOp<GPU::PoolMaxOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::PoolMaxOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::PoolMaxOpHandler *)operator new();
  GPU::PoolMaxOpHandler::PoolMaxOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PoolMaxGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E570;
  if (*(_BYTE *)(v6 + 40))
    GPU::PoolingGradientOpHandler<mlir::mps::PoolMaxGradientOp,(MPSNDArrayPoolingMode_s)1>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1EBB0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolMaxGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAB094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PowerOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B748;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PowerOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAB43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PruneOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::PruneOpHandler::PruneOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PruneOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAB7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::PruneGradientOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::PruneGradientOpHandler::PruneGradientOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PruneGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DABB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::QuantizedGatherOpHandler *GPURegionRuntime::createOp<GPU::QuantizedGatherOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::QuantizedGatherOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::QuantizedGatherOpHandler *)operator new();
  GPU::QuantizedGatherOpHandler::QuantizedGatherOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::QuantizedGatherOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DABED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RandomUniformOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E3E0;
  if (*(_BYTE *)(v6 + 40))
    GPU::RandomUniformOpHandler::_createNDArrayMultiaryKernel((GPU::RandomUniformOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1DC10;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomUniformOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAC28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RandomTruncatedNormalOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E6B0;
  if (*(_BYTE *)(v6 + 40))
    GPU::RandomTruncatedNormalOpHandler::_createNDArrayMultiaryKernel((GPU::RandomTruncatedNormalOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1F560;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomTruncatedNormalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAC654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RandomNormalOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E390;
  if (*(_BYTE *)(v6 + 40))
    GPU::RandomNormalOpHandler::_createNDArrayMultiaryKernel((GPU::RandomNormalOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1D3E0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomNormalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DACA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::RankOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B1F8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RankOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DACDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RealPartOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C760;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RealPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAD15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ReadVariableOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ReadVariableOpHandler::ReadVariableOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReadVariableOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAD4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ReciprocalOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CE40;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReciprocalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAD87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionAndOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionAndOp,(MPSNDArrayReductionOperation)8>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1D480;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionAndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DADC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionArgMaxOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionArgMaxOp,(MPSNDArrayReductionOperation)7>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1EC50;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionArgMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DADFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionArgMinOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionArgMinOp,(MPSNDArrayReductionOperation)6>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1ECA0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionArgMinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAE344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionMaxOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionMaxOp,(MPSNDArrayReductionOperation)1>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1D4D0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAE6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionMinOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionMinOp,(MPSNDArrayReductionOperation)0>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1D520;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionMinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAEA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionProdOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionProdOp,(MPSNDArrayReductionOperation)5>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1DC60;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionProdOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAEE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionOrOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionOrOp,(MPSNDArrayReductionOperation)9>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1D250;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionOrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReductionSumOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReductionOpHandler<mlir::mps::ReductionSumOp,(MPSNDArrayReductionOperation)4>::BaseReductionOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1D570;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionSumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAF53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::RegionCallOpHandler *GPURegionRuntime::createOp<GPU::RegionCallOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::RegionCallOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::RegionCallOpHandler *)operator new();
  GPU::RegionCallOpHandler::RegionCallOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RegionCallOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAF8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::RegionReturnOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E04CE8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RegionReturnOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAFC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ReinterpretCastOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ReinterpretCastOpHandler::ReinterpretCastOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReinterpretCastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DAFFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ReshapeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReshapeOpHandler<mlir::mps::ReshapeOp>::BaseReshapeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1C0B0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReshapeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ResizeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E160;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::ResizeOpHandler,mlir::mps::ResizeOp,MPSNDArrayResample,1ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1BC50;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ResizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB0734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ResizeGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E430;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::ResizeGradientOpHandler,mlir::mps::ResizeGradientOp,MPSNDArrayResampleGradient,1ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1E700;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ResizeGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB0AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::ReturnOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BCA0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReturnOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB0EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ReturnStitchedOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ReturnStitchedOpHandler::ReturnStitchedOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReturnStitchedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::ReverseOpHandler *GPURegionRuntime::createOp<GPU::ReverseOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::ReverseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::ReverseOpHandler *)operator new();
  GPU::ReverseOpHandler::ReverseOpHandler(v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReverseOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB15B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ReciprocalSquareRootOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0DFA598;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReciprocalSquareRootOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RintOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B248;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RintOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB1CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RMSNormOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::RMSNormOpHandler::RMSNormOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RMSNormOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::RoundOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B7E8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RoundOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB2404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SampleGridOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E340;
  if (*(_BYTE *)(v6 + 40))
    GPU::SampleGridOpHandler::_createNDArrayMultiaryKernel((GPU::SampleGridOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1CEE0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SampleGridOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB27BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::SampleGridDataGradientOpHandler *GPURegionRuntime::createOp<GPU::SampleGridDataGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::SampleGridDataGradientOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::SampleGridDataGradientOpHandler *)operator new();
  GPU::SampleGridDataGradientOpHandler::SampleGridDataGradientOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SampleGridDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB2B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ScaledDotProductAttentionOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::ScaledDotProductAttentionOpHandler::ScaledDotProductAttentionOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScaledDotProductAttentionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB2EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ScatterOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::ScatterGenericOpHandler<mlir::mps::ScatterOp>::ScatterGenericOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1C150;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB3274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ScatterAlongAxisOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::ScatterGenericOpHandler<mlir::mps::ScatterAlongAxisOp>::ScatterGenericOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1EE30;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterAlongAxisOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::ScatterNDOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::ScatterGenericOpHandler<mlir::mps::ScatterNDOp>::ScatterGenericOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1C9E0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterNDOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB39A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SelectOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BCF0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SelectOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB3D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::ShapeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B838;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ShapeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB40D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SignOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B298;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SignOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SignbitOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C1A0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SignbitOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB4804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SinOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AD98;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB4B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SingleGateRNNOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::SingleGateRNNOpHandler::SingleGateRNNOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SingleGateRNNOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB4F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SingleGateRNNGradientOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::SingleGateRNNGradientOpHandler::SingleGateRNNGradientOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SingleGateRNNGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB52AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SinhOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B2E8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SinhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB5644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::SizeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B338;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB59DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::SliceOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B888;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SliceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SoftmaxOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::SoftmaxOpHandler::SoftmaxOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SoftmaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB60FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SortOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::SortOpHandler::SortOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SortOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB6484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::SpaceToBatchOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::SpaceToBatchGenericOpHandler<mlir::mps::SpaceToBatchOp,false>::SpaceToBatchGenericOpHandler((uint64_t)v6, (id *)a1, a2, a3);
  *v6 = &unk_1E0E1D5C0;
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SpaceToBatchOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB681C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::SpaceToDepth2DOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::SpaceToDepth2DGenericOpHandler<mlir::mps::SpaceToDepth2DOp,false>::SpaceToDepth2DGenericOpHandler((uint64_t)v6, (id *)a1, a2, a3);
  *v6 = &unk_1E0E1E890;
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SpaceToDepth2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB6BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::SparseDenseMatMulOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1F010;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SparseDenseMatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB6F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::BaseOpHandler *GPURegionRuntime::createOp<GPU::SplitOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::BaseOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::BaseOpHandler *)operator new();
  GPU::BaseOpHandler::BaseOpHandler(v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B8D8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SplitOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB72E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SquareOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1BD40;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SquareOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SquareRootOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1CF30;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SquareRootOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB7A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

_QWORD *GPURegionRuntime::createOp<GPU::SqueezeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  _QWORD *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (_QWORD *)operator new();
  GPU::BaseReshapeOpHandler<mlir::mps::SqueezeOp>::BaseReshapeOpHandler((uint64_t)v6, a1, a2, a3);
  *v6 = &unk_1E0E1C240;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SqueezeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v6[8];
    v6[8] = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB7DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::StencilOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E250;
  if (*(_BYTE *)(v6 + 40))
    GPU::StencilOpHandler::_createNDArrayMultiaryKernel((GPU::StencilOpHandler *)v6);
  *(_QWORD *)v6 = &unk_1E0E1C290;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StencilOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB8164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::StitchedOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::StitchedOpHandler::StitchedOpHandler((GPURegionRuntime **)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StitchedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB84FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::StridedSliceOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::StridedSliceOpHandler::StridedSliceOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB8884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::StridedSliceGradientOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::StridedSliceGradientOpHandler::StridedSliceGradientOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB8C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::StridedSliceUpdateOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::StridedSliceUpdateOpHandler::StridedSliceUpdateOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceUpdateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB8F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::SubtractOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1C800;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SubtractOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB932C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TanOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1ADE8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB96C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TanhOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B3D8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TanhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB9A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::FromElementsOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::FromElementsOpHandler::FromElementsOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FromElementsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DB9DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ListPopBackOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D1B0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 41) = 0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ListPopBackOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBA184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::ListPushBackOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D390;
  *(_BYTE *)(v6 + 41) = 0;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ListPushBackOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBA520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::TensorToMemrefOpHandler *GPURegionRuntime::createOp<GPU::TensorToMemrefOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::TensorToMemrefOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::TensorToMemrefOpHandler *)operator new();
  GPU::TensorToMemrefOpHandler::TensorToMemrefOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TensorToMemrefOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBA8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TileOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B428;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  if (*(_BYTE *)(v6 + 40))
    GPU::TileOpHandler::_createKernel((GPU::TileOpHandler *)v6, 0);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TileOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBAC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TileGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1D660;
  if (*(_BYTE *)(v6 + 40))
    GPU::TileGradientOpHandler::_createKernel((GPU::TileGradientOpHandler *)v6, 0);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TileGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBB024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TopKOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::TopKOpHandler::TopKOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TopKOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBB3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::TopKGradientOpHandler *GPURegionRuntime::createOp<GPU::TopKGradientOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::TopKGradientOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::TopKGradientOpHandler *)operator new();
  GPU::TopKGradientOpHandler::TopKGradientOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TopKGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBB744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TransposeOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::TransposeOpHandler::TransposeOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TransposeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBBACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::TypeConstraintOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::TypeConstraintOpHandler::TypeConstraintOpHandler((id *)v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TypeConstraintOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBBE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::UpdateRandomStateOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::BaseOpHandler::BaseOpHandler((GPU::BaseOpHandler *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1E660;
  if (*(_BYTE *)(v6 + 40))
    GPU::MultiaryKernelOpHandler<GPU::UpdateRandomStateOpHandler,mlir::mps::UpdateRandomStateOp,MPSNDArrayRandomState,1ul>::_createNDArrayMultiaryKernel(v6);
  *(_QWORD *)v6 = &unk_1E0E1F060;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::UpdateRandomStateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBC20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::VarHandleOpHandler *GPURegionRuntime::createOp<GPU::VarHandleOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::VarHandleOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::VarHandleOpHandler *)operator new();
  GPU::VarHandleOpHandler::VarHandleOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::VarHandleOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBC5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::VariableFromTensorOpHandler *GPURegionRuntime::createOp<GPU::VariableFromTensorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::VariableFromTensorOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::VariableFromTensorOpHandler *)operator new();
  GPU::VariableFromTensorOpHandler::VariableFromTensorOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::VariableFromTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBC92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::WhileOpHandler *GPURegionRuntime::createOp<GPU::WhileOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::WhileOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::WhileOpHandler *)operator new();
  GPU::WhileOpHandler::WhileOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::WhileOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBCCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::XorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1AE38;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::XorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBD04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::XnorOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::GenericDAGOpHandler::GenericDAGOpHandler((id *)v6, a1, a2, a3);
  *(_QWORD *)v6 = &unk_1E0E1B4C8;
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::XnorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBD3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

GPU::YieldOpHandler *GPURegionRuntime::createOp<GPU::YieldOpHandler>(GPURegionRuntime *a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  GPU::YieldOpHandler *v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = (GPU::YieldOpHandler *)operator new();
  GPU::YieldOpHandler::YieldOpHandler(v6, a1, a2, a3);
  if ((*((_DWORD *)a1 + 55) & 1) != 0)
  {
    v31 = (*((_DWORD *)a1 + 55) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::YieldOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)*((_QWORD *)v6 + 8);
    *((_QWORD *)v6 + 8) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>((uint64_t)a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBD76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::createOp<GPU::QuantizedMatMulOpHandler>(uint64_t a1, mlir::Operation *a2, GPU::MPSGraphKernelDAG *a3)
{
  uint64_t v6;
  unint64_t Body;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  mlir::ForwardIterator *v13;
  mlir::UnknownLoc *Context;
  double v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  __int128 __p;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  std::string v29;
  uint64_t v30;
  BOOL v31;

  v6 = operator new();
  GPU::QuantizedMatMulOpHandler::QuantizedMatMulOpHandler((id *)v6, (id *)a1, a2, a3);
  if ((*(_DWORD *)(a1 + 220) & 1) != 0)
  {
    v31 = (*(_DWORD *)(a1 + 220) & 2) == 0;
    v30 = *((_QWORD *)a2 + 3);
    v29.__r_.__value_.__r.__words[0] = llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)a2);
    if (v29.__r_.__value_.__r.__words[0])
    {
      __p = 0uLL;
      v22 = 0;
      Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
      v20[0] = &v31;
      v20[1] = &__p;
      for (i = *(_QWORD *)(Body + 8); i != Body; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint *)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint **)(v9 + 40);
        if (v11 != (mlir::GenericProgramPoint *)(v9 + 32))
        {
          do
          {
            v12 = (mlir::GenericProgramPoint *)*((_QWORD *)v11 + 1);
            mlir::GenericProgramPoint::~GenericProgramPoint(v11);
            mlir::detail::walk<mlir::ForwardIterator>(v13, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::QuantizedMatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v20, 1);
            v11 = v12;
          }
          while (v12 != v10);
        }
      }
      v20[0] = *(_QWORD *)(v29.__r_.__value_.__r.__words[0] + 24);
      Context = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)v20);
      mlir::FusedLoc::get((uint64_t **)__p, (mlir::MLIRContext *)((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3), 0, Context);
    }
    memset(&v29, 0, sizeof(v29));
    DWORD2(__p) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    *(_QWORD *)&__p = &unk_1E0E22B10;
    v28 = &v29;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&__p, 0, 0, 0);
    v15 = mlir::Attribute::print((mlir::Attribute *)&v30, (llvm::raw_ostream *)&__p, 0);
    if (v31)
    {
      if (v23 == v24)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\n", 1uLL);
      else
        *v24++ = 10;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v20);
      mlir::Operation::print(a2, (llvm::raw_ostream *)&__p, (const mlir::OpPrintingFlags *)v20);
    }
    else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0 && v29.__r_.__value_.__l.__size_ >= 0x301)
    {
      std::string::resize(&v29, 0x300uLL, 0);
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v15);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v17;

    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&__p = a2;
  *((_QWORD *)&__p + 1) = v6;
  std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(a1 + 264, (unint64_t)a2, &__p);
  if (*((_QWORD *)&__p + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&__p + 1) + 40))(*((_QWORD *)&__p + 1));
  return v6;
}

void sub_180DBDAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  _Unwind_Resume(a1);
}

void GPURegionRuntime::setupFeedsAndTargets(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  double *v53;
  const double *v54;
  uint64_t v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  const char *v64;
  int v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  id v69;
  id v70;
  char **v71;
  id v72;
  _QWORD v73[4];
  id v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[5];
  id v80;
  uint64_t v81;
  uint64_t v82;
  float64x2x2_t v83;

  v70 = a3;
  v9 = a4;
  v68 = a2;
  v69 = *(id *)(a2 + 8);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v10 = a1[31];
  if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
  {
    v11 = 0;
    v12 = 0;
    v72 = v9;
    v71 = (char **)a5;
    while (1)
    {
      if (v12 >= *(unsigned int *)(v10 + 68))
        goto LABEL_57;
      v15 = *(uint64_t **)(*(_QWORD *)(v10 + 72) + 32 * v12 + 24);
      v79[0] = v15;
      v82 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)v79) + 2);
      v16 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(a1 + 11, &v82);
      if (v16
        && (v81 = v79[0],
            (v17 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v16 + 3, &v81)) != 0))
      {
        v18 = (id)v17[3];
      }
      else
      {
        v18 = 0;
      }
      objc_msgSend(v9, "objectAtIndexedSubscript:", v12, v68);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19 != v20)
        break;
LABEL_6:

      ++v12;
      v10 = a1[31];
      if ((*(_BYTE *)(v10 + 46) & 0x80) == 0)
        goto LABEL_57;
    }
    if (!v18)
    {
      objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      BaseRuntime::setTensorDataToDataMap((uint64_t)a1, v15, v37);

      objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v38, "tensorDataType");

      if (v39 != 1)
        goto LABEL_6;
      v40 = (void *)a1[17];
      objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v14);
      goto LABEL_5;
    }
    objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
    v21 = (id)objc_claimAutoreleasedReturnValue();

    if (v18 == v21)
      goto LABEL_6;
    objc_msgSend(v9, "objectAtIndexedSubscript:", v12);
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = v18;
    v24 = v23;
    v25 = a5[2];
    if ((unint64_t)v11 < v25)
    {
      *(_QWORD *)v11 = v23;
      *((_QWORD *)v11 + 1) = v22;
      v13 = v11 + 16;
LABEL_4:
      a5[1] = v13;
      v14 = 0;
      v11 = v13;
LABEL_5:

      goto LABEL_6;
    }
    v26 = (char *)*a5;
    v27 = (uint64_t)&v11[-*a5];
    v28 = (v27 >> 4) + 1;
    if (v28 >> 60)
      std::vector<long>::__throw_length_error[abi:ne180100]();
    v29 = v25 - (_QWORD)v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v31 = (char *)operator new(16 * v30);
    v32 = &v31[16 * (v27 >> 4)];
    v33 = &v31[16 * v30];
    *(_QWORD *)v32 = v24;
    *((_QWORD *)v32 + 1) = v22;
    v13 = v32 + 16;
    v34 = (char *)(v11 - v26);
    if (v11 == v26)
    {
      v9 = v72;
      *v71 = v32;
      v71[1] = v13;
      v71[2] = v33;
      a5 = v71;
      if (!v11)
        goto LABEL_4;
      goto LABEL_56;
    }
    v35 = v34 - 16;
    if ((unint64_t)(v34 - 16) >= 0x230)
    {
      v41 = v11 - 16 - v26;
      v42 = v41 & 0xFFFFFFFFFFFFFFF0;
      v9 = v72;
      a5 = v71;
      if (&v11[-(v41 & 0xFFFFFFFFFFFFFFF0) - 16] <= v11 - 16
        && &v31[v27 - 16 - v42] <= &v31[v27 - 16]
        && (v43 = v11 - 8, &v11[-v42 - 8] <= v11 - 8)
        && &v31[v27 - 8 - v42] <= &v31[v27 - 8]
        && ((v44 = v41 & 0xFFFFFFFFFFFFFFF0,
             v45 = (unint64_t)&v11[-v44 - 16],
             v46 = (unint64_t)&v31[v27 - v44 - 16],
             &v43[-v44] < v32)
          ? (v47 = &v31[v27 - v44 - 8] >= v11)
          : (v47 = 1),
            v47 ? (v48 = 0) : (v48 = 1),
            v46 < (unint64_t)v43 ? (v49 = v45 >= (unint64_t)&v31[v27 - 8]) : (v49 = 1),
            v49))
      {
        v36 = v11;
        if ((v48 & 1) == 0)
        {
          v50 = ((unint64_t)v35 >> 4) + 1;
          v51 = 16 * (v50 & 0x1FFFFFFFFFFFFFFELL);
          v52 = &v32[-v51];
          v36 = &v11[-v51];
          v53 = (double *)(v32 - 32);
          v54 = (const double *)(v11 - 32);
          v55 = v50 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v83 = vld2q_f64(v54);
            *(_OWORD *)v54 = 0uLL;
            *((_OWORD *)v54 + 1) = 0uLL;
            v54 -= 4;
            vst2q_f64(v53, v83);
            v53 -= 4;
            v55 -= 2;
          }
          while (v55);
          v32 = v52;
          if (v50 == (v50 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_53:
            *a5 = v52;
            a5[1] = v13;
            a5[2] = v33;
            do
            {

              v57 = (void *)*((_QWORD *)v11 - 2);
              v11 -= 16;

            }
            while (v11 != v26);
            v11 = v26;
            if (!v26)
              goto LABEL_4;
LABEL_56:
            operator delete(v11);
            goto LABEL_4;
          }
        }
      }
      else
      {
        v36 = v11;
      }
    }
    else
    {
      v36 = v11;
      v9 = v72;
      a5 = v71;
    }
    v52 = v32;
    do
    {
      v56 = *((_OWORD *)v36 - 1);
      v36 -= 16;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_OWORD *)v52 - 1) = v56;
      v52 -= 16;
    }
    while (v36 != v26);
    goto LABEL_53;
  }
LABEL_57:
  v79[0] = 0;
  v79[1] = v79;
  v79[2] = 0x3032000000;
  v79[3] = __Block_byref_object_copy_;
  v79[4] = __Block_byref_object_dispose_;
  v80 = 0;
  v58 = a1[29];
  v59 = *(unsigned int *)(v58 + 44);
  if ((v59 & 0x7FFFFF) == 0)
  {
    v64 = "index < numRegions && \"invalid region index\"";
    v65 = 666;
    v66 = "Operation.h";
    v67 = "getRegion";
    goto LABEL_65;
  }
  v60 = v58 + 16 * ((v59 >> 23) & 1) + ((v59 >> 21) & 0x7F8) + 64;
  if (v60 >= 0xFFFFFFFFFFFFFFF9)
  {
    v64 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
    v65 = 191;
    v66 = "Alignment.h";
    v67 = "alignAddr";
LABEL_65:
    __assert_rtn(v67, v66, v65, v64);
  }
  v61 = *(_QWORD *)(((v60 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v58 + 40) + 8);
  if (v61)
    v62 = v61 - 8;
  else
    v62 = 0;
  v73[0] = MEMORY[0x1E0C809B0];
  v73[1] = 3221225472;
  v73[2] = ___ZN16GPURegionRuntime20setupFeedsAndTargetsEPN3GPU16EncodeDescriptorEP7NSArrayIP18MPSGraphTensorDataES7__block_invoke;
  v73[3] = &unk_1E0E76810;
  v76 = a1;
  v77 = v62;
  v63 = v69;
  v74 = v63;
  v75 = v79;
  v78 = v68;
  objc_msgSend(v70, "enumerateObjectsUsingBlock:", v73);

  _Block_object_dispose(v79, 8);
}

void sub_180DBE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void **v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a24, 8);
  std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::~vector[abi:ne180100](v29);

  _Unwind_Resume(a1);
}

void BaseRuntime::setTensorDataToDataMap(uint64_t a1, uint64_t *a2, void *a3)
{
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t *v7;
  uint64_t *v8;

  v7 = a2;
  v6 = a3;
  v5 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v7) + 2);
  v8 = &v5;
  v4 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(a1 + 88, &v5, (uint64_t)&std::piecewise_construct, &v8);
  v8 = v7;
  std::__hash_table<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>>>::__emplace_unique_key_args<void *,void *,MPSGraphTensorData * {__strong}&>((uint64_t)(v4 + 24), (uint64_t *)&v8, &v8, &v6);

}

void sub_180DBE28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_180DBE2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_180DBE2B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZN16GPURegionRuntime20setupFeedsAndTargetsEPN3GPU16EncodeDescriptorEP7NSArrayIP18MPSGraphTensorDataES7__block_invoke(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  uint64_t *v7;
  MPSGraphTensorData *v8;
  MPSGraphTensorData *v9;
  _QWORD *v10;
  uint64_t v11;
  MPSGraphTensorData *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t AttrData;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  id v24;
  void *v25;
  MPSGraphTensorData *v26;
  _QWORD *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43[4];
  __int16 v44;
  uint64_t v45[4];
  __int16 v46;
  _QWORD v47[5];
  _QWORD v48[3];

  v48[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 48) + 8 * a3);
  v8 = (MPSGraphTensorData *)v5;
  v9 = v8;
  v10 = (_QWORD *)*v7;
  if (*v7)
  {
    LODWORD(v11) = 0;
    do
    {
      LODWORD(v11) = v11 + 1;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  v11 = (int)v11;
  v12 = v8;
  if (-[MPSGraphTensorData tensorDataType](v8, "tensorDataType") == 1)
  {
    v13 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_32;
    v14 = 0;
    v15 = (_QWORD *)*v7;
    do
    {
      v15 = (_QWORD *)*v15;
      --v14;
    }
    while (v15);
    if (!v14)
      goto LABEL_32;
    v16 = 0;
    v42 = -v14;
    do
    {
      v17 = *(_QWORD *)(v13[2] + 48);
      v18 = *(void **)(v17 + 16);
      if (v18 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v47[0] = *(_QWORD *)(v17 + 8);
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v47);
        if (v20 == 25)
        {
          v21 = *(_QWORD *)AttrData == 0x616572632E73706DLL && *(_QWORD *)(AttrData + 8) == 0x75747865745F6574;
          v22 = v21 && *(_QWORD *)(AttrData + 16) == 0x6F736E65745F6572;
          if (v22 && *(_BYTE *)(AttrData + 24) == 114)
          {
            v46 = 1283;
            v45[0] = (uint64_t)"classof on '";
            v45[2] = (uint64_t)"mps.create_texture_tensor";
            v45[3] = 25;
            v43[0] = (uint64_t)"' failed due to the operation not being registered";
            v44 = 259;
            llvm::operator+(v45, v43, (uint64_t)v47);
            llvm::report_fatal_error((llvm::Twine *)v47, 1);
          }
        }
      }
      else if (v18 == &mlir::detail::TypeIDResolver<mlir::mps::CreateTextureTensorOp,void>::id)
      {
        ++v16;
      }
      v13 = (_QWORD *)*v13;
    }
    while (v13);
    v11 = (int)v11;
    if (v16)
    {
      v12 = v9;
      if (v16 != v42)
      {
        v24 = -[MPSGraphTensorData mpsndarrayWithCommandBuffer:](v9, "mpsndarrayWithCommandBuffer:", *(_QWORD *)(a1 + 32));
        v12 = v9;
      }
    }
    else
    {
LABEL_32:
      -[MPSGraphTensorData mpsndarrayWithCommandBuffer:](v9, "mpsndarrayWithCommandBuffer:", *(_QWORD *)(a1 + 32), v42);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = -[MPSGraphTensorData initWithMPSNDArray:]([MPSGraphTensorData alloc], "initWithMPSNDArray:", v25);

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v25, "setReadCount:", v11);

      v12 = v26;
    }
  }
  v47[0] = v7;
  v45[0] = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)v47) + 2);
  v27 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(v6 + 88), v45);
  if (v27
    && (v43[0] = v47[0],
        (v28 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v27 + 3, v43)) != 0)&& (v29 = (id)v28[3]) != 0)
  {
    v30 = v29;
    -[MPSGraphTensorData mpsndarrayWithCommandBuffer:](v9, "mpsndarrayWithCommandBuffer:", *(_QWORD *)(a1 + 32));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v31, "setReadCount:", v11);
    v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v32)
    {
      v33 = objc_alloc(MEMORY[0x1E0CC7030]);
      objc_msgSend(*(id *)(a1 + 32), "device");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v33, "initWithDevice:", v34);
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v37 = *(void **)(v36 + 40);
      *(_QWORD *)(v36 + 40) = v35;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setLabel:", CFSTR("argAsReturnCopy"));
      v32 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    GPU::EncodeDescriptor::getcomputeEncoder(*(GPU::EncodeDescriptor **)(a1 + 64));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v48[0] = v31;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "mpsndarray");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "encodeToMPSCommandEncoder:commandBuffer:sourceArrays:destinationArray:", v38, v39, v40, v41);

  }
  else
  {
    BaseRuntime::setTensorDataToDataMap(v6, v7, v12);
  }

}

void sub_180DBE714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id GPU::EncodeDescriptor::getcomputeEncoder(GPU::EncodeDescriptor *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 9);
  if (!v2)
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6DE8]), "initWithCommandBuffer:withDispatchType:", *((_QWORD *)this + 1), 0);
    v4 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;

    v5 = (void *)*((_QWORD *)this + 11);
    v2 = (void *)*((_QWORD *)this + 9);
    if (v5)
    {
      objc_msgSend(v5, "wrapComputeEncoder:", *((_QWORD *)this + 9));
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = (void *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v6;

      v2 = (void *)*((_QWORD *)this + 9);
    }
  }
  if (*((_QWORD *)this + 10))
  {
    objc_msgSend(v2, "setLabel:");
    v2 = (void *)*((_QWORD *)this + 9);
  }
  return v2;
}

void **std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::~vector[abi:ne180100](void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        v5 = *(v3 - 2);
        v3 -= 2;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

id GPURegionRuntime::evaluateOps(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, char a7, uint64_t a8, _BYTE *a9)
{
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id *v21;
  id v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  llvm *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  void *v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *v37;
  void *v38;
  unint64_t v39;
  llvm::raw_ostream *v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  llvm::raw_ostream *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  _WORD *v51;
  llvm::raw_ostream *v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  llvm::raw_ostream *v55;
  void *v56;
  void *v57;
  const char *v58;
  size_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  llvm::raw_ostream *v67;
  const void *v68;
  unint64_t v69;
  _WORD *v70;
  llvm::raw_ostream *v71;
  uint64_t v72;
  uint64_t v73;
  mlir::Operation **v74;
  uint64_t v75;
  mlir::Operation *v76;
  llvm::raw_ostream *v77;
  uint64_t v78;
  const mlir::OpPrintingFlags *v79;
  _BYTE *v80;
  _BYTE *v81;
  int v82;
  llvm::raw_ostream *v83;
  _QWORD *v84;
  _OWORD *v85;
  const char *v86;
  size_t v87;
  __int128 v88;
  uint64_t v89;
  llvm::raw_ostream *v90;
  void *v91;
  mlir::Operation **v92;
  uint64_t v93;
  mlir::Operation *v94;
  llvm::raw_ostream *v95;
  uint64_t v96;
  const mlir::OpPrintingFlags *v97;
  _BYTE *v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  llvm::raw_ostream *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  mlir::Operation **v105;
  uint64_t v106;
  mlir::Operation *v107;
  llvm::raw_ostream *v108;
  uint64_t v109;
  const mlir::OpPrintingFlags *v110;
  _BYTE *v111;
  llvm::raw_ostream *v112;
  uint64_t v113;
  llvm::raw_ostream *v114;
  _BYTE *v115;
  llvm::raw_ostream *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  id v121;
  id v122;
  void *v123;
  id v124;
  id v125;
  id v126;
  _QWORD v127[4];
  id v128;
  _QWORD v129[4];
  id v130;
  _QWORD v131[3];
  char v132;
  char v133;
  __int128 v134;
  __int128 v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  _BYTE v140[48];

  v125 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  if (a9)
    *a9 = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  v18 = *(void **)(a1 + 208);
  v19 = v17;
  v20 = v18;
  v21 = (id *)v16;
  v131[0] = &unk_1E0E04CC0;
  v131[1] = v19;
  v131[2] = v21;
  v132 = a6;
  v133 = a7;
  v134 = 0u;
  v135 = 0u;
  v136 = 1065353216;
  v137 = 0;
  v138 = 0;
  v139 = v20;
  v22 = v21[1];
  v126 = v21[2];
  v23 = MEMORY[0x1E0C809B0];
  v129[0] = MEMORY[0x1E0C809B0];
  v129[1] = 3221225472;
  v129[2] = ___ZN16GPURegionRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPb_block_invoke;
  v129[3] = &unk_1E0E76838;
  v24 = v19;
  v130 = v24;
  v25 = v125;
  objc_msgSend(v22, "enumerateObjectsUsingBlock:", v129);
  GPURegionRuntime::evaluateOps(a1, (GPU::EncodeDescriptor *)v131, v125, v15);
  v124 = (id)objc_claimAutoreleasedReturnValue();
  v123 = v15;
  v127[0] = v23;
  v127[1] = 3221225472;
  v127[2] = ___ZN16GPURegionRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPb_block_invoke_2;
  v127[3] = &unk_1E0E76860;
  v26 = v24;
  v128 = v26;
  v27 = (llvm *)objc_msgSend(v126, "enumerateObjectsUsingBlock:", v127);
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_128;
  v28 = *(_QWORD *)(a1 + 424);
  if (!v28)
    goto LABEL_128;
  v121 = v26;
  v122 = v22;
  v30 = *(_QWORD *)(v28 + 24);
  v29 = *(_QWORD *)(v28 + 32);
  v32 = *(_QWORD *)(v28 + 8);
  v31 = *(_QWORD *)(v28 + 16);
  v33 = (llvm::raw_ostream *)llvm::dbgs(v27);
  v34 = (void *)*((_QWORD *)v33 + 4);
  if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 0x1CuLL)
  {
    qmemcpy(v34, "============================\n", 29);
    *((_QWORD *)v33 + 4) += 29;
  }
  else
  {
    v33 = llvm::raw_ostream::write(v33, "============================\n", 0x1DuLL);
  }
  v35 = (llvm::raw_ostream *)llvm::dbgs(v33);
  v36 = (void *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x19uLL)
  {
    qmemcpy(v36, "Runtime Execution Report:\n", 26);
    *((_QWORD *)v35 + 4) += 26;
  }
  else
  {
    v35 = llvm::raw_ostream::write(v35, "Runtime Execution Report:\n", 0x1AuLL);
  }
  v37 = (llvm::raw_ostream *)llvm::dbgs(v35);
  v38 = (void *)*((_QWORD *)v37 + 4);
  if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0xDuLL)
  {
    qmemcpy(v38, "Layers Count: ", 14);
    *((_QWORD *)v37 + 4) += 14;
  }
  else
  {
    v37 = llvm::raw_ostream::write(v37, "Layers Count: ", 0xEuLL);
  }
  v39 = v29 + v30;
  v40 = llvm::raw_ostream::operator<<(v37, v29 + v30);
  v41 = (_WORD *)*((_QWORD *)v40 + 4);
  if (*((_QWORD *)v40 + 3) - (_QWORD)v41 > 1uLL)
  {
    *v41 = 8250;
    v43 = *((_QWORD *)v40 + 3);
    v42 = *((_QWORD *)v40 + 4) + 2;
    *((_QWORD *)v40 + 4) = v42;
    if ((unint64_t)(v43 - v42) > 4)
      goto LABEL_16;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, ": ", 2uLL);
    v42 = *((_QWORD *)v40 + 4);
    if ((unint64_t)(*((_QWORD *)v40 + 3) - v42) > 4)
    {
LABEL_16:
      *(_BYTE *)(v42 + 4) = 32;
      *(_DWORD *)v42 = 977620545;
      *((_QWORD *)v40 + 4) += 5;
      goto LABEL_19;
    }
  }
  v40 = llvm::raw_ostream::write(v40, "ANE: ", 5uLL);
LABEL_19:
  v44 = llvm::raw_ostream::operator<<(v40, *(_QWORD *)(v28 + 24));
  v45 = (_WORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
  {
    *v45 = 10272;
    *((_QWORD *)v44 + 4) += 2;
  }
  else
  {
    v44 = llvm::raw_ostream::write(v44, " (", 2uLL);
  }
  v46 = llvm::raw_ostream::operator<<(v44, (double)v30 * 100.0 / (double)v39);
  v47 = (_DWORD *)*((_QWORD *)v46 + 4);
  if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 3uLL)
  {
    *v47 = 539765029;
    v49 = *((_QWORD *)v46 + 3);
    v48 = *((_QWORD *)v46 + 4) + 4;
    *((_QWORD *)v46 + 4) = v48;
    if ((unint64_t)(v49 - v48) > 4)
      goto LABEL_24;
  }
  else
  {
    v46 = llvm::raw_ostream::write(v46, "%), ", 4uLL);
    v48 = *((_QWORD *)v46 + 4);
    if ((unint64_t)(*((_QWORD *)v46 + 3) - v48) > 4)
    {
LABEL_24:
      *(_BYTE *)(v48 + 4) = 32;
      *(_DWORD *)v48 = 978669639;
      *((_QWORD *)v46 + 4) += 5;
      goto LABEL_27;
    }
  }
  v46 = llvm::raw_ostream::write(v46, "GPU: ", 5uLL);
LABEL_27:
  v50 = llvm::raw_ostream::operator<<(v46, *(_QWORD *)(v28 + 32));
  v51 = (_WORD *)*((_QWORD *)v50 + 4);
  if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 1uLL)
  {
    *v51 = 10272;
    *((_QWORD *)v50 + 4) += 2;
  }
  else
  {
    v50 = llvm::raw_ostream::write(v50, " (", 2uLL);
  }
  v52 = llvm::raw_ostream::operator<<(v50, (double)v29 * 100.0 / (double)v39);
  v53 = *((_QWORD *)v52 + 4);
  if ((unint64_t)(*((_QWORD *)v52 + 3) - v53) > 2)
  {
    *(_BYTE *)(v53 + 2) = 10;
    *(_WORD *)v53 = 10533;
    *((_QWORD *)v52 + 4) += 3;
  }
  else
  {
    v52 = llvm::raw_ostream::write(v52, "%)\n", 3uLL);
  }
  v54 = (llvm::raw_ostream *)llvm::dbgs(v52);
  if (v32)
  {
    v55 = llvm::raw_ostream::operator<<(v54, v32);
    v56 = (void *)*((_QWORD *)v55 + 4);
    if (*((_QWORD *)v55 + 3) - (_QWORD)v56 > 0x2AuLL)
    {
      qmemcpy(v56, " MPS operations couldn't be placed on ANE.\n", 43);
      *((_QWORD *)v55 + 4) += 43;
    }
    else
    {
      v55 = llvm::raw_ostream::write(v55, " MPS operations couldn't be placed on ANE.\n", 0x2BuLL);
    }
    v54 = (llvm::raw_ostream *)llvm::dbgs(v55);
    if (v32 == v31)
    {
      v60 = (void *)*((_QWORD *)v54 + 4);
      v58 = "All unplaced operations are typechangers.\n";
      if (*((_QWORD *)v54 + 3) - (_QWORD)v60 >= 0x2AuLL)
      {
        qmemcpy(v60, "All unplaced operations are typechangers.\n", 42);
        *((_QWORD *)v54 + 4) += 42;
        if (!*(_DWORD *)(v28 + 112))
          goto LABEL_87;
        goto LABEL_45;
      }
      v59 = 42;
    }
    else
    {
      v54 = llvm::raw_ostream::operator<<(v54, v32 - v31);
      v61 = (void *)*((_QWORD *)v54 + 4);
      v58 = " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n";
      if (*((_QWORD *)v54 + 3) - (_QWORD)v61 > 0x43uLL)
      {
        qmemcpy(v61, " MPS operations (excluding TypeChangers) couldn't be placed on ANE.\n", 68);
        *((_QWORD *)v54 + 4) += 68;
        if (!*(_DWORD *)(v28 + 112))
          goto LABEL_87;
        goto LABEL_45;
      }
      v59 = 68;
    }
  }
  else
  {
    v57 = (void *)*((_QWORD *)v54 + 4);
    v58 = "All MPS operations were placed on ANE.\n";
    if (*((_QWORD *)v54 + 3) - (_QWORD)v57 >= 0x27uLL)
    {
      qmemcpy(v57, "All MPS operations were placed on ANE.\n", 39);
      *((_QWORD *)v54 + 4) += 39;
      if (!*(_DWORD *)(v28 + 112))
        goto LABEL_87;
      goto LABEL_45;
    }
    v59 = 39;
  }
  v54 = llvm::raw_ostream::write(v54, v58, v59);
  if (!*(_DWORD *)(v28 + 112))
    goto LABEL_87;
LABEL_45:
  v54 = (llvm::raw_ostream *)llvm::dbgs(v54);
  v62 = (void *)*((_QWORD *)v54 + 4);
  if (*((_QWORD *)v54 + 3) - (_QWORD)v62 > 0x14uLL)
  {
    qmemcpy(v62, "Unplaced operations:\n", 21);
    *((_QWORD *)v54 + 4) += 21;
    if (!*(_DWORD *)(v28 + 112))
      goto LABEL_87;
  }
  else
  {
    v54 = llvm::raw_ostream::write(v54, "Unplaced operations:\n", 0x15uLL);
    if (!*(_DWORD *)(v28 + 112))
      goto LABEL_87;
  }
  v63 = *(unsigned int *)(v28 + 120);
  if ((_DWORD)v63)
  {
    v64 = 80 * v63;
    v65 = *(_QWORD *)(v28 + 104);
    while (*(_QWORD *)v65 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v65 += 80;
      v64 -= 80;
      if (!v64)
        goto LABEL_87;
    }
  }
  else
  {
    v65 = *(_QWORD *)(v28 + 104);
  }
  v66 = *(_QWORD *)(v28 + 104) + 80 * v63;
  if (v65 != v66)
  {
    while (1)
    {
      v67 = (llvm::raw_ostream *)llvm::dbgs(v54);
      v68 = *(const void **)v65;
      v69 = *(_QWORD *)(v65 + 8);
      v70 = (_WORD *)*((_QWORD *)v67 + 4);
      if (v69 <= *((_QWORD *)v67 + 3) - (_QWORD)v70)
      {
        if (v69)
        {
          memcpy(v70, v68, *(_QWORD *)(v65 + 8));
          v70 = (_WORD *)(*((_QWORD *)v67 + 4) + v69);
          *((_QWORD *)v67 + 4) = v70;
        }
      }
      else
      {
        v67 = llvm::raw_ostream::write(v67, (const char *)v68, *(_QWORD *)(v65 + 8));
        v70 = (_WORD *)*((_QWORD *)v67 + 4);
      }
      if (*((_QWORD *)v67 + 3) - (_QWORD)v70 > 1uLL)
      {
        *v70 = 10272;
        *((_QWORD *)v67 + 4) += 2;
      }
      else
      {
        v67 = llvm::raw_ostream::write(v67, " (", 2uLL);
      }
      v71 = llvm::raw_ostream::operator<<(v67, *(unsigned int *)(v65 + 24));
      v72 = *((_QWORD *)v71 + 4);
      if ((unint64_t)(*((_QWORD *)v71 + 3) - v72) > 2)
      {
        *(_BYTE *)(v72 + 2) = 10;
        *(_WORD *)v72 = 14889;
        *((_QWORD *)v71 + 4) += 3;
        v73 = *(unsigned int *)(v65 + 24);
        if (!(_DWORD)v73)
          goto LABEL_78;
      }
      else
      {
        v71 = llvm::raw_ostream::write(v71, "):\n", 3uLL);
        v73 = *(unsigned int *)(v65 + 24);
        if (!(_DWORD)v73)
          goto LABEL_78;
      }
      v74 = *(mlir::Operation ***)(v65 + 16);
      v75 = 8 * v73;
      do
      {
        v76 = *v74;
        v77 = (llvm::raw_ostream *)llvm::dbgs(v71);
        v78 = mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v140);
        v79 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope(v78);
        v71 = mlir::Operation::print(v76, v77, v79);
        v80 = (_BYTE *)*((_QWORD *)v77 + 4);
        if (*((_BYTE **)v77 + 3) == v80)
        {
          v71 = llvm::raw_ostream::write(v77, "\n", 1uLL);
        }
        else
        {
          *v80 = 10;
          ++*((_QWORD *)v77 + 4);
        }
        ++v74;
        v75 -= 8;
      }
      while (v75);
LABEL_78:
      v54 = (llvm::raw_ostream *)llvm::dbgs(v71);
      v81 = (_BYTE *)*((_QWORD *)v54 + 4);
      if (*((_BYTE **)v54 + 3) == v81)
      {
        v54 = llvm::raw_ostream::write(v54, "\n", 1uLL);
      }
      else
      {
        *v81 = 10;
        ++*((_QWORD *)v54 + 4);
      }
      v65 += 80;
      if (v65 > v66)
        __assert_rtn("AdvancePastEmptyBuckets", "DenseMap.h", 1309, "Ptr <= End");
      if (v65 != v66)
      {
        while (*(_QWORD *)v65 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v65 += 80;
          if (v65 == v66)
            goto LABEL_87;
        }
        if (v65 != v66)
          continue;
      }
      break;
    }
  }
LABEL_87:
  v82 = *(_DWORD *)(v28 + 48);
  if (v82 == 1)
  {
    v83 = (llvm::raw_ostream *)llvm::dbgs(v54);
    v84 = (_QWORD *)((char *)v83 + 32);
    v85 = (_OWORD *)*((_QWORD *)v83 + 4);
    v86 = "Found exactly one ANERegionCall operation.\n";
    if (*((_QWORD *)v83 + 3) - (_QWORD)v85 < 0x2BuLL)
      goto LABEL_90;
    goto LABEL_92;
  }
  if (!v82)
  {
    v83 = (llvm::raw_ostream *)llvm::dbgs(v54);
    v84 = (_QWORD *)((char *)v83 + 32);
    v85 = (_OWORD *)*((_QWORD *)v83 + 4);
    v86 = "Couldn't find any ANERegionCall operation.\n";
    if (*((_QWORD *)v83 + 3) - (_QWORD)v85 < 0x2BuLL)
    {
LABEL_90:
      v87 = 43;
      goto LABEL_96;
    }
LABEL_92:
    v88 = *((_OWORD *)v86 + 1);
    *v85 = *(_OWORD *)v86;
    v85[1] = v88;
    *(_OWORD *)((char *)v85 + 27) = *(_OWORD *)(v86 + 27);
    *v84 += 43;
    v89 = *(unsigned int *)(v28 + 48);
    if (!(_DWORD)v89)
      goto LABEL_103;
    goto LABEL_97;
  }
  v90 = (llvm::raw_ostream *)llvm::dbgs(v54);
  v83 = llvm::raw_ostream::operator<<(v90, *(unsigned int *)(v28 + 48));
  v91 = (void *)*((_QWORD *)v83 + 4);
  v86 = " ANERegionCall operations found.\n";
  if (*((_QWORD *)v83 + 3) - (_QWORD)v91 > 0x20uLL)
  {
    qmemcpy(v91, " ANERegionCall operations found.\n", 33);
    *((_QWORD *)v83 + 4) += 33;
    v89 = *(unsigned int *)(v28 + 48);
    if (!(_DWORD)v89)
      goto LABEL_103;
    goto LABEL_97;
  }
  v87 = 33;
LABEL_96:
  v83 = llvm::raw_ostream::write(v83, v86, v87);
  v89 = *(unsigned int *)(v28 + 48);
  if (!(_DWORD)v89)
    goto LABEL_103;
LABEL_97:
  v92 = *(mlir::Operation ***)(v28 + 40);
  v93 = 8 * v89;
  do
  {
    v94 = *v92;
    v95 = (llvm::raw_ostream *)llvm::dbgs(v83);
    v96 = mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v140);
    v97 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope(v96);
    v83 = mlir::Operation::print(v94, v95, v97);
    v98 = (_BYTE *)*((_QWORD *)v95 + 4);
    if (*((_BYTE **)v95 + 3) == v98)
    {
      v83 = llvm::raw_ostream::write(v95, "\n", 1uLL);
    }
    else
    {
      *v98 = 10;
      ++*((_QWORD *)v95 + 4);
    }
    ++v92;
    v93 -= 8;
  }
  while (v93);
LABEL_103:
  if (*(_DWORD *)(v28 + 136))
  {
    v99 = (llvm::raw_ostream *)llvm::dbgs(v83);
    v100 = (_BYTE *)*((_QWORD *)v99 + 4);
    if (*((_BYTE **)v99 + 3) == v100)
    {
      v99 = llvm::raw_ostream::write(v99, "\n", 1uLL);
    }
    else
    {
      *v100 = 10;
      ++*((_QWORD *)v99 + 4);
    }
    v101 = (llvm::raw_ostream *)llvm::dbgs(v99);
    v102 = *((_QWORD *)v101 + 4);
    if ((unint64_t)(*((_QWORD *)v101 + 3) - v102) > 5)
    {
      *(_WORD *)(v102 + 4) = 8292;
      *(_DWORD *)v102 = 1853189958;
      *((_QWORD *)v101 + 4) += 6;
    }
    else
    {
      v101 = llvm::raw_ostream::write(v101, "Found ", 6uLL);
    }
    v83 = llvm::raw_ostream::operator<<(v101, *(unsigned int *)(v28 + 136));
    v103 = (void *)*((_QWORD *)v83 + 4);
    if (*((_QWORD *)v83 + 3) - (_QWORD)v103 <= 0x2DuLL)
    {
      v83 = llvm::raw_ostream::write(v83, " ops that triggered an extra copy at runtime:\n", 0x2EuLL);
      v104 = *(unsigned int *)(v28 + 136);
      if (!(_DWORD)v104)
        goto LABEL_119;
LABEL_114:
      v105 = *(mlir::Operation ***)(v28 + 128);
      v106 = 8 * v104;
      do
      {
        v107 = *v105;
        v108 = (llvm::raw_ostream *)llvm::dbgs(v83);
        v109 = mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v140);
        v110 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope(v109);
        v83 = mlir::Operation::print(v107, v108, v110);
        v111 = (_BYTE *)*((_QWORD *)v108 + 4);
        if (*((_BYTE **)v108 + 3) == v111)
        {
          v83 = llvm::raw_ostream::write(v108, "\n", 1uLL);
        }
        else
        {
          *v111 = 10;
          ++*((_QWORD *)v108 + 4);
        }
        ++v105;
        v106 -= 8;
      }
      while (v106);
      goto LABEL_119;
    }
    qmemcpy(v103, " ops that triggered an extra copy at runtime:\n", 46);
    *((_QWORD *)v83 + 4) += 46;
    v104 = *(unsigned int *)(v28 + 136);
    if ((_DWORD)v104)
      goto LABEL_114;
  }
LABEL_119:
  v112 = (llvm::raw_ostream *)llvm::dbgs(v83);
  v113 = *((_QWORD *)v112 + 4);
  if ((unint64_t)(*((_QWORD *)v112 + 3) - v113) > 0x13)
  {
    *(_DWORD *)(v113 + 16) = 540701806;
    *(_OWORD *)v113 = *(_OWORD *)"Runtime Wait count: ";
    *((_QWORD *)v112 + 4) += 20;
  }
  else
  {
    v112 = llvm::raw_ostream::write(v112, "Runtime Wait count: ", 0x14uLL);
  }
  v114 = llvm::raw_ostream::operator<<(v112, *(_QWORD *)(v28 + 192));
  v115 = (_BYTE *)*((_QWORD *)v114 + 4);
  if (*((_BYTE **)v114 + 3) == v115)
  {
    v114 = llvm::raw_ostream::write(v114, "\n", 1uLL);
  }
  else
  {
    *v115 = 10;
    ++*((_QWORD *)v114 + 4);
  }
  v116 = (llvm::raw_ostream *)llvm::dbgs(v114);
  v117 = (void *)*((_QWORD *)v116 + 4);
  if (*((_QWORD *)v116 + 3) - (_QWORD)v117 > 0x1DuLL)
  {
    qmemcpy(v117, "============================\n\n", 30);
    *((_QWORD *)v116 + 4) += 30;
    v118 = a1 + 424;
    v119 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    v25 = v125;
    v26 = v121;
    v22 = v122;
    if (!v119)
      goto LABEL_128;
    goto LABEL_127;
  }
  llvm::raw_ostream::write(v116, "============================\n\n", 0x1EuLL);
  v118 = a1 + 424;
  v119 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  v25 = v125;
  v26 = v121;
  v22 = v122;
  if (v119)
LABEL_127:
    std::default_delete<GPU::RuntimeExecutionReport>::operator()[abi:ne180100](v118, v119);
LABEL_128:

  GPU::EncodeDescriptor::~EncodeDescriptor((GPU::EncodeDescriptor *)v131);
  std::mutex::unlock((std::mutex *)(a1 + 144));

  return v124;
}

void sub_180DBF59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, std::mutex *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29)
{

  GPU::EncodeDescriptor::~EncodeDescriptor((GPU::EncodeDescriptor *)&a29);
  std::mutex::unlock(a16);

  _Unwind_Resume(a1);
}

uint64_t ___ZN16GPURegionRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPb_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "encodeWaitForEvent:value:", *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

id GPURegionRuntime::evaluateOps(uint64_t a1, GPU::EncodeDescriptor *a2, void *a3, void *a4)
{
  GPU::EncodeDescriptor *v5;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t i;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t InterfaceFor;
  mlir::MLIRContext *Context;
  void *v34;
  void *v35;
  void *v36;
  mlir::MLIRContext *v37;
  id v38;
  uint64_t MLIRElementType;
  uint64_t **MLIRType;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  _QWORD *ArgAttrsAttr;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t NumElements;
  unsigned int IntOrFloatBitWidth;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  unint64_t v71;
  const char *v72;
  const char *v73;
  int v74;
  void *v75;
  void *v76;
  BOOL v77;
  uint64_t v78;
  uint64_t **v79;
  mlir::MLIRContext *v80;
  void *v81;
  void *v82;
  void *v83;
  mlir::MLIRContext *v84;
  id v85;
  uint64_t v86;
  uint64_t **v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  mlir::GenericProgramPoint *v95;
  mlir::GenericProgramPoint *v96;
  mlir::GenericProgramPoint *v97;
  mlir::ForwardIterator *v98;
  void *v99;
  unint64_t v100;
  void *v101;
  void *v102;
  uint64_t *j;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t k;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  unint64_t v115;
  const char *v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  mlir::MLIRContext *v127;
  void *v128;
  void *v129;
  void *v130;
  mlir::MLIRContext *v131;
  id v132;
  uint64_t v133;
  uint64_t **v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  mlir::GenericProgramPoint *v139;
  mlir::GenericProgramPoint *v140;
  mlir::GenericProgramPoint *v141;
  mlir::ForwardIterator *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  mlir::GenericProgramPoint **v146;
  uint64_t v147;
  uint64_t v148;
  void **v149;
  _QWORD *v150;
  _QWORD *v151;
  id v152;
  void *v153;
  void *v154;
  id v155;
  void *v156;
  void *v157;
  unint64_t m;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  GPU::EncodeDescriptor *v175;
  void *v176;
  void *v177;
  void *v178;
  GPU::EncodeDescriptor *v179;
  void *v180;
  void *v181;
  char *v182;
  id *v183;
  char *v184;
  void *v185;
  int v187;
  const char *v188;
  const char *v189;
  int v190;
  const char *v191;
  const char *v192;
  const char *v193;
  int v194;
  const char *v195;
  const char *v196;
  const char *v197;
  int v198;
  const char *v199;
  const char *v200;
  const char *v201;
  int v202;
  const char *v203;
  const char *v204;
  int v205;
  const char *v206;
  const char *v207;
  id v208;
  GPU::EncodeDescriptor *v209;
  id v210;
  id v211;
  id v212;
  _QWORD *v213;
  id v214;
  uint64_t v215;
  _QWORD v216[5];
  __int128 v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  unint64_t v228;
  unint64_t v229;
  GPU::EncodeDescriptor *v230;
  __int128 v231;
  uint64_t *OperandRange;
  __int128 v233;
  void *v234;
  void *v235;
  _BYTE v236[128];
  void *v237;
  uint64_t v238;
  GPU::EncodeDescriptor **v239;
  uint64_t **p_OperandRange;
  __int128 *v241;
  uint64_t *v242;
  uint64_t *v243;
  unint64_t *v244;
  unint64_t *v245;
  __int128 v246;
  _QWORD v247[6];
  char *v248;
  uint64_t v249;
  _QWORD v250[9];

  v5 = a2;
  v250[6] = *MEMORY[0x1E0C80C00];
  v230 = a2;
  v212 = a3;
  v208 = a4;
  v215 = a1;
  if (!*(_BYTE *)(a1 + 256) || (*(_BYTE *)(a1 + 220) & 0x20) == 0)
    goto LABEL_77;
  v7 = *(_QWORD **)(a1 + 448);
  v210 = v212;
  v211 = v208;
  v213 = v7;
  v231 = *(_OWORD *)(v7[1] + 232);
  mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v231);
  v9 = v8;
  v237 = &v239;
  v238 = 0x600000000;
  v10 = v8;
  if (v8)
  {
    if (v8 < 7uLL)
    {
      v11 = 0;
      v12 = v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, &v239, v8, 8);
      v11 = v238;
      v12 = v10 - v238;
      if (v10 == v238)
        goto LABEL_9;
    }
    bzero((char *)v237 + 8 * v11, 8 * v12);
LABEL_9:
    if (v10 > HIDWORD(v238))
      __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
    LODWORD(v238) = v9;
  }
  mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v231);
  v14 = v13;
  v248 = (char *)v250;
  v249 = 0x300000000;
  v15 = v13;
  if (!v13)
    goto LABEL_19;
  if (v13 < 4uLL)
  {
    v16 = 0;
    v17 = v13;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v248, v250, v13, 16);
    v16 = v249;
    v17 = v15 - v249;
    if (v15 == v249)
      goto LABEL_17;
  }
  bzero(&v248[16 * v16], 16 * v17);
LABEL_17:
  if (v15 > HIDWORD(v249))
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  LODWORD(v249) = v14;
LABEL_19:
  mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v231);
  v19 = v18;
  *(_QWORD *)&v246 = v247;
  *((_QWORD *)&v246 + 1) = 0x600000000;
  v20 = v18;
  if (!v18)
    goto LABEL_27;
  if (v18 < 7uLL)
  {
    v21 = 0;
    v22 = v18;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, v247, v18, 8);
    v21 = DWORD2(v246);
    v22 = v20 - DWORD2(v246);
    if (v20 == DWORD2(v246))
      goto LABEL_25;
  }
  bzero((void *)(v246 + 8 * v21), 8 * v22);
LABEL_25:
  if (v20 > HIDWORD(v246))
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  DWORD2(v246) = v19;
LABEL_27:
  v209 = v5;
  for (i = 0; ; ++i)
  {
    mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v231);
    if (i >= v24)
      break;
    v25 = *(unsigned int *)(v231 + 44);
    if ((v25 & 0x7FFFFF) == 0)
    {
      v190 = 666;
      v191 = "getRegion";
      v192 = "Operation.h";
      v193 = "index < numRegions && \"invalid region index\"";
      goto LABEL_190;
    }
    v26 = v231 + 16 * ((v25 >> 23) & 1) + ((v25 >> 21) & 0x7F8) + 64;
    if (v26 > 0xFFFFFFFFFFFFFFF8)
    {
      v190 = 191;
      v191 = "alignAddr";
      v192 = "Alignment.h";
      v193 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
      goto LABEL_190;
    }
    v27 = (_QWORD *)(((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v231 + 40));
    if ((_QWORD *)*v27 == v27)
      goto LABEL_213;
    v28 = v27[1];
    v29 = v28 - 8;
    if (!v28)
      v29 = 0;
    v30 = *(_QWORD *)(v29 + 48);
    if (i >= (unint64_t)((*(_QWORD *)(v29 + 56) - v30) >> 3))
    {
LABEL_213:
      v190 = 443;
      v191 = "operator[]";
      v192 = "ArrayRef.h";
      v193 = "Index < this->size() && \"Invalid index!\"";
LABEL_190:
      __assert_rtn(v191, v192, v190, v193);
    }
    v31 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(v30 + 8 * i) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v31))
    {
      v194 = 566;
      v197 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
      v196 = "Casting.h";
      v195 = "cast";
LABEL_192:
      __assert_rtn(v195, v196, v194, v197);
    }
    if (v31)
    {
      InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v31);
      if (!InterfaceFor)
      {
        v194 = 98;
        v195 = "Interface";
        v196 = "InterfaceSupport.h";
        v197 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
        goto LABEL_192;
      }
    }
    else
    {
      InterfaceFor = 0;
    }
    if ((isStaticMPSType(v31) & 1) == 0)
    {
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)(v213[1] + 64) + 24));
      objc_msgSend(v210, "objectAtIndexedSubscript:", i);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "shape");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v210, "objectAtIndexedSubscript:", i);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = (mlir::MLIRContext *)objc_msgSend(v36, "dataType");
      v38 = v35;
      MLIRElementType = getMLIRElementType(Context, v37);
      MLIRType = getMLIRType(v38, MLIRElementType);

      if (i >= v238)
        __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
      *((_QWORD *)v237 + i) = MLIRType;

    }
    v41 = v213[1];
    if ((*(_BYTE *)(v41 + 220) & 0x40) != 0 && GPURegionRuntime::isSmallIntType(v41, v31, 0))
    {
      objc_msgSend(v210, "objectAtIndexedSubscript:", i);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "mpsndarray");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v233 = v31;
      *((_QWORD *)&v233 + 1) = InterfaceFor;
      v44 = v43;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v233))
        goto LABEL_184;
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v233);
      if (v46)
      {
        v47 = 8 * v46;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v47 -= 8;
          if (!v47)
            goto LABEL_51;
        }
LABEL_184:
        __assert_rtn("getNumElements", "BuiltinTypeInterfaces.h.inc", 162, "hasStaticShape() && \"cannot get element count of dynamic shaped type\"");
      }
LABEL_51:
      v48 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v233);
      NumElements = mlir::ShapedType::getNumElements(v48, v49);
      OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v233);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      v52 = NumElements * IntOrFloatBitWidth;
      if (v52 >= 0)
        v53 = NumElements * IntOrFloatBitWidth;
      else
        v53 = v52 + 7;
      objc_msgSend(*(id *)(v213[1] + 48), "metalDevice");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = v53 >> 3;
      v56 = (void *)objc_msgSend(v54, "newBufferWithLength:options:", v55, 0);

      v57 = (void *)*((_QWORD *)v209 + 9);
      if (v57)
      {
        objc_msgSend(v57, "endEncoding");
        v58 = (void *)*((_QWORD *)v209 + 9);
        *((_QWORD *)v209 + 9) = 0;

      }
      v59 = *((_QWORD *)v209 + 1);
      v60 = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v233);
      objc_msgSend(v44, "exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:", v59, v56, getMPSDataType(v60), 0, 0);
      objc_msgSend(*((id *)v209 + 1), "rootCommandBuffer");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      (**(void (***)(GPU::EncodeDescriptor *))v209)(v209);
      objc_msgSend(v61, "waitUntilCompleted");
      v62 = objc_retainAutorelease(v56);
      v63 = objc_msgSend(v62, "contents");
      OperandRange = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v233, *((_QWORD *)&v233 + 1), v63, v55, v64, v65, v66);
      v67 = mlir::Attribute::cast<mlir::ElementsAttr>(&OperandRange);
      v69 = v68;

      if (i >= v249)
        __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
      v70 = (uint64_t **)&v248[16 * i];
      *v70 = v67;
      v70[1] = v69;

    }
  }
  v71 = 0;
  v72 = "Casting.h";
  v73 = "cast";
  while (1)
  {
    mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v231);
    if (v71 == v74)
      break;
    objc_msgSend(v211, "objectAtIndexedSubscript:", v71);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = v75 == v76;

    if (!v77)
    {
      v78 = *(_QWORD *)(v213[1] + 248);
      if ((*(_BYTE *)(v78 + 46) & 0x80) == 0)
      {
        v198 = 960;
        v199 = "hasOperandStorage && \"expected operation to have operand storage\"";
        v200 = "Operation.h";
        v201 = "getOperandStorage";
        goto LABEL_195;
      }
      if (*(_DWORD *)(v78 + 68) <= v71)
      {
        v198 = 443;
        v201 = "operator[]";
        v200 = "ArrayRef.h";
        v199 = "Index < this->size() && \"Invalid index!\"";
LABEL_195:
        __assert_rtn(v201, v200, v198, v199);
      }
      v79 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 72) + 32 * v71 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v79))
      {
        v202 = 566;
        v203 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
        goto LABEL_199;
      }
      if (v79 && !mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v79))
      {
        v202 = 98;
        v73 = "Interface";
        v72 = "InterfaceSupport.h";
        v203 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
LABEL_199:
        __assert_rtn(v73, v72, v202, v203);
      }
      if ((isStaticMPSType(v79) & 1) == 0)
      {
        v80 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)(v213[1] + 64) + 24));
        objc_msgSend(v211, "objectAtIndexedSubscript:", v71);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "shape");
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v211, "objectAtIndexedSubscript:", v71);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        v84 = (mlir::MLIRContext *)objc_msgSend(v83, "dataType");
        v85 = v82;
        v86 = getMLIRElementType(v80, v84);
        v87 = getMLIRType(v85, v86);

        if (v71 >= DWORD2(v246))
          __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
        *(_QWORD *)(v246 + 8 * v71) = v87;

      }
    }
    ++v71;
  }
  (*(void (**)(_QWORD *, void *, _QWORD, char *, _QWORD, _QWORD, _QWORD))(*v213 + 16))(v213, v237, v238, v248, v249, v246, DWORD2(v246));
  if ((_QWORD *)v246 != v247)
    free((void *)v246);
  if (v248 != (char *)v250)
    free(v248);
  if (v237 != &v239)
    free(v237);

  v5 = v230;
LABEL_77:
  GPURegionRuntime::setupFeedsAndTargets((_QWORD *)a1, (uint64_t)v5, v212, v208, &v248);
  v228 = 0;
  v229 = 0;
  if (*(_BYTE *)(a1 + 640))
  {
    *(_QWORD *)&v233 = 0;
    LODWORD(OperandRange) = 536870920;
    v246 = 0uLL;
    v247[0] = 0;
    v88 = (char *)operator new(0x80uLL);
    *(_QWORD *)&v246 = v88;
    *((_QWORD *)&v246 + 1) = v88;
    v247[0] = v88 + 128;
    v89 = *(_QWORD *)(a1 + 232);
    v90 = *(unsigned int *)(v89 + 44);
    if ((v90 & 0x7FFFFF) != 0)
    {
      v91 = v89 + 16 * ((v90 >> 23) & 1) + ((v90 >> 21) & 0x7F8) + 64;
      if (v91 < 0xFFFFFFFFFFFFFFF9)
      {
        v92 = ((v91 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v89 + 40);
        v237 = &v229;
        v238 = (uint64_t)&v228;
        v239 = (GPU::EncodeDescriptor **)&v233;
        p_OperandRange = &OperandRange;
        v241 = &v246;
        v93 = *(_QWORD *)(v92 + 8);
        if (v93 == v92)
        {
          a1 = v215;
        }
        else
        {
          do
          {
            v94 = v93 - 8;
            if (!v93)
              v94 = 0;
            v95 = (mlir::GenericProgramPoint *)(v94 + 32);
            v96 = *(mlir::GenericProgramPoint **)(v94 + 40);
            if (v96 != (mlir::GenericProgramPoint *)(v94 + 32))
            {
              do
              {
                v97 = (mlir::GenericProgramPoint *)*((_QWORD *)v96 + 1);
                mlir::GenericProgramPoint::~GenericProgramPoint(v96);
                mlir::detail::walk<mlir::ForwardIterator>(v98, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::evaluateOps(GPU::EncodeDescriptor *,NSArray<MPSGraphTensorData *> *,NSArray<MPSGraphTensorData *> *)::$_0>, (uint64_t)&v237, 1);
                v96 = v97;
              }
              while (v97 != v95);
            }
            v93 = *(_QWORD *)(v93 + 8);
          }
          while (v93 != v92);
          v88 = (char *)v246;
          if (v229 >= 5)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", ((uint64_t)(*((_QWORD *)&v246 + 1) - v246) >> 3) + 1);
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            v100 = v233;
            if ((unint64_t)v233 >> 31)
              v100 = 16;
            v237 = (void *)(v100 / ((unsigned __int16)OperandRange >> 3));
            objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:dimensionCount:dimensionSizes:");
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v101, "setPreferPackedRows:", 1);
            objc_msgSend(MEMORY[0x1E0CC7240], "temporaryNDArrayWithCommandBuffer:descriptor:", *((_QWORD *)v230 + 1), v101);
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v102, "buffer");

            objc_msgSend(v99, "addObject:", v102);
            v104 = (uint64_t *)*((_QWORD *)&v246 + 1);
            for (j = (uint64_t *)v246; j != v104; ++j)
            {
              v105 = *j;
              if ((unint64_t)*j >> 31)
                v105 = 16;
              *(_QWORD *)&v231 = v105;
              objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:dimensionCount:dimensionSizes:", 536870920, 1, &v231);
              v106 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v106, "setPreferPackedRows:", 1);
              objc_msgSend(MEMORY[0x1E0CC7240], "temporaryNDArrayWithCommandBuffer:descriptor:", *((_QWORD *)v230 + 1), v106);
              v107 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v107, "buffer");

              objc_msgSend(v99, "addObject:", v107);
            }
            v226 = 0u;
            v227 = 0u;
            v224 = 0u;
            v225 = 0u;
            v108 = v99;
            v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v224, v236, 16);
            if (v109)
            {
              v110 = *(_QWORD *)v225;
              do
              {
                for (k = 0; k != v109; ++k)
                {
                  if (*(_QWORD *)v225 != v110)
                    objc_enumerationMutation(v108);
                  objc_msgSend(*(id *)(*((_QWORD *)&v224 + 1) + 8 * k), "setReadCount:", 0);
                }
                v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v224, v236, 16);
              }
              while (v109);
            }

            v88 = (char *)v246;
          }
          a1 = v215;
          if (!v88)
            goto LABEL_108;
        }
        *((_QWORD *)&v246 + 1) = v88;
        operator delete(v88);
LABEL_108:
        v112 = v228;
        v113 = v229;
        goto LABEL_109;
      }
      v204 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
      v205 = 191;
      v206 = "Alignment.h";
      v207 = "alignAddr";
    }
    else
    {
      v204 = "index < numRegions && \"invalid region index\"";
      v205 = 666;
      v206 = "Operation.h";
      v207 = "getRegion";
    }
    __assert_rtn(v207, v206, v205, v204);
  }
  v112 = 0;
  v113 = 0;
LABEL_109:
  v223 = 13;
  v222 = 45;
  v221 = 300000;
  v220 = 30000000;
  if (v113 >= 0xC9 && v112 > 0x36EE80)
  {
    v221 = 3600000;
    v222 = 75;
LABEL_112:
    v223 = 15;
    goto LABEL_115;
  }
  if (v113 > 0x82 || v112 > 0x36EE80)
  {
    if (v113 < 0x5B || v112 < 0x1B7741)
    {
      if (v113 < 0xC9)
      {
        if (v113 < 0x33)
          goto LABEL_115;
      }
      else
      {
        v221 = 900000;
      }
    }
    else
    {
      v221 = 1200000;
    }
    goto LABEL_112;
  }
LABEL_115:
  v214 = (id)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  v247[0] = 0;
  v246 = 0uLL;
  v114 = (void *)*((_QWORD *)v230 + 1);
  if (!v114 || (objc_msgSend(v114, "mpsCommandBufferDescriptor"), !(_QWORD)v246))
  {
    *(_QWORD *)&v246 = v223 >> 1;
    *((_QWORD *)&v246 + 1) = v221 >> 1;
  }
  v219 = 0;
  v115 = 0;
  v219 = (*(uint64_t (**)(GPU::EncodeDescriptor *))(*(_QWORD *)v230 + 8))(v230);
  v233 = *(_OWORD *)(a1 + 232);
  v116 = "getRegion";
  while (1)
  {
    mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v233);
    v117 = v233;
    v118 = *(unsigned int *)(v233 + 44);
    v119 = v118 & 0x7FFFFF;
    if (v115 >= v120)
      break;
    if (!v119)
    {
      v187 = 666;
      v188 = "index < numRegions && \"invalid region index\"";
      v189 = "Operation.h";
      goto LABEL_187;
    }
    v121 = v233 + 16 * ((v118 >> 23) & 1) + ((v118 >> 21) & 0x7F8) + 64;
    if (v121 > 0xFFFFFFFFFFFFFFF8)
    {
      v187 = 191;
      v116 = "alignAddr";
      v189 = "Alignment.h";
      v188 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
      goto LABEL_187;
    }
    v122 = (_QWORD *)(((v121 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v233 + 40));
    if ((_QWORD *)*v122 == v122)
      goto LABEL_210;
    v123 = v122[1];
    v124 = v123 - 8;
    if (!v123)
      v124 = 0;
    v125 = *(_QWORD *)(v124 + 48);
    if (v115 >= (unint64_t)((*(_QWORD *)(v124 + 56) - v125) >> 3))
    {
LABEL_210:
      v187 = 443;
      v116 = "operator[]";
      v189 = "ArrayRef.h";
      v188 = "Index < this->size() && \"Invalid index!\"";
LABEL_187:
      __assert_rtn(v116, v189, v187, v188);
    }
    v126 = *(uint64_t **)(v125 + 8 * v115);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v215 + 448) + 24))(*(_QWORD *)(v215 + 448), v126) & 1) == 0&& (isStaticMPSType((uint64_t **)(v126[1] & 0xFFFFFFFFFFFFFFF8)) & 1) == 0)
    {
      v127 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)(v215 + 64) + 24));
      objc_msgSend(v212, "objectAtIndexedSubscript:", v115);
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v128, "shape");
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v212, "objectAtIndexedSubscript:", v115);
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = (mlir::MLIRContext *)objc_msgSend(v130, "dataType");
      v132 = v129;
      v133 = getMLIRElementType(v127, v131);
      v134 = getMLIRType(v132, v133);

      GPURegionRuntime::setStaticJITypeForValue(v215, v126, v134);
    }
    ++v115;
  }
  if (!v119)
    goto LABEL_202;
  v135 = v233 + 16 * ((v118 >> 23) & 1) + ((v118 >> 21) & 0x7F8) + 64;
  if (v135 > 0xFFFFFFFFFFFFFFF8)
  {
LABEL_203:
    v188 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
    v187 = 191;
    v189 = "Alignment.h";
    v116 = "alignAddr";
    goto LABEL_187;
  }
  v136 = ((v135 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v233 + 40);
  v237 = &v233;
  v238 = v215;
  v239 = &v230;
  p_OperandRange = (uint64_t **)&v219;
  v241 = &v246;
  v242 = &v220;
  v243 = &v222;
  v244 = &v221;
  v245 = &v223;
  v137 = *(_QWORD *)(v136 + 8);
  if (v137 != v136)
  {
    do
    {
      v138 = v137 - 8;
      if (!v137)
        v138 = 0;
      v139 = (mlir::GenericProgramPoint *)(v138 + 32);
      v140 = *(mlir::GenericProgramPoint **)(v138 + 40);
      if (v140 != (mlir::GenericProgramPoint *)(v138 + 32))
      {
        do
        {
          v141 = (mlir::GenericProgramPoint *)*((_QWORD *)v140 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v140);
          mlir::detail::walk<mlir::ForwardIterator>(v142, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::evaluateOps(GPU::EncodeDescriptor *,NSArray<MPSGraphTensorData *> *,NSArray<MPSGraphTensorData *> *)::$_1::operator() const(mlir::FunctionOpInterface)::{lambda(mlir::Operation *)#1}>, (uint64_t)&v237, 1);
          v140 = v141;
        }
        while (v141 != v139);
      }
      v137 = *(_QWORD *)(v137 + 8);
    }
    while (v137 != v136);
    v117 = v233;
  }
  v143 = *(unsigned int *)(v117 + 44);
  if ((v143 & 0x7FFFFF) == 0)
  {
LABEL_202:
    v188 = "index < numRegions && \"invalid region index\"";
    v187 = 666;
    v189 = "Operation.h";
    v116 = "getRegion";
    goto LABEL_187;
  }
  v144 = v117 + 16 * ((v143 >> 23) & 1) + ((v143 >> 21) & 0x7F8) + 64;
  if (v144 > 0xFFFFFFFFFFFFFFF8)
    goto LABEL_203;
  v145 = *(_QWORD *)(((v144 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v117 + 40) + 8);
  if (v145)
    v146 = (mlir::GenericProgramPoint **)(v145 - 8);
  else
    v146 = 0;
  mlir::Block::getTerminator(v146);
  if ((*(_BYTE *)(v147 + 46) & 0x80) != 0)
  {
    v148 = *(unsigned int *)(v147 + 68);
    if ((_DWORD)v148)
    {
      v149 = (void **)(*(_QWORD *)(v147 + 72) + 24);
      do
      {
        v237 = *v149;
        *(_QWORD *)&v231 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v237) + 2);
        v150 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(v215 + 88), (uint64_t *)&v231);
        if (v150
          && (OperandRange = (uint64_t *)v237,
              (v151 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v150 + 3, (uint64_t *)&OperandRange)) != 0))
        {
          v152 = (id)v151[3];
        }
        else
        {
          v152 = 0;
        }
        objc_msgSend(v214, "addObject:", v152);

        v149 += 4;
        --v148;
      }
      while (v148);
    }
  }
  v153 = (void *)*((_QWORD *)v230 + 1);
  v217 = v246;
  v218 = v247[0];
  objc_msgSend(v153, "setMpsCommandBufferDescriptor:", &v217);
  objc_msgSend(*(id *)(v215 + 128), "allKeys");
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v154, "count") && (char *)v249 == v248)
  {
    v157 = 0;
  }
  else
  {
    v155 = objc_alloc(MEMORY[0x1E0CC7030]);
    objc_msgSend(*((id *)v230 + 1), "device");
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v157 = (void *)objc_msgSend(v155, "initWithDevice:", v156);

  }
  if (objc_msgSend(v154, "count"))
  {
    for (m = 0; m < objc_msgSend(v154, "count"); ++m)
    {
      objc_msgSend(v154, "objectAtIndexedSubscript:", m);
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v215 + 128), "objectForKeyedSubscript:", v159);
      v160 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v160, "mpsndarray");
      v161 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v159, "variable");
      v162 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*((id *)v230 + 1), "device");
      v163 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v162, "mpsNDArrayWithDevice:", v163);
      v164 = (void *)objc_claimAutoreleasedReturnValue();

      GPU::EncodeDescriptor::getcomputeEncoder(v230);
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      v166 = *((_QWORD *)v230 + 1);
      v235 = v161;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v235, 1);
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v157, "encodeToMPSCommandEncoder:commandBuffer:sourceArrays:resultState:destinationArray:kernelDAGObject:", v165, v166, v167, 0, v164, 0);

    }
  }
  if ((char *)v249 != v248)
  {
    v168 = 0;
    v169 = 0;
    do
    {
      GPU::EncodeDescriptor::getcomputeEncoder(v230);
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      if (v169 >= (v249 - (uint64_t)v248) >> 4)
        std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::__throw_out_of_range[abi:ne180100]();
      v171 = *((_QWORD *)v230 + 1);
      objc_msgSend(*(id *)&v248[v168], "mpsndarray");
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      v234 = v172;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v234, 1);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      if (v169 >= (v249 - (uint64_t)v248) >> 4)
        std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::__throw_out_of_range[abi:ne180100]();
      objc_msgSend(*(id *)&v248[v168 + 8], "mpsndarray");
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v157, "encodeToMPSCommandEncoder:commandBuffer:sourceArrays:destinationArray:", v170, v171, v173, v174);

      ++v169;
      v168 += 16;
    }
    while (v169 < (v249 - (uint64_t)v248) >> 4);
  }
  v175 = v230;
  v176 = (void *)*((_QWORD *)v230 + 9);
  if (v176)
  {
    objc_msgSend(v176, "endEncoding");
    v177 = (void *)*((_QWORD *)v175 + 9);
    *((_QWORD *)v175 + 9) = 0;

    v175 = v230;
  }
  v178 = *(void **)(v215 + 136);
  v216[0] = MEMORY[0x1E0C809B0];
  v216[1] = 3221225472;
  v216[2] = ___ZN16GPURegionRuntime11evaluateOpsEPN3GPU16EncodeDescriptorEP7NSArrayIP18MPSGraphTensorDataES7__block_invoke;
  v216[3] = &__block_descriptor_40_e35_v32__0__MPSGraphTensorData_8Q16_B24l;
  v216[4] = v175;
  objc_msgSend(v178, "enumerateObjectsUsingBlock:", v216);
  GPURegionRuntime::postEvalCleanUp((GPURegionRuntime *)v215);
  v179 = v230;
  v180 = (void *)*((_QWORD *)v230 + 9);
  if (v180)
  {
    objc_msgSend(v180, "endEncoding");
    v181 = (void *)*((_QWORD *)v179 + 9);
    *((_QWORD *)v179 + 9) = 0;

  }
  v182 = v248;
  if (v248)
  {
    v183 = (id *)v249;
    v184 = v248;
    if ((char *)v249 != v248)
    {
      do
      {

        v185 = *(v183 - 2);
        v183 -= 2;

      }
      while (v183 != (id *)v182);
      v184 = v248;
    }
    v249 = (uint64_t)v182;
    operator delete(v184);
  }

  return v214;
}

void sub_180DC0BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v23 = *(void **)(v21 - 248);
  if (v23)
  {
    *(_QWORD *)(v21 - 240) = v23;
    operator delete(v23);
  }
  v24 = *(_QWORD *)(v21 - 184);
  if (v24)
  {
    v25 = *(_QWORD *)(v21 - 176);
    v26 = *(void **)(v21 - 184);
    if (v25 != v24)
    {
      do
      {

        v27 = *(void **)(v25 - 16);
        v25 -= 16;

      }
      while (v25 != v24);
      v26 = *(void **)(v21 - 184);
    }
    *(_QWORD *)(v21 - 176) = v24;
    operator delete(v26);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN16GPURegionRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPb_block_invoke_2(uint64_t result, _QWORD *a2)
{
  if (!a2[2])
    return objc_msgSend(*(id *)(result + 32), "encodeSignalEvent:value:", a2[1], a2[3]);
  return result;
}

uint64_t ___ZN16GPURegionRuntime11evaluateOpsEPN3GPU16EncodeDescriptorEP7NSArrayIP18MPSGraphTensorDataES7__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "copyDataFromNDArrayToImageBatchWithCommandBuffer:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t GPURegionRuntime::postEvalCleanUp(GPURegionRuntime *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  uint64_t v10;
  uint64_t k;
  _QWORD *v12;
  uint64_t v13;
  uint64_t m;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v21;
  id *v22;
  id *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;

  if (*((_QWORD *)this + 78))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 77);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *((_QWORD *)this + 77) = 0;
    v4 = *((_QWORD *)this + 76);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*((_QWORD *)this + 75) + 8 * i) = 0;
    }
    *((_QWORD *)this + 78) = 0;
  }
  if (*((_QWORD *)this + 14))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 13);
    if (v6)
    {
      do
      {
        v21 = (_QWORD *)*v6;
        v22 = (id *)v6[5];
        if (v22)
        {
          do
          {
            v23 = (id *)*v22;

            operator delete(v22);
            v22 = v23;
          }
          while (v23);
        }
        v24 = (void *)v6[3];
        v6[3] = 0;
        if (v24)
          operator delete(v24);
        operator delete(v6);
        v6 = v21;
      }
      while (v21);
    }
    *((_QWORD *)this + 13) = 0;
    v7 = *((_QWORD *)this + 12);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  if (*((_QWORD *)this + 41))
  {
    v9 = (_QWORD *)*((_QWORD *)this + 40);
    if (v9)
    {
      do
      {
        v25 = (_QWORD *)*v9;
        v26 = (_QWORD *)v9[5];
        if (v26)
        {
          do
          {
            v27 = (_QWORD *)*v26;
            operator delete(v26);
            v26 = v27;
          }
          while (v27);
        }
        v28 = (void *)v9[3];
        v9[3] = 0;
        if (v28)
          operator delete(v28);
        operator delete(v9);
        v9 = v25;
      }
      while (v25);
    }
    *((_QWORD *)this + 40) = 0;
    v10 = *((_QWORD *)this + 39);
    if (v10)
    {
      for (k = 0; k != v10; ++k)
        *(_QWORD *)(*((_QWORD *)this + 38) + 8 * k) = 0;
    }
    *((_QWORD *)this + 41) = 0;
  }
  if (*((_QWORD *)this + 46))
  {
    v12 = (_QWORD *)*((_QWORD *)this + 45);
    if (v12)
    {
      do
      {
        v29 = (_QWORD *)*v12;
        v30 = (_QWORD *)v12[5];
        if (v30)
        {
          do
          {
            v31 = (_QWORD *)*v30;
            operator delete(v30);
            v30 = v31;
          }
          while (v31);
        }
        v32 = (void *)v12[3];
        v12[3] = 0;
        if (v32)
          operator delete(v32);
        operator delete(v12);
        v12 = v29;
      }
      while (v29);
    }
    *((_QWORD *)this + 45) = 0;
    v13 = *((_QWORD *)this + 44);
    if (v13)
    {
      for (m = 0; m != v13; ++m)
        *(_QWORD *)(*((_QWORD *)this + 43) + 8 * m) = 0;
    }
    *((_QWORD *)this + 46) = 0;
  }
  objc_msgSend(*((id *)this + 16), "removeAllObjects");
  objc_msgSend(*((id *)this + 17), "removeAllObjects");
  v15 = *((unsigned int *)this + 116);
  if ((_DWORD)v15)
  {
    v16 = (uint64_t *)*((_QWORD *)this + 57);
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      v19 = *(void **)(v18 + 48);
      *(_QWORD *)(v18 + 48) = 0;

      v17 -= 8;
    }
    while (v17);
  }
  *((_DWORD *)this + 116) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 72))(*((_QWORD *)this + 56));
}

void GPURegionRuntime::encodeOp(GPURegionRuntime *this, mlir::GenericProgramPoint ***a2, GPU::EncodeDescriptor *a3)
{
  mlir::GenericProgramPoint **v5;
  mlir::GenericProgramPoint *v6;
  _QWORD *AttrData;
  uint64_t v8;
  BOOL v9;
  mlir::Operation *v11;
  uint64_t InterfaceFor;
  uint64_t **v13;
  uint64_t v14;
  __guard *v15;
  uint64_t v16;
  unsigned __int8 v17;
  __guard v18;
  BOOL v19;
  BOOL v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  const char *v54;
  size_t v55;
  size_t v56;
  __int128 *p_dst;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  int v62;
  char *v63;
  uint64_t **v64;
  mlir::Operation *v65;
  _OWORD v66[2];
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  __int16 v70;
  const char *v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 __dst;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v65 = (mlir::Operation *)a2;
  v5 = a2[6];
  v6 = v5[2];
  if (v6 == (mlir::GenericProgramPoint *)&mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)&__dst = v5[1];
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__dst);
    if (v8 == 21)
    {
      v9 = *AttrData == 0x6E656D6563616C70 && AttrData[1] == 0x6E6F696765722E74;
      if (v9 && *(_QWORD *)((char *)AttrData + 13) == 0x6C6C61635F6E6F69)
      {
        LOWORD(v78) = 1283;
        *(_QWORD *)&v76 = "classof on '";
        *(_QWORD *)&v77 = "placement.region_call";
        *((_QWORD *)&v77 + 1) = 21;
        v71 = "' failed due to the operation not being registered";
        LOWORD(v75) = 259;
        llvm::operator+((uint64_t *)&v76, (uint64_t *)&v71, (uint64_t)&__dst);
        llvm::report_fatal_error((llvm::Twine *)&__dst, 1);
      }
    }
    a2 = (mlir::GenericProgramPoint ***)v65;
  }
  else if (v6 == (mlir::GenericProgramPoint *)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
  {
    goto LABEL_82;
  }
  mlir::Block::getTerminator(a2[2]);
  if (v11 != v65)
  {
    if (!v65)
      __assert_rtn("dyn_cast", "Casting.h", 662, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
    if (!mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v65))
    {
      v68 = 0;
      v69 = 0;
LABEL_48:
      v32 = *((unsigned int *)v65 + 9);
      if ((_DWORD)v32)
        v33 = (char *)v65 - 16;
      else
        v33 = 0;
      v71 = v33;
      v72 = v32;
      mlir::ResultRange::use_begin((uint64_t *)&v71, (uint64_t *)&__dst);
      v34 = *((unsigned int *)v65 + 9);
      if ((_DWORD)v34)
        v35 = (char *)v65 - 16;
      else
        v35 = 0;
      v68 = v35;
      v69 = v34;
      mlir::ResultRange::use_end((uint64_t *)&v68, (uint64_t *)&v71);
      v76 = __dst;
      v77 = v80;
      v36 = v81;
      v78 = v81;
      v37 = v75;
      v66[0] = __dst;
      v66[1] = v80;
      v67 = v81;
      if (v81 == v75)
        return;
      while (1)
      {
        v38 = *(_QWORD *)(v36 + 16);
        if (*(_DWORD *)(v38 + 36) != 1)
          goto LABEL_44;
        v39 = *(_QWORD *)(mlir::Block::getParentOp(*(mlir::Block **)(v38 + 16)) + 48);
        v40 = *(void **)(v39 + 16);
        if (v40 == &mlir::detail::TypeIDResolver<void,void>::id)
        {
          *(_QWORD *)&__dst = *(_QWORD *)(v39 + 8);
          v41 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__dst);
          if (v42 == 13 && *v41 == 0x6974732E7873706DLL && *(_QWORD *)((char *)v41 + 5) == 0x6465686374697473)
          {
            LOWORD(v75) = 1283;
            v71 = "classof on '";
            v73 = "mpsx.stitched";
            v74 = 13;
            v68 = "' failed due to the operation not being registered";
            v70 = 259;
            llvm::operator+((uint64_t *)&v71, (uint64_t *)&v68, (uint64_t)&__dst);
            llvm::report_fatal_error((llvm::Twine *)&__dst, 1);
          }
        }
        else if (v40 == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
        {
          goto LABEL_44;
        }
        if (!*(_DWORD *)(v38 + 36))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 56) + 48))(*((_QWORD *)this + 56), v38 - 16))goto LABEL_44;
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v66);
        v36 = v67;
        if (v67 == v37)
          return;
      }
    }
    InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v65);
    if (!InterfaceFor)
      __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
    v68 = (const char *)v65;
    v69 = InterfaceFor;
    *(_QWORD *)&__dst = &v80;
    *((_QWORD *)&__dst + 1) = 0x400000000;
    mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v68, (uint64_t)&__dst);
    v13 = (uint64_t **)__dst;
    if (DWORD2(__dst))
    {
      v14 = 40 * DWORD2(__dst) - 40;
      do
      {
        if (!*v13)
          __assert_rtn("doit", "Casting.h", 109, "Val && \"isa<> used on a null pointer\"");
        v16 = **v13;
        if ((v17 & 1) == 0)
        {
          v64 = v13;
          v63 = "!Name.empty() && \"Unable to find the template parameter!\"";
          v22 = v21;
          v13 = v64;
          if (v22)
          {
            v71 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Read]";
            v72 = 75;
            v23 = llvm::StringRef::find((uint64_t *)&v71, "DesiredTypeName = ", 0x12uLL, 0);
            v25 = v71;
            v24 = v72;
            if (v72 >= v23)
              v26 = v23;
            else
              v26 = v72;
            v27 = v72 - v26;
            v28 = &v71[v26];
            v71 += v26;
            v72 -= v26;
            if (v24 <= v23)
            {
              v62 = 33;
              goto LABEL_113;
            }
            if (v27 < 0x12)
              __assert_rtn("drop_front", "StringRef.h", 614, "size() >= N && \"Dropping more elements than exist\"");
            v71 = v28 + 18;
            v72 = v27 - 18;
            if (v27 == 18 || v25[v24 - 1] != 93)
            {
              v62 = 36;
              v63 = "Name.ends_with(\"]\") && \"Name doesn't end in the substitution key!\"";
LABEL_113:
              __assert_rtn("getTypeName", "TypeName.h", v62, v63);
            }
            if (v27 - 18 >= v27 - 19)
              v29 = v27 - 19;
            else
              v29 = v27 - 18;
            mlir::detail::TypeIDResolver<mlir::MemoryEffects::Read,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)(v28 + 18), v29);
            v13 = v64;
          }
        }
        v18 = v15[274];
        v9 = v16 == v18;
        v19 = v16 != v18;
        v20 = !v9 || v14 == 0;
        v14 -= 40;
        v13 += 5;
      }
      while (!v20);
      v13 = (uint64_t **)__dst;
      if ((__int128 *)__dst != &v80)
        goto LABEL_42;
    }
    else
    {
      v19 = 0;
      if ((__int128 *)__dst != &v80)
LABEL_42:
        free(v13);
    }
    if (v19)
      goto LABEL_44;
    goto LABEL_48;
  }
LABEL_44:
  a2 = (mlir::GenericProgramPoint ***)v65;
  if (*((_DWORD *)v65 + 9) != 1)
    goto LABEL_82;
  v30 = *((_QWORD *)v65 + 6);
  v31 = *(void **)(v30 + 16);
  if (v31 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)&__dst = *(_QWORD *)(v30 + 8);
    v44 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&__dst);
    if (v45 == 12 && *(_QWORD *)v44 == 0x736E6F632E73706DLL && *(_DWORD *)(v44 + 8) == 1953390964)
    {
      LOWORD(v78) = 1283;
      *(_QWORD *)&v76 = "classof on '";
      *(_QWORD *)&v77 = "mps.constant";
      *((_QWORD *)&v77 + 1) = 12;
      v71 = "' failed due to the operation not being registered";
      LOWORD(v75) = 259;
      llvm::operator+((uint64_t *)&v76, (uint64_t *)&v71, (uint64_t)&__dst);
      llvm::report_fatal_error((llvm::Twine *)&__dst, 1);
    }
LABEL_75:
    if (!*((_DWORD *)v65 + 9))
      __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
    v48 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 56) + 64))(*((_QWORD *)this + 56), (uint64_t)v65 - 16);
    if (!v48)
    {
      a2 = (mlir::GenericProgramPoint ***)v65;
      goto LABEL_82;
    }
    v49 = v47;
    v50 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)this + 33, (uint64_t *)&v65);
    if (!v50)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v51 = v50[3];
    GPU::BaseOpHandler::encodeConstantOp(v51, (uint64_t)a3, v48, v49, 0);
    v52 = *((unsigned int *)this + 116);
    if (v52 >= *((_DWORD *)this + 117))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 456, (char *)this + 472, v52 + 1, 8);
      *(_QWORD *)(*((_QWORD *)this + 57) + 8 * *((unsigned int *)this + 116)) = v51;
      v53 = *((_DWORD *)this + 116);
      if (v53 < *((_DWORD *)this + 117))
        goto LABEL_80;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 57) + 8 * v52) = v51;
      v53 = *((_DWORD *)this + 116);
      if (v53 < *((_DWORD *)this + 117))
      {
LABEL_80:
        *((_DWORD *)this + 116) = v53 + 1;
        return;
      }
    }
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  if (v31 != &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    goto LABEL_75;
LABEL_82:
  *(_QWORD *)&v76 = a2[6][1];
  v54 = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v76);
  v55 = strlen(v54);
  if (v55 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v56 = v55;
  if (v55 >= 0x17)
  {
    v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v58 = v55 | 7;
    v59 = v58 + 1;
    p_dst = (__int128 *)operator new(v58 + 1);
    *((_QWORD *)&__dst + 1) = v56;
    *(_QWORD *)&v80 = v59 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v80) = v55;
    p_dst = &__dst;
    if (!v55)
      goto LABEL_90;
  }
  memmove(p_dst, v54, v56);
LABEL_90:
  *((_BYTE *)p_dst + v56) = 0;
  v60 = std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::find<std::string>((_QWORD *)this + 1, (uint64_t)&__dst);
  if (!v60)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v61 = *((_DWORD *)v60 + 10);
  switch(v61)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 152:
    case 153:
    case 154:
    case 155:
    case 157:
    case 158:
    case 159:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      GPURegionRuntime::runOp<GPU::AbsoluteOpHandler>((uint64_t)this, (uint64_t)v65, (uint64_t)a3);
      break;
    default:
      if (!v61 && MTLReportFailureTypeEnabled())
        MTLReportFailure();
      break;
  }
  if (SBYTE7(v80) < 0)
    operator delete((void *)__dst);
}

void sub_180DC2BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x180DC2C28);
}

uint64_t GPURegionRuntime::runOp<GPU::AbsoluteOpHandler>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  id *v6;
  uint64_t v8;

  v8 = a2;
  v5 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 264), &v8);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (id *)v5[3];
  if ((*(_BYTE *)(a1 + 220) & 1) != 0)
    objc_storeStrong((id *)(a3 + 80), v6[8]);
  return (*((uint64_t (**)(id *, uint64_t))*v6 + 1))(v6, a3);
}

uint64_t getNumberOfUniqueUses(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  mlir::Block *v4;
  uint64_t ParentOp;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  unint64_t v19;
  void *v20[2];
  void *__p[2];
  int v22;

  v1 = (_QWORD *)*a1;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)__p = 0u;
  v22 = 1065353216;
  v2 = 0;
  if (v1)
  {
    do
    {
      v3 = v1[2];
      v19 = 0;
      v4 = *(mlir::Block **)(v3 + 16);
      if (v4)
      {
        ParentOp = mlir::Block::getParentOp(v4);
        v19 = ParentOp;
        if (ParentOp)
        {
          if (llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible(ParentOp))
          {
            if (v20[1])
            {
              v6 = 0x9DDFEA08EB382D69 * (((8 * v19) + 8) ^ HIDWORD(v19));
              v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v6 >> 47) ^ v6);
              v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
              v9 = (uint8x8_t)vcnt_s8((int8x8_t)v20[1]);
              v9.i16[0] = vaddlv_u8(v9);
              if (v9.u32[0] > 1uLL)
              {
                v10 = v8;
                if ((void *)v8 >= v20[1])
                  v10 = v8 % (unint64_t)v20[1];
              }
              else
              {
                v10 = v8 & ((unint64_t)v20[1] - 1);
              }
              v11 = (_QWORD *)*((_QWORD *)v20[0] + v10);
              if (v11)
              {
                v12 = (_QWORD *)*v11;
                if (v12)
                {
                  if (v9.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v14 = v12[1];
                      if (v14 == v8)
                      {
                        if (v12[2] == v19)
                          goto LABEL_27;
                      }
                      else if ((v14 & ((uint64_t)v20[1] - 1)) != v10)
                      {
                        goto LABEL_25;
                      }
                      v12 = (_QWORD *)*v12;
                      if (!v12)
                        goto LABEL_25;
                    }
                  }
                  do
                  {
                    v13 = v12[1];
                    if (v13 == v8)
                    {
                      if (v12[2] == v19)
                        goto LABEL_27;
                    }
                    else
                    {
                      if ((void *)v13 >= v20[1])
                        v13 %= (unint64_t)v20[1];
                      if (v13 != v10)
                        break;
                    }
                    v12 = (_QWORD *)*v12;
                  }
                  while (v12);
                }
              }
            }
LABEL_25:
            std::__hash_table<mlir::Operation *,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,std::allocator<mlir::Operation *>>::__emplace_unique_key_args<mlir::Operation *,mlir::Operation * const&>((uint64_t)v20, (uint64_t *)&v19, &v19);
          }
        }
      }
      ++v2;
LABEL_27:
      v1 = (_QWORD *)*v1;
    }
    while (v1);
    v15 = __p[0];
    if (__p[0])
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    v17 = v20[0];
    v20[0] = 0;
    if (v17)
      operator delete(v17);
  }
  return v2;
}

void sub_180DC2E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_set<mlir::Operation *>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_180DC2E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_set<mlir::Operation *>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

MPSGraphTensorData *GPURegionRuntime::allocateTensorDataForValue(uint64_t a1, uint64_t *a2, void *a3, char a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  MPSGraphTensorData *v12;
  MPSGraphTensorData *v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  unint64_t StaticType;
  uint64_t **v18;
  void *v19;
  BOOL v20;
  unint64_t v21;
  _QWORD *Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t MPSDataType;
  MPSGraphTensorData *v26;
  uint64_t v27;
  void *v28;
  _BOOL4 v29;
  uint64_t MPSSizeVector;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  uint64_t DefiningOp;
  uint64_t v38;
  void *v39;
  uint64_t AttrData;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  int8x8_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  void *v68;
  uint64_t **v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t InterfaceFor;
  _QWORD *ArgAttrsAttr;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t Values;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t Axis;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t **v94;
  id WeakRetained;
  BOOL v96;
  mlir::Operation *v97;
  void *v98;
  id v100;
  void *v101;
  id v102;
  void *v103;
  uint64_t *v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  void *v109;
  void *v110;
  void *v111;
  const char *v112;
  int v113;
  const char *v114;
  const char *v115;
  const char *v116;
  int v117;
  const char *v118;
  const char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL4 v123;
  id v125;
  _OWORD v126[4];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t *v131;
  uint64_t v132[4];
  __int16 v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  __int16 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _OWORD v143[8];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v131 = a2;
  v125 = a3;
  *(_QWORD *)&v143[0] = a2;
  *(_QWORD *)&v139 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)v143) + 2);
  v10 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 88), (uint64_t *)&v139);
  if (v10
    && (*(_QWORD *)&v127 = *(_QWORD *)&v143[0],
        (v11 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v10 + 3, (uint64_t *)&v127)) != 0))
  {
    v12 = (MPSGraphTensorData *)(id)v11[3];
    v13 = v12;
    if (v12)
    {
      -[MPSGraphTensorData mpsndarray](v12, "mpsndarray");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0)
        goto LABEL_141;
      -[MPSGraphTensorData mpsndarray](v13, "mpsndarray");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v16, "readCount"))
      {

        goto LABEL_141;
      }
      BaseRuntime::unsetTensorDataFromDataMap(a1, (uint64_t)v131);

    }
  }
  else
  {
    v13 = 0;
  }
  StaticType = GPURegionRuntime::getStaticType(a1, (uint64_t)v131);
  v18 = (uint64_t **)StaticType;
  if (!StaticType)
  {
    v112 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v113 = 650;
    v114 = "Casting.h";
    v115 = "dyn_cast";
    goto LABEL_173;
  }
  if (!*(_QWORD *)StaticType)
  {
    v112 = "abstractType && \"Malformed type storage object.\"";
    v113 = 160;
    v114 = "TypeSupport.h";
    v115 = "getAbstractType";
LABEL_173:
    __assert_rtn(v115, v114, v113, v112);
  }
  v19 = *(void **)(*(_QWORD *)StaticType + 136);
  v20 = v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v20)
    v21 = StaticType;
  else
    v21 = 0;
  *(_QWORD *)&v143[0] = v21;
  if (v20)
  {
    if (mlir::TensorType::hasRank((mlir::TensorType *)v143))
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v143);
    if (mlir::TensorType::hasRank((mlir::TensorType *)v143))
    {
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v143);
      if (!v23)
        goto LABEL_25;
      v24 = 8 * v23;
      while (*Value != 0x8000000000000000)
      {
        ++Value;
        v24 -= 8;
        if (!v24)
          goto LABEL_25;
      }
    }
    if (MTLReportFailureTypeEnabled())
      MTLReportFailure();
  }
LABEL_25:
  MPSDataType = getMPSDataType(v18);
  if (valueNeedsReturnAlloc(v131))
  {
    v26 = [MPSGraphTensorData alloc];
    v27 = *(_QWORD *)(a1 + 48);
    getMPSShapeFromMLIR(v18);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[MPSGraphTensorData initWithDevice:rowBytesAlignment:shape:dataType:](v26, "initWithDevice:rowBytesAlignment:shape:dataType:", v27, a6, v28, MPSDataType);

    BaseRuntime::setTensorDataToDataMap(a1, v131, v13);
    goto LABEL_141;
  }
  v29 = (a4 & 1) != 0 || !valueCanBeTemporary(v131);
  v123 = v29;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v143[4] = xmmword_181286778;
  v143[5] = unk_181286788;
  v143[6] = xmmword_181286798;
  v143[7] = unk_1812867A8;
  v143[0] = xmmword_181286738;
  v143[1] = unk_181286748;
  v143[2] = xmmword_181286758;
  v143[3] = unk_181286768;
  MPSSizeVector = getMPSSizeVector(v18, &v127);
  if (MPSSizeVector)
  {
    v31 = 0;
    v33 = v129;
    v32 = v130;
    v35 = v127;
    v34 = v128;
    do
    {
      v126[0] = v35;
      v126[1] = v34;
      v126[2] = v33;
      v126[3] = v32;
      *((_QWORD *)v143 + v31) = *((unsigned int *)v126 + (v31 & 0xF));
      ++v31;
    }
    while (MPSSizeVector != v31);
  }
  objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:dimensionCount:dimensionSizes:", getMPSDataType(v18), MPSSizeVector, v143);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (a6 != 1)
    goto LABEL_56;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v131);
  if (!DefiningOp)
    goto LABEL_49;
  v38 = *(_QWORD *)(DefiningOp + 48);
  v39 = *(void **)(v38 + 16);
  if (v39 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)&v139 = *(_QWORD *)(v38 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v139);
    if (v41 == 26)
    {
      v42 = *(_QWORD *)AttrData == 0x6E656D6563616C70 && *(_QWORD *)(AttrData + 8) == 0x6665726D656D2E74;
      v43 = v42 && *(_QWORD *)(AttrData + 16) == 0x736E65745F6F745FLL;
      if (v43 && *(_WORD *)(AttrData + 24) == 29295)
      {
        v138 = 1283;
        v134 = "classof on '";
        v136 = "placement.memref_to_tensor";
        v137 = 26;
        v132[0] = (uint64_t)"' failed due to the operation not being registered";
        v133 = 259;
        llvm::operator+((uint64_t *)&v134, v132, (uint64_t)&v139);
        llvm::report_fatal_error((llvm::Twine *)&v139, 1);
      }
    }
LABEL_49:
    v45 = (_QWORD *)*v131;
    if (*v131)
    {
      a6 = 64;
      while (1)
      {
        v46 = *(_QWORD *)(v45[2] + 48);
        v47 = *(void **)(v46 + 16);
        if (v47 == &mlir::detail::TypeIDResolver<void,void>::id)
          break;
        if (v47 != &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
          goto LABEL_90;
        v45 = (_QWORD *)*v45;
        if (!v45)
          goto LABEL_56;
      }
      *(_QWORD *)&v139 = *(_QWORD *)(v46 + 8);
      v59 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v139);
      if (v60 == 26)
      {
        v61 = *(_QWORD *)v59 == 0x6E656D6563616C70 && *(_QWORD *)(v59 + 8) == 0x726F736E65742E74;
        v62 = v61 && *(_QWORD *)(v59 + 16) == 0x726D656D5F6F745FLL;
        if (v62 && *(_WORD *)(v59 + 24) == 26213)
        {
          v138 = 1283;
          v134 = "classof on '";
          v136 = "placement.tensor_to_memref";
          v137 = 26;
          v132[0] = (uint64_t)"' failed due to the operation not being registered";
          v133 = 259;
          llvm::operator+((uint64_t *)&v134, v132, (uint64_t)&v139);
          llvm::report_fatal_error((llvm::Twine *)&v139, 1);
        }
      }
LABEL_90:
      objc_msgSend(v36, "setPreferPackedRows:", 1);
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v39 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
    goto LABEL_49;
LABEL_55:
  a6 = 64;
LABEL_56:
  objc_msgSend(v36, "setRowBytes:", (a6 + *(_QWORD *)&v143[0] * ((unsigned __int16)MPSDataType >> 3) - 1) / a6 * a6);
LABEL_57:
  v48 = *(int8x8_t *)(a1 + 608);
  if (!*(_QWORD *)&v48)
    goto LABEL_98;
  v49 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v131) + 8) ^ ((unint64_t)v131 >> 32));
  v50 = 0x9DDFEA08EB382D69 * (((unint64_t)v131 >> 32) ^ (v49 >> 47) ^ v49);
  v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
  v52 = (uint8x8_t)vcnt_s8(v48);
  v52.i16[0] = vaddlv_u8(v52);
  if (v52.u32[0] > 1uLL)
  {
    v53 = v51;
    if (v51 >= *(_QWORD *)&v48)
      v53 = v51 % *(_QWORD *)&v48;
  }
  else
  {
    v53 = v51 & (*(_QWORD *)&v48 - 1);
  }
  v54 = *(uint64_t ****)(*(_QWORD *)(a1 + 600) + 8 * v53);
  if (!v54)
    goto LABEL_98;
  v55 = *v54;
  if (!v55)
    goto LABEL_98;
  if (v52.u32[0] < 2uLL)
  {
    v56 = *(_QWORD *)&v48 - 1;
    while (1)
    {
      v58 = v55[1];
      if (v58 == (uint64_t *)v51)
      {
        if (v55[2] == v131)
          goto LABEL_91;
      }
      else if (((unint64_t)v58 & v56) != v53)
      {
        goto LABEL_98;
      }
      v55 = (uint64_t **)*v55;
      if (!v55)
        goto LABEL_98;
    }
  }
  while (1)
  {
    v57 = (unint64_t)v55[1];
    if (v57 == v51)
      break;
    if (v57 >= *(_QWORD *)&v48)
      v57 %= *(_QWORD *)&v48;
    if (v57 != v53)
      goto LABEL_98;
LABEL_67:
    v55 = (uint64_t **)*v55;
    if (!v55)
      goto LABEL_98;
  }
  if (v55[2] != v131)
    goto LABEL_67;
LABEL_91:
  *(_QWORD *)&v139 = v55[3];
  v134 = (const char *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v139) + 2);
  v64 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 88), (uint64_t *)&v134);
  if (!v64
    || (v132[0] = v139,
        (v65 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v64 + 3, v132)) == 0))
  {
LABEL_98:
    v67 = 0;
    goto LABEL_99;
  }
  v66 = (char *)(id)v65[3];
  v67 = v66;
  if (v66)
  {
    objc_msgSend(v66, "mpsndarray");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = (uint64_t **)GPURegionRuntime::getStaticType(a1, (uint64_t)v131);
    getMPSShapeFromMLIR(v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_alloc_init(MEMORY[0x1E0CC7030]);
    objc_msgSend(v71, "setLabel:", CFSTR("reshapeAliasedTensor"));
    objc_msgSend(v71, "reshapeWithCommandBuffer:sourceArray:shape:destinationArray:", v125, v68, v70, 0);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    if (v72)
    {
      v13 = -[MPSGraphTensorData initWithMPSNDArray:]([MPSGraphTensorData alloc], "initWithMPSNDArray:", v72);
      BaseRuntime::setTensorDataToDataMap(a1, v131, v13);
    }

    if (v72)
      goto LABEL_140;
  }
LABEL_99:

  v73 = v131;
  v74 = v125;
  v75 = v36;
  v76 = v73[1];
  v67 = (char *)(v76 & 0xFFFFFFFFFFFFFFF8);
  if ((v76 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v116 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v117 = 650;
    v118 = "Casting.h";
    v119 = "dyn_cast";
    goto LABEL_176;
  }
  if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor((uint64_t **)(v76 & 0xFFFFFFFFFFFFFFF8)))
  {
    v67 = 0;
    v134 = 0;
    v135 = 0;
    goto LABEL_137;
  }
  InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor((uint64_t **)v67);
  if (!InterfaceFor)
  {
    v116 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
    v117 = 98;
    v118 = "InterfaceSupport.h";
    v119 = "Interface";
LABEL_176:
    __assert_rtn(v119, v118, v117, v116);
  }
  v134 = v67;
  v135 = InterfaceFor;
  if (!v67)
    goto LABEL_137;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v134))
    goto LABEL_136;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134);
  if (v79)
  {
    v80 = 8 * v79;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v80 -= 8;
      if (!v80)
        goto LABEL_110;
    }
    goto LABEL_136;
  }
LABEL_110:
  v81 = (_QWORD *)*v73;
  v132[0] = 0;
  if (!v81)
    goto LABEL_136;
  v82 = 0;
  do
  {
    v83 = v81[2];
    if (v83)
    {
      *(_QWORD *)&v139 = llvm::DefaultDoCastIfPossible<mlir::mps::ConcatOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConcatOp,mlir::Operation *,void>>::doCastIfPossible(v81[2]);
      if ((_QWORD)v139
        && !mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v139))
      {
        ++v82;
        v132[0] = v139;
      }
      else if (llvm::DefaultDoCastIfPossible<mlir::mps::StridedSliceOp,mlir::Operation *,llvm::CastInfo<mlir::mps::StridedSliceOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::SliceOp,mlir::Operation *,llvm::CastInfo<mlir::mps::SliceOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::CropOp,mlir::Operation *,llvm::CastInfo<mlir::mps::CropOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::ReshapeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReshapeOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::TransposeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::TransposeOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::PermuteOp,mlir::Operation *,llvm::CastInfo<mlir::mps::PermuteOp,mlir::Operation *,void>>::doCastIfPossible(v83)
             || llvm::DefaultDoCastIfPossible<mlir::mps::Flatten2DOp,mlir::Operation *,llvm::CastInfo<mlir::mps::Flatten2DOp,mlir::Operation *,void>>::doCastIfPossible(v83))
      {
        ++v82;
      }
    }
    v81 = (_QWORD *)*v81;
  }
  while (v81);
  if (v82 != 1 || !v132[0])
    goto LABEL_136;
  if (!*(_DWORD *)(v132[0] + 36))
    __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
  if (!isStaticMPSType((uint64_t **)(*(_QWORD *)(v132[0] - 8) & 0xFFFFFFFFFFFFFFF8)))
  {
LABEL_136:
    v67 = 0;
    goto LABEL_137;
  }
  if (!*(_DWORD *)(v132[0] + 36))
    __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
  (*(void (**)(uint64_t, uint64_t, id, _BOOL4, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, v132[0] - 16, v74, v123, 0, 1);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  if (v84)
  {
    v120 = v84;
    Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)v132);
    v87 = v86;
    if (!v86)
      __assert_rtn("tryConcatAliasedTarget", "MPSRuntime.mm", 831, "inputs.size() > 0");
    v88 = Values;
    v89 = objc_msgSend(v75, "numberOfDimensions");
    Axis = mlir::mps::ConcatOp::getAxis((mlir::mps::ConcatOp *)v132);
    v91 = 0;
    v92 = 0;
    v93 = v89 + ~RuntimeUtils::getAxis(Axis, v89);
    if (!v89)
      v93 = 0;
    v121 = v93;
    v122 = 0;
    v94 = (uint64_t **)(v88 + 24);
    do
    {
      v104 = *v94;
      v105 = *v94 == v73;
      if (!(v91 & 1 | v105))
      {
        v141 = 0u;
        v142 = 0u;
        v139 = 0u;
        v140 = 0u;
        v106 = getMPSSizeVector((uint64_t **)(v104[1] & 0xFFFFFFFFFFFFFFF8), &v139);
        if (v106)
        {
          if (v121 < v106)
            v122 += *((unsigned int *)&v139 + (v121 & 0xF));
        }
        else
        {
          ++v122;
        }
      }
      v92 |= v91 & v105;
      v94 += 4;
      v91 |= v105;
      --v87;
    }
    while (v87);
    if ((v92 & 1) != 0)
    {
      v67 = 0;
      v84 = v120;
    }
    else
    {
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v107 = getMPSSizeVector((uint64_t **)(v73[1] & 0xFFFFFFFFFFFFFFF8), &v139);
      if (v121 >= v107)
        v108 = v107 == 0;
      else
        v108 = *((_DWORD *)&v139 + (v121 & 0xF));
      objc_msgSend(v120, "mpsndarray");
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v109, "descriptor");
      v110 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v110, "sliceDimension:withSubrange:", v121, objc_msgSend(v110, "sliceRangeForDimension:", v121) + v122, v108);
      objc_msgSend(v120, "mpsndarray");
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v111, "setReadCount:", objc_msgSend(v111, "readCount") + 1);
      objc_msgSend(v111, "safeArrayViewWithCommandBuffer:descriptor:aliasing:", v74, v110, 1);
      v67 = (char *)objc_claimAutoreleasedReturnValue();
      if (!v67)
        __assert_rtn("tryConcatAliasedTarget", "MPSRuntime.mm", 871, "ndarray");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v67, "setReadCount:", getNumberOfUniqueUses(v73));

      v84 = v120;
    }
  }
  else
  {
    v67 = 0;
  }

LABEL_137:
  if (!v67)
  {
    if (v74)
    {
      if (v123 || !*(_BYTE *)(a1 + 224))
      {
        v100 = objc_alloc(MEMORY[0x1E0CC6F50]);
        objc_msgSend(v74, "device");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        v67 = (char *)objc_msgSend(v100, "initWithDevice:descriptor:", v101, v75);

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CC7240], "temporaryNDArrayWithCommandBuffer:descriptor:", v74, v75);
        v67 = (char *)objc_claimAutoreleasedReturnValue();
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v67, "setReadCount:", getNumberOfUniqueUses(v131) + a5);
    }
    else
    {
      v102 = objc_alloc(MEMORY[0x1E0CC6F50]);
      objc_msgSend(*(id *)(a1 + 48), "metalDevice");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      v67 = (char *)objc_msgSend(v102, "initWithDevice:descriptor:", v103, v75);

    }
  }
  v13 = -[MPSGraphTensorData initWithMPSNDArray:device:]([MPSGraphTensorData alloc], "initWithMPSNDArray:device:", v67, *(_QWORD *)(a1 + 48));
  BaseRuntime::setTensorDataToDataMap(a1, v131, v13);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v96 = (objc_msgSend(WeakRetained, "options") & 2) == 0;

  if (!v96)
  {
    v97 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v131);
    getOpName(v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    -[MPSGraphTensorData setLabel:](v13, "setLabel:", v98);

  }
LABEL_140:

LABEL_141:
  return v13;
}

void sub_180DC3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void BaseRuntime::unsetTensorDataFromDataMap(uint64_t a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v8 = a2;
  v7 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v8) + 2);
  __p[0] = &v7;
  v3 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(a1 + 88, &v7, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 24;
  v6 = v8;
  v4 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v3, &v6);
  if (v4)
  {
    std::__hash_table<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>>>::remove(v3, v4, (uint64_t)__p);
    v5 = (id *)__p[0];
    __p[0] = 0;
    if (v5)
    {
      if (v10)

      operator delete(v5);
    }
  }
}

unint64_t GPURegionRuntime::getStaticType(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t DefiningOp;
  _QWORD *v7;
  _QWORD *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  uint64_t **v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v4 = (uint64_t **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 40))(*(_QWORD *)(a1 + 448));
  if (v4)
    return (unint64_t)v4;
  if (isStaticMPSType((uint64_t **)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8)))
    return *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  v22[0] = 0;
  v22[1] = 0;
  v21 = (uint64_t **)v22;
  v24 = a2;
  if (!a2)
    __assert_rtn("matchPattern", "Matchers.h", 402, "value");
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v21, DefiningOp))
  {
    v24 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v23) + 2);
    v7 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 304), &v24);
    if (!v7)
    {
      v9 = (llvm::raw_ostream *)llvm::errs(0);
      v11 = mlir::operator<<(v10, v23);
      v14 = mlir::operator<<(v13, *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
      __assert_rtn("getStaticType", "MPSRuntime_Project.h", 690, "0 && \"value has no static type\"");
    }
    v21 = (uint64_t **)v23;
    v8 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v7 + 3, (uint64_t *)&v21);
    if (!v8)
    {
      v15 = (llvm::raw_ostream *)llvm::errs(0);
      v17 = mlir::operator<<(v16, v23);
      v20 = mlir::operator<<(v19, *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
      __assert_rtn("getStaticType", "MPSRuntime_Project.h", 699, "0 && \"value has no static type\"");
    }
    v4 = (uint64_t **)v8[3];
    if ((isStaticMPSType(v4) & 1) == 0)
      __assert_rtn("getStaticType", "MPSRuntime_Project.h", 702, "isStaticMPSType(ty)");
    return (unint64_t)v4;
  }
  return mlir::ElementsAttr::getType((mlir::ElementsAttr *)v22);
}

BOOL valueNeedsReturnAlloc(_QWORD *a1)
{
  uint64_t DefiningOp;
  _BOOL8 result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  _QWORD *AttrData;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  __int16 v22;
  _QWORD v23[5];

  v16 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  if (DefiningOp
    && llvm::DefaultDoCastIfPossible<mlir::mps::CallOp,mlir::Operation *,llvm::CastInfo<mlir::mps::CallOp,mlir::Operation *,void>>::doCastIfPossible(DefiningOp))
  {
    return 1;
  }
  v3 = v16;
  v4 = (_QWORD *)*v16;
  if (*v16)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4[2] + 48);
      v6 = *(void **)(v5 + 16);
      if (v6 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v23[0] = *(_QWORD *)(v5 + 8);
        AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
        if (v8 == 8 && *AttrData == 0x6C6C61632E73706DLL)
        {
          v22 = 1283;
          v19 = "classof on '";
          v20 = "mps.call";
          v9 = 8;
          goto LABEL_31;
        }
      }
      else if (v6 == &mlir::detail::TypeIDResolver<mlir::mps::CallOp,void>::id)
      {
        return 1;
      }
      v4 = (_QWORD *)*v4;
      if (!v4)
      {
        v3 = v16;
        break;
      }
    }
  }
  if ((isStaticMPSType((uint64_t **)(v3[1] & 0xFFFFFFFFFFFFFFF8)) & 1) == 0)
  {
    v10 = (_QWORD *)*v16;
    if (*v16)
    {
      LOBYTE(result) = 0;
      while (1)
      {
        if (result)
        {
          result = 1;
        }
        else
        {
          v11 = *(_QWORD *)(v10[2] + 48);
          v12 = *(void **)(v11 + 16);
          if (v12 == &mlir::detail::TypeIDResolver<void,void>::id)
          {
            v23[0] = *(_QWORD *)(v11 + 8);
            v13 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            if (v14 == 11 && *v13 == 0x7465722E636E7566 && *(_QWORD *)((char *)v13 + 3) == 0x6E72757465722E63)
            {
              v22 = 1283;
              v19 = "classof on '";
              v20 = "func.return";
              v9 = 11;
LABEL_31:
              v21 = v9;
              v17 = "' failed due to the operation not being registered";
              v18 = 259;
              llvm::operator+((uint64_t *)&v19, (uint64_t *)&v17, (uint64_t)v23);
              llvm::report_fatal_error((llvm::Twine *)v23, 1);
            }
            result = 0;
          }
          else
          {
            result = v12 == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id;
          }
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
          return result;
      }
    }
  }
  return 0;
}

BOOL valueCanBeTemporary(_QWORD *a1)
{
  uint64_t ParentBlock;
  _QWORD *v3;
  mlir::Block *v4;
  uint64_t v5;
  mlir::Block *v6;
  uint64_t v7;
  void *v8;
  _QWORD *AttrData;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t ParentOp;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  __int16 v37;
  _QWORD v38[5];

  v31 = a1;
  ParentBlock = mlir::Value::getParentBlock((mlir::Value *)&v31);
  v3 = (_QWORD *)*v31;
  if (!*v31)
    return !valueNeedsReturnAlloc(a1);
  v4 = (mlir::Block *)ParentBlock;
  while (1)
  {
    v5 = v3[2];
    v6 = *(mlir::Block **)(v5 + 16);
    v7 = *(_QWORD *)(mlir::Block::getParentOp(v6) + 48);
    v8 = *(void **)(v7 + 16);
    if (v8 == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v38[0] = *(_QWORD *)(v7 + 8);
      AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v38);
      if (v10 == 13 && *AttrData == 0x6974732E7873706DLL && *(_QWORD *)((char *)AttrData + 5) == 0x6465686374697473)
      {
        v37 = 1283;
        v34 = "classof on '";
        v35 = "mpsx.stitched";
        v30 = 13;
LABEL_48:
        v36 = v30;
        v32 = "' failed due to the operation not being registered";
        v33 = 259;
        llvm::operator+((uint64_t *)&v34, (uint64_t *)&v32, (uint64_t)v38);
        llvm::report_fatal_error((llvm::Twine *)v38, 1);
      }
    }
    else if (v8 == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
    {
      v6 = *(mlir::Block **)(mlir::Block::getParentOp(v6) + 16);
    }
    v12 = *(_QWORD *)(v5 + 48);
    v13 = *(void **)(v12 + 16);
    if (v13 != &mlir::detail::TypeIDResolver<void,void>::id)
      break;
    v38[0] = *(_QWORD *)(v12 + 8);
    v14 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v38);
    if (v15 == 19)
    {
      v16 = *v14 == 0x73696C2E7873706DLL && v14[1] == 0x625F687375705F74;
      if (v16 && *(_QWORD *)((char *)v14 + 11) == 0x6B6361625F687375)
      {
        v37 = 1283;
        v34 = "classof on '";
        v35 = "mpsx.list_push_back";
        v30 = 19;
        goto LABEL_48;
      }
    }
LABEL_27:
    while (v6 != v4)
    {
      ParentOp = mlir::Block::getParentOp(v6);
      v19 = *(_QWORD *)(ParentOp + 48);
      v20 = *(void **)(v19 + 16);
      if (v20 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v38[0] = *(_QWORD *)(v19 + 8);
        v21 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v38);
        if (v22 == 9 && *(_QWORD *)v21 == 0x6C6968772E666373 && *(_BYTE *)(v21 + 8) == 101)
        {
          v37 = 1283;
          v34 = "classof on '";
          v35 = "scf.while";
          v30 = 9;
          goto LABEL_48;
        }
      }
      else if (v20 == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
      {
        return 0;
      }
      v24 = *(_QWORD *)(ParentOp + 48);
      v25 = *(void **)(v24 + 16);
      if (v25 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v38[0] = *(_QWORD *)(v24 + 8);
        v26 = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v38);
        if (v27 == 7 && *v26 == 778462067 && *(_DWORD *)((char *)v26 + 3) == 1919903278)
        {
          v37 = 1283;
          v34 = "classof on '";
          v35 = "scf.for";
          v30 = 7;
          goto LABEL_48;
        }
      }
      else if (v25 == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
      {
        return 0;
      }
      v6 = *(mlir::Block **)(ParentOp + 16);
    }
    v3 = (_QWORD *)*v3;
    if (!v3)
      return !valueNeedsReturnAlloc(a1);
  }
  if (v13 != &mlir::detail::TypeIDResolver<mlir::mpsx::ListPushBackOp,void>::id)
    goto LABEL_27;
  return 0;
}

id GPURegionRuntime::allocateTensorDataForTargets(GPURegionRuntime *this, mlir::Operation *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  uint64_t DefiningOp;
  uint64_t Input;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  MPSGraphTensorData *v16;
  uint64_t v17;
  void *v18;
  MPSGraphTensorData *v19;
  int v21;
  const char *v22;
  const char *v23;
  const char *v24;
  int v25;
  const char *v26;
  const char *v27;
  const char *v28;
  id v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;

  v29 = (id)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 24;
      do
      {
        while (1)
        {
          if ((*((_BYTE *)a2 + 46) & 0x80) == 0)
          {
            v21 = 960;
            v22 = "hasOperandStorage && \"expected operation to have operand storage\"";
            v23 = "Operation.h";
            v24 = "getOperandStorage";
            goto LABEL_29;
          }
          if (v5 >= *((unsigned int *)a2 + 17))
          {
            v21 = 443;
            v24 = "operator[]";
            v23 = "ArrayRef.h";
            v22 = "Index < this->size() && \"Invalid index!\"";
LABEL_29:
            __assert_rtn(v24, v23, v21, v22);
          }
          v30 = *(uint64_t **)(*((_QWORD *)a2 + 9) + v6);
          v33 = v30;
          v32 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v33) + 2);
          v8 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)this + 11, &v32);
          if (!v8)
            break;
          v31 = v33;
          v9 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v8 + 3, (uint64_t *)&v31);
          if (!v9)
            break;
          v10 = (id)v9[3];
          if (!v10)
            break;
          v7 = v10;
          objc_msgSend(v29, "addObject:", v10);
LABEL_5:

          ++v5;
          v6 += 32;
          if (v4 == v5)
            return v29;
        }
        if ((isStaticMPSType((uint64_t **)(v30[1] & 0xFFFFFFFFFFFFFFF8)) & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v7);
          goto LABEL_5;
        }
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v30);
        if (!DefiningOp)
        {
          v33 = 0;
LABEL_24:
          v15 = 16;
          goto LABEL_25;
        }
        v33 = (uint64_t *)llvm::DefaultDoCastIfPossible<mlir::placement::MemrefToTensor,mlir::Operation *,llvm::CastInfo<mlir::placement::MemrefToTensor,mlir::Operation *,void>>::doCastIfPossible(DefiningOp);
        if (!v33)
          goto LABEL_24;
        Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v33);
        v13 = *(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v13)
        {
          v25 = 650;
          v26 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
          v27 = "Casting.h";
          v28 = "dyn_cast";
          goto LABEL_32;
        }
        if (!*(_QWORD *)v13)
        {
          v25 = 160;
          v28 = "getAbstractType";
          v27 = "TypeSupport.h";
          v26 = "abstractType && \"Malformed type storage object.\"";
LABEL_32:
          __assert_rtn(v28, v27, v25, v26);
        }
        if (*(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
          v14 = *(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8;
        else
          v14 = 0;
        if ((getMemRefRowBytes(v14) & 0x3F) != 0)
          v15 = 16;
        else
          v15 = 64;
LABEL_25:
        v16 = [MPSGraphTensorData alloc];
        v17 = *((_QWORD *)this + 6);
        getMPSShapeFromMLIR((uint64_t **)(v30[1] & 0xFFFFFFFFFFFFFFF8));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = -[MPSGraphTensorData initWithDevice:rowBytesAlignment:shape:dataType:](v16, "initWithDevice:rowBytesAlignment:shape:dataType:", v17, v15, v18, getMPSDataType((_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF8)));

        BaseRuntime::setTensorDataToDataMap((uint64_t)this, v30, v19);
        objc_msgSend(v29, "addObject:", v19);

        ++v5;
        v6 += 32;
      }
      while (v4 != v5);
    }
  }
  return v29;
}

void sub_180DC496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC4980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC4994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_180DC49AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_180DC49C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC49D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC49EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_180DC4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_180DC4A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC4A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC4A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_180DC4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void GPURegionRuntime::copyNDArrayToTarget(_QWORD *a1, void *a2, void *a3, id *a4, void *a5, void *a6, uint64_t *a7, uint64_t a8)
{
  id v15;
  id v16;
  int *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t NumberOfUniqueUses;
  void *v28;
  void *v29;
  BOOL v30;
  uint64_t v31;
  MPSGraphTensorData *v32;
  MPSGraphTensorData *v33;
  id v34;
  id v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v34 = a2;
  v35 = a3;
  v15 = a5;
  v16 = a6;
  v17 = (int *)MEMORY[0x1E0CC7278];
  if (v16
    || *((_BYTE *)v15 + (int)*MEMORY[0x1E0CC7278])
    && !valueCanBeTemporary(a7)
    && ((*(void (**)(_QWORD *, uint64_t *, id, uint64_t, _QWORD, uint64_t))(*a1 + 80))(a1, a7, v35, 1, 0, 1), (v16 = (id)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v16, "mpsndarray", v34);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!*a4)
    {
      v19 = objc_alloc(MEMORY[0x1E0CC7030]);
      objc_msgSend(v18, "device");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v19, "initWithDevice:", v20);
      v22 = *a4;
      *a4 = (id)v21;

      objc_msgSend(*a4, "setOptions:", objc_msgSend(*a4, "options") | 1);
    }
    objc_msgSend(v18, "buffer");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "buffer");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23 != v24)
    {
      if (*((_BYTE *)v15 + *v17) && !objc_msgSend(v15, "readCount"))
        __assert_rtn("copyNDArrayToTarget", "MPSRuntime.mm", 1091, "((MPSTemporaryNDArray *)result).readCount != 0");
      v25 = *a4;
      v36[0] = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "encodeToMPSCommandEncoder:commandBuffer:sourceArrays:destinationArray:", v34, v35, v26, v18);

    }
    if (*((_BYTE *)v18 + *v17))
    {
      NumberOfUniqueUses = getNumberOfUniqueUses(a7);
      objc_msgSend(v18, "buffer");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "buffer");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v28 == v29;

      v31 = NumberOfUniqueUses + a8;
      if (v30)
        v31 = v31 + objc_msgSend(v18, "readCount") - 1;
      objc_msgSend(v18, "setReadCount:", v31);
    }
    v32 = (MPSGraphTensorData *)v16;

    v33 = v32;
  }
  else
  {
    if (*((_BYTE *)v15 + *v17))
      objc_msgSend(v15, "setReadCount:", a8 + getNumberOfUniqueUses(a7) + objc_msgSend(v15, "readCount") - 1);
    v32 = 0;
    v33 = -[MPSGraphTensorData initWithMPSNDArray:device:]([MPSGraphTensorData alloc], "initWithMPSNDArray:device:", v15, a1[6]);
  }
  BaseRuntime::setTensorDataToDataMap((uint64_t)a1, a7, v33);

}

void sub_180DC4D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void GPURegionRuntime::waitAndReadIntTensorData(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t **StaticType;
  void *v36;
  uint64_t MPSDataType;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t i;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  int8x8_t v74;
  uint8x8_t v75;
  unint64_t v76;
  uint64_t ***v77;
  uint64_t **v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  void *v82;
  uint64_t *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _OWORD *v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  id v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[32];
  _BYTE v121[128];
  char *v122;
  uint64_t v123;
  _QWORD v124[6];

  v124[4] = *MEMORY[0x1E0C80C00];
  v122 = (char *)v124;
  v123 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>((uint64_t)a3, (uint64_t)&v122))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (!(_DWORD)v123)
      goto LABEL_132;
    v8 = 0;
    v9 = v122;
    v10 = &v122[8 * v123];
    while (1)
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v8 >= v13)
        break;
      *(_QWORD *)v8 = v12;
      v11 = (uint64_t)(v8 + 8);
LABEL_5:
      *(_QWORD *)(a4 + 8) = v11;
      v9 += 8;
      v8 = (char *)v11;
      if (v9 == v10)
        goto LABEL_132;
    }
    v14 = *(char **)a4;
    v15 = (uint64_t)&v8[-*(_QWORD *)a4];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      std::vector<long>::__throw_length_error[abi:ne180100]();
    v18 = v13 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      *v21 = v12;
      v11 = (uint64_t)(v21 + 1);
      v22 = v8 - v14;
      if (v8 == v14)
        goto LABEL_21;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = v12;
      v11 = 8 * v16 + 8;
      v22 = v8 - v14;
      if (v8 == v14)
        goto LABEL_21;
    }
    v23 = v22 - 8;
    if (v23 >= 0x168)
    {
      v26 = (v8 - 8 - v14) & 0xFFFFFFFFFFFFFFF8;
      if (&v20[v15 - 8 - v26] > &v20[v15 - 8])
      {
        v24 = v8;
      }
      else if (&v8[-v26 - 8] > v8 - 8)
      {
        v24 = v8;
      }
      else if ((unint64_t)(v8 - v20 - v15) >= 0x20)
      {
        v27 = (v23 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v8[-v28];
        v21 = (_QWORD *)((char *)v21 - v28);
        v29 = &v20[8 * v16 - 16];
        v30 = v8 - 16;
        v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_21:
          *(_QWORD *)a4 = v21;
          *(_QWORD *)(a4 + 8) = v11;
          *(_QWORD *)(a4 + 16) = &v20[8 * v19];
          if (v14)
            operator delete(v14);
          goto LABEL_5;
        }
      }
      else
      {
        v24 = v8;
      }
    }
    else
    {
      v24 = v8;
    }
    do
    {
      v25 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      *--v21 = v25;
    }
    while (v24 != v14);
    goto LABEL_21;
  }
  if (!a2 && MTLReportFailureTypeEnabled())
    MTLReportFailure();
  v118 = a3;
  v117 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v118) + 2);
  v33 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 88), &v117);
  if (v33
    && (v116 = v118,
        (v34 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v33 + 3, (uint64_t *)&v116)) != 0))
  {
    v109 = (id)v34[3];
  }
  else
  {
    v109 = 0;
  }
  StaticType = (uint64_t **)GPURegionRuntime::getStaticType(a1, (uint64_t)a3);
  getMPSShapeFromMLIR(StaticType);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  MPSDataType = getMPSDataType(StaticType);
  v38 = MPSDataType;
  if ((int)MPSDataType > 536870943)
  {
    if ((_DWORD)MPSDataType != 536870944 && (_DWORD)MPSDataType != 536870976)
LABEL_142:
      __assert_rtn("waitAndReadIntTensorData", "MPSRuntime.mm", 1143, "dataType == MPSDataTypeInt32 || dataType == MPSDataTypeUInt32 || dataType == MPSDataTypeInt64 || dataType == MPSDataTypeUInt64");
  }
  else if ((_DWORD)MPSDataType != 32 && (_DWORD)MPSDataType != 64)
  {
    goto LABEL_142;
  }
  v107 = a2;
  v110 = a1;
  v114 = 0u;
  v115 = 0u;
  v112 = 0u;
  v113 = 0u;
  v39 = v36;
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v112, v121, 16, v36);
  v41 = (unsigned __int16)v38 >> 3;
  v108 = v41;
  if (v40)
  {
    v42 = *(_QWORD *)v113;
    v41 = (unsigned __int16)v38 >> 3;
    do
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v113 != v42)
          objc_enumerationMutation(v39);
        v44 = *(id *)(*((_QWORD *)&v112 + 1) + 8 * i);
        v45 = objc_msgSend(v44, "unsignedLongValue");

        v41 *= v45;
      }
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v112, v121, 16);
    }
    while (v40);
  }

  if (!v41)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_131;
  }
  v46 = (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v110 + 448) + 64))(*(_QWORD *)(v110 + 448), a3);
  if (v46)
  {
    v118 = v120;
    v119 = 0x400000000;
    mlir::getIntValues<long long>(v46, v47, (uint64_t)&v118, 1);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v48 = (char *)v118;
    if (!(_DWORD)v119)
    {
LABEL_87:
      if (v48 != v120)
        free(v48);
      goto LABEL_131;
    }
    v49 = 0;
    v50 = (char *)v118 + 8 * v119;
    v111 = v50;
    while (1)
    {
      while (1)
      {
        v51 = *(_QWORD *)v48;
        v52 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v49 >= v52)
          break;
        *(_QWORD *)v49 = v51;
        v49 += 8;
        *(_QWORD *)(a4 + 8) = v49;
        v48 += 8;
        if (v48 == v50)
          goto LABEL_86;
      }
      v53 = *(char **)a4;
      v54 = (uint64_t)&v49[-*(_QWORD *)a4];
      v55 = v54 >> 3;
      v56 = (v54 >> 3) + 1;
      if (v56 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v57 = v52 - (_QWORD)v53;
      if (v57 >> 2 > v56)
        v56 = v57 >> 2;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v58 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        if (v58 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v59 = operator new(8 * v58);
        v60 = &v59[8 * v55];
        *v60 = v51;
        v61 = (uint64_t)(v60 + 1);
        v62 = v49 - v53;
        if (v49 == v53)
          goto LABEL_71;
      }
      else
      {
        v59 = 0;
        v60 = (_QWORD *)(8 * v55);
        *(_QWORD *)(8 * v55) = v51;
        v61 = 8 * v55 + 8;
        v62 = v49 - v53;
        if (v49 == v53)
          goto LABEL_71;
      }
      v63 = v62 - 8;
      if (v63 >= 0x168)
      {
        v66 = (v49 - 8 - v53) & 0xFFFFFFFFFFFFFFF8;
        if (&v59[v54 - 8 - v66] > &v59[v54 - 8])
        {
          v64 = v49;
        }
        else if (&v49[-v66 - 8] > v49 - 8)
        {
          v64 = v49;
        }
        else if ((unint64_t)(v49 - v59 - v54) >= 0x20)
        {
          v67 = (v63 >> 3) + 1;
          v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          v64 = &v49[-v68];
          v60 = (_QWORD *)((char *)v60 - v68);
          v69 = &v59[8 * v55 - 16];
          v70 = v49 - 16;
          v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            *v69 = v72;
            v69 -= 2;
            v70 -= 32;
            v71 -= 4;
          }
          while (v71);
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_71;
        }
        else
        {
          v64 = v49;
        }
      }
      else
      {
        v64 = v49;
      }
      do
      {
        v65 = *((_QWORD *)v64 - 1);
        v64 -= 8;
        *--v60 = v65;
      }
      while (v64 != v53);
LABEL_71:
      *(_QWORD *)a4 = v60;
      *(_QWORD *)(a4 + 8) = v61;
      *(_QWORD *)(a4 + 16) = &v59[8 * v58];
      if (v53)
        operator delete(v53);
      v50 = v111;
      *(_QWORD *)(a4 + 8) = v61;
      v48 += 8;
      v49 = (char *)v61;
      if (v48 == v111)
      {
LABEL_86:
        v48 = (char *)v118;
        goto LABEL_87;
      }
    }
  }
  v73 = (uint64_t *)(v110 + 384);
  v74 = *(int8x8_t *)(v110 + 392);
  if (!*(_QWORD *)&v74)
    goto LABEL_109;
  v75 = (uint8x8_t)vcnt_s8(v74);
  v75.i16[0] = vaddlv_u8(v75);
  if (v75.u32[0] > 1uLL)
  {
    v76 = v41;
    if (v41 >= *(_QWORD *)&v74)
      v76 = v41 % *(_QWORD *)&v74;
  }
  else
  {
    v76 = (*(_QWORD *)&v74 - 1) & v41;
  }
  v77 = *(uint64_t ****)(*v73 + 8 * v76);
  if (!v77 || (v78 = *v77) == 0)
  {
LABEL_109:
    objc_msgSend(*(id *)(v110 + 48), "metalDevice");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = (uint64_t *)objc_msgSend(v82, "newBufferWithLength:options:", v41, 0);

    std::__hash_table<std::__hash_value_type<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>,std::__unordered_map_hasher<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto9MTLBuffer}* {__strong}>>::__emplace_unique_key_args<unsigned long,unsigned long &,objc_object  {objcproto9MTLBuffer}*&>(v73, v41, v41, v83);
    goto LABEL_110;
  }
  if (v75.u32[0] < 2uLL)
  {
    v79 = *(_QWORD *)&v74 - 1;
    while (1)
    {
      v81 = v78[1];
      if (v81 == (uint64_t *)v41)
      {
        if (v78[2] == (uint64_t *)v41)
          goto LABEL_135;
      }
      else if (((unint64_t)v81 & v79) != v76)
      {
        goto LABEL_109;
      }
      v78 = (uint64_t **)*v78;
      if (!v78)
        goto LABEL_109;
    }
  }
  while (1)
  {
    v80 = (unint64_t)v78[1];
    if (v80 == v41)
      break;
    if (v80 >= *(_QWORD *)&v74)
      v80 %= *(_QWORD *)&v74;
    if (v80 != v76)
      goto LABEL_109;
LABEL_99:
    v78 = (uint64_t **)*v78;
    if (!v78)
      goto LABEL_109;
  }
  if (v78[2] != (uint64_t *)v41)
    goto LABEL_99;
LABEL_135:
  v83 = v78[3];
LABEL_110:
  objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:shape:", v38, v39);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "setPreferPackedRows:", 1);
  v85 = *(void **)(v107 + 72);
  if (v85)
  {
    objc_msgSend(v85, "endEncoding");
    v86 = *(void **)(v107 + 72);
    *(_QWORD *)(v107 + 72) = 0;

  }
  objc_msgSend(v109, "mpsndarray");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:", *(_QWORD *)(v107 + 8), v83, v38, 0, 0);

  objc_msgSend(*(id *)(v107 + 8), "rootCommandBuffer");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  (**(void (***)(uint64_t))v107)(v107);
  objc_msgSend(v88, "waitUntilCompleted");
  v89 = *(_QWORD *)(v110 + 424);
  if (v89)
    ++*(_QWORD *)(v89 + 192);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (v41 >= v108)
    std::vector<long long>::__append(a4, v41 / v108);
  if ((v38 & 0xDFFFFFFF) == 0x20)
  {
    v90 = (char *)malloc_type_malloc(v41, 0x460EDC14uLL);
    memcpy(v90, (const void *)objc_msgSend(objc_retainAutorelease(v83), "contents"), v41);
    v91 = *(char **)a4;
    v92 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v92)
    {
      v93 = v92 >> 3;
      if (v93 <= 1)
        v93 = 1;
      if (v93 < 8)
      {
        v94 = 0;
        goto LABEL_127;
      }
      v94 = v93 & 0xFFFFFFFFFFFFFFF8;
      v95 = v90 + 16;
      v96 = v91 + 32;
      v97 = v93 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v98 = *((_OWORD *)v95 - 1);
        *(_QWORD *)&v99 = (int)v98;
        *((_QWORD *)&v99 + 1) = SDWORD1(v98);
        v100 = v99;
        *(_QWORD *)&v99 = SDWORD2(v98);
        *((_QWORD *)&v99 + 1) = SHIDWORD(v98);
        v101 = v99;
        *(_QWORD *)&v99 = (int)*(_OWORD *)v95;
        *((_QWORD *)&v99 + 1) = (int)HIDWORD(*(_QWORD *)v95);
        v102 = v99;
        *(_QWORD *)&v99 = (int)*((_QWORD *)v95 + 1);
        *((_QWORD *)&v99 + 1) = (int)HIDWORD(*(_OWORD *)v95);
        *(v96 - 2) = v100;
        *(v96 - 1) = v101;
        *v96 = v102;
        v96[1] = v99;
        v96 += 4;
        v95 += 32;
        v97 -= 8;
      }
      while (v97);
      if (v93 != v94)
      {
LABEL_127:
        v103 = v93 - v94;
        v104 = &v91[8 * v94];
        v105 = &v90[4 * v94];
        do
        {
          v106 = *(int *)v105;
          v105 += 4;
          *(_QWORD *)v104 = v106;
          v104 += 8;
          --v103;
        }
        while (v103);
      }
    }
    free(v90);
  }
  else
  {
    if ((v38 | 0x20000000) != 0x20000040)
      __assert_rtn("waitAndReadIntTensorData", "MPSRuntime.mm", 1233, "0 && \"unsupported data type\"");
    memcpy(*(void **)a4, (const void *)objc_msgSend(objc_retainAutorelease(v83), "contents"), v41);
  }

LABEL_131:
LABEL_132:
  if (v122 != (char *)v124)
    free(v122);
}

void sub_180DC57D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 160);
  if (v28 != a14)
  {
    free(v28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void GPURegionRuntime::waitAndReadFPTensorData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int16x8_t **a4@<X8>)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int32 v11;
  unint64_t v12;
  int16x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  int16x8_t *v20;
  int64_t v21;
  unint64_t v22;
  int16x8_t *v23;
  __int32 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t DefiningOp;
  unint64_t v33;
  uint64_t OperandRange;
  void *v35;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t **StaticType;
  void *v41;
  uint64_t MPSDataType;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t k;
  id v48;
  uint64_t v49;
  uint64_t *v50;
  int8x8_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint64_t ***v54;
  uint64_t **v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  void *v59;
  uint64_t *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  int16x8_t *v68;
  float16x4_t *v69;
  int16x8_t *v70;
  int16x8_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int16x8_t v77;
  int16x8_t *v78;
  int16x8_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t *v87;
  unint64_t v88;
  unint64_t v89;
  int16x8_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  int16x8_t *v96;
  __int16 *v97;
  __int16 v98;
  uint64_t v99;
  void *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unint64_t NumElements;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  uint64_t **Type;
  uint64_t InterfaceFor;
  const char *v114;
  int v115;
  const char *v116;
  const char *v117;
  float16x4_t *v118;
  float32x4_t *v119;
  unint64_t v120;
  float16x8_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int v124;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  float v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;
  int8x8_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  float v137;
  float v138;
  int16x4_t v139;
  int16x4_t v140;
  uint64_t v141;
  unint64_t v142;
  float *v143;
  uint64_t v144;
  uint64_t v145;
  float *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  float *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  float v161;
  float *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  float *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  float v170;
  float *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  float *v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  float *v179;
  unint64_t v180;
  uint64_t v181;
  int64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  float *v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  float *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  uint64_t v197;
  unsigned __int8 *v204;
  unint64_t v205;
  uint64_t v208;
  int64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  unsigned int v212;
  unint64_t v213;
  _BYTE *v214;
  unint64_t v215;
  unint64_t v216;
  float *v217;
  unint64_t v218;
  float v219;
  uint64_t v220;
  unint64_t v221;
  float *v222;
  uint64_t v223;
  double v224;
  uint64_t v225;
  float v226;
  float v227;
  float *v228;
  unint64_t v229;
  float v230;
  uint64_t i;
  uint64_t v232;
  _OWORD *v233;
  unint64_t v234;
  __int128 v235;
  float *v236;
  float32x4_t *v237;
  __int128 v238;
  unint64_t v239;
  float32x4_t v240;
  float *v241;
  uint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int IntOrFloatBitWidth;
  float16x4_t v252;
  uint64_t j;
  uint64_t v254;
  int16x8_t *v255;
  char *v256;
  char *v257;
  __int32 v258;
  __int32 v259;
  int16x8_t *v260;
  int16x8_t *v261;
  int16x8_t *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  int16x8_t *v269;
  int64_t v270;
  unint64_t v271;
  int16x8_t *v272;
  __int32 v273;
  int16x8_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  int16x8_t *v281;
  int64_t v282;
  unint64_t v283;
  int16x8_t *v284;
  __int32 v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int16x8_t *v290;
  int16x8_t *v291;
  uint64_t v292;
  int16x8_t v293;
  uint64_t v294;
  uint64_t v295;
  int16x8_t *v296;
  int16x8_t *v297;
  uint64_t v298;
  int16x8_t v299;
  uint64_t v300;
  char *v301;
  void *v304;
  unint64_t v305;
  id v306;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  uint64_t Value;
  uint64_t v317;
  uint64_t v318[2];
  __int128 v319;
  _BYTE v320[128];
  unsigned __int8 *v321;
  uint64_t v322;
  _BYTE v323[32];
  char *v324;
  uint64_t v325;
  _BYTE v326[16];
  _BYTE *ArgOperands;
  unint64_t v328;
  _QWORD v329[7];
  float32x4x2_t v330;

  v329[5] = *MEMORY[0x1E0C80C00];
  v324 = v326;
  v325 = 0x400000000;
  if (mlir::matchConstantWithFloatVector<float>(a3, (uint64_t)&v324))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (!(_DWORD)v325)
      goto LABEL_494;
    v7 = 0;
    v8 = v324;
    v9 = &v324[4 * v325];
    while (1)
    {
      v11 = *(_DWORD *)v8;
      v12 = (unint64_t)a4[2];
      if ((unint64_t)v7 >= v12)
        break;
      *(_DWORD *)v7 = v11;
      v10 = (uint64_t)(v7 + 4);
LABEL_5:
      a4[1] = (int16x8_t *)v10;
      v8 += 4;
      v7 = (char *)v10;
      if (v8 == v9)
        goto LABEL_494;
    }
    v13 = *a4;
    v14 = v7 - (char *)*a4;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      std::vector<long>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(4 * v18);
      v20 = (int16x8_t *)&v19[4 * v15];
      v20->i32[0] = v11;
      v10 = (uint64_t)v20->i64 + 4;
      v21 = v7 - (char *)v13;
      if (v7 == (char *)v13)
        goto LABEL_21;
    }
    else
    {
      v19 = 0;
      v20 = (int16x8_t *)(4 * v15);
      *(_DWORD *)(4 * v15) = v11;
      v10 = 4 * v15 + 4;
      v21 = v7 - (char *)v13;
      if (v7 == (char *)v13)
        goto LABEL_21;
    }
    v22 = v21 - 4;
    if (v22 >= 0xBC)
    {
      v25 = (v7 - 4 - (char *)v13) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v19[v14 - 4 - v25] > &v19[v14 - 4])
      {
        v23 = (int16x8_t *)v7;
      }
      else if (&v7[-v25 - 4] > v7 - 4)
      {
        v23 = (int16x8_t *)v7;
      }
      else if ((unint64_t)(v7 - v19 - v14) >= 0x20)
      {
        v26 = (v22 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v23 = (int16x8_t *)&v7[-v27];
        v20 = (int16x8_t *)((char *)v20 - v27);
        v28 = &v19[4 * v15 - 16];
        v29 = v7 - 16;
        v30 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_21:
          *a4 = v20;
          a4[1] = (int16x8_t *)v10;
          a4[2] = (int16x8_t *)&v19[4 * v18];
          if (v13)
            operator delete(v13);
          goto LABEL_5;
        }
      }
      else
      {
        v23 = (int16x8_t *)v7;
      }
    }
    else
    {
      v23 = (int16x8_t *)v7;
    }
    do
    {
      v24 = v23[-1].i32[3];
      v23 = (int16x8_t *)((char *)v23 - 4);
      v20[-1].i32[3] = v24;
      v20 = (int16x8_t *)((char *)v20 - 4);
    }
    while (v23 != v13);
    goto LABEL_21;
  }
  v321 = v323;
  v322 = 0x400000000;
  v313 = 0uLL;
  if (!a3)
    goto LABEL_42;
  *(_QWORD *)&v319 = &v313;
  ArgOperands = (_BYTE *)a3;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v319, DefiningOp))
    goto LABEL_42;
  ArgOperands = (_BYTE *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v313);
  v328 = v33;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  if (!OperandRange)
    goto LABEL_298;
  if (!*(_QWORD *)OperandRange)
    goto LABEL_414;
  v35 = *(void **)(*(_QWORD *)OperandRange + 136);
  _ZF = v35 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  if (v35 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v37 = OperandRange;
  else
    v37 = 0;
  v312 = v37;
  if (!_ZF)
    goto LABEL_42;
  v99 = *(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v312);
  if (!v99)
    goto LABEL_414;
  v100 = *(void **)(v99 + 136);
  if (v100 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v100 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    v315 = v313;
    ArgOperands = (_BYTE *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v315);
    v328 = v101;
    v102 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
    if (v102)
    {
      if (!*(_QWORD *)v102)
        goto LABEL_414;
      v103 = *(void **)(*(_QWORD *)v102 + 136);
      v104 = v103 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (v103 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v105 = v102;
      else
        v105 = 0;
      v314 = v105;
      if (!v104)
        goto LABEL_313;
      v106 = *(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v314);
      if (!v106)
        goto LABEL_414;
      v107 = *(void **)(v106 + 136);
      if (v107 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v107 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
LABEL_313:
        v114 = "complexTy && complexTy.getElementType().isa<FloatType>() && \"must be a complex float attr\"";
        v115 = 291;
        v116 = "MPSRawAttributeUtils.h";
        v117 = "getComplexFloatValues";
        goto LABEL_415;
      }
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v315);
      NumElements = mlir::ElementsAttr::getNumElements(v315, *((uint64_t *)&v315 + 1));
      v109 = NumElements;
      v110 = v322;
      if (NumElements == v322)
        goto LABEL_148;
      if (NumElements >= v322)
      {
        if (NumElements > HIDWORD(v322))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321, v323, NumElements, 8);
          v110 = v322;
        }
        if (v109 != v110)
          bzero(&v321[8 * v110], 8 * (v109 - v110));
        if (v109 <= HIDWORD(v322))
          goto LABEL_147;
      }
      else if (NumElements <= HIDWORD(v322))
      {
LABEL_147:
        LODWORD(v322) = v109;
        v109 = v109;
LABEL_148:
        v111 = v321;
        v319 = v315;
        Type = (uint64_t **)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v319);
        if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(Type))
        {
          v114 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
          v115 = 566;
          v116 = "Casting.h";
          v117 = "cast";
          goto LABEL_415;
        }
        if (Type)
        {
          InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(Type);
          if (!InterfaceFor)
          {
            v114 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
            v115 = 98;
            v116 = "InterfaceSupport.h";
            v117 = "Interface";
            goto LABEL_415;
          }
        }
        else
        {
          InterfaceFor = 0;
        }
        v318[0] = (uint64_t)Type;
        v318[1] = InterfaceFor;
        v317 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v318);
        v124 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v319);
        ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v319);
        v127 = v126;
        v128 = mlir::ElementsAttr::getNumElements(v319, *((uint64_t *)&v319 + 1));
        if ((v128 & 0x1FFFFFFFFFFFFFFFLL) != v109)
        {
          v114 = "numElements * sizeof(DstT) == outBuffSize && \"invalid output buffer size\"";
          v115 = 196;
          v116 = "MPSRawAttributeUtils.h";
          v117 = "copyElementsAttrData";
          goto LABEL_415;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v317, 8))
        {
          if (v128 >= 1)
          {
            v130 = 0;
            v131 = (float *)(v111 + 4);
            do
            {
              if (v124)
                v132 = 0;
              else
                v132 = v130;
              LOBYTE(v129) = ElementsAttrRawData[v132];
              v129 = (float)LODWORD(v129);
              *(v131 - 1) = v129;
              *v131 = 0.0;
              v131 += 2;
              ++v130;
            }
            while (v128 != v130);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v317, 8))
        {
          if (v128 >= 1)
          {
            v134 = 0;
            v135 = v111 + 4;
            do
            {
              if (v124)
                v136 = 0;
              else
                v136 = v134;
              v133.i8[0] = ElementsAttrRawData[v136];
              v133 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v133)).u64[0];
              *(float *)v133.i32 = (float)v133.i32[0];
              *(v135 - 1) = v133.i32[0];
              *v135 = 0;
              v135 += 2;
              ++v134;
            }
            while (v128 != v134);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v317, 16))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v142 = 0;
            }
            else
            {
              v141 = 0;
              v142 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v143 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v144 = 0;
                else
                  v144 = v141;
                LOWORD(v137) = *(_WORD *)&ElementsAttrRawData[2 * v144];
                if (v124)
                  v145 = 0;
                else
                  v145 = v141 + 1;
                v137 = (float)LODWORD(v137);
                LOWORD(v138) = *(_WORD *)&ElementsAttrRawData[2 * v145];
                v138 = (float)LODWORD(v138);
                *(v143 - 2) = v137;
                *v143 = v138;
                *(v143 - 1) = 0.0;
                v143[1] = 0.0;
                v143 += 4;
                v141 += 2;
              }
              while (v141 != v142);
              if (v128 == v142)
                goto LABEL_423;
            }
            v146 = (float *)&v111[8 * v142 + 4];
            do
            {
              if (v124)
                v147 = 0;
              else
                v147 = v142;
              LOWORD(v137) = *(_WORD *)&ElementsAttrRawData[2 * v147];
              v137 = (float)LODWORD(v137);
              *(v146 - 1) = v137;
              *v146 = 0.0;
              v146 += 2;
              ++v142;
            }
            while (v128 != v142);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v317, 16))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v149 = 0;
            }
            else
            {
              v148 = 0;
              v149 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v150 = v111 + 8;
              do
              {
                if (v124)
                  v151 = 0;
                else
                  v151 = v148;
                if (v124)
                  v152 = 0;
                else
                  v152 = v148 + 1;
                v139.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v151];
                v139 = (int16x4_t)vmovl_s16(v139).u64[0];
                *(float *)v139.i32 = (float)v139.i32[0];
                v140.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v152];
                v140 = (int16x4_t)vmovl_s16(v140).u64[0];
                *(float *)v140.i32 = (float)v140.i32[0];
                *(v150 - 2) = v139.i32[0];
                *v150 = v140.i32[0];
                *(v150 - 1) = 0;
                v150[1] = 0;
                v150 += 4;
                v148 += 2;
              }
              while (v148 != v149);
              if (v128 == v149)
                goto LABEL_423;
            }
            v153 = &v111[8 * v149 + 4];
            do
            {
              if (v124)
                v154 = 0;
              else
                v154 = v149;
              v139.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v154];
              v139 = (int16x4_t)vmovl_s16(v139).u64[0];
              *(float *)v139.i32 = (float)v139.i32[0];
              *((_DWORD *)v153 - 1) = v139.i32[0];
              *(_DWORD *)v153 = 0;
              v153 += 8;
              ++v149;
            }
            while (v128 != v149);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v317, 32))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v156 = 0;
            }
            else
            {
              v155 = 0;
              v156 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v157 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v158 = 0;
                else
                  v158 = v155;
                v159 = *(_DWORD *)&ElementsAttrRawData[4 * v158];
                if (v124)
                  v160 = 0;
                else
                  v160 = v155 + 1;
                v161 = (float)*(unsigned int *)&ElementsAttrRawData[4 * v160];
                *(v157 - 2) = (float)v159;
                *v157 = v161;
                *(v157 - 1) = 0.0;
                v157[1] = 0.0;
                v157 += 4;
                v155 += 2;
              }
              while (v155 != v156);
              if (v128 == v156)
                goto LABEL_423;
            }
            v162 = (float *)&v111[8 * v156 + 4];
            do
            {
              if (v124)
                v163 = 0;
              else
                v163 = v156;
              *(v162 - 1) = (float)*(unsigned int *)&ElementsAttrRawData[4 * v163];
              *v162 = 0.0;
              v162 += 2;
              ++v156;
            }
            while (v128 != v156);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v317, 32))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v165 = 0;
            }
            else
            {
              v164 = 0;
              v165 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v166 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v167 = 0;
                else
                  v167 = v164;
                v168 = *(_DWORD *)&ElementsAttrRawData[4 * v167];
                if (v124)
                  v169 = 0;
                else
                  v169 = v164 + 1;
                v170 = (float)*(int *)&ElementsAttrRawData[4 * v169];
                *(v166 - 2) = (float)v168;
                *v166 = v170;
                *(v166 - 1) = 0.0;
                v166[1] = 0.0;
                v166 += 4;
                v164 += 2;
              }
              while (v164 != v165);
              if (v128 == v165)
                goto LABEL_423;
            }
            v171 = (float *)&v111[8 * v165 + 4];
            do
            {
              if (v124)
                v172 = 0;
              else
                v172 = v165;
              *(v171 - 1) = (float)*(int *)&ElementsAttrRawData[4 * v172];
              *v171 = 0.0;
              v171 += 2;
              ++v165;
            }
            while (v128 != v165);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v317, 64))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v174 = 0;
            }
            else
            {
              v173 = 0;
              v174 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v175 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v176 = 0;
                else
                  v176 = v173;
                if (v124)
                  v177 = 0;
                else
                  v177 = v173 + 1;
                v178 = (float)*(unint64_t *)&ElementsAttrRawData[8 * v177];
                *(v175 - 2) = (float)*(unint64_t *)&ElementsAttrRawData[8 * v176];
                *v175 = v178;
                *(v175 - 1) = 0.0;
                v175[1] = 0.0;
                v175 += 4;
                v173 += 2;
              }
              while (v173 != v174);
              if (v128 == v174)
                goto LABEL_423;
            }
            v179 = (float *)&v111[8 * v174 + 4];
            do
            {
              if (v124)
                v180 = 0;
              else
                v180 = v174;
              *(v179 - 1) = (float)*(unint64_t *)&ElementsAttrRawData[8 * v180];
              *v179 = 0.0;
              v179 += 2;
              ++v174;
            }
            while (v128 != v174);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v317, 64))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v185 = 0;
            }
            else
            {
              v184 = 0;
              v185 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v186 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v187 = 0;
                else
                  v187 = v184;
                if (v124)
                  v188 = 0;
                else
                  v188 = v184 + 1;
                v189 = (float)*(uint64_t *)&ElementsAttrRawData[8 * v188];
                *(v186 - 2) = (float)*(uint64_t *)&ElementsAttrRawData[8 * v187];
                *v186 = v189;
                *(v186 - 1) = 0.0;
                v186[1] = 0.0;
                v186 += 4;
                v184 += 2;
              }
              while (v184 != v185);
              if (v128 == v185)
                goto LABEL_423;
            }
            v190 = (float *)&v111[8 * v185 + 4];
            do
            {
              if (v124)
                v191 = 0;
              else
                v191 = v185;
              *(v190 - 1) = (float)*(uint64_t *)&ElementsAttrRawData[8 * v191];
              *v190 = 0.0;
              v190 += 2;
              ++v185;
            }
            while (v128 != v185);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isF16((mlir::Type *)&v317))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v193 = 0;
            }
            else
            {
              v192 = 0;
              v193 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v194 = v111 + 8;
              do
              {
                if (v124)
                  v195 = 0;
                else
                  v195 = v192;
                _H0 = *(_WORD *)&ElementsAttrRawData[2 * v195];
                if (v124)
                  v197 = 0;
                else
                  v197 = v192 + 1;
                _H1 = *(_WORD *)&ElementsAttrRawData[2 * v197];
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                *(v194 - 2) = _S0;
                *v194 = _S1;
                *(v194 - 1) = 0;
                v194[1] = 0;
                v194 += 4;
                v192 += 2;
              }
              while (v192 != v193);
              if (v128 == v193)
                goto LABEL_423;
            }
            v204 = &v111[8 * v193 + 4];
            do
            {
              if (v124)
                v205 = 0;
              else
                v205 = v193;
              _H0 = *(_WORD *)&ElementsAttrRawData[2 * v205];
              __asm { FCVT            S0, H0 }
              *((_DWORD *)v204 - 1) = _S0;
              *(_DWORD *)v204 = 0;
              v204 += 8;
              ++v193;
            }
            while (v128 != v193);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isF32((mlir::Type *)&v317))
        {
          if (v128 >= 1)
          {
            if ((v124 & 1) != 0)
            {
              if ((unint64_t)v128 >= 8
                && (v111 >= ElementsAttrRawData + 4 || &v111[8 * v128] <= ElementsAttrRawData))
              {
                v181 = v128 & 0x7FFFFFFFFFFFFFF8;
                v233 = v111 + 32;
                v234 = v128 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  *(_QWORD *)&v235 = *(unsigned int *)ElementsAttrRawData;
                  *((_QWORD *)&v235 + 1) = v235;
                  *(v233 - 2) = v235;
                  *(v233 - 1) = v235;
                  *v233 = v235;
                  v233[1] = v235;
                  v233 += 4;
                  v234 -= 8;
                }
                while (v234);
                if (v128 == v181)
                  goto LABEL_423;
              }
              else
              {
                v181 = 0;
              }
              v182 = v128 - v181;
              v183 = (uint64_t)&v111[8 * v181 + 4];
              do
              {
                *(_QWORD *)(v183 - 4) = *(unsigned int *)ElementsAttrRawData;
                v183 += 8;
                --v182;
              }
              while (v182);
            }
            else
            {
              if ((unint64_t)v128 >= 8
                && (v111 >= &ElementsAttrRawData[4 * v128] || &v111[8 * v128] <= ElementsAttrRawData))
              {
                v208 = v128 & 0x7FFFFFFFFFFFFFF8;
                v236 = (float *)(v111 + 32);
                v237 = (float32x4_t *)(ElementsAttrRawData + 16);
                v238 = 0uLL;
                v239 = v128 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v240 = v237[-1];
                  v330.val[0] = *v237;
                  v241 = v236 - 8;
                  vst2q_f32(v241, *(float32x4x2_t *)(&v238 - 1));
                  v330.val[1] = 0uLL;
                  vst2q_f32(v236, v330);
                  v236 += 16;
                  v237 += 2;
                  v239 -= 8;
                }
                while (v239);
                if (v128 == v208)
                  goto LABEL_423;
              }
              else
              {
                v208 = 0;
              }
              v209 = v128 - v208;
              v210 = (uint64_t)&v111[8 * v208 + 4];
              v211 = &ElementsAttrRawData[4 * v208];
              do
              {
                v212 = *(_DWORD *)v211;
                v211 += 4;
                *(_QWORD *)(v210 - 4) = v212;
                v210 += 8;
                --v209;
              }
              while (v209);
            }
          }
LABEL_423:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          if (!(_DWORD)v322)
            goto LABEL_497;
          v255 = 0;
          v256 = (char *)v321;
          v257 = (char *)&v321[8 * v322];
          while (1)
          {
            v259 = *(_DWORD *)v256;
            v258 = *((_DWORD *)v256 + 1);
            v260 = a4[2];
            if (v255 < v260)
            {
              v255->i32[0] = v259;
              v261 = (int16x8_t *)((char *)v255->i64 + 4);
              goto LABEL_445;
            }
            v262 = *a4;
            v263 = (char *)v255 - (char *)*a4;
            v264 = v263 >> 2;
            v265 = (v263 >> 2) + 1;
            if (v265 >> 62)
              std::vector<long>::__throw_length_error[abi:ne180100]();
            v266 = (char *)v260 - (char *)v262;
            if (v266 >> 1 > v265)
              v265 = v266 >> 1;
            if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL)
              v267 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v267 = v265;
            if (v267)
            {
              if (v267 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v268 = operator new(4 * v267);
              v269 = (int16x8_t *)&v268[4 * v264];
              v269->i32[0] = v259;
              v261 = (int16x8_t *)((char *)v269->i64 + 4);
              v270 = (char *)v255 - (char *)v262;
              if (v255 == v262)
                goto LABEL_443;
            }
            else
            {
              v268 = 0;
              v269 = (int16x8_t *)(4 * v264);
              *(_DWORD *)(4 * v264) = v259;
              v261 = (int16x8_t *)(4 * v264 + 4);
              v270 = (char *)v255 - (char *)v262;
              if (v255 == v262)
                goto LABEL_443;
            }
            v271 = v270 - 4;
            if (v271 < 0xBC)
            {
              v272 = v255;
              goto LABEL_442;
            }
            v286 = ((char *)&v255[-1].u64[1] + 4 - (char *)v262) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v268[v263 - 4 - v286] > &v268[v263 - 4])
              break;
            if ((char *)&v255[-1].u64[1] - v286 + 4 > (char *)&v255[-1].u64[1] + 4)
            {
              v272 = v255;
              goto LABEL_442;
            }
            if ((unint64_t)((char *)v255 - v268 - v263) < 0x20)
            {
              v272 = v255;
              goto LABEL_442;
            }
            v288 = (v271 >> 2) + 1;
            v289 = 4 * (v288 & 0x7FFFFFFFFFFFFFF8);
            v272 = (int16x8_t *)((char *)v255 - v289);
            v269 = (int16x8_t *)((char *)v269 - v289);
            v290 = (int16x8_t *)&v268[4 * v264 - 16];
            v291 = v255 - 1;
            v292 = v288 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v293 = *v291;
              v290[-1] = v291[-1];
              *v290 = v293;
              v290 -= 2;
              v291 -= 2;
              v292 -= 8;
            }
            while (v292);
            if (v288 != (v288 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_442;
LABEL_443:
            v260 = (int16x8_t *)&v268[4 * v267];
            *a4 = v269;
            a4[1] = v261;
            a4[2] = v260;
            if (v262)
            {
              operator delete(v262);
              v260 = a4[2];
            }
LABEL_445:
            a4[1] = v261;
            if (v261 >= v260)
            {
              v274 = *a4;
              v275 = (char *)v261 - (char *)*a4;
              v276 = v275 >> 2;
              v277 = (v275 >> 2) + 1;
              if (v277 >> 62)
                std::vector<long>::__throw_length_error[abi:ne180100]();
              v278 = (char *)v260 - (char *)v274;
              if (v278 >> 1 > v277)
                v277 = v278 >> 1;
              if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL)
                v279 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v279 = v277;
              if (v279)
              {
                if (v279 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v280 = operator new(4 * v279);
                v281 = (int16x8_t *)&v280[4 * v276];
                v281->i32[0] = v258;
                v255 = (int16x8_t *)((char *)v281->i64 + 4);
                v282 = (char *)v261 - (char *)v274;
                if (v261 == v274)
                  goto LABEL_460;
LABEL_457:
                v283 = v282 - 4;
                if (v283 < 0xBC)
                {
                  v284 = v261;
                  goto LABEL_459;
                }
                v287 = ((char *)&v261[-1].u64[1] + 4 - (char *)v274) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v280[v275 - 4 - v287] > &v280[v275 - 4])
                {
                  v284 = v261;
                  goto LABEL_459;
                }
                if ((char *)&v261[-1].u64[1] - v287 + 4 > (char *)&v261[-1].u64[1] + 4)
                {
                  v284 = v261;
                  goto LABEL_459;
                }
                if ((unint64_t)((char *)v261 - v280 - v275) < 0x20)
                {
                  v284 = v261;
                  goto LABEL_459;
                }
                v294 = (v283 >> 2) + 1;
                v295 = 4 * (v294 & 0x7FFFFFFFFFFFFFF8);
                v284 = (int16x8_t *)((char *)v261 - v295);
                v281 = (int16x8_t *)((char *)v281 - v295);
                v296 = (int16x8_t *)&v280[4 * v276 - 16];
                v297 = v261 - 1;
                v298 = v294 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v299 = *v297;
                  v296[-1] = v297[-1];
                  *v296 = v299;
                  v296 -= 2;
                  v297 -= 2;
                  v298 -= 8;
                }
                while (v298);
                if (v294 != (v294 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_459:
                    v285 = v284[-1].i32[3];
                    v284 = (int16x8_t *)((char *)v284 - 4);
                    v281[-1].i32[3] = v285;
                    v281 = (int16x8_t *)((char *)v281 - 4);
                  }
                  while (v284 != v274);
                }
              }
              else
              {
                v280 = 0;
                v281 = (int16x8_t *)(4 * v276);
                *(_DWORD *)(4 * v276) = v258;
                v255 = (int16x8_t *)(4 * v276 + 4);
                v282 = (char *)v261 - (char *)v274;
                if (v261 != v274)
                  goto LABEL_457;
              }
LABEL_460:
              *a4 = v281;
              a4[1] = v255;
              a4[2] = (int16x8_t *)&v280[4 * v279];
              if (v274)
                operator delete(v274);
              goto LABEL_426;
            }
            v261->i32[0] = v258;
            v255 = (int16x8_t *)((char *)v261->i64 + 4);
LABEL_426:
            a4[1] = v255;
            v256 += 8;
            if (v256 == v257)
              goto LABEL_497;
          }
          v272 = v255;
          do
          {
LABEL_442:
            v273 = v272[-1].i32[3];
            v272 = (int16x8_t *)((char *)v272 - 4);
            v269[-1].i32[3] = v273;
            v269 = (int16x8_t *)((char *)v269 - 4);
          }
          while (v272 != v262);
          goto LABEL_443;
        }
        if (mlir::Type::isF64((mlir::Type *)&v317))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v221 = 0;
            }
            else
            {
              v220 = 0;
              v221 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v222 = (float *)(v111 + 8);
              do
              {
                if (v124)
                  v223 = 0;
                else
                  v223 = v220;
                v224 = *(double *)&ElementsAttrRawData[8 * v223];
                if (v124)
                  v225 = 0;
                else
                  v225 = v220 + 1;
                v226 = v224;
                v227 = *(double *)&ElementsAttrRawData[8 * v225];
                *(v222 - 2) = v226;
                *v222 = v227;
                *(v222 - 1) = 0.0;
                v222[1] = 0.0;
                v222 += 4;
                v220 += 2;
              }
              while (v220 != v221);
              if (v128 == v221)
                goto LABEL_423;
            }
            v228 = (float *)&v111[8 * v221 + 4];
            do
            {
              if (v124)
                v229 = 0;
              else
                v229 = v221;
              v230 = *(double *)&ElementsAttrRawData[8 * v229];
              *(v228 - 1) = v230;
              *v228 = 0.0;
              v228 += 2;
              ++v221;
            }
            while (v128 != v221);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isBF16((mlir::Type *)&v317))
        {
          if (v128 >= 1)
          {
            if (v128 == 1)
            {
              v243 = 0;
            }
            else
            {
              v242 = 0;
              v243 = v128 & 0xFFFFFFFFFFFFFFFELL;
              v244 = v111 + 8;
              do
              {
                if (v124)
                  v245 = 0;
                else
                  v245 = v242;
                v246 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v245];
                if (v124)
                  v247 = 0;
                else
                  v247 = v242 + 1;
                v248 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v247] << 16;
                *(v244 - 1) = (v246 << 16);
                *v244 = v248;
                v244 += 2;
                v242 += 2;
              }
              while (v242 != v243);
              if (v128 == v243)
                goto LABEL_423;
            }
            v249 = (uint64_t)&v111[8 * v243 + 4];
            do
            {
              if (v124)
                v250 = 0;
              else
                v250 = v243;
              *(_QWORD *)(v249 - 4) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v250] << 16;
              ++v243;
              v249 += 8;
            }
            while (v128 != v243);
          }
          goto LABEL_423;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v317, 1))
        {
          if (v124)
            v213 = 1;
          else
            v213 = v128;
          llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&ArgOperands, v213);
          mlir::detail::unpackBooleanData(ElementsAttrRawData, v127, (uint64_t)ArgOperands, v328);
          v214 = ArgOperands;
          if (v128 >= 1)
          {
            v215 = 0;
            v216 = v328;
            v217 = (float *)(v111 + 4);
            do
            {
              if (v124)
                v218 = 0;
              else
                v218 = v215;
              if (v216 <= v218)
                __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
              if (v214[v218])
                v219 = 1.0;
              else
                v219 = 0.0;
              *(v217 - 1) = v219;
              *v217 = 0.0;
              v217 += 2;
              ++v215;
            }
            while (v128 != v215);
          }
          if (v214 != (_BYTE *)v329)
            free(v214);
          goto LABEL_423;
        }
        ArgOperands = (_BYTE *)mlir::Type::dyn_cast<mlir::ComplexType>(&v317);
        if (ArgOperands)
        {
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&ArgOperands);
          if (mlir::Type::isF32((mlir::Type *)&Value))
          {
            if (v128 >= 1)
            {
              for (i = 0; i != v128; ++i)
              {
                if (v124)
                  v232 = 0;
                else
                  v232 = i;
                *(_QWORD *)&v111[8 * i] = *(_QWORD *)&ElementsAttrRawData[8 * v232];
              }
            }
            goto LABEL_423;
          }
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&ArgOperands);
          if (mlir::Type::isF16((mlir::Type *)&Value))
          {
            if (v128 >= 1)
            {
              for (j = 0; j != v128; ++j)
              {
                if (v124)
                  v254 = 0;
                else
                  v254 = j;
                v252.i32[0] = *(_DWORD *)&ElementsAttrRawData[4 * v254];
                v252 = (float16x4_t)vcvtq_f32_f16(v252).u64[0];
                *(float16x4_t *)&v111[8 * j] = v252;
              }
            }
            goto LABEL_423;
          }
          v300 = 245;
          v301 = "unsupported complex type";
          goto LABEL_491;
        }
        if (*(_QWORD *)v317)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)v317 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
            && mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v317) <= 7)
          {
            IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v317);
            mlir::detail::unpackQuantizedData<std::complex<float>>(ElementsAttrRawData, v127, (uint64_t)v111, v128, IntOrFloatBitWidth);
            goto LABEL_423;
          }
          v300 = 257;
          v301 = "unsupported type";
LABEL_491:
          llvm::llvm_unreachable_internal((llvm *)v301, "../mlir-mps/third_party/mlir-apple/include/Dialect/MPS/Utils/MPSRawAttributeUtils.h", (const char *)v300);
        }
LABEL_414:
        v114 = "abstractType && \"Malformed type storage object.\"";
        v115 = 160;
        v116 = "TypeSupport.h";
        v117 = "getAbstractType";
LABEL_415:
        __assert_rtn(v117, v116, v115, v114);
      }
      v114 = "N <= capacity()";
      v115 = 102;
      v116 = "SmallVector.h";
      v117 = "set_size";
      goto LABEL_415;
    }
LABEL_298:
    v114 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v115 = 650;
    v116 = "Casting.h";
    v117 = "dyn_cast";
    goto LABEL_415;
  }
LABEL_42:
  if (!a2 && MTLReportFailureTypeEnabled())
    MTLReportFailure();
  ArgOperands = (_BYTE *)a3;
  *(_QWORD *)&v319 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&ArgOperands) + 2);
  v38 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 88), (uint64_t *)&v319);
  if (v38
    && (v318[0] = (uint64_t)ArgOperands,
        (v39 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v38 + 3, v318)) != 0))
  {
    v306 = (id)v39[3];
  }
  else
  {
    v306 = 0;
  }
  StaticType = (uint64_t **)GPURegionRuntime::getStaticType(a1, a3);
  getMPSShapeFromMLIR(StaticType);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  MPSDataType = getMPSDataType(StaticType);
  if ((MPSDataType & 0x10000000) == 0)
    __assert_rtn("waitAndReadFPTensorData", "MPSRuntime.mm", 1266, "dataType & MPSDataTypeFloatBit");
  v310 = 0u;
  v311 = 0u;
  v308 = 0u;
  v309 = 0u;
  v304 = v41;
  v43 = v41;
  v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v308, v320, 16, v304);
  v45 = (unsigned __int16)MPSDataType >> 3;
  v305 = v45;
  if (v44)
  {
    v46 = *(_QWORD *)v309;
    v45 = (unsigned __int16)MPSDataType >> 3;
    do
    {
      for (k = 0; k != v44; ++k)
      {
        if (*(_QWORD *)v309 != v46)
          objc_enumerationMutation(v43);
        v48 = *(id *)(*((_QWORD *)&v308 + 1) + 8 * k);
        v49 = objc_msgSend(v48, "unsignedLongValue");

        v45 *= v49;
      }
      v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v308, v320, 16);
    }
    while (v44);
  }

  if (!v45)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_499;
  }
  v50 = (uint64_t *)(a1 + 384);
  v51 = *(int8x8_t *)(a1 + 392);
  if (!*(_QWORD *)&v51)
    goto LABEL_77;
  v52 = (uint8x8_t)vcnt_s8(v51);
  v52.i16[0] = vaddlv_u8(v52);
  if (v52.u32[0] > 1uLL)
  {
    v53 = v45;
    if (v45 >= *(_QWORD *)&v51)
      v53 = v45 % *(_QWORD *)&v51;
  }
  else
  {
    v53 = (*(_QWORD *)&v51 - 1) & v45;
  }
  v54 = *(uint64_t ****)(*v50 + 8 * v53);
  if (!v54 || (v55 = *v54) == 0)
  {
LABEL_77:
    objc_msgSend(*(id *)(a1 + 48), "metalDevice");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = (uint64_t *)objc_msgSend(v59, "newBufferWithLength:options:", v45, 0);

    std::__hash_table<std::__hash_value_type<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>,std::__unordered_map_hasher<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto9MTLBuffer}* {__strong}>>::__emplace_unique_key_args<unsigned long,unsigned long &,objc_object  {objcproto9MTLBuffer}*&>(v50, v45, v45, v60);
    goto LABEL_78;
  }
  if (v52.u32[0] < 2uLL)
  {
    v56 = *(_QWORD *)&v51 - 1;
    while (1)
    {
      v58 = v55[1];
      if (v58 == (uint64_t *)v45)
      {
        if (v55[2] == (uint64_t *)v45)
          goto LABEL_155;
      }
      else if (((unint64_t)v58 & v56) != v53)
      {
        goto LABEL_77;
      }
      v55 = (uint64_t **)*v55;
      if (!v55)
        goto LABEL_77;
    }
  }
  while (1)
  {
    v57 = (unint64_t)v55[1];
    if (v57 == v45)
      break;
    if (v57 >= *(_QWORD *)&v51)
      v57 %= *(_QWORD *)&v51;
    if (v57 != v53)
      goto LABEL_77;
LABEL_67:
    v55 = (uint64_t **)*v55;
    if (!v55)
      goto LABEL_77;
  }
  if (v55[2] != (uint64_t *)v45)
    goto LABEL_67;
LABEL_155:
  v60 = v55[3];
LABEL_78:
  objc_msgSend(MEMORY[0x1E0CC6FE0], "descriptorWithDataType:shape:", MPSDataType, v43);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setPreferPackedRows:", 1);
  v62 = *(void **)(a2 + 72);
  if (v62)
  {
    objc_msgSend(v62, "endEncoding");
    v63 = *(void **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;

  }
  objc_msgSend(v306, "mpsndarray");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:", *(_QWORD *)(a2 + 8), v60, MPSDataType, 0, 0);

  objc_msgSend(*(id *)(a2 + 8), "rootCommandBuffer");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  (**(void (***)(uint64_t))a2)(a2);
  objc_msgSend(v65, "waitUntilCompleted");
  v66 = *(_QWORD *)(a1 + 424);
  if (v66)
    ++*(_QWORD *)(v66 + 192);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v45 >= v305)
  {
    v67 = v45 / v305;
    if ((v45 / v305) >> 62)
      std::vector<long>::__throw_length_error[abi:ne180100]();
    v68 = (int16x8_t *)operator new(4 * v67);
    bzero(v68, 4 * v67);
    *a4 = v68;
    a4[1] = (int16x8_t *)((char *)v68 + 4 * v67);
    a4[2] = (int16x8_t *)((char *)v68 + 4 * v67);
  }
  if ((_DWORD)MPSDataType == -1879048176)
  {
    v83 = objc_retainAutorelease(v60);
    v84 = (uint64_t *)objc_msgSend(v83, "contents");
    v85 = objc_msgSend(objc_retainAutorelease(v83), "contents");
    v87 = *a4;
    v88 = (char *)a4[1] - (char *)*a4;
    if (v88 < 0xD)
    {
      v89 = 0;
      v93 = v88 >> 2;
    }
    else
    {
      v89 = 0;
      v90 = (int16x8_t)(unint64_t)vuzp1_s16(0, 0);
      do
      {
        v91 = *v84++;
        v86.i64[0] = v91;
        v86 = vzip1q_s16(v90, v86);
        *v87++ = v86;
        v92 = v89 + 7;
        v89 += 4;
        v93 = ((char *)a4[1] - (char *)*a4) >> 2;
      }
      while (v92 < v93);
      v87 = *a4;
    }
    v94 = v93 > v89;
    v95 = v93 - v89;
    if (v94)
    {
      v96 = &v87[v89 / 4];
      v97 = (__int16 *)(v85 + 2 * v89);
      do
      {
        v98 = *v97++;
        v96->i16[0] = 0;
        v96->i16[1] = v98;
        v96 = (int16x8_t *)((char *)v96 + 4);
        --v95;
      }
      while (v95);
    }
  }
  else
  {
    if ((_DWORD)MPSDataType == 268435472)
    {
      v69 = (float16x4_t *)malloc_type_malloc(v45, 0xB8BF0C1uLL);
      memcpy(v69, (const void *)objc_msgSend(objc_retainAutorelease(v60), "contents"), v45);
      v79 = *a4;
      v80 = (char *)a4[1] - (char *)*a4;
      if (v80)
      {
        v81 = v80 >> 2;
        if (v81 <= 1)
          v81 = 1;
        if (v81 >= 0x10)
        {
          v82 = v81 & 0xFFFFFFFFFFFFFFF0;
          v118 = v69 + 2;
          v119 = (float32x4_t *)&v79[2];
          v120 = v81 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v121 = *(float16x8_t *)v118[-2].i8;
            v122 = vcvtq_f32_f16(*v118);
            v123 = vcvt_hight_f32_f16(*(float16x8_t *)v118->i8);
            v119[-2] = vcvtq_f32_f16(*(float16x4_t *)v121.i8);
            v119[-1] = vcvt_hight_f32_f16(v121);
            *v119 = v122;
            v119[1] = v123;
            v119 += 4;
            v118 += 4;
            v120 -= 16;
          }
          while (v120);
          goto LABEL_492;
        }
        v82 = 0;
        do
        {
          _H0 = v69->i16[v82];
          __asm { FCVT            S0, H0 }
          v79->i32[v82++] = _S0;
LABEL_492:
          ;
        }
        while (v81 != v82);
      }
    }
    else
    {
      if ((_DWORD)MPSDataType != 268435488)
        __assert_rtn("waitAndReadFPTensorData", "MPSRuntime.mm", 1338, "0 && \"unsupported data type\"");
      v69 = (float16x4_t *)malloc_type_malloc(v45, 0xBAA59CAAuLL);
      memcpy(v69, (const void *)objc_msgSend(objc_retainAutorelease(v60), "contents"), v45);
      v70 = *a4;
      v71 = a4[1];
      v72 = (char *)v71 - (char *)*a4;
      if (v71 != *a4)
      {
        v73 = 0;
        v74 = v72 >> 2;
        if (v74 <= 1)
          v74 = 1;
        if (v74 < 8 || (unint64_t)((char *)v70 - (char *)v69) < 0x20)
          goto LABEL_500;
        v75 = 0;
        v73 = v74 & 0xFFFFFFFFFFFFFFF8;
        v76 = v74 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v77 = *(int16x8_t *)v69[v75 / 8 + 2].i8;
          v78 = &v70[v75 / 0x10];
          *v78 = *(int16x8_t *)v69[v75 / 8].i8;
          v78[1] = v77;
          v75 += 32;
          v76 -= 8;
        }
        while (v76);
        while (v74 != v73)
        {
LABEL_500:
          v70->i32[v73] = v69->i32[v73];
          ++v73;
        }
      }
    }
    free(v69);
  }

LABEL_499:
LABEL_497:
  if (v321 != v323)
    free(v321);
LABEL_494:
  if (v324 != v326)
    free(v324);
}

void GPURegionRuntime::writeIntTensorData(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, unint64_t a5)
{
  uint64_t v9;
  char *v10;
  unint64_t StaticType;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t Context;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  size_t v23;
  int32x4_t *v24;
  int32x4_t *v25;
  unint64_t v26;
  int32x4_t *v27;
  int32x4_t *v28;
  unint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  unint64_t v34;
  __int32 *v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a3;
  if (!a5)
    return;
  v9 = a1 + 344;
  v47 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v48) + 2);
  *(_QWORD *)&v46 = &v47;
  v10 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(v9, &v47, (uint64_t)&std::piecewise_construct, (_QWORD **)&v46);
  StaticType = GPURegionRuntime::getStaticType(a1, v48);
  if (!*(_QWORD *)StaticType)
    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
  if (*(_UNKNOWN **)(*(_QWORD *)StaticType + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    __assert_rtn("cast", "Casting.h", 566, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
  *(_QWORD *)&v46 = StaticType;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
  v14 = v13;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)(a1 + 64) + 24));
  v16 = mlir::IntegerType::get(Context, 0x40u, 1u);
  v17 = (_QWORD *)mlir::RankedTensorType::get(Value, v14, v16, 0);
  *(_QWORD *)&v46 = mlir::createRawElementsAttr(v17, a4, (const void *)(8 * a5));
  *((_QWORD *)&v46 + 1) = v18;
  v47 = v48;
  std::__hash_table<std::__hash_value_type<void *,mlir::ElementsAttr>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::ElementsAttr>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::ElementsAttr>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::ElementsAttr>>>::__emplace_unique_key_args<void *,void *,mlir::ElementsAttr&>((uint64_t)(v10 + 24), &v47, &v47, &v46);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, v48, *(_QWORD *)(a2 + 8), 0, 0, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "mpsndarray");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (!v20)
    __assert_rtn("writeIntTensorData", "MPSRuntime.mm", 1379, "resultNDArray != nil");
  v22 = objc_msgSend(v20, "dataType");
  if ((v22 & 0xDFFFFFFF) != 0x20)
    __assert_rtn("writeIntTensorData", "MPSRuntime.mm", 1382, "dataType == MPSDataTypeInt32 || dataType == MPSDataTypeUInt32");
  v23 = a5 * ((unsigned __int16)v22 >> 3);
  v24 = (int32x4_t *)malloc_type_malloc(v23, 0xCF8D64B4uLL);
  v25 = v24;
  if (a5 < 8)
  {
    v26 = 0;
LABEL_11:
    v34 = a5 - v26;
    v35 = &v24->i32[v26];
    v36 = &a4->i64[v26];
    do
    {
      v37 = *v36++;
      *v35++ = v37;
      --v34;
    }
    while (v34);
    goto LABEL_13;
  }
  v26 = a5 & 0xFFFFFFFFFFFFFFF8;
  v27 = a4 + 2;
  v28 = v24 + 1;
  v29 = a5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v31 = v27[-2];
    v30 = v27[-1];
    v33 = *v27;
    v32 = v27[1];
    v27 += 4;
    v28[-1] = vuzp1q_s32(v31, v30);
    *v28 = vuzp1q_s32(v33, v32);
    v28 += 2;
    v29 -= 8;
  }
  while (v29);
  if (a5 != v26)
    goto LABEL_11;
LABEL_13:
  objc_msgSend(*(id *)(a1 + 48), "metalDevice");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = (void *)objc_msgSend(v38, "newBufferWithLength:options:", v23, 0);

  objc_msgSend(v21, "descriptor");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "setPreferPackedRows:", 1);
  v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC6F50]), "initWithBuffer:descriptor:", v39, v40);
  v42 = objc_retainAutorelease(v39);
  memcpy((void *)objc_msgSend(v42, "contents"), v25, v23);
  v43 = *(void **)(a2 + 72);
  if (v43)
  {
    objc_msgSend(v43, "endEncoding");
    v44 = *(void **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;

  }
  objc_msgSend(v21, "importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:", *(_QWORD *)(a2 + 8), v42, 536870944, 0, 0);
  objc_msgSend(*(id *)(a2 + 8), "rootCommandBuffer");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  (**(void (***)(uint64_t))a2)(a2);
  objc_msgSend(v45, "waitUntilCompleted");
  free(v25);

}

void sub_180DC777C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_180DC784C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_180DC7860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *FullyPlacedOnANEMPSRuntime::initializeForExecution(_QWORD *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  mlir::ForwardIterator *v10;
  _QWORD *v11;

  v1 = this[29];
  v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) == 0)
    __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
  v3 = v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 64;
  if (v3 >= 0xFFFFFFFFFFFFFFF9)
    __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
  v4 = this;
  v5 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v1 + 40);
  v11 = this;
  for (i = *(_QWORD *)(v5 + 8); i != v5; i = *(_QWORD *)(i + 8))
  {
    v7 = i - 8;
    if (!i)
      v7 = 0;
    v8 = (_QWORD *)(v7 + 32);
    this = *(_QWORD **)(v7 + 40);
    if (this != (_QWORD *)(v7 + 32))
    {
      do
      {
        v9 = (_QWORD *)this[1];
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)this);
        mlir::detail::walk<mlir::ForwardIterator>(v10, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<FullyPlacedOnANEMPSRuntime::initializeForExecution(void)::$_0>, (uint64_t)&v11, 1);
        this = v9;
      }
      while (v9 != v8);
    }
  }
  if (!v4[113])
    __assert_rtn("initializeForExecution", "MPSRuntime.mm", 1488, "_aneRegionCallOpHandler");
  return this;
}

id FullyPlacedOnANEMPSRuntime::evaluateOps(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, char a7, int a8, BOOL *a9)
{
  id v16;
  id v17;
  id *v18;
  id v19;
  uint64_t v20;
  int v21;
  id v22;
  void *v24;
  id v25;
  id v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  char v41;
  id v42;
  id *v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  int v53;
  id v54;
  uint64_t v55;
  id v56;
  _QWORD v57[6];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;

  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  if (*(_QWORD *)(a1 + 424) || objc_msgSend(v18[1], "count") || objc_msgSend(v18[2], "count"))
    goto LABEL_7;
  v44 = a8;
  v62 = 0;
  v63 = &v62;
  v64 = 0x2020000000;
  v65 = 0;
  v20 = MEMORY[0x1E0C809B0];
  v47 = (void *)MEMORY[0x1E0C809B0];
  v48 = 3221225472;
  v49 = (id *)___ZZN26FullyPlacedOnANEMPSRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPbENK3__0clEv_block_invoke;
  v50 = &unk_1E0E768A8;
  *(_QWORD *)&v51 = &v62;
  *((_QWORD *)&v51 + 1) = a1;
  objc_msgSend(v16, "enumerateObjectsUsingBlock:", &v47);
  if (*((_BYTE *)v63 + 24))
  {
    _Block_object_dispose(&v62, 8);
LABEL_7:
    GPURegionRuntime::evaluateOps(a1, v16, v17, v18, v19, a6, a7, 0, a9);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  v58 = 0;
  v59 = &v58;
  v60 = 0x2020000000;
  v61 = 0;
  v57[0] = v20;
  v57[1] = 3221225472;
  v57[2] = ___ZZN26FullyPlacedOnANEMPSRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPbENK3__0clEv_block_invoke_2;
  v57[3] = &unk_1E0E768A8;
  v57[4] = &v58;
  v57[5] = a1;
  objc_msgSend(v17, "enumerateObjectsUsingBlock:", v57);
  v21 = *((unsigned __int8 *)v59 + 24);
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(&v62, 8);
  if (v21)
    goto LABEL_7;
  std::mutex::lock((std::mutex *)(a1 + 144));
  v24 = *(void **)(a1 + 208);
  v25 = v19;
  v26 = v24;
  v27 = v18;
  v47 = &unk_1E0E04CC0;
  v48 = (uint64_t)v25;
  v43 = v27;
  v49 = v27;
  LOBYTE(v50) = a6;
  BYTE1(v50) = a7;
  v51 = 0u;
  v52 = 0u;
  v53 = 1065353216;
  v54 = 0;
  v55 = 0;
  v56 = v26;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a1 + 656));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = *(_QWORD *)(a1 + 904);
  v29 = *(unsigned int *)(v28 + 136);
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD **)(v28 + 128);
    v31 = 8 * v29;
    do
    {
      if (*v30 >= (unint64_t)*(unsigned int *)(a1 + 656))
        __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
      objc_msgSend(v16, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * *v30));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", objc_msgSend(v32, "iosurface"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v33 && MTLReportFailureTypeEnabled())
        MTLReportFailure();
      objc_msgSend(v46, "addObject:", v33);

      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a1 + 720));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *(_QWORD *)(a1 + 904);
  v35 = *(unsigned int *)(v34 + 184);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD **)(v34 + 176);
    v37 = 8 * v35;
    do
    {
      if (*v36 >= (unint64_t)*(unsigned int *)(a1 + 720))
        __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
      objc_msgSend(v17, "objectAtIndexedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * *v36));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CFDF50], "objectWithIOSurface:", objc_msgSend(v38, "iosurface"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v39 && MTLReportFailureTypeEnabled())
        MTLReportFailure();
      objc_msgSend(v45, "addObject:", v39);

      ++v36;
      v37 -= 8;
    }
    while (v37);
    v34 = *(_QWORD *)(a1 + 904);
  }
  if (*(_BYTE *)(v34 + 115))
  {
    v40 = 2;
  }
  else
  {
    v41 = objc_msgSend(v43, "waitUntilCompleted");
    v34 = *(_QWORD *)(a1 + 904);
    v40 = (v41 & 1) == 0 && *(_BYTE *)(v34 + 113) == 0;
  }
  GPU::ANERegionCallOpHandler::encodeOpWithInputsAndOutputs(v34, (uint64_t)&v47, v46, v45, v40, v44);
  if (a9)
    *a9 = v40 != 0;
  if (v54)
  {
    objc_msgSend(v54, "endEncoding");
    v42 = v54;
    v54 = 0;

  }
  GPURegionRuntime::postEvalCleanUp((GPURegionRuntime *)a1);
  v22 = v17;

  GPU::EncodeDescriptor::~EncodeDescriptor((GPU::EncodeDescriptor *)&v47);
  std::mutex::unlock((std::mutex *)(a1 + 144));
LABEL_8:

  return v22;
}

void sub_180DC7E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::mutex *a5, uint64_t a6, void *a7, void *a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a8);

  GPU::EncodeDescriptor::~EncodeDescriptor((GPU::EncodeDescriptor *)va);
  std::mutex::unlock(a5);

  _Unwind_Resume(a1);
}

void GPU::getRuntime(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, _BYTE *a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  id v13;
  id v14;
  id v15;
  uint64_t InherentAttr;
  char v17;
  _QWORD *v18;
  id v19;

  v19 = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  if (!a5[47]
    || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a5, (uint64_t)"mps.fullyPlacedOnANE", 20), !v17))
  {
    InherentAttr = mlir::DictionaryAttr::get((uint64_t)(a5 + 56), "mps.fullyPlacedOnANE", 0x14uLL);
  }
  if (!InherentAttr)
    goto LABEL_7;
  if (!*(_QWORD *)InherentAttr)
    __assert_rtn("getAbstractAttribute", "AttributeSupport.h", 165, "abstractAttribute && \"Malformed attribute storage object.\"");
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    v18 = (_QWORD *)operator new();
    FullyPlacedOnANEMPSRuntime::FullyPlacedOnANEMPSRuntime(v18, v19, v13, v14, v15, a5, a6);
  }
  else
  {
LABEL_7:
    v18 = (_QWORD *)operator new();
    MPSRuntime::MPSRuntime((uint64_t)v18, v19, v13, v14, v15, a5, a6);
  }
  *a7 = v18;

}

void sub_180DC80E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  MEMORY[0x186DA1680](v13, 0x10A1C40F888E66DLL);

  _Unwind_Resume(a1);
}

unint64_t GPU::calculateNDArrayAllocationSize(GPU *this, MPSNDArrayDescriptor *a2)
{
  GPU *v2;
  int32x4_t *v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int32x4_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  _OWORD v22[4];

  v2 = this;
  v3 = (int32x4_t *)((char *)v2 + (int)*MEMORY[0x1E0CC72A8]);
  v17 = v3[2];
  v19 = v3[3];
  v15 = v3[1];
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  v21 = vorrq_s8(*(int8x16_t *)v3, vandq_s8((int8x16_t)vceqzq_s32(*v3), v4));
  v5 = *(unsigned __int16 *)((char *)v2 + (int)*MEMORY[0x1E0CC72A0]) * (unint64_t)v21.u32[0];
  v6 = *(_QWORD *)((char *)v2 + (int)*MEMORY[0x1E0CC72C8]);
  if (!*((_BYTE *)v2 + (int)*MEMORY[0x1E0CC72C0]))
    v5 = (v5 + 127) & 0x1FFFFFFFFFF80;
  if (v6)
    v7 = 8 * v6;
  else
    v7 = v5;
  if ((v7 / *(unsigned __int16 *)((char *)v2 + (int)*MEMORY[0x1E0CC72A0])) >> 31
    && MTLReportFailureTypeEnabled())
  {
    MTLReportFailure();
  }
  v8.i64[0] = 0x100000001;
  v8.i64[1] = 0x100000001;
  v16 = vorrq_s8((int8x16_t)v19, vandq_s8((int8x16_t)vceqzq_s32(v19), v8));
  v18 = vorrq_s8((int8x16_t)v17, vandq_s8((int8x16_t)vceqzq_s32(v17), v8));
  v20 = vorrq_s8((int8x16_t)v15, vandq_s8((int8x16_t)vceqzq_s32(v15), v8));
  v9 = (int *)MEMORY[0x1E0CC72B8];
  if (*(_QWORD *)((char *)v2 + (int)*MEMORY[0x1E0CC72B8]) >= 2uLL)
  {
    v10 = 1;
    do
    {
      v22[0] = v21;
      v22[1] = v20;
      v22[2] = v18;
      v22[3] = v16;
      if ((*((_DWORD *)v22 + (v10 & 0xF)) & 0x80000000) != 0 && MTLReportFailureTypeEnabled())
        MTLReportFailure();
      ++v10;
    }
    while (v10 < *(_QWORD *)((char *)v2 + *v9));
  }
  v11 = v7 * v21.u32[1];
  if (is_mul_ok(v7, v21.u32[1]) && v11 <= 0x2000000000)
  {
    v12 = v11 * v21.u32[2];
    if (!is_mul_ok(v11, v21.u32[2]))
      goto LABEL_43;
    v11 *= v21.u32[2];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v21.u32[3];
    if (!is_mul_ok(v12, v21.u32[3]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v20.u32[0];
    if (!is_mul_ok(v11, v20.u32[0]))
      goto LABEL_43;
    v11 *= v20.u32[0];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v20.u32[1];
    if (!is_mul_ok(v12, v20.u32[1]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v20.u32[2];
    if (!is_mul_ok(v11, v20.u32[2]))
      goto LABEL_43;
    v11 *= v20.u32[2];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v20.u32[3];
    if (!is_mul_ok(v12, v20.u32[3]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v18.u32[0];
    if (!is_mul_ok(v11, v18.u32[0]))
      goto LABEL_43;
    v11 *= v18.u32[0];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v18.u32[1];
    if (!is_mul_ok(v12, v18.u32[1]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v18.u32[2];
    if (!is_mul_ok(v11, v18.u32[2]))
      goto LABEL_43;
    v11 *= v18.u32[2];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v18.u32[3];
    if (!is_mul_ok(v12, v18.u32[3]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v16.u32[0];
    if (!is_mul_ok(v11, v16.u32[0]))
      goto LABEL_43;
    v11 *= v16.u32[0];
    if (v12 > 0x2000000000)
      goto LABEL_44;
    v11 = v12 * v16.u32[1];
    if (!is_mul_ok(v12, v16.u32[1]) || v11 > 0x2000000000)
      goto LABEL_44;
    v12 = v11 * v16.u32[2];
    if (!is_mul_ok(v11, v16.u32[2]))
    {
LABEL_43:
      v11 = v12;
      goto LABEL_44;
    }
    v11 *= v16.u32[2];
    if (v12 <= 0x2000000000)
      v11 = v12 * v16.u32[3];
  }
LABEL_44:
  v13 = (v11 + 7) >> 3;

  return v13;
}

void sub_180DC8538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_180DC8548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GPU::MPSGraphKernelDAG::createDAGOp(GPU::MPSGraphKernelDAG *this, GPU::BaseOpHandler *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t **StaticType;
  unsigned int MPSDataType;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *__p;
  void *v17;
  char *v18;
  void *v19;
  _BYTE *v20;
  __int128 v21;

  v2 = *((_QWORD *)a2 + 3);
  if (!*(_DWORD *)(v2 + 36))
    return 0;
  v5 = v2 - 16;
  StaticType = (uint64_t **)GPURegionRuntime::getStaticType(*((_QWORD *)this + 16), v2 - 16);
  MPSDataType = getMPSDataType(StaticType);
  if (MPSDataType == 4)
    v8 = 8;
  else
    v8 = MPSDataType;
  if (MPSDataType == -2147483640)
    v9 = 536870920;
  else
    v9 = v8;
  getBaseTensorShape(StaticType, (int8x16_t **)&v19);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v10 = v19;
  v11 = v20 - (_BYTE *)v19;
  if (v20 != v19)
  {
    if (v11 < 0)
      std::vector<long>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v20 - (_BYTE *)v19);
    v13 = &v12[8 * (v11 >> 3)];
    __p = v12;
    v18 = v13;
    memcpy(v12, v10, v11);
    v17 = v13;
  }
  v14 = (*(uint64_t (**)(GPU::BaseOpHandler *, GPU::MPSGraphKernelDAG *, void **, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, this, &__p, v9, 0);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    *(_QWORD *)&v21 = v5;
    *((_QWORD *)&v21 + 1) = v14;
    std::__hash_table<std::__hash_value_type<void *,BaseTensor *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,BaseTensor *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,BaseTensor *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,BaseTensor *>>>::__emplace_unique_key_args<void *,std::pair<void *,BaseTensor *>>((float *)this + 4, (uint64_t *)&v21, &v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return v14;
}

void sub_180DC86A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

int8x16_t *getBaseTensorShape@<X0>(uint64_t **a1@<X0>, int8x16_t **a2@<X8>)
{
  uint64_t **v2;
  uint64_t InterfaceFor;
  uint64_t v5;
  uint64_t ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *result;
  uint64_t v11;
  int8x16_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  uint64_t v24;

  if (!a1)
    __assert_rtn("dyn_cast", "Casting.h", 650, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
  v2 = a1;
  if (mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(a1))
  {
    InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v2);
    if (!InterfaceFor)
      __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
    v23 = v2;
    v24 = InterfaceFor;
  }
  else
  {
    v2 = 0;
    v23 = 0;
    v24 = 0;
    if (MTLReportFailureTypeEnabled())
      MTLReportFailure();
  }
  if (!*v2)
    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
  if ((_UNKNOWN *)(*v2)[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && MTLReportFailureTypeEnabled())
  {
    MTLReportFailure();
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v23) & 1) == 0)
    __assert_rtn("getRank", "BuiltinTypeInterfaces.h.inc", 156, "(*this).hasRank() && \"cannot query rank of unranked shaped type\"");
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v23);
  if (v5)
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v23);
    v8 = v7;
    v9 = (int8x16_t *)(ArgAttrsAttr + 8 * v7);
    result = (int8x16_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v23);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v11 = (char *)v9 - (char *)result;
    if (v9 != result)
    {
      if (v11 < 0)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v12 = result;
      result = (int8x16_t *)operator new((char *)v9 - (char *)result);
      *a2 = result;
      a2[1] = result;
      a2[2] = (int8x16_t *)((char *)result + 8 * (v11 >> 3));
      if (v9 == v12)
      {
        v16 = (char *)result;
      }
      else
      {
        v13 = ArgAttrsAttr + 8 * v8 - (_QWORD)v12 - 8;
        if (v13 < 0x18)
          goto LABEL_17;
        v14 = (v13 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v9 = (int8x16_t *)((char *)v9 - v15);
        v16 = &result->i8[v15];
        v17 = result + 1;
        v18 = (int8x16_t *)(8 * v8 + ArgAttrsAttr - 16);
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = vextq_s8(v18[-1], v18[-1], 8uLL);
          v17[-1] = vextq_s8(*v18, *v18, 8uLL);
          *v17 = v20;
          v17 += 2;
          v18 -= 2;
          v19 -= 4;
        }
        while (v19);
        result = (int8x16_t *)v16;
        if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v16 = (char *)result;
          do
          {
            v21 = v9[-1].i64[1];
            v9 = (int8x16_t *)((char *)v9 - 8);
            *(_QWORD *)v16 = v21;
            v16 += 8;
          }
          while (v9 != v12);
        }
      }
      a2[1] = (int8x16_t *)v16;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v22 = operator new(8uLL);
    *a2 = (int8x16_t *)v22;
    *v22 = 1;
    result = (int8x16_t *)(v22 + 1);
    a2[1] = result;
    a2[2] = result;
  }
  return result;
}

void sub_180DC8988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id GPU::MPSGraphKernelDAG::getNDArraysForPlaceholders(GPU::MPSGraphKernelDAG *this, GPURegionRuntime *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (uint64_t *)*((_QWORD *)this + 7);
  v6 = (uint64_t *)*((_QWORD *)this + 8);
  if (v5 != v6)
  {
    v7 = (_QWORD *)((char *)a2 + 88);
    do
    {
      v15 = *v5;
      v14 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v15) + 2);
      v8 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v7, &v14);
      if (v8
        && (v13 = v15,
            (v9 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(v8 + 3, &v13)) != 0))
      {
        v10 = (id)v9[3];
      }
      else
      {
        v10 = 0;
      }
      objc_msgSend(v10, "mpsndarray");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11 && MTLReportFailureTypeEnabled())
        MTLReportFailure();
      objc_msgSend(v4, "addObject:", v11);

      ++v5;
    }
    while (v5 != v6);
  }
  return v4;
}

void sub_180DC8AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_180DC8AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_180DC8B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GPU::MPSGraphKernelDAG::getBaseTensorFromDataMap(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  float *v5;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **StaticType;
  int MPSDataType;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t DefiningOp;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Block *ParentOp;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __guard v39;
  int OperandRange;
  char v41;
  int v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t Op;
  _OWORD v70[5];
  _QWORD v71[2];
  void *__p;
  _BYTE *v73;
  _QWORD *v74;
  __int128 v75;

  v74 = (_QWORD *)a2;
  v5 = (float *)(a1 + 16);
  v6 = *(int8x8_t *)(a1 + 24);
  if (v6)
  {
    v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
    v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
    v10 = (uint8x8_t)vcnt_s8(v6);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v9;
      if (v9 >= *(_QWORD *)&v6)
        v11 = v9 % *(_QWORD *)&v6;
    }
    else
    {
      v11 = (*(_QWORD *)&v6 - 1) & v9;
    }
    v12 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (v13[2] == a2)
                return v13[3];
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_21;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == a2)
              return v13[3];
          }
          else
          {
            if (v15 >= *(_QWORD *)&v6)
              v15 %= *(_QWORD *)&v6;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  StaticType = (uint64_t **)GPURegionRuntime::getStaticType(*(_QWORD *)(a1 + 128), a2);
  MPSDataType = getMPSDataType(StaticType);
  if (MPSDataType == -2147483640)
  {
    v19 = 536870920;
    getBaseTensorShape(StaticType, (int8x16_t **)&__p);
    if (!a3)
      goto LABEL_28;
    goto LABEL_27;
  }
  v19 = MPSDataType;
  if (MPSDataType == 4)
    v19 = 8;
  getBaseTensorShape(StaticType, (int8x16_t **)&__p);
  if (a3)
  {
LABEL_27:
    v20 = *a3;
    v21 = a3[1] - *a3;
    if ((unint64_t)v21 >= 8)
    {
      v27 = 0;
      v28 = v21 >> 2;
      v29 = (char *)__p;
      v30 = (v73 - (_BYTE *)__p) >> 3;
      do
      {
        if (v28 <= v27 + 1)
          std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::__throw_out_of_range[abi:ne180100]();
        v31 = *(int *)(v20 + 4 * v27);
        v32 = *(int *)(v20 + 4 * v27 + 4);
        if ((_DWORD)v31 != (_DWORD)v32 && v30 > v31 && v30 > v32)
        {
          v35 = 8 * v31;
          v36 = 8 * v32;
          v37 = *(_QWORD *)&v29[v35];
          *(_QWORD *)&v29[v35] = *(_QWORD *)&v29[v36];
          *(_QWORD *)&v29[v36] = v37;
        }
        v27 += 2;
      }
      while (v28 >> 1 > v27);
    }
  }
LABEL_28:
  v71[0] = 0;
  v71[1] = 0;
  *(_QWORD *)&v75 = v71;
  *(_QWORD *)&v70[0] = v74;
  if (!v74)
    __assert_rtn("matchPattern", "Matchers.h", 402, "value");
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v70);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v75, DefiningOp))
    goto LABEL_67;
  v23 = (_QWORD *)*v74;
  if (*v74)
  {
    v24 = 0;
    do
    {
      v25 = v23[2];
      ParentOp = *(mlir::Block **)(v25 + 16);
      if (ParentOp)
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      if (ParentOp == *(mlir::Block **)(a1 + 112))
        v24 = v25;
      v23 = (_QWORD *)*v23;
    }
    while (v23);
  }
  else
  {
    v24 = 0;
  }
  v38 = mlir::Value::getDefiningOp((mlir::Value *)&v74);
  v39 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, __guard))(**(_QWORD **)(v38 + 48) + 32))(*(_QWORD *)(v38 + 48), v39))
    goto LABEL_67;
  v70[0] = 0uLL;
  *(_QWORD *)&v75 = v70;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v75, v38))
  {
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v70);
    if (v24)
      v41 = OperandRange;
    else
      v41 = 0;
    if ((v41 & 1) == 0)
    {
      if (OperandRange)
        goto LABEL_93;
      goto LABEL_67;
    }
  }
  else if (!v24)
  {
    goto LABEL_93;
  }
  v42 = *(_DWORD *)(v24 + 44);
  if ((v42 & 0x800000) == 0)
    goto LABEL_93;
  v43 = 0;
  v44 = 1;
  v45 = 24;
  do
  {
    if (v43 >= *(unsigned int *)(v24 + 68))
      break;
    if (*(_QWORD **)(*(_QWORD *)(v24 + 72) + v45) == v74)
    {
      v44 = (***(uint64_t (****)(_QWORD, uint64_t, unint64_t))(a1 + 136))(*(_QWORD *)(a1 + 136), v24, v43);
      v42 = *(_DWORD *)(v24 + 44);
    }
    ++v43;
    v45 += 32;
  }
  while ((v42 & 0x800000) != 0);
  if ((v44 & 1) != 0)
  {
LABEL_93:
    mlir::mps::CPUNDArray::CPUNDArray(v70, v71[0]);
    if (mlir::mps::CPUNDArray::isIntegerType((mlir::mps::CPUNDArray *)v70))
    {
      mlir::mps::CPUNDArray::getSplatIntegerValue((mlir::mps::CPUNDArray *)v70);
      Op = MPSKernelDAG::constantOp();
    }
    else if (mlir::mps::CPUNDArray::isFloatType((mlir::mps::CPUNDArray *)v70))
    {
      mlir::mps::CPUNDArray::getSplatFloatValue((mlir::mps::CPUNDArray *)v70);
      Op = MPSKernelDAG::constantOp();
    }
    else
    {
      if (!mlir::mps::CPUNDArray::isComplexType((mlir::mps::CPUNDArray *)v70))
        __assert_rtn("getBaseTensorFromDataMap", "MPSRuntime.mm", 1713, "0 && \"unkown type\"");
      mlir::mps::CPUNDArray::getSplatComplexValue((__int16 **)v70);
      if (v19 != 285212736 && v19 != 285212704)
        llvm::llvm_unreachable_internal((llvm *)"unsupported complex type", "/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm", (const char *)0x67);
      MPSKernelDAG::constantOp();
      MPSKernelDAG::constantOp();
      Op = MPSKernelDAG::complexCreateOp();
    }
    v46 = Op;
    *(_QWORD *)&v75 = v74;
    *((_QWORD *)&v75 + 1) = Op;
    std::__hash_table<std::__hash_value_type<void *,BaseTensor *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,BaseTensor *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,BaseTensor *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,BaseTensor *>>>::__emplace_unique_key_args<void *,std::pair<void *,BaseTensor *>>(v5, (uint64_t *)&v75, &v75);
    mlir::mps::CPUNDArray::~CPUNDArray((void **)v70);
    v49 = __p;
    if (!__p)
      return v46;
    goto LABEL_91;
  }
LABEL_67:
  v46 = MPSKernelDAG::placeholderOp();
  *(_QWORD *)&v70[0] = v74;
  *((_QWORD *)&v70[0] + 1) = v46;
  std::__hash_table<std::__hash_value_type<void *,BaseTensor *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,BaseTensor *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,BaseTensor *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,BaseTensor *>>>::__emplace_unique_key_args<void *,std::pair<void *,BaseTensor *>>(v5, (uint64_t *)v70, v70);
  v48 = *(char **)(a1 + 64);
  v47 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v48 < v47)
  {
    *(_QWORD *)v48 = v74;
    *(_QWORD *)(a1 + 64) = v48 + 8;
    v49 = __p;
    if (!__p)
      return v46;
    goto LABEL_91;
  }
  v50 = *(char **)(a1 + 56);
  v51 = (v48 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
    std::vector<long>::__throw_length_error[abi:ne180100]();
  v53 = v47 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (v54 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v55 = (char *)operator new(8 * v54);
  }
  else
  {
    v55 = 0;
  }
  v56 = &v55[8 * v51];
  v57 = &v55[8 * v54];
  *(_QWORD *)v56 = v74;
  v58 = v56 + 8;
  if (v48 != v50)
  {
    v59 = v48 - v50 - 8;
    if (v59 < 0x58)
      goto LABEL_112;
    if ((unint64_t)(v50 - v55) < 0x20)
      goto LABEL_112;
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v48[-v61];
    v56 -= v61;
    v63 = &v55[8 * v51 - 16];
    v64 = v48 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v63 - 1) = *((_OWORD *)v64 - 1);
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v48 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_112:
      do
      {
        v67 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *((_QWORD *)v56 - 1) = v67;
        v56 -= 8;
      }
      while (v48 != v50);
    }
    v48 = *(char **)(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = v56;
  *(_QWORD *)(a1 + 64) = v58;
  *(_QWORD *)(a1 + 72) = v57;
  if (v48)
    operator delete(v48);
  *(_QWORD *)(a1 + 64) = v58;
  v49 = __p;
  if (__p)
  {
LABEL_91:
    v73 = v49;
    operator delete(v49);
  }
  return v46;
}

void sub_180DC91A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  mlir::mps::CPUNDArray::~CPUNDArray((void **)&a9);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

mlir::Operation **mlir::OwningOpRef<mlir::func::FuncOp>::~OwningOpRef(mlir::Operation **a1)
{
  mlir::Operation *v2;

  v2 = *a1;
  if (v2)
    mlir::Operation::erase(v2);
  return a1;
}

void GPURegionRuntime::TIAndFoldHelper::init(GPURegionRuntime::TIAndFoldHelper *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::GenericProgramPoint *v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *i;
  mlir::Operation *v19;
  int8x8_t *v20;
  int8x8_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  _QWORD *AttrData;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  mlir::Operation *v45;
  mlir::Operation *v46;
  const char *v47;
  __int16 v48;
  uint64_t v49[2];
  const char *v50;
  uint64_t v51;
  __int16 v52;
  mlir::Operation *v53[5];

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
  v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) == 0)
    goto LABEL_75;
  v3 = v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 64;
  if (v3 >= 0xFFFFFFFFFFFFFFF9)
    goto LABEL_76;
  v4 = *(_QWORD *)(((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v1 + 40) + 8);
  if (v4)
    v5 = v4 - 8;
  else
    v5 = 0;
  v6 = (mlir::GenericProgramPoint *)(v5 + 32);
  v7 = *(mlir::GenericProgramPoint **)(v5 + 40);
  if (v7 != (mlir::GenericProgramPoint *)(v5 + 32))
  {
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v7);
      v10 = v9;
      v11 = *(_QWORD *)(v9 + 48);
      v12 = *(void **)(v11 + 16);
      if (v12 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v53[0] = *(mlir::Operation **)(v11 + 8);
        AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v53);
        if (v40 == 13 && *AttrData == 0x6974732E7873706DLL && *(_QWORD *)((char *)AttrData + 5) == 0x6465686374697473)
        {
          v52 = 1283;
          v49[0] = (uint64_t)"classof on '";
          v50 = "mpsx.stitched";
          v44 = 13;
          goto LABEL_79;
        }
      }
      else if (v12 == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
      {
        v13 = *(unsigned int *)(v9 + 44);
        if ((v13 & 0x7FFFFF) != 0)
        {
          v14 = v9 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 64;
          if (v14 < 0xFFFFFFFFFFFFFFF9)
          {
            v15 = *(_QWORD *)(((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v9 + 40) + 8);
            if (v15)
              v16 = v15 - 8;
            else
              v16 = 0;
            v17 = (mlir::GenericProgramPoint *)(v16 + 32);
            for (i = *(mlir::GenericProgramPoint **)(v16 + 40); ; i = (mlir::GenericProgramPoint *)*((_QWORD *)i + 1))
            {
              if (i == v17)
                goto LABEL_9;
              mlir::GenericProgramPoint::~GenericProgramPoint(i);
              v45 = v19;
              v20 = (int8x8_t *)*((_QWORD *)this + 1);
              v21 = v20[34];
              if (!*(_QWORD *)&v21)
                goto LABEL_73;
              v22 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v19) + 8) ^ ((unint64_t)v19 >> 32));
              v23 = 0x9DDFEA08EB382D69 * (((unint64_t)v19 >> 32) ^ (v22 >> 47) ^ v22);
              v24 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
              v25 = (uint8x8_t)vcnt_s8(v21);
              v25.i16[0] = vaddlv_u8(v25);
              if (v25.u32[0] > 1uLL)
              {
                v26 = v24;
                if (v24 >= *(_QWORD *)&v21)
                  v26 = v24 % *(_QWORD *)&v21;
              }
              else
              {
                v26 = v24 & (*(_QWORD *)&v21 - 1);
              }
              v27 = *(_QWORD **)(*(_QWORD *)&v20[33] + 8 * v26);
              if (!v27)
                goto LABEL_73;
              v28 = (_QWORD *)*v27;
              if (!v28)
                goto LABEL_73;
              if (v25.u32[0] < 2uLL)
              {
                v29 = *(_QWORD *)&v21 - 1;
                while (1)
                {
                  v31 = v28[1];
                  if (v31 == v24)
                  {
                    if ((mlir::Operation *)v28[2] == v19)
                      goto LABEL_41;
                  }
                  else if ((v31 & v29) != v26)
                  {
                    goto LABEL_73;
                  }
                  v28 = (_QWORD *)*v28;
                  if (!v28)
                    goto LABEL_73;
                }
              }
              while (1)
              {
                v30 = v28[1];
                if (v30 == v24)
                  break;
                if (v30 >= *(_QWORD *)&v21)
                  v30 %= *(_QWORD *)&v21;
                if (v30 != v26)
                  goto LABEL_73;
LABEL_31:
                v28 = (_QWORD *)*v28;
                if (!v28)
                  goto LABEL_73;
              }
              if ((mlir::Operation *)v28[2] != v19)
                goto LABEL_31;
LABEL_41:
              v32 = v28[3];
              if (*(_BYTE *)(v32 + 56) || *(_BYTE *)(v32 + 57))
              {
LABEL_18:
                (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 80))(this, v32);
                continue;
              }
              if (!v19)
                goto LABEL_74;
              v33 = *((_QWORD *)v19 + 6);
              v34 = *(void **)(v33 + 16);
              if (v34 == &mlir::detail::TypeIDResolver<void,void>::id)
              {
                v53[0] = *(mlir::Operation **)(v33 + 8);
                v35 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v53);
                if (v36 != 21)
                  goto LABEL_56;
                v37 = *v35 == 0x6E656D6563616C70 && v35[1] == 0x6E6F696765722E74;
                if (!v37 || *(_QWORD *)((char *)v35 + 13) != 0x6C6C61635F6E6F69)
                  goto LABEL_56;
                v52 = 1283;
                v49[0] = (uint64_t)"classof on '";
                v50 = "placement.region_call";
                v44 = 21;
LABEL_79:
                v51 = v44;
                v47 = "' failed due to the operation not being registered";
                v48 = 259;
                llvm::operator+(v49, (uint64_t *)&v47, (uint64_t)v53);
                llvm::report_fatal_error((llvm::Twine *)v53, 1);
              }
              if (v34 == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
              {
                v46 = v19;
                if (!mlir::placement::RegionCall::getRegionType(&v46))
                  goto LABEL_18;
              }
LABEL_56:
              if (_ZN4llvm3isaIN4mlir4mpsx16ReturnStitchedOpENS1_3mps10IdentityOpEJEPNS1_9OperationEEEbRKT2_((uint64_t)&v45))
                goto LABEL_18;
            }
          }
LABEL_76:
          __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
        }
LABEL_75:
        __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
      }
      if ((*(_DWORD *)(v10 + 44) & 0x7FFFFF) == 0)
      {
        v49[0] = v10;
        v42 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(*((_QWORD *)this + 1) + 264), v49);
        if (!v42)
LABEL_73:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v43 = v42[3];
        if (*(_BYTE *)(v43 + 56) || *(_BYTE *)(v43 + 57))
          goto LABEL_8;
        if (!v49[0])
LABEL_74:
          __assert_rtn("dyn_cast", "Casting.h", 662, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
        if ((v53[0] = (mlir::Operation *)llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible(v49[0])) != 0
          && !mlir::placement::RegionCall::getRegionType(v53)
          || _ZN4llvm3isaIN4mlir4mpsx16ReturnStitchedOpENS1_3mps10IdentityOpEJEPNS1_9OperationEEEbRKT2_((uint64_t)v49))
        {
LABEL_8:
          (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 80))(this, v43);
        }
      }
LABEL_9:
      v7 = (mlir::GenericProgramPoint *)*((_QWORD *)v7 + 1);
    }
    while (v7 != v6);
  }
}

BOOL GPURegionRuntime::isSmallIntType(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t InterfaceFor;
  uint64_t v6;
  _QWORD *ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t OperandRange;
  uint64_t **v17;
  uint64_t v18;

  if (!a2)
    __assert_rtn("dyn_cast", "Casting.h", 650, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
  if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(a2))
  {
    v17 = 0;
    v18 = 0;
    return 0;
  }
  InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(a2);
  if (!InterfaceFor)
    __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
  v17 = a2;
  v18 = InterfaceFor;
  v6 = *(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v17);
  if (!v6)
    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
  if (*(_UNKNOWN **)(v6 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 0;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v17);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) < 8)
    return 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v17))
    return a3;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v17);
  if (v9)
  {
    v10 = 8 * v9;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v10 -= 8;
      if (!v10)
        goto LABEL_16;
    }
    return a3;
  }
LABEL_16:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v17))
LABEL_23:
    __assert_rtn("getNumElements", "BuiltinTypeInterfaces.h.inc", 162, "hasStaticShape() && \"cannot get element count of dynamic shaped type\"");
  v11 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v17);
  if (v12)
  {
    v13 = 8 * v12;
    while (*v11 != 0x8000000000000000)
    {
      ++v11;
      v13 -= 8;
      if (!v13)
        goto LABEL_21;
    }
    goto LABEL_23;
  }
LABEL_21:
  v14 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v17);
  return mlir::ShapedType::getNumElements(v14, v15) < 17;
}

void GPURegionRuntime::TIAndFoldHelper::runOnRegion(GPURegionRuntime::TIAndFoldHelper *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  GPU::BaseOpHandler **v43;
  uint64_t v44;
  GPU::BaseOpHandler *v45;
  __int128 v46;

  v46 = *(_OWORD *)(*((_QWORD *)a1 + 1) + 232);
  mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v46);
  if (a3 > a5)
  {
    if (v14)
    {
      v26 = 0;
      v27 = (_QWORD *)(a4 + 8);
      while (1)
      {
        v29 = *(unsigned int *)(v46 + 44);
        if ((v29 & 0x7FFFFF) == 0)
          break;
        v30 = v46 + 16 * ((v29 >> 23) & 1) + ((v29 >> 21) & 0x7F8) + 64;
        if (v30 >= 0xFFFFFFFFFFFFFFF9)
LABEL_45:
          __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
        v31 = (_QWORD *)(((v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v46 + 40));
        if ((_QWORD *)*v31 == v31)
          goto LABEL_47;
        v32 = v31[1];
        v33 = v32 - 8;
        if (!v32)
          v33 = 0;
        v34 = *(_QWORD *)(v33 + 48);
        if (v26 >= (*(_QWORD *)(v33 + 56) - v34) >> 3)
          goto LABEL_47;
        if (a3 == v26)
          goto LABEL_43;
        v35 = *(_QWORD *)(v34 + 8 * v26);
        if (*(_QWORD *)(a2 + 8 * v26))
          (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)a1 + 32))(a1, v35);
        if (a5 == v26)
LABEL_43:
          __assert_rtn("operator[]", "ArrayRef.h", 257, "Index < Length && \"Invalid index!\"");
        v36 = *(v27 - 1);
        if (v36)
          (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, v35, v36, *v27);
        ++v26;
        mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v46);
        v27 += 2;
        if (v26 >= v28)
          goto LABEL_31;
      }
LABEL_44:
      __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
    }
  }
  else if (v14)
  {
    v15 = 0;
    v16 = (_QWORD *)(a4 + 8);
    do
    {
      v18 = *(unsigned int *)(v46 + 44);
      if ((v18 & 0x7FFFFF) == 0)
        goto LABEL_44;
      v19 = v46 + 16 * ((v18 >> 23) & 1) + ((v18 >> 21) & 0x7F8) + 64;
      if (v19 > 0xFFFFFFFFFFFFFFF8)
        goto LABEL_45;
      v20 = (_QWORD *)(((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v46 + 40));
      if ((_QWORD *)*v20 == v20)
        goto LABEL_47;
      v21 = v20[1];
      v22 = v21 - 8;
      if (!v21)
        v22 = 0;
      v23 = *(_QWORD *)(v22 + 48);
      if (v15 >= (*(_QWORD *)(v22 + 56) - v23) >> 3)
        goto LABEL_47;
      if (a3 == v15)
        goto LABEL_43;
      v24 = *(_QWORD *)(v23 + 8 * v15);
      if (*(_QWORD *)(a2 + 8 * v15))
        (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)a1 + 32))(a1, v24);
      v25 = *(v16 - 1);
      if (v25)
        (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, v24, v25, *v16);
      ++v15;
      mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v46);
      v16 += 2;
    }
    while (v15 < v17);
  }
LABEL_31:
  mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v46);
  if (v37)
  {
    v38 = 0;
    v39 = 24;
    while (1)
    {
      v41 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 248);
      if ((*(_BYTE *)(v41 + 46) & 0x80) == 0)
        __assert_rtn("getOperandStorage", "Operation.h", 960, "hasOperandStorage && \"expected operation to have operand storage\"");
      if (*(_DWORD *)(v41 + 68) <= v38)
        break;
      if (a7 == v38)
        goto LABEL_43;
      if (*(_QWORD *)(a6 + 8 * v38))
        (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(*(_QWORD *)(v41 + 72) + v39));
      ++v38;
      mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v46);
      v39 += 32;
      if (v38 == v40)
        goto LABEL_39;
    }
LABEL_47:
    __assert_rtn("operator[]", "ArrayRef.h", 443, "Index < this->size() && \"Invalid index!\"");
  }
LABEL_39:
  v42 = *((unsigned int *)a1 + 18);
  if ((_DWORD)v42)
  {
    v43 = (GPU::BaseOpHandler **)*((_QWORD *)a1 + 8);
    v44 = 8 * v42;
    do
    {
      v45 = *v43++;
      GPURegionRuntime::TIAndFoldHelper::runOnOp(a1, v45);
      v44 -= 8;
    }
    while (v44);
  }
}

void GPURegionRuntime::TIAndFoldHelper::runOnOp(GPURegionRuntime::TIAndFoldHelper *this, GPU::BaseOpHandler *a2)
{
  mlir::Operation *v2;
  uint64_t v4;
  uint64_t v5;
  mlir::Block *v6;
  uint64_t ParentOp;
  unint64_t v8;
  uint64_t v9;
  mlir::Operation *v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::mps *v38;
  mlir::mps *v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t **v48;
  void *v49;
  uint64_t Result;
  uint64_t Input;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t ***v63;
  uint64_t v64;
  mlir::mps *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t InterfaceFor;
  llvm *Type;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  mlir::mps **v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  mlir::mps *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  mlir::Operation *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  const char *v127;
  const char *v128;
  const char *v129;
  int v130;
  const char *v131;
  const char *v132;
  const char *v133;
  int v134;
  const char *v135;
  const char *v136;
  int v137;
  const char *v138;
  const char *v139;
  llvm::raw_ostream *v140;
  llvm::raw_ostream *v141;
  llvm::raw_ostream *v142;
  llvm::raw_ostream *v143;
  llvm::raw_ostream *v144;
  llvm::raw_ostream *v145;
  llvm::raw_ostream *v146;
  llvm::raw_ostream *v147;
  uint64_t v148;
  uint64_t v149;
  mlir::Operation *v150;
  GPU::BaseOpHandler *v151;
  uint64_t v152[2];
  uint64_t **v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  _BYTE v158[48];
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  mlir::mps **v163;
  uint64_t v164;
  _QWORD v165[8];

  v165[6] = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Operation *)*((_QWORD *)a2 + 3);
  v150 = v2;
  v151 = a2;
  if (!v2)
    __assert_rtn("dyn_cast", "Casting.h", 662, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
  v4 = llvm::DefaultDoCastIfPossible<mlir::mpsx::ReturnStitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::ReturnStitchedOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v2);
  if (!v4)
  {
    v163 = (mlir::mps **)llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v2);
    if (!v163 || (v2 = v150, mlir::placement::RegionCall::getRegionType((mlir::Operation **)&v163)))
    {
      v149 = 0;
      v163 = (mlir::mps **)&v149;
      v164 = (uint64_t)this;
      v165[0] = &v150;
      v165[1] = &v151;
      v8 = *((unsigned int *)v2 + 9);
      v156 = v158;
      v157 = 0x100000000;
      if ((_DWORD)v8)
      {
        v9 = 0;
        if ((_DWORD)v8 != 1)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v8, 8);
          v9 = v157;
        }
        if (v8 != v9)
          bzero((char *)v156 + 8 * v9, 8 * (v8 - v9));
        if (HIDWORD(v157) < v8)
          __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
        LODWORD(v157) = v8;
      }
      if (*((_BYTE *)v151 + 56))
      {
        v159 = &v161;
        v160 = 0x100000000;
        v10 = v150;
        if (!*((_DWORD *)v150 + 9))
          goto LABEL_70;
        v11 = 0;
        v12 = "DenseMap.h";
        v13 = "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shou"
              "ldn't be inserted into map!\"";
        v14 = "LookupBucketFor";
        while (1)
        {
          v15 = (char *)v10 + 16 * ~v11;
          v16 = (uint64_t)v10 + 24 * (5 - v11) - 96;
          if (v11 >= 6)
            v17 = v16;
          else
            v17 = (uint64_t)v15;
          if (isStaticMPSType((uint64_t **)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8)))
          {
            if (v11 >= v157)
              __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
            v18 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_19;
          }
          v19 = *((_QWORD *)this + 2);
          v20 = *((unsigned int *)this + 8);
          if (!(_DWORD)v20)
            goto LABEL_39;
          if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v28 = 651;
            goto LABEL_212;
          }
          LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
          v22 = (uint64_t *)(v19 + 16 * v21);
          v23 = *v22;
          if (*v22 == v17)
          {
            v24 = (uint64_t *)(v19 + 16 * v20);
            if (v22 == v24)
              goto LABEL_39;
          }
          else
          {
            v25 = 1;
            do
            {
              if (v23 == -4096)
                goto LABEL_39;
              v26 = v21 + v25++;
              v21 = v26 & (v20 - 1);
              v23 = *(_QWORD *)(v19 + 16 * v21);
            }
            while (v23 != v17);
            v22 = (uint64_t *)(v19 + 16 * v21);
            v24 = (uint64_t *)(v19 + 16 * v20);
            if (v22 == v24)
              goto LABEL_39;
          }
          if (v22 == v24)
          {
            v28 = 1270;
            v14 = "operator->";
            v13 = "Ptr != End && \"dereferencing end() iterator\"";
            goto LABEL_212;
          }
          v18 = v22[1];
          if (v18)
          {
            if (v11 >= v157)
            {
              v28 = 294;
              v14 = "operator[]";
              v12 = "SmallVector.h";
              v13 = "idx < size()";
LABEL_212:
              __assert_rtn(v14, v12, v28, v13);
            }
LABEL_19:
            *((_QWORD *)v156 + v11++) = v18;
            v10 = v150;
            if (v11 >= *((unsigned int *)v150 + 9))
              goto LABEL_57;
          }
          else
          {
LABEL_39:
            if (v160 >= (unint64_t)HIDWORD(v160))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, &v161, v160 + 1, 4);
              *((_DWORD *)v159 + v160) = v11;
              v27 = v160;
              if (v160 >= HIDWORD(v160))
              {
LABEL_44:
                v28 = 102;
                v14 = "set_size";
                v12 = "SmallVector.h";
                v13 = "N <= capacity()";
                goto LABEL_212;
              }
            }
            else
            {
              *((_DWORD *)v159 + v160) = v11;
              v27 = v160;
              if (v160 >= HIDWORD(v160))
                goto LABEL_44;
            }
            LODWORD(v160) = v27 + 1;
            ++v11;
            v10 = v150;
            if (v11 >= *((unsigned int *)v150 + 9))
            {
LABEL_57:
              if ((_DWORD)v160)
              {
                v38 = GPURegionRuntime::TIAndFoldHelper::runOnOp(GPU::BaseOpHandler *)::$_0::operator()(&v163);
                if ((_DWORD)v160)
                {
                  v39 = v38;
                  v40 = (unsigned int *)v159;
                  v41 = (char *)v38 - 96;
                  v42 = 4 * v160;
                  do
                  {
                    v43 = *v40;
                    if (*((_DWORD *)v150 + 9) <= v43)
                      __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                    v44 = *((_DWORD *)v39 + 9);
                    if (v43 > 5)
                    {
                      if (v44 <= v43)
LABEL_204:
                        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                      v46 = (char *)v150 - 24 * (v43 - 5) - 96;
                      v47 = &v41[-24 * (v43 - 5)];
                    }
                    else
                    {
                      if (v44 <= v43)
                        goto LABEL_204;
                      v45 = 16 * v43 + 16;
                      v46 = (char *)v150 - v45;
                      v47 = (char *)v39 - v45;
                    }
                    if (v157 <= v43)
                      __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
                    v48 = (uint64_t **)(*((_QWORD *)v47 + 1) & 0xFFFFFFFFFFFFFFF8);
                    *((_QWORD *)v156 + v43) = v48;
                    if (isStaticMPSType(v48))
                      (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, char *, uint64_t **))(*(_QWORD *)this + 32))(this, v46, v48);
                    ++v40;
                    v42 -= 4;
                  }
                  while (v42);
                }
              }
LABEL_70:
              v49 = v159;
              if (v159 != &v161)
LABEL_71:
                free(v49);
LABEL_72:
              if (!v150)
                __assert_rtn("dyn_cast", "Casting.h", 662, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
              v148 = llvm::DefaultDoCastIfPossible<mlir::mps::IdentityOp,mlir::Operation *,llvm::CastInfo<mlir::mps::IdentityOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v150);
              if (v148)
              {
                Result = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v148);
                Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v148);
                v53 = (*(uint64_t (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 64))(this, Input);
                if (v53)
                  (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, Result, v53, v52);
              }
              else if (*((_BYTE *)v151 + 57))
              {
                if ((_DWORD)v157)
                {
                  v63 = (uint64_t ***)v156;
                  v64 = 8 * v157;
                  while (GPURegionRuntime::isSmallIntType(*((_QWORD *)this + 1), *v63, 0))
                  {
                    ++v63;
                    v64 -= 8;
                    if (!v64)
                      goto LABEL_87;
                  }
                }
                else
                {
LABEL_87:
                  v65 = GPURegionRuntime::TIAndFoldHelper::runOnOp(GPU::BaseOpHandler *)::$_0::operator()(&v163);
                  v159 = &v161;
                  v160 = 0x100000000;
                  if (mlir::Operation::fold((uint64_t)v65, (uint64_t)&v159))
                  {
                    v66 = v160;
                    if ((_DWORD)v160)
                    {
                      v67 = 0;
                      v68 = -16;
                      v69 = 24;
                      v70 = "Casting.h";
                      v71 = "cast";
                      do
                      {
                        if (v67 >= *((unsigned int *)v150 + 9))
                          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                        if (v67 >= 6)
                          v72 = (char *)v150 + v69;
                        else
                          v72 = (char *)v150 + v68;
                        v73 = *((_QWORD *)v159 + v67);
                        if ((v73 & 4) == 0)
                        {
                          v74 = (uint64_t **)(v73 & 0xFFFFFFFFFFFFFFF8);
                          if ((v73 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (!mlir::AttributeInterface<mlir::ElementsAttr,mlir::detail::ElementsAttrInterfaceTraits>::getInterfaceFor((uint64_t **)(v73 & 0xFFFFFFFFFFFFFFF8)))
                            {
                              v134 = 566;
                              v135 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
                              goto LABEL_216;
                            }
                            InterfaceFor = mlir::AttributeInterface<mlir::ElementsAttr,mlir::detail::ElementsAttrInterfaceTraits>::getInterfaceFor(v74);
                            if (!InterfaceFor)
                            {
                              v134 = 98;
                              v71 = "Interface";
                              v70 = "InterfaceSupport.h";
                              v135 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
                              goto LABEL_216;
                            }
                            v153 = v74;
                            v154 = InterfaceFor;
                            Type = (llvm *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v153);
                            if (v67 >= v157)
                              __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
                            if (*((llvm **)v156 + v67) != Type)
                            {
                              v140 = (llvm::raw_ostream *)llvm::errs(Type);
                              v141 = llvm::raw_ostream::operator<<(v140, "folder failure for: ");
                              v142 = mlir::operator<<(v141, v150);
                              v143 = llvm::raw_ostream::operator<<(v142, ":\n");
                              v144 = (llvm::raw_ostream *)llvm::errs(v143);
                              if (v157 <= v67)
                              {
                                v135 = "idx < size()";
                                v134 = 294;
                                v70 = "SmallVector.h";
                                v71 = "operator[]";
                              }
                              else
                              {
                                v146 = v145;
                                v152[0] = *((_QWORD *)v156 + v67);
                                mlir::Type::print((llvm::raw_ostream *)v152, v145);
                                v152[0] = (uint64_t)v153;
                                mlir::Attribute::print((mlir::Attribute *)v152, v147, 0);
                                llvm::raw_ostream::operator<<(v147, "\n");
                                v135 = "0 && \"folder type doesn't match expected type\"";
                                v134 = 1989;
                                v70 = "MPSRuntime.mm";
                                v71 = "runOnOp";
                              }
LABEL_216:
                              __assert_rtn(v71, v70, v134, v135);
                            }
                            (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, char *, uint64_t **, uint64_t))(*(_QWORD *)this + 56))(this, v72, v153, v154);
                            v66 = v160;
                          }
                        }
                        ++v67;
                        v68 -= 16;
                        v69 -= 24;
                      }
                      while (v67 < v66);
                    }
                  }
                  if (v159 != &v161)
                    free(v159);
                }
              }
              v82 = (mlir::mps **)v156;
              if (v156 != v158)
LABEL_116:
                free(v82);
              return;
            }
          }
        }
      }
      v54 = *((unsigned int *)v150 + 9);
      v55 = (char *)v150 - 16;
      if (!(_DWORD)v54)
        v55 = 0;
      v152[0] = (uint64_t)v55;
      v152[1] = v54;
      mlir::OperandRange::getTypes(v152, (uint64_t *)&v159);
      v153 = (uint64_t **)&v155;
      v154 = 0x100000000;
      v56 = v159;
      if (v161 != v159)
      {
        v136 = "base == rhs.base && \"incompatible iterators\"";
        v137 = 1202;
        v138 = "STLExtras.h";
        v139 = "operator-";
        goto LABEL_222;
      }
      v57 = v160;
      v58 = v162;
      v59 = v162 - v160;
      if ((unint64_t)(v162 - v160) < 2)
      {
        v60 = 0;
        v62 = 0;
        v61 = (uint64_t **)&v155;
        if (v162 == v160)
        {
LABEL_110:
          v81 = v59 + v60;
          if (v81 <= HIDWORD(v154))
          {
            LODWORD(v154) = v81;
            llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v156, (uint64_t)&v153);
            v49 = v153;
            if (v153 != (uint64_t **)&v155)
              goto LABEL_71;
            goto LABEL_72;
          }
          v136 = "N <= capacity()";
          v137 = 102;
          v138 = "SmallVector.h";
          v139 = "set_size";
LABEL_222:
          __assert_rtn(v139, v138, v137, v136);
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v153, &v155, v162 - v160, 8);
        v60 = v154;
        v61 = v153;
        v62 = v154;
        if (v58 == v57)
          goto LABEL_110;
      }
      v80 = (unint64_t *)&v61[v62];
      do
        *v80++ = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v56, v57++) + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v58 != v57);
      v60 = v154;
      goto LABEL_110;
    }
    v77 = *((_DWORD *)v150 + 11);
    if ((v77 & 0x800000) != 0)
    {
      v78 = *((unsigned int *)v150 + 17);
      v163 = (mlir::mps **)v165;
      v164 = 0x600000000;
      if ((_DWORD)v78)
      {
        if (v78 < 7)
        {
          v79 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, v165, v78, 8);
          v79 = v164;
        }
        if (v78 != v79)
          bzero(&v163[v79], 8 * (v78 - v79));
        if (HIDWORD(v164) < v78)
          __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
        LODWORD(v164) = v78;
        v2 = v150;
        v77 = *((_DWORD *)v150 + 11);
      }
      if ((v77 & 0x800000) != 0)
      {
        v83 = *((unsigned int *)v2 + 17);
        v159 = &v161;
        v160 = 0x300000000;
        if ((_DWORD)v83)
        {
          if (v83 < 4)
          {
            v84 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, &v161, v83, 16);
            v84 = v160;
          }
          if (v83 != v84)
            bzero((char *)v159 + 16 * v84, 16 * (v83 - v84));
          if (HIDWORD(v160) < v83)
            __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
          LODWORD(v160) = v83;
          v2 = v150;
        }
        goto LABEL_132;
      }
    }
    else
    {
      v163 = (mlir::mps **)v165;
      v164 = 0x600000000;
    }
    v159 = &v161;
    v160 = 0x300000000;
LABEL_132:
    v85 = *((unsigned int *)v2 + 9);
    v156 = v158;
    v157 = 0x600000000;
    if ((_DWORD)v85)
    {
      if (v85 < 7)
      {
        v86 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v85, 8);
        v86 = v157;
      }
      if (v85 != v86)
        bzero((char *)v156 + 8 * v86, 8 * (v85 - v86));
      if (HIDWORD(v157) < v85)
        __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
      LODWORD(v157) = v85;
      v2 = v150;
    }
    if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
    {
      v87 = 0;
      v88 = 0;
      v89 = 24;
      do
      {
        if (v88 >= *((unsigned int *)v2 + 17))
          break;
        v90 = *(_QWORD *)(*((_QWORD *)v2 + 9) + v89);
        v91 = (mlir::mps *)(*(uint64_t (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 40))(this, v90);
        if (v91)
        {
          if (v88 >= v164)
            __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
          v163[v88] = v91;
        }
        v92 = (*(uint64_t (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 64))(this, v90);
        if (v92)
        {
          if (v88 >= v160)
            __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
          v94 = (uint64_t *)((char *)v159 + v87);
          *v94 = v92;
          v94[1] = v93;
        }
        ++v88;
        v2 = v150;
        v87 += 16;
        v89 += 32;
      }
      while ((*((_BYTE *)v150 + 46) & 0x80) != 0);
    }
    if (!*((_DWORD *)v2 + 9))
    {
LABEL_170:
      v110 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(*((_QWORD *)this + 1) + 264), (uint64_t *)&v150);
      if (!v110)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v111 = *(_QWORD *)(*(_QWORD *)(v110[3] + 120) + 176);
      (*(void (**)(_QWORD, mlir::mps **, _QWORD, void *, _QWORD, void *, _QWORD))(**(_QWORD **)(v111 + 448)
                                                                                           + 16))(*(_QWORD *)(v111 + 448), v163, v164, v159, v160, v156, v157);
      v112 = v150;
      if (!*((_DWORD *)v150 + 9))
      {
LABEL_185:
        if (v156 != v158)
          free(v156);
        if (v159 != &v161)
          free(v159);
        v82 = v163;
        if (v163 != v165)
          goto LABEL_116;
        return;
      }
      v113 = 0;
      v114 = -16;
      v115 = 24;
      v116 = 24;
      while (1)
      {
        v117 = (char *)v112 + v114;
        v118 = (char *)v112 + v115;
        v119 = v113 >= 6 ? v118 : v117;
        v120 = *(_QWORD *)(v111 + 248);
        if ((*(_BYTE *)(v120 + 46) & 0x80) == 0)
          break;
        if (v113 >= *(unsigned int *)(v120 + 68))
        {
          v126 = 443;
          v129 = "operator[]";
          v128 = "ArrayRef.h";
          v127 = "Index < this->size() && \"Invalid index!\"";
LABEL_199:
          __assert_rtn(v129, v128, v126, v127);
        }
        v121 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v111 + 448) + 40))(*(_QWORD *)(v111 + 448), *(_QWORD *)(*(_QWORD *)(v120 + 72) + v116));
        if (v121)
          (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, char *, uint64_t))(*(_QWORD *)this + 32))(this, v119, v121);
        v122 = *(_QWORD *)(v111 + 248);
        if ((*(_BYTE *)(v122 + 46) & 0x80) == 0)
        {
          v130 = 960;
          v131 = "hasOperandStorage && \"expected operation to have operand storage\"";
          v132 = "Operation.h";
          v133 = "getOperandStorage";
          goto LABEL_202;
        }
        if (v113 >= *(unsigned int *)(v122 + 68))
        {
          v130 = 443;
          v133 = "operator[]";
          v132 = "ArrayRef.h";
          v131 = "Index < this->size() && \"Invalid index!\"";
LABEL_202:
          __assert_rtn(v133, v132, v130, v131);
        }
        v124 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v111 + 448) + 64))(*(_QWORD *)(v111 + 448), *(_QWORD *)(*(_QWORD *)(v122 + 72) + v116), v121);
        if (v124)
          (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, char *, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, v119, v124, v123);
        ++v113;
        v112 = v150;
        v116 += 32;
        v115 -= 24;
        v114 -= 16;
        if (v113 >= *((unsigned int *)v150 + 9))
          goto LABEL_185;
      }
      v126 = 960;
      v127 = "hasOperandStorage && \"expected operation to have operand storage\"";
      v128 = "Operation.h";
      v129 = "getOperandStorage";
      goto LABEL_199;
    }
    v95 = 0;
    v96 = *((unsigned int *)this + 8);
    v97 = v96 - 1;
    v98 = v157;
    v99 = "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn'"
          "t be inserted into map!\"";
    v100 = "LookupBucketFor";
    while (1)
    {
      v101 = (uint64_t)v2 + 24 * (5 - v95) - 96;
      if (v95 < 6)
        v101 = (uint64_t)v2 + 16 * ~v95;
      v102 = *((_QWORD *)this + 2);
      if (!(_DWORD)v96)
        goto LABEL_152;
      if ((v101 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v125 = 651;
        goto LABEL_208;
      }
      LODWORD(v103) = ((v101 >> 4) ^ (v101 >> 9)) & v97;
      v104 = (uint64_t *)(v102 + 16 * v103);
      v105 = *v104;
      if (*v104 == v101)
      {
        v106 = (uint64_t *)(v102 + 16 * v96);
        if (v104 == v106)
          goto LABEL_152;
      }
      else
      {
        v107 = 1;
        do
        {
          if (v105 == -4096)
            goto LABEL_152;
          v108 = v103 + v107++;
          v103 = v108 & v97;
          v105 = *(_QWORD *)(v102 + 16 * v103);
        }
        while (v105 != v101);
        v104 = (uint64_t *)(v102 + 16 * v103);
        v106 = (uint64_t *)(v102 + 16 * v96);
        if (v104 == v106)
          goto LABEL_152;
      }
      if (v104 == v106)
      {
        v125 = 1270;
        v100 = "operator->";
        v99 = "Ptr != End && \"dereferencing end() iterator\"";
LABEL_208:
        __assert_rtn(v100, "DenseMap.h", v125, v99);
      }
      v109 = v104[1];
      if (v109)
      {
        if (v95 >= v98)
          __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
        *((_QWORD *)v156 + v95) = v109;
        v2 = v150;
      }
LABEL_152:
      if (++v95 >= *((unsigned int *)v2 + 9))
        goto LABEL_170;
    }
  }
  v5 = v4;
  v6 = *(mlir::Block **)(v4 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    if ((*(_BYTE *)(v5 + 46) & 0x80) == 0)
      return;
  }
  else
  {
    ParentOp = 0;
    if ((*(_BYTE *)(v5 + 46) & 0x80) == 0)
      return;
  }
  v29 = 0;
  v30 = ParentOp - 16;
  v31 = ParentOp + 24;
  v32 = 24;
  do
  {
    if (v29 >= *(unsigned int *)(v5 + 68))
      break;
    if (v29 >= *(unsigned int *)(ParentOp + 36))
      __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + v32);
    if (v29 >= 6)
      v34 = v31;
    else
      v34 = v30;
    v35 = (*(uint64_t (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 40))(this, v33);
    if (v35)
      (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v34, v35);
    v36 = (*(uint64_t (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t))(*(_QWORD *)this + 64))(this, v33);
    if (v36)
      (*(void (**)(GPURegionRuntime::TIAndFoldHelper *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, v34, v36, v37);
    ++v29;
    v30 -= 16;
    v31 -= 24;
    v32 += 32;
  }
  while ((*(_BYTE *)(v5 + 46) & 0x80) != 0);
}

void sub_180DCADC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_180DCADD8()
{
  __cxa_end_catch();
  JUMPOUT(0x180DCAE58);
}

void sub_180DCADE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_180DCADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  if (a19 == v28)
  {
    v32 = a27;
    if (a27 == v27)
      goto LABEL_3;
  }
  else
  {
    free(a19);
    v32 = a27;
    if (a27 == v27)
    {
LABEL_3:
      if (*(_QWORD *)(v30 - 176) == v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  free(v32);
  if (*(_QWORD *)(v30 - 176) == v29)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  JUMPOUT(0x180DCAF24);
}

void sub_180DCAE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  if (a27 == v27)
    JUMPOUT(0x180DCAECCLL);
  JUMPOUT(0x180DCAEF0);
}

void sub_180DCAE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v2 - 176) == v1)
    _Unwind_Resume(a1);
  JUMPOUT(0x180DCAF24);
}

void sub_180DCAE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a19 == v19)
    _Unwind_Resume(a1);
  JUMPOUT(0x180DCAF24);
}

void sub_180DCAE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (a16 != v16)
    JUMPOUT(0x180DCAF14);
  JUMPOUT(0x180DCAF18);
}

void sub_180DCAE68()
{
  JUMPOUT(0x180DCAF18);
}

void sub_180DCAE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  if (a27 != v27)
    JUMPOUT(0x180DCAF14);
  JUMPOUT(0x180DCAF18);
}

void sub_180DCAF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;

  if (a27 != v28)
    free(a27);
  if (a19 != v27)
  {
    free(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GPURegionRuntime::TIAndFoldHelper::getType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v3)
    return 0;
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 16 * v4);
  v6 = *v5;
  if (*v5 != a2)
  {
    v9 = 1;
    while (v6 != -4096)
    {
      v10 = v4 + v9++;
      v4 = v10 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        v7 = (uint64_t *)(v2 + 16 * v3);
        if (v5 != v7)
          goto LABEL_5;
        return 0;
      }
    }
    return 0;
  }
  v7 = (uint64_t *)(v2 + 16 * v3);
  if (v5 == v7)
    return 0;
LABEL_5:
  if (v5 == v7)
    __assert_rtn("operator->", "DenseMap.h", 1270, "Ptr != End && \"dereferencing end() iterator\"");
  return v5[1];
}

mlir::mps *GPURegionRuntime::TIAndFoldHelper::runOnOp(GPU::BaseOpHandler *)::$_0::operator()(mlir::mps ***a1)
{
  mlir::mps *v1;
  mlir::mps **v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t DefiningOp;
  _QWORD *Value;
  _QWORD *v10;
  uint64_t EncodeTimeConstantOperand;
  _QWORD *v12;
  _QWORD *v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  mlir::MLIRContext *v19;
  uint64_t *v20;
  uint64_t **EncodeTimeTmpIRBuilder;
  mlir::Operation *v22;
  llvm *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  void *v26;
  mlir::Operation *v27;
  const mlir::OpPrintingFlags *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  if (!v1)
  {
    v3 = a1[1];
    v3[27] = 0;
    v3[34] = 0;
    v35 = v37;
    v36 = 0x400000000;
    v4 = (uint64_t)*a1[2];
    if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
    {
      v5 = *(_DWORD *)(v4 + 68);
      if (v5)
      {
        v6 = 0;
        v7 = 24;
        while (1)
        {
          v32[0] = *(_QWORD *)(*(_QWORD *)(v4 + 72) + v7);
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v32);
          if (!DefiningOp)
            break;
          v31 = llvm::DefaultDoCastIfPossible<mlir::mps::ConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConstantOp,mlir::Operation *,void>>::doCastIfPossible(DefiningOp);
          if (!v31)
            goto LABEL_9;
          Value = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v31);
          EncodeTimeConstantOperand = GPURegionRuntime::TIAndFoldHelper::getEncodeTimeConstantOperand((uint64_t)v3, Value, v10);
LABEL_14:
          v15 = EncodeTimeConstantOperand;
          if (v36 >= (unint64_t)HIDWORD(v36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 8);
            *((_QWORD *)v35 + v36) = v15;
            v16 = v36;
            if (v36 >= HIDWORD(v36))
LABEL_20:
              __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
          }
          else
          {
            *((_QWORD *)v35 + v36) = EncodeTimeConstantOperand;
            v16 = v36;
            if (v36 >= HIDWORD(v36))
              goto LABEL_20;
          }
          v5 = v16 + 1;
          LODWORD(v36) = v5;
          v4 = (uint64_t)*a1[2];
          if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
          {
            ++v6;
            v7 += 32;
            if (v6 < *(unsigned int *)(v4 + 68))
              continue;
          }
          goto LABEL_21;
        }
        v31 = 0;
LABEL_9:
        v13 = (_QWORD *)(*((uint64_t (**)(mlir::mps **, _QWORD))*v3 + 8))(v3, v32[0]);
        if (v13)
        {
          EncodeTimeConstantOperand = GPURegionRuntime::TIAndFoldHelper::getEncodeTimeConstantOperand((uint64_t)v3, v13, v12);
        }
        else
        {
          v14 = (mlir::MLIRContext *)(*((uint64_t (**)(mlir::mps **, _QWORD))*v3 + 5))(v3, v32[0]);
          if (v14)
            EncodeTimeConstantOperand = GPURegionRuntime::TIAndFoldHelper::getEncodeTimePlaceholderOperand((uint64_t)v3, v14);
          else
            EncodeTimeConstantOperand = GPURegionRuntime::TIAndFoldHelper::getEncodeTimePlaceholderOperand((uint64_t)v3, (mlir::MLIRContext *)(*(_QWORD *)(v32[0] + 8) & 0xFFFFFFFFFFFFFFF8));
        }
        goto LABEL_14;
      }
LABEL_21:
      v17 = v35;
    }
    else
    {
      v5 = 0;
      v17 = v37;
    }
    v18 = (uint64_t)*a1[3];
    mlir::ValueRange::ValueRange((unint64_t *)&v33, (uint64_t)v17, v5);
    v20 = *(uint64_t **)(v18 + 72);
    if (!v20)
    {
      EncodeTimeTmpIRBuilder = (uint64_t **)GPURegionRuntime::TIAndFoldHelper::getEncodeTimeTmpIRBuilder(*(GPURegionRuntime::TIAndFoldHelper **)(*(_QWORD *)(v18 + 16) + 448), v19);
      mlir::OpBuilder::clone(EncodeTimeTmpIRBuilder, *(mlir::Operation **)(v18 + 24));
    }
    mlir::Operation::setOperands(v20, v33, v34);
    **a1 = *(mlir::mps **)(v18 + 72);
    v23 = (llvm *)mlir::mps::inferTypes(**a1, v22);
    if (!(_BYTE)v23)
    {
      v24 = (llvm::raw_ostream *)llvm::errs(v23);
      v25 = v24;
      v26 = (void *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v26 > 0xEuLL)
      {
        *((_QWORD *)v24 + 4) += 15;
      }
      else
      {
      }
      v27 = **a1;
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v32);
      v28 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)v32);
      mlir::Operation::print(v27, v25, v28);
      v29 = *((_QWORD *)v25 + 4);
      if ((unint64_t)(*((_QWORD *)v25 + 3) - v29) > 2)
      {
        *(_BYTE *)(v29 + 2) = 10;
        *(_WORD *)v29 = 11872;
        *((_QWORD *)v25 + 4) += 3;
      }
      else
      {
      }
      if (MTLReportFailureTypeEnabled())
        MTLReportFailure();
    }
    if ((*((_BYTE *)v3[1] + 220) & 0x80) != 0)
      mlir::verify(**a1, (mlir::Operation *)1);
    v1 = **a1;
    if (v35 != v37)
      free(v35);
  }
  return v1;
}

void sub_180DCB4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  if (a18 != v18)
    free(a18);
  _Unwind_Resume(exception_object);
}

mlir::UnknownLoc **GPURegionRuntime::TIAndFoldHelper::getEncodeTimeTmpIRBuilder(GPURegionRuntime::TIAndFoldHelper *this, mlir::MLIRContext *a2)
{
  mlir::Operation **v2;
  mlir::UnknownLoc **v3;
  mlir::MLIRContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mlir::Operation *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20[2];
  unint64_t v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Operation **)((char *)this + 128);
  v3 = (mlir::UnknownLoc **)((char *)this + 136);
  if (!*((_QWORD *)this + 16))
  {
    v5 = *v3;
    v6 = mlir::UnknownLoc::get(*v3, a2);
    if (!v6)
      __assert_rtn("Location", "Location.h", 66, "loc && \"location should never be null.\"");
    v7 = v6;
    mlir::ValueRange::ValueRange(v21, 0, 0);
    mlir::ValueRange::ValueRange(v20, 0, 0);
    v8 = mlir::FunctionType::get(v5, v21[0], v21[1], v20[0], v20[1]);
    v9 = mlir::func::FuncOp::create(v7, (uint64_t)"pre_encode_ti_tmp", 17, v8, 0, 0);
    if (*v2)
      mlir::Operation::erase(*v2);
    *v2 = (mlir::Operation *)v9;
    mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)v2);
    v10 = *v2;
    v11 = *((unsigned int *)*v2 + 11);
    if ((v11 & 0x7FFFFF) == 0)
      __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
    v12 = (unint64_t)v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 64;
    if (v12 >= 0xFFFFFFFFFFFFFFF9)
      __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
    v13 = *(_QWORD *)(((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *((unsigned int *)v10 + 10) + 8);
    if (v13)
      v14 = v13 - 8;
    else
      v14 = 0;
    *((_QWORD *)this + 20) = *(_QWORD *)(v14 + 40);
    v15 = (_QWORD *)((char *)this + 160);
    *(v15 - 1) = v14;
    v16 = (mlir::GenericProgramPoint *)mlir::OpBuilder::create<mlir::func::ReturnOp>((mlir::func::ReturnOp *)v3, *((_QWORD *)v10 + 3));
    v17 = *((_QWORD *)v16 + 2);
    mlir::GenericProgramPoint::~GenericProgramPoint(v16);
    *(v15 - 1) = v17;
    *v15 = v18;
  }
  return v3;
}

void sub_180DCB730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, mlir::Operation *a9)
{
  mlir::OwningOpRef<mlir::func::FuncOp>::~OwningOpRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t mlir::OpBuilder::create<mlir::func::ReturnOp>(mlir::func::ReturnOp *a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  mlir::OperationState *v7;
  mlir::GenericProgramPoint *v8;
  uint64_t v9;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _BYTE v20[40];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.return", (const unsigned __int8 *)0xB, Context);
  if (!v6)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"func.return";
    v18[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v5);
  mlir::func::ReturnOp::build(a1, (mlir::OpBuilder *)v21, v7);
  v8 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (!v8)
  {
    v11 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v12 = 662;
    v13 = "Casting.h";
    v14 = "dyn_cast";
    goto LABEL_8;
  }
  v9 = llvm::DefaultDoCastIfPossible<mlir::func::ReturnOp,mlir::Operation *,llvm::CastInfo<mlir::func::ReturnOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v8);
  if (!v9)
  {
    v11 = "result && \"builder didn't return the right type\"";
    v12 = 497;
    v13 = "Builders.h";
    v14 = "create";
LABEL_8:
    __assert_rtn(v14, v13, v12, v11);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v9;
}

void sub_180DCB8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  mlir::OperationState::~OperationState((mlir::OperationState *)&a26);
  _Unwind_Resume(a1);
}

void sub_180DCB8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  mlir::OperationState::~OperationState((mlir::OperationState *)&a26);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::TIAndFoldHelper::getEncodeTimePlaceholderOperand(uint64_t a1, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  mlir::UnknownLoc **EncodeTimeTmpIRBuilder;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  mlir::UnknownLoc **v8;
  uint64_t v9;
  mlir::UnknownLoc *v10;
  mlir::UnknownLoc *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t result;
  __int128 v18;
  mlir::MLIRContext *v19;

  v19 = a2;
  v3 = (_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 216) != *(_DWORD *)(a1 + 176))
  {
LABEL_12:
    v16 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v16 + 1;
    if (v16 < *(unsigned int *)(a1 + 176))
      goto LABEL_13;
LABEL_16:
    __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
  }
  EncodeTimeTmpIRBuilder = GPURegionRuntime::TIAndFoldHelper::getEncodeTimeTmpIRBuilder((GPURegionRuntime::TIAndFoldHelper *)a1, a2);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(unsigned int *)(v5 + 44);
  if ((v6 & 0x7FFFFF) == 0)
    __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
  v7 = v5 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 64;
  if (v7 >= 0xFFFFFFFFFFFFFFF9)
    __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
  v8 = EncodeTimeTmpIRBuilder + 2;
  v18 = *((_OWORD *)EncodeTimeTmpIRBuilder + 1);
  v9 = *(_QWORD *)(((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v5 + 40) + 8);
  if (v9)
    v10 = (mlir::UnknownLoc *)(v9 - 8);
  else
    v10 = 0;
  v11 = (mlir::UnknownLoc *)*((_QWORD *)v10 + 5);
  EncodeTimeTmpIRBuilder[2] = v10;
  EncodeTimeTmpIRBuilder[3] = v11;
  v12 = mlir::OpBuilder::create<mlir::mps::PlaceholderOp,mlir::Type &>((mlir::OpBuilder *)EncodeTimeTmpIRBuilder, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24), (uint64_t *)&v19);
  if (!*(_DWORD *)(v12 + 36))
    __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
  v13 = v12 - 16;
  v14 = *(unsigned int *)(a1 + 176);
  if (v14 < *(_DWORD *)(a1 + 180))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v14) = v13;
    v15 = *(_DWORD *)(a1 + 176);
    if (v15 < *(_DWORD *)(a1 + 180))
      goto LABEL_10;
LABEL_22:
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3, (void *)(a1 + 184), v14 + 1, 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(unsigned int *)(a1 + 176)) = v13;
  v15 = *(_DWORD *)(a1 + 176);
  if (v15 >= *(_DWORD *)(a1 + 180))
    goto LABEL_22;
LABEL_10:
  *(_DWORD *)(a1 + 176) = v15 + 1;
  if ((_QWORD)v18)
  {
    *(_OWORD *)v8 = v18;
    goto LABEL_12;
  }
  *v8 = 0;
  v8[1] = 0;
  v16 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v16 + 1;
  if (v16 >= *(unsigned int *)(a1 + 176))
    goto LABEL_16;
LABEL_13:
  if ((v19 & 7) != 0)
    __assert_rtn("updatePointer", "PointerIntPair.h", 203, "(PtrWord & ~PointerBitMask) == 0 && \"Pointer is not sufficiently aligned\"");
  result = *(_QWORD *)(*v3 + 8 * v16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 7 | (unint64_t)v19;
  return result;
}

uint64_t mlir::OpBuilder::create<mlir::mps::PlaceholderOp,mlir::Type &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  const char *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _BYTE v21[40];
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.placeholder", (const unsigned __int8 *)0xF, Context);
  if (!v8)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.placeholder";
    v19[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v7);
  mlir::mps::PlaceholderOp::build((uint64_t)a1, (uint64_t)v22, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (!v9)
  {
    v12 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v13 = 662;
    v14 = "Casting.h";
    v15 = "dyn_cast";
    goto LABEL_8;
  }
  v10 = llvm::DefaultDoCastIfPossible<mlir::mps::PlaceholderOp,mlir::Operation *,llvm::CastInfo<mlir::mps::PlaceholderOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v9);
  if (!v10)
  {
    v12 = "result && \"builder didn't return the right type\"";
    v13 = 497;
    v14 = "Builders.h";
    v15 = "create";
LABEL_8:
    __assert_rtn(v15, v14, v13, v12);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v10;
}

void sub_180DCBC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  mlir::OperationState::~OperationState((mlir::OperationState *)&a26);
  _Unwind_Resume(a1);
}

void sub_180DCBCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  mlir::OperationState::~OperationState((mlir::OperationState *)&a26);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::TIAndFoldHelper::getEncodeTimeConstantOperand(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  mlir::UnknownLoc **EncodeTimeTmpIRBuilder;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  mlir::UnknownLoc **v9;
  uint64_t v10;
  mlir::UnknownLoc *v11;
  mlir::UnknownLoc *v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t Type;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23[2];

  v23[0] = a2;
  v23[1] = a3;
  v4 = (_QWORD *)(a1 + 224);
  if (*(_QWORD *)(a1 + 272) != *(_DWORD *)(a1 + 232))
  {
LABEL_11:
    v17 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v17 + 1;
    if (v17 < *(unsigned int *)(a1 + 232))
      goto LABEL_12;
LABEL_15:
    __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
  }
  EncodeTimeTmpIRBuilder = GPURegionRuntime::TIAndFoldHelper::getEncodeTimeTmpIRBuilder((GPURegionRuntime::TIAndFoldHelper *)a1, (mlir::MLIRContext *)a2);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(unsigned int *)(v6 + 44);
  if ((v7 & 0x7FFFFF) == 0)
    __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
  v8 = v6 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 64;
  if (v8 >= 0xFFFFFFFFFFFFFFF9)
    __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
  v9 = EncodeTimeTmpIRBuilder + 2;
  v21 = *((_OWORD *)EncodeTimeTmpIRBuilder + 1);
  v10 = *(_QWORD *)(((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v6 + 40) + 8);
  if (v10)
    v11 = (mlir::UnknownLoc *)(v10 - 8);
  else
    v11 = 0;
  v12 = (mlir::UnknownLoc *)*((_QWORD *)v11 + 5);
  EncodeTimeTmpIRBuilder[2] = v11;
  EncodeTimeTmpIRBuilder[3] = v12;
  v13 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>((mlir::OpBuilder *)EncodeTimeTmpIRBuilder, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24), (uint64_t)v23);
  v14 = v13;
  v15 = *(unsigned int *)(a1 + 232);
  if (v15 < *(_DWORD *)(a1 + 236))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15) = v13;
    v16 = *(_DWORD *)(a1 + 232);
    if (v16 < *(_DWORD *)(a1 + 236))
      goto LABEL_9;
LABEL_20:
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (void *)(a1 + 240), v15 + 1, 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * *(unsigned int *)(a1 + 232)) = v14;
  v16 = *(_DWORD *)(a1 + 232);
  if (v16 >= *(_DWORD *)(a1 + 236))
    goto LABEL_20;
LABEL_9:
  *(_DWORD *)(a1 + 232) = v16 + 1;
  if ((_QWORD)v21)
  {
    *(_OWORD *)v9 = v21;
    goto LABEL_11;
  }
  *v9 = 0;
  v9[1] = 0;
  v17 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v17 + 1;
  if (v17 >= *(unsigned int *)(a1 + 232))
    goto LABEL_15;
LABEL_12:
  v22 = *(_QWORD *)(*v4 + 8 * v17);
  mlir::mps::ConstantOp::setValueAttr((uint64_t)&v22, v23[0]);
  v18 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v22);
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v23);
  if ((Type & 7) != 0)
    __assert_rtn("updatePointer", "PointerIntPair.h", 203, "(PtrWord & ~PointerBitMask) == 0 && \"Pointer is not sufficiently aligned\"");
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(v18 + 8) & 7 | Type;
  return v18;
}

uint64_t GPURegionRuntime::TIAndFoldHelper::reset(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = this;
  v2 = *(_DWORD *)(this + 24);
  if (!*(_QWORD *)(this + 24))
  {
LABEL_5:
    v4 = *(_DWORD *)(v1 + 48);
    if (v4)
      goto LABEL_18;
    goto LABEL_17;
  }
  this += 16;
  v3 = *(unsigned int *)(v1 + 32);
  if (v3 > 4 * v2 && v3 >= 0x41)
  {
    this = llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::shrink_and_clear(this);
    goto LABEL_5;
  }
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD **)this;
    v6 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = &v5[2 * v8];
      v10 = v5 + 2;
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        goto LABEL_16;
    }
    else
    {
      v9 = *(_QWORD **)this;
    }
    v12 = &v5[2 * v3];
    do
    {
      *v9 = -4096;
      v9 += 2;
    }
    while (v9 != v12);
  }
LABEL_16:
  *(_QWORD *)(v1 + 24) = 0;
  v4 = *(_DWORD *)(v1 + 48);
  if (v4)
    goto LABEL_18;
LABEL_17:
  if (!*(_DWORD *)(v1 + 52))
    return this;
LABEL_18:
  this = v1 + 40;
  v13 = *(_DWORD *)(v1 + 56);
  if (v13 > 4 * v4 && v13 >= 0x41)
    return llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::shrink_and_clear(this);
  if (v13)
  {
    v14 = *(_QWORD **)this;
    v15 = 24 * v13 - 24;
    if (v15 >= 0x18)
    {
      v17 = v15 / 0x18 + 1;
      v16 = &v14[3 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v17 & 0x1FFFFFFFFFFFFFFELL;
      v19 = *(_QWORD **)this;
      do
      {
        *v19 = -4096;
        v19[3] = -4096;
        v19 += 6;
        v18 -= 2;
      }
      while (v18);
      if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_29;
    }
    else
    {
      v16 = *(_QWORD **)this;
    }
    v20 = &v14[3 * v13];
    do
    {
      *v16 = -4096;
      v16 += 3;
    }
    while (v16 != v20);
  }
LABEL_29:
  *(_QWORD *)(v1 + 48) = 0;
  return this;
}

BOOL GPURegionRuntime::TIAndFoldHelper::hasType(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int v9;

  v2 = *(_DWORD *)(a1 + 32);
  if (!v2)
    return 0;
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(v3 + 16 * v5);
  if (v6 == a2)
    return 1;
  v8 = 1;
  do
  {
    result = v6 != -4096;
    if (v6 == -4096)
      break;
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
  }
  while (v6 != a2);
  return result;
}

uint64_t *GPURegionRuntime::TIAndFoldHelper::setType(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t Set;
  uint64_t v8;
  uint64_t InterfaceFor;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OperandRange;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  __int128 v54;
  char v55;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 440);
  if (!v6 || (Set = mlir::ShapeEquivalence::getSet(v6, a2)) == 0)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v13 = a1 + 16;
    v12 = v14;
    *(_QWORD *)&v54 = a2;
    v15 = *(_DWORD *)(v13 + 16);
    if (v15)
    {
      if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
LABEL_59:
        __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
      v16 = v15 - 1;
      v17 = v16 & ((a2 >> 4) ^ (a2 >> 9));
      result = (uint64_t *)(v12 + 16 * v17);
      v18 = *result;
      if (*result == a2)
        goto LABEL_22;
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = result;
        v22 = v17 + v20++;
        v17 = v22 & v16;
        result = (uint64_t *)(v12 + 16 * v17);
        v18 = *result;
        if (*result == a2)
          goto LABEL_22;
      }
      if (v19)
        v23 = v19;
      else
        v23 = result;
    }
    else
    {
      v23 = 0;
    }
    result = llvm::DenseMapBase<llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>,void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::InsertIntoBucket<void *>(v13, v23, (uint64_t *)&v54);
LABEL_22:
    result[1] = (uint64_t)a3;
    return result;
  }
  v8 = Set;
  if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(a3))
LABEL_60:
    __assert_rtn("cast", "Casting.h", 566, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
  if (!a3)
  {
    v52 = 0;
    v53 = 0;
    result = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    v11 = *(unsigned int *)(v8 + 8);
    if (!(_DWORD)v11)
      return result;
    goto LABEL_25;
  }
  InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(a3);
  if (!InterfaceFor)
LABEL_61:
    __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
  v52 = a3;
  v53 = InterfaceFor;
  result = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
  v11 = *(unsigned int *)(v8 + 8);
  if ((_DWORD)v11)
  {
LABEL_25:
    v24 = result;
    v25 = *(uint64_t **)v8;
    v26 = *(_QWORD *)v8 + 8 * v11;
    while (1)
    {
      v28 = *v25;
      v29 = *(_DWORD *)(a1 + 32);
      if (!v29)
        goto LABEL_37;
      if ((v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_59;
      v30 = *(_QWORD *)(a1 + 16);
      v31 = v29 - 1;
      v32 = v31 & ((v28 >> 4) ^ (v28 >> 9));
      v33 = *(_QWORD *)(v30 + 16 * v32);
      if (v33 != v28)
        break;
LABEL_29:
      if (++v25 == (uint64_t *)v26)
        return result;
    }
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v32 + v34++;
      v32 = v35 & v31;
      v33 = *(_QWORD *)(v30 + 16 * v32);
      if (v33 == v28)
        goto LABEL_29;
    }
LABEL_37:
    v36 = (uint64_t **)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v36))
      goto LABEL_60;
    if (v36)
    {
      v37 = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v36);
      if (!v37)
        goto LABEL_61;
      v50 = v36;
      v51 = v37;
      v38 = (uint64_t)a3;
      if ((uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50) != v24)
        goto LABEL_41;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v38 = (uint64_t)a3;
      if ((uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50) != v24)
      {
LABEL_41:
        *(_QWORD *)&v54 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
        *((_QWORD *)&v54 + 1) = v39;
        v55 = 1;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v50);
        v38 = mlir::ShapedType::cloneWith((uint64_t *)&v50, &v54, OperandRange);
      }
    }
    *(_QWORD *)&v54 = v28;
    v41 = *(_DWORD *)(a1 + 32);
    if (v41)
    {
      if ((v28 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_59;
      v42 = *(_QWORD *)(a1 + 16);
      v43 = v41 - 1;
      v44 = v43 & ((v28 >> 4) ^ (v28 >> 9));
      result = (uint64_t *)(v42 + 16 * v44);
      v45 = *result;
      if (*result == v28)
        goto LABEL_28;
      v46 = 0;
      v47 = 1;
      while (v45 != -4096)
      {
        if (v46)
          v48 = 0;
        else
          v48 = v45 == -8192;
        if (v48)
          v46 = result;
        v49 = v44 + v47++;
        v44 = v49 & v43;
        result = (uint64_t *)(v42 + 16 * v44);
        v45 = *result;
        if (*result == v28)
          goto LABEL_28;
      }
      if (v46)
        v27 = v46;
      else
        v27 = result;
    }
    else
    {
      v27 = 0;
    }
    result = llvm::DenseMapBase<llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>,void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::InsertIntoBucket<void *>(a1 + 16, v27, (uint64_t *)&v54);
LABEL_28:
    result[1] = v38;
    goto LABEL_29;
  }
  return result;
}

BOOL GPURegionRuntime::TIAndFoldHelper::hasConstant(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int v9;

  v2 = *(_DWORD *)(a1 + 56);
  if (!v2)
    return 0;
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v3 = *(_QWORD *)(a1 + 40);
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(v3 + 24 * v5);
  if (v6 == a2)
    return 1;
  v8 = 1;
  do
  {
    result = v6 != -4096;
    if (v6 == -4096)
      break;
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = *(_QWORD *)(v3 + 24 * v5);
  }
  while (v6 != a2);
  return result;
}

_QWORD *GPURegionRuntime::TIAndFoldHelper::setConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;

  v8 = *(_QWORD *)(a1 + 40);
  result = (_QWORD *)(a1 + 40);
  v7 = v8;
  v19 = a2;
  v9 = *((_DWORD *)result + 4);
  if (v9)
  {
    if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
    v10 = v9 - 1;
    v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (_QWORD *)(v7 + 24 * v11);
    v13 = *v12;
    if (*v12 == a2)
    {
LABEL_4:
      v12[1] = a3;
      v12[2] = a4;
      return result;
    }
    v15 = 0;
    v16 = 1;
    while (v13 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v13 == -8192;
      if (v17)
        v15 = v12;
      v18 = v11 + v16++;
      v11 = v18 & v10;
      v12 = (_QWORD *)(v7 + 24 * (v18 & v10));
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_4;
    }
    if (v15)
      v14 = v15;
    else
      v14 = v12;
  }
  else
  {
    v14 = 0;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>,void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::InsertIntoBucket<void *>((uint64_t)result, v14, &v19);
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t GPURegionRuntime::TIAndFoldHelper::getConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
    v4 = v3 - 1;
    v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v2 + 24 * v5);
    v7 = *v6;
    if (*v6 == a2)
    {
LABEL_4:
      if (v6 != (uint64_t *)(v2 + 24 * v3))
        return v6[1];
    }
    else
    {
      v9 = 1;
      while (v7 != -4096)
      {
        v10 = v5 + v9++;
        v5 = v10 & v4;
        v6 = (uint64_t *)(v2 + 24 * (v10 & v4));
        v7 = *v6;
        if (*v6 == a2)
          goto LABEL_4;
      }
    }
  }
  return 0;
}

void GPURegionRuntime::TIAndFoldHelper::addOpHandler(GPURegionRuntime::TIAndFoldHelper *this, GPU::BaseOpHandler *a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = *((unsigned int *)this + 18);
  if (v4 >= *((_DWORD *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v4 + 1, 8);
    *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *((unsigned int *)this + 18)) = a2;
    v5 = *((_DWORD *)this + 18);
    if (v5 < *((_DWORD *)this + 19))
      goto LABEL_3;
LABEL_5:
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v4) = a2;
  v5 = *((_DWORD *)this + 18);
  if (v5 >= *((_DWORD *)this + 19))
    goto LABEL_5;
LABEL_3:
  *((_DWORD *)this + 18) = v5 + 1;
}

GPURegionRuntime::ParallelTIAndFoldHelper *GPURegionRuntime::ParallelTIAndFoldHelper::ParallelTIAndFoldHelper(GPURegionRuntime::ParallelTIAndFoldHelper *this, GPURegionRuntime *a2, mlir::MLIRContext *a3)
{
  uint64_t v4;
  llvm::ThreadPool *v5;

  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 9) = 0x600000000;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = a3;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = (char *)this + 184;
  *((_QWORD *)this + 22) = 0x400000000;
  *((_QWORD *)this + 28) = (char *)this + 240;
  *((_QWORD *)this + 29) = 0x400000000;
  *(_QWORD *)this = off_1E0E04C30;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 39) = 850045863;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 1018212795;
  *((_QWORD *)this + 52) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  llvm::sys::RWMutexImpl::RWMutexImpl((GPURegionRuntime::ParallelTIAndFoldHelper *)((char *)this + 424));
  *((_QWORD *)this + 54) = 0;
  llvm::sys::RWMutexImpl::RWMutexImpl((GPURegionRuntime::ParallelTIAndFoldHelper *)((char *)this + 440));
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 256))
  {
    v4 = operator new();
    llvm::ThreadPool::ThreadPool(v4, 0x100000001);
    v5 = (llvm::ThreadPool *)*((_QWORD *)this + 57);
    *((_QWORD *)this + 57) = v4;
    if (v5)
      llvm::ThreadPool::~ThreadPool(v5);
  }
  return this;
}

void sub_180DCC8F4()
{
  uint64_t v0;
  pthread_rwlock_t **v1;
  uint64_t v2;
  pthread_rwlock_t **v3;
  llvm::ThreadPool **v4;

  MEMORY[0x186DA1680](v2, 0x10A0C4039BF2501);
  std::unique_ptr<llvm::ThreadPool>::~unique_ptr[abi:ne180100](v4);
  llvm::sys::RWMutexImpl::~RWMutexImpl(v3);
  llvm::sys::RWMutexImpl::~RWMutexImpl(v1);
  std::condition_variable::~condition_variable((std::condition_variable *)(v0 + 376));
  std::mutex::~mutex((std::mutex *)(v0 + 312));
  llvm::DenseMap<mlir::Operation *,unsigned long long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long long>>::~DenseMap(v0 + 280);
}

void sub_180DCC964()
{
  GPURegionRuntime::TIAndFoldHelper *v0;

  GPURegionRuntime::TIAndFoldHelper::~TIAndFoldHelper(v0);
}

void sub_180DCC96C()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

llvm::ThreadPool **std::unique_ptr<llvm::ThreadPool>::~unique_ptr[abi:ne180100](llvm::ThreadPool **a1)
{
  llvm::ThreadPool *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    llvm::ThreadPool::~ThreadPool(v2);
  return a1;
}

void llvm::DenseMap<mlir::Operation *,unsigned long long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long long>>::~DenseMap(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
}

uint64_t sub_180DCC9DC()
{
  uint64_t v0;

  return v0;
}

void GPURegionRuntime::TIAndFoldHelper::~TIAndFoldHelper(GPURegionRuntime::TIAndFoldHelper *this)
{
  char *v2;
  char *v3;
  mlir::Operation *v4;
  char *v5;

  *(_QWORD *)this = off_1E0E04BC8;
  v2 = (char *)*((_QWORD *)this + 28);
  if (v2 != (char *)this + 240)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 21);
  if (v3 != (char *)this + 184)
    free(v3);
  v4 = (mlir::Operation *)*((_QWORD *)this + 16);
  if (v4)
    mlir::Operation::erase(v4);
  v5 = (char *)*((_QWORD *)this + 8);
  if (v5 != (char *)this + 80)
    free(v5);
  llvm::deallocate_buffer(*((llvm **)this + 5), (void *)(24 * *((unsigned int *)this + 14)));
}

{
  GPURegionRuntime::TIAndFoldHelper::~TIAndFoldHelper(this);
}

void sub_180DCCA6C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 16), (void *)(16 * *(unsigned int *)(v0 + 32)));
}

uint64_t sub_180DCCA80()
{
  uint64_t v0;

  return v0;
}

void GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  qos_class_t v15;
  llvm::ThreadPool *v16;
  os_activity_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  GPU::BaseOpHandler **v50;
  uint64_t v51;
  std::shared_future<void> v52;
  __int128 v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v14 + 256))
  {
    v15 = qos_class_self();
    llvm::ThreadPool::raiseQOSIfNeeded(*(llvm::ThreadPool **)(a1 + 456), v15);
    v16 = *(llvm::ThreadPool **)(a1 + 456);
    v17 = _os_activity_create(&dword_18013D000, "ParallelTIAndFoldHelper", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    llvm::ThreadPool::setActivity(v16, v17, 1);

    v14 = *(_QWORD *)(a1 + 8);
  }
  v53 = *(_OWORD *)(v14 + 232);
  mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v53);
  if (a3 > a5)
  {
    if (v18)
    {
      v30 = 0;
      v31 = (_QWORD *)(a4 + 8);
      while (1)
      {
        v32 = *(unsigned int *)(v53 + 44);
        if ((v32 & 0x7FFFFF) == 0)
          break;
        v33 = v53 + 16 * ((v32 >> 23) & 1) + ((v32 >> 21) & 0x7F8) + 64;
        if (v33 >= 0xFFFFFFFFFFFFFFF9)
LABEL_55:
          __assert_rtn("alignAddr", "Alignment.h", 191, "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"");
        v34 = (_QWORD *)(((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v53 + 40));
        if ((_QWORD *)*v34 == v34)
          goto LABEL_60;
        v35 = v34[1];
        v36 = v35 - 8;
        if (!v35)
          v36 = 0;
        v37 = *(_QWORD *)(v36 + 48);
        if (v30 >= (*(_QWORD *)(v36 + 56) - v37) >> 3)
LABEL_60:
          __assert_rtn("operator[]", "ArrayRef.h", 443, "Index < this->size() && \"Invalid index!\"");
        if (a3 == v30)
LABEL_56:
          __assert_rtn("operator[]", "ArrayRef.h", 257, "Index < Length && \"Invalid index!\"");
        v38 = *(_QWORD *)(v37 + 8 * v30);
        if (*(_QWORD *)(a2 + 8 * v30))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v38);
        if (a5 == v30)
          __assert_rtn("operator[]", "ArrayRef.h", 257, "Index < Length && \"Invalid index!\"");
        v39 = *(v31 - 1);
        if (v39)
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, v38, v39, *v31);
        mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v53);
        ++v30;
        v31 += 2;
        if (v30 >= v40)
          goto LABEL_34;
      }
LABEL_54:
      __assert_rtn("getRegion", "Operation.h", 666, "index < numRegions && \"invalid region index\"");
    }
  }
  else if (v18)
  {
    v19 = 0;
    v20 = (_QWORD *)(a4 + 8);
    do
    {
      v21 = *(unsigned int *)(v53 + 44);
      if ((v21 & 0x7FFFFF) == 0)
        goto LABEL_54;
      v22 = v53 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 64;
      if (v22 > 0xFFFFFFFFFFFFFFF8)
        goto LABEL_55;
      v23 = (_QWORD *)(((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(v53 + 40));
      if ((_QWORD *)*v23 == v23)
        goto LABEL_60;
      v24 = v23[1];
      v25 = v24 - 8;
      if (!v24)
        v25 = 0;
      v26 = *(_QWORD *)(v25 + 48);
      if (v19 >= (*(_QWORD *)(v25 + 56) - v26) >> 3)
        goto LABEL_60;
      if (a3 == v19)
        goto LABEL_56;
      v27 = *(_QWORD *)(v26 + 8 * v19);
      if (*(_QWORD *)(a2 + 8 * v19))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v27);
      v28 = *(v20 - 1);
      if (v28)
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, v27, v28, *v20);
      mlir::FunctionOpInterface::getArgumentTypes((mlir::FunctionOpInterface *)&v53);
      ++v19;
      v20 += 2;
    }
    while (v19 < v29);
  }
LABEL_34:
  mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v53);
  if (v41)
  {
    v42 = 0;
    v43 = 24;
    do
    {
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
      if ((*(_BYTE *)(v44 + 46) & 0x80) == 0)
        __assert_rtn("getOperandStorage", "Operation.h", 960, "hasOperandStorage && \"expected operation to have operand storage\"");
      if (*(_DWORD *)(v44 + 68) <= v42)
        __assert_rtn("operator[]", "ArrayRef.h", 443, "Index < this->size() && \"Invalid index!\"");
      if (a7 == v42)
        __assert_rtn("operator[]", "ArrayRef.h", 257, "Index < Length && \"Invalid index!\"");
      if (*(_QWORD *)(a6 + 8 * v42))
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(*(_QWORD *)(v44 + 72) + v43));
      mlir::FunctionOpInterface::getResultTypes((mlir::FunctionOpInterface *)&v53);
      ++v42;
      v43 += 32;
    }
    while (v42 != v45);
  }
  std::mutex::lock((std::mutex *)(a1 + 312));
  ++*(_QWORD *)(a1 + 304);
  std::mutex::unlock((std::mutex *)(a1 + 312));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 376));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 256))
  {
    v46 = *(_QWORD *)(a1 + 456);
    v54[0] = &off_1E0DFB780;
    v54[1] = a1;
    v55 = v54;
    llvm::ThreadPool::asyncImpl<void>(v46, v54, 0, (std::future<void> *)&v52);
    v47 = v55;
    if (v55 == v54)
    {
      v48 = 4;
      v47 = v54;
    }
    else
    {
      if (!v55)
      {
LABEL_52:
        std::shared_future<void>::~shared_future(&v52);
        return;
      }
      v48 = 5;
    }
    (*(void (**)(void))(*v47 + 8 * v48))();
    goto LABEL_52;
  }
  v49 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v49)
  {
    v50 = *(GPU::BaseOpHandler ***)(a1 + 64);
    v51 = 8 * v49;
    do
    {
      GPURegionRuntime::TIAndFoldHelper::runOnOp((GPURegionRuntime::TIAndFoldHelper *)a1, *v50);
      std::mutex::lock((std::mutex *)(a1 + 312));
      ++*(_QWORD *)(a1 + 304);
      std::mutex::unlock((std::mutex *)(a1 + 312));
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 376));
      ++v50;
      v51 -= 8;
    }
    while (v51);
  }
}

void sub_180DCCFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (a17 == v17)
  {
    (*(void (**)(void))(a14 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a17)
  {
    (*(void (**)(void))(*(_QWORD *)a17 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL GPURegionRuntime::ParallelTIAndFoldHelper::hasType(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t **v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 v10;
  int v12;
  unsigned int v13;

  GPURegionRuntime::ParallelTIAndFoldHelper::waitForValueProcessed(a1, a2);
  v4 = (pthread_rwlock_t **)(a1 + 424);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 424));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)(v6 + 16 * v8);
    if (v9 == a2)
    {
      v10 = 1;
    }
    else
    {
      v12 = 1;
      do
      {
        v10 = v9 != -4096;
        if (v9 == -4096)
          break;
        v13 = v8 + v12++;
        v8 = v13 & v7;
        v9 = *(_QWORD *)(v6 + 16 * v8);
      }
      while (v9 != a2);
    }
  }
  else
  {
    v10 = 0;
  }
  llvm::sys::RWMutexImpl::unlock_shared(v4);
  return v10;
}

void sub_180DCD114(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

void GPURegionRuntime::ParallelTIAndFoldHelper::waitForValueProcessed(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;
  std::mutex *m;
  std::unique_lock<std::mutex> __lk;
  uint64_t v15;

  v15 = a2;
  if (!*(_DWORD *)(a1 + 288))
    return;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    if (*(_DWORD *)(a1 + 288))
    {
      v4 = *(_QWORD *)(a1 + 280);
      v5 = *(unsigned int *)(a1 + 296);
      if ((_DWORD)v5)
      {
        if ((DefiningOp | 0x1000) == 0xFFFFFFFFFFFFF000)
          __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
        LODWORD(v6) = (v5 - 1) & ((DefiningOp >> 4) ^ (DefiningOp >> 9));
        v7 = (uint64_t *)(v4 + 16 * v6);
        v8 = *v7;
        if (*v7 == DefiningOp)
        {
          v9 = (uint64_t *)(v4 + 16 * v5);
          if (v7 != v9)
          {
LABEL_8:
            if (v7 == v9)
              __assert_rtn("operator->", "DenseMap.h", 1270, "Ptr != End && \"dereferencing end() iterator\"");
            v10 = v7[1];
            goto LABEL_17;
          }
        }
        else
        {
          v11 = 1;
          while (v8 != -4096)
          {
            v12 = v6 + v11++;
            v6 = v12 & (v5 - 1);
            v8 = *(_QWORD *)(v4 + 16 * v6);
            if (v8 == DefiningOp)
            {
              v7 = (uint64_t *)(v4 + 16 * v6);
              v9 = (uint64_t *)(v4 + 16 * v5);
              if (v7 != v9)
                goto LABEL_8;
              break;
            }
          }
        }
      }
    }
  }
  v10 = 0;
LABEL_17:
  m = (std::mutex *)(a1 + 312);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 312);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 312));
  if (*(_QWORD *)(a1 + 304) > v10)
  {
LABEL_21:
    std::mutex::unlock(m);
    return;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 376), &__lk);
  while (*(_QWORD *)(a1 + 304) <= v10);
  if (__lk.__owns_)
  {
    m = __lk.__m_;
    goto LABEL_21;
  }
}

uint64_t GPURegionRuntime::ParallelTIAndFoldHelper::getType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  int v15;

  GPURegionRuntime::ParallelTIAndFoldHelper::waitForValueProcessed(a1, a2);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 424));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v5)
    goto LABEL_14;
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v11 = "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn'"
          "t be inserted into map!\"";
    v12 = 651;
    v13 = "LookupBucketFor";
    goto LABEL_9;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    v9 = (uint64_t *)(v4 + 16 * v5);
    if (v7 != v9)
      goto LABEL_5;
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  v14 = 1;
  do
  {
    if (v8 == -4096)
      goto LABEL_14;
    v15 = v6 + v14++;
    v6 = v15 & (v5 - 1);
    v8 = *(_QWORD *)(v4 + 16 * v6);
  }
  while (v8 != a2);
  v7 = (uint64_t *)(v4 + 16 * v6);
  v9 = (uint64_t *)(v4 + 16 * v5);
  if (v7 == v9)
    goto LABEL_14;
LABEL_5:
  if (v7 == v9)
  {
    v11 = "Ptr != End && \"dereferencing end() iterator\"";
    v12 = 1270;
    v13 = "operator->";
LABEL_9:
    __assert_rtn(v13, "DenseMap.h", v12, v11);
  }
  v10 = v7[1];
LABEL_15:
  llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(a1 + 424));
  return v10;
}

void sub_180DCD3F0(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

BOOL GPURegionRuntime::ParallelTIAndFoldHelper::setType(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  pthread_rwlock_t **v6;

  v6 = (pthread_rwlock_t **)(a1 + 424);
  llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(a1 + 424));
  GPURegionRuntime::TIAndFoldHelper::setType(a1, a2, a3);
  return llvm::sys::RWMutexImpl::unlock_shared(v6);
}

void sub_180DCD45C(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

BOOL GPURegionRuntime::ParallelTIAndFoldHelper::hasConstant(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t **v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 v10;
  int v12;
  unsigned int v13;

  GPURegionRuntime::ParallelTIAndFoldHelper::waitForValueProcessed(a1, a2);
  v4 = (pthread_rwlock_t **)(a1 + 440);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 440));
  v5 = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
      __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
    v6 = *(_QWORD *)(a1 + 40);
    v7 = v5 - 1;
    v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)(v6 + 24 * v8);
    if (v9 == a2)
    {
      v10 = 1;
    }
    else
    {
      v12 = 1;
      do
      {
        v10 = v9 != -4096;
        if (v9 == -4096)
          break;
        v13 = v8 + v12++;
        v8 = v13 & v7;
        v9 = *(_QWORD *)(v6 + 24 * v8);
      }
      while (v9 != a2);
    }
  }
  else
  {
    v10 = 0;
  }
  llvm::sys::RWMutexImpl::unlock_shared(v4);
  return v10;
}

void sub_180DCD558(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::ParallelTIAndFoldHelper::getConstant(uint64_t a1, uint64_t a2)
{
  uint64_t Constant;

  GPURegionRuntime::ParallelTIAndFoldHelper::waitForValueProcessed(a1, a2);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 440));
  Constant = GPURegionRuntime::TIAndFoldHelper::getConstant(a1, a2);
  llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(a1 + 440));
  return Constant;
}

void sub_180DCD5D0(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

BOOL GPURegionRuntime::ParallelTIAndFoldHelper::setConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_rwlock_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD *inserted;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v23;

  v8 = (pthread_rwlock_t **)(a1 + 440);
  llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(a1 + 440));
  v11 = *(_QWORD *)(a1 + 40);
  v10 = a1 + 40;
  v9 = v11;
  v23 = a2;
  v12 = *(_DWORD *)(v10 + 16);
  if (!v12)
  {
    v21 = 0;
LABEL_14:
    inserted = llvm::DenseMapBase<llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>,void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::InsertIntoBucket<void *>(v10, v21, &v23);
    goto LABEL_15;
  }
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v13 = v12 - 1;
  v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  inserted = (_QWORD *)(v9 + 24 * v14);
  v16 = *inserted;
  if (*inserted != a2)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = inserted;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      inserted = (_QWORD *)(v9 + 24 * v14);
      v16 = *inserted;
      if (*inserted == a2)
        goto LABEL_15;
    }
    if (v17)
      v21 = v17;
    else
      v21 = inserted;
    goto LABEL_14;
  }
LABEL_15:
  inserted[1] = a3;
  inserted[2] = a4;
  return llvm::sys::RWMutexImpl::unlock_shared(v8);
}

void sub_180DCD704(_Unwind_Exception *a1)
{
  pthread_rwlock_t **v1;

  llvm::sys::RWMutexImpl::unlock_shared(v1);
  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::ParallelTIAndFoldHelper::reset(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = this;
  v2 = *(_DWORD *)(this + 24);
  if (!*(_QWORD *)(this + 24))
  {
LABEL_5:
    v4 = *(_DWORD *)(v1 + 48);
    if (v4)
      goto LABEL_18;
    goto LABEL_17;
  }
  this += 16;
  v3 = *(unsigned int *)(v1 + 32);
  if (v3 > 4 * v2 && v3 >= 0x41)
  {
    this = llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::shrink_and_clear(this);
    goto LABEL_5;
  }
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD **)this;
    v6 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = &v5[2 * v8];
      v10 = v5 + 2;
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        goto LABEL_16;
    }
    else
    {
      v9 = *(_QWORD **)this;
    }
    v12 = &v5[2 * v3];
    do
    {
      *v9 = -4096;
      v9 += 2;
    }
    while (v9 != v12);
  }
LABEL_16:
  *(_QWORD *)(v1 + 24) = 0;
  v4 = *(_DWORD *)(v1 + 48);
  if (v4)
    goto LABEL_18;
LABEL_17:
  if (!*(_DWORD *)(v1 + 52))
  {
LABEL_21:
    *(_QWORD *)(v1 + 304) = 0;
    return this;
  }
LABEL_18:
  this = v1 + 40;
  v13 = *(_DWORD *)(v1 + 56);
  if (v13 > 4 * v4 && v13 >= 0x41)
  {
    this = llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::shrink_and_clear(this);
    goto LABEL_21;
  }
  if (v13)
  {
    v14 = *(_QWORD **)this;
    v15 = 24 * v13 - 24;
    if (v15 >= 0x18)
    {
      v17 = v15 / 0x18 + 1;
      v16 = &v14[3 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      v18 = v17 & 0x1FFFFFFFFFFFFFFELL;
      v19 = *(_QWORD **)this;
      do
      {
        *v19 = -4096;
        v19[3] = -4096;
        v19 += 6;
        v18 -= 2;
      }
      while (v18);
      if (v17 == (v17 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_30;
    }
    else
    {
      v16 = *(_QWORD **)this;
    }
    v20 = &v14[3 * v13];
    do
    {
      *v16 = -4096;
      v16 += 3;
    }
    while (v16 != v20);
  }
LABEL_30:
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 304) = 0;
  return this;
}

void GPURegionRuntime::ParallelTIAndFoldHelper::addOpHandler(GPURegionRuntime::ParallelTIAndFoldHelper *this, GPU::BaseOpHandler *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *((_DWORD *)this + 72);
  v5 = *((_DWORD *)this + 74);
  if (!v5)
    goto LABEL_28;
  v6 = *((_QWORD *)a2 + 3);
  if ((v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
    goto LABEL_41;
  v7 = *((_QWORD *)this + 35);
  v8 = v5 - 1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
  v10 = (_QWORD *)(v7 + 16 * v9);
  v11 = *v10;
  if (v6 == *v10)
    goto LABEL_20;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -8192;
    if (v14)
      v12 = v10;
    v15 = v9 + v13++;
    v9 = v15 & v8;
    v10 = (_QWORD *)(v7 + 16 * (v15 & v8));
    v11 = *v10;
    if (v6 == *v10)
      goto LABEL_20;
  }
  if (v12)
    v10 = v12;
  if (4 * v4 + 4 < 3 * v5)
  {
    if (v5 + ~v4 - *((_DWORD *)this + 73) > v5 >> 3)
    {
      if (v10)
        goto LABEL_16;
LABEL_42:
      __assert_rtn("InsertIntoBucketImpl", "DenseMap.h", 616, "TheBucket");
    }
  }
  else
  {
LABEL_28:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Operation *,unsigned long long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long long>>::grow((uint64_t)this + 280, v5);
  v19 = *((_DWORD *)this + 74);
  if (!v19)
    goto LABEL_42;
  v16 = *((_QWORD *)a2 + 3);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
LABEL_41:
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v20 = *((_QWORD *)this + 35);
  v21 = v19 - 1;
  v22 = ((v16 >> 4) ^ (v16 >> 9)) & (v19 - 1);
  v10 = (_QWORD *)(v20 + 16 * v22);
  v23 = *v10;
  if (v16 == *v10)
    goto LABEL_17;
  v24 = 0;
  v25 = 1;
  while (v23 != -4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == -8192;
    if (v26)
      v24 = v10;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v10 = (_QWORD *)(v20 + 16 * (v27 & v21));
    v23 = *v10;
    if (v16 == *v10)
      goto LABEL_17;
  }
  if (v24)
    v10 = v24;
LABEL_16:
  v16 = *v10;
LABEL_17:
  ++*((_DWORD *)this + 72);
  if (v16 != -4096)
    --*((_DWORD *)this + 73);
  *v10 = *((_QWORD *)a2 + 3);
  v10[1] = 0;
LABEL_20:
  v10[1] = (v4 + 1);
  v17 = *((unsigned int *)this + 18);
  if (v17 >= *((_DWORD *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v17 + 1, 8);
    *(_QWORD *)(*((_QWORD *)this + 8) + 8 * *((unsigned int *)this + 18)) = a2;
    v18 = *((_DWORD *)this + 18);
    if (v18 < *((_DWORD *)this + 19))
      goto LABEL_22;
LABEL_24:
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v17) = a2;
  v18 = *((_DWORD *)this + 18);
  if (v18 >= *((_DWORD *)this + 19))
    goto LABEL_24;
LABEL_22:
  *((_DWORD *)this + 18) = v18 + 1;
}

void sub_180DCDBB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::allocateTensorDataForValue(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, 0, 0, 0, 1);
}

void GPURegionRuntime::~GPURegionRuntime(GPURegionRuntime *this)
{
  GPURegionRuntime::~GPURegionRuntime(this);
  JUMPOUT(0x186DA1680);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;

  *(_QWORD *)this = &off_1E0E029F0;
  v2 = (_QWORD *)*((_QWORD *)this + 77);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v4)
    operator delete(v4);
  v5 = (char *)*((_QWORD *)this + 57);
  if (v5 != (char *)this + 472)
    free(v5);
  v6 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::unique_ptr<mlir::ShapeEquivalence>::reset[abi:ne180100]((uint64_t *)this + 55, 0);

  v7 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v7)
    std::default_delete<GPU::RuntimeExecutionReport>::operator()[abi:ne180100]((uint64_t)this + 424, v7);
  v8 = (id *)*((_QWORD *)this + 50);
  if (v8)
  {
    do
    {
      v9 = (id *)*v8;

      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 45);
  if (v11)
  {
    do
    {
      v17 = (_QWORD *)*v11;
      v18 = (_QWORD *)v11[5];
      if (v18)
      {
        do
        {
          v19 = (_QWORD *)*v18;
          operator delete(v18);
          v18 = v19;
        }
        while (v19);
      }
      v20 = (void *)v11[3];
      v11[3] = 0;
      if (v20)
        operator delete(v20);
      operator delete(v11);
      v11 = v17;
    }
    while (v17);
  }
  v12 = (void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 40);
  if (v13)
  {
    do
    {
      v21 = (_QWORD *)*v13;
      v22 = (_QWORD *)v13[5];
      if (v22)
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
      v24 = (void *)v13[3];
      v13[3] = 0;
      if (v24)
        operator delete(v24);
      operator delete(v13);
      v13 = v21;
    }
    while (v21);
  }
  v14 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v14)
    operator delete(v14);
  v15 = (_QWORD *)*((_QWORD *)this + 35);
  if (v15)
  {
    do
    {
      v25 = (_QWORD *)*v15;
      v26 = v15[3];
      v15[3] = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
      operator delete(v15);
      v15 = v25;
    }
    while (v25);
  }
  v16 = (void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v16)
    operator delete(v16);
  BaseRuntime::~BaseRuntime(this);
}

void sub_180DCDC54()
{
  JUMPOUT(0x186DA1680);
}

void FullyPlacedOnANEMPSRuntime::~FullyPlacedOnANEMPSRuntime(FullyPlacedOnANEMPSRuntime *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E0E13B68;
  v2 = (char *)*((_QWORD *)this + 105);
  if (v2 != (char *)this + 856)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 97);
  if (v3 != (char *)this + 792)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 89);
  if (v4 != (char *)this + 728)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 81);
  if (v5 != (char *)this + 664)
    free(v5);
  GPURegionRuntime::~GPURegionRuntime(this);
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E0E13B68;
  v2 = (char *)*((_QWORD *)this + 105);
  if (v2 != (char *)this + 856)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 97);
  if (v3 != (char *)this + 792)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 89);
  if (v4 != (char *)this + 728)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 81);
  if (v5 != (char *)this + 664)
    free(v5);
  GPURegionRuntime::~GPURegionRuntime(this);
  JUMPOUT(0x186DA1680);
}

void GPURegionRuntime::ParallelTIAndFoldHelper::~ParallelTIAndFoldHelper(GPURegionRuntime::ParallelTIAndFoldHelper *this)
{
  GPURegionRuntime::ParallelTIAndFoldHelper::~ParallelTIAndFoldHelper(this);
}

{
  llvm::ThreadPool *v2;

  *(_QWORD *)this = off_1E0E04C30;
  v2 = (llvm::ThreadPool *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v2)
    llvm::ThreadPool::~ThreadPool(v2);
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)this + 55);
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)this + 53);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 376));
  std::mutex::~mutex((std::mutex *)((char *)this + 312));
  llvm::deallocate_buffer(*((llvm **)this + 35), (void *)(16 * *((unsigned int *)this + 74)));
}

void sub_180DCDD88()
{
  JUMPOUT(0x186DA1680);
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 21
      && *AttrData == 0x6E656D6563616C70
      && AttrData[1] == 0x6E6F696765722E74
      && *(_QWORD *)((char *)AttrData + 13) == 0x6C6C61635F6E6F69)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"placement.region_call";
      v9[3] = 21;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::ReshapeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReshapeOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 11 && *AttrData == 0x687365722E73706DLL && *(_QWORD *)((char *)AttrData + 3) == 0x657061687365722ELL)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.reshape";
      v8[3] = 11;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::MatMulOp,mlir::Operation *,llvm::CastInfo<mlir::mps::MatMulOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 10 && *(_QWORD *)AttrData == 0x6D74616D2E73706DLL && *(_WORD *)(AttrData + 8) == 27765)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.matmul";
      v8[3] = 10;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id)
  {
    return 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_180DCE94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  id *v3;
  id *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (id *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (id *)*v3;

          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>>>::__emplace_unique_key_args<void *,void *,MPSGraphTensorData * {__strong}&>(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v8 = *a2;
  v9 = HIDWORD(*a2);
  v10 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v9);
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == v8)
                return v15;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == v8)
              return v15;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  v18 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v11;
  v15[2] = *a3;
  v15[3] = *a4;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v15 = *v22;
LABEL_61:
      *v22 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v31 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v31 & v11;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v11));
      if (v22)
        goto LABEL_26;
    }
  }
  *v15 = *v18;
  *v18 = v15;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*v15)
  {
    v32 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v32 >= v12)
        v32 %= v12;
    }
    else
    {
      v32 &= v12 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_180DCEEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

uint64_t GPU::EncodeDescriptor::commitAndContinue(GPU::EncodeDescriptor *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    objc_msgSend(v2, "endEncoding");
    v3 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;

  }
  return objc_msgSend(*((id *)this + 1), "commitAndContinue");
}

uint64_t GPU::EncodeDescriptor::commitAndContinueDynamicallyChanges(GPU::EncodeDescriptor *this)
{
  return 0;
}

void GPU::EncodeDescriptor::~EncodeDescriptor(GPU::EncodeDescriptor *this)
{
  void *v2;
  void *v3;
  void *v4;
  id *v5;
  id *v6;
  void *v7;

  *(_QWORD *)this = &unk_1E0E04CC0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    objc_msgSend(v2, "endEncoding");
    v3 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  v5 = (id *)*((_QWORD *)this + 6);
  if (v5)
  {
    do
    {
      v6 = (id *)*v5;

      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    operator delete(v7);

}

_QWORD *GPURegionRuntime::setStaticJITypeForValue(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  char *v6;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;

  v9 = a3;
  v10 = a2;
  if (isStaticMPSType((uint64_t **)(a2[1] & 0xFFFFFFFFFFFFFFF8)))
    __assert_rtn("setStaticJITypeForValue", "MPSRuntime_Project.h", 713, "!isStaticMPSType(value.getType())");
  if ((isStaticMPSType(a3) & 1) == 0)
    __assert_rtn("setStaticJITypeForValue", "MPSRuntime_Project.h", 714, "isStaticMPSType(type)");
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 448) + 24))(*(_QWORD *)(a1 + 448), a2))
    __assert_rtn("setStaticJITypeForValue", "MPSRuntime_Project.h", 715, "!_tiAndFoldHelper->hasType(value) && \"static type already defined\"");
  v8 = *((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v10) + 2);
  v11 = &v8;
  v6 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(a1 + 304, &v8, (uint64_t)&std::piecewise_construct, &v11)+ 24;
  v11 = v10;
  if (std::__hash_table<std::__hash_value_type<void *,mlir::Type>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::Type>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::Type>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::Type>>>::find<void *>(v6, (uint64_t *)&v11))
  {
    __assert_rtn("setStaticJITypeForValue", "MPSRuntime_Project.h", 718, "opMap.count(value.getAsOpaquePointer()) == 0 && \"type already computed\"");
  }
  v11 = v10;
  return std::__hash_table<std::__hash_value_type<void *,mlir::Type>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::Type>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::Type>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::Type>>>::__emplace_unique_key_args<void *,void *,mlir::Type&>((uint64_t)v6, (uint64_t *)&v11, &v11, (uint64_t *)&v9);
}

char *std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_180DCF4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,mlir::Type>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,mlir::Type>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::Type>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::Type>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::Type>>>::find<void *>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v6 == v13)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v6 == v12)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,mlir::Type>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::Type>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::Type>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::Type>>>::__emplace_unique_key_args<void *,void *,mlir::Type&>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v8 = *a2;
  v9 = HIDWORD(*a2);
  v10 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v9);
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == v8)
                return v15;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == v8)
              return v15;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v11;
  v18 = *a4;
  v15[2] = *a3;
  v15[3] = v18;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v15 = *v22;
LABEL_61:
      *v22 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_37;
    if (prime < v12)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v12)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v30 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v11;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v11));
      if (v22)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v31 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12)
        v31 %= v12;
    }
    else
    {
      v31 &= v12 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_180DCF9C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::evaluateOps(GPU::EncodeDescriptor *,NSArray<MPSGraphTensorData *> *,NSArray<MPSGraphTensorData *> *)::$_1::operator() const(mlir::FunctionOpInterface)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  GPURegionRuntime *v4;
  mlir::Block *v5;
  uint64_t ParentOp;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;

  v4 = *(GPURegionRuntime **)(a1 + 8);
  v5 = *(mlir::Block **)(a2 + 16);
  if (v5)
  {
    ParentOp = mlir::Block::getParentOp(v5);
    v7 = ParentOp;
    if (ParentOp)
    {
      if (!mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
      {
        if (**(_QWORD **)a1)
          return;
        goto LABEL_10;
      }
      if (!mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v7))
        __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
    }
  }
  else
  {
    v7 = 0;
  }
  if (v7 != **(_QWORD **)a1)
    return;
LABEL_10:
  GPURegionRuntime::encodeOp(v4, (mlir::GenericProgramPoint ***)a2, **(GPU::EncodeDescriptor ***)(a1 + 16));
  v8 = **(_QWORD **)(a1 + 16);
  if (*(_BYTE *)(v8 + 25))
  {
    v9 = *(void **)(v8 + 72);
    if (v9)
    {
      objc_msgSend(v9, "endEncoding");
      v10 = *(void **)(v8 + 72);
      *(_QWORD *)(v8 + 72) = 0;

      v8 = **(_QWORD **)(a1 + 16);
    }
  }
  if (*(_BYTE *)(v8 + 24) || **(_BYTE **)(a1 + 24))
  {
    v11 = computeProducedValues(a2, v4, 0, 0, 0);
    if (v11)
    {
      v12 = *(unint64_t **)(a1 + 32);
      v13 = *(unint64_t **)(a1 + 40);
      v14 = *v12 + 1;
      v15 = v12[1] + v11;
      *v12 = v14;
      v12[1] = v15;
      if (v15 >= *v13
        || v14 >= **(_QWORD **)(a1 + 48)
        || v15 >= **(_QWORD **)(a1 + 56) && v14 >= **(_QWORD **)(a1 + 64))
      {
        v16 = **(_BYTE ***)(a1 + 16);
        if (v16[24]
          || **(_BYTE **)(a1 + 24)
          && ((*(void (**)(_BYTE *))(*(_QWORD *)v16 + 16))(v16), v16 = **(_BYTE ***)(a1 + 16), v16[24]))
        {
          (**(void (***)(_BYTE *))v16)(v16);
          v17 = *(_QWORD **)(a1 + 32);
          *v17 = 0;
          v17[1] = 0;
        }
      }
    }
  }
}

uint64_t computeProducedValues(uint64_t result, GPURegionRuntime *a2, char a3, unint64_t *a4, MPSDataType *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  uint64_t v15;
  unint64_t StaticType;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  MPSDataType v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  MPSDataType v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ElementTypeOrSelf;
  unint64_t v37;

  if (result)
  {
    v9 = result;
    if (llvm::DefaultDoCastIfPossible<mlir::mps::ConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConstantOp,mlir::Operation *,void>>::doCastIfPossible(result)
      || llvm::DefaultDoCastIfPossible<mlir::mpsx::FileBackedConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::FileBackedConstantOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::ReshapeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReshapeOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::ExpandDimsOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ExpandDimsOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::SqueezeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::SqueezeOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::PermuteOp,mlir::Operation *,llvm::CastInfo<mlir::mps::PermuteOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::TransposeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::TransposeOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::TypeConstraintOp,mlir::Operation *,llvm::CastInfo<mlir::mps::TypeConstraintOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::scf::WhileOp,mlir::Operation *,llvm::CastInfo<mlir::scf::WhileOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::scf::ForOp,mlir::Operation *,llvm::CastInfo<mlir::scf::ForOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::scf::IfOp,mlir::Operation *,llvm::CastInfo<mlir::scf::IfOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::DynamicShapeCastOp,mlir::Operation *,llvm::CastInfo<mlir::mps::DynamicShapeCastOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::VariableFromTensorOp,mlir::Operation *,llvm::CastInfo<mlir::mps::VariableFromTensorOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::ReadVariableOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReadVariableOp,mlir::Operation *,void>>::doCastIfPossible(v9)
      || llvm::DefaultDoCastIfPossible<mlir::mps::AssignVariableOp,mlir::Operation *,llvm::CastInfo<mlir::mps::AssignVariableOp,mlir::Operation *,void>>::doCastIfPossible(v9))
    {
      return 0;
    }
    if (a4)
      *a4 = 0;
    v10 = *(unsigned int *)(v9 + 36);
    v11 = (_DWORD)v10 ? v9 - 16 : 0;
    result = 0;
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v13 = result;
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, i);
        v15 = NextResultAtOffset;
        v37 = 0;
        if (a2)
        {
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 56) + 48))(*((_QWORD *)a2 + 56), NextResultAtOffset) & 1) != 0)goto LABEL_26;
          StaticType = GPURegionRuntime::getStaticType((uint64_t)a2, v15);
          if (!StaticType)
            goto LABEL_67;
        }
        else
        {
          StaticType = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!StaticType)
            goto LABEL_67;
        }
        if (!*(_QWORD *)StaticType)
          goto LABEL_68;
        if (*(_UNKNOWN **)(*(_QWORD *)StaticType + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v37 = StaticType;
          Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
          if (!v18)
          {
            v27 = 1;
            goto LABEL_43;
          }
          v19 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v19)
          {
            v20 = v19 + 1;
            v21 = (v19 + 1) & 0x3FFFFFFFFFFFFFFELL;
            v22 = (uint64_t *)(Value + 8 * v21);
            v23 = (_QWORD *)(Value + 8);
            v24 = v21;
            v25 = 1;
            v26 = 1;
            do
            {
              v25 *= *(v23 - 1);
              v26 *= *v23;
              v23 += 2;
              v24 -= 2;
            }
            while (v24);
            v27 = v26 * v25;
            if (v20 == v21)
            {
LABEL_43:
              if ((a3 & 1) != 0)
              {
                *a5 = MPSDataTypeFloat32;
                ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
                if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
                {
                  v29 = MPSDataTypeFloat16;
                  goto LABEL_51;
                }
                if (mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf))
                {
                  v29 = MPSDataTypeBFloat16;
                  goto LABEL_51;
                }
                if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 16))
                {
                  v29 = MPSDataTypeInt16;
LABEL_51:
                  *a5 = v29;
                  v30 = 2;
                }
                else if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 8))
                {
                  *a5 = MPSDataTypeInt8;
                  v30 = 1;
                }
                else
                {
                  v31 = ElementTypeOrSelf;
                  if (!ElementTypeOrSelf)
LABEL_67:
                    __assert_rtn("dyn_cast", "Casting.h", 650, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
                  if (!*(_QWORD *)ElementTypeOrSelf)
LABEL_68:
                    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
                  v32 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
                  if (v32 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
                    v31 = 0;
                  v35 = v31;
                  if (v32 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
                  {
                    v33 = MPSDataTypeComplexFloat16;
                    v34 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
                    if (mlir::Type::isF32((mlir::Type *)&v34))
                    {
                      v33 = MPSDataTypeComplexFloat32;
                      v30 = 8;
                    }
                    else
                    {
                      v34 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
                      if (!mlir::Type::isF16((mlir::Type *)&v34))
                        __assert_rtn("computeProducedValues", "MPSRuntime.mm", 333, "0 && \"unsupported complex type\"");
                      v30 = 4;
                    }
                    *a5 = v33;
                  }
                  else
                  {
                    v30 = 4;
                  }
                }
              }
              else
              {
                v30 = 1;
              }
              v13 += v30 * v27;
              if (a4)
                *a4 += v27;
              goto LABEL_26;
            }
          }
          else
          {
            v22 = (uint64_t *)Value;
            v27 = 1;
          }
          do
          {
            v28 = *v22++;
            v27 *= v28;
          }
          while (v22 != (uint64_t *)(Value + 8 * v18));
          goto LABEL_43;
        }
LABEL_26:
        result = v13;
      }
    }
  }
  return result;
}

uint64_t mlir::Type::dyn_cast<mlir::ComplexType>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (!*a1)
    __assert_rtn("dyn_cast", "Casting.h", 650, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
  if (!*(_QWORD *)v1)
    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
  if (*(_UNKNOWN **)(*(_QWORD *)v1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    return *a1;
  else
    return 0;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::ConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConstantOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 12 && *(_QWORD *)AttrData == 0x736E6F632E73706DLL && *(_DWORD *)(AttrData + 8) == 1953390964)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.constant";
      v8[3] = 12;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mpsx::FileBackedConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::FileBackedConstantOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v8;
  __int16 v9;
  uint64_t v10[4];
  __int16 v11;
  _QWORD v12[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v12[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v12);
    if (v4 == 25
      && *(_QWORD *)AttrData == 0x6C69662E7873706DLL
      && *(_QWORD *)(AttrData + 8) == 0x64656B6361625F65
      && *(_QWORD *)(AttrData + 16) == 0x6E6174736E6F635FLL
      && *(_BYTE *)(AttrData + 24) == 116)
    {
      v11 = 1283;
      v10[0] = (uint64_t)"classof on '";
      v10[2] = (uint64_t)"mpsx.file_backed_constant";
      v10[3] = 25;
      v8 = "' failed due to the operation not being registered";
      v9 = 259;
      llvm::operator+(v10, (uint64_t *)&v8, (uint64_t)v12);
      llvm::report_fatal_error((llvm::Twine *)v12, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mpsx::FileBackedConstantOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::ExpandDimsOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ExpandDimsOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 15 && *AttrData == 0x617078652E73706DLL && *(_QWORD *)((char *)AttrData + 7) == 0x736D69645F646E61)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.expand_dims";
      v8[3] = 15;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::ExpandDimsOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::SqueezeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::SqueezeOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 11 && *AttrData == 0x657571732E73706DLL && *(_QWORD *)((char *)AttrData + 3) == 0x657A65657571732ELL)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.squeeze";
      v8[3] = 11;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::SqueezeOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::PermuteOp,mlir::Operation *,llvm::CastInfo<mlir::mps::PermuteOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 11 && *AttrData == 0x6D7265702E73706DLL && *(_QWORD *)((char *)AttrData + 3) == 0x6574756D7265702ELL)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.permute";
      v8[3] = 11;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::PermuteOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::TransposeOp,mlir::Operation *,llvm::CastInfo<mlir::mps::TransposeOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 13 && *AttrData == 0x6E6172742E73706DLL && *(_QWORD *)((char *)AttrData + 5) == 0x65736F70736E6172)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.transpose";
      v8[3] = 13;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::TypeConstraintOp,mlir::Operation *,llvm::CastInfo<mlir::mps::TypeConstraintOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 19
      && *AttrData == 0x657079742E73706DLL
      && AttrData[1] == 0x617274736E6F635FLL
      && *(_QWORD *)((char *)AttrData + 11) == 0x746E69617274736ELL)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.type_constraint";
      v9[3] = 19;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::TypeConstraintOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::scf::WhileOp,mlir::Operation *,llvm::CastInfo<mlir::scf::WhileOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 9 && *(_QWORD *)AttrData == 0x6C6968772E666373 && *(_BYTE *)(AttrData + 8) == 101)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"scf.while";
      v8[3] = 9;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::scf::ForOp,mlir::Operation *,llvm::CastInfo<mlir::scf::ForOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _DWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 7 && *AttrData == 778462067 && *(_DWORD *)((char *)AttrData + 3) == 1919903278)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"scf.for";
      v8[3] = 7;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::scf::IfOp,mlir::Operation *,llvm::CastInfo<mlir::scf::IfOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 6 && *(_DWORD *)AttrData == 778462067 && *(_WORD *)(AttrData + 4) == 26217)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"scf.if";
      v8[3] = 6;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::DynamicShapeCastOp,mlir::Operation *,llvm::CastInfo<mlir::mps::DynamicShapeCastOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 22
      && *AttrData == 0x616E79642E73706DLL
      && AttrData[1] == 0x706168735F63696DLL
      && *(_QWORD *)((char *)AttrData + 14) == 0x747361635F657061)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.dynamic_shape_cast";
      v9[3] = 22;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::DynamicShapeCastOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::VariableFromTensorOp,mlir::Operation *,llvm::CastInfo<mlir::mps::VariableFromTensorOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 24
      && *AttrData == 0x697261762E73706DLL
      && AttrData[1] == 0x6F72665F656C6261
      && AttrData[2] == 0x726F736E65745F6DLL)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.variable_from_tensor";
      v9[3] = 24;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::VariableFromTensorOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::ReadVariableOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ReadVariableOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 17
      && *(_QWORD *)AttrData == 0x646165722E73706DLL
      && *(_QWORD *)(AttrData + 8) == 0x6C6261697261765FLL
      && *(_BYTE *)(AttrData + 16) == 101)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.read_variable";
      v9[3] = 17;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::AssignVariableOp,mlir::Operation *,llvm::CastInfo<mlir::mps::AssignVariableOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 19
      && *AttrData == 0x697373612E73706DLL
      && AttrData[1] == 0x61697261765F6E67
      && *(_QWORD *)((char *)AttrData + 11) == 0x656C626169726176)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.assign_variable";
      v9[3] = 19;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::AssignVariableOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::ConcatOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConcatOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 10 && *(_QWORD *)AttrData == 0x636E6F632E73706DLL && *(_WORD *)(AttrData + 8) == 29793)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.concat";
      v8[3] = 10;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::ConcatOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::StridedSliceOp,mlir::Operation *,llvm::CastInfo<mlir::mps::StridedSliceOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 17
      && *(_QWORD *)AttrData == 0x697274732E73706DLL
      && *(_QWORD *)(AttrData + 8) == 0x63696C735F646564
      && *(_BYTE *)(AttrData + 16) == 101)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mps.strided_slice";
      v9[3] = 17;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::SliceOp,mlir::Operation *,llvm::CastInfo<mlir::mps::SliceOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 9 && *(_QWORD *)AttrData == 0x63696C732E73706DLL && *(_BYTE *)(AttrData + 8) == 101)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.slice";
      v8[3] = 9;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::SliceOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::CropOp,mlir::Operation *,llvm::CastInfo<mlir::mps::CropOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  uint64_t v7[4];
  __int16 v8;
  _QWORD v9[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v9[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v9);
    if (v4 == 8 && *AttrData == 0x706F72632E73706DLL)
    {
      v8 = 1283;
      v7[0] = (uint64_t)"classof on '";
      v7[2] = (uint64_t)"mps.crop";
      v7[3] = 8;
      v5 = "' failed due to the operation not being registered";
      v6 = 259;
      llvm::operator+(v7, (uint64_t *)&v5, (uint64_t)v9);
      llvm::report_fatal_error((llvm::Twine *)v9, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::CropOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::Flatten2DOp,mlir::Operation *,llvm::CastInfo<mlir::mps::Flatten2DOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 14 && *AttrData == 0x74616C662E73706DLL && *(_QWORD *)((char *)AttrData + 6) == 0x64325F6E65747461)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.flatten_2d";
      v8[3] = 14;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::Flatten2DOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t std::unordered_set<mlir::Operation *>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 13 && *AttrData == 0x6974732E7873706DLL && *(_QWORD *)((char *)AttrData + 5) == 0x6465686374697473)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mpsx.stitched";
      v8[3] = 13;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
  {
    return 0;
  }
  return result;
}

_QWORD *std::__hash_table<mlir::Operation *,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,std::allocator<mlir::Operation *>>::__emplace_unique_key_args<mlir::Operation *,mlir::Operation * const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_180DD1654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::CallOp,mlir::Operation *,llvm::CastInfo<mlir::mps::CallOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  uint64_t v7[4];
  __int16 v8;
  _QWORD v9[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v9[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v9);
    if (v4 == 8 && *AttrData == 0x6C6C61632E73706DLL)
    {
      v8 = 1283;
      v7[0] = (uint64_t)"classof on '";
      v7[2] = (uint64_t)"mps.call";
      v7[3] = 8;
      v5 = "' failed due to the operation not being registered";
      v6 = 259;
      llvm::operator+(v7, (uint64_t *)&v5, (uint64_t)v9);
      llvm::report_fatal_error((llvm::Twine *)v9, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::CallOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::placement::MemrefToTensor,mlir::Operation *,llvm::CastInfo<mlir::placement::MemrefToTensor,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v8;
  __int16 v9;
  uint64_t v10[4];
  __int16 v11;
  _QWORD v12[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v12[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v12);
    if (v4 == 26
      && *(_QWORD *)AttrData == 0x6E656D6563616C70
      && *(_QWORD *)(AttrData + 8) == 0x6665726D656D2E74
      && *(_QWORD *)(AttrData + 16) == 0x736E65745F6F745FLL
      && *(_WORD *)(AttrData + 24) == 29295)
    {
      v11 = 1283;
      v10[0] = (uint64_t)"classof on '";
      v10[2] = (uint64_t)"placement.memref_to_tensor";
      v10[3] = 26;
      v8 = "' failed due to the operation not being registered";
      v9 = 259;
      llvm::operator+(v10, (uint64_t *)&v8, (uint64_t)v12);
      llvm::report_fatal_error((llvm::Twine *)v12, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
  {
    return 0;
  }
  return result;
}

void ___ZZN26FullyPlacedOnANEMPSRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPbENK3__0clEv_block_invoke(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  MPSGraphTensorData *v8;

  v8 = a2;
  if (!v8)
    goto LABEL_5;
  v7 = *(_QWORD *)(a1 + 40);
  if (-[MPSGraphTensorData tensorDataType](v8, "tensorDataType"))
    goto LABEL_5;
  if (*(unsigned int *)(v7 + 784) <= a3)
    __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
  if (GPU::TensorToMemrefOpHandler::inputRequiresCopy(*(GPU::TensorToMemrefOpHandler **)(*(_QWORD *)(v7 + 776) + 8 * a3), v8))
  {
LABEL_5:
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }

}

void sub_180DD1A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZZN26FullyPlacedOnANEMPSRuntime11evaluateOpsEP7NSArrayIP18MPSGraphTensorDataES4_P37MPSGraphExecutableExecutionDescriptorP16MPSCommandBufferbbbPbENK3__0clEv_block_invoke_2(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (v13)
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (!objc_msgSend(v13, "tensorDataType"))
    {
      if (*(unsigned int *)(v7 + 848) <= a3)
        __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 840) + 8 * a3);
      v9 = v13;
      if (objc_msgSend(v9, "iosurface"))
      {
        objc_msgSend(v9, "mpsndarray");
        v10 = (char *)objc_claimAutoreleasedReturnValue();
        v11 = *(_QWORD *)&v10[*MEMORY[0x1E0CC7288]];
        v12 = *(_QWORD *)(v8 + 120);

        if (v11 == v12)
          goto LABEL_4;
      }
      else
      {

      }
    }
  }
  *a4 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
LABEL_4:

}

void sub_180DD1B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_180DD1B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,BaseTensor *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,BaseTensor *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,BaseTensor *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,BaseTensor *>>>::__emplace_unique_key_args<void *,std::pair<void *,BaseTensor *>>(float *a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x20uLL);
  *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *a3;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_37:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(8 * prime);
      v27 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
      while (prime != v28);
      v30 = (uint64_t *)(a1 + 4);
      v29 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v29)
        goto LABEL_69;
      v31 = v29[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
          {
            *v29 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
            **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
            v29 = i;
            v33 = v35;
          }
        }
        goto LABEL_69;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
      v40 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_69:
        v10 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_70;
        goto LABEL_85;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_63;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v29 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
          v40 = v29;
LABEL_63:
          v29 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_69;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
          v29 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_69;
        }
      }
    }
    if (prime < v10)
    {
      v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v10)
      {
        if (!prime)
        {
          v44 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v44)
            operator delete(v44);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v43 = -1;
          goto LABEL_85;
        }
        goto LABEL_37;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v43 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_70:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
      goto LABEL_86;
    }
LABEL_85:
    v3 = v43 & v9;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v9));
    if (v21)
      goto LABEL_26;
    goto LABEL_86;
  }
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
LABEL_26:
    *v17 = *v21;
LABEL_92:
    *v21 = v17;
    goto LABEL_93;
  }
LABEL_86:
  *v17 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v17;
  v20[v3] = a1 + 4;
  if (*v17)
  {
    v45 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  ++*((_QWORD *)a1 + 3);
  return v17;
}

void sub_180DD20A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mlir::AttributeInterface<mlir::ElementsAttr,mlir::detail::ElementsAttrInterfaceTraits>::getInterfaceFor(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  const char *v22;
  unint64_t v23;

  v1 = *a1;
  if (!*a1)
    goto LABEL_20;
  v3 = *v1;
  v4 = v1[17];
  v5 = mlir::TypeID::get<mlir::ElementsAttr>();
  v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
  v23 = 68;
  v6 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
  v8 = v22;
  v7 = v23;
  if (v23 >= v6)
    v9 = v6;
  else
    v9 = v23;
  v10 = v23 - v9;
  v11 = &v22[v9];
  v22 = v11;
  v23 = v10;
  if (v7 <= v6)
    __assert_rtn("getTypeName", "TypeName.h", 33, "!Name.empty() && \"Unable to find the template parameter!\"");
  if (v10 <= 0x11)
    __assert_rtn("drop_front", "StringRef.h", 614, "size() >= N && \"Dropping more elements than exist\"");
  v22 = v11 + 18;
  v23 = v10 - 18;
  if (v10 == 18 || v8[v7 - 1] != 93)
    __assert_rtn("getTypeName", "TypeName.h", 36, "Name.ends_with(\"]\") && \"Name doesn't end in the substitution key!\"");
  mlir::dialect_extension_detail::handleUseOfUndefinedPromisedInterface(v3, v4, v5);
  v12 = *a1;
  if (!v12)
LABEL_20:
    __assert_rtn("getAbstractAttribute", "AttributeSupport.h", 165, "abstractAttribute && \"Malformed attribute storage object.\"");
  v13 = mlir::TypeID::get<mlir::ElementsAttr>();
  v14 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v14)
    return 0;
  v15 = (_QWORD *)v12[1];
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    return v15[1];
  else
    return 0;
}

BOOL _ZN4llvm3isaIN4mlir4mpsx16ReturnStitchedOpENS1_3mps10IdentityOpEJEPNS1_9OperationEEEbRKT2_(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t AttrData;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[5];

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v3 = *(void **)(v2 + 16);
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v21[0] = *(_QWORD *)(v2 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v21);
    if (v6 == 20)
    {
      v7 = *(_QWORD *)AttrData == 0x6974732E7873706DLL && *(_QWORD *)(AttrData + 8) == 0x65725F6465686374;
      if (v7 && *(_DWORD *)(AttrData + 16) == 1852994932)
      {
        v20 = 1283;
        v17 = "classof on '";
        v18 = "mpsx.stitched_return";
        v14 = 20;
        goto LABEL_22;
      }
    }
  }
  else if (v3 == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
  {
    return 1;
  }
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v10 = *(void **)(v9 + 16);
  if (v10 != &mlir::detail::TypeIDResolver<void,void>::id)
    return v10 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
  v21[0] = *(_QWORD *)(v9 + 8);
  v11 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v21);
  if (v12 == 12 && *(_QWORD *)v11 == 0x6E6564692E73706DLL && *(_DWORD *)(v11 + 8) == 2037672308)
  {
    v20 = 1283;
    v17 = "classof on '";
    v18 = "mps.identity";
    v14 = 12;
LABEL_22:
    v19 = v14;
    v15 = "' failed due to the operation not being registered";
    v16 = 259;
    llvm::operator+((uint64_t *)&v17, (uint64_t *)&v15, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  return 0;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mpsx::ReturnStitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::ReturnStitchedOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v7;
  __int16 v8;
  uint64_t v9[4];
  __int16 v10;
  _QWORD v11[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v11[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v11);
    if (v4 == 20
      && *(_QWORD *)AttrData == 0x6974732E7873706DLL
      && *(_QWORD *)(AttrData + 8) == 0x65725F6465686374
      && *(_DWORD *)(AttrData + 16) == 1852994932)
    {
      v10 = 1283;
      v9[0] = (uint64_t)"classof on '";
      v9[2] = (uint64_t)"mpsx.stitched_return";
      v9[3] = 20;
      v7 = "' failed due to the operation not being registered";
      v8 = 259;
      llvm::operator+(v9, (uint64_t *)&v7, (uint64_t)v11);
      llvm::report_fatal_error((llvm::Twine *)v11, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::IdentityOp,mlir::Operation *,llvm::CastInfo<mlir::mps::IdentityOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 12 && *(_QWORD *)AttrData == 0x6E6564692E73706DLL && *(_DWORD *)(AttrData + 8) == 2037672308)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.identity";
      v8[3] = 12;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t std::unordered_map<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unordered_map<mlir::Operation *,std::unordered_map<void *,mlir::ElementsAttr>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void BaseRuntime::~BaseRuntime(BaseRuntime *this)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  id *v7;
  id *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &unk_1E0E13018;

  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = (id *)v2[5];
      if (v7)
      {
        do
        {
          v8 = (id *)*v7;

          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v9 = (void *)v2[3];
      v2[3] = 0;
      if (v9)
        operator delete(v9);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    operator delete(v3);

  objc_destroyWeak((id *)this + 9);
  objc_destroyWeak((id *)this + 7);

  v4 = (void **)*((_QWORD *)this + 3);
  if (v4)
  {
    do
    {
      v10 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v10;
    }
    while (v10);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    operator delete(v5);
}

uint64_t *std::unique_ptr<mlir::ShapeEquivalence>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
    llvm::deallocate_buffer(*(llvm **)(v2 + 208), (void *)(16 * *(unsigned int *)(v2 + 224)));
  return result;
}

void std::default_delete<GPU::RuntimeExecutionReport>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(void **)(a2 + 128);
    if (v3 != (void *)(a2 + 144))
      free(v3);
    v4 = *(unsigned int *)(a2 + 120);
    v5 = *(llvm **)(a2 + 104);
    if ((_DWORD)v4)
    {
      v6 = 80 * v4;
      v7 = (char *)v5 + 32;
      do
      {
        if (*((_QWORD *)v7 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = (char *)*((_QWORD *)v7 - 2);
          if (v7 != v8)
            free(v8);
        }
        v7 += 80;
        v6 -= 80;
      }
      while (v6);
      v5 = *(llvm **)(a2 + 104);
      v9 = 80 * *(unsigned int *)(a2 + 120);
    }
    else
    {
      v9 = 0;
    }
    llvm::deallocate_buffer(v5, (void *)v9);
  }
}

void sub_180DD2BC0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);
  if (v1 != (void *)(v0 + 56))
    free(v1);
  JUMPOUT(0x186DA1680);
}

uint64_t std::unordered_map<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  id *v6;
  id *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (id *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (id *)*v6;

          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<std::string,MPSMLIROps>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_180DD2DB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  GPURegionRuntime::TIAndFoldHelper *v12;

  GPURegionRuntime::TIAndFoldHelper::~TIAndFoldHelper(v12);
}

uint64_t mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  const char *v22;
  unint64_t v23;

  v1 = *a1;
  if (!*a1)
    goto LABEL_20;
  v3 = *v1;
  v4 = v1[17];
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
  v23 = 66;
  v6 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
  v8 = v22;
  v7 = v23;
  if (v23 >= v6)
    v9 = v6;
  else
    v9 = v23;
  v10 = v23 - v9;
  v11 = &v22[v9];
  v22 = v11;
  v23 = v10;
  if (v7 <= v6)
    __assert_rtn("getTypeName", "TypeName.h", 33, "!Name.empty() && \"Unable to find the template parameter!\"");
  if (v10 <= 0x11)
    __assert_rtn("drop_front", "StringRef.h", 614, "size() >= N && \"Dropping more elements than exist\"");
  v22 = v11 + 18;
  v23 = v10 - 18;
  if (v10 == 18 || v8[v7 - 1] != 93)
    __assert_rtn("getTypeName", "TypeName.h", 36, "Name.ends_with(\"]\") && \"Name doesn't end in the substitution key!\"");
  mlir::dialect_extension_detail::handleUseOfUndefinedPromisedInterface(v3, v4, v5);
  v12 = *a1;
  if (!v12)
LABEL_20:
    __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v14)
    return 0;
  v15 = (_QWORD *)v12[1];
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    return v15[1];
  else
    return 0;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E0DF5DC8, MEMORY[0x1E0DE42E0]);
}

void sub_180DD2FC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::RuntimeExecutionReport::RuntimeExecutionReport(mlir::ModuleOp)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  mlir::Block *v4;
  uint64_t ParentOp;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t Values;
  unsigned __int16 *v11;
  int v12;
  int v13;
  uint64_t v15;
  void *v16;
  _QWORD *AttrData;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  const char *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  __int16 v87;
  _QWORD *v88[2];
  const char *v89;
  uint64_t v90;
  __int16 v91;
  _OWORD v92[2];

  v3 = *a1;
  v4 = *(mlir::Block **)(a2 + 16);
  if (v4)
  {
    ParentOp = mlir::Block::getParentOp(v4);
    v6 = ParentOp;
    if (ParentOp
      && mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(ParentOp))
    {
      ++*(_QWORD *)(v3 + 24);
    }
    *(_QWORD *)&v92[0] = llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible(a2);
    if (!*(_QWORD *)&v92[0])
      goto LABEL_12;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)&v92[0] = llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible(a2);
    if (!*(_QWORD *)&v92[0])
      goto LABEL_12;
  }
  if (mlir::placement::RegionCall::getRegionType((mlir::Operation **)v92) == 1)
  {
    v7 = *(unsigned int *)(v3 + 48);
    if (v7 >= *(_DWORD *)(v3 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 40, (void *)(v3 + 56), v7 + 1, 8);
      *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * *(unsigned int *)(v3 + 48)) = a2;
      v8 = *(_DWORD *)(v3 + 48);
      if (v8 >= *(_DWORD *)(v3 + 52))
        goto LABEL_139;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v7) = a2;
      v8 = *(_DWORD *)(v3 + 48);
      if (v8 >= *(_DWORD *)(v3 + 52))
        goto LABEL_139;
    }
    *(_DWORD *)(v3 + 48) = v8 + 1;
  }
LABEL_12:
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v9 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(_QWORD *)&v92[0] = *(_QWORD *)(v9 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v92);
    if (*(_QWORD *)(Values + 16) != 3)
      return;
  }
  else
  {
    Values = *(_QWORD *)(v9 + 24);
    if (*(_QWORD *)(Values + 16) != 3)
      return;
  }
  v11 = *(unsigned __int16 **)(Values + 8);
  v12 = *v11;
  v13 = *((unsigned __int8 *)v11 + 2);
  if (v12 == 28781 && v13 == 115)
  {
    v15 = *(_QWORD *)(v6 + 48);
    v16 = *(void **)(v15 + 16);
    if (v16 == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v92[0] = *(_QWORD *)(v15 + 8);
      AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
      if (v18 == 13 && *AttrData == 0x6974732E7873706DLL && *(_QWORD *)((char *)AttrData + 5) == 0x6465686374697473)
        goto LABEL_141;
    }
    else if (v16 == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
    {
      goto LABEL_66;
    }
    v20 = *(_QWORD *)(a2 + 48);
    v21 = *(void **)(v20 + 16);
    if (v21 == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v92[0] = *(_QWORD *)(v20 + 8);
      v22 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
      if (v23 == 26)
      {
        v24 = *(_QWORD *)v22 == 0x6E656D6563616C70 && *(_QWORD *)(v22 + 8) == 0x726F736E65742E74;
        v25 = v24 && *(_QWORD *)(v22 + 16) == 0x726D656D5F6F745FLL;
        if (v25 && *(_WORD *)(v22 + 24) == 26213)
          goto LABEL_140;
      }
    }
    else if (v21 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
    {
      goto LABEL_66;
    }
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(void **)(v27 + 16);
    if (v28 == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v92[0] = *(_QWORD *)(v27 + 8);
      v29 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
      if (v30 == 26)
      {
        v31 = *(_QWORD *)v29 == 0x6E656D6563616C70 && *(_QWORD *)(v29 + 8) == 0x6665726D656D2E74;
        v32 = v31 && *(_QWORD *)(v29 + 16) == 0x736E65745F6F745FLL;
        if (v32 && *(_WORD *)(v29 + 24) == 29295)
        {
LABEL_142:
          v91 = 1283;
          v84 = "placement.memref_to_tensor";
          goto LABEL_143;
        }
      }
    }
    else if (v28 == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
    {
      goto LABEL_66;
    }
    v34 = *(_QWORD *)(a2 + 48);
    v35 = *(void **)(v34 + 16);
    if (v35 == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v92[0] = *(_QWORD *)(v34 + 8);
      v36 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
      if (v37 == 12 && *(_QWORD *)v36 == 0x736E6F632E73706DLL && *(_DWORD *)(v36 + 8) == 1953390964)
        goto LABEL_144;
    }
    else if (v35 == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    {
      goto LABEL_66;
    }
    ++*(_QWORD *)(v3 + 32);
LABEL_66:
    v39 = *(_QWORD *)(a2 + 48);
    v40 = *(void **)(v39 + 16);
    if (v40 != &mlir::detail::TypeIDResolver<void,void>::id)
    {
      if (v40 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
        return;
      goto LABEL_80;
    }
    *(_QWORD *)&v92[0] = *(_QWORD *)(v39 + 8);
    v41 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
    if (v42 != 26
      || (*(_QWORD *)v41 == 0x6E656D6563616C70 ? (v43 = *(_QWORD *)(v41 + 8) == 0x726F736E65742E74) : (v43 = 0),
          v43 ? (v44 = *(_QWORD *)(v41 + 16) == 0x726D656D5F6F745FLL) : (v44 = 0),
          v44 ? (v45 = *(unsigned __int16 *)(v41 + 24) == 26213) : (v45 = 0),
          !v45))
    {
LABEL_80:
      v46 = *(_QWORD *)(a2 + 48);
      v47 = *(void **)(v46 + 16);
      if (v47 != &mlir::detail::TypeIDResolver<void,void>::id)
      {
        if (v47 == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
          return;
        goto LABEL_94;
      }
      *(_QWORD *)&v92[0] = *(_QWORD *)(v46 + 8);
      v48 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
      if (v49 != 26
        || (*(_QWORD *)v48 == 0x6E656D6563616C70 ? (v50 = *(_QWORD *)(v48 + 8) == 0x6665726D656D2E74) : (v50 = 0),
            v50 ? (v51 = *(_QWORD *)(v48 + 16) == 0x736E65745F6F745FLL) : (v51 = 0),
            v51 ? (v52 = *(unsigned __int16 *)(v48 + 24) == 29295) : (v52 = 0),
            !v52))
      {
LABEL_94:
        v53 = *(_QWORD *)(a2 + 48);
        v54 = *(void **)(v53 + 16);
        if (v54 != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          if (v54 == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
            return;
          goto LABEL_102;
        }
        *(_QWORD *)&v92[0] = *(_QWORD *)(v53 + 8);
        v55 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
        if (v56 != 13
          || (*v55 == 0x6974732E7873706DLL ? (v57 = *(_QWORD *)((char *)v55 + 5) == 0x6465686374697473) : (v57 = 0),
              !v57))
        {
LABEL_102:
          v58 = *(_QWORD *)(a2 + 48);
          v59 = *(void **)(v58 + 16);
          if (v59 != &mlir::detail::TypeIDResolver<void,void>::id)
          {
            if (v59 == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
              return;
LABEL_110:
            *(_QWORD *)&v92[0] = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8);
            *(_QWORD *)&v92[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
            *((_QWORD *)&v92[0] + 1) = v63;
            v88[0] = 0;
            v64 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v3 + 104), (uint64_t)v92, v88);
            v65 = v88[0];
            if ((v64 & 1) != 0)
            {
              v66 = *((unsigned int *)v88[0] + 6);
              v67 = v88[0] + 3;
              if (v66 >= *((_DWORD *)v88[0] + 7))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v88[0] + 2), v88[0] + 4, v66 + 1, 8);
                LODWORD(v66) = *((_DWORD *)v65 + 6);
              }
            }
            else
            {
              v65 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::Operation *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>(v3 + 104, (uint64_t)v92, (uint64_t)v92, v88[0]);
              LODWORD(v66) = 0;
              *(_OWORD *)v65 = v92[0];
              v65[2] = v65 + 4;
              v65[3] = 0x600000000;
              v67 = v65 + 3;
            }
            *(_QWORD *)(v65[2] + 8 * v66) = a2;
            v68 = *((_DWORD *)v65 + 6);
            if (v68 < *((_DWORD *)v65 + 7))
            {
              *v67 = v68 + 1;
              ++*(_QWORD *)(v3 + 8);
              v69 = *(_QWORD *)(a2 + 48);
              v70 = *(void **)(v69 + 16);
              if (v70 == &mlir::detail::TypeIDResolver<void,void>::id)
              {
                *(_QWORD *)&v92[0] = *(_QWORD *)(v69 + 8);
                v71 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
                if (v72 == 11 && *v71 == 0x687365722E73706DLL && *(_QWORD *)((char *)v71 + 3) == 0x657061687365722ELL)
                {
                  v91 = 1283;
                  v83 = "mps.reshape";
                  goto LABEL_146;
                }
              }
              else if (v70 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id)
              {
                goto LABEL_130;
              }
              v74 = *(_QWORD *)(a2 + 48);
              v75 = *(void **)(v74 + 16);
              if (v75 == &mlir::detail::TypeIDResolver<void,void>::id)
              {
                *(_QWORD *)&v92[0] = *(_QWORD *)(v74 + 8);
                v76 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
                if (v77 == 8 && *v76 == 0x747361632E73706DLL)
                {
                  v91 = 1283;
                  v88[0] = "classof on '";
                  v89 = "mps.cast";
                  v85 = 8;
LABEL_148:
                  v90 = v85;
                  v86 = "' failed due to the operation not being registered";
                  v87 = 259;
                  llvm::operator+((uint64_t *)v88, (uint64_t *)&v86, (uint64_t)v92);
                  llvm::report_fatal_error((llvm::Twine *)v92, 1);
                }
              }
              else if (v75 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
              {
                goto LABEL_130;
              }
              v78 = *(_QWORD *)(a2 + 48);
              v79 = *(void **)(v78 + 16);
              if (v79 != &mlir::detail::TypeIDResolver<void,void>::id)
              {
                if (v79 != &mlir::detail::TypeIDResolver<mlir::mps::PermuteOp,void>::id)
                  return;
LABEL_130:
                ++*(_QWORD *)(v3 + 16);
                return;
              }
              *(_QWORD *)&v92[0] = *(_QWORD *)(v78 + 8);
              v80 = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
              if (v81 != 11)
                return;
              if (*v80 != 0x6D7265702E73706DLL || *(_QWORD *)((char *)v80 + 3) != 0x6574756D7265702ELL)
                return;
              v91 = 1283;
              v83 = "mps.permute";
LABEL_146:
              v88[0] = "classof on '";
              v89 = v83;
              v85 = 11;
              goto LABEL_148;
            }
LABEL_139:
            __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
          }
          *(_QWORD *)&v92[0] = *(_QWORD *)(v58 + 8);
          v60 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v92);
          if (v61 != 12)
            goto LABEL_110;
          if (*(_QWORD *)v60 != 0x736E6F632E73706DLL || *(_DWORD *)(v60 + 8) != 1953390964)
            goto LABEL_110;
LABEL_144:
          v91 = 1283;
          v88[0] = "classof on '";
          v89 = "mps.constant";
          v85 = 12;
          goto LABEL_148;
        }
LABEL_141:
        v91 = 1283;
        v88[0] = "classof on '";
        v89 = "mpsx.stitched";
        v85 = 13;
        goto LABEL_148;
      }
      goto LABEL_142;
    }
LABEL_140:
    v91 = 1283;
    v84 = "placement.tensor_to_memref";
LABEL_143:
    v88[0] = "classof on '";
    v89 = v84;
    v85 = 26;
    goto LABEL_148;
  }
}

mlir::Block *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::initializeOps(void)::$_0>(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  mlir::Block *result;
  uint64_t v5;

  v3 = *a1;
  result = *(mlir::Block **)(a2 + 16);
  if (!result)
  {
    v5 = 0;
    goto LABEL_7;
  }
  result = (mlir::Block *)mlir::Block::getParentOp(result);
  v5 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  result = (mlir::Block *)mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)result);
  if (result)
  {
    result = (mlir::Block *)mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v5);
    if (!result)
      __assert_rtn("Interface", "InterfaceSupport.h", 98, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
LABEL_7:
    if (v5 != v3[29])
      return result;
    return (mlir::Block *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v3 + 64))(v3, a2, 0);
  }
  if (!v3[29])
    return (mlir::Block *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v3 + 64))(v3, a2, 0);
  return result;
}

void std::__hash_table<std::__hash_value_type<void *,void *>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,void *>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,void *>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,void *>>>::__emplace_unique_key_args<void *,std::pair<void *,void *> &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = v9 ^ (v9 >> 47);
  v11 = 0x9DDFEA08EB382D69 * v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                return;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              return;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v11;
  v18[2] = a3;
  v18[3] = a4;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
    goto LABEL_50;
  v21 = 1;
  if (v12 >= 3)
    v21 = (v12 & (v12 - 1)) != 0;
  v22 = v21 | (2 * v12);
  v23 = vcvtps_u32_f32(v19 / v20);
  if (v22 <= v23)
    prime = v23;
  else
    prime = v22;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v12 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v12)
    goto LABEL_34;
  if (prime < v12)
  {
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime < v12)
LABEL_34:
      std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
  }
  v12 = *(_QWORD *)(a1 + 8);
  v28 = v12 - 1;
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12)
    {
      v4 = v11 % v12;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
      if (!v30)
        goto LABEL_53;
LABEL_51:
      *v18 = *v30;
LABEL_59:
      *v30 = v18;
      goto LABEL_60;
    }
    v4 = v11;
LABEL_50:
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v30)
      goto LABEL_53;
    goto LABEL_51;
  }
  v4 = v28 & v11;
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v11));
  if (v30)
    goto LABEL_51;
LABEL_53:
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v29 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12)
        v31 %= v12;
    }
    else
    {
      v31 &= v12 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_180DD3C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AbsoluteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>>>::__emplace_unique_key_args<mlir::Operation *,std::pair<mlir::Operation * const,std::unique_ptr<GPU::BaseOpHandler>>>(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x20uLL);
  *v17 = 0;
  v17[1] = v9;
  v18 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  *((_OWORD *)v17 + 1) = v18;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
    goto LABEL_50;
  v21 = 1;
  if (v10 >= 3)
    v21 = (v10 & (v10 - 1)) != 0;
  v22 = v21 | (2 * v10);
  v23 = vcvtps_u32_f32(v19 / v20);
  if (v22 <= v23)
    prime = v23;
  else
    prime = v22;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v10 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v10)
    goto LABEL_34;
  if (prime < v10)
  {
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime < v10)
LABEL_34:
      std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v28 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      v3 = v9 % v10;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
      if (!v30)
        goto LABEL_53;
LABEL_51:
      *v17 = *v30;
LABEL_59:
      *v30 = v17;
      goto LABEL_60;
    }
    v3 = v9;
LABEL_50:
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v30)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v28 & v9;
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v9));
  if (v30)
    goto LABEL_51;
LABEL_53:
  *v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v29 + 8 * v3) = v16;
  if (*v17)
  {
    v31 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_180DD43B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      v2[3] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AbsoluteSquareOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ACosOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ACoshOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AddOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ASinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ASinhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATan2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ATanhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::AssignVariableOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BandPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseAndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseLeftShiftOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseNotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseOrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwisePopcountOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseRightShiftOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BitwiseXorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BatchToSpaceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BroadcastGradientArgsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::BroadcastToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CallOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CeilOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ClampOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ColToImOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConcatOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConditionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConjugateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv2DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Conv3DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ConstantOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CosOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CoshOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CostVolumeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CreateComplexOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CreateTextureTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CropOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CropResizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeSumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeProductOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeMaximumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::CumulativeMinimumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthToSpace2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv2DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DepthwiseConv3DWeightsGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DequantizeLutOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DequantizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DimensionSizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DivideOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::DynamicShapeCastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ErfOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::EqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExpandDimsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentBase2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExponentBase10OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ExtractOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFTOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFT_RToCOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FFT_CToROpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FileBackedConstantOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::Flatten2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FloorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ForOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FPToIntClampedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherAlongAxisOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GatherNDOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GetCoordOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GreaterThanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GreaterThanOrEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GRUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::GRUGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::HammingDistanceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IdentityOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IfOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ImaginaryPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ImToColOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsFiniteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsInfiniteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::IsNaNOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LessThanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LessThanOrEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LocalConvolutionWeightGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmBase2OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LogarithmBase10OpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LSTMOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::LSTMGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MakeListOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MaterializeSparseTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixDecompositionLUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixInverseOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MatrixSolverLUOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MaximumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MemrefToTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MinimumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ModuloOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::MultiplyOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NandOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NegativeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::NotEqualToOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::OneHotOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::OrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PadOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PadGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PermuteOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolAvgOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolAvgGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolL2NormOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolL2NormGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PoolMaxGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PowerOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PruneOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::PruneGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::QuantizedGatherOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomUniformOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomTruncatedNormalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RandomNormalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RankOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RealPartOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReadVariableOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReciprocalOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionAndOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionArgMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionArgMinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionMaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionMinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionProdOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionOrOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReductionSumOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RegionCallOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RegionReturnOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReinterpretCastOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReshapeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ResizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ResizeGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReturnOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReturnStitchedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReverseOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ReciprocalSquareRootOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RintOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RMSNormOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::RoundOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SampleGridOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SampleGridDataGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScaledDotProductAttentionOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterAlongAxisOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ScatterNDOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SelectOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ShapeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SignOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SignbitOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SinOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SingleGateRNNOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SingleGateRNNGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SinhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SizeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SliceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SoftmaxOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SortOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SpaceToBatchOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SpaceToDepth2DOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SparseDenseMatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SplitOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SquareOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SquareRootOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SqueezeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StencilOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StitchedOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::StridedSliceUpdateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::SubtractOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TanOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TanhOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::FromElementsOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ListPopBackOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::ListPushBackOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TensorToMemrefOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TileOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TileGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TopKOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TopKGradientOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TransposeOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::TypeConstraintOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::UpdateRandomStateOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::VarHandleOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::VariableFromTensorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::WhileOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::XorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::XnorOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::YieldOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPU::BaseOpHandler * GPURegionRuntime::createOp<GPU::QuantizedMatMulOpHandler>(mlir::Operation *,GPU::MPSGraphKernelDAG *)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  if (*(_DWORD *)(a2 + 36))
  {
    if (**(_BYTE **)a1
      || (v31 = a2 - 16, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31)) == 0)
      || (v20 = DefiningOp,
          v21 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 48) + 32))(*(_QWORD *)(v20 + 48), v21) & 1) == 0))
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *(_QWORD *)(a2 + 24);
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 < v6)
      {
        *(_QWORD *)v7 = v5;
        v8 = (uint64_t)(v7 + 8);
LABEL_28:
        v4[1] = (char *)v8;
        return;
      }
      v9 = *v4;
      v10 = v7 - *v4;
      v11 = v10 >> 3;
      v12 = (v10 >> 3) + 1;
      if (v12 >> 61)
        std::vector<long>::__throw_length_error[abi:ne180100]();
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = v5;
        v8 = (uint64_t)(v16 + 8);
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
          goto LABEL_26;
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        v17 = 0;
        *(_QWORD *)(8 * v11) = v5;
        v8 = 8 * v11 + 8;
        v18 = (char *)(v7 - v9);
        if (v7 == v9)
        {
LABEL_26:
          *v4 = v16;
          v4[1] = (char *)v8;
          v4[2] = v17;
          if (v7)
            operator delete(v7);
          goto LABEL_28;
        }
      }
      v22 = (unint64_t)(v18 - 8);
      if (v22 < 0x58)
        goto LABEL_34;
      if ((unint64_t)(v7 - v15 - v10) < 0x20)
        goto LABEL_34;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v7[-v24];
      v16 -= v24;
      v26 = &v15[8 * v11 - 16];
      v27 = v7 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v7 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v30 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v7 != v9);
      }
      v7 = *v4;
      goto LABEL_26;
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<GPURegionRuntime::evaluateOps(GPU::EncodeDescriptor *,NSArray<MPSGraphTensorData *> *,NSArray<MPSGraphTensorData *> *)::$_0>(uint64_t a1, uint64_t a2)
{
  mlir::Block *v3;
  uint64_t ParentOp;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _BOOL4 isInteger;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _OWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t ElementTypeOrSelf;
  unint64_t v56;
  MPSDataType v57;
  unint64_t v58;

  v3 = *(mlir::Block **)(a2 + 16);
  if (!v3 || (ParentOp = mlir::Block::getParentOp(v3)) == 0)
    __assert_rtn("dyn_cast", "Casting.h", 662, "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"");
  if (!llvm::DefaultDoCastIfPossible<mlir::mpsx::StitchedOp,mlir::Operation *,llvm::CastInfo<mlir::mpsx::StitchedOp,mlir::Operation *,void>>::doCastIfPossible(ParentOp)
    && !llvm::DefaultDoCastIfPossible<mlir::mps::ConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConstantOp,mlir::Operation *,void>>::doCastIfPossible(a2))
  {
    v58 = 0;
    v57 = MPSDataTypeInvalid;
    v6 = computeProducedValues(a2, 0, 1, &v58, &v57);
    if (v6)
    {
      ++**(_QWORD **)a1;
      **(_QWORD **)(a1 + 8) += v58;
    }
    v7 = *(unint64_t **)(a1 + 16);
    if (v6 > *v7)
    {
      *v7 = v6;
      **(_DWORD **)(a1 + 24) = v57;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = **(_QWORD **)(a1 + 32);
      if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
      {
        v8 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v10 = *(_QWORD *)(a2 + 72);
          v53 = v10;
          while (1)
          {
            v12 = *(_QWORD *)(v10 + 32 * v9 + 24);
            v13 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v13)
              goto LABEL_13;
            if (!*(_QWORD *)v13)
              __assert_rtn("getAbstractType", "TypeSupport.h", 160, "abstractType && \"Malformed type storage object.\"");
            v14 = *(void **)(*(_QWORD *)v13 + 136);
            if (v14 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
              v13 = 0;
            v56 = v13;
            if (v14 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
              goto LABEL_13;
            Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
            if (!v16)
            {
              v25 = 1;
              goto LABEL_28;
            }
            v17 = (v16 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (!v17)
              break;
            v18 = v17 + 1;
            v19 = (v17 + 1) & 0x3FFFFFFFFFFFFFFELL;
            v20 = (uint64_t *)(Value + 8 * v19);
            v21 = (_QWORD *)(Value + 8);
            v22 = v19;
            v23 = 1;
            v24 = 1;
            do
            {
              v23 *= *(v21 - 1);
              v24 *= *v21;
              v21 += 2;
              v22 -= 2;
            }
            while (v22);
            v25 = v24 * v23;
            if (v18 != v19)
              goto LABEL_27;
LABEL_28:
            ElementTypeOrSelf = mlir::getElementTypeOrSelf(v12);
            if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)
              || mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 16))
            {
              v27 = 2 * v25;
              v28 = *(_QWORD *)(a1 + 32);
              v30 = *(uint64_t **)(v28 + 8);
              v29 = *(_QWORD *)(v28 + 16);
              if ((unint64_t)v30 >= v29)
                goto LABEL_35;
            }
            else
            {
              isInteger = mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 8);
              v32 = 4;
              if (isInteger)
                v32 = 1;
              v27 = v32 * v25;
              v28 = *(_QWORD *)(a1 + 32);
              v30 = *(uint64_t **)(v28 + 8);
              v29 = *(_QWORD *)(v28 + 16);
              if ((unint64_t)v30 >= v29)
              {
LABEL_35:
                v33 = v8;
                v34 = a1;
                v35 = *(uint64_t **)v28;
                v36 = (uint64_t)v30 - *(_QWORD *)v28;
                v37 = v36 >> 3;
                v38 = (v36 >> 3) + 1;
                if (v38 >> 61)
                  std::vector<long>::__throw_length_error[abi:ne180100]();
                v39 = v29 - (_QWORD)v35;
                if (v39 >> 2 > v38)
                  v38 = v39 >> 2;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                v54 = v38;
                if (v38)
                {
                  if (v38 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v40 = operator new(8 * v38);
                  v41 = (uint64_t *)&v40[8 * v37];
                  *v41 = v27;
                  v11 = (uint64_t)(v41 + 1);
                  v42 = (char *)v30 - (char *)v35;
                  if (v30 != v35)
                  {
LABEL_43:
                    v43 = v42 - 8;
                    if (v43 < 0x58)
                    {
                      a1 = v34;
                      v8 = v33;
                      goto LABEL_51;
                    }
                    v44 = (char *)v30 - v40 - v36;
                    a1 = v34;
                    v8 = v33;
                    if (v44 < 0x20)
                      goto LABEL_62;
                    v45 = (v43 >> 3) + 1;
                    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
                    v47 = &v30[v46 / 0xFFFFFFFFFFFFFFF8];
                    v41 = (uint64_t *)((char *)v41 - v46);
                    v48 = &v40[8 * v37 - 16];
                    v49 = v30 - 2;
                    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v51 = *(_OWORD *)v49;
                      *(v48 - 1) = *((_OWORD *)v49 - 1);
                      *v48 = v51;
                      v48 -= 2;
                      v49 -= 4;
                      v50 -= 4;
                    }
                    while (v50);
                    v30 = v47;
                    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_62:
                      do
                      {
LABEL_51:
                        v52 = *--v30;
                        *--v41 = v52;
                      }
                      while (v30 != v35);
                    }
LABEL_52:
                    *(_QWORD *)v28 = v41;
                    *(_QWORD *)(v28 + 8) = v11;
                    *(_QWORD *)(v28 + 16) = &v40[8 * v54];
                    if (v35)
                      operator delete(v35);
                    v10 = v53;
                    goto LABEL_12;
                  }
                }
                else
                {
                  v40 = 0;
                  v41 = (uint64_t *)(8 * v37);
                  *(_QWORD *)(8 * v37) = v27;
                  v11 = 8 * v37 + 8;
                  v42 = (char *)v30 - (char *)v35;
                  if (v30 != v35)
                    goto LABEL_43;
                }
                a1 = v34;
                v8 = v33;
                goto LABEL_52;
              }
            }
            *v30 = v27;
            v11 = (uint64_t)(v30 + 1);
LABEL_12:
            *(_QWORD *)(v28 + 8) = v11;
LABEL_13:
            if (++v9 == v8)
              return;
          }
          v25 = 1;
          v20 = (uint64_t *)Value;
          do
          {
LABEL_27:
            v26 = *v20++;
            v25 *= v26;
          }
          while (v20 != (uint64_t *)(Value + 8 * v16));
          goto LABEL_28;
        }
      }
    }
  }
}

void std::vector<std::pair<MPSGraphTensorData * {__strong},MPSGraphTensorData * {__strong}>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__hash_table<std::__hash_value_type<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>,std::__unordered_map_hasher<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto9MTLBuffer}* {__strong}>>::__emplace_unique_key_args<unsigned long,unsigned long &,objc_object  {objcproto9MTLBuffer}*&>(uint64_t *a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;

  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = a4;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = a1[1];
    if (prime > v9)
    {
LABEL_36:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * prime);
      v26 = (void *)*a1;
      *a1 = (uint64_t)v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v27++) = 0;
      while (prime != v27);
      v28 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_68;
      v29 = v28[1];
      v30 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v31 = v29 & v30;
        *(_QWORD *)(*a1 + 8 * v31) = v15;
        for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
        {
          v33 = i[1] & v30;
          if (v33 == v31)
          {
            v28 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v33))
          {
            *v28 = *i;
            v34 = 8 * v33;
            *i = **(_QWORD **)(*a1 + v34);
            **(_QWORD **)(*a1 + v34) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v33) = v28;
            v28 = i;
            v31 = v33;
          }
        }
        goto LABEL_68;
      }
      if (v29 >= prime)
        v29 %= prime;
      *(_QWORD *)(*a1 + 8 * v29) = v15;
      v38 = (_QWORD *)*v28;
      if (!*v28)
      {
LABEL_68:
        v9 = prime;
        v41 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_69;
        goto LABEL_84;
      }
      while (1)
      {
        v40 = v38[1];
        if (v40 >= prime)
          v40 %= prime;
        if (v40 == v29)
          goto LABEL_62;
        if (*(_QWORD *)(*a1 + 8 * v40))
        {
          *v28 = *v38;
          v39 = 8 * v40;
          *v38 = **(_QWORD **)(*a1 + v39);
          **(_QWORD **)(*a1 + v39) = v38;
          v38 = v28;
LABEL_62:
          v28 = v38;
          v38 = (_QWORD *)*v38;
          if (!v38)
            goto LABEL_68;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v40) = v28;
          v28 = v38;
          v38 = (_QWORD *)*v38;
          v29 = v40;
          if (!v38)
            goto LABEL_68;
        }
      }
    }
    if (prime < v9)
    {
      v35 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < v9)
      {
        if (!prime)
        {
          v42 = (void *)*a1;
          *a1 = 0;
          if (v42)
            operator delete(v42);
          v9 = 0;
          a1[1] = 0;
          v41 = -1;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      v9 = a1[1];
    }
    v41 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
LABEL_69:
      if (v9 <= a2)
      {
        v4 = a2 % v9;
        v19 = *a1;
        v20 = *(_QWORD **)(*a1 + 8 * (a2 % v9));
        if (v20)
          goto LABEL_25;
      }
      else
      {
        v4 = a2;
        v19 = *a1;
        v20 = *(_QWORD **)(*a1 + 8 * a2);
        if (v20)
          goto LABEL_25;
      }
      goto LABEL_85;
    }
LABEL_84:
    v4 = v41 & a2;
    v19 = *a1;
    v20 = *(_QWORD **)(*a1 + 8 * (v41 & a2));
    if (v20)
      goto LABEL_25;
    goto LABEL_85;
  }
  v19 = *a1;
  v20 = *(_QWORD **)(*a1 + 8 * v4);
  if (v20)
  {
LABEL_25:
    *v16 = *v20;
LABEL_91:
    *v20 = v16;
    goto LABEL_92;
  }
LABEL_85:
  *v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v19 + 8 * v4) = v15;
  if (*v16)
  {
    v43 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v20 = (_QWORD *)(*a1 + 8 * v43);
    goto LABEL_91;
  }
LABEL_92:
  ++a1[3];
}

void sub_180DECB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,MPSGraphTensorData * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *mlir::detail::unpackQuantizedData<std::complex<float>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  if (a5 >= 8)
    __assert_rtn("unpackQuantizedData", "MPSRawAttributeUtils.h", 81, "bitwith < 8");
  v5 = 8u / a5;
  if ((8u / a5 * a5) != 8)
    __assert_rtn("unpackQuantizedData", "MPSRawAttributeUtils.h", 82, "8 % bitwith == 0");
  if ((a4 + v5 - 1) / v5 != a2)
    __assert_rtn("unpackQuantizedData", "MPSRawAttributeUtils.h", 85, "llvm::divideCeil(numElements, elemsPerByte) == inData.size()");
  if (a2)
  {
    v6 = 0;
    v7 = ~(-1 << a5);
    v8 = a4;
    do
    {
      v9 = v6 * v5;
      v10 = a4 - v6 * v5;
      if (v10 >= v5)
        v10 = 8u / a5;
      if (v10)
      {
        if (v8 >= v5)
          v11 = 8u / a5;
        else
          v11 = v8;
        if (a4 <= v9)
LABEL_30:
          __assert_rtn("operator[]", "ArrayRef.h", 443, "Index < this->size() && \"Invalid index!\"");
        v12 = *result;
        v13 = a3 + 8 * v9;
        *(float *)v13 = (float)(int)(v7 & v12);
        *(_DWORD *)(v13 + 4) = 0;
        if (v11 != 1)
        {
          if (a4 <= v9 + 1)
            goto LABEL_30;
          v14 = a3 + 8 * (v9 + 1);
          *(float *)v14 = (float)(int)((v12 >> a5) & v7);
          *(_DWORD *)(v14 + 4) = 0;
          if (v11 != 2)
          {
            if (a4 <= v9 + 2)
              goto LABEL_30;
            v15 = a3 + 8 * (v9 + 2);
            *(float *)v15 = (float)(int)((v12 >> (2 * a5)) & v7);
            *(_DWORD *)(v15 + 4) = 0;
            if (v11 != 3)
            {
              if (a4 <= v9 + 3)
                goto LABEL_30;
              v16 = a3 + 8 * (v9 + 3);
              *(float *)v16 = (float)(int)((v12 >> (3 * a5)) & v7);
              *(_DWORD *)(v16 + 4) = 0;
              if (v11 != 4)
              {
                if (a4 <= v9 + 4)
                  goto LABEL_30;
                v17 = a3 + 8 * (v9 + 4);
                *(float *)v17 = (float)(int)((v12 >> (4 * a5)) & v7);
                *(_DWORD *)(v17 + 4) = 0;
                if (v11 != 5)
                {
                  if (a4 <= v9 + 5)
                    goto LABEL_30;
                  v18 = a3 + 8 * (v9 + 5);
                  *(float *)v18 = (float)(int)((v12 >> (5 * a5)) & v7);
                  *(_DWORD *)(v18 + 4) = 0;
                  if (v11 != 6)
                  {
                    if (a4 <= v9 + 6)
                      goto LABEL_30;
                    v19 = a3 + 8 * (v9 + 6);
                    *(float *)v19 = (float)(int)((v12 >> (6 * a5)) & v7);
                    *(_DWORD *)(v19 + 4) = 0;
                    if (v11 != 7)
                    {
                      v20 = v9 + 7;
                      if (a4 <= v20)
                        goto LABEL_30;
                      v21 = a3 + 8 * v20;
                      *(float *)v21 = (float)(int)((v12 >> (7 * a5)) & v7);
                      *(_DWORD *)(v21 + 4) = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v6;
      v8 -= v5;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<void *,mlir::ElementsAttr>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,mlir::ElementsAttr>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,mlir::ElementsAttr>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,mlir::ElementsAttr>>>::__emplace_unique_key_args<void *,void *,mlir::ElementsAttr&>(uint64_t a1, uint64_t *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = *a2;
  v9 = HIDWORD(*a2);
  v10 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v9);
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v15 + 1);
            if (v17 == v11)
            {
              if (*((_QWORD *)v15 + 2) == v8)
                return v15;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v15 = *(char **)v15;
            if (!v15)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v11)
          {
            if (*((_QWORD *)v15 + 2) == v8)
              return v15;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  *((_QWORD *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v15 = *v21;
LABEL_61:
      *v21 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_37;
    if (prime < v12)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v12)
LABEL_37:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v29 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v11;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v11));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v30 >= v12)
        v30 %= v12;
    }
    else
    {
      v30 &= v12 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_180DED120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<FullyPlacedOnANEMPSRuntime::initializeForExecution(void)::$_0>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int OperandNumber;
  uint64_t Input;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t AttrData;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  __int16 v40;
  uint64_t v41[4];
  __int16 v42;
  _QWORD v43[6];

  v2 = *result;
  v38 = a2;
  if (!a2)
    return result;
  v37 = llvm::DefaultDoCastIfPossible<mlir::placement::RegionCall,mlir::Operation *,llvm::CastInfo<mlir::placement::RegionCall,mlir::Operation *,void>>::doCastIfPossible(a2);
  if (!v37)
  {
    result = (uint64_t *)llvm::DefaultDoCastIfPossible<mlir::placement::TensorToMemref,mlir::Operation *,llvm::CastInfo<mlir::placement::TensorToMemref,mlir::Operation *,void>>::doCastIfPossible(a2);
    v43[0] = result;
    if (!result)
      return result;
    v22 = *(_QWORD **)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v43);
    if (!v22 || *v22)
      __assert_rtn("operator()", "MPSRuntime.mm", 1475, "result.hasOneUse()");
    OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)v22);
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v43);
    if (!Input)
      __assert_rtn("doit", "Casting.h", 109, "Val && \"isa<> used on a null pointer\"");
    v25 = Input;
    if ((~*(_DWORD *)(Input + 8) & 7) != 0)
      __assert_rtn("cast", "Casting.h", 566, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
    v26 = (_QWORD *)(v2 + 648);
    v27 = *(_DWORD *)(v2 + 656);
    if (v27 > OperandNumber)
    {
LABEL_68:
      result = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(v2 + 264), &v38);
      if (result)
      {
        if (*(_DWORD *)(v2 + 784) <= OperandNumber
          || (*(_QWORD *)(*(_QWORD *)(v2 + 776) + 8 * OperandNumber) = result[3],
              *(_DWORD *)(v2 + 656) <= OperandNumber))
        {
LABEL_76:
          __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
        }
        *(_QWORD *)(*v26 + 8 * OperandNumber) = *(unsigned int *)(v25 + 24);
        return result;
      }
LABEL_83:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    v28 = OperandNumber + 1;
    v29 = *(_DWORD *)(v2 + 784);
    if (v29 == (_DWORD)v28)
      goto LABEL_60;
    v30 = *(_DWORD *)(v2 + 788);
    if (v29 > v28)
    {
      if (v30 < v28)
        goto LABEL_63;
      goto LABEL_59;
    }
    if (v30 < v28)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 776, (void *)(v2 + 792), OperandNumber + 1, 8);
      v29 = *(_DWORD *)(v2 + 784);
      if (v29 == (_DWORD)v28)
      {
LABEL_54:
        if (*(_DWORD *)(v2 + 788) < v28)
          goto LABEL_63;
        goto LABEL_58;
      }
    }
    else if (v29 == (_DWORD)v28)
    {
      goto LABEL_54;
    }
    bzero((void *)(*(_QWORD *)(v2 + 776) + 8 * v29), 8 * (v28 - v29));
    if (*(_DWORD *)(v2 + 788) < v28)
      goto LABEL_63;
LABEL_58:
    v27 = *(_DWORD *)(v2 + 656);
LABEL_59:
    *(_DWORD *)(v2 + 784) = v28;
LABEL_60:
    if (v27 == (_DWORD)v28)
      goto LABEL_68;
    v31 = *(_DWORD *)(v2 + 660);
    if (v27 > v28)
    {
      if (v31 < v28)
        goto LABEL_63;
      goto LABEL_67;
    }
    if (v31 < v28)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 648, (void *)(v2 + 664), OperandNumber + 1, 8);
      v27 = *(_DWORD *)(v2 + 656);
      if (v27 == (_DWORD)v28)
      {
LABEL_66:
        if (*(_DWORD *)(v2 + 660) < v28)
          goto LABEL_63;
        goto LABEL_67;
      }
    }
    else if (v27 == (_DWORD)v28)
    {
      goto LABEL_66;
    }
    bzero((void *)(*v26 + 8 * v27), 8 * (v28 - v27));
    if (*(_DWORD *)(v2 + 660) >= v28)
    {
LABEL_67:
      *(_DWORD *)(v2 + 656) = v28;
      goto LABEL_68;
    }
LABEL_63:
    __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
  }
  if (*(_QWORD *)(v2 + 904))
    __assert_rtn("operator()", "MPSRuntime.mm", 1458, "!_aneRegionCallOpHandler");
  v4 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(v2 + 264), &v38);
  if (!v4)
    goto LABEL_83;
  *(_QWORD *)(v2 + 904) = *(_QWORD *)(v4[3] + 120);
  result = (uint64_t *)mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v37);
  if (v5)
  {
    v6 = (uint64_t)result;
    v7 = v5;
    v8 = 0;
    v9 = (_QWORD *)(v2 + 712);
    v10 = (_QWORD *)(v2 + 840);
    for (i = 8; ; i += 8)
    {
      v12 = *(_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v6, v8);
      if (!v12 || *v12)
        __assert_rtn("operator()", "MPSRuntime.mm", 1463, "result.hasOneUse()");
      v13 = v12[2];
      v14 = *(_QWORD *)(v13 + 48);
      v15 = *(void **)(v14 + 16);
      if (v15 == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        v43[0] = *(_QWORD *)(v14 + 8);
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v43);
        if (v33 == 26)
        {
          v34 = *(_QWORD *)AttrData == 0x6E656D6563616C70 && *(_QWORD *)(AttrData + 8) == 0x6665726D656D2E74;
          v35 = v34 && *(_QWORD *)(AttrData + 16) == 0x736E65745F6F745FLL;
          if (v35 && *(_WORD *)(AttrData + 24) == 29295)
          {
            v42 = 1283;
            v41[0] = (uint64_t)"classof on '";
            v41[2] = (uint64_t)"placement.memref_to_tensor";
            v41[3] = 26;
            v39 = "' failed due to the operation not being registered";
            v40 = 259;
            llvm::operator+(v41, (uint64_t *)&v39, (uint64_t)v43);
            llvm::report_fatal_error((llvm::Twine *)v43, 1);
          }
        }
LABEL_97:
        __assert_rtn("cast", "Casting.h", 578, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
      }
      if (v15 != &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
        goto LABEL_97;
      v41[0] = v13;
      v43[0] = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v41);
      if (!*(_QWORD *)v43[0] || **(_QWORD **)v43[0])
        __assert_rtn("operator()", "MPSRuntime.mm", 1465, "output.hasOneUse()");
      v16 = *(unsigned int *)(v2 + 720);
      if (v8 < v16)
        goto LABEL_37;
      v17 = v8 + 1;
      v18 = *(unsigned int *)(v2 + 848);
      if (v8 + 1 != v18)
        break;
LABEL_26:
      if (v17 != v16)
      {
        v20 = *(unsigned int *)(v2 + 724);
        if (v17 < v16)
        {
          if (v8 >= v20)
            goto LABEL_63;
LABEL_36:
          *(_DWORD *)(v2 + 720) = v8 + 1;
          goto LABEL_37;
        }
        if (v8 >= v20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 712, (void *)(v2 + 728), v8 + 1, 8);
          v16 = *(unsigned int *)(v2 + 720);
          if (v17 == v16)
          {
LABEL_32:
            if (v8 >= *(unsigned int *)(v2 + 724))
              goto LABEL_63;
            goto LABEL_36;
          }
        }
        else if (v17 == v16)
        {
          goto LABEL_32;
        }
        bzero((void *)(*v9 + 8 * v16), i - 8 * v16);
        if (v8 >= *(unsigned int *)(v2 + 724))
          goto LABEL_63;
        goto LABEL_36;
      }
LABEL_37:
      v21 = mlir::OpOperand::getOperandNumber(*(_QWORD *)v43[0]);
      if (v8 >= *(unsigned int *)(v2 + 720))
        goto LABEL_76;
      *(_QWORD *)(*v9 + 8 * v8) = v21;
      v41[0] = mlir::Value::getDefiningOp((mlir::Value *)v43);
      result = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(v2 + 264), v41);
      if (!result)
        goto LABEL_83;
      if (v8 >= *(unsigned int *)(v2 + 848))
        goto LABEL_76;
      *(_QWORD *)(*v10 + 8 * v8++) = result[3];
      if (v7 == v8)
        return result;
    }
    v19 = *(unsigned int *)(v2 + 852);
    if (v8 + 1 < v18)
    {
      if (v8 >= v19)
        goto LABEL_63;
      goto LABEL_25;
    }
    if (v8 >= v19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 840, (void *)(v2 + 856), v8 + 1, 8);
      v18 = *(unsigned int *)(v2 + 848);
      if (v17 == v18)
      {
LABEL_20:
        if (v8 >= *(unsigned int *)(v2 + 852))
          goto LABEL_63;
LABEL_24:
        v16 = *(unsigned int *)(v2 + 720);
LABEL_25:
        *(_DWORD *)(v2 + 848) = v8 + 1;
        goto LABEL_26;
      }
    }
    else if (v17 == v18)
    {
      goto LABEL_20;
    }
    bzero((void *)(*v10 + 8 * v18), i - 8 * v18);
    if (v8 >= *(unsigned int *)(v2 + 852))
      goto LABEL_63;
    goto LABEL_24;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::placement::TensorToMemref,mlir::Operation *,llvm::CastInfo<mlir::placement::TensorToMemref,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t AttrData;
  uint64_t v4;
  const char *v8;
  __int16 v9;
  uint64_t v10[4];
  __int16 v11;
  _QWORD v12[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v12[0] = *(_QWORD *)(v1 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v12);
    if (v4 == 26
      && *(_QWORD *)AttrData == 0x6E656D6563616C70
      && *(_QWORD *)(AttrData + 8) == 0x726F736E65742E74
      && *(_QWORD *)(AttrData + 16) == 0x726D656D5F6F745FLL
      && *(_WORD *)(AttrData + 24) == 26213)
    {
      v11 = 1283;
      v10[0] = (uint64_t)"classof on '";
      v10[2] = (uint64_t)"placement.tensor_to_memref";
      v10[3] = 26;
      v8 = "' failed due to the operation not being registered";
      v9 = 259;
      llvm::operator+(v10, (uint64_t *)&v8, (uint64_t)v12);
      llvm::report_fatal_error((llvm::Twine *)v12, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
  {
    return 0;
  }
  return result;
}

_QWORD *FullyPlacedOnANEMPSRuntime::FullyPlacedOnANEMPSRuntime(_QWORD *a1, void *a2, void *a3, void *a4, void *a5, _BYTE *a6, int a7)
{
  uint64_t v8;

  v8 = MPSRuntime::MPSRuntime((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  *(_QWORD *)v8 = &off_1E0E13B68;
  *(_QWORD *)(v8 + 648) = v8 + 664;
  *(_QWORD *)(v8 + 656) = 0x600000000;
  *(_QWORD *)(v8 + 712) = v8 + 728;
  *(_QWORD *)(v8 + 720) = 0x600000000;
  *(_QWORD *)(v8 + 776) = v8 + 792;
  *(_QWORD *)(v8 + 784) = 0x600000000;
  *(_QWORD *)(v8 + 840) = v8 + 856;
  *(_QWORD *)(v8 + 848) = 0x600000000;
  *(_QWORD *)(v8 + 904) = 0;
  if (*(_BYTE *)(v8 + 216))
    FullyPlacedOnANEMPSRuntime::initializeForExecution(a1);
  return a1;
}

void sub_180DED918(_Unwind_Exception *a1)
{
  GPURegionRuntime *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = v2;
  v8 = (void *)*((_QWORD *)v1 + 105);
  if (v8 == v6)
  {
    v9 = (void *)*((_QWORD *)v1 + 97);
    if (v9 == v5)
      goto LABEL_3;
  }
  else
  {
    free(v8);
    v9 = (void *)*((_QWORD *)v1 + 97);
    if (v9 == v5)
    {
LABEL_3:
      v10 = (void *)*((_QWORD *)v1 + 89);
      if (v10 == v4)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  free(v9);
  v10 = (void *)*((_QWORD *)v1 + 89);
  if (v10 == v4)
  {
LABEL_4:
    v11 = (void *)*((_QWORD *)v1 + 81);
    if (v11 == v3)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  free(v10);
  v11 = (void *)*((_QWORD *)v1 + 81);
  if (v11 == v3)
  {
LABEL_5:
    GPURegionRuntime::~GPURegionRuntime(v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  free(v11);
  GPURegionRuntime::~GPURegionRuntime(v1);
  _Unwind_Resume(a1);
}

uint64_t MPSRuntime::MPSRuntime(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _BYTE *a6, int a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t FuncOpInModule;
  uint64_t v18;
  uint64_t InterfaceFor;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t DefiningOp;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t NextResultAtOffset;
  _QWORD *v30;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  FuncOpInModule = getFuncOpInModule((uint64_t)a6);
  v18 = FuncOpInModule;
  if (FuncOpInModule)
  {
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(FuncOpInModule);
    if (!InterfaceFor)
      __assert_rtn("Interface", "InterfaceSupport.h", 110, "(!t || conceptImpl) && \"expected value to provide interface instance\"");
  }
  else
  {
    InterfaceFor = 0;
  }
  GPURegionRuntime::GPURegionRuntime(a1, v13, v14, v15, v16, a6, v18, InterfaceFor, a7, 1);
  v32 = v14;
  v33 = v13;
  *(_QWORD *)a1 = &off_1E0E12FB0;
  if (*(_BYTE *)(a1 + 216))
  {
    v20 = *(_QWORD *)(a1 + 248);
    if ((*(_BYTE *)(v20 + 46) & 0x80) != 0)
    {
      v21 = *(unsigned int *)(v20 + 68);
      if ((_DWORD)v21)
      {
        v22 = 0;
        v23 = *(_QWORD *)(v20 + 72);
        do
        {
          v24 = *(_QWORD *)(v23 + 32 * v22 + 24);
          v34 = 0;
          v35 = v24;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v35);
          v34 = DefiningOp;
          if (DefiningOp)
          {
            v26 = *(unsigned int *)(DefiningOp + 36);
            if ((_DWORD)v26)
              v27 = DefiningOp - 16;
            else
              v27 = 0;
            v28 = 0;
            if ((_DWORD)v26)
            {
              while (1)
              {
                NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, v28);
                if (NextResultAtOffset == v35)
                  break;
                if (v26 == ++v28)
                {
                  v28 = v26;
                  break;
                }
              }
            }
            v30 = std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::find<mlir::Operation *>((_QWORD *)(a1 + 264), &v34);
            if (!v30)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v30[3] + 56))(v30[3], v28);
          }
          ++v22;
        }
        while (v22 != v21);
      }
    }
  }

  return a1;
}

void sub_180DEDB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  GPURegionRuntime *v13;
  void *v14;

  GPURegionRuntime::~GPURegionRuntime(v13);

  _Unwind_Resume(a1);
}

void sub_180DEDBBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t GPURegionRuntime::GPURegionRuntime(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _BYTE *a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  mlir::GenericProgramPoint **v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t InherentAttr;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  int v39;
  void *v40;
  GPU::RuntimeExecutionReport *v41;
  ModuleOp v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  GPURegionRuntime::ParallelTIAndFoldHelper *v49;
  const char *v50;
  int v51;
  const char *v52;
  const char *v53;
  mlir::MLIRContext *Context;
  void *v55;
  char v56;
  char **v57;
  char *v58;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  BaseRuntime::BaseRuntime(a1);
  *(_QWORD *)a1 = &off_1E0E029F0;
  *(_DWORD *)(a1 + 220) = a9;
  *(_QWORD *)(a1 + 232) = a7;
  *(_QWORD *)(a1 + 240) = a8;
  *(_BYTE *)(a1 + 256) = a10;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  v21 = (uint64_t *)(a1 + 424);
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x1000000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 632) = 1065353216;
  v55 = v19;
  if (!a7)
  {
LABEL_28:
    *(_BYTE *)(a1 + 216) = 0;
    goto LABEL_41;
  }
  v22 = *(unsigned int *)(a7 + 44);
  if ((v22 & 0x7FFFFF) == 0)
  {
    v50 = "index < numRegions && \"invalid region index\"";
    v51 = 666;
    v52 = "Operation.h";
    v53 = "getRegion";
    goto LABEL_46;
  }
  v23 = a7 + 16 * ((v22 >> 23) & 1) + ((v22 >> 21) & 0x7F8) + 64;
  if (v23 >= 0xFFFFFFFFFFFFFFF9)
  {
    v50 = "static_cast<uintptr_t>(ArithAddr + Alignment.value() - 1) >= ArithAddr && \"Overflow\"";
    v51 = 191;
    v52 = "Alignment.h";
    v53 = "alignAddr";
LABEL_46:
    __assert_rtn(v53, v52, v51, v50);
  }
  v24 = *(_QWORD *)(((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a7 + 40) + 8);
  if (v24)
    v25 = (mlir::GenericProgramPoint **)(v24 - 8);
  else
    v25 = 0;
  mlir::Block::getTerminator(v25);
  *(_QWORD *)(a1 + 248) = v26;
  if (!v26)
    goto LABEL_28;
  v27 = atomic_load(&GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::evOnceFlag);
  if (v27 != -1)
  {
    v58 = &v56;
    v57 = &v58;
    std::__call_once(&GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::evOnceFlag, &v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::{lambda(void)#1} &&>>);
  }
  v28 = *(_DWORD *)(a1 + 220);
  if ((v28 & 0x400) != 0)
  {
    v29 = operator new();
    mlir::ShapeEquivalence::ShapeEquivalence(v29, *(mlir::ForwardIterator **)(a1 + 232));
    std::unique_ptr<mlir::ShapeEquivalence>::reset[abi:ne180100]((uint64_t *)(a1 + 440), v29);
  }
  if ((v28 & 0x20) != 0
    && GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::evEnableParallelTI)
  {
    if (!a6[47]
      || (InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a6, (uint64_t)"mpsx.hasParallelEncoding", 24), !v31))
    {
      InherentAttr = mlir::DictionaryAttr::get((uint64_t)(a6 + 56), "mpsx.hasParallelEncoding", 0x18uLL);
    }
    if (InherentAttr)
    {
      if (!*(_QWORD *)InherentAttr)
        goto LABEL_47;
      if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a6 + 24));
        v49 = (GPURegionRuntime::ParallelTIAndFoldHelper *)operator new();
        GPURegionRuntime::ParallelTIAndFoldHelper::ParallelTIAndFoldHelper(v49, (GPURegionRuntime *)a1, Context);
        v34 = *(_QWORD *)(a1 + 448);
        *(_QWORD *)(a1 + 448) = v49;
        if (!v34)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
  }
  v32 = mlir::Attribute::getContext((mlir::Attribute *)(a6 + 24));
  v33 = operator new();
  *(_QWORD *)v33 = off_1E0E04BC8;
  *(_QWORD *)(v33 + 8) = a1;
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  *(_DWORD *)(v33 + 56) = 0;
  *(_QWORD *)(v33 + 64) = v33 + 80;
  *(_QWORD *)(v33 + 72) = 0x600000000;
  *(_QWORD *)(v33 + 128) = 0;
  *(_QWORD *)(v33 + 136) = v32;
  *(_QWORD *)(v33 + 144) = 0;
  *(_QWORD *)(v33 + 152) = 0;
  *(_QWORD *)(v33 + 160) = 0;
  *(_QWORD *)(v33 + 168) = v33 + 184;
  *(_QWORD *)(v33 + 176) = 0x400000000;
  *(_QWORD *)(v33 + 224) = v33 + 240;
  *(_QWORD *)(v33 + 232) = 0x400000000;
  v34 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v33;
  if (v34)
LABEL_21:
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
LABEL_22:
  v35 = *(_QWORD *)(a1 + 232);
  if (!*(_BYTE *)(v35 + 47)
    || (v36 = mlir::Operation::getInherentAttr(*(_QWORD *)(a1 + 232), (uint64_t)"mps.disablePreAllocate", 22), !v37))
  {
    v36 = mlir::DictionaryAttr::get(v35 + 56, "mps.disablePreAllocate", 0x16uLL);
  }
  if (v36)
  {
    if (*(_QWORD *)v36)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id;
      goto LABEL_30;
    }
LABEL_47:
    __assert_rtn("getAbstractAttribute", "AttributeSupport.h", 165, "abstractAttribute && \"Malformed attribute storage object.\"");
  }
  v38 = 0;
LABEL_30:
  *(_BYTE *)(a1 + 640) = !v38;
  (**(void (***)(uint64_t))a1)(a1);
  if (*(_BYTE *)(a1 + 216))
  {
    if ((v28 & 0x20) != 0)
      GPURegionRuntime::TIAndFoldHelper::init(*(GPURegionRuntime::TIAndFoldHelper **)(a1 + 448));
    v39 = *(_DWORD *)(a1 + 220);
    if ((v39 & 1) != 0)
    {
      objc_msgSend(v17, "metalDevice");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      MPSSetDeviceOptionsSPI();

      v39 = *(_DWORD *)(a1 + 220);
    }
    if ((v39 & 4) != 0)
    {
      v41 = (GPU::RuntimeExecutionReport *)operator new();
      v42.state = (Operation *)a6;
      GPU::RuntimeExecutionReport::RuntimeExecutionReport(v41, v42);
      v43 = *v21;
      *v21 = (uint64_t)v41;
      if (v43)
        std::default_delete<GPU::RuntimeExecutionReport>::operator()[abi:ne180100](a1 + 424, v43);
    }
    *(_BYTE *)(a1 + 224) = 1;
    v44 = objc_alloc(MEMORY[0x1E0CC7030]);
    objc_msgSend(v17, "metalDevice");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v44, "initWithDevice:", v45);
    v47 = *(void **)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v46;

    if (GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::once != -1)
      dispatch_once(&GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::once, &__block_literal_global);
    *(_BYTE *)(a1 + 224) = GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::_intermediatesAreTemporaryEV;
  }
LABEL_41:

  return a1;
}

void sub_180DEE104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t *a11, void *a12, void *a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x186DA1680](v14, 0x10A1C407E596F31);
  std::unordered_set<mlir::Operation *>::~unordered_set[abi:ne180100](v20);
  v22 = *(void **)(v15 + 456);
  if (v22 != a10)
    free(v22);
  v23 = *(_QWORD *)(v15 + 448);
  *(_QWORD *)(v15 + 448) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::unique_ptr<mlir::ShapeEquivalence>::reset[abi:ne180100](a11, 0);

  v24 = *(_QWORD *)(v15 + 424);
  *(_QWORD *)(v15 + 424) = 0;
  if (v24)
    std::default_delete<GPU::RuntimeExecutionReport>::operator()[abi:ne180100](v19, v24);
  std::unordered_map<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>::~unordered_map[abi:ne180100](v15 + 384);
  std::unordered_map<mlir::Operation *,std::unordered_map<void *,mlir::ElementsAttr>>::~unordered_map[abi:ne180100](v18);
  std::unordered_map<mlir::Operation *,std::unordered_map<void *,mlir::ElementsAttr>>::~unordered_map[abi:ne180100](v15 + 304);
  std::unordered_map<mlir::Operation *,std::unique_ptr<GPU::BaseOpHandler>>::~unordered_map[abi:ne180100](v17);
  BaseRuntime::~BaseRuntime((BaseRuntime *)v15);

  _Unwind_Resume(a1);
}

void MPSRuntime::~MPSRuntime(MPSRuntime *this)
{
  GPURegionRuntime::~GPURegionRuntime(this);
  JUMPOUT(0x186DA1680);
}

uint64_t BaseRuntime::BaseRuntime(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t i;
  id v22;
  void *v23;
  id v24;
  std::string __str;
  int v26;
  char v27[24];
  int v28;
  char v29[24];
  int v30;
  char v31[24];
  int v32;
  char v33[24];
  int v34;
  char v35[24];
  int v36;
  char v37[24];
  int v38;
  char v39[24];
  int v40;
  char v41[24];
  int v42;
  char v43[23];
  char v44[9];
  char v45[24];
  int v46;
  char v47[24];
  int v48;
  char v49[24];
  int v50;
  char v51[24];
  int v52;
  char v53[24];
  int v54;
  char v55[24];
  int v56;
  char v57[24];
  int v58;
  char v59[24];
  int v60;
  char v61[24];
  int v62;
  char v63[24];
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  char v69[24];
  int v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  char v75[24];
  int v76;
  char v77[24];
  int v78;
  char v79[24];
  int v80;
  char v81[24];
  int v82;
  char v83[24];
  int v84;
  char v85[24];
  int v86;
  char v87[24];
  int v88;
  char v89[24];
  int v90;
  char v91[24];
  int v92;
  char v93[24];
  int v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  char v103[24];
  int v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  char v113[24];
  int v114;
  char v115[24];
  int v116;
  char v117[24];
  int v118;
  char v119[24];
  int v120;
  char v121[24];
  int v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  char v127[24];
  int v128;
  char v129[24];
  int v130;
  char v131[24];
  int v132;
  char v133[24];
  int v134;
  char v135[24];
  int v136;
  char v137[24];
  int v138;
  char v139[24];
  int v140;
  char v141[24];
  int v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  char v151[24];
  int v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  char v161[24];
  int v162;
  char v163[24];
  int v164;
  char v165[24];
  int v166;
  char v167[23];
  char v168[9];
  char v169[24];
  int v170;
  char v171[24];
  int v172;
  char v173[23];
  char v174[9];
  char v175[24];
  int v176;
  char v177[24];
  int v178;
  char v179[24];
  int v180;
  char v181[24];
  int v182;
  char v183[24];
  int v184;
  char v185[24];
  int v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  char v203[24];
  int v204;
  char v205[23];
  char v206[9];
  char v207[24];
  int v208;
  char v209[24];
  int v210;
  char v211[23];
  char v212[9];
  char v213[24];
  int v214;
  char v215[24];
  int v216;
  char v217[24];
  int v218;
  char v219[24];
  int v220;
  char v221[24];
  int v222;
  char v223[24];
  int v224;
  char v225[24];
  int v226;
  char v227[24];
  int v228;
  char v229[24];
  int v230;
  _DWORD v231[5];
  char v232;
  int v233;
  char v234[24];
  int v235;
  char v236[24];
  int v237;
  char v238[24];
  int v239;
  char v240[24];
  int v241;
  char v242[23];
  char v243[9];
  char v244[24];
  int v245;
  char v246[24];
  int v247;
  char v248[24];
  int v249;
  char v250[24];
  int v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  int v259;
  char v260[24];
  int v261;
  char v262[24];
  int v263;
  char v264[24];
  int v265;
  char v266[24];
  int v267;
  char v268[24];
  int v269;
  char v270[24];
  int v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  char v276[23];
  char v277[9];
  char *v278;
  uint64_t v279;
  unint64_t v280;
  int v281;
  char v282[24];
  int v283;
  char v284[24];
  int v285;
  char v286[24];
  int v287;
  char *v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  char v292[24];
  int v293;
  char v294[23];
  char v295[9];
  char v296[24];
  int v297;
  char v298[24];
  int v299;
  char v300[24];
  int v301;
  char v302[24];
  int v303;
  char v304[24];
  int v305;
  char v306[24];
  int v307;
  char v308[24];
  int v309;
  char v310[24];
  int v311;
  _DWORD v312[5];
  char v313;
  int v314;
  char v315[24];
  int v316;
  char v317[24];
  int v318;
  char v319[24];
  int v320;
  char v321[24];
  int v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  int v326;
  char v327[24];
  int v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  int v332;
  char v333[24];
  int v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  int v342;
  char v343[24];
  int v344;
  char v345[24];
  int v346;
  char v347[24];
  int v348;
  char v349[24];
  int v350;
  char v351[24];
  int v352;
  char v353[24];
  int v354;
  char *v355;
  uint64_t v356;
  unint64_t v357;
  int v358;
  char v359[24];
  int v360;
  char v361[24];
  int v362;
  char v363[24];
  int v364;
  char v365[24];
  int v366;
  char v367[24];
  int v368;
  char v369[24];
  int v370;
  char v371[24];
  int v372;
  char v373[24];
  int v374;
  char v375[24];
  int v376;
  char v377[24];
  int v378;
  char v379[24];
  int v380;
  char v381[24];
  int v382;
  char v383[24];
  int v384;
  char v385[24];
  int v386;
  char v387[24];
  int v388;
  char v389[24];
  int v390;
  char v391[24];
  int v392;
  char v393[24];
  int v394;
  char v395[24];
  int v396;
  char v397[24];
  int v398;
  char v399[24];
  int v400;
  char v401[24];
  int v402;
  char v403[24];
  int v404;
  char v405[24];
  int v406;
  char v407[24];
  int v408;
  char v409[24];
  int v410;
  char *v411;
  uint64_t v412;
  unint64_t v413;
  int v414;
  char v415[24];
  int v416;
  char v417[24];
  int v418;
  char v419[24];
  int v420;
  char v421[24];
  int v422;
  char *v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  char v427[24];
  int v428;
  char v429[24];
  int v430;
  char v431[24];
  int v432;
  char v433[24];
  int v434;
  char v435[24];
  int v436;
  char v437[24];
  int v438;
  char v439[24];
  int v440;
  char v441[24];
  int v442;
  char v443[24];
  int v444;
  char v445[24];
  int v446;
  char *v447;
  uint64_t v448;
  unint64_t v449;
  int v450;
  char v451[24];
  int v452;
  char v453[24];
  int v454;
  char v455[24];
  int v456;
  char v457[24];
  int v458;
  char v459[24];
  int v460;
  char v461[24];
  int v462;
  char v463[24];
  int v464;
  char v465[24];
  int v466;
  char *v467;
  uint64_t v468;
  unint64_t v469;
  int v470;
  char v471[24];
  int v472;
  char v473[24];
  int v474;
  char v475[24];
  int v476;
  char v477[24];
  int v478;
  char v479[24];
  int v480;
  char v481[24];
  int v482;
  char v483[24];
  int v484;
  char *v485;
  uint64_t v486;
  unint64_t v487;
  int v488;
  char *v489;
  uint64_t v490;
  unint64_t v491;
  int v492;
  char v493[24];
  int v494;
  char v495[24];
  int v496;
  char v497[24];
  int v498;
  char v499[24];
  int v500;
  char v501[24];
  int v502;
  char v503[24];
  int v504;
  char v505[24];
  int v506;
  char v507[24];
  int v508;
  char *v509;
  uint64_t v510;
  unint64_t v511;
  int v512;
  char v513[24];
  int v514;
  char v515[24];
  int v516;
  char v517[24];
  int v518;
  char v519[24];
  int v520;
  char v521[24];
  int v522;
  char v523[24];
  int v524;
  char *v525;
  uint64_t v526;
  unint64_t v527;
  int v528;
  char v529[24];
  int v530;
  char *v531;
  uint64_t v532;
  unint64_t v533;
  int v534;
  char v535[24];
  int v536;
  char v537[24];
  int v538;
  char v539[24];
  int v540;
  char v541[24];
  int v542;
  char v543[24];
  int v544;
  std::string v545;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v545.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  v12 = v11;
  v13 = v7;
  v14 = v5;
  *(_QWORD *)v10 = &unk_1E0E13018;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_DWORD *)(v10 + 40) = 1065353216;
  v22 = v12;
  *(_QWORD *)(v10 + 48) = v22;
  objc_initWeak((id *)(v10 + 56), v9);
  *(_QWORD *)(v10 + 64) = v3;
  v23 = v13;
  objc_initWeak((id *)(v10 + 72), v13);
  v15 = v14;
  *(_QWORD *)(v10 + 144) = 850045863;
  v24 = v15;
  *(_QWORD *)(v10 + 80) = v15;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_DWORD *)(v10 + 120) = 1065353216;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_BYTE *)(v10 + 216) = 1;
  v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v17 = *(void **)(v10 + 128);
  *(_QWORD *)(v10 + 128) = v16;

  v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v19 = *(void **)(v10 + 136);
  *(_QWORD *)(v10 + 136) = v18;

  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__str, "mps.absolute");
  v26 = 1;
  v27[23] = 19;
  strcpy(v27, "mps.absolute_square");
  v28 = 2;
  v29[23] = 8;
  strcpy(v29, "mps.acos");
  v30 = 3;
  v31[23] = 9;
  strcpy(v31, "mps.acosh");
  v33[23] = 7;
  v32 = 4;
  strcpy(v33, "mps.add");
  v35[23] = 7;
  v34 = 5;
  strcpy(v35, "mps.and");
  v36 = 6;
  v37[23] = 8;
  strcpy(v37, "mps.asin");
  v38 = 7;
  v39[23] = 9;
  strcpy(v39, "mps.asinh");
  v40 = 8;
  v41[23] = 8;
  strcpy(v41, "mps.atan");
  v42 = 9;
  strcpy(v44, "\t\n");
  strcpy(v43, "mps.atan2");
  *(_WORD *)&v44[3] = 0;
  v45[23] = 9;
  strcpy(v45, "mps.atanh");
  v46 = 11;
  v47[23] = 19;
  strcpy(v47, "mps.assign_variable");
  v48 = 12;
  v49[23] = 13;
  strcpy(v49, "mps.band_part");
  v50 = 13;
  v51[23] = 18;
  strcpy(v51, "mps.batch_to_space");
  v52 = 14;
  v53[23] = 12;
  strcpy(v53, "mps.bias_add");
  v54 = 15;
  v55[23] = 15;
  strcpy(v55, "mps.bitwise_and");
  v56 = 16;
  v57[23] = 22;
  strcpy(v57, "mps.bitwise_left_shift");
  v58 = 17;
  v59[23] = 15;
  strcpy(v59, "mps.bitwise_not");
  v60 = 18;
  v61[23] = 14;
  strcpy(v61, "mps.bitwise_or");
  v62 = 19;
  v63[23] = 20;
  strcpy(v63, "mps.bitwise_popcount");
  v64 = 20;
  v65 = (char *)operator new(0x19uLL);
  v67 = 0x8000000000000019;
  v66 = 23;
  strcpy(v65, "mps.bitwise_right_shift");
  v68 = 21;
  v69[23] = 15;
  strcpy(v69, "mps.bitwise_xor");
  v70 = 22;
  v71 = (char *)operator new(0x20uLL);
  v73 = 0x8000000000000020;
  v72 = 27;
  strcpy(v71, "mps.broadcast_gradient_args");
  v74 = 23;
  v75[23] = 16;
  strcpy(v75, "mps.broadcast_to");
  v76 = 24;
  v77[23] = 8;
  strcpy(v77, "mps.call");
  v78 = 25;
  v79[23] = 8;
  strcpy(v79, "mps.cast");
  v80 = 26;
  v81[23] = 8;
  strcpy(v81, "mps.ceil");
  v82 = 27;
  v83[23] = 9;
  strcpy(v83, "mps.clamp");
  v84 = 28;
  v85[23] = 13;
  strcpy(v85, "mps.col_to_im");
  v86 = 29;
  v87[23] = 10;
  strcpy(v87, "mps.concat");
  v88 = 30;
  v89[23] = 13;
  strcpy(v89, "scf.condition");
  v90 = 31;
  v91[23] = 13;
  strcpy(v91, "mps.conjugate");
  v92 = 32;
  v93[23] = 11;
  strcpy(v93, "mps.conv_2d");
  v94 = 33;
  v95 = (char *)operator new(0x20uLL);
  v97 = 0x8000000000000020;
  v96 = 25;
  strcpy(v95, "mps.conv_2d_data_gradient");
  v98 = 34;
  v99 = (char *)operator new(0x20uLL);
  v101 = 0x8000000000000020;
  v100 = 28;
  strcpy(v99, "mps.conv_2d_weights_gradient");
  v102 = 35;
  v103[23] = 11;
  strcpy(v103, "mps.conv_3d");
  v104 = 36;
  v105 = (char *)operator new(0x20uLL);
  v107 = 0x8000000000000020;
  v106 = 25;
  strcpy(v105, "mps.conv_3d_data_gradient");
  v108 = 37;
  v109 = (char *)operator new(0x20uLL);
  v111 = 0x8000000000000020;
  v110 = 28;
  strcpy(v109, "mps.conv_3d_weights_gradient");
  v112 = 38;
  v113[23] = 12;
  strcpy(v113, "mps.constant");
  v114 = 39;
  v115[23] = 7;
  strcpy(v115, "mps.cos");
  v116 = 40;
  v117[23] = 8;
  strcpy(v117, "mps.cosh");
  v118 = 41;
  v119[23] = 15;
  strcpy(v119, "mps.cost_volume");
  v120 = 42;
  v121[23] = 18;
  strcpy(v121, "mps.create_complex");
  v122 = 43;
  v123 = (char *)operator new(0x20uLL);
  v125 = 0x8000000000000020;
  v124 = 25;
  strcpy(v123, "mps.create_texture_tensor");
  v126 = 44;
  v127[23] = 8;
  strcpy(v127, "mps.crop");
  v128 = 45;
  v129[23] = 15;
  strcpy(v129, "mps.crop_resize");
  v130 = 46;
  v131[23] = 18;
  strcpy(v131, "mps.cumulative_sum");
  v132 = 47;
  strcpy(v133, "mps.cumulative_product");
  v133[23] = 22;
  v134 = 48;
  v135[23] = 22;
  strcpy(v135, "mps.cumulative_maximum");
  v136 = 49;
  strcpy(v137, "mps.cumulative_minimum");
  v137[23] = 22;
  v138 = 50;
  v139[23] = 21;
  strcpy(v139, "mps.depth_to_space_2d");
  v140 = 51;
  v141[23] = 21;
  strcpy(v141, "mps.depthwise_conv_2d");
  v142 = 52;
  v143 = (char *)operator new(0x28uLL);
  v145 = 0x8000000000000028;
  v144 = 35;
  strcpy(v143, "mps.depthwise_conv_2d_data_gradient");
  v146 = 53;
  v147 = (char *)operator new(0x28uLL);
  v149 = 0x8000000000000028;
  v148 = 38;
  strcpy(v147, "mps.depthwise_conv_2d_weights_gradient");
  v150 = 54;
  v151[23] = 21;
  strcpy(v151, "mps.depthwise_conv_3d");
  v152 = 55;
  v153 = (char *)operator new(0x28uLL);
  v155 = 0x8000000000000028;
  v154 = 35;
  strcpy(v153, "mps.depthwise_conv_3d_data_gradient");
  v156 = 56;
  v157 = (char *)operator new(0x28uLL);
  v159 = 0x8000000000000028;
  v158 = 38;
  strcpy(v157, "mps.depthwise_conv_3d_weights_gradient");
  v160 = 57;
  v161[23] = 18;
  strcpy(v161, "mps.dequantize_lut");
  v162 = 58;
  v163[23] = 14;
  strcpy(v163, "mps.dequantize");
  v164 = 59;
  v165[23] = 18;
  strcpy(v165, "mps.dimension_size");
  v166 = 60;
  strcpy(v168, "\n=");
  strcpy(v167, "mps.divide");
  *(_WORD *)&v168[3] = 0;
  v169[23] = 22;
  strcpy(v169, "mps.dynamic_shape_cast");
  v170 = 62;
  v171[23] = 7;
  strcpy(v171, "mps.elu");
  v172 = 63;
  strcpy(v174, "\t@");
  strcpy(v173, "mps.equal");
  *(_WORD *)&v174[3] = 0;
  v175[23] = 7;
  strcpy(v175, "mps.erf");
  v176 = 65;
  v177[23] = 15;
  strcpy(v177, "mps.expand_dims");
  v178 = 66;
  v179[23] = 12;
  strcpy(v179, "mps.exponent");
  v180 = 67;
  v181[23] = 19;
  strcpy(v181, "mps.exponent_base_2");
  v182 = 68;
  v183[23] = 20;
  strcpy(v183, "mps.exponent_base_10");
  v184 = 69;
  v185[23] = 14;
  strcpy(v185, "tensor.extract");
  v186 = 70;
  v187 = (char *)operator new(0x20uLL);
  v189 = 0x8000000000000020;
  v188 = 26;
  strcpy(v187, "mps.fast_fourier_transform");
  v190 = 71;
  v191 = (char *)operator new(0x20uLL);
  v193 = 0x8000000000000020;
  v192 = 25;
  strcpy(v191, "mps.real_to_hermitean_fft");
  v194 = 72;
  v195 = (char *)operator new(0x20uLL);
  v197 = 0x8000000000000020;
  v196 = 25;
  strcpy(v195, "mps.hermitean_to_real_fft");
  v198 = 73;
  v199 = (char *)operator new(0x20uLL);
  v201 = 0x8000000000000020;
  v200 = 25;
  strcpy(v199, "mpsx.file_backed_constant");
  v202 = 74;
  v203[23] = 14;
  strcpy(v203, "mps.flatten_2d");
  v204 = 75;
  strcpy(v206, "\tL");
  strcpy(v205, "mps.floor");
  *(_WORD *)&v206[3] = 0;
  v207[23] = 7;
  strcpy(v207, "scf.for");
  v208 = 77;
  strcpy(v209, "mpsx.fp_to_int_clamped");
  v209[23] = 22;
  v210 = 78;
  strcpy(v212, "\nO");
  strcpy(v211, "mps.gather");
  *(_WORD *)&v212[3] = 0;
  v213[23] = 21;
  strcpy(v213, "mps.gather_along_axis");
  v214 = 80;
  v215[23] = 13;
  strcpy(v215, "mps.gather_nd");
  v216 = 81;
  v217[23] = 19;
  strcpy(v217, "mps.get_coordinates");
  v218 = 82;
  v219[23] = 11;
  strcpy(v219, "mps.greater");
  v220 = 83;
  v221[23] = 17;
  strcpy(v221, "mps.greater_equal");
  v222 = 84;
  v223[23] = 7;
  strcpy(v223, "mps.gru");
  v224 = 85;
  v225[23] = 16;
  strcpy(v225, "mps.gru_gradient");
  v226 = 86;
  v227[23] = 20;
  strcpy(v227, "mps.hamming_distance");
  v228 = 87;
  v229[23] = 12;
  strcpy(v229, "mps.identity");
  v230 = 88;
  v232 = 6;
  strcpy((char *)v231, "scf.if");
  v233 = 89;
  v234[23] = 13;
  strcpy(v234, "mps.im_to_col");
  v235 = 90;
  v236[23] = 18;
  strcpy(v236, "mps.imaginary_part");
  v237 = 91;
  v238[23] = 13;
  strcpy(v238, "mps.is_finite");
  v239 = 92;
  v240[23] = 15;
  strcpy(v240, "mps.is_infinite");
  v241 = 93;
  strcpy(v243, "\n^");
  strcpy(v242, "mps.is_nan");
  *(_WORD *)&v243[3] = 0;
  v244[23] = 14;
  strcpy(v244, "mps.leaky_relu");
  v245 = 95;
  v246[23] = 8;
  strcpy(v246, "mps.less");
  v247 = 96;
  v248[23] = 14;
  strcpy(v248, "mps.less_equal");
  v249 = 97;
  v250[23] = 21;
  strcpy(v250, "mps.local_convolution");
  v251 = 98;
  v252 = (char *)operator new(0x28uLL);
  v254 = 0x8000000000000028;
  v253 = 35;
  strcpy(v252, "mps.local_convolution_data_gradient");
  v255 = 99;
  v256 = (char *)operator new(0x28uLL);
  v258 = 0x8000000000000028;
  v257 = 37;
  strcpy(v256, "mps.local_convolution_weight_gradient");
  v259 = 100;
  v260[23] = 13;
  strcpy(v260, "mps.logarithm");
  v261 = 101;
  v262[23] = 20;
  strcpy(v262, "mps.logarithm_base_2");
  v263 = 102;
  v264[23] = 21;
  strcpy(v264, "mps.logarithm_base_10");
  v265 = 103;
  v266[23] = 8;
  strcpy(v266, "mps.lstm");
  v267 = 104;
  v268[23] = 17;
  strcpy(v268, "mps.lstm_gradient");
  v269 = 105;
  v270[23] = 14;
  strcpy(v270, "mpsx.make_list");
  v271 = 106;
  v272 = (char *)operator new(0x20uLL);
  v274 = 0x8000000000000020;
  v273 = 29;
  strcpy(v272, "mps.materialize_sparse_tensor");
  v275 = 107;
  strcpy(v277, "\nl");
  strcpy(v276, "mps.matmul");
  *(_WORD *)&v277[3] = 0;
  v278 = (char *)operator new(0x20uLL);
  v280 = 0x8000000000000020;
  v279 = 27;
  strcpy(v278, "mps.matrix_decomposition_lu");
  v281 = 109;
  v282[23] = 18;
  strcpy(v282, "mps.matrix_inverse");
  v283 = 110;
  v284[23] = 20;
  strcpy(v284, "mps.matrix_solver_lu");
  v285 = 111;
  v286[23] = 11;
  strcpy(v286, "mps.maximum");
  v287 = 112;
  v288 = (char *)operator new(0x20uLL);
  v290 = 0x8000000000000020;
  v289 = 26;
  strcpy(v288, "placement.memref_to_tensor");
  v291 = 113;
  v292[23] = 11;
  strcpy(v292, "mps.minimum");
  v293 = 114;
  strcpy(v295, "\ns");
  strcpy(v294, "mps.modulo");
  *(_WORD *)&v295[3] = 0;
  v296[23] = 12;
  strcpy(v296, "mps.multiply");
  v297 = 116;
  v298[23] = 8;
  strcpy(v298, "mps.nand");
  v299 = 117;
  v300[23] = 12;
  strcpy(v300, "mps.negative");
  v301 = 118;
  v302[23] = 7;
  strcpy(v302, "mps.nor");
  v303 = 119;
  v304[23] = 17;
  strcpy(v304, "mps.normalization");
  v305 = 120;
  v306[23] = 7;
  strcpy(v306, "mps.not");
  v307 = 121;
  v308[23] = 13;
  strcpy(v308, "mps.not_equal");
  v309 = 122;
  v310[23] = 11;
  strcpy(v310, "mps.one_hot");
  v311 = 123;
  v313 = 6;
  strcpy((char *)v312, "mps.or");
  v314 = 124;
  v315[23] = 7;
  strcpy(v315, "mps.pad");
  v316 = 125;
  v317[23] = 16;
  strcpy(v317, "mps.pad_gradient");
  v318 = 126;
  v319[23] = 11;
  strcpy(v319, "mps.permute");
  v320 = 127;
  v321[23] = 19;
  strcpy(v321, "mps.pooling_average");
  v322 = 128;
  v323 = (char *)operator new(0x20uLL);
  v325 = 0x8000000000000020;
  v324 = 28;
  strcpy(v323, "mps.pooling_average_gradient");
  v326 = 129;
  v327[23] = 19;
  strcpy(v327, "mps.pooling_l2_norm");
  v328 = 130;
  v329 = (char *)operator new(0x20uLL);
  v331 = 0x8000000000000020;
  v330 = 28;
  strcpy(v329, "mps.pooling_l2_norm_gradient");
  v332 = 131;
  v333[23] = 15;
  strcpy(v333, "mps.pooling_max");
  v334 = 132;
  v335 = (char *)operator new(0x20uLL);
  v337 = 0x8000000000000020;
  v336 = 28;
  strcpy(v335, "mps.pooling_max_with_indices");
  v338 = 133;
  v339 = (char *)operator new(0x20uLL);
  v341 = 0x8000000000000020;
  v340 = 24;
  strcpy(v339, "mps.pooling_max_gradient");
  v342 = 134;
  v343[23] = 9;
  strcpy(v343, "mps.power");
  v344 = 135;
  v345[23] = 9;
  strcpy(v345, "mps.prune");
  v346 = 136;
  v347[23] = 18;
  strcpy(v347, "mps.prune_gradient");
  v348 = 137;
  v349[23] = 12;
  strcpy(v349, "mps.quantize");
  v350 = 138;
  v351[23] = 21;
  strcpy(v351, "mpsx.quantized_gather");
  v352 = 139;
  v353[23] = 18;
  strcpy(v353, "mps.random_uniform");
  v354 = 140;
  v355 = (char *)operator new(0x20uLL);
  v357 = 0x8000000000000020;
  v356 = 27;
  strcpy(v355, "mps.random_truncated_normal");
  v358 = 141;
  v359[23] = 17;
  strcpy(v359, "mps.random_normal");
  v360 = 142;
  v361[23] = 8;
  strcpy(v361, "mps.rank");
  v362 = 143;
  v363[23] = 17;
  strcpy(v363, "mps.read_variable");
  v364 = 144;
  v365[23] = 13;
  strcpy(v365, "mps.real_part");
  v366 = 145;
  v367[23] = 14;
  strcpy(v367, "mps.reciprocal");
  v368 = 146;
  v369[23] = 17;
  strcpy(v369, "mps.reduction_and");
  v370 = 147;
  v371[23] = 20;
  strcpy(v371, "mps.reduction_argmax");
  v372 = 148;
  v373[23] = 20;
  strcpy(v373, "mps.reduction_argmin");
  v374 = 149;
  v375[23] = 17;
  strcpy(v375, "mps.reduction_max");
  v376 = 150;
  v377[23] = 18;
  strcpy(v377, "mps.reduction_mean");
  v378 = 151;
  v379[23] = 17;
  strcpy(v379, "mps.reduction_min");
  v380 = 152;
  v381[23] = 16;
  strcpy(v381, "mps.reduction_or");
  v382 = 153;
  v383[23] = 18;
  strcpy(v383, "mps.reduction_prod");
  v384 = 154;
  v385[23] = 17;
  strcpy(v385, "mps.reduction_sum");
  v386 = 155;
  v387[23] = 22;
  strcpy(v387, "mps.reduction_variance");
  v388 = 156;
  v389[23] = 21;
  strcpy(v389, "placement.region_call");
  v390 = 157;
  v391[23] = 18;
  strcpy(v391, "mpsx.region_return");
  v392 = 158;
  v393[23] = 20;
  strcpy(v393, "mps.reinterpret_cast");
  v394 = 159;
  v395[23] = 8;
  strcpy(v395, "mps.relu");
  v396 = 160;
  v397[23] = 9;
  strcpy(v397, "mps.relu6");
  v398 = 161;
  v399[23] = 11;
  strcpy(v399, "mps.reshape");
  v400 = 162;
  v401[23] = 10;
  strcpy(v401, "mps.resize");
  v402 = 163;
  v403[23] = 19;
  strcpy(v403, "mps.resize_gradient");
  v404 = 164;
  v405[23] = 11;
  strcpy(v405, "func.return");
  v406 = 165;
  v407[23] = 20;
  strcpy(v407, "mpsx.stitched_return");
  v408 = 166;
  v409[23] = 11;
  strcpy(v409, "mps.reverse");
  v410 = 167;
  v411 = (char *)operator new(0x20uLL);
  v412 = 26;
  v413 = 0x8000000000000020;
  strcpy(v411, "mps.reciprocal_square_root");
  v414 = 168;
  v415[23] = 8;
  strcpy(v415, "mps.rint");
  v416 = 169;
  v417[23] = 13;
  strcpy(v417, "mpsx.rms_norm");
  v418 = 170;
  v419[23] = 9;
  strcpy(v419, "mps.round");
  v420 = 171;
  v421[23] = 15;
  strcpy(v421, "mps.sample_grid");
  v422 = 172;
  v423 = (char *)operator new(0x20uLL);
  v425 = 0x8000000000000020;
  v424 = 29;
  strcpy(v423, "mps.sample_grid_data_gradient");
  v426 = 173;
  v427[23] = 11;
  strcpy(v427, "mps.scatter");
  v428 = 174;
  v429[23] = 22;
  strcpy(v429, "mps.scatter_along_axis");
  v430 = 175;
  v431[23] = 14;
  strcpy(v431, "mps.scatter_nd");
  v432 = 176;
  v433[23] = 10;
  strcpy(v433, "mps.select");
  v434 = 177;
  v435[23] = 9;
  strcpy(v435, "mps.shape");
  v436 = 178;
  v437[23] = 11;
  strcpy(v437, "mps.sigmoid");
  v438 = 179;
  v439[23] = 8;
  strcpy(v439, "mps.sign");
  v440 = 180;
  v441[23] = 11;
  strcpy(v441, "mps.signbit");
  v442 = 181;
  v443[23] = 7;
  strcpy(v443, "mps.sin");
  v444 = 182;
  v445[23] = 18;
  strcpy(v445, "mps.singlegate_rnn");
  v446 = 183;
  v447 = (char *)operator new(0x20uLL);
  v449 = 0x8000000000000020;
  v448 = 27;
  strcpy(v447, "mps.singlegate_rnn_gradient");
  v450 = 184;
  v451[23] = 8;
  strcpy(v451, "mps.sinh");
  v452 = 185;
  v453[23] = 8;
  strcpy(v453, "mps.size");
  v454 = 186;
  v455[23] = 9;
  strcpy(v455, "mps.slice");
  v456 = 187;
  v457[23] = 11;
  strcpy(v457, "mps.softmax");
  v458 = 188;
  v459[23] = 8;
  strcpy(v459, "mps.sort");
  v460 = 189;
  v461[23] = 11;
  strcpy(v461, "mps.argsort");
  v462 = 190;
  v463[23] = 18;
  strcpy(v463, "mps.space_to_batch");
  v464 = 191;
  v465[23] = 21;
  strcpy(v465, "mps.space_to_depth_2d");
  v466 = 192;
  v467 = (char *)operator new(0x20uLL);
  v469 = 0x8000000000000020;
  v468 = 24;
  strcpy(v467, "mpsx.sparse_dense_matmul");
  v470 = 193;
  v471[23] = 9;
  strcpy(v471, "mps.split");
  v472 = 194;
  v473[23] = 10;
  strcpy(v473, "mps.square");
  v474 = 195;
  v475[23] = 15;
  strcpy(v475, "mps.square_root");
  v476 = 196;
  v477[23] = 11;
  strcpy(v477, "mps.squeeze");
  v478 = 197;
  v479[23] = 11;
  strcpy(v479, "mps.stencil");
  v480 = 198;
  v481[23] = 13;
  strcpy(v481, "mpsx.stitched");
  v482 = 199;
  v483[23] = 17;
  strcpy(v483, "mps.strided_slice");
  v484 = 200;
  v485 = (char *)operator new(0x20uLL);
  v487 = 0x8000000000000020;
  v486 = 26;
  strcpy(v485, "mps.strided_slice_gradient");
  v488 = 201;
  v489 = (char *)operator new(0x20uLL);
  v491 = 0x8000000000000020;
  v490 = 24;
  strcpy(v489, "mps.strided_slice_update");
  v492 = 202;
  v493[23] = 12;
  strcpy(v493, "mps.subtract");
  v494 = 203;
  v495[23] = 9;
  strcpy(v495, "mps.swish");
  v496 = 204;
  v497[23] = 7;
  strcpy(v497, "mps.tan");
  v498 = 205;
  v499[23] = 8;
  strcpy(v499, "mps.tanh");
  v500 = 206;
  v501[23] = 20;
  strcpy(v501, "tensor.from_elements");
  v502 = 207;
  v503[23] = 18;
  strcpy(v503, "mpsx.list_pop_back");
  v504 = 208;
  v505[23] = 19;
  strcpy(v505, "mpsx.list_push_back");
  v506 = 209;
  v507[23] = 9;
  strcpy(v507, "mpsx.sdpa");
  v508 = 210;
  v509 = (char *)operator new(0x20uLL);
  v511 = 0x8000000000000020;
  v510 = 26;
  strcpy(v509, "placement.tensor_to_memref");
  v512 = 211;
  v513[23] = 8;
  strcpy(v513, "mps.tile");
  v514 = 212;
  v515[23] = 17;
  strcpy(v515, "mps.tile_gradient");
  v516 = 213;
  v517[23] = 9;
  strcpy(v517, "mps.top_k");
  v518 = 214;
  v519[23] = 14;
  strcpy(v519, "mps.top_k_grad");
  v520 = 215;
  v521[23] = 13;
  strcpy(v521, "mps.transpose");
  v522 = 216;
  v523[23] = 19;
  strcpy(v523, "mps.type_constraint");
  v524 = 217;
  v525 = (char *)operator new(0x19uLL);
  v527 = 0x8000000000000019;
  v526 = 23;
  strcpy(v525, "mps.update_random_state");
  v528 = 218;
  v529[23] = 15;
  strcpy(v529, "mpsx.var_handle");
  v530 = 219;
  v531 = (char *)operator new(0x20uLL);
  v533 = 0x8000000000000020;
  v532 = 24;
  strcpy(v531, "mps.variable_from_tensor");
  v534 = 220;
  v535[23] = 9;
  strcpy(v535, "scf.while");
  v536 = 221;
  v537[23] = 7;
  strcpy(v537, "mps.xor");
  v538 = 222;
  v539[23] = 8;
  strcpy(v539, "mps.xnor");
  v540 = 223;
  v541[23] = 9;
  strcpy(v541, "scf.yield");
  v542 = 224;
  v543[23] = 21;
  strcpy(v543, "mpsx.quantized_matmul");
  v544 = 225;
  std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__assign_unique<std::pair<std::string const,MPSMLIROps> const*>((_QWORD *)(v10 + 8), &__str, &v545);
  for (i = 0; i != -7200; i -= 32)
  {
    if (v543[i + 23] < 0)
      operator delete(*(void **)&v543[i]);
  }

  return v10;
}

void sub_180DF0F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, std::mutex *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, id *a18, char a19)
{
  uint64_t v19;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;

  v21 = (char *)(v19 + 2639);
  v22 = -7200;
  v23 = (char *)(v19 + 2639);
  while (1)
  {
    v24 = *v23;
    v23 -= 32;
    if (v24 < 0)
      operator delete(*(void **)(v21 - 23));
    v21 = v23;
    v22 += 32;
    if (!v22)
    {

      std::mutex::~mutex(a12);
      std::unordered_map<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>::~unordered_map[abi:ne180100](a11);

      objc_destroyWeak(location);
      objc_destroyWeak(a9);

      std::unordered_map<std::string,MPSMLIROps>::~unordered_map[abi:ne180100](a17);
      _Unwind_Resume(a1);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__assign_unique<std::pair<std::string const,MPSMLIROps> const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void **v9;
  BOOL v10;
  void **v11;

  v4 = __str;
  v6 = a1[1];
  if (!v6)
    goto LABEL_19;
  for (i = 0; i != v6; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (__str == a3 || !v8)
  {
    v9 = (void **)v8;
    if (!v8)
      goto LABEL_19;
  }
  else
  {
    do
    {
      std::string::operator=((std::string *)(v8 + 16), v4);
      *(_DWORD *)(v8 + 40) = v4[1].__r_.__value_.__l.__data_;
      v9 = *(void ***)v8;
      std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__node_insert_unique(a1, v8);
      v4 = (std::string *)((char *)v4 + 32);
      if (v9)
        v10 = v4 == a3;
      else
        v10 = 1;
      v8 = (uint64_t)v9;
    }
    while (!v10);
    if (!v9)
      goto LABEL_19;
  }
  do
  {
    v11 = (void **)*v9;
    if (*((char *)v9 + 39) < 0)
      operator delete(v9[2]);
    operator delete(v9);
    v9 = v11;
  }
  while (v11);
LABEL_19:
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MPSMLIROps> const&>((uint64_t)a1, (uint64_t)v4, (uint64_t)v4);
    v4 = (std::string *)((char *)v4 + 32);
  }
}

void sub_180DF1214(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_180DF1230(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  size_t v30;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_50;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v7 = a2 % v4;
    else
      v7 = a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  else
  {
    v7 = (v4 - 1) & a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *((_BYTE *)a3 + 23);
    if (v10 >= 0)
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = *a3;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v17 = v9[1];
        if (v17 == a2)
        {
          v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          else
            v19 = (unsigned __int8 *)v9[3];
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3]))
                return v9;
            }
            else
            {
              if (!*((_BYTE *)v9 + 39))
                return v9;
              v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20)
                  return v9;
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_50;
      }
    }
    do
    {
      v13 = v9[1];
      if (v13 == a2)
      {
        v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        else
          v15 = (unsigned __int8 *)v9[3];
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3]))
              return v9;
          }
          else
          {
            if (!*((_BYTE *)v9 + 39))
              return v9;
            v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16)
                return v9;
            }
          }
        }
      }
      else
      {
        if (v13 >= v4)
          v13 %= v4;
        if (v13 != v7)
          break;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21)
    return 0;
  v23 = 1;
  if (v4 >= 3)
    v23 = (v4 & (v4 - 1)) != 0;
  v24 = v23 | (2 * v4);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_74;
  if (prime < v4)
  {
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v30 = std::__next_prime(v27);
      if (prime <= v30)
        prime = v30;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
      if (prime <= v27)
        prime = v27;
      if (prime >= v4)
        return 0;
    }
LABEL_74:
    std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MPSMLIROps>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMLIROps>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMLIROps>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MPSMLIROps> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::unordered_map<void *,MPSGraphTensorData * {__strong}>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_180DF1AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_180DF1AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMLIROps>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::{lambda(void)#1} &&>>()
{
  if (getenv("MPSGRAPH_DISABLE_PARALLEL_TI"))
  {
    GPURegionRuntime::GPURegionRuntime(MPSGraphDevice *,MPSGraph *,MPSGraphExecutable *,NSDictionary<NSString *,MPSGraphExecutable *> *,mlir::ModuleOp,mlir::FunctionOpInterface,unsigned int,BOOL)::evEnableParallelTI = 0;
    NSLog(CFSTR("MPSGRAPH_DISABLE_PARALLEL_TI EV is set."));
  }
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::func::ReturnOp,mlir::Operation *,llvm::CastInfo<mlir::func::ReturnOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 11 && *AttrData == 0x7465722E636E7566 && *(_QWORD *)((char *)AttrData + 3) == 0x6E72757465722E63)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"func.return";
      v8[3] = 11;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::mps::PlaceholderOp,mlir::Operation *,llvm::CastInfo<mlir::mps::PlaceholderOp,mlir::Operation *,void>>::doCastIfPossible(uint64_t result)
{
  uint64_t v1;
  void *v2;
  _QWORD *AttrData;
  uint64_t v4;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[5];

  v1 = *(_QWORD *)(result + 48);
  v2 = *(void **)(v1 + 16);
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v10[0] = *(_QWORD *)(v1 + 8);
    AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
    if (v4 == 15 && *AttrData == 0x63616C702E73706DLL && *(_QWORD *)((char *)AttrData + 7) == 0x7265646C6F686563)
    {
      v9 = 1283;
      v8[0] = (uint64_t)"classof on '";
      v8[2] = (uint64_t)"mps.placeholder";
      v8[3] = 15;
      v6 = "' failed due to the operation not being registered";
      v7 = 259;
      llvm::operator+(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((llvm::Twine *)v10, 1);
    }
    return 0;
  }
  else if (v2 != &mlir::detail::TypeIDResolver<mlir::mps::PlaceholderOp,void>::id)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  _QWORD *v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((v1 & ((_DWORD)v1 - 1)) != 0)
    __assert_rtn("initEmpty", "DenseMap.h", 405, "(getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\"");
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = (llvm *)((char *)v5 + 16 * v8);
      v10 = (_QWORD *)((char *)v5 + 16);
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        return result;
    }
    else
    {
      v9 = *(llvm **)result;
    }
    v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(_QWORD *)v9 = -4096;
      v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  uint64_t v9;
  llvm *v10;
  llvm *v11;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(24 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((v1 & ((_DWORD)v1 - 1)) != 0)
    __assert_rtn("initEmpty", "DenseMap.h", 405, "(getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\"");
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = 24 * v1 - 24;
    if (v6 < 0x18)
    {
      v7 = *(llvm **)result;
LABEL_15:
      v11 = (llvm *)((char *)v5 + 24 * v1);
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 24);
      }
      while (v7 != v11);
      return result;
    }
    v8 = v6 / 0x18 + 1;
    v7 = (llvm *)((char *)v5 + 24 * (v8 & 0x1FFFFFFFFFFFFFFELL));
    v9 = v8 & 0x1FFFFFFFFFFFFFFELL;
    v10 = *(llvm **)result;
    do
    {
      *(_QWORD *)v10 = -4096;
      *((_QWORD *)v10 + 3) = -4096;
      v10 = (llvm *)((char *)v10 + 48);
      v9 -= 2;
    }
    while (v9);
    if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_15;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>,void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::InsertIntoBucket<void *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    if (a2)
    {
LABEL_4:
      v7 = *a2;
      goto LABEL_5;
    }
LABEL_21:
    __assert_rtn("InsertIntoBucketImpl", "DenseMap.h", 616, "TheBucket");
  }
  llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::grow(a1, v6);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_21;
  v7 = *a3;
  if ((*a3 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v10 = v9 - 1;
  v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (v7 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a2;
      if (v7 == *a2)
        goto LABEL_5;
    }
    if (v13)
      a2 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

_QWORD *llvm::DenseMap<void *,mlir::Type,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::Type>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((v11 & ((_DWORD)v11 - 1)) == 0)
    {
      if ((_DWORD)v11)
      {
        if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_45;
        v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
        v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
        v13 = result + 2;
        v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v13 - 2) = -4096;
          *v13 = -4096;
          v13 += 4;
          v14 -= 2;
        }
        while (v14);
        if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_45:
          do
          {
            *v10 = -4096;
            v10 += 2;
          }
          while (v10 != &result[2 * v11]);
        }
      }
      if ((_DWORD)v3)
      {
        v15 = 0;
        v16 = v11 - 1;
        v17 = v4;
        v18 = (llvm *)((char *)v4 + 16 * v3);
        do
        {
          while (1)
          {
            v19 = *(_QWORD *)v17;
            if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
              break;
            v17 = (llvm *)((char *)v17 + 16);
            if (v17 == v18)
              goto LABEL_31;
          }
          v20 = ((v19 >> 4) ^ (v19 >> 9)) & v16;
          v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
          v22 = *v21;
          if (v19 == *v21)
LABEL_41:
            __assert_rtn("moveFromOldBuckets", "DenseMap.h", 435, "!FoundVal && \"Key already in new map?\"");
          v23 = 0;
          v24 = 1;
          while (v22 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v22 == -8192;
            if (v25)
              v23 = v21;
            v26 = v20 + v24++;
            v20 = v26 & v16;
            v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
            v22 = *v21;
            if (v19 == *v21)
              goto LABEL_41;
          }
          if (v23)
            v27 = v23;
          else
            v27 = v21;
          *v27 = v19;
          v27[1] = *((_QWORD *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
          v17 = (llvm *)((char *)v17 + 16);
        }
        while (v17 != v18);
      }
LABEL_31:
      llvm::deallocate_buffer(v4, (void *)(16 * v3));
    }
LABEL_42:
    __assert_rtn("initEmpty", "DenseMap.h", 405, "(getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\"");
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((v28 & ((_DWORD)v28 - 1)) != 0)
    goto LABEL_42;
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v29 = ((v28 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v29 & 0x1FFFFFFFFFFFFFFELL)];
    v30 = result + 2;
    v31 = v29 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 2) = -4096;
      *v30 = -4096;
      v30 += 4;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v32 = &result[2 * v28];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v32);
    }
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>,void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::InsertIntoBucket<void *>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    if (a2)
    {
LABEL_4:
      v7 = *a2;
      goto LABEL_5;
    }
LABEL_21:
    __assert_rtn("InsertIntoBucketImpl", "DenseMap.h", 616, "TheBucket");
  }
  llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::grow(a1, v6);
  v10 = *(_DWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_21;
  v7 = *a3;
  if ((*a3 | 0x1000) == 0xFFFFFFFFFFFFF000)
    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
  v11 = v10 - 1;
  v12 = ((v7 >> 4) ^ (v7 >> 9)) & v11;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v12);
  v13 = *a2;
  if (v7 != *a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = a2;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v12);
      v13 = *a2;
      if (v7 == *a2)
        goto LABEL_5;
    }
    if (v14)
      a2 = v14;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  v8 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v8;
  return a2;
}

_QWORD *llvm::DenseMap<void *,mlir::ElementsAttr,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,mlir::ElementsAttr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  llvm *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if ((v10 & (v10 - 1)) == 0)
    {
      if (!v10)
        goto LABEL_18;
      v11 = 24 * v10 - 24;
      if (v11 >= 0x18)
      {
        v16 = v11 / 0x18 + 1;
        v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
        v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
        v18 = result;
        do
        {
          *v18 = -4096;
          v18[3] = -4096;
          v18 += 6;
          v17 -= 2;
        }
        while (v17);
        if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_18:
          if ((_DWORD)v3)
          {
            v20 = v4;
            do
            {
              v22 = *(_QWORD *)v20;
              if ((*(_QWORD *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v23 = *(_DWORD *)(a1 + 16);
                if (v23)
                {
                  if (v22 == -4096)
                    __assert_rtn("LookupBucketFor", "DenseMap.h", 651, "!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\"");
                  v24 = v23 - 1;
                  v25 = v24 & ((v22 >> 4) ^ (v22 >> 9));
                  v26 = (_QWORD *)(*(_QWORD *)a1 + 24 * v25);
                  v27 = *v26;
                  if (v22 == *v26)
LABEL_39:
                    __assert_rtn("moveFromOldBuckets", "DenseMap.h", 435, "!FoundVal && \"Key already in new map?\"");
                  v28 = 0;
                  v29 = 1;
                  while (v27 != -4096)
                  {
                    if (v28)
                      v30 = 0;
                    else
                      v30 = v27 == -8192;
                    if (v30)
                      v28 = v26;
                    v31 = v25 + v29++;
                    v25 = v31 & v24;
                    v26 = (_QWORD *)(*(_QWORD *)a1 + 24 * v25);
                    v27 = *v26;
                    if (v22 == *v26)
                      goto LABEL_39;
                  }
                  if (v28)
                    v21 = v28;
                  else
                    v21 = v26;
                }
                else
                {
                  v21 = 0;
                }
                *v21 = v22;
                *(_OWORD *)(v21 + 1) = *(_OWORD *)((char *)v20 + 8);
                ++*(_DWORD *)(a1 + 8);
              }
              v20 = (llvm *)((char *)v20 + 24);
            }
            while (v20 != (llvm *)((char *)v4 + 24 * v3));
          }
          llvm::deallocate_buffer(v4, (void *)(24 * v3));
        }
      }
      else
      {
        v12 = result;
      }
      v19 = &result[3 * v10];
      do
      {
        *v12 = -4096;
        v12 += 3;
      }
      while (v12 != v19);
      goto LABEL_18;
    }
LABEL_47:
    __assert_rtn("initEmpty", "DenseMap.h", 405, "(getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\"");
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if ((v13 & (v13 - 1)) != 0)
    goto LABEL_47;
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_44:
      v35 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v35);
      return result;
    }
    v32 = v14 / 0x18 + 1;
    v15 = &result[3 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
    v33 = v32 & 0x1FFFFFFFFFFFFFFELL;
    v34 = result;
    do
    {
      *v34 = -4096;
      v34[3] = -4096;
      v34 += 6;
      v33 -= 2;
    }
    while (v33);
    if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_44;
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x186DA1680);
}

void std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x186DA1680);
}

_QWORD *std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0DFB780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0DFB780;
  a2[1] = v2;
  return result;
}

void std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  GPU::BaseOpHandler **v3;
  uint64_t v4;
  GPU::BaseOpHandler *v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v2)
  {
    v3 = *(GPU::BaseOpHandler ***)(v1 + 64);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      GPURegionRuntime::TIAndFoldHelper::runOnOp((GPURegionRuntime::TIAndFoldHelper *)v1, v5);
      std::mutex::lock((std::mutex *)(v1 + 312));
      ++*(_QWORD *)(v1 + 304);
      std::mutex::unlock((std::mutex *)(v1 + 312));
      std::condition_variable::notify_all((std::condition_variable *)(v1 + 376));
      v4 -= 8;
    }
    while (v4);
  }
}

uint64_t std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN16GPURegionRuntime23ParallelTIAndFoldHelper11runOnRegionEN4llvm8ArrayRefIN4mlir4TypeEEENS2_INS3_1"
                     "2ElementsAttrEEES5_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN16GPURegionRuntime23ParallelTIAndFoldHelper11runOnRegionEN4llvm8ArrayRefIN4mlir4TypeEE"
                                "ENS2_INS3_12ElementsAttrEEES5_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN16GPURegionRuntime23ParallelTIAndFoldHelper11runOnRegionEN4llvm8ArrayRefIN4mlir4TypeEEENS2_INS3_12ElementsAttrEEES5_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN16GPURegionRuntime23ParallelTIAndFoldHelper11runOnRegionEN4llvm8ArrayRefIN4mlir4TypeEEENS2_INS3_12ElementsAttrEEES5_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0,std::allocator<GPURegionRuntime::ParallelTIAndFoldHelper::runOnRegion(llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::ElementsAttr>,llvm::ArrayRef<mlir::Type>)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *llvm::DenseMap<mlir::Operation *,unsigned long long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm *v17;
  llvm *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((v11 & ((_DWORD)v11 - 1)) == 0)
    {
      if ((_DWORD)v11)
      {
        if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_45;
        v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
        v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
        v13 = result + 2;
        v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v13 - 2) = -4096;
          *v13 = -4096;
          v13 += 4;
          v14 -= 2;
        }
        while (v14);
        if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_45:
          do
          {
            *v10 = -4096;
            v10 += 2;
          }
          while (v10 != &result[2 * v11]);
        }
      }
      if ((_DWORD)v3)
      {
        v15 = 0;
        v16 = v11 - 1;
        v17 = v4;
        v18 = (llvm *)((char *)v4 + 16 * v3);
        do
        {
          while (1)
          {
            v19 = *(_QWORD *)v17;
            if ((*(_QWORD *)v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
              break;
            v17 = (llvm *)((char *)v17 + 16);
            if (v17 == v18)
              goto LABEL_31;
          }
          v20 = ((v19 >> 4) ^ (v19 >> 9)) & v16;
          v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
          v22 = *v21;
          if (v19 == *v21)
LABEL_41:
            __assert_rtn("moveFromOldBuckets", "DenseMap.h", 435, "!FoundVal && \"Key already in new map?\"");
          v23 = 0;
          v24 = 1;
          while (v22 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v22 == -8192;
            if (v25)
              v23 = v21;
            v26 = v20 + v24++;
            v20 = v26 & v16;
            v21 = (_QWORD *)(*(_QWORD *)a1 + 16 * v20);
            v22 = *v21;
            if (v19 == *v21)
              goto LABEL_41;
          }
          if (v23)
            v27 = v23;
          else
            v27 = v21;
          v28 = *((_QWORD *)v17 + 1);
          *v27 = v19;
          v27[1] = v28;
          *(_DWORD *)(a1 + 8) = ++v15;
          v17 = (llvm *)((char *)v17 + 16);
        }
        while (v17 != v18);
      }
LABEL_31:
      llvm::deallocate_buffer(v4, (void *)(16 * v3));
    }
LABEL_42:
    __assert_rtn("initEmpty", "DenseMap.h", 405, "(getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\"");
  }
  *(_QWORD *)(a1 + 8) = 0;
  v29 = *(unsigned int *)(a1 + 16);
  if ((v29 & ((_DWORD)v29 - 1)) != 0)
    goto LABEL_42;
  if ((_DWORD)v29)
  {
    if (((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v30 = ((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v30 & 0x1FFFFFFFFFFFFFFELL)];
    v31 = result + 2;
    v32 = v30 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v31 - 2) = -4096;
      *v31 = -4096;
      v31 += 4;
      v32 -= 2;
    }
    while (v32);
    if (v30 != (v30 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v33 = &result[2 * v29];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v33);
    }
  }
  return result;
}

void sub_180DF2D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_180DF2DF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_180DF32CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_180DF3434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_180DF3590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::vector<mlir::Value>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t MILToMLIR::ConvolutionPattern::matchAndRewrite(MILToMLIR::ConvolutionPattern *this, const MIL::IROperation *a2, mlir::StringAttr **a3)
{
  return MILToMLIR::matchAndRewriteConv(a2, a3, (MILToMLIRRewriter *)a3);
}

uint64_t MILToMLIR::matchAndRewriteConv(MILToMLIR *this, mlir::StringAttr **a2, MILToMLIRRewriter *a3)
{
  uint64_t v5;
  __int128 v6;
  int64_t size;
  std::string *v8;
  char *v9;
  std::string *v10;
  char *v11;
  BOOL v12;
  _BOOL4 v14;
  uint64_t LocationForOp;
  const void ***v16;
  const void ***v17;
  const void **v18;
  const void **v19;
  const void ***v20;
  char *v21;
  char **v22;
  char *v23;
  char **v24;
  char *v25;
  char *v26;
  unint64_t v27;
  int v28;
  char *v29;
  size_t v30;
  _BOOL4 v31;
  int v32;
  char **v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  size_t v41;
  _BOOL4 v42;
  int v43;
  _BOOL4 v44;
  char **v45;
  uint64_t ParameterValue;
  int *Data;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t *v51;
  BOOL v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t InterfaceFor;
  const char *v60;
  int v61;
  const char *v62;
  const char *v63;
  uint64_t Value;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t v76;
  const char *v77;
  int v78;
  const char *v79;
  const char *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  char *v89;
  char **v90;
  char *v91;
  char **v92;
  char *v93;
  char *v94;
  unint64_t v95;
  int v96;
  char *v97;
  size_t v98;
  _BOOL4 v99;
  int v100;
  char **v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  char *v107;
  char *v108;
  size_t v109;
  _BOOL4 v110;
  int v111;
  _BOOL4 v112;
  uint64_t v113;
  _QWORD *v115;
  unsigned __int16 *v116;
  int v117;
  unsigned int v118;
  int v119;
  int v122;
  int v123;
  char *v125;
  char **v126;
  char *v127;
  char **v128;
  char *v129;
  char *v130;
  unint64_t v131;
  int v132;
  char *v133;
  size_t v134;
  _BOOL4 v135;
  int v136;
  char **v137;
  char *v138;
  _QWORD *v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  char *v143;
  char *v144;
  size_t v145;
  _BOOL4 v146;
  int v147;
  _BOOL4 v148;
  char *v151;
  char **v152;
  char *v153;
  char *v154;
  char **v155;
  char *v156;
  char *v157;
  unint64_t v158;
  int v159;
  char *v160;
  size_t v161;
  _BOOL4 v162;
  int v163;
  char **v164;
  char *v165;
  _QWORD *v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  char *v170;
  char *v171;
  size_t v172;
  _BOOL4 v173;
  int v174;
  _BOOL4 v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _DWORD *v183;
  unint64_t v184;
  char **v185;
  char *v186;
  char **v187;
  char *v188;
  unint64_t v189;
  int v190;
  const void *v191;
  size_t v192;
  _BOOL4 v193;
  int v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  unint64_t v198;
  int v199;
  unint64_t v200;
  char *v201;
  char *v202;
  size_t v203;
  _BOOL4 v204;
  int v205;
  _BOOL4 v206;
  _QWORD *v207;
  mlir::Builder *v208;
  int v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  mlir::GenericProgramPoint *v224;
  mlir::GenericProgramPoint *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  mlir::GenericProgramPoint *v229;
  mlir::GenericProgramPoint *v230;
  int v231;
  _QWORD *v232;
  uint64_t IntegerType;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  mlir::GenericProgramPoint *v238;
  uint64_t v239;
  uint64_t ElementTypeOrSelf;
  mlir::GenericProgramPoint *v241;
  uint64_t v242;
  mlir::GenericProgramPoint *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  _DWORD *v257;
  _DWORD *v258;
  _DWORD *v259;
  _DWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  mlir::GenericProgramPoint *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  int *v277;
  int *v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  mlir::GenericProgramPoint *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  _DWORD *v298;
  uint64_t *v299;
  uint64_t v300;
  mlir::GenericProgramPoint *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  mlir::GenericProgramPoint *v306;
  uint64_t v307;
  mlir::GenericProgramPoint *v308;
  mlir::GenericProgramPoint *v309;
  int *v310;
  int *v311;
  uint64_t v312;
  const char *v313;
  int v314;
  const char *v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _DWORD *v326;
  _DWORD *v327;
  uint64_t v328;
  uint64_t v329;
  _DWORD *v330;
  _DWORD *v331;
  uint64_t *v332;
  uint64_t v333;
  mlir::GenericProgramPoint *v334;
  uint64_t v335;
  mlir::GenericProgramPoint *v336;
  uint64_t v337;
  mlir::GenericProgramPoint *v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  mlir::GenericProgramPoint *v344;
  uint64_t *v345;
  mlir::GenericProgramPoint *v346;
  mlir::GenericProgramPoint *v347;
  char v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  mlir::GenericProgramPoint *v356;
  mlir::GenericProgramPoint *v357;
  const char *v358;
  int v359;
  const char *v360;
  const char *v361;
  const char *v362;
  int v363;
  const char *v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  mlir::GenericProgramPoint *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  mlir::GenericProgramPoint *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _DWORD *v379;
  uint64_t *v380;
  uint64_t v381;
  mlir::GenericProgramPoint *v382;
  _DWORD *v383;
  _DWORD *v384;
  _DWORD *v385;
  const char *v386;
  int v387;
  const char *v388;
  int v389;
  int v390;
  unint64_t v391;
  int v392;
  _BOOL4 v393;
  int v394;
  mlir::Builder *v395;
  const MIL::IROperation *v396;
  uint64_t v397;
  int v398;
  _BOOL4 v399;
  void *v400[3];
  unsigned int v401;
  mlir::GenericProgramPoint *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  mlir::GenericProgramPoint *v415;
  unsigned int v416;
  void *v417;
  uint64_t v418;
  char v419;
  unint64_t v420;
  int v421;
  char **v422;
  char *v423[2];
  unsigned int v424;
  unsigned int v425;
  uint64_t OptionalArgValue;
  uint64_t v427;
  uint64_t ArgValue;
  std::string v429;
  __int128 v430;
  int v431;
  char v432;
  _BYTE __p[32];
  __int128 v434;
  _BYTE v435[20];
  char v436;
  __int128 v437;
  _BYTE v438[7];
  char v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  int v447;
  __int128 v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *__s2;
  uint64_t v453;
  _BYTE v454[7];
  char v455;
  uint64_t v456;

  v456 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(MILToMLIR *, mlir::StringAttr **, MILToMLIRRewriter *))(*(_QWORD *)this + 56))(this, a2, a3);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v429, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v429.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&v429.__r_.__value_.__l.__data_ = v6;
  }
  size = HIBYTE(v429.__r_.__value_.__r.__words[2]);
  if ((v429.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v8 = &v429;
  }
  else
  {
    size = v429.__r_.__value_.__l.__size_;
    v8 = (std::string *)v429.__r_.__value_.__r.__words[0];
  }
  v9 = (char *)v8 + size;
  if (size >= 14)
  {
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 99, size - 13);
      if (!v11)
        break;
      v12 = *(_QWORD *)v11 == 0x6172745F766E6F63 && *(_QWORD *)(v11 + 6) == 0x65736F70736E6172;
      if (v12)
        goto LABEL_16;
      v10 = (std::string *)(v11 + 1);
      size = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 > 13);
  }
  v11 = v9;
LABEL_16:
  v14 = v11 == v9 || v11 - (char *)v8 == -1;
  v399 = v14;
  LocationForOp = MILToMLIRRewriter::getLocationForOp(a2, this);
  ArgValue = MILToMLIRRewriter::getArgValue((int8x8_t *)a2, this, "x");
  v427 = MILToMLIRRewriter::getArgValue((int8x8_t *)a2, this, "weight");
  OptionalArgValue = MILToMLIRRewriter::getOptionalArgValue((int8x8_t *)a2, this, "bias");
  v425 = 0;
  v424 = 2;
  v16 = (const void ***)(*(uint64_t (**)(MILToMLIR *))(*(_QWORD *)this + 160))(this);
  v423[0] = 0;
  v423[1] = 0;
  v422 = v423;
  v17 = v16 + 1;
  v18 = *v16;
  if (*v16 == (const void **)(v16 + 1))
  {
    v421 = 1;
  }
  else
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t **)&v422, (uint64_t *)v423, v18 + 4, (uint64_t)(v18 + 4));
      v19 = (const void **)v18[1];
      if (v19)
      {
        do
        {
          v20 = (const void ***)v19;
          v19 = (const void **)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (const void ***)v18[2];
          v12 = *v20 == v18;
          v18 = (const void **)v20;
        }
        while (!v12);
      }
      v18 = (const void **)v20;
    }
    while (v20 != v17);
    v21 = v423[0];
    v421 = 1;
    v455 = 6;
    strcpy((char *)&__s2, "groups");
    if (v423[0])
    {
      v22 = v423;
      do
      {
        v23 = v21;
        v24 = v22;
        v26 = v21 + 32;
        v25 = (char *)*((_QWORD *)v21 + 4);
        v27 = v23[55];
        v28 = (char)v27;
        if ((v27 & 0x80u) != 0)
          v27 = *((_QWORD *)v23 + 5);
        if (v28 >= 0)
          v29 = v26;
        else
          v29 = v25;
        if (v27 >= 6)
          v30 = 6;
        else
          v30 = v27;
        v31 = v27 < 6;
        v32 = memcmp(v29, &__s2, v30);
        if (v32)
          v31 = v32 < 0;
        v33 = (char **)(v23 + 8);
        if (v31)
        {
          v22 = v24;
        }
        else
        {
          v33 = (char **)v23;
          v22 = (char **)v23;
        }
        v21 = *v33;
      }
      while (v21);
      if (v22 != v423)
      {
        v34 = (char *)(v24 + 4);
        if (v31)
          v35 = v24;
        else
          v35 = v23;
        if (!v31)
          v34 = v26;
        v36 = *((unsigned __int8 *)v22 + 55);
        v37 = (char)v36;
        v39 = (char *)v35[4];
        v38 = v35[5];
        if ((v36 & 0x80u) != 0)
          v36 = v38;
        if (v37 >= 0)
          v40 = v34;
        else
          v40 = v39;
        if (v36 >= 6)
          v41 = 6;
        else
          v41 = v36;
        v42 = v36 > 6;
        v43 = memcmp(&__s2, v40, v41);
        v44 = v43 < 0;
        if (!v43)
          v44 = v42;
        if (!v44)
        {
          v45 = v31 ? v24 : (char **)v23;
          if (v45[8] - v45[7] == 16)
          {
            v455 = 6;
            strcpy((char *)&__s2, "groups");
            ParameterValue = MIL::IROperation::TryGetParameterValue();
            if (v455 < 0)
              operator delete(__s2);
            (*(void (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
            Data = (int *)MIL::IRTensorValue::GetDataView<int>();
            if (v48)
            {
              v398 = *Data;
              v421 = *Data;
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
  v398 = 1;
LABEL_73:
  v49 = *(_QWORD *)(v427 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v49)
  {
    v313 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v314 = 650;
    v315 = "Casting.h";
    v316 = "dyn_cast";
    goto LABEL_505;
  }
  if (!*(_QWORD *)v49)
  {
    v313 = "abstractType && \"Malformed type storage object.\"";
    v314 = 160;
    v315 = "TypeSupport.h";
    v316 = "getAbstractType";
LABEL_505:
    __assert_rtn(v316, v315, v314, v313);
  }
  v397 = LocationForOp;
  v50 = *(void **)(*(_QWORD *)v49 + 136);
  if (v50 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v49 = 0;
  v420 = v49;
  __s2 = v454;
  memset_pattern16(v454, &unk_181233190, 0x20uLL);
  v453 = 0x400000004;
  if (v50 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    LODWORD(v453) = 0;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v420);
    if (v65)
    {
      v66 = (uint64_t *)Value;
      v67 = v453;
      v68 = HIDWORD(v453);
      v69 = 8 * v65;
      do
      {
        v70 = *v66;
        if (v67 >= v68)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, v454, v67 + 1, 8);
          __s2[v453] = v70;
          v71 = v453;
          v68 = HIDWORD(v453);
          if (v453 >= (unint64_t)HIDWORD(v453))
LABEL_106:
            __assert_rtn("set_size", "SmallVector.h", 102, "N <= capacity()");
        }
        else
        {
          __s2[v67] = v70;
          v71 = v453;
          v68 = HIDWORD(v453);
          if (v453 >= (unint64_t)HIDWORD(v453))
            goto LABEL_106;
        }
        v67 = v71 + 1;
        LODWORD(v453) = v67;
        ++v66;
        v69 -= 8;
      }
      while (v69);
    }
  }
  v51 = (uint64_t *)(a2 + 13);
  if (!v420)
    goto LABEL_116;
  if (!(_DWORD)v453)
    goto LABEL_543;
  if (*__s2 != 1 && v398 < 2)
    goto LABEL_89;
  if (v453 <= 1)
LABEL_543:
    __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
  v53 = v399;
  if (__s2[1] != 1)
    v53 = 0;
  if (!v53)
  {
LABEL_89:
    if (v399)
    {
      v55 = *(_QWORD *)(v427 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v55)
      {
        if (*(_QWORD *)v55)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
            v55 = 0;
          *(_QWORD *)__p = v55;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
          if (v56 == 4)
          {
            *(_QWORD *)__p = 4;
            v57 = mlir::IntegerType::get(*v51, 0x20u, 1u);
            v58 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)__p, 1, v57, 0);
            if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v58))
            {
              v60 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
              v61 = 566;
              v62 = "Casting.h";
              v63 = "cast";
LABEL_613:
              __assert_rtn(v63, v62, v61, v60);
            }
            if (v58)
            {
              InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v58);
              if (!InterfaceFor)
              {
                v60 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
                v61 = 98;
                v62 = "InterfaceSupport.h";
                v63 = "Interface";
                goto LABEL_613;
              }
            }
            else
            {
              InterfaceFor = 0;
            }
            *(_OWORD *)__p = xmmword_181286A30;
            v81 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v58, InterfaceFor, __p, 16, 4, 1, 1);
            if ((mlir::DenseIntElementsAttr::classof((uint64_t)v81) & 1) == 0)
              __assert_rtn("cast", "Casting.h", 566, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
            v417 = v81;
            *(_QWORD *)__p = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a2 + 13), LocationForOp, (uint64_t **)&v417);
            v82 = mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a2 + 13), LocationForOp, &v427, (uint64_t)__p);
            if (!*(_DWORD *)(v82 + 36))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
LABEL_124:
            v54 = 0;
            v427 = v82 - 16;
            v424 = 3;
            goto LABEL_125;
          }
LABEL_116:
          v54 = 0;
          goto LABEL_125;
        }
        v358 = "abstractType && \"Malformed type storage object.\"";
        v359 = 160;
        v360 = "TypeSupport.h";
        v361 = "getAbstractType";
      }
      else
      {
        v358 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
        v359 = 650;
        v360 = "Casting.h";
        v361 = "dyn_cast";
      }
      __assert_rtn(v361, v360, v359, v358);
    }
    v72 = *(_QWORD *)(v427 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v72)
    {
      if (*(_QWORD *)v72)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)v72 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          v72 = 0;
        *(_QWORD *)__p = v72;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        if (v73 != 4)
          goto LABEL_116;
        *(_QWORD *)__p = 4;
        v74 = mlir::IntegerType::get(*v51, 0x20u, 1u);
        v75 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)__p, 1, v74, 0);
        if (mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v75))
        {
          if (v75)
          {
            v76 = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v75);
            if (!v76)
            {
              v77 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
              v78 = 98;
              v79 = "InterfaceSupport.h";
              v80 = "Interface";
              goto LABEL_615;
            }
          }
          else
          {
            v76 = 0;
          }
          *(_OWORD *)__p = xmmword_181286A30;
          v83 = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v75, v76, __p, 16, 4, 1, 1);
          if ((mlir::DenseIntElementsAttr::classof((uint64_t)v83) & 1) == 0)
            __assert_rtn("cast", "Casting.h", 566, "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"");
          v417 = v83;
          *(_QWORD *)__p = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a2 + 13), LocationForOp, (uint64_t **)&v417);
          v82 = mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a2 + 13), LocationForOp, &v427, (uint64_t)__p);
          if (!*(_DWORD *)(v82 + 36))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          goto LABEL_124;
        }
        v77 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
        v78 = 566;
        v79 = "Casting.h";
        v80 = "cast";
LABEL_615:
        __assert_rtn(v80, v79, v78, v77);
      }
      v362 = "abstractType && \"Malformed type storage object.\"";
      v363 = 160;
      v364 = "TypeSupport.h";
      v365 = "getAbstractType";
    }
    else
    {
      v362 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
      v363 = 650;
      v364 = "Casting.h";
      v365 = "dyn_cast";
    }
    __assert_rtn(v365, v364, v363, v362);
  }
  v54 = 1;
LABEL_125:
  __p[23] = 1;
  strcpy(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v85 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  v86 = MIL::IRTensorValueType::Rank(v85);
  v87 = v86;
  if (v86 <= 2)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_181261470;
    strcpy(*(char **)__p, "Unexpectedly small rank for 'x'");
    MILToMLIRRewriter::notifyFailure((uint64_t)a2, (uint64_t)this, __p);
    goto LABEL_168;
  }
  v395 = (mlir::Builder *)(a2 + 13);
  v396 = (const MIL::IROperation *)a2;
  v393 = v86 == 3;
  v394 = v54;
  if (v86 == 3)
    v88 = 1;
  else
    v88 = 2;
  if ((unint64_t)v86 >= 5)
    v88 = 3;
  v392 = v88;
  __p[23] = 8;
  strcpy(__p, "pad_type");
  v89 = v423[0];
  if (!v423[0])
    goto LABEL_166;
  v90 = v423;
  do
  {
    v91 = v89;
    v92 = v90;
    v94 = v89 + 32;
    v93 = (char *)*((_QWORD *)v89 + 4);
    v95 = v91[55];
    v96 = (char)v95;
    if ((v95 & 0x80u) != 0)
      v95 = *((_QWORD *)v91 + 5);
    if (v96 >= 0)
      v97 = v94;
    else
      v97 = v93;
    if (v95 >= 8)
      v98 = 8;
    else
      v98 = v95;
    v99 = v95 < 8;
    v100 = memcmp(v97, __p, v98);
    if (v100)
      v99 = v100 < 0;
    v101 = (char **)(v91 + 8);
    if (v99)
    {
      v90 = v92;
    }
    else
    {
      v101 = (char **)v91;
      v90 = (char **)v91;
    }
    v89 = *v101;
  }
  while (v89);
  if (v90 == v423)
    goto LABEL_166;
  v102 = (char *)(v92 + 4);
  if (v99)
    v103 = v92;
  else
    v103 = v91;
  if (!v99)
    v102 = v94;
  v104 = *((unsigned __int8 *)v90 + 55);
  v105 = (char)v104;
  v107 = (char *)v103[4];
  v106 = v103[5];
  if ((v104 & 0x80u) != 0)
    v104 = v106;
  if (v105 >= 0)
    v108 = v102;
  else
    v108 = v107;
  if (v104 >= 8)
    v109 = 8;
  else
    v109 = v104;
  v110 = v104 > 8;
  v111 = memcmp(__p, v108, v109);
  v112 = v111 < 0;
  if (!v111)
    v112 = v110;
  if (v112)
  {
LABEL_166:
    *(_QWORD *)__p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_181267470;
    strcpy(*(char **)__p, "Could not find parameter with name 'pad_type'.");
    MILToMLIRRewriter::notifyFailure((uint64_t)a2, (uint64_t)this, __p);
LABEL_168:
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v113 = 0;
    goto LABEL_171;
  }
  if (v99)
    v115 = v92;
  else
    v115 = v91;
  if (v115[8] - v115[7] != 16)
  {
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_181261450;
    strcpy(*(char **)__p, "Unexpected argument size for 'pad_type'");
    MILToMLIRRewriter::notifyFailure((uint64_t)a2, (uint64_t)this, __p);
    goto LABEL_168;
  }
  __p[23] = 8;
  strcpy(__p, "pad_type");
  MIL::IROperation::TryGetParameterValue();
  MIL::IRValue::GetScalar<std::string>();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v416 = 0;
  if ((v419 & 0x80) == 0)
  {
    v116 = (unsigned __int16 *)&v417;
    switch(v419)
    {
      case 4:
        v117 = (int)v417;
        goto LABEL_188;
      case 5:
        if ((_DWORD)v417 != 1768710518 || BYTE4(v417) != 100)
          goto LABEL_683;
        goto LABEL_254;
      case 6:
        goto LABEL_201;
      case 10:
        if (v417 != (void *)0x776F6C5F656D6173 || (unsigned __int16)v418 != 29285)
          goto LABEL_683;
        goto LABEL_248;
      default:
        goto LABEL_683;
    }
  }
  switch(v418)
  {
    case 4:
      v117 = *(_DWORD *)v417;
LABEL_188:
      if (v117 != 1701667187)
        goto LABEL_683;
      v118 = 2;
      v119 = 2;
      goto LABEL_255;
    case 5:
      if (*(_DWORD *)v417 != 1768710518 || *((_BYTE *)v417 + 4) != 100)
        goto LABEL_683;
LABEL_254:
      v118 = 1;
      v119 = 1;
      goto LABEL_255;
    case 6:
      v116 = (unsigned __int16 *)v417;
LABEL_201:
      v122 = *(_DWORD *)v116;
      v123 = v116[2];
      if (v122 != 1953723747 || v123 != 28015)
        goto LABEL_683;
      v450 = 0;
      v451 = 0;
      v448 = 0uLL;
      v449 = 0;
      __p[23] = 3;
      strcpy(__p, "pad");
      v125 = v423[0];
      if (!v423[0])
        goto LABEL_242;
      v126 = v423;
      do
      {
        v127 = v125;
        v128 = v126;
        v130 = v125 + 32;
        v129 = (char *)*((_QWORD *)v125 + 4);
        v131 = v125[55];
        v132 = (char)v131;
        if ((v131 & 0x80u) != 0)
          v131 = *((_QWORD *)v127 + 5);
        if (v132 >= 0)
          v133 = v130;
        else
          v133 = v129;
        if (v131 >= 3)
          v134 = 3;
        else
          v134 = v131;
        v135 = v131 < 3;
        v136 = memcmp(v133, __p, v134);
        if (v136)
          v135 = v136 < 0;
        if (v135)
          v137 = (char **)(v127 + 8);
        else
          v137 = (char **)v127;
        if (v135)
          v126 = v128;
        else
          v126 = (char **)v127;
        v125 = *v137;
      }
      while (v125);
      if (v126 == v423)
        goto LABEL_242;
      v138 = (char *)(v128 + 4);
      if (v135)
        v139 = v128;
      else
        v139 = v127;
      if (!v135)
        v138 = v130;
      v140 = *((unsigned __int8 *)v126 + 55);
      v141 = (char)v140;
      v143 = (char *)v139[4];
      v142 = v139[5];
      if ((v140 & 0x80u) != 0)
        v140 = v142;
      if (v141 >= 0)
        v144 = v138;
      else
        v144 = v143;
      if (v140 >= 3)
        v145 = 3;
      else
        v145 = v140;
      v146 = v140 > 3;
      v147 = memcmp(__p, v144, v145);
      v148 = v147 < 0;
      if (!v147)
        v148 = v146;
      if (v148)
      {
LABEL_242:
        *(_QWORD *)__p = operator new(0x30uLL);
        *(_OWORD *)&__p[8] = xmmword_1812674D0;
        strcpy(*(char **)__p, "Could not find parameter with name 'pad'.");
        MILToMLIRRewriter::notifyFailure((uint64_t)a2, (uint64_t)this, __p);
        goto LABEL_357;
      }
      if (v135)
        v244 = v128;
      else
        v244 = v127;
      if (v244[8] - v244[7] != 16)
      {
        *(_QWORD *)__p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_181286A40;
        strcpy(*(char **)__p, "Unexpected argument size for 'pad'");
        MILToMLIRRewriter::notifyFailure((uint64_t)a2, (uint64_t)this, __p);
        goto LABEL_357;
      }
      __p[23] = 3;
      strcpy(__p, "pad");
      v245 = MIL::IROperation::TryGetParameterValue();
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      (*(void (**)(uint64_t))(*(_QWORD *)v245 + 40))(v245);
      v246 = MIL::IRTensorValue::GetDataView<int>();
      v248 = v246;
      v249 = v247;
      if (v247 >> 1 == 2)
      {
        LODWORD(v451) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v246, v247, 0);
        LODWORD(v450) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 1uLL);
        HIDWORD(v451) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 2uLL);
        HIDWORD(v450) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 3uLL);
        DWORD2(v448) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 0);
        HIDWORD(v448) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 1uLL);
        LODWORD(v449) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 2uLL);
        v250 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 3uLL);
        goto LABEL_546;
      }
      if (v247 >> 1 == 1)
      {
        HIDWORD(v451) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v246, v247, 0);
        HIDWORD(v450) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 1uLL);
        LODWORD(v449) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 0);
        v250 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v248, v249, 1uLL);
LABEL_546:
        v389 = 0;
        HIDWORD(v449) = *v250;
        goto LABEL_256;
      }
      v389 = 0;
      if (v247 >= 6)
      {
        v448 = *(_OWORD *)v246;
        v449 = *(_QWORD *)(v246 + 16);
      }
LABEL_256:
      v447 = 1;
      v446 = 0x100000001;
      v445 = 1;
      v444 = 0x100000001;
      __p[23] = 7;
      strcpy(__p, "strides");
      v151 = v423[0];
      if (!v423[0])
        goto LABEL_301;
      v152 = v423;
      v153 = v423[0];
      do
      {
        v154 = v153;
        v155 = v152;
        v157 = v153 + 32;
        v156 = (char *)*((_QWORD *)v153 + 4);
        v158 = v153[55];
        v159 = (char)v158;
        if ((v158 & 0x80u) != 0)
          v158 = *((_QWORD *)v154 + 5);
        if (v159 >= 0)
          v160 = v157;
        else
          v160 = v156;
        if (v158 >= 7)
          v161 = 7;
        else
          v161 = v158;
        v162 = v158 < 7;
        v163 = memcmp(v160, __p, v161);
        if (v163)
          v162 = v163 < 0;
        if (v162)
          v164 = (char **)(v154 + 8);
        else
          v164 = (char **)v154;
        if (v162)
          v152 = v155;
        else
          v152 = (char **)v154;
        v153 = *v164;
      }
      while (v153);
      if (v152 == v423)
        goto LABEL_301;
      v165 = (char *)(v155 + 4);
      if (v162)
        v166 = v155;
      else
        v166 = v154;
      if (!v162)
        v165 = v157;
      v167 = *((unsigned __int8 *)v152 + 55);
      v168 = (char)v167;
      v170 = (char *)v166[4];
      v169 = v166[5];
      if ((v167 & 0x80u) != 0)
        v167 = v169;
      if (v168 >= 0)
        v171 = v165;
      else
        v171 = v170;
      if (v167 >= 7)
        v172 = 7;
      else
        v172 = v167;
      v173 = v167 > 7;
      v174 = memcmp(__p, v171, v172);
      v175 = v174 < 0;
      if (!v174)
        v175 = v173;
      if (v175 || (!v162 ? (v176 = v154) : (v176 = v155), v176[8] - v176[7] != 16))
      {
LABEL_301:
        v390 = 1;
        goto LABEL_302;
      }
      __p[23] = 7;
      strcpy(__p, "strides");
      v177 = MIL::IROperation::TryGetParameterValue();
      v178 = (char *)&v444 + 4;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      (*(void (**)(uint64_t))(*(_QWORD *)v177 + 40))(v177);
      v179 = MIL::IRTensorValue::GetDataView<int>();
      v181 = v179;
      v182 = v180;
      if (v180 == 2)
      {
        v390 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v179, 2uLL, 0);
        LODWORD(v446) = v390;
        HIDWORD(v446) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v181, 2uLL, 1uLL);
        v183 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v181, 2uLL, 0);
        v184 = 1;
        goto LABEL_440;
      }
      if (v180 == 1)
      {
        v183 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v179, 1uLL, 0);
        v184 = 0;
        v390 = 1;
        v178 = (char *)&v446 + 4;
LABEL_440:
        *(_DWORD *)v178 = *v183;
        v277 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v181, v182, v184);
        v278 = &v445;
LABEL_441:
        *v278 = *v277;
        goto LABEL_442;
      }
      if (v180 >= 3)
      {
        v390 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v179, v180, 0);
        LODWORD(v446) = v390;
        HIDWORD(v446) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v181, v182, 1uLL);
        v277 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v181, v182, 2uLL);
        v278 = &v447;
        goto LABEL_441;
      }
      v390 = 1;
LABEL_442:
      v151 = v423[0];
LABEL_302:
      v443 = 1;
      v442 = 0x100000001;
      v441 = 1;
      v440 = 0x100000001;
      __p[23] = 9;
      strcpy(__p, "dilations");
      if (!v151)
        goto LABEL_348;
      v185 = v423;
      do
      {
        v186 = v151;
        v187 = v185;
        v188 = v151 + 32;
        v189 = v151[55];
        v190 = (char)v189;
        if ((v189 & 0x80u) != 0)
          v189 = *((_QWORD *)v151 + 5);
        if (v190 >= 0)
          v191 = v151 + 32;
        else
          v191 = (const void *)*((_QWORD *)v151 + 4);
        if (v189 >= 9)
          v192 = 9;
        else
          v192 = v189;
        v193 = v189 < 9;
        v194 = memcmp(v191, __p, v192);
        if (v194)
          v193 = v194 < 0;
        if (v193)
          v195 = v151 + 8;
        else
          v195 = v151;
        if (v193)
          v185 = v187;
        else
          v185 = (char **)v151;
        v151 = *(char **)v195;
      }
      while (*(_QWORD *)v195);
      if (v185 == v423)
        goto LABEL_348;
      v196 = (char *)(v187 + 4);
      if (v193)
        v197 = v187;
      else
        v197 = v186;
      if (!v193)
        v196 = v188;
      v198 = *((unsigned __int8 *)v185 + 55);
      v199 = (char)v198;
      v201 = (char *)v197[4];
      v200 = v197[5];
      if ((v198 & 0x80u) != 0)
        v198 = v200;
      if (v199 >= 0)
        v202 = v196;
      else
        v202 = v201;
      if (v198 >= 9)
        v203 = 9;
      else
        v203 = v198;
      v204 = v198 > 9;
      v205 = memcmp(__p, v202, v203);
      v206 = v205 < 0;
      if (!v205)
        v206 = v204;
      if (v206 || (!v193 ? (v207 = v186) : (v207 = v187), v207[8] - v207[7] != 16))
      {
LABEL_348:
        v217 = 1;
        v208 = (mlir::Builder *)(a2 + 13);
        v209 = v394;
        goto LABEL_349;
      }
      __p[23] = 9;
      strcpy(__p, "dilations");
      v208 = (mlir::Builder *)(a2 + 13);
      v209 = v394;
      v210 = MIL::IROperation::TryGetParameterValue();
      v211 = (char *)&v440 + 4;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      (*(void (**)(uint64_t))(*(_QWORD *)v210 + 40))(v210);
      v212 = MIL::IRTensorValue::GetDataView<int>();
      switch(v213)
      {
        case 3uLL:
          v312 = v212;
          v217 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v212, 3uLL, 0);
          LODWORD(v442) = v217;
          HIDWORD(v442) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v312, 3uLL, 1uLL);
          v310 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v312, 3uLL, 2uLL);
          v311 = &v443;
          goto LABEL_499;
        case 2uLL:
          v391 = 2;
          v214 = v212;
          v217 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v212, 2uLL, 0);
          LODWORD(v442) = v217;
          HIDWORD(v442) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v214, 2uLL, 1uLL);
          v215 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v214, 2uLL, 0);
          v216 = 1;
          goto LABEL_497;
        case 1uLL:
          v391 = 1;
          v214 = v212;
          v215 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v212, 1uLL, 0);
          v216 = 0;
          v217 = 1;
          v211 = (char *)&v442 + 4;
LABEL_497:
          *(_DWORD *)v211 = *v215;
          v310 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v214, v391, v216);
          v311 = &v441;
LABEL_499:
          *v311 = *v310;
          goto LABEL_349;
      }
      if (v213 >= 4)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Only up to rank 2 convolutions supported currently.");
        MILToMLIRRewriter::notifyFailure((uint64_t)v396, (uint64_t)this, __p);
LABEL_357:
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        goto LABEL_359;
      }
      v217 = 1;
LABEL_349:
      if ((*(uint64_t (**)(MILToMLIR *))(*(_QWORD *)this + 192))(this) != 1)
      {
        *(_QWORD *)__p = operator new(0x40uLL);
        *(_OWORD *)&__p[8] = xmmword_18125E6C0;
        strcpy(*(char **)__p, "The number of outputs does not match the number of results.");
        MILToMLIRRewriter::notifyFailure((uint64_t)v396, (uint64_t)this, __p);
        goto LABEL_357;
      }
      v415 = 0;
      v414 = -4;
      if (v209)
      {
        if (v392 == 1)
        {
          LODWORD(v437) = 2;
          std::vector<int>::vector[abi:ne180100](__p, &v437, 1uLL);
          *(_DWORD *)v435 = 0;
          std::vector<int>::vector[abi:ne180100](&v437, v435, 1uLL);
          v218 = (uint64_t)v396;
          v400[0] = (void *)1;
          IntegerType = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          *(_QWORD *)v435 = mlir::RankedTensorType::get((uint64_t)v400, 1, IntegerType, 0);
          v234 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
          *(_QWORD *)&v430 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v234, v235, v437, *((uint64_t *)&v437 + 1));
          v400[0] = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v430);
          v236 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
          *(_QWORD *)&v430 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v236, v237, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
          v415 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v430);
          v238 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &ArgValue, &v415);
          if (!*((_DWORD *)v238 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          ArgValue = (uint64_t)v238 - 16;
          v225 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, v400);
          if (!*((_DWORD *)v225 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          goto LABEL_378;
        }
        if (v392 == 2)
        {
          LODWORD(v437) = 1;
          std::vector<int>::vector[abi:ne180100](__p, &v437, 1uLL);
          *(_DWORD *)v435 = 0;
          std::vector<int>::vector[abi:ne180100](&v437, v435, 1uLL);
          v218 = (uint64_t)v396;
          v400[0] = (void *)1;
          v219 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          *(_QWORD *)v435 = mlir::RankedTensorType::get((uint64_t)v400, 1, v219, 0);
          v220 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
          *(_QWORD *)&v430 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v220, v221, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
          v400[0] = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v430);
          v222 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
          v413 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v222, v223, v437, *((uint64_t *)&v437 + 1));
          *(_QWORD *)&v430 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v413);
          v224 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, v400);
          if (!*((_DWORD *)v224 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v427 = (uint64_t)v224 - 16;
          v225 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, &v430);
          if (!*((_DWORD *)v225 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
LABEL_378:
          v427 = (uint64_t)v225 - 16;
          v414 = -3;
          if ((_QWORD)v437)
          {
            *((_QWORD *)&v437 + 1) = v437;
            operator delete((void *)v437);
          }
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
LABEL_382:
          if (v399)
          {
            *(_QWORD *)&v437 = 0;
            if (v209)
            {
              v231 = v393;
              *(_QWORD *)__p = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v444, (int *)3);
              *(_QWORD *)v435 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v440, (int *)3);
              v400[0] = (void *)MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v448, (int *)6);
              v239 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::mps::PaddingStyle &,int &>(v208, v397, &ArgValue, &v427, (uint64_t *)__p, (uint64_t *)v435, (uint64_t *)v400, &v416, &v414);
              if (!*(_DWORD *)(v239 + 36))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
LABEL_388:
              *(_QWORD *)&v437 = v239 - 16;
              if (OptionalArgValue)
              {
                *(_QWORD *)__p = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v239 - 8) & 0xFFFFFFFFFFFFFFF8));
                ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(OptionalArgValue + 8) & 0xFFFFFFFFFFFFFFF8));
                if (*(_QWORD *)__p != ElementTypeOrSelf)
                {
                  v241 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v208, v397, &OptionalArgValue, (uint64_t *)__p);
                  if (!*((_DWORD *)v241 + 9))
                    __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                  OptionalArgValue = (uint64_t)v241 - 16;
                }
                *(_DWORD *)v435 = 0;
                v242 = mlir::OpBuilder::create<mlir::mps::BiasAddOp,mlir::Value &,mlir::Value &,mlir::mps::TensorDataLayout>((mlir::MLIRContext **)v208, v397, (uint64_t *)&v437, &OptionalArgValue, (int *)v435);
                if (!*(_DWORD *)(v242 + 36))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                *(_QWORD *)&v437 = v242 - 16;
              }
              if (v231)
              {
                v243 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, (uint64_t *)&v437, &v415);
                if (!*((_DWORD *)v243 + 9))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                *(_QWORD *)&v437 = (char *)v243 - 16;
              }
              (*(void (**)(_BYTE *__return_ptr, MILToMLIR *))(*(_QWORD *)this + 200))(__p, this);
              MILToMLIRRewriter::setValue(v218, *(__int128 **)__p, v437);
              std::vector<std::string>::~vector[abi:ne180100]((void **)__p);
              v113 = 1;
              goto LABEL_360;
            }
            v231 = v393;
LABEL_387:
            v239 = mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::Value &,mlir::Value &,int &,int &,int &,int &,int &,int &,int &,int &,int &,mlir::mps::PaddingStyle &,mlir::mps::TensorDataLayout &,mlir::mps::TensorDataLayout &>(v208, v397, &ArgValue, &v427, &v421, (int *)&v446 + 1, (int *)&v446, (int *)&v442 + 1, (int *)&v442, (int *)&v451 + 1, (int *)&v450 + 1, (int *)&v451, (int *)&v450, &v416, &v425, &v424);
            if (!*(_DWORD *)(v239 + 36))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
            goto LABEL_388;
          }
          goto LABEL_408;
        }
LABEL_371:
        if (v87 <= 4)
        {
          v393 = 0;
          v218 = (uint64_t)v396;
          goto LABEL_382;
        }
        if (v398 <= 1)
        {
          if (!(_DWORD)v453)
            __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
          if ((_DWORD)v453 != 5)
            goto LABEL_432;
          v232 = __s2;
          if (*__s2 != 1)
            goto LABEL_432;
        }
        else
        {
          if ((_DWORD)v453 != 5)
            goto LABEL_432;
          v232 = __s2;
        }
        if (v232[1] == 1)
        {
          *(_QWORD *)__p = 1;
          v262 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          v400[0] = (void *)mlir::RankedTensorType::get((uint64_t)__p, 1, v262, 0);
          *(_DWORD *)__p = 1;
          llvm::SmallVector<int,1u>::SmallVector(&v437, __p, 1);
          v263 = (uint64_t)v396;
          v264 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v400);
          *(_QWORD *)__p = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v264, v265, v437, DWORD2(v437));
          *(_QWORD *)&v430 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)__p);
          v266 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, &v430);
          if (!*((_DWORD *)v266 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v427 = (uint64_t)v266 - 16;
          v413 = 0;
          if (v399)
          {
            *(_QWORD *)__p = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v446, (int *)3);
            *(_QWORD *)v435 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v442, (int *)3);
            v412 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v448, (int *)6);
            v267 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::mps::PaddingStyle &>(v208, v397, &ArgValue, &v427, (uint64_t *)__p, (uint64_t *)v435, &v412, &v416);
            if (!*(_DWORD *)(v267 + 36))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
            v413 = v267 - 16;
            goto LABEL_553;
          }
          *(_QWORD *)__p = 4;
          v317 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          v412 = mlir::RankedTensorType::get((uint64_t)__p, 1, v317, 0);
          *(_OWORD *)v435 = xmmword_181286EEC;
          *(_DWORD *)&v435[16] = 1;
          llvm::SmallVector<int,5u>::SmallVector(__p, v435, 5);
          *(_QWORD *)v435 = mlir::Type::dyn_cast<mlir::RankedTensorType>(*(_QWORD *)(v427 + 8) & 0xFFFFFFFFFFFFFFF8);
          v318 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v435);
          v320 = v319;
          std::string::basic_string[abi:ne180100]<0>(v435, "output_shape");
          v321 = std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::find[abi:ne180100]((uint64_t)&v422, (uint64_t)v435);
          if (v436 < 0)
            operator delete(*(void **)v435);
          if (v423 == (char **)v321 || *(_QWORD *)(v321 + 64) - *(_QWORD *)(v321 + 56) != 16)
            goto LABEL_549;
          std::string::basic_string[abi:ne180100]<0>(v435, "output_shape");
          v322 = MIL::IROperation::TryGetParameterValue();
          if (v436 < 0)
            operator delete(*(void **)v435);
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v322 + 40))(v322))
          {
LABEL_549:
            *(_QWORD *)v435 = 0;
LABEL_550:
            v411 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v446, (int *)3);
            v410 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v442, (int *)3);
            v409 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v448, (int *)6);
            v340 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::mps::PaddingStyle &>(v208, v397, &ArgValue, &v427, (uint64_t *)v435, &v411, &v410, &v409, &v416);
            if (!*(_DWORD *)(v340 + 36))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
            v413 = v340 - 16;
            if (*(_BYTE **)__p != &__p[16])
              free(*(void **)__p);
LABEL_553:
            if (OptionalArgValue)
            {
              *(_QWORD *)v435 = 0x200000001;
              *(_DWORD *)&v435[8] = 3;
              std::vector<int>::vector[abi:ne180100](__p, v435, 3uLL);
              v412 = 3;
              v341 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
              *(_QWORD *)v435 = mlir::RankedTensorType::get((uint64_t)&v412, 1, v341, 0);
              v342 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
              v411 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v342, v343, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
              v412 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v411);
              v344 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &OptionalArgValue, &v412);
              if (!*((_DWORD *)v344 + 9))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
              v411 = (uint64_t)v344 - 16;
              v410 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v413 + 8) & 0xFFFFFFFFFFFFFFF8));
              v345 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v411 + 8) & 0xFFFFFFFFFFFFFFF8));
              if ((uint64_t *)v410 != v345)
              {
                v346 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v208, v397, &v411, &v410);
                if (!*((_DWORD *)v346 + 9))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                v411 = (uint64_t)v346 - 16;
              }
              v347 = mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v208, v397, &v413, &v411);
              if (!*((_DWORD *)v347 + 9))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
              v413 = (uint64_t)v347 - 16;
              if (*(_QWORD *)__p)
              {
                *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                operator delete(*(void **)__p);
              }
            }
            (*(void (**)(_BYTE *__return_ptr, MILToMLIR *))(*(_QWORD *)this + 200))(__p, this);
            MILToMLIRRewriter::setValue(v263, *(__int128 **)__p, v413);
            std::vector<std::string>::~vector[abi:ne180100]((void **)__p);
            v348 = 1;
            v349 = (void *)v437;
            if ((_BYTE *)v437 != v438)
LABEL_562:
              free(v349);
LABEL_563:
            if ((v348 & 1) != 0)
              goto LABEL_611;
LABEL_359:
            v113 = 0;
            goto LABEL_360;
          }
          v323 = MIL::IRTensorValue::GetDataView<int>();
          v325 = v323;
          switch(v324)
          {
            case 1uLL:
              v379 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v323, 1uLL, 0);
              if (*(_DWORD *)&__p[8] >= 4u)
              {
                v328 = *(_QWORD *)__p;
                *(_DWORD *)(*(_QWORD *)__p + 12) = *v379;
                if (v320 <= 1)
                  goto LABEL_628;
                goto LABEL_621;
              }
              break;
            case 3uLL:
              v383 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v323, 3uLL, 0);
              if (*(_DWORD *)&__p[8] >= 3u)
              {
                *(_DWORD *)(*(_QWORD *)__p + 8) = *v383;
                v384 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v325, 3uLL, 1uLL);
                if (*(_DWORD *)&__p[8] >= 4u)
                {
                  *(_DWORD *)(*(_QWORD *)__p + 12) = *v384;
                  v385 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v325, 3uLL, 2uLL);
                  if (*(_DWORD *)&__p[8] >= 5u)
                  {
                    v328 = *(_QWORD *)__p;
                    *(_DWORD *)(*(_QWORD *)__p + 16) = *v385;
                    if (v320 <= 1)
                      goto LABEL_628;
                    goto LABEL_621;
                  }
                }
              }
              break;
            case 2uLL:
              v326 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v323, 2uLL, 0);
              if (*(_DWORD *)&__p[8] >= 3u)
              {
                *(_DWORD *)(*(_QWORD *)__p + 8) = *v326;
                v327 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v325, 2uLL, 1uLL);
                if (*(_DWORD *)&__p[8] >= 4u)
                {
                  v328 = *(_QWORD *)__p;
                  *(_DWORD *)(*(_QWORD *)__p + 12) = *v327;
                  if (v424 == 3)
                  {
                    if (v320 > 2)
                    {
                      v329 = 2;
LABEL_622:
                      *(_DWORD *)(v328 + 4) = *(_QWORD *)(v318 + 8 * v329);
                      v380 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v412);
                      v208 = v395;
                      v411 = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v380, v381, *(uint64_t *)__p, *(unsigned int *)&__p[8]);
                      v382 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v395, v397, (uint64_t **)&v411);
                      if (!*((_DWORD *)v382 + 9))
                        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                      *(_QWORD *)v435 = (char *)v382 - 16;
                      v263 = (uint64_t)v396;
                      goto LABEL_550;
                    }
                    goto LABEL_628;
                  }
                  if (v320 <= 1)
                  {
LABEL_628:
                    v386 = "Index < Length && \"Invalid index!\"";
                    v387 = 257;
                    v388 = "ArrayRef.h";
                    goto LABEL_681;
                  }
LABEL_621:
                  v329 = 1;
                  goto LABEL_622;
                }
              }
              break;
            default:
              if (v324 < 4)
                std::string::basic_string[abi:ne180100]<0>(v435, "Invalid output shape.");
              else
                std::string::basic_string[abi:ne180100]<0>(v435, "1d, 2d convolutions supported currently.");
              MILToMLIRRewriter::notifyFailure((uint64_t)v396, (uint64_t)this, v435);
              if (v436 < 0)
                operator delete(*(void **)v435);
              if (*(_BYTE **)__p != &__p[16])
                free(*(void **)__p);
              v348 = 0;
              v349 = (void *)v437;
              if ((_BYTE *)v437 != v438)
                goto LABEL_562;
              goto LABEL_563;
          }
          v386 = "idx < size()";
          v387 = 294;
          v388 = "SmallVector.h";
LABEL_681:
          __assert_rtn("operator[]", v388, v387, v386);
        }
LABEL_432:
        *(_QWORD *)__p = mlir::Type::dyn_cast<mlir::RankedTensorType>(*(_QWORD *)(v427 + 8) & 0xFFFFFFFFFFFFFFF8);
        v268 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        v270 = v269;
        v271 = v217;
        *(_QWORD *)__p = mlir::Type::dyn_cast<mlir::RankedTensorType>(*(_QWORD *)(ArgValue + 8) & 0xFFFFFFFFFFFFFFF8);
        v272 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
        v413 = -1;
        if (v270 == 5 && v273 == 5)
        {
          v274 = v272;
          v275 = v389 - 1;
          if (v390 == 1 && v268[2] == 1 && (v275 < 2 || !(_QWORD)v448))
          {
            v276 = 2;
          }
          else if (HIDWORD(v446) == 1 && v268[3] == 1 && (v275 < 2 || !*((_QWORD *)&v448 + 1)))
          {
            v276 = 3;
          }
          else
          {
            if (v447 != 1 || v268[4] != 1 || v275 >= 2 && v449)
              goto LABEL_461;
            v276 = 4;
          }
          v413 = v276;
          if (v399)
          {
            *(_QWORD *)__p = 1;
            v279 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
            v400[0] = (void *)mlir::RankedTensorType::get((uint64_t)__p, 1, v279, 0);
            *(_DWORD *)__p = v276;
            llvm::SmallVector<int,1u>::SmallVector(&v437, __p, 1);
            v280 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v400);
            *(_QWORD *)__p = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v280, v281, v437, DWORD2(v437));
            *(_QWORD *)&v430 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)__p);
            if (*(_QWORD *)v274 == 1)
            {
              *(_DWORD *)__p = 0;
              v282 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,long long &>(v208, v397, &ArgValue, (unsigned int *)__p, (unsigned int *)&v413);
              if (!*(_DWORD *)(v282 + 36))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
              ArgValue = v282 - 16;
              v283 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &ArgValue, &v430);
              if (!*((_DWORD *)v283 + 9))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
              ArgValue = (uint64_t)v283 - 16;
              goto LABEL_580;
            }
            *(_DWORD *)__p = v276 - 1;
            *(_DWORD *)v435 = v276;
            v350 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v208, v397, &ArgValue, (unsigned int *)__p, (unsigned int *)v435);
            if (*(_DWORD *)(v350 + 36))
            {
              ArgValue = v350 - 16;
              *(_DWORD *)__p = v276 - 2;
              if (v276 < 3)
                goto LABEL_577;
              *(_DWORD *)v435 = v276 - 1;
              v351 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v395, v397, &ArgValue, (unsigned int *)__p, (unsigned int *)v435);
              if (!*(_DWORD *)(v351 + 36))
                goto LABEL_674;
              ArgValue = v351 - 16;
              *(_DWORD *)__p = v276 - 3;
              if (v276 < 4)
              {
LABEL_577:
                *(_QWORD *)__p = 4;
                v208 = v395;
                v353 = mlir::Builder::getIntegerType(v395, 0x20u, 1);
                v412 = mlir::RankedTensorType::get((uint64_t)__p, 1, v353, 0);
                *(_DWORD *)v435 = *(_QWORD *)(v274 + 8 * v276) * *(_DWORD *)v274;
                *(int32x4_t *)&v435[4] = vuzp1q_s32(*(int32x4_t *)(v274 + 8), *(int32x4_t *)(v274 + 24));
                llvm::SmallVector<int,5u>::SmallVector(__p, v435, 5);
                llvm::SmallVectorImpl<int>::erase((uint64_t)__p, (char *)(*(_QWORD *)__p + 4 * v276));
                v354 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v412);
                v411 = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v354, v355, *(uint64_t *)__p, *(unsigned int *)&__p[8]);
                *(_QWORD *)v435 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v395, v397, (uint64_t **)&v411);
                v356 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v395, v397, &ArgValue, v435);
                if (!*((_DWORD *)v356 + 9))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                ArgValue = (uint64_t)v356 - 16;
                if (*(_BYTE **)__p != &__p[16])
                  free(*(void **)__p);
LABEL_580:
                v357 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, &v430);
                if (!*((_DWORD *)v357 + 9))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                v427 = (uint64_t)v357 - 16;
                v411 = SHIDWORD(v446);
                v412 = v447;
                v409 = SHIDWORD(v442);
                v410 = v443;
                v407 = SHIDWORD(v449);
                v408 = (int)v449;
                v405 = SHIDWORD(v448);
                v406 = SDWORD2(v448);
                if (v276 == 4)
                {
                  v411 = v390;
                  v412 = SHIDWORD(v446);
                  v409 = v271;
                  v410 = SHIDWORD(v442);
                  v407 = SHIDWORD(v448);
                  v408 = SDWORD2(v448);
                }
                else
                {
                  if (v276 != 3)
                  {
LABEL_592:
                    v366 = mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::Value &,mlir::Value &,int &,unsigned long &,unsigned long &,unsigned long &,unsigned long &,unsigned long &,unsigned long &,unsigned long &,unsigned long &,mlir::mps::PaddingStyle &,mlir::mps::TensorDataLayout &,mlir::mps::TensorDataLayout &>(v208, v397, &ArgValue, &v427, &v421, &v412, &v411, &v410, &v409, &v408, &v407, &v406, &v405, &v416, &v425, &v424);
                    if (!*(_DWORD *)(v366 + 36))
                      __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                    v404 = v366 - 16;
                    if (OptionalArgValue)
                    {
                      *(_QWORD *)__p = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v366 - 8) & 0xFFFFFFFFFFFFFFF8));
                      v367 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(OptionalArgValue + 8) & 0xFFFFFFFFFFFFFFF8));
                      if (*(_QWORD *)__p != v367)
                      {
                        v368 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v208, v397, &OptionalArgValue, (uint64_t *)__p);
                        if (!*((_DWORD *)v368 + 9))
                          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                        OptionalArgValue = (uint64_t)v368 - 16;
                      }
                      *(_DWORD *)v435 = 0;
                      v366 = mlir::OpBuilder::create<mlir::mps::BiasAddOp,mlir::Value &,mlir::Value &,mlir::mps::TensorDataLayout>((mlir::MLIRContext **)v208, v397, &v404, &OptionalArgValue, (int *)v435);
                      if (!*(_DWORD *)(v366 + 36))
                        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                      v404 = v366 - 16;
                    }
                    *(_QWORD *)__p = mlir::Type::dyn_cast_or_null<mlir::TensorType>(*(_QWORD *)(v366 - 8) & 0xFFFFFFFFFFFFFFF8);
                    v369 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
                    if (v370 != 4 || (v371 = *(_QWORD *)(v274 + 8 * v276), *(_QWORD *)v369 != v371 * *(_QWORD *)v274))
                      __assert_rtn("matchAndRewriteConv", "MILToMLIRCustomPatterns.mm", 652, "resultShape.size() == 4 && resultShape[0] == xShape[0] * xShape[batchLikeDimIndex]");
                    *(_DWORD *)v435 = *(_QWORD *)v274;
                    *(_DWORD *)&v435[4] = v371;
                    *(int32x2_t *)&v435[8] = vmovn_s64(*(int64x2_t *)(v369 + 8));
                    *(_DWORD *)&v435[16] = *(_QWORD *)(v369 + 24);
                    llvm::SmallVector<int,5u>::SmallVector(__p, v435, 5);
                    *(_QWORD *)v435 = 5;
                    v372 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
                    v403 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v435, 1, v372, 0);
                    v373 = mlir::Type::cast<mlir::ShapedType>(&v403);
                    *(_QWORD *)v435 = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v373, v374, *(uint64_t *)__p, *(unsigned int *)&__p[8]);
                    v402 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)v435);
                    v375 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v208, v397, &v404, &v402);
                    if (!*((_DWORD *)v375 + 9))
                      __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                    v404 = (uint64_t)v375 - 16;
                    *(_DWORD *)v435 = 1;
                    v401 = 2;
                    v376 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v208, v397, &v404, (unsigned int *)v435, &v401);
                    if (*(_DWORD *)(v376 + 36))
                    {
                      v404 = v376 - 16;
                      *(_DWORD *)v435 = 2;
                      if (v276 < 3)
                        goto LABEL_608;
                      v401 = 3;
                      v377 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v208, v397, &v404, (unsigned int *)v435, &v401);
                      if (*(_DWORD *)(v377 + 36))
                      {
                        v404 = v377 - 16;
                        *(_DWORD *)v435 = 3;
                        if (v276 < 4)
                          goto LABEL_608;
                        v401 = 4;
                        v378 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v208, v397, &v404, (unsigned int *)v435, &v401);
                        if (*(_DWORD *)(v378 + 36))
                        {
                          v404 = v378 - 16;
                          *(_DWORD *)v435 = 4;
LABEL_608:
                          (*(void (**)(_BYTE *__return_ptr, MILToMLIR *))(*(_QWORD *)this + 200))(v435, this);
                          MILToMLIRRewriter::setValue((uint64_t)v396, *(__int128 **)v435, v404);
                          std::vector<std::string>::~vector[abi:ne180100]((void **)v435);
                          if (*(_BYTE **)__p != &__p[16])
                            free(*(void **)__p);
                          v339 = (void *)v437;
                          if ((_BYTE *)v437 != v438)
                            goto LABEL_539;
                          goto LABEL_611;
                        }
                      }
                    }
                    __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                  }
                  v412 = v447;
                  v410 = v443;
                  v411 = v390;
                  v408 = (int)v449;
                  v409 = v271;
                  v407 = SHIDWORD(v449);
                }
                v405 = SDWORD1(v448);
                v406 = (int)v448;
                goto LABEL_592;
              }
              *(_DWORD *)v435 = v276 - 2;
              v352 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int &,int>(v395, v397, &ArgValue, (unsigned int *)__p, (unsigned int *)v435);
              if (*(_DWORD *)(v352 + 36))
              {
                ArgValue = v352 - 16;
                *(_DWORD *)__p = v276 - 4;
                goto LABEL_577;
              }
            }
LABEL_674:
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          }
        }
LABEL_461:
        v425 = 7;
        *(_QWORD *)__p = 5;
        v284 = mlir::IntegerType::get(*(_QWORD *)v208, 0x20u, 1u);
        v400[0] = (void *)mlir::RankedTensorType::get((uint64_t)__p, 1, v284, 0);
        *(_QWORD *)&v437 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v400);
        *((_QWORD *)&v437 + 1) = v285;
        *(_OWORD *)__p = xmmword_181286ED8;
        *(_DWORD *)&__p[16] = 0;
        *(_QWORD *)v435 = __p;
        *(_QWORD *)&v435[8] = 5;
        *(_QWORD *)&v430 = mlir::DenseIntElementsAttr::get<int>(&v437, (uint64_t *)v435);
        *(_QWORD *)__p = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v430);
        v286 = mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, (uint64_t)__p);
        if (!*(_DWORD *)(v286 + 36))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        v427 = v286 - 16;
        v424 = 10;
        v412 = 0;
        *(_QWORD *)&v287 = (int)v449;
        *((_QWORD *)&v287 + 1) = SHIDWORD(v449);
        v288 = v287;
        *(_QWORD *)&v287 = SDWORD2(v448);
        *((_QWORD *)&v287 + 1) = SHIDWORD(v448);
        *(_OWORD *)__p = v288;
        *(_OWORD *)&__p[16] = v287;
        *(_QWORD *)&v287 = (int)v448;
        *((_QWORD *)&v287 + 1) = SDWORD1(v448);
        v434 = v287;
        std::vector<unsigned long long>::vector[abi:ne180100](&v437, __p, 6uLL);
        *(_QWORD *)__p = v447;
        *(_QWORD *)&__p[8] = SHIDWORD(v446);
        *(_QWORD *)&__p[16] = v390;
        std::vector<unsigned long long>::vector[abi:ne180100](v435, __p, 3uLL);
        *(_QWORD *)__p = v443;
        *(_QWORD *)&__p[8] = SHIDWORD(v442);
        *(_QWORD *)&__p[16] = v271;
        std::vector<unsigned long long>::vector[abi:ne180100](v400, __p, 3uLL);
        if (v399)
        {
          v289 = mlir::OpBuilder::create<mlir::mps::Conv3DOp,mlir::Value &,mlir::Value &,int &,std::vector<unsigned long long> &,std::vector<unsigned long long> &,std::vector<unsigned long long> &,mlir::mps::PaddingStyle &,mlir::mps::TensorDataLayout &,mlir::mps::TensorDataLayout &>(v208, v397, &ArgValue, &v427, &v421, (uint64_t)v435, (uint64_t)v400, (uint64_t)&v437, &v416, &v425, &v424);
          if (!*(_DWORD *)(v289 + 36))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v412 = v289 - 16;
        }
        else
        {
          *(_QWORD *)__p = 5;
          v290 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          v411 = mlir::RankedTensorType::get((uint64_t)__p, 1, v290, 0);
          v430 = xmmword_181286EEC;
          v431 = 1;
          llvm::SmallVector<int,4u>::SmallVector(__p, &v430, 5);
          std::string::basic_string[abi:ne180100]<0>(&v430, "output_shape");
          v291 = std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::find[abi:ne180100]((uint64_t)&v422, (uint64_t)&v430);
          if (v432 < 0)
            operator delete((void *)v430);
          if (v423 == (char **)v291 || *(_QWORD *)(v291 + 64) - *(_QWORD *)(v291 + 56) != 16)
            goto LABEL_478;
          std::string::basic_string[abi:ne180100]<0>(&v430, "output_shape");
          v292 = MIL::IROperation::TryGetParameterValue();
          if (v432 < 0)
            operator delete((void *)v430);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v292 + 40))(v292))
          {
            v293 = MIL::IRTensorValue::GetDataView<int>();
            v295 = v294;
            if (v294)
            {
              v296 = v293;
              v297 = 0;
              do
              {
                v298 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v296, v295, v297);
                if (v297 >= *(unsigned int *)&__p[8])
                  __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
                *(_DWORD *)(*(_QWORD *)__p + 4 * v297++) = *v298;
              }
              while (v295 != v297);
            }
            v299 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v411);
            v410 = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v299, v300, *(uint64_t *)__p, *(unsigned int *)&__p[8]);
            v301 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v410);
            if (!*((_DWORD *)v301 + 9))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
            *(_QWORD *)&v430 = (char *)v301 - 16;
          }
          else
          {
LABEL_478:
            *(_QWORD *)&v430 = 0;
          }
          v302 = mlir::OpBuilder::create<mlir::mps::Conv3DDataGradientOp,mlir::Value &,mlir::Value &,mlir::Value &,int &,std::vector<unsigned long long> &,std::vector<unsigned long long> &,std::vector<unsigned long long> &,mlir::mps::PaddingStyle &,mlir::mps::TensorDataLayout &,mlir::mps::TensorDataLayout &>(v208, v397, &ArgValue, &v427, (uint64_t *)&v430, &v421, (uint64_t)v435, (uint64_t)v400, (uint64_t)&v437, &v416, &v425, &v424);
          if (!*(_DWORD *)(v302 + 36))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v412 = v302 - 16;
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
        }
        if (OptionalArgValue)
        {
          *(_QWORD *)&v430 = 0x200000001;
          DWORD2(v430) = 3;
          std::vector<int>::vector[abi:ne180100](__p, &v430, 3uLL);
          v411 = 3;
          v303 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
          *(_QWORD *)&v430 = mlir::RankedTensorType::get((uint64_t)&v411, 1, v303, 0);
          v304 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v430);
          v410 = mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v304, v305, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
          v411 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v410);
          v306 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &OptionalArgValue, &v411);
          if (!*((_DWORD *)v306 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v410 = (uint64_t)v306 - 16;
          v409 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v412 + 8) & 0xFFFFFFFFFFFFFFF8));
          v307 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v410 + 8) & 0xFFFFFFFFFFFFFFF8));
          if (v409 != v307)
          {
            v308 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v208, v397, &v410, &v409);
            if (!*((_DWORD *)v308 + 9))
              __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
            v410 = (uint64_t)v308 - 16;
          }
          v309 = mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>((mlir::Float32Type **)v208, v397, &v412, &v410);
          if (!*((_DWORD *)v309 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          v412 = (uint64_t)v309 - 16;
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p[8] = *(_QWORD *)__p;
            operator delete(*(void **)__p);
          }
        }
        (*(void (**)(_BYTE *__return_ptr, MILToMLIR *))(*(_QWORD *)this + 200))(__p, this);
        MILToMLIRRewriter::setValue((uint64_t)v396, *(__int128 **)__p, v412);
        std::vector<std::string>::~vector[abi:ne180100]((void **)__p);
        if (v400[0])
        {
          v400[1] = v400[0];
          operator delete(v400[0]);
        }
        if (*(_QWORD *)v435)
        {
          *(_QWORD *)&v435[8] = *(_QWORD *)v435;
          operator delete(*(void **)v435);
        }
        if ((_QWORD)v437)
        {
          *((_QWORD *)&v437 + 1) = v437;
          operator delete((void *)v437);
          v113 = 1;
          goto LABEL_360;
        }
        goto LABEL_611;
      }
      if (v87 != 3)
        goto LABEL_371;
      LODWORD(v437) = 2;
      std::vector<int>::vector[abi:ne180100](__p, &v437, 1uLL);
      *(_DWORD *)v435 = 2;
      std::vector<int>::vector[abi:ne180100](&v437, v435, 1uLL);
      v218 = (uint64_t)v396;
      v400[0] = (void *)1;
      v226 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
      *(_QWORD *)v435 = mlir::RankedTensorType::get((uint64_t)v400, 1, v226, 0);
      v227 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
      v400[0] = (void *)mlir::DenseIntElementsAttr::get<std::vector<int> &>((uint64_t)v227, v228, *(uint64_t *)__p, *(uint64_t *)&__p[8]);
      v415 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)v400);
      v229 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &ArgValue, &v415);
      if (!*((_DWORD *)v229 + 9))
        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
      ArgValue = (uint64_t)v229 - 16;
      v230 = mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, &v427, &v415);
      if (!*((_DWORD *)v230 + 9))
        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
      v427 = (uint64_t)v230 - 16;
      if ((_QWORD)v437)
      {
        *((_QWORD *)&v437 + 1) = v437;
        operator delete((void *)v437);
      }
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (v399)
      {
        *(_QWORD *)&v437 = 0;
        v231 = 1;
        goto LABEL_387;
      }
      v393 = 1;
LABEL_408:
      *(_QWORD *)__p = 4;
      v251 = mlir::Builder::getIntegerType(v208, 0x20u, 1);
      *(_QWORD *)v435 = mlir::RankedTensorType::get((uint64_t)__p, 1, v251, 0);
      v437 = xmmword_181286A50;
      llvm::SmallVector<int,4u>::SmallVector(__p, &v437, 4);
      std::string::basic_string[abi:ne180100]<0>(&v437, "output_shape");
      v252 = std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::find[abi:ne180100]((uint64_t)&v422, (uint64_t)&v437);
      if (v439 < 0)
        operator delete((void *)v437);
      if (v423 != (char **)v252 && *(_QWORD *)(v252 + 64) - *(_QWORD *)(v252 + 56) == 16)
      {
        std::string::basic_string[abi:ne180100]<0>(&v437, "output_shape");
        v253 = MIL::IROperation::TryGetParameterValue();
        if (v439 < 0)
          operator delete((void *)v437);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v253 + 40))(v253))
        {
          v254 = MIL::IRTensorValue::GetDataView<int>();
          v256 = v254;
          if (v255 == 3)
          {
            v330 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v254, 3uLL, 2uLL);
            if (*(_DWORD *)&__p[8] < 4u)
              goto LABEL_649;
            *(_DWORD *)(*(_QWORD *)__p + 12) = *v330;
            v331 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v256, 3uLL, 1uLL);
            if (*(_DWORD *)&__p[8] < 2u)
              goto LABEL_649;
            *(_DWORD *)(*(_QWORD *)__p + 4) = *v331;
            v260 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v256, 3uLL, 0);
LABEL_524:
            if (*(_DWORD *)&__p[8])
            {
              **(_DWORD **)__p = *v260;
              goto LABEL_526;
            }
LABEL_649:
            __assert_rtn("operator[]", "SmallVector.h", 294, "idx < size()");
          }
          if (v255 == 4)
          {
            v257 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v254, 4uLL, 2uLL);
            if (*(_DWORD *)&__p[8] < 3u)
              goto LABEL_649;
            *(_DWORD *)(*(_QWORD *)__p + 8) = *v257;
            v258 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v256, 4uLL, 3uLL);
            if (*(_DWORD *)&__p[8] < 4u)
              goto LABEL_649;
            *(_DWORD *)(*(_QWORD *)__p + 12) = *v258;
            v259 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v256, 4uLL, 1uLL);
            if (*(_DWORD *)&__p[8] < 2u)
              goto LABEL_649;
            *(_DWORD *)(*(_QWORD *)__p + 4) = *v259;
            v260 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](v256, 4uLL, 0);
            goto LABEL_524;
          }
          if (v255 < 5)
          {
            if (v255)
            {
LABEL_526:
              v332 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)v435);
              *(_QWORD *)&v437 = mlir::DenseIntElementsAttr::get<llvm::SmallVector<int,4u> &>((uint64_t)v332, v333, *(uint64_t *)__p, *(unsigned int *)&__p[8]);
              v334 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v208, v397, (uint64_t **)&v437);
              if (!*((_DWORD *)v334 + 9))
                __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
              v400[0] = (char *)v334 - 16;
              *(_QWORD *)&v430 = 0;
              if (!v209)
                goto LABEL_528;
              goto LABEL_422;
            }
            std::string::basic_string[abi:ne180100]<0>(&v437, "Invalid output shape.");
            MILToMLIRRewriter::notifyFailure(v218, (uint64_t)this, (const std::string::value_type *)&v437);
            if ((v439 & 0x80000000) == 0)
              goto LABEL_568;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v437, "1d, 2d convolutions supported currently.");
            MILToMLIRRewriter::notifyFailure(v218, (uint64_t)this, (const std::string::value_type *)&v437);
            if ((v439 & 0x80000000) == 0)
              goto LABEL_568;
          }
          operator delete((void *)v437);
LABEL_568:
          if (*(_BYTE **)__p != &__p[16])
            free(*(void **)__p);
          goto LABEL_359;
        }
      }
      v400[0] = 0;
      *(_QWORD *)&v430 = 0;
      if (!v209)
      {
LABEL_528:
        v261 = mlir::OpBuilder::create<mlir::mps::Conv2DDataGradientOp,mlir::Value &,mlir::Value &,mlir::Value &,int &,int &,int &,int &,int &,int &,int &,int &,int &,mlir::mps::PaddingStyle &,mlir::mps::TensorDataLayout &,mlir::mps::TensorDataLayout &>(v208, v397, &ArgValue, &v427, (uint64_t *)v400, &v421, (int *)&v446 + 1, (int *)&v446, (int *)&v442 + 1, (int *)&v442, (int *)&v451 + 1, (int *)&v450 + 1, (int *)&v451, (int *)&v450, &v416, &v425, &v424);
        if (!*(_DWORD *)(v261 + 36))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        goto LABEL_529;
      }
LABEL_422:
      *(_QWORD *)&v437 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v444, (int *)3);
      v413 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v440, (int *)3);
      v412 = MILToMLIR::arrayToU64Attr(v208, (mlir::OpBuilder *)&v448, (int *)6);
      v261 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::mps::PaddingStyle &,int &>(v208, v397, &ArgValue, &v427, (uint64_t *)v400, (uint64_t *)&v437, &v413, &v412, &v416, &v414);
      if (!*(_DWORD *)(v261 + 36))
        __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
LABEL_529:
      *(_QWORD *)&v430 = v261 - 16;
      if (OptionalArgValue)
      {
        *(_QWORD *)&v437 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v261 - 8) & 0xFFFFFFFFFFFFFFF8));
        v335 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(OptionalArgValue + 8) & 0xFFFFFFFFFFFFFFF8));
        if ((_QWORD)v437 != v335)
        {
          v336 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)v208, v397, &OptionalArgValue, (uint64_t *)&v437);
          if (!*((_DWORD *)v336 + 9))
            __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
          OptionalArgValue = (uint64_t)v336 - 16;
        }
        LODWORD(v413) = 0;
        v337 = mlir::OpBuilder::create<mlir::mps::BiasAddOp,mlir::Value &,mlir::Value &,mlir::mps::TensorDataLayout>((mlir::MLIRContext **)v208, v397, (uint64_t *)&v430, &OptionalArgValue, (int *)&v413);
        if (!*(_DWORD *)(v337 + 36))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        *(_QWORD *)&v430 = v337 - 16;
      }
      if (v393)
      {
        v338 = mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(v208, v397, (uint64_t *)&v430, &v415);
        if (!*((_DWORD *)v338 + 9))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        *(_QWORD *)&v430 = (char *)v338 - 16;
      }
      (*(void (**)(__int128 *__return_ptr, MILToMLIR *))(*(_QWORD *)this + 200))(&v437, this);
      MILToMLIRRewriter::setValue(v218, (__int128 *)v437, v430);
      std::vector<std::string>::~vector[abi:ne180100]((void **)&v437);
      v339 = *(void **)__p;
      if (*(_BYTE **)__p != &__p[16])
      {
LABEL_539:
        free(v339);
        v113 = 1;
        goto LABEL_360;
      }
LABEL_611:
      v113 = 1;
LABEL_360:
      if (v419 < 0)
        operator delete(v417);
LABEL_171:
      if (__s2 != (_QWORD *)v454)
        free(__s2);
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v422, v423[0]);
      if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v429.__r_.__value_.__l.__data_);
      return v113;
    case 10:
      if (*(_QWORD *)v417 != 0x776F6C5F656D6173 || *((_WORD *)v417 + 4) != 29285)
        goto LABEL_683;
LABEL_248:
      v118 = 4;
      v119 = 4;
LABEL_255:
      v389 = v119;
      v416 = v118;
      v450 = 0;
      v451 = 0;
      v448 = 0uLL;
      v449 = 0;
      goto LABEL_256;
    default:
LABEL_683:
      __assert_rtn("matchAndRewriteConv", "MILToMLIRCustomPatterns.mm", 142, "0 && \"Unknown padding style\"");
  }
}

void sub_180DF7004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a64;
  void *a70;
  char a72;
  uint64_t v72;
  void *v74;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if ((unint64_t *)STACK[0x210] != &STACK[0x220])
    free((void *)STACK[0x210]);
  if ((unint64_t *)STACK[0x260] != &STACK[0x270])
    free((void *)STACK[0x260]);
  if (a60 < 0)
    operator delete(a55);
  v74 = *(void **)(v72 - 152);
  if (v74 != (void *)a33)
    free(v74);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a63, (char *)a64);
  if (a72 < 0)
    operator delete(a70);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t MILToMLIR::PadPattern::matchAndRewrite(MILToMLIR::PadPattern *this, const MIL::IROperation *a2, mlir::StringAttr **a3)
{
  uint64_t LocationForOp;
  const void ***v6;
  const void **v7;
  const void ***v8;
  uint64_t *v9;
  const void **v10;
  char *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  const void ***v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t *v24;
  size_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t **v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  size_t v36;
  _BOOL4 v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t ParameterValue;
  uint64_t Data;
  unint64_t v46;
  unint64_t v47;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t Context;
  uint64_t v54;
  uint64_t **v55;
  uint64_t InterfaceFor;
  const char *v57;
  int v58;
  const char *v59;
  const char *v60;
  std::vector<int>::pointer begin;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int *v66;
  unint64_t v67;
  uint64_t v68;
  __int128 *v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  int *v73;
  int *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t *v85;
  unint64_t v86;
  int v87;
  uint64_t *v88;
  size_t v89;
  _BOOL4 v90;
  int v91;
  uint64_t **v92;
  uint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  size_t v100;
  _BOOL4 v101;
  int v102;
  _BOOL4 v103;
  uint64_t **v104;
  BOOL v105;
  int v106;
  mlir::Float32Type *v108;
  mlir::MLIRContext *v109;
  uint64_t v110;
  uint64_t *v111;
  mlir::GenericProgramPoint *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  std::runtime_error *exception;
  uint64_t v120;
  mlir::OpBuilder *v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t OptionalArgValue;
  uint64_t ArgValue;
  std::vector<int> __src;
  uint64_t __s2;
  __int128 v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  LocationForOp = MILToMLIRRewriter::getLocationForOp(a3, a2);
  ArgValue = MILToMLIRRewriter::getArgValue((int8x8_t *)a3, a2, "x");
  v128 = 0;
  OptionalArgValue = MILToMLIRRewriter::getOptionalArgValue((int8x8_t *)a3, a2, "constant_val");
  v6 = (const void ***)(*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 160))(a2);
  v126 = 0;
  v127 = 0;
  v125 = &v126;
  v8 = v6 + 1;
  v7 = *v6;
  if (*v6 == (const void **)(v6 + 1))
    goto LABEL_54;
  v121 = (mlir::OpBuilder *)(a3 + 13);
  do
  {
    v9 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__find_equal<std::string>((uint64_t **)&v125, (uint64_t *)&v126, (uint64_t **)&__s2, (uint64_t **)&__src, v7 + 4);
    if (*v9)
    {
      v10 = (const void **)v7[1];
      if (!v10)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)operator new(0x50uLL);
      v12 = (uint64_t *)v11;
      if (*((char *)v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v11 + 32), (const std::string::value_type *)v7[4], (std::string::size_type)v7[5]);
      }
      else
      {
        v13 = *((_OWORD *)v7 + 2);
        *((_QWORD *)v11 + 6) = v7[6];
        *((_OWORD *)v11 + 2) = v13;
      }
      std::vector<std::shared_ptr<MIL::IRArgument>>::vector(v12 + 7, (uint64_t)(v7 + 7));
      v14 = __s2;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v14;
      *v9 = (uint64_t)v12;
      if (*v125)
      {
        v125 = (uint64_t **)*v125;
        v12 = (uint64_t *)*v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v126, v12);
      ++v127;
      v10 = (const void **)v7[1];
      if (!v10)
      {
        do
        {
LABEL_15:
          v15 = (const void ***)v7[2];
          v105 = *v15 == v7;
          v7 = (const void **)v15;
        }
        while (!v105);
        goto LABEL_3;
      }
    }
    do
    {
      v15 = (const void ***)v10;
      v10 = (const void **)*v10;
    }
    while (v10);
LABEL_3:
    v7 = (const void **)v15;
  }
  while (v15 != v8);
  v16 = v126;
  HIBYTE(v133) = 3;
  LODWORD(__s2) = 6578544;
  if (v126)
  {
    v17 = &v126;
    do
    {
      v18 = v16;
      v19 = v17;
      v21 = v16 + 4;
      v20 = (uint64_t *)v16[4];
      v22 = *((unsigned __int8 *)v16 + 55);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = v18[5];
      if (v23 >= 0)
        v24 = v21;
      else
        v24 = v20;
      if (v22 >= 3)
        v25 = 3;
      else
        v25 = v22;
      v26 = v22 < 3;
      v27 = memcmp(v24, &__s2, v25);
      if (v27)
        v26 = v27 < 0;
      if (v26)
        v28 = (uint64_t **)(v18 + 1);
      else
        v28 = (uint64_t **)v18;
      if (v26)
        v17 = v19;
      else
        v17 = (uint64_t **)v18;
      v16 = *v28;
    }
    while (v16);
    if (v17 != &v126)
    {
      v29 = (uint64_t *)(v19 + 4);
      if (v26)
        v30 = v19;
      else
        v30 = v18;
      if (!v26)
        v29 = v21;
      v31 = *((unsigned __int8 *)v17 + 55);
      v32 = (char)v31;
      v34 = (uint64_t *)v30[4];
      v33 = v30[5];
      if ((v31 & 0x80u) != 0)
        v31 = v33;
      if (v32 >= 0)
        v35 = v29;
      else
        v35 = v34;
      if (v31 >= 3)
        v36 = 3;
      else
        v36 = v31;
      v37 = v31 > 3;
      v38 = memcmp(&__s2, v35, v36);
      v39 = v38 < 0;
      if (!v38)
        v39 = v37;
      if (!v39)
      {
        if (v26)
          v43 = v19;
        else
          v43 = v18;
        if (v43[8] - v43[7] != 16)
        {
          __s2 = (uint64_t)operator new(0x28uLL);
          v133 = xmmword_181286A40;
          strcpy((char *)__s2, "Unexpected argument size for 'pad'");
          v40 = MILToMLIRRewriter::notifyFailure((uint64_t)a3, (uint64_t)a2, (const std::string::value_type *)&__s2);
          goto LABEL_55;
        }
        HIBYTE(v133) = 3;
        LODWORD(__s2) = 6578544;
        ParameterValue = MIL::IROperation::TryGetParameterValue();
        if (SHIBYTE(v133) < 0)
          operator delete((void *)__s2);
        if (!ParameterValue)
        {
          __s2 = (uint64_t)operator new(0x28uLL);
          v133 = xmmword_181261450;
          strcpy((char *)__s2, "Couldn't get value for parameter: \"pad\"");
          v40 = MILToMLIRRewriter::notifyFailure((uint64_t)a3, (uint64_t)a2, (const std::string::value_type *)&__s2);
          goto LABEL_55;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)ParameterValue + 40))(ParameterValue);
        Data = MIL::IRTensorValue::GetDataView<int>();
        v47 = v46;
        HIBYTE(v133) = 1;
        LOWORD(__s2) = 120;
        ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
        v49 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
        v50 = MIL::IRTensorValueType::Rank(v49);
        if (SHIBYTE(v133) < 0)
          operator delete((void *)__s2);
        __src.__begin_ = (std::vector<int>::pointer)v50;
        __src.__end_ = (std::vector<int>::pointer)2;
        __s2 = (uint64_t)&v133 + 8;
        *(_QWORD *)&v133 = 0x200000000;
        llvm::SmallVectorImpl<long long>::append<long long const*,void>((uint64_t)&__s2, &__src, &__src.__end_cap_);
        v51 = (uint64_t *)__s2;
        v52 = v133;
        v120 = ArgValue;
        __src.__begin_ = (std::vector<int>::pointer)(*(_QWORD *)(ArgValue + 8) & 0xFFFFFFFFFFFFFFF8);
        Context = mlir::Attribute::getContext((mlir::Attribute *)&__src);
        v54 = mlir::IntegerType::get(Context, 0x20u, 1u);
        v55 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)v51, v52, v54, 0);
        if (!mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v55))
        {
          v57 = "isa<To>(Val) && \"cast<Ty>() argument of incompatible type!\"";
          v58 = 566;
          v59 = "Casting.h";
          v60 = "cast";
LABEL_193:
          __assert_rtn(v60, v59, v58, v57);
        }
        if (v55)
        {
          InterfaceFor = mlir::TypeInterface<mlir::ShapedType,mlir::detail::ShapedTypeInterfaceTraits>::getInterfaceFor(v55);
          if (!InterfaceFor)
          {
            v57 = "(!t || conceptImpl) && \"expected value to provide interface instance\"";
            v58 = 98;
            v59 = "InterfaceSupport.h";
            v60 = "Interface";
            goto LABEL_193;
          }
        }
        else
        {
          InterfaceFor = 0;
        }
        v123 = v55;
        v124 = InterfaceFor;
        memset(&__src, 0, sizeof(__src));
        std::vector<int>::__append(&__src, 0x20uLL);
        begin = __src.__begin_;
        if (v50 <= 0)
          v62 = 0;
        else
          v62 = 2 * (v50 - (v47 >> 1));
        if (v62)
        {
          bzero(__src.__begin_, 4 * v62);
          begin = __src.__begin_;
        }
        v63 = v47 & 0xFFFFFFFFFFFFFFFELL;
        if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          v64 = v63 - 1;
          if (v47 < v63 - 1)
            v64 = v47;
          v65 = v64 + 1;
          if (v65 > 8 && (v66 = &begin[v62], (unint64_t)v66 - Data >= 0x20))
          {
            v68 = v65 & 7;
            if ((v65 & 7) == 0)
              v68 = 8;
            v67 = v65 - v68;
            v69 = (__int128 *)(Data + 16);
            v70 = v66 + 4;
            v71 = v67;
            do
            {
              v72 = *v69;
              *(v70 - 1) = *(v69 - 1);
              *v70 = v72;
              v69 += 2;
              v70 += 2;
              v71 -= 8;
            }
            while (v71);
          }
          else
          {
            v67 = 0;
          }
          v73 = (int *)(Data + 4 * v67);
          v74 = &begin[v62 + v67];
          v75 = v67 - v63;
          v76 = v47 - v67;
          do
          {
            if (!v76)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "index out of bounds");
              exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
              __cxa_throw(exception, (struct type_info *)off_1E0DF5DB8, MEMORY[0x1E0DE42B0]);
            }
            v77 = *v73++;
            *v74++ = v77;
            --v76;
          }
          while (!__CFADD__(v75++, 1));
        }
        v122 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v123, v124, begin, 8 * v50, 4, 1, 1);
        v79 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ShapedType &,mlir::DenseElementsAttr &>(v121, LocationForOp, (uint64_t *)&v123, &v122);
        if (!*(_DWORD *)(v79 + 36))
          __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
        v128 = v79 - 16;
        if (__src.__begin_)
        {
          __src.__end_ = __src.__begin_;
          operator delete(__src.__begin_);
        }
        if ((__int128 *)__s2 != (__int128 *)((char *)&v133 + 8))
          free((void *)__s2);
        HIBYTE(v133) = 4;
        strcpy((char *)&__s2, "mode");
        v80 = v126;
        if (!v126)
          goto LABEL_160;
        v81 = &v126;
        do
        {
          v82 = v80;
          v83 = v81;
          v85 = v80 + 4;
          v84 = (uint64_t *)v80[4];
          v86 = *((unsigned __int8 *)v80 + 55);
          v87 = (char)v86;
          if ((v86 & 0x80u) != 0)
            v86 = v82[5];
          if (v87 >= 0)
            v88 = v85;
          else
            v88 = v84;
          if (v86 >= 4)
            v89 = 4;
          else
            v89 = v86;
          v90 = v86 < 4;
          v91 = memcmp(v88, &__s2, v89);
          if (v91)
            v90 = v91 < 0;
          if (v90)
            v92 = (uint64_t **)(v82 + 1);
          else
            v92 = (uint64_t **)v82;
          if (v90)
            v81 = v83;
          else
            v81 = (uint64_t **)v82;
          v80 = *v92;
        }
        while (v80);
        if (v81 == &v126)
          goto LABEL_160;
        v93 = (uint64_t *)(v83 + 4);
        if (v90)
          v94 = v83;
        else
          v94 = v82;
        if (!v90)
          v93 = v85;
        v95 = *((unsigned __int8 *)v81 + 55);
        v96 = (char)v95;
        v98 = (uint64_t *)v94[4];
        v97 = v94[5];
        if ((v95 & 0x80u) != 0)
          v95 = v97;
        if (v96 >= 0)
          v99 = v93;
        else
          v99 = v98;
        if (v95 >= 4)
          v100 = 4;
        else
          v100 = v95;
        v101 = v95 > 4;
        v102 = memcmp(&__s2, v99, v100);
        v103 = v102 < 0;
        if (!v102)
          v103 = v101;
        if (v103)
          goto LABEL_160;
        v104 = v90 ? v83 : (uint64_t **)v82;
        if ((char *)v104[8] - (char *)v104[7] != 16)
          goto LABEL_160;
        HIBYTE(v133) = 4;
        strcpy((char *)&__s2, "mode");
        MIL::IROperation::TryGetParameterValue();
        if (SHIBYTE(v133) < 0)
          operator delete((void *)__s2);
        MIL::IRValue::GetScalar<std::string>();
        if (SHIBYTE(v133) < 0)
        {
          if ((_QWORD)v133 == 7)
          {
            if (*(_DWORD *)__s2 == 1818649970 && *(_DWORD *)(__s2 + 3) == 1952671084)
            {
              v106 = 1;
              operator delete((void *)__s2);
              goto LABEL_161;
            }
          }
          else
          {
            if ((_QWORD)v133 == 8)
            {
              if (*(_QWORD *)__s2 != 0x746E6174736E6F63)
                goto LABEL_198;
              v106 = 0;
              operator delete((void *)__s2);
              goto LABEL_161;
            }
            if ((_QWORD)v133 == 9 && *(_QWORD *)__s2 == 0x746163696C706572 && *(_BYTE *)(__s2 + 8) == 101)
            {
              v106 = 3;
              operator delete((void *)__s2);
              goto LABEL_161;
            }
          }
        }
        else
        {
          if (HIBYTE(v133) != 7)
          {
            if (HIBYTE(v133) != 8)
            {
              if (HIBYTE(v133) != 9)
                goto LABEL_198;
              v105 = __s2 == 0x746163696C706572 && v133 == 101;
              if (!v105)
                goto LABEL_198;
              v106 = 3;
LABEL_161:
              if (!OptionalArgValue)
              {
                __s2 = *(_QWORD *)(v120 + 8) & 0xFFFFFFFFFFFFFFF8;
                v108 = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&__s2);
                v110 = mlir::Float32Type::get(v108, v109);
                __s2 = 1;
                v111 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&__s2, 1, v110, 0);
                __s2 = mlir::mps::getConstantAttr<int>(v111, 0);
                v112 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v121, LocationForOp, (uint64_t **)&__s2);
                if (!*((_DWORD *)v112 + 9))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                OptionalArgValue = (uint64_t)v112 - 16;
              }
              if ((*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 192))(a2) == 1)
              {
                LODWORD(__s2) = v106;
                v113 = mlir::OpBuilder::create<mlir::mps::PadOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::mps::PaddingMode>((mlir::MLIRContext **)v121, LocationForOp, &ArgValue, &v128, &OptionalArgValue, (unsigned int *)&__s2);
                if (!*(_DWORD *)(v113 + 36))
                  __assert_rtn("getOpResultImpl", "Operation.h", 984, "resultNumber < getNumResults() && \"Result number is out of range for operation\"");
                (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a2 + 200))(&__s2, a2);
                MILToMLIRRewriter::setValue((uint64_t)a3, (__int128 *)__s2, v113 - 16);
                v114 = __s2;
                if (__s2)
                {
                  v115 = v133;
                  v116 = (uint64_t *)__s2;
                  if ((_QWORD)v133 != __s2)
                  {
                    do
                    {
                      if (*(char *)(v115 - 1) < 0)
                        operator delete(*(void **)(v115 - 24));
                      v115 -= 24;
                    }
                    while (v115 != v114);
                    v116 = (uint64_t *)__s2;
                  }
                  *(_QWORD *)&v133 = v114;
                  operator delete(v116);
                }
                v41 = 1;
              }
              else
              {
                __s2 = (uint64_t)operator new(0x40uLL);
                v133 = xmmword_18125E6C0;
                strcpy((char *)__s2, "The number of outputs does not match the number of results.");
                MILToMLIRRewriter::notifyFailure((uint64_t)a3, (uint64_t)a2, (const std::string::value_type *)&__s2);
                if (SHIBYTE(v133) < 0)
                  operator delete((void *)__s2);
                v41 = 0;
              }
              goto LABEL_57;
            }
            if (__s2 != 0x746E6174736E6F63)
              goto LABEL_198;
LABEL_160:
            v106 = 0;
            goto LABEL_161;
          }
          if ((_DWORD)__s2 == 1818649970 && *(_DWORD *)((char *)&__s2 + 3) == 1952671084)
          {
            v106 = 1;
            goto LABEL_161;
          }
        }
LABEL_198:
        __assert_rtn("matchAndRewrite", "MILToMLIRCustomPatterns.mm", 827, "0 && \"Unknown padding mode\"");
      }
    }
  }
LABEL_54:
  __s2 = (uint64_t)operator new(0x30uLL);
  v133 = xmmword_1812674D0;
  strcpy((char *)__s2, "Could not find parameter with name 'pad'.");
  v40 = MILToMLIRRewriter::notifyFailure((uint64_t)a3, (uint64_t)a2, (const std::string::value_type *)&__s2);
LABEL_55:
  v41 = v40;
  if (SHIBYTE(v133) < 0)
    operator delete((void *)__s2);
LABEL_57:
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v125, (char *)v126);
  return v41;
}

void sub_180DF81DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::find[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  v7 = a1 + 8;
  do
  {
    v8 = *(char *)(v3 + 55);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 55);
    else
      v9 = *(_QWORD *)(v3 + 40);
    if (v8 >= 0)
      v10 = (const void *)(v3 + 32);
    else
      v10 = *(const void **)(v3 + 32);
    if (v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v12 = memcmp(v10, v6, v11);
    v13 = v9 < v5;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v7 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v7 == v2)
    return v2;
  v16 = *(char *)(v7 + 55);
  v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
  v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  v19 = v17 >= v5 ? v5 : v17;
  v20 = memcmp(v6, v18, v19);
  v21 = v5 < v17;
  if (v20)
    v21 = v20 < 0;
  if (v21)
    return v2;
  return v7;
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;
  BOOL v3;
  std::vector<int>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::operator[](uint64_t a1, unint64_t a2, unint64_t a3)
{
  std::runtime_error *exception;

  if (a2 <= a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception);
    __cxa_throw(exception, (struct type_info *)off_1E0DF5DB8, MEMORY[0x1E0DE42B0]);
  }
  return a1 + 4 * a3;
}

void sub_180DF84C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ShapedType &,mlir::DenseElementsAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v14;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _BYTE v25[40];
  _QWORD v26[39];

  v26[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"mps.constant";
    v23[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a3;
  v12 = mlir::Attribute::cast<mlir::ElementsAttr>(a4);
  mlir::mps::ConstantOp::build((uint64_t)a1, (uint64_t)v26, v11, v12);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v26);
  if (!v13)
  {
    v16 = "detail::isPresent(Val) && \"dyn_cast on a non-existent value\"";
    v17 = 662;
    v18 = "Casting.h";
    v19 = "dyn_cast";
    goto LABEL_8;
  }
  v14 = llvm::DefaultDoCastIfPossible<mlir::mps::ConstantOp,mlir::Operation *,llvm::CastInfo<mlir::mps::ConstantOp,mlir::Operation *,void>>::doCastIfPossible((uint64_t)v13);
  if (!v14)
  {
    v16 = "result && \"builder didn't return the right type\"";
    v17 = 497;
    v18 = "Builders.h";
    v19 = "create";
LABEL_8:
    __assert_rtn(v19, v18, v17, v16);
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v14;
}

